#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _454;
float _3456;
float _3457;
float _3458;
float _3459;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _367 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _389 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _401 = cbMtdParam._m0[28u].z + _282;
    float _402 = cbMtdParam._m0[28u].w + _283;
    float _403 = cbMtdParam._m0[29u].x + _284;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_382 * _212, _382 * _213, _382 * _214));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_389 * _226, _389 * _227, _389 * _228));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _423 * _419;
    float _429 = ((cbMtdParam._m0[25u].y * _417) * _423) + (((_367.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _430 = ((cbMtdParam._m0[25u].z * _418) * _423) + (((_367.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _433 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _434 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _452;
    float _455;
    float _457;
    if (_429 > 0.0)
    {
        float _438 = (1.0 - _433) / _429;
        _452 = _438;
        _455 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_438 * _424)) * 0.16666667163372039794921875;
        _457 = (fract((_438 * _430) + _434) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_429 < 0.0)
        {
            float _453 = ((-0.0) - _433) / _429;
            frontier_phi_3_2_ladder = _453;
            frontier_phi_3_2_ladder_1 = (fract((_453 * _430) + _434) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_453 * _424) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _454;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _452 = frontier_phi_3_2_ladder;
        _455 = frontier_phi_3_2_ladder_2;
        _457 = frontier_phi_3_2_ladder_1;
    }
    float _483;
    float _485;
    float _487;
    if (_430 > 0.0)
    {
        float _470 = (1.0 - _434) / _430;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_470 < _452)
        {
            frontier_phi_8_5_ladder = (fract(_470 * _424) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_470 * _429) + _433) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _470;
        }
        else
        {
            frontier_phi_8_5_ladder = _457;
            frontier_phi_8_5_ladder_1 = _455;
            frontier_phi_8_5_ladder_2 = _452;
        }
        _483 = frontier_phi_8_5_ladder_2;
        _485 = frontier_phi_8_5_ladder_1;
        _487 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_430 < 0.0)
        {
            float _484 = ((-0.0) - _434) / _430;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_484 < _452)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_484 * _424) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_484 * _429) + _433) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _484;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _457;
                frontier_phi_8_6_ladder_9_ladder_1 = _455;
                frontier_phi_8_6_ladder_9_ladder_2 = _452;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _457;
            frontier_phi_8_6_ladder_1 = _455;
            frontier_phi_8_6_ladder_2 = _452;
        }
        _483 = frontier_phi_8_6_ladder_2;
        _485 = frontier_phi_8_6_ladder_1;
        _487 = frontier_phi_8_6_ladder;
    }
    float _491 = (_424 > 0.0) ? (cbMtdParam._m0[20u].z / _424) : 5000.0;
    float _504;
    float _505;
    if (_491 < _483)
    {
        _504 = ((_433 + cbMtdParam._m0[22u].x) + (_491 * _429)) * 0.16666667163372039794921875;
        _505 = (((_491 * _430) + _434) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _504 = _485;
        _505 = _487;
    }
    vec4 _507 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_504, _505));
    float _515 = _301 * 0.1500000059604644775390625;
    float _523 = (_515 * ((_507.x * _301) - _336)) + _336;
    float _524 = (_515 * ((_507.y * _301) - _338)) + _338;
    float _525 = (_515 * ((_507.z * _301) - _340)) + _340;
    vec4 _538 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _538.z;
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3468 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    vec4 _579 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _584 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _590 = ((_579.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _592 = (-0.0) - (cbMtdParam._m0[21u].x * ((_579.x * 0.5) + (-0.25)));
    float _593 = fract(_584);
    float _595 = fract(_584 + 0.5);
    vec4 _622 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_593 * _592) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_590 * _593) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _624 = _622.x;
    float _630 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_595 * _592) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_590 * _595) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _624) * abs((_593 * 2.0) + (-1.0))) + _624;
    float _644 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _648 = fract(abs(_644));
    float _654 = sin(cbMtdParam._m0[21u].z);
    float _655 = cos(cbMtdParam._m0[21u].z);
    float _656 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _657 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _687 = abs(cbMtdParam._m0[20u].w * (((_630 - (((_644 >= ((-0.0) - _644)) ? _648 : ((-0.0) - _648)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_657, (-0.0) - _654, _655 * _656) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_657, _655, _656 * _654) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _691 = (((_687 * cbMtdParam._m0[18u].y) - _630) * _687) + _630;
    float _3479 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    vec4 _704 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _719 = (cbMtdParam._m0[14u].x * _704.x) * cbMtdParam._m0[19u].x;
    float _720 = (cbMtdParam._m0[14u].y * _704.y) * cbMtdParam._m0[19u].x;
    float _721 = (cbMtdParam._m0[14u].z * _704.z) * cbMtdParam._m0[19u].x;
    float _731 = exp2(log2(_692) * cbMtdParam._m0[20u].x);
    float _744 = fma(_552, _219, fma(_546, _226, _545 * _212));
    float _747 = fma(_552, _220, fma(_546, _227, _545 * _213));
    float _750 = fma(_552, _221, fma(_546, _228, _545 * _214));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3490 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _758 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3512 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3523 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _782 = _282 * _781;
    float _783 = _283 * _781;
    float _784 = _284 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _952 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _958 = (cbMatDynParam._m0[5u].x * _952) + cbMatDynParam._m0[5u].y;
        float _3534 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _963 = (cbMatDynParam._m0[5u].z * _952) + cbMatDynParam._m0[5u].w;
        float _3545 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) - _959)) + _959) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _831 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _834 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _847 = uint(roundEven(NORMAL.w)) * 13u;
    uint _848 = _847 + 9u;
    uint _849 = _848 + uint(cbMatDynParam._m0[0u].w);
    float _855 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_849].x;
    float _856 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_849].y;
    float _857 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) * cbInstanceData._m0[_849].z;
    float _3556 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _872 = _869.x * TEXCOORD_4;
    float _873 = dot(vec3(_755, _756, _757), vec3(_782, _783, _784));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _755) - _782;
    float _881 = (_876 * _756) - _783;
    float _882 = (_876 * _757) - _784;
    float _886 = abs(dot(vec3(_782, _783, _784), vec3(_755, _756, _757)));
    float _3589 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_758);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _1001 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _1005 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _1029 = _933 + _755;
        float _1030 = _937 + _756;
        float _1031 = _941 + _757;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _997;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1001;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1005;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_755, _756, _757), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3637 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_755, _756, _757), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3670 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_755, _756, _757), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3703 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1100;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1110;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1120;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = _1133;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _454;
        _1272 = _454;
        _1273 = _454;
        _1274 = _454;
        _1275 = _454;
        _1276 = _454;
        _1277 = _454;
        _1278 = _454;
        _1279 = _454;
        _1280 = _454;
        _1281 = _454;
        _1282 = _454;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1317 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1321 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1344 = _933 + _755;
        float _1345 = _937 + _756;
        float _1346 = _941 + _757;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_755, _756, _757), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3766 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_755, _756, _757), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _3799 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_755, _756, _757), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _3832 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _454;
        _1583 = _454;
        _1584 = _454;
        _1585 = _454;
        _1586 = _454;
        _1587 = _454;
        _1588 = _454;
        _1589 = _454;
        _1590 = _454;
        _1591 = _454;
        _1592 = _454;
        _1593 = _454;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1284)) + _1284;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _880 * 0.5;
    float _1651 = _881 * 0.5;
    float _1652 = _882 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1767 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1771 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1775 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1778 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1781 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1784 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1812;
        if (_1778 > 0.0)
        {
            _1812 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1812 = frontier_phi_29_27_ladder;
        }
        float _2181;
        if (_1781 > 0.0)
        {
            _2181 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2181 = frontier_phi_38_34_ladder;
        }
        float _2523;
        if (_1784 > 0.0)
        {
            _2523 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2523 = frontier_phi_52_45_ladder;
        }
        float _2525 = isnan(_2181) ? _1812 : (isnan(_1812) ? _2181 : min(_1812, _2181));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1778) + _1767;
        float _2531 = (_2526 * _1781) + _1771;
        float _2532 = (_2526 * _1784) + _1775;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2532, cbModelParam._m0[9u].z, fma(_2531, cbModelParam._m0[9u].y, _2530 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2532, cbModelParam._m0[10u].z, fma(_2531, cbModelParam._m0[10u].y, _2530 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2532, cbModelParam._m0[11u].z, fma(_2531, cbModelParam._m0[11u].y, _2530 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_28_52_ladder = _2674.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2674.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2674.x * cbModelParam._m0[1u].y;
        }
        _1800 = frontier_phi_28_52_ladder_2;
        _1802 = frontier_phi_28_52_ladder_1;
        _1804 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1719);
        _1800 = _1788.x * cbModelParam._m0[1u].y;
        _1802 = _1788.y * cbModelParam._m0[1u].y;
        _1804 = _1788.z * cbModelParam._m0[1u].y;
    }
    float _1808 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1808 : min(cbModelParam._m0[25u].w, _1808));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1875 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1878 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _2186;
        if (_1872 > 0.0)
        {
            _2186 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2186 = frontier_phi_40_36_ladder;
        }
        float _2549;
        if (_1875 > 0.0)
        {
            _2549 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2549 = frontier_phi_54_47_ladder;
        }
        float _2739;
        if (_1878 > 0.0)
        {
            _2739 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2739 = frontier_phi_72_65_ladder;
        }
        float _2741 = isnan(_2549) ? _2186 : (isnan(_2186) ? _2549 : min(_2186, _2549));
        float _2742 = isnan(_2739) ? _2741 : (isnan(_2741) ? _2739 : min(_2741, _2739));
        float _2746 = (_2742 * _1872) + _1861;
        float _2747 = (_2742 * _1875) + _1865;
        float _2748 = (_2742 * _1878) + _1869;
        float _2749 = _2742 * 9.9999997473787516355514526367188e-05;
        float _2750 = (-1.0) - _2749;
        float _2752 = _2749 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2748 > _2752) || ((_2748 < _2750) || ((_2747 > _2752) || ((_2747 < _2750) || ((_2746 < _2750) || (_2746 > _2752))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2748, cbModelParam._m0[17u].z, fma(_2747, cbModelParam._m0[17u].y, _2746 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2748, cbModelParam._m0[18u].z, fma(_2747, cbModelParam._m0[18u].y, _2746 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2748, cbModelParam._m0[19u].z, fma(_2747, cbModelParam._m0[19u].y, _2746 * cbModelParam._m0[19u].x))), _1809);
            frontier_phi_37_72_ladder = _2990.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2990.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2990.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_37_72_ladder_2;
        _1899 = frontier_phi_37_72_ladder_1;
        _1901 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1809);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1913 = ((((1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_901 * _888)) * _872;
    float _1914 = _1913 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1915 = _1913 * ((cbModelParam._m0[1u].w * (_1899 - _1802)) + _1802);
    float _1916 = _1913 * ((cbModelParam._m0[1u].w * (_1901 - _1804)) + _1804);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    vec4 _1933 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_808, _809));
    float _1935 = _1933.w;
    float _1947 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1935);
    float _1948 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1935);
    float _1949 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1935);
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_847 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1961 = _872 + (-1.0);
    float _1964 = (cbLight._m0[_1956].x * _1961) + 1.0;
    float _1965 = (cbLight._m0[_1956].y * _1961) + 1.0;
    uint _1966 = _1955 + 5u;
    float _1972 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1976 = _1955 + 4u;
    float _1985 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1989 = _1955 | 1u;
    float _2000 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_755, _756, _757));
    float _2003 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_755, _756, _757));
    float _3968 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _3979 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2008 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.3183098733425140380859375;
    float _2010 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _2017 = ((cbLight._m0[_1966].x * _1972) * _2010) + (((cbLight._m0[_1976].x * _1947) * _1985) * _2008);
    float _2018 = ((_1972 * cbLight._m0[_1966].y) * _2010) + (((cbLight._m0[_1976].y * _1948) * _1985) * _2008);
    float _2019 = ((_1972 * cbLight._m0[_1966].z) * _2010) + (((cbLight._m0[_1976].z * _1949) * _1985) * _2008);
    uint _2021 = _1955 + 8u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _758) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1955].x + _782;
    float _2037 = cbLight._m0[_1955].y + _783;
    float _2038 = cbLight._m0[_1955].z + _784;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1955].xyz));
    float _3990 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2050 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _2051 = dot(vec3(_755, _756, _757), vec3(_2043, _2044, _2045));
    float _4012 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2043, _2044, _2045));
    float _4023 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2035 * _2035;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2075 = 1.0 - _2035;
    float _2086 = (0.5 / (((_2050 * ((_2049 * _2075) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2075) + _2035) * _2049))) * _2049;
    float _4034 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    uint _2102 = _1955 + 9u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _758) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1989].x + _782;
    float _2116 = cbLight._m0[_1989].y + _783;
    float _2117 = cbLight._m0[_1989].z + _784;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1989].xyz));
    float _4045 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2129 = dot(vec3(_755, _756, _757), vec3(_2122, _2123, _2124));
    float _4056 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2122, _2123, _2124));
    float _4067 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2114 * _2114;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2151 = 1.0 - _2114;
    float _2161 = (0.5 / (((_2050 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2050 * _2151) + _2114) * _2128))) * _2128;
    float _4078 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    float _2173 = (((_2150 * cbLight._m0[_2102].x) * _2163) * _1972) + ((((cbLight._m0[_2021].x * _1947) * _2074) * _2088) * _1985);
    float _2174 = (((_2150 * cbLight._m0[_2102].y) * _2163) * _1972) + ((((cbLight._m0[_2021].y * _1948) * _2074) * _2088) * _1985);
    float _2175 = (((_2150 * cbLight._m0[_2102].z) * _2163) * _1972) + ((((cbLight._m0[_2021].z * _1949) * _2074) * _2088) * _1985);
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_1953.y == 0u)
    {
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2230;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2230;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2230;
        uvec4 _2245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2246 = _2245.x;
        uint _2257 = uint((float(_2245.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2246))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2246)));
        float _2267 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2268 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        uint _2271 = uint(isnan(14.0) ? _2268 : (isnan(_2268) ? 14.0 : min(_2268, 14.0)));
        uvec4 _2276 = texelFetch(g_lightClusterGridBuffer, int(((_2271 << 2u) + (_2257 << 6u)) >> 2u));
        uint _2277 = _2276.x;
        uint _2278 = _2245.z;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        if (((((1u << ((_2278 >> 4u) & 15u)) + 4294967295u) & _2277) == 0u) || ((_2278 & 240u) == 0u))
        {
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
        }
        else
        {
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            uint _2592 = 0u;
            uint _2601;
            bool _2602;
            for (;;)
            {
                _2601 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2592 << 2u)) >> 2u)).x;
                _2602 = _2601 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2602)
                {
                    frontier_phi_67_pred = _2589;
                    frontier_phi_67_pred_1 = _2588;
                    frontier_phi_67_pred_2 = _2587;
                    frontier_phi_67_pred_3 = _2586;
                    frontier_phi_67_pred_4 = _2590;
                    frontier_phi_67_pred_5 = _2591;
                }
                else
                {
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    uint _2788;
                    _2782 = _2586;
                    _2783 = _2587;
                    _2784 = _2588;
                    _2785 = _2589;
                    _2786 = _2590;
                    _2787 = _2591;
                    _2788 = _2601;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    for (;;)
                    {
                        uint _2792 = uint(findLSB(_2788)) + (_2592 << 5u);
                        uint _2789 = (_2788 + 4294967295u) & _2788;
                        uint _2794 = _2792 * 48u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2814 = (_2792 * 48u) + 4u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2833 = (_2792 * 48u) + 8u;
                        vec3 _2844 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x));
                        float _2848 = _2808.x - _2231;
                        float _2849 = _2808.y - _2232;
                        float _2850 = _2808.z - _2233;
                        float _2851 = dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850));
                        float _2854 = inversesqrt(_2851);
                        float _2855 = _2854 * _2848;
                        float _2856 = _2854 * _2849;
                        float _2857 = _2854 * _2850;
                        float _2858 = dot(vec3(_828, _831, _834), vec3(_2855, _2856, _2857));
                        float _2863 = 1.0 - (_2851 * _2808.w);
                        float _4099 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2864 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2865 = sqrt(_2851) * _2827.w;
                        float _2868 = 1.39999997615814208984375 / (_2865 + 1.39999997615814208984375);
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2858) + _2869;
                        float _2875 = _2865 * _2865;
                        float _2879 = ((isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0))) * _2864) / ((_2875 * 0.699999988079071044921875) + 1.0);
                        float _2883 = (-0.0) - _2231;
                        float _2884 = (-0.0) - _2232;
                        float _2885 = (-0.0) - _2233;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2900 = exp2(log2(1.0 / ((_2875 * 3.5) + 5.0)) * 0.25);
                        float _2901 = 1.0 - _888;
                        float _2908 = sqrt(1.0 - ((1.0 - (_2901 * _2901)) * (1.0 - (_2900 * _2900))));
                        float _2909 = _2908 * _2908;
                        float _2910 = _2909 * _2909;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2921 = dot(vec3(_828, _831, _834), vec3(_2890, _2891, _2892));
                        float _4115 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2924 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2925 = dot(vec3(_828, _831, _834), vec3(_2917 * _2911, _2917 * _2912, _2917 * _2913));
                        float _4126 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2932 = ((_2928 * _2928) * (_2910 + (-1.0))) + 1.0;
                        float _2933 = _2868 * _2909;
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2858) + _2934;
                        float _4137 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2939 = 1.0 - _2909;
                        float _2949 = (0.5 / (((_2938 * ((_2924 * _2939) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2938 * _2939) + _2909) * _2924))) * _2938;
                        float _4148 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2960 = (((_2910 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2932 * _2932) * ((_2875 * 2.1991131305694580078125) + 3.141590118408203125))) * _2864;
                        _2686 = (_2879 * _2827.x) + _2785;
                        _2687 = (_2879 * _2827.y) + _2786;
                        _2688 = (_2879 * _2827.z) + _2787;
                        _2683 = (_2960 * _2844.x) + _2782;
                        _2684 = (_2960 * _2844.y) + _2783;
                        _2685 = (_2960 * _2844.z) + _2784;
                        if (_2789 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2782 = _2683;
                            _2783 = _2684;
                            _2784 = _2685;
                            _2785 = _2686;
                            _2786 = _2687;
                            _2787 = _2688;
                            _2788 = _2789;
                        }
                    }
                    frontier_phi_67_pred = _2686;
                    frontier_phi_67_pred_1 = _2685;
                    frontier_phi_67_pred_2 = _2684;
                    frontier_phi_67_pred_3 = _2683;
                    frontier_phi_67_pred_4 = _2687;
                    frontier_phi_67_pred_5 = _2688;
                }
                _2401 = frontier_phi_67_pred;
                _2399 = frontier_phi_67_pred_1;
                _2397 = frontier_phi_67_pred_2;
                _2395 = frontier_phi_67_pred_3;
                _2403 = frontier_phi_67_pred_4;
                _2405 = frontier_phi_67_pred_5;
                uint _2593 = _2592 + 1u;
                if (_2593 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2586 = _2395;
                    _2587 = _2397;
                    _2588 = _2399;
                    _2589 = _2401;
                    _2590 = _2403;
                    _2591 = _2405;
                    _2592 = _2593;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
        }
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.z;
        uint _2411 = (_2409 >> 8u) & 15u;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((4294967295u << _2411) & _2277) == 0u)
        {
            _2554 = _2394;
            _2556 = _2396;
            _2558 = _2398;
            _2560 = _2400;
            _2562 = _2402;
            _2564 = _2404;
        }
        else
        {
            float _2579 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _2580 = _2579 * _2231;
            float _2581 = _2579 * _2232;
            float _2582 = _2579 * _2233;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2411 < ((_2409 >> 12u) & 15u))
            {
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2765 = _2394;
                float _2766 = _2396;
                float _2767 = _2398;
                float _2768 = _2400;
                float _2769 = _2402;
                float _2770 = _2404;
                uint _2771 = _2411;
                uint _2780;
                bool _2781;
                for (;;)
                {
                    _2780 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                    _2781 = _2780 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2781)
                    {
                        frontier_phi_81_pred = _2768;
                        frontier_phi_81_pred_1 = _2767;
                        frontier_phi_81_pred_2 = _2766;
                        frontier_phi_81_pred_3 = _2765;
                        frontier_phi_81_pred_4 = _2770;
                        frontier_phi_81_pred_5 = _2769;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3008 = _2765;
                        float _3009 = _2766;
                        float _3010 = _2767;
                        float _3011 = _2768;
                        float _3012 = _2769;
                        float _3013 = _2770;
                        uint _3014 = _2780;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3084;
                        vec4 _3099;
                        float _3145;
                        bool _3146;
                        for (;;)
                        {
                            uint _3025 = ((_2771 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3071 = (_3025 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3025 * 40u) + 20u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3025 * 40u) + 24u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3120 = (_3025 * 40u) + 28u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3145 = fma(_2233, _3133.z, fma(_2232, _3133.y, _3133.x * _2231)) + _3133.w;
                            _3146 = !((fma(_2233, _3114.z, fma(_2232, _3114.y, _3114.x * _2231)) + _3114.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3146)
                            {
                                float _3173 = _3040.x - _2231;
                                float _3174 = _3040.y - _2232;
                                float _3175 = _3040.z - _2233;
                                float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                                float _3179 = inversesqrt(_3176);
                                float _3180 = _3179 * _3173;
                                float _3181 = _3179 * _3174;
                                float _3182 = _3179 * _3175;
                                float _3186 = 1.0 - (_3176 / (_3041 * _3041));
                                float _4159 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3191 = sqrt(_3176) * _3056.w;
                                float _3193 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                                float _3194 = _3193 * _3193;
                                float _3197 = ((1.0 - _3194) * dot(vec3(_3180, _3181, _3182), vec3(_828, _831, _834))) + _3194;
                                float _3200 = _3191 * _3191;
                                float _3204 = (fma(_2233, _3084.z, fma(_2232, _3084.y, _3084.x * _2231)) + _3084.w) / _3145;
                                float _3205 = (fma(_2233, _3099.z, fma(_2232, _3099.y, _3099.x * _2231)) + _3099.w) / _3145;
                                float _3209 = 1.0 - dot(vec2(_3204, _3205), vec2(_3204, _3205));
                                float _4175 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3211 = _3210 * (((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3187) / ((_3200 * 0.699999988079071044921875) + 1.0));
                                float _3223 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _888;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3180 - _2580;
                                float _3235 = _3181 - _2581;
                                float _3236 = _3182 - _2582;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_828, _831, _834), vec3((-0.0) - _2580, (-0.0) - _2581, (-0.0) - _2582));
                                float _4186 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3248 = dot(vec3(_828, _831, _834), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4197 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3193 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_828, _831, _834), vec3(_3180, _3181, _3182))) + _3257;
                                float _4208 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4219 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3210 * _3187) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3255 * _3255) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3211 * _3056.x;
                                frontier_phi_87_pred_1 = _3285 * _3068.z;
                                frontier_phi_87_pred_2 = _3285 * _3068.y;
                                frontier_phi_87_pred_3 = _3285 * _3068.x;
                                frontier_phi_87_pred_4 = _3211 * _3056.z;
                                frontier_phi_87_pred_5 = _3211 * _3056.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3292 = frontier_phi_87_pred;
                            _3291 = frontier_phi_87_pred_1;
                            _3290 = frontier_phi_87_pred_2;
                            _3289 = frontier_phi_87_pred_3;
                            _3294 = frontier_phi_87_pred_4;
                            _3293 = frontier_phi_87_pred_5;
                            _2998 = _3292 + _3011;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _2995 = _3289 + _3008;
                            _2996 = _3290 + _3009;
                            _2997 = _3291 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2998;
                        frontier_phi_81_pred_1 = _2997;
                        frontier_phi_81_pred_2 = _2996;
                        frontier_phi_81_pred_3 = _2995;
                        frontier_phi_81_pred_4 = _3000;
                        frontier_phi_81_pred_5 = _2999;
                    }
                    _2561 = frontier_phi_81_pred;
                    _2559 = frontier_phi_81_pred_1;
                    _2557 = frontier_phi_81_pred_2;
                    _2555 = frontier_phi_81_pred_3;
                    _2565 = frontier_phi_81_pred_4;
                    _2563 = frontier_phi_81_pred_5;
                    uint _2772 = _2771 + 1u;
                    if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2765 = _2555;
                        _2766 = _2557;
                        _2767 = _2559;
                        _2768 = _2561;
                        _2769 = _2563;
                        _2770 = _2565;
                        _2771 = _2772;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2565;
                frontier_phi_56_57_ladder_1 = _2563;
                frontier_phi_56_57_ladder_2 = _2561;
                frontier_phi_56_57_ladder_3 = _2557;
                frontier_phi_56_57_ladder_4 = _2555;
                frontier_phi_56_57_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_56_57_ladder = _2404;
                frontier_phi_56_57_ladder_1 = _2402;
                frontier_phi_56_57_ladder_2 = _2400;
                frontier_phi_56_57_ladder_3 = _2396;
                frontier_phi_56_57_ladder_4 = _2394;
                frontier_phi_56_57_ladder_5 = _2398;
            }
            _2554 = frontier_phi_56_57_ladder_4;
            _2556 = frontier_phi_56_57_ladder_3;
            _2558 = frontier_phi_56_57_ladder_5;
            _2560 = frontier_phi_56_57_ladder_2;
            _2562 = frontier_phi_56_57_ladder_1;
            _2564 = frontier_phi_56_57_ladder;
        }
        float _2569 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2290 = (_2569 * _2560) + _2017;
        _2292 = (_2569 * _2562) + _2018;
        _2294 = (_2569 * _2564) + _2019;
        _2296 = ((_2554 * 0.039999999105930328369140625) * _2569) + _2173;
        _2298 = ((_2556 * 0.039999999105930328369140625) * _2569) + _2174;
        _2300 = ((_2558 * 0.039999999105930328369140625) * _2569) + _2175;
    }
    else
    {
        _2290 = _2017;
        _2292 = _2018;
        _2294 = _2019;
        _2296 = _2173;
        _2298 = _2174;
        _2300 = _2175;
    }
    uint _2306 = _848 + uint(cbMatDynParam._m0[0u].w);
    float _2312 = ((_731 * (_719 - (_719 * _692))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2306].x;
    float _2313 = ((_731 * (_720 - (_720 * _692))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2306].y;
    float _2314 = ((_731 * (_721 - (_721 * _692))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2306].z;
    float _4235 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4246 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4257 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2331 = (((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2290 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _872))) + ((_2296 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + _2312;
    float _2333 = (_2313 + ((_2298 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2292 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _872)));
    float _2335 = (_2314 + ((_2300 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2294 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _872)));
    float _2336 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2337 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2344 = cbMtdParam._m0[2u].x * _2312;
    float _2345 = cbMtdParam._m0[2u].y * _2313;
    float _2346 = cbMtdParam._m0[2u].z * _2314;
    float _4283 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2348 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    uint _2349 = _847 + 6u;
    float _2357 = _808 / cbSceneParam._m0[86u].x;
    float _2358 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _2419 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _2420 = _2419 / _777;
        float _2431 = _2420 * _282;
        float _2432 = _283 * _2420;
        float _2433 = (-0.0) - _2432;
        float _2434 = _2420 * _284;
        float _2436 = (cbSceneParam._m0[77u].w * _2433) / _2419;
        float _2437 = _2436 + cbSceneParam._m0[79u].w;
        float _2438 = cbSceneParam._m0[79u].w - _2432;
        float _2444 = sqrt(((_2431 * _2431) + (_2432 * _2432)) + (_2434 * _2434));
        float _2447 = (1.0 - (cbSceneParam._m0[77u].w / _2419)) * _2444;
        float _2453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2455 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2696;
        if (abs((_2433 - _2436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2696 = ((((_2437 > 0.0) ? exp2(_2453 * _2437) : (2.0 - exp2(_2455 * _2437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2447;
        }
        else
        {
            float _2615 = 1.0 / cbSceneParam._m0[80u].x;
            float _2616 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : max(_2437, _2438));
            float _2617 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : min(_2437, _2438));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            float _2627 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : min(_2617, 0.0));
            _2696 = ((abs(_2444 / _2433) * cbSceneParam._m0[80u].y) * ((((_2626 - _2627) * 2.0) - ((exp2(_2453 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0)))) - exp2(_2453 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0))))) * _2615)) - ((exp2(_2455 * _2626) - exp2(_2455 * _2627)) * _2615))) + (_2447 * cbSceneParam._m0[80u].z);
        }
        vec4 _2698 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2707 = exp2((_2696 * (-1.44269502162933349609375)) * (1.0 - _2698.w));
        float _2708 = log2(_2707);
        float _2724 = log2(_2377);
        _2457 = (exp2(_2724 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].x)) * _2698.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2459 = (exp2(_2724 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].y)) * _2698.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2461 = (exp2(_2724 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].z)) * _2698.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2463 = _2707 * _2377;
    }
    else
    {
        _2457 = _2374;
        _2459 = _2375;
        _2461 = _2376;
        _2463 = _2377;
    }
    bool _2734;
    vec4 _2472;
    vec4 _2494;
    float _2496;
    float _2500;
    float _2501;
    float _2502;
    float _2505;
    float _2508;
    float _2511;
    float _2512;
    bool _2522;
    for (;;)
    {
        _2472 = cbMatDynParam._m0[0u];
        float _2474 = roundEven(_2472.y);
        bool _2475 = _2474 == 3.0;
        float _2476 = log2(_2463);
        float _2480 = exp2(_2476 * cbSceneParam._m0[78u].x);
        float _2481 = exp2(_2476 * cbSceneParam._m0[78u].y);
        float _2482 = exp2(_2476 * cbSceneParam._m0[78u].z);
        float _2483 = _2480 * _2336;
        float _2484 = _2481 * _2337;
        float _2485 = _2482 * _2338;
        float _2492 = _791 + (-0.5);
        _2494 = cbMtdParam._m0[1u];
        _2496 = _2494.y * _2492;
        float _2499 = (_2474 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2500 = _2499 * (_2475 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2457)));
        _2501 = _2499 * (_2475 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2459)));
        _2502 = _2499 * (_2475 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2461)));
        _2505 = ((_2344 * _2348) * _2480) * _2499;
        _2508 = ((_2345 * _2348) * _2481) * _2499;
        _2511 = ((_2346 * _2348) * _2482) * _2499;
        _2512 = _2492 * 0.999000012874603271484375;
        _2522 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2522)
        {
            if ((cbInstanceData._m0[_847 + 7u].x + _2512) < 0.5)
            {
                _2734 = true;
                break;
            }
        }
        uint _2650 = _848 + uint(_2472.w);
        if ((cbInstanceData._m0[_2650].w < 1.0) && ((cbInstanceData._m0[_2650].w + _2512) < 0.5))
        {
            _2734 = true;
            break;
        }
        if ((_2496 + 1.0) < _2494.x)
        {
            _2734 = true;
            break;
        }
        _2734 = false;
        break;
    }
    float _2965;
    if (_2734)
    {
        discard_state = true;
        _2965 = 0.0;
    }
    else
    {
        _2965 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2500;
    SV_Target.y = _2501;
    SV_Target.z = _2502;
    SV_Target.w = _2965;
    SV_Target_1.x = _2505;
    SV_Target_1.y = _2508;
    SV_Target_1.z = _2511;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


