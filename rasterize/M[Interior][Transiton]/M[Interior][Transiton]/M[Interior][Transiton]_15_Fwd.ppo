#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1331;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _421 = (_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)));
    float _422 = (_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)));
    float _423 = _421 * cbMtdParam._m0[24u].x;
    float _424 = _422 * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    bool _442 = _420 > 0.0;
    float _444 = _442 ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _451 = _425 + (-0.5);
    float _454 = _426 + (-0.5);
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_451 + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_454 + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_482.x * _299) * cbMtdParam._m0[9u].x;
    float _496 = (_482.y * _299) * cbMtdParam._m0[9u].y;
    float _497 = (_482.z * _299) * cbMtdParam._m0[9u].z;
    float _515 = _421 * cbMtdParam._m0[26u].z;
    float _516 = _422 * cbMtdParam._m0[26u].y;
    bool _517 = _515 > 0.0;
    float _522;
    if (_517)
    {
        _522 = (1.0 - _425) / _515;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_515 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _425) / _515;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _522 = frontier_phi_11_10_ladder;
    }
    bool _524 = _516 > 0.0;
    float _529;
    if (_524)
    {
        _529 = (1.0 - _426) / _516;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_516 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _426) / _516;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _529 = frontier_phi_15_14_ladder;
    }
    float _532 = _442 ? (cbMtdParam._m0[19u].z / _420) : 5000.0;
    float _533 = isnan(_529) ? _522 : (isnan(_522) ? _529 : min(_522, _529));
    float _534 = isnan(_532) ? _533 : (isnan(_533) ? _532 : min(_533, _532));
    float _538 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _542 = ((_534 * _420) + _538) / _538;
    float _547 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _549 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _565 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_451 + (_534 * _515)) / _542) + 0.5) + _547) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_454 + (_534 * _516)) / _542) + 0.5) + _549) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _580;
    if (_517)
    {
        _580 = (1.0 - _425) / _515;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_515 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _425) / _515;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _580 = frontier_phi_19_18_ladder;
    }
    float _586;
    if (_524)
    {
        _586 = (1.0 - _426) / _516;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_516 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _426) / _516;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _586 = frontier_phi_23_22_ladder;
    }
    float _588 = isnan(_586) ? _580 : (isnan(_580) ? _586 : min(_580, _586));
    float _589 = isnan(_532) ? _588 : (isnan(_588) ? _532 : min(_588, _532));
    float _596 = ((_589 * _420) + _538) / _538;
    vec4 _616 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_451 + (_589 * _515)) / _596) + 0.5) + _547) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_454 + (_589 * _516)) / _596) + 0.5) + _549) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _618 = _616.x;
    float _628 = _299 * 0.1500000059604644775390625;
    float _639 = (_628 * ((_495 - _334) + (((((cbMtdParam._m0[10u].x * _299) * _565.x) - _495) * _299) * _618))) + _334;
    float _640 = (_628 * ((_496 - _336) + (((((cbMtdParam._m0[10u].y * _299) * _565.y) - _496) * _299) * _618))) + _336;
    float _641 = (_628 * ((_497 - _338) + (((((cbMtdParam._m0[10u].z * _299) * _565.z) - _497) * _299) * _618))) + _338;
    vec4 _654 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _654.z;
    float _661 = (_654.x * 2.0) + (-1.0);
    float _662 = (_654.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3476 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _668 = sqrt(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))));
    vec4 _692 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _697 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _703 = ((_692.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _705 = (-0.0) - (cbMtdParam._m0[21u].x * ((_692.x * 0.5) + (-0.25)));
    float _706 = fract(_697);
    float _708 = fract(_697 + 0.5);
    vec4 _735 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_706 * _705) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_703 * _706) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _737 = _735.x;
    float _743 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_708 * _705) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_703 * _708) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _737) * abs((_706 * 2.0) + (-1.0))) + _737;
    float _749 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _753 = fract(abs(_749));
    float _762 = sin(cbMtdParam._m0[21u].z);
    float _763 = cos(cbMtdParam._m0[21u].z);
    float _764 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _765 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _795 = abs(cbMtdParam._m0[20u].w * (((_743 - (((_749 >= ((-0.0) - _749)) ? _753 : ((-0.0) - _753)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_765, (-0.0) - _762, _763 * _764) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_765, _763, _764 * _762) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _799 = (((_795 * cbMtdParam._m0[18u].y) - _743) * _795) + _743;
    float _3487 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    vec4 _812 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _827 = (cbMtdParam._m0[14u].x * _812.x) * cbMtdParam._m0[19u].x;
    float _828 = (cbMtdParam._m0[14u].y * _812.y) * cbMtdParam._m0[19u].x;
    float _829 = (cbMtdParam._m0[14u].z * _812.z) * cbMtdParam._m0[19u].x;
    float _839 = exp2(log2(_800) * cbMtdParam._m0[20u].x);
    float _852 = fma(_668, _217, fma(_662, _224, _661 * _210));
    float _855 = fma(_668, _218, fma(_662, _225, _661 * _211));
    float _858 = fma(_668, _219, fma(_662, _226, _661 * _212));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _3498 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _866 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3520 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3531 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _889 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _890 = _280 * _889;
    float _891 = _281 * _889;
    float _892 = _282 * _889;
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _920 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _923 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _936 = uint(roundEven(NORMAL.w)) * 13u;
    uint _937 = _936 + 9u;
    uint _938 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_938].z;
    float _3542 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _958 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _961 = _958.x * TEXCOORD_4;
    float _962 = dot(vec3(_863, _864, _865), vec3(_890, _891, _892));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _863) - _890;
    float _970 = (_965 * _864) - _891;
    float _971 = (_965 * _865) - _892;
    float _975 = abs(dot(vec3(_890, _891, _892), vec3(_863, _864, _865)));
    float _3575 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_866);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1061 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1065 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1088 = _1022 + _863;
        float _1089 = _1026 + _864;
        float _1090 = _1030 + _865;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_863, _864, _865), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3623 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_863, _864, _865), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3656 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_863, _864, _865), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3689 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1374 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1378 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1401 = _1022 + _863;
        float _1402 = _1026 + _864;
        float _1403 = _1030 + _865;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_863, _864, _865), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3752 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_863, _864, _865), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _3785 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_863, _864, _865), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _3818 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1331;
        _1640 = _1331;
        _1641 = _1331;
        _1642 = _1331;
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1343)) + _1343;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _969 * 0.5;
    float _1708 = _970 * 0.5;
    float _1709 = _971 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1838 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1841 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1869 = frontier_phi_38_36_ladder;
        }
        float _2214;
        if (_1838 > 0.0)
        {
            _2214 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2214 = frontier_phi_47_43_ladder;
        }
        float _2548;
        if (_1841 > 0.0)
        {
            _2548 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2548 = frontier_phi_61_54_ladder;
        }
        float _2550 = isnan(_2214) ? _1869 : (isnan(_1869) ? _2214 : min(_1869, _2214));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1835) + _1824;
        float _2556 = (_2551 * _1838) + _1828;
        float _2557 = (_2551 * _1841) + _1832;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2557, cbModelParam._m0[9u].z, fma(_2556, cbModelParam._m0[9u].y, _2555 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2557, cbModelParam._m0[10u].z, fma(_2556, cbModelParam._m0[10u].y, _2555 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2557, cbModelParam._m0[11u].z, fma(_2556, cbModelParam._m0[11u].y, _2555 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_37_61_ladder = _2683.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2683.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2683.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_37_61_ladder_2;
        _1859 = frontier_phi_37_61_ladder_1;
        _1861 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1776);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1932 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1935 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2219;
        if (_1929 > 0.0)
        {
            _2219 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2219 = frontier_phi_49_45_ladder;
        }
        float _2574;
        if (_1932 > 0.0)
        {
            _2574 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2574 = frontier_phi_63_56_ladder;
        }
        float _2743;
        if (_1935 > 0.0)
        {
            _2743 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2743 = frontier_phi_77_72_ladder;
        }
        float _2745 = isnan(_2574) ? _2219 : (isnan(_2219) ? _2574 : min(_2219, _2574));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _1929) + _1918;
        float _2751 = (_2746 * _1932) + _1922;
        float _2752 = (_2746 * _1935) + _1926;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_46_77_ladder = _2985.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2985.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2985.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_46_77_ladder_2;
        _1956 = frontier_phi_46_77_ladder_1;
        _1958 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1866);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1970 = ((((1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_990 * _977)) * _961;
    float _1971 = _1970 * ((cbModelParam._m0[1u].w * (_1954 - _1857)) + _1857);
    float _1972 = _1970 * ((cbModelParam._m0[1u].w * (_1956 - _1859)) + _1859);
    float _1973 = _1970 * ((cbModelParam._m0[1u].w * (_1958 - _1861)) + _1861);
    float _1976 = fma(_1973, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1973, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1973, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    uvec4 _1992 = floatBitsToUint(cbInstanceData._m0[_936 + 5u]);
    uint _1994 = _1992.x * 14u;
    uint _1995 = _1994 + 13u;
    float _2000 = _961 + (-1.0);
    float _2003 = (cbLight._m0[_1995].x * _2000) + 1.0;
    float _2004 = (cbLight._m0[_1995].y * _2000) + 1.0;
    uint _2005 = _1994 + 5u;
    float _2011 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2015 = _1994 + 4u;
    float _2021 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2025 = _1994 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_863, _864, _865));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_863, _864, _865));
    float _3954 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _3965 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2005].x * _2011) * _2046) + ((cbLight._m0[_2015].x * _2021) * _2044);
    float _2054 = ((_2011 * cbLight._m0[_2005].y) * _2046) + ((_2021 * cbLight._m0[_2015].y) * _2044);
    float _2055 = ((_2011 * cbLight._m0[_2005].z) * _2046) + ((_2021 * cbLight._m0[_2015].z) * _2044);
    uint _2057 = _1994 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _866) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1994].x + _890;
    float _2073 = cbLight._m0[_1994].y + _891;
    float _2074 = cbLight._m0[_1994].z + _892;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_1994].xyz));
    float _3976 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2086 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _2087 = dot(vec3(_863, _864, _865), vec3(_2079, _2080, _2081));
    float _3998 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2079, _2080, _2081));
    float _4009 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2071;
    float _2122 = (0.5 / (((_2086 * ((_2085 * _2111) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2111) + _2071) * _2085))) * _2085;
    float _4020 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2135 = _1994 + 9u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _866) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_2025].x + _890;
    float _2149 = cbLight._m0[_2025].y + _891;
    float _2150 = cbLight._m0[_2025].z + _892;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2025].xyz));
    float _4031 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _2162 = dot(vec3(_863, _864, _865), vec3(_2155, _2156, _2157));
    float _4042 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2155, _2156, _2157));
    float _4053 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2147 * _2147;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2147;
    float _2194 = (0.5 / (((_2086 * ((_2161 * _2184) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2184) + _2147) * _2161))) * _2161;
    float _4064 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    float _2206 = (((_2183 * cbLight._m0[_2135].x) * _2196) * _2011) + (((_2110 * cbLight._m0[_2057].x) * _2124) * _2021);
    float _2207 = (((_2183 * cbLight._m0[_2135].y) * _2196) * _2011) + (((_2110 * cbLight._m0[_2057].y) * _2124) * _2021);
    float _2208 = (((_2183 * cbLight._m0[_2135].z) * _2196) * _2011) + (((_2110 * cbLight._m0[_2057].z) * _2124) * _2021);
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1992.y == 0u)
    {
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2263;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2263;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2263;
        uvec4 _2278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2279 = _2278.x;
        uint _2290 = uint((float(_2278.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2279))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2279)));
        float _2300 = (log2(_2266 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2301 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        uint _2304 = uint(isnan(14.0) ? _2301 : (isnan(_2301) ? 14.0 : min(_2301, 14.0)));
        uvec4 _2309 = texelFetch(g_lightClusterGridBuffer, int(((_2304 << 2u) + (_2290 << 6u)) >> 2u));
        uint _2310 = _2309.x;
        uint _2311 = _2278.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2311 >> 4u) & 15u)) + 4294967295u) & _2310) == 0u) || ((_2311 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            uint _2617 = 0u;
            uint _2626;
            bool _2627;
            for (;;)
            {
                _2626 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                _2627 = _2626 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2627)
                {
                    frontier_phi_74_pred = _2614;
                    frontier_phi_74_pred_1 = _2613;
                    frontier_phi_74_pred_2 = _2612;
                    frontier_phi_74_pred_3 = _2611;
                    frontier_phi_74_pred_4 = _2615;
                    frontier_phi_74_pred_5 = _2616;
                }
                else
                {
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    uint _2792;
                    _2786 = _2611;
                    _2787 = _2612;
                    _2788 = _2613;
                    _2789 = _2614;
                    _2790 = _2615;
                    _2791 = _2616;
                    _2792 = _2626;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    for (;;)
                    {
                        uint _2796 = uint(findLSB(_2792)) + (_2617 << 5u);
                        uint _2793 = (_2792 + 4294967295u) & _2792;
                        uint _2798 = _2796 * 48u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2818 = (_2796 * 48u) + 4u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2837 = (_2796 * 48u) + 8u;
                        vec3 _2848 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x));
                        float _2852 = _2812.x - _2264;
                        float _2853 = _2812.y - _2265;
                        float _2854 = _2812.z - _2266;
                        float _2855 = dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854));
                        float _2858 = inversesqrt(_2855);
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2862 = dot(vec3(_917, _920, _923), vec3(_2859, _2860, _2861));
                        float _2867 = 1.0 - (_2855 * _2812.w);
                        float _4085 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2869 = sqrt(_2855) * _2831.w;
                        float _2872 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2862) + _2873;
                        float _2879 = _2869 * _2869;
                        float _2883 = ((isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))) * _2868) / ((_2879 * 0.699999988079071044921875) + 1.0);
                        float _2887 = (-0.0) - _2264;
                        float _2888 = (-0.0) - _2265;
                        float _2889 = (-0.0) - _2266;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2904 = exp2(log2(1.0 / ((_2879 * 3.5) + 5.0)) * 0.25);
                        float _2905 = 1.0 - _977;
                        float _2912 = sqrt(1.0 - ((1.0 - (_2905 * _2905)) * (1.0 - (_2904 * _2904))));
                        float _2913 = _2912 * _2912;
                        float _2914 = _2913 * _2913;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2925 = dot(vec3(_917, _920, _923), vec3(_2894, _2895, _2896));
                        float _4101 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2929 = dot(vec3(_917, _920, _923), vec3(_2921 * _2915, _2921 * _2916, _2921 * _2917));
                        float _4112 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2936 = ((_2932 * _2932) * (_2914 + (-1.0))) + 1.0;
                        float _2937 = _2872 * _2913;
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2862) + _2938;
                        float _4123 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2943 = 1.0 - _2913;
                        float _2953 = (0.5 / (((_2942 * ((_2928 * _2943) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2913) * _2928))) * _2942;
                        float _4134 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2964 = (((_2914 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_2936 * _2936) * ((_2879 * 2.1991131305694580078125) + 3.141590118408203125))) * _2868;
                        _2695 = (_2883 * _2831.x) + _2789;
                        _2696 = (_2883 * _2831.y) + _2790;
                        _2697 = (_2883 * _2831.z) + _2791;
                        _2692 = (_2964 * _2848.x) + _2786;
                        _2693 = (_2964 * _2848.y) + _2787;
                        _2694 = (_2964 * _2848.z) + _2788;
                        if (_2793 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2786 = _2692;
                            _2787 = _2693;
                            _2788 = _2694;
                            _2789 = _2695;
                            _2790 = _2696;
                            _2791 = _2697;
                            _2792 = _2793;
                        }
                    }
                    frontier_phi_74_pred = _2695;
                    frontier_phi_74_pred_1 = _2694;
                    frontier_phi_74_pred_2 = _2693;
                    frontier_phi_74_pred_3 = _2692;
                    frontier_phi_74_pred_4 = _2696;
                    frontier_phi_74_pred_5 = _2697;
                }
                _2434 = frontier_phi_74_pred;
                _2432 = frontier_phi_74_pred_1;
                _2430 = frontier_phi_74_pred_2;
                _2428 = frontier_phi_74_pred_3;
                _2436 = frontier_phi_74_pred_4;
                _2438 = frontier_phi_74_pred_5;
                uint _2618 = _2617 + 1u;
                if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2611 = _2428;
                    _2612 = _2430;
                    _2613 = _2432;
                    _2614 = _2434;
                    _2615 = _2436;
                    _2616 = _2438;
                    _2617 = _2618;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((4294967295u << _2444) & _2310) == 0u)
        {
            _2579 = _2427;
            _2581 = _2429;
            _2583 = _2431;
            _2585 = _2433;
            _2587 = _2435;
            _2589 = _2437;
        }
        else
        {
            float _2604 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
            float _2605 = _2604 * _2264;
            float _2606 = _2604 * _2265;
            float _2607 = _2604 * _2266;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2769 = _2427;
                float _2770 = _2429;
                float _2771 = _2431;
                float _2772 = _2433;
                float _2773 = _2435;
                float _2774 = _2437;
                uint _2775 = _2444;
                uint _2784;
                bool _2785;
                for (;;)
                {
                    _2784 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                    _2785 = _2784 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2785)
                    {
                        frontier_phi_83_pred = _2772;
                        frontier_phi_83_pred_1 = _2771;
                        frontier_phi_83_pred_2 = _2770;
                        frontier_phi_83_pred_3 = _2769;
                        frontier_phi_83_pred_4 = _2774;
                        frontier_phi_83_pred_5 = _2773;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3003 = _2769;
                        float _3004 = _2770;
                        float _3005 = _2771;
                        float _3006 = _2772;
                        float _3007 = _2773;
                        float _3008 = _2774;
                        uint _3009 = _2784;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3079;
                        vec4 _3094;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3020 = ((_2775 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3066 = (_3020 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3020 * 40u) + 20u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3020 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3020 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_2266, _3128.z, fma(_2265, _3128.y, _3128.x * _2264)) + _3128.w;
                            _3141 = !((fma(_2266, _3109.z, fma(_2265, _3109.y, _3109.x * _2264)) + _3109.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3035.x - _2264;
                                float _3169 = _3035.y - _2265;
                                float _3170 = _3035.z - _2266;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3036 * _3036));
                                float _4145 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3186 = sqrt(_3171) * _3051.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_917, _920, _923))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_2266, _3079.z, fma(_2265, _3079.y, _3079.x * _2264)) + _3079.w) / _3140;
                                float _3200 = (fma(_2266, _3094.z, fma(_2265, _3094.y, _3094.x * _2264)) + _3094.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4161 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _977;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2605;
                                float _3230 = _3176 - _2606;
                                float _3231 = _3177 - _2607;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_917, _920, _923), vec3((-0.0) - _2605, (-0.0) - _2606, (-0.0) - _2607));
                                float _4172 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3243 = dot(vec3(_917, _920, _923), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4183 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_917, _920, _923), vec3(_3175, _3176, _3177))) + _3252;
                                float _4194 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4205 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3206 * _3051.x;
                                frontier_phi_89_pred_1 = _3280 * _3063.z;
                                frontier_phi_89_pred_2 = _3280 * _3063.y;
                                frontier_phi_89_pred_3 = _3280 * _3063.x;
                                frontier_phi_89_pred_4 = _3206 * _3051.z;
                                frontier_phi_89_pred_5 = _3206 * _3051.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3287 = frontier_phi_89_pred;
                            _3286 = frontier_phi_89_pred_1;
                            _3285 = frontier_phi_89_pred_2;
                            _3284 = frontier_phi_89_pred_3;
                            _3289 = frontier_phi_89_pred_4;
                            _3288 = frontier_phi_89_pred_5;
                            _2993 = _3287 + _3006;
                            _2994 = _3288 + _3007;
                            _2995 = _3289 + _3008;
                            _2990 = _3284 + _3003;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2993;
                        frontier_phi_83_pred_1 = _2992;
                        frontier_phi_83_pred_2 = _2991;
                        frontier_phi_83_pred_3 = _2990;
                        frontier_phi_83_pred_4 = _2995;
                        frontier_phi_83_pred_5 = _2994;
                    }
                    _2586 = frontier_phi_83_pred;
                    _2584 = frontier_phi_83_pred_1;
                    _2582 = frontier_phi_83_pred_2;
                    _2580 = frontier_phi_83_pred_3;
                    _2590 = frontier_phi_83_pred_4;
                    _2588 = frontier_phi_83_pred_5;
                    uint _2776 = _2775 + 1u;
                    if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2769 = _2580;
                        _2770 = _2582;
                        _2771 = _2584;
                        _2772 = _2586;
                        _2773 = _2588;
                        _2774 = _2590;
                        _2775 = _2776;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2590;
                frontier_phi_65_66_ladder_1 = _2588;
                frontier_phi_65_66_ladder_2 = _2584;
                frontier_phi_65_66_ladder_3 = _2582;
                frontier_phi_65_66_ladder_4 = _2586;
                frontier_phi_65_66_ladder_5 = _2580;
            }
            else
            {
                frontier_phi_65_66_ladder = _2437;
                frontier_phi_65_66_ladder_1 = _2435;
                frontier_phi_65_66_ladder_2 = _2431;
                frontier_phi_65_66_ladder_3 = _2429;
                frontier_phi_65_66_ladder_4 = _2433;
                frontier_phi_65_66_ladder_5 = _2427;
            }
            _2579 = frontier_phi_65_66_ladder_5;
            _2581 = frontier_phi_65_66_ladder_3;
            _2583 = frontier_phi_65_66_ladder_2;
            _2585 = frontier_phi_65_66_ladder_4;
            _2587 = frontier_phi_65_66_ladder_1;
            _2589 = frontier_phi_65_66_ladder;
        }
        float _2594 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2323 = (_2594 * _2585) + _2053;
        _2325 = (_2594 * _2587) + _2054;
        _2327 = (_2594 * _2589) + _2055;
        _2329 = ((_2579 * 0.039999999105930328369140625) * _2594) + _2206;
        _2331 = ((_2581 * 0.039999999105930328369140625) * _2594) + _2207;
        _2333 = ((_2583 * 0.039999999105930328369140625) * _2594) + _2208;
    }
    else
    {
        _2323 = _2053;
        _2325 = _2054;
        _2327 = _2055;
        _2329 = _2206;
        _2331 = _2207;
        _2333 = _2208;
    }
    uint _2339 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _2345 = ((_839 * (_827 - (_827 * _800))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].x;
    float _2346 = ((_839 * (_828 - (_828 * _800))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].y;
    float _2347 = ((_839 * (_829 - (_829 * _800))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2339].z;
    float _4221 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4232 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4243 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2364 = (((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2323 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _961))) + ((_2329 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + _2345;
    float _2366 = (_2346 + ((_2331 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2325 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _961)));
    float _2368 = (_2347 + ((_2333 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2327 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _961)));
    float _4269 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2381 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    uint _2382 = _936 + 6u;
    float _2390 = _898 / cbSceneParam._m0[86u].x;
    float _2391 = _899 / cbSceneParam._m0[86u].y;
    vec4 _2405 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2390, _2391, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2407 = _2405.x;
    float _2408 = _2405.y;
    float _2409 = _2405.z;
    float _2410 = _2405.w;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _2453 = _2452 / _885;
        float _2464 = _2453 * _280;
        float _2465 = _281 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _282;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2705;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2705 = ((((_2470 > 0.0) ? exp2(_2486 * _2470) : (2.0 - exp2(_2488 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2640 = 1.0 / cbSceneParam._m0[80u].x;
            float _2641 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2642 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            _2705 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2651 - _2652) * 2.0) - ((exp2(_2486 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0)))) - exp2(_2486 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0))))) * _2640)) - ((exp2(_2488 * _2651) - exp2(_2488 * _2652)) * _2640))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2707 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2390, _2391, 1.0), 0.0);
        float _2716 = exp2((_2705 * (-1.44269502162933349609375)) * (1.0 - _2707.w));
        float _2717 = log2(_2716);
        float _2733 = log2(_2410);
        _2490 = (exp2(_2733 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].x)) * _2707.x) / cbSceneParam._m0[78u].x)) + _2407;
        _2492 = (exp2(_2733 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].y)) * _2707.y) / cbSceneParam._m0[78u].y)) + _2408;
        _2494 = (exp2(_2733 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].z)) * _2707.z) / cbSceneParam._m0[78u].z)) + _2409;
        _2496 = _2716 * _2410;
    }
    else
    {
        _2490 = _2407;
        _2492 = _2408;
        _2494 = _2409;
        _2496 = _2410;
    }
    float _2507 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2508 = _2507 == 3.0;
    float _2509 = log2(_2496);
    float _2513 = exp2(_2509 * cbSceneParam._m0[78u].x);
    float _2514 = exp2(_2509 * cbSceneParam._m0[78u].y);
    float _2515 = exp2(_2509 * cbSceneParam._m0[78u].z);
    float _2516 = _2513 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)));
    float _2517 = _2514 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0)));
    float _2518 = _2515 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)));
    float _2527 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2527 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.y = _2527 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.z = _2527 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.w = cbInstanceData._m0[_2382].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2345) * _2381) * _2513) * _2527;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2346) * _2381) * _2514) * _2527;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2347) * _2381) * _2515) * _2527;
    SV_Target_1.w = cbInstanceData._m0[_2382].w;
}


