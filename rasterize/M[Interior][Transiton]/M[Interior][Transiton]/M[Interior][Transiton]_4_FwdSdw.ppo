#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1233;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _356 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = cbMtdParam._m0[27u].w + _280;
    float _396 = cbMtdParam._m0[28u].x + _281;
    float _397 = cbMtdParam._m0[28u].y + _282;
    float _411 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_210, _211, _212));
    float _412 = (-0.0) - dot(vec3(_395, _396, _397), vec3(_224, _225, _226));
    float _413 = (-0.0) - dot(vec3(_395, _396, _397), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _420 = _417 * _413;
    float _423 = ((_417 * _411) + ((cbMtdParam._m0[25u].w * _299) * ((_356.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _424 = ((_417 * _412) + ((cbMtdParam._m0[26u].x * _299) * ((_356.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _425 = fract(TEXCOORD.x);
    float _426 = fract(TEXCOORD.y);
    float _432;
    if (_423 > 0.0)
    {
        _432 = (1.0 - _425) / _423;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_423 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _425) / _423;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _432 = frontier_phi_3_2_ladder;
    }
    float _440;
    if (_424 > 0.0)
    {
        _440 = (1.0 - _426) / _424;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_424 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _426) / _424;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _440 = frontier_phi_7_6_ladder;
    }
    float _444 = (_420 > 0.0) ? (cbMtdParam._m0[17u].x / _420) : 5000.0;
    float _445 = isnan(_440) ? _432 : (isnan(_432) ? _440 : min(_432, _440));
    float _446 = isnan(_444) ? _445 : (isnan(_445) ? _444 : min(_445, _444));
    float _450 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = ((_446 * _420) + _450) / _450;
    vec4 _482 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_425 + (-0.5)) + (_446 * _423)) / _457) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_426 + (-0.5)) + (_446 * _424)) / _457) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _495 = (_482.x * _299) * cbMtdParam._m0[9u].x;
    float _496 = (_482.y * _299) * cbMtdParam._m0[9u].y;
    float _497 = (_482.z * _299) * cbMtdParam._m0[9u].z;
    vec4 _510 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _510.z;
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3615 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    float _536 = (cbMtdParam._m0[19u].y * _495) * cbMtdParam._m0[16u].x;
    float _538 = (cbMtdParam._m0[19u].y * _496) * cbMtdParam._m0[16u].y;
    float _540 = (cbMtdParam._m0[19u].y * _497) * cbMtdParam._m0[16u].z;
    vec4 _564 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _569 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _575 = ((_564.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _577 = (-0.0) - (cbMtdParam._m0[21u].x * ((_564.x * 0.5) + (-0.25)));
    float _578 = fract(_569);
    float _580 = fract(_569 + 0.5);
    vec4 _607 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_578 * _577) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_575 * _578) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _609 = _607.x;
    float _615 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_580 * _577) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_575 * _580) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _609) * abs((_578 * 2.0) + (-1.0))) + _609;
    float _621 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _625 = fract(abs(_621));
    float _635 = sin(cbMtdParam._m0[21u].z);
    float _636 = cos(cbMtdParam._m0[21u].z);
    float _637 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _638 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _663 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_638, (-0.0) - _635, _636 * _637) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_638, _636, _637 * _635) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_621 >= ((-0.0) - _621)) ? _625 : ((-0.0) - _625)) * cbMtdParam._m0[18u].z) - _615)) + cbMtdParam._m0[18u].w;
    float _664 = ceil(_663);
    float _3626 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _685 = ((((cbMtdParam._m0[21u].w * _495) * cbMtdParam._m0[15u].x) - _536) * _665) + _536;
    float _686 = ((((cbMtdParam._m0[21u].w * _496) * cbMtdParam._m0[15u].y) - _538) * _665) + _538;
    float _687 = ((((cbMtdParam._m0[21u].w * _497) * cbMtdParam._m0[15u].z) - _540) * _665) + _540;
    float _691 = abs(cbMtdParam._m0[20u].w * _663);
    float _695 = (((_691 * cbMtdParam._m0[18u].y) - _615) * _691) + _615;
    float _3637 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    vec4 _708 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _723 = (cbMtdParam._m0[14u].x * _708.x) * cbMtdParam._m0[19u].x;
    float _724 = (cbMtdParam._m0[14u].y * _708.y) * cbMtdParam._m0[19u].x;
    float _725 = (cbMtdParam._m0[14u].z * _708.z) * cbMtdParam._m0[19u].x;
    float _732 = exp2(log2(_696) * cbMtdParam._m0[20u].x);
    float _754 = fma(_524, _217, fma(_518, _224, _517 * _210));
    float _757 = fma(_524, _218, fma(_518, _225, _517 * _211));
    float _760 = fma(_524, _219, fma(_518, _226, _517 * _212));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _3648 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _768 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3670 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3681 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _792 = _280 * _791;
    float _793 = _281 * _791;
    float _794 = _282 * _791;
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _819 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _822 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _825 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _838 = uint(roundEven(NORMAL.w)) * 13u;
    uint _839 = _838 + 9u;
    uint _840 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_840].z;
    float _3692 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _863 = _860.x * TEXCOORD_4;
    float _864 = dot(vec3(_765, _766, _767), vec3(_792, _793, _794));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _765) - _792;
    float _872 = (_867 * _766) - _793;
    float _873 = (_867 * _767) - _794;
    float _877 = abs(dot(vec3(_792, _793, _794), vec3(_765, _766, _767)));
    float _3725 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_768);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1232;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_932, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924));
        float _963 = fma(_932, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924));
        float _967 = fma(_932, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924));
        float _990 = _924 + _765;
        float _991 = _928 + _766;
        float _992 = _932 + _767;
        float _1002 = fma(_992, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990)) - _959;
        float _1003 = fma(_992, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990)) - _963;
        float _1004 = fma(_992, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990)) - _967;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1060 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1026.x + (-0.5));
        float _1062 = _1060 * (_1026.y + (-0.5));
        float _1063 = _1060 * (_1026.z + (-0.5));
        float _1070 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1033.x + (-0.5));
        float _1072 = _1070 * (_1033.y + (-0.5));
        float _1073 = _1070 * (_1033.z + (-0.5));
        float _1080 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1040.x + (-0.5));
        float _1082 = _1080 * (_1040.y + (-0.5));
        float _1083 = _1080 * (_1040.z + (-0.5));
        float _1090 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1047.x + (-0.5));
        float _1092 = _1090 * (_1047.y + (-0.5));
        float _1093 = _1090 * (_1047.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1114 = (dot(vec3(_765, _766, _767), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1124 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3773 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1126 + 1.0))) + _1131) * _1094;
        float _1141 = _1062 * 0.5;
        float _1142 = _1072 * 0.5;
        float _1143 = _1082 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_765, _766, _767), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3806 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1168 + 1.0))) + _1173) * _1095;
        float _1183 = _1063 * 0.5;
        float _1184 = _1073 * 0.5;
        float _1185 = _1083 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_765, _766, _767), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3839 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1210 + 1.0))) + _1215) * _1096;
        _1232 = _1063;
        _1234 = _1062;
        _1235 = _1061;
        _1236 = _1073;
        _1237 = _1072;
        _1238 = _1071;
        _1239 = _1083;
        _1240 = _1082;
        _1241 = _1081;
        _1242 = _1096;
        _1243 = _1095;
        _1244 = _1094;
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _1233;
        _1234 = _1233;
        _1235 = _1233;
        _1236 = _1233;
        _1237 = _1233;
        _1238 = _1233;
        _1239 = _1233;
        _1240 = _1233;
        _1241 = _1233;
        _1242 = _1233;
        _1243 = _1233;
        _1244 = _1233;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1272 = fma(_932, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924));
        float _1276 = fma(_932, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924));
        float _1280 = fma(_932, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924));
        float _1303 = _924 + _765;
        float _1304 = _928 + _766;
        float _1305 = _932 + _767;
        float _1315 = fma(_1305, cbModelParam._m0[30u].z, fma(_1304, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303)) - _1272;
        float _1316 = fma(_1305, cbModelParam._m0[31u].z, fma(_1304, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303)) - _1276;
        float _1317 = fma(_1305, cbModelParam._m0[32u].z, fma(_1304, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303)) - _1280;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1334 = ((_1321 * _1315) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1272 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1321 * _1316) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1276 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1321 * _1317) / cbModelParam._m0[35u].z) + ((((((_1280 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        float _1371 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1338.x + (-0.5));
        float _1373 = _1371 * (_1338.y + (-0.5));
        float _1374 = _1371 * (_1338.z + (-0.5));
        float _1381 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1345.x + (-0.5));
        float _1383 = _1381 * (_1345.y + (-0.5));
        float _1384 = _1381 * (_1345.z + (-0.5));
        float _1391 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1352.x + (-0.5));
        float _1393 = _1391 * (_1352.y + (-0.5));
        float _1394 = _1391 * (_1352.z + (-0.5));
        float _1401 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1359.x + (-0.5));
        float _1403 = _1401 * (_1359.y + (-0.5));
        float _1404 = _1401 * (_1359.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_765, _766, _767), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3902 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1435 + 1.0))) + _1440) * _1405;
        float _1450 = _1373 * 0.5;
        float _1451 = _1383 * 0.5;
        float _1452 = _1393 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_765, _766, _767), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3935 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1477 + 1.0))) + _1482) * _1406;
        float _1492 = _1374 * 0.5;
        float _1493 = _1384 * 0.5;
        float _1494 = _1394 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_765, _766, _767), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3968 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1519 + 1.0))) + _1524) * _1407;
        _1541 = _1374;
        _1542 = _1373;
        _1543 = _1372;
        _1544 = _1384;
        _1545 = _1383;
        _1546 = _1382;
        _1547 = _1394;
        _1548 = _1393;
        _1549 = _1392;
        _1550 = _1407;
        _1551 = _1406;
        _1552 = _1405;
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1233;
        _1542 = _1233;
        _1543 = _1233;
        _1544 = _1233;
        _1545 = _1233;
        _1546 = _1233;
        _1547 = _1233;
        _1548 = _1233;
        _1549 = _1233;
        _1550 = _1233;
        _1551 = _1233;
        _1552 = _1233;
        _1553 = 0.0;
        _1554 = 0.0;
        _1555 = 0.0;
    }
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1588 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1565));
    float _1609 = _871 * 0.5;
    float _1610 = _872 * 0.5;
    float _1611 = _873 * 0.5;
    float _1612 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1615 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1618 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1652;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1625 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1232, _1236, _1239, _1242));
        float _1629 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1633 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1640 = dot(vec4(cbModelParam._m0[39u]), vec4(_1609, _1610, _1611, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1663;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1654 = dot(vec4(cbModelParam._m0[40u]), vec4(_1609, _1610, _1611, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1667 = (_1663 * cbModelParam._m0[1u].x) + (_1652 * (1.0 - cbModelParam._m0[1u].x));
    float _1677 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1677 : min(cbModelParam._m0[25u].z, _1677));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_932, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_932, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_932, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1739 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1742 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1770 = frontier_phi_22_20_ladder;
        }
        float _1938;
        if (_1739 > 0.0)
        {
            _1938 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1938 = frontier_phi_31_27_ladder;
        }
        float _2382;
        if (_1742 > 0.0)
        {
            _2382 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2382 = frontier_phi_43_38_ladder;
        }
        float _2384 = isnan(_1938) ? _1770 : (isnan(_1770) ? _1938 : min(_1770, _1938));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1736) + _1725;
        float _2390 = (_2385 * _1739) + _1729;
        float _2391 = (_2385 * _1742) + _1733;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1678);
            frontier_phi_21_43_ladder = _2651.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2651.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2651.z * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_21_43_ladder_1;
        _1760 = frontier_phi_21_43_ladder;
        _1762 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1678);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_932, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_932, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_932, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1833 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1836 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _1943;
        if (_1830 > 0.0)
        {
            _1943 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1943 = frontier_phi_33_29_ladder;
        }
        float _2409;
        if (_1833 > 0.0)
        {
            _2409 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2409 = frontier_phi_45_40_ladder;
        }
        float _2780;
        if (_1836 > 0.0)
        {
            _2780 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2780 = frontier_phi_57_52_ladder;
        }
        float _2782 = isnan(_2409) ? _1943 : (isnan(_1943) ? _2409 : min(_1943, _2409));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _1830) + _1819;
        float _2788 = (_2783 * _1833) + _1823;
        float _2789 = (_2783 * _1836) + _1827;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_30_57_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_30_57_ladder_2;
        _1857 = frontier_phi_30_57_ladder_1;
        _1859 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1767);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1871 = ((((1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_892 * _879)) * _863;
    float _1872 = _1871 * ((cbModelParam._m0[1u].w * (_1855 - _1758)) + _1758);
    float _1873 = _1871 * ((cbModelParam._m0[1u].w * (_1857 - _1760)) + _1760);
    float _1874 = _1871 * ((cbModelParam._m0[1u].w * (_1859 - _1762)) + _1762);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1873, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1873, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1873, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1930 = _1917 / _1929;
    float _1931 = _1921 / _1929;
    float _1932 = _1925 / _1929;
    float _2079;
    float _2080;
    float _2081;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1959 = ((uint(_1932 > cbSceneParam._m0[59u].y) + uint(_1932 > cbSceneParam._m0[59u].x)) + uint(_1932 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1960 = _1959 + 43u;
        uint _1968 = _1959 + 44u;
        uint _1976 = _1959 + 45u;
        uint _1984 = _1959 + 46u;
        float _1995 = fma(_1929, cbSceneParam._m0[_1960].w, fma(_1925, cbSceneParam._m0[_1960].z, fma(_1921, cbSceneParam._m0[_1960].y, _1917 * cbSceneParam._m0[_1960].x)));
        float _1999 = fma(_1929, cbSceneParam._m0[_1968].w, fma(_1925, cbSceneParam._m0[_1968].z, fma(_1921, cbSceneParam._m0[_1968].y, _1917 * cbSceneParam._m0[_1968].x)));
        float _2007 = fma(_1929, cbSceneParam._m0[_1984].w, fma(_1925, cbSceneParam._m0[_1984].z, fma(_1921, cbSceneParam._m0[_1984].y, _1917 * cbSceneParam._m0[_1984].x)));
        float _2012 = cbSceneParam._m0[33u].z * _2007;
        float _2014 = cbSceneParam._m0[33u].w * _2007;
        float _2017 = fma(_1929, cbSceneParam._m0[_1976].w, fma(_1925, cbSceneParam._m0[_1976].z, fma(_1921, cbSceneParam._m0[_1976].y, _1917 * cbSceneParam._m0[_1976].x))) / _2007;
        float _2065 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
        float _4094 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2072 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1995) / _2007, (_2014 + _1999) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1995) / _2007, (_1999 - _2012) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2012) / _2007, (_1999 - _2014) / _2007), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 - _2014) / _2007, (_2012 + _1999) / _2007), _2017), 0.0)).x), vec4(0.25)));
        _2079 = 1.0 - (_2072 * cbSceneParam._m0[34u].x);
        _2080 = 1.0 - (_2072 * cbSceneParam._m0[34u].y);
        _2081 = 1.0 - (_2072 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2079 = 1.0;
        _2080 = 1.0;
        _2081 = 1.0;
    }
    float _2145;
    float _2147;
    float _2149;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2133 = fma(_1929, cbSceneParam._m0[63u].w, fma(_1925, cbSceneParam._m0[63u].z, fma(_1921, cbSceneParam._m0[63u].y, _1917 * cbSceneParam._m0[63u].x)));
        float _2134 = fma(_1929, cbSceneParam._m0[60u].w, fma(_1925, cbSceneParam._m0[60u].z, fma(_1921, cbSceneParam._m0[60u].y, _1917 * cbSceneParam._m0[60u].x))) / _2133;
        float _2135 = fma(_1929, cbSceneParam._m0[61u].w, fma(_1925, cbSceneParam._m0[61u].z, fma(_1921, cbSceneParam._m0[61u].y, _1917 * cbSceneParam._m0[61u].x))) / _2133;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_2134 >= cbSceneParam._m0[64u].x) && (_2135 >= cbSceneParam._m0[64u].y)) && (_2134 <= cbSceneParam._m0[64u].z)) && (_2135 <= cbSceneParam._m0[64u].w))
        {
            float _2422 = fma(_1929, cbSceneParam._m0[62u].w, fma(_1925, cbSceneParam._m0[62u].z, fma(_1921, cbSceneParam._m0[62u].y, _1917 * cbSceneParam._m0[62u].x))) / _2133;
            float _2426 = isnan(cbSceneParam._m0[41u].w) ? _2422 : (isnan(_2422) ? cbSceneParam._m0[41u].w : max(_2422, cbSceneParam._m0[41u].w));
            float _2469 = (cbSceneParam._m0[33u].x - sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932))) * cbSceneParam._m0[33u].y;
            float _4110 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
            float _2476 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2134, cbSceneParam._m0[33u].w + _2135), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2134, _2135 - cbSceneParam._m0[33u].z), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].z, _2135 - cbSceneParam._m0[33u].w), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2134 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2135), _2426), 0.0)).x), vec4(0.25)));
            float _2480 = 1.0 - (_2476 * cbSceneParam._m0[34u].x);
            float _2481 = 1.0 - (_2476 * cbSceneParam._m0[34u].y);
            float _2482 = 1.0 - (_2476 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2481) ? _2080 : (isnan(_2080) ? _2481 : min(_2080, _2481));
            frontier_phi_42_41_ladder_1 = isnan(_2480) ? _2079 : (isnan(_2079) ? _2480 : min(_2079, _2480));
            frontier_phi_42_41_ladder_2 = isnan(_2482) ? _2081 : (isnan(_2081) ? _2482 : min(_2081, _2482));
        }
        else
        {
            frontier_phi_42_41_ladder = _2080;
            frontier_phi_42_41_ladder_1 = _2079;
            frontier_phi_42_41_ladder_2 = _2081;
        }
        _2145 = frontier_phi_42_41_ladder_1;
        _2147 = frontier_phi_42_41_ladder;
        _2149 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _2145 = _2079;
        _2147 = _2080;
        _2149 = _2081;
    }
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_838 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2162 = _863 + (-1.0);
    float _2165 = (cbLight._m0[_2157].x * _2162) + 1.0;
    float _2166 = (cbLight._m0[_2157].y * _2162) + 1.0;
    uint _2167 = _2156 + 5u;
    float _2173 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2177 = _2156 + 4u;
    float _2186 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2190 = _2156 | 1u;
    float _2201 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_765, _766, _767));
    float _2204 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_765, _766, _767));
    float _4146 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _4157 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2209 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _2211 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _2218 = ((cbLight._m0[_2167].x * _2173) * _2211) + (((cbLight._m0[_2177].x * _2145) * _2186) * _2209);
    float _2219 = ((_2173 * cbLight._m0[_2167].y) * _2211) + (((cbLight._m0[_2177].y * _2147) * _2186) * _2209);
    float _2220 = ((_2173 * cbLight._m0[_2167].z) * _2211) + (((cbLight._m0[_2177].z * _2149) * _2186) * _2209);
    uint _2222 = _2156 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _768) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2156].x + _792;
    float _2238 = cbLight._m0[_2156].y + _793;
    float _2239 = cbLight._m0[_2156].z + _794;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2156].xyz));
    float _4168 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2251 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2252 = dot(vec3(_765, _766, _767), vec3(_2244, _2245, _2246));
    float _4190 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2244, _2245, _2246));
    float _4201 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2275 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2276 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2251 * ((_2250 * _2276) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2276) + _2236) * _2250))) * _2250;
    float _4212 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2303 = _2156 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _768) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2190].x + _792;
    float _2317 = cbLight._m0[_2190].y + _793;
    float _2318 = cbLight._m0[_2190].z + _794;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2190].xyz));
    float _4223 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2330 = dot(vec3(_765, _766, _767), vec3(_2323, _2324, _2325));
    float _4234 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2323, _2324, _2325));
    float _4245 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2315;
    float _2362 = (0.5 / (((_2251 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2352) + _2315) * _2329))) * _2329;
    float _4256 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2374 = (((_2351 * cbLight._m0[_2303].x) * _2364) * _2173) + ((((cbLight._m0[_2222].x * _2145) * _2275) * _2289) * _2186);
    float _2375 = (((_2351 * cbLight._m0[_2303].y) * _2364) * _2173) + ((((cbLight._m0[_2222].y * _2147) * _2275) * _2289) * _2186);
    float _2376 = (((_2351 * cbLight._m0[_2303].z) * _2364) * _2173) + ((((cbLight._m0[_2222].z * _2149) * _2275) * _2289) * _2186);
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    if (_2154.y == 0u)
    {
        uvec4 _2494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2495 = _2494.x;
        uint _2506 = uint((float(_2494.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2495))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2495)));
        float _2516 = (log2(_1932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2517 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        uint _2520 = uint(isnan(14.0) ? _2517 : (isnan(_2517) ? 14.0 : min(_2517, 14.0)));
        uvec4 _2525 = texelFetch(g_lightClusterGridBuffer, int(((_2520 << 2u) + (_2506 << 6u)) >> 2u));
        uint _2526 = _2525.x;
        uint _2527 = _2494.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2527 >> 4u) & 15u)) + 4294967295u) & _2526) == 0u) || ((_2527 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2520 << 5u) + (_2506 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2854)
                {
                    frontier_phi_66_pred = _2839;
                    frontier_phi_66_pred_1 = _2838;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2843;
                    frontier_phi_66_pred_4 = _2842;
                    frontier_phi_66_pred_5 = _2841;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2853;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2844 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _1930;
                        float _3050 = _3009.y - _1931;
                        float _3051 = _3009.z - _1932;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_819, _822, _825), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4277 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _1930;
                        float _3085 = (-0.0) - _1931;
                        float _3086 = (-0.0) - _1932;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3100 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _879;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3091 + _3056;
                        float _3112 = _3092 + _3057;
                        float _3113 = _3093 + _3058;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_819, _822, _825), vec3(_3091, _3092, _3093));
                        float _4293 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3125 = dot(vec3(_819, _822, _825), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4304 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3069 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3059) + _3134;
                        float _4315 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4326 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3132 * _3132) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2918 = (_3080 * _3028.x) + _2986;
                        _2919 = (_3080 * _3028.y) + _2987;
                        _2920 = (_3080 * _3028.z) + _2988;
                        _2915 = (_3160 * _3045.x) + _2983;
                        _2916 = (_3160 * _3045.y) + _2984;
                        _2917 = (_3160 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2915;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2920;
                    frontier_phi_66_pred_4 = _2919;
                    frontier_phi_66_pred_5 = _2918;
                }
                _2663 = frontier_phi_66_pred;
                _2661 = frontier_phi_66_pred_1;
                _2665 = frontier_phi_66_pred_2;
                _2671 = frontier_phi_66_pred_3;
                _2669 = frontier_phi_66_pred_4;
                _2667 = frontier_phi_66_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2661;
                    _2839 = _2663;
                    _2840 = _2665;
                    _2841 = _2667;
                    _2842 = _2669;
                    _2843 = _2671;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2677) & _2526) == 0u)
        {
            _2806 = _2660;
            _2808 = _2662;
            _2810 = _2664;
            _2812 = _2666;
            _2814 = _2668;
            _2816 = _2670;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
            float _2832 = _2831 * _1930;
            float _2833 = _2831 * _1931;
            float _2834 = _2831 * _1932;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2966 = _2660;
                float _2967 = _2662;
                float _2968 = _2664;
                float _2969 = _2666;
                float _2970 = _2668;
                float _2971 = _2670;
                uint _2972 = _2677;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2520 << 5u) + (_2506 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2982)
                    {
                        frontier_phi_72_pred = _2967;
                        frontier_phi_72_pred_1 = _2966;
                        frontier_phi_72_pred_2 = _2971;
                        frontier_phi_72_pred_3 = _2970;
                        frontier_phi_72_pred_4 = _2969;
                        frontier_phi_72_pred_5 = _2968;
                    }
                    else
                    {
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        float _3180 = _2968;
                        float _3181 = _2969;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        uint _3184 = _2981;
                        uint _3185;
                        vec4 _3210;
                        float _3211;
                        vec4 _3226;
                        vec3 _3238;
                        vec4 _3253;
                        vec4 _3268;
                        float _3314;
                        bool _3315;
                        for (;;)
                        {
                            uint _3195 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3184));
                            _3185 = (_3184 + 4294967295u) & _3184;
                            uint _3197 = _3195 * 40u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3211 = _3210.w;
                            uint _3213 = (_3195 * 40u) + 4u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3195 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3240 = (_3195 * 40u) + 16u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3195 * 40u) + 20u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3195 * 40u) + 24u;
                            vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3289 = (_3195 * 40u) + 28u;
                            vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3314 = fma(_1932, _3302.z, fma(_1931, _3302.y, _3302.x * _1930)) + _3302.w;
                            _3315 = !((fma(_1932, _3283.z, fma(_1931, _3283.y, _3283.x * _1930)) + _3283.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3315)
                            {
                                float _3342 = _3210.x - _1930;
                                float _3343 = _3210.y - _1931;
                                float _3344 = _3210.z - _1932;
                                float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                                float _3348 = inversesqrt(_3345);
                                float _3349 = _3348 * _3342;
                                float _3350 = _3348 * _3343;
                                float _3351 = _3348 * _3344;
                                float _3355 = 1.0 - (_3345 / (_3211 * _3211));
                                float _4337 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3360 = sqrt(_3345) * _3226.w;
                                float _3362 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                                float _3363 = _3362 * _3362;
                                float _3366 = ((1.0 - _3363) * dot(vec3(_3349, _3350, _3351), vec3(_819, _822, _825))) + _3363;
                                float _3369 = _3360 * _3360;
                                float _3373 = (fma(_1932, _3253.z, fma(_1931, _3253.y, _3253.x * _1930)) + _3253.w) / _3314;
                                float _3374 = (fma(_1932, _3268.z, fma(_1931, _3268.y, _3268.x * _1930)) + _3268.w) / _3314;
                                float _3378 = 1.0 - dot(vec2(_3373, _3374), vec2(_3373, _3374));
                                float _4353 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3380 = _3379 * (((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3356) / ((_3369 * 0.699999988079071044921875) + 1.0));
                                float _3392 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                                float _3393 = 1.0 - _879;
                                float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                                float _3401 = _3400 * _3400;
                                float _3402 = _3401 * _3401;
                                float _3403 = _3349 - _2832;
                                float _3404 = _3350 - _2833;
                                float _3405 = _3351 - _2834;
                                float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                                float _3413 = dot(vec3(_819, _822, _825), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4364 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3417 = dot(vec3(_819, _822, _825), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                                float _4375 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3420 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                                float _3425 = _3362 * _3401;
                                float _3426 = _3425 * _3425;
                                float _3432 = ((1.0 - _3426) * dot(vec3(_819, _822, _825), vec3(_3349, _3350, _3351))) + _3426;
                                float _4386 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3434 = 1.0 - _3401;
                                float _3444 = (0.5 / (((_3433 * ((_3416 * _3434) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3401) * _3416))) * _3433;
                                float _4397 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3454 = (_3379 * _3356) * (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3424 * _3424) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3454 * _3238.y;
                                frontier_phi_78_pred_1 = _3454 * _3238.x;
                                frontier_phi_78_pred_2 = _3380 * _3226.z;
                                frontier_phi_78_pred_3 = _3380 * _3226.y;
                                frontier_phi_78_pred_4 = _3380 * _3226.x;
                                frontier_phi_78_pred_5 = _3454 * _3238.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_78_pred;
                            _3458 = frontier_phi_78_pred_1;
                            _3463 = frontier_phi_78_pred_2;
                            _3462 = frontier_phi_78_pred_3;
                            _3461 = frontier_phi_78_pred_4;
                            _3460 = frontier_phi_78_pred_5;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            _3165 = _3458 + _3178;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            if (_3185 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3185;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3166;
                        frontier_phi_72_pred_1 = _3165;
                        frontier_phi_72_pred_2 = _3170;
                        frontier_phi_72_pred_3 = _3169;
                        frontier_phi_72_pred_4 = _3168;
                        frontier_phi_72_pred_5 = _3167;
                    }
                    _2809 = frontier_phi_72_pred;
                    _2807 = frontier_phi_72_pred_1;
                    _2817 = frontier_phi_72_pred_2;
                    _2815 = frontier_phi_72_pred_3;
                    _2813 = frontier_phi_72_pred_4;
                    _2811 = frontier_phi_72_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2807;
                        _2967 = _2809;
                        _2968 = _2811;
                        _2969 = _2813;
                        _2970 = _2815;
                        _2971 = _2817;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2817;
                frontier_phi_59_60_ladder_1 = _2813;
                frontier_phi_59_60_ladder_2 = _2811;
                frontier_phi_59_60_ladder_3 = _2809;
                frontier_phi_59_60_ladder_4 = _2807;
                frontier_phi_59_60_ladder_5 = _2815;
            }
            else
            {
                frontier_phi_59_60_ladder = _2670;
                frontier_phi_59_60_ladder_1 = _2666;
                frontier_phi_59_60_ladder_2 = _2664;
                frontier_phi_59_60_ladder_3 = _2662;
                frontier_phi_59_60_ladder_4 = _2660;
                frontier_phi_59_60_ladder_5 = _2668;
            }
            _2806 = frontier_phi_59_60_ladder_4;
            _2808 = frontier_phi_59_60_ladder_3;
            _2810 = frontier_phi_59_60_ladder_2;
            _2812 = frontier_phi_59_60_ladder_1;
            _2814 = frontier_phi_59_60_ladder_5;
            _2816 = frontier_phi_59_60_ladder;
        }
        float _2821 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2539 = (_2821 * _2812) + _2218;
        _2541 = (_2821 * _2814) + _2219;
        _2543 = (_2821 * _2816) + _2220;
        _2545 = ((_2806 * 0.039999999105930328369140625) * _2821) + _2374;
        _2547 = ((_2808 * 0.039999999105930328369140625) * _2821) + _2375;
        _2549 = ((_2810 * 0.039999999105930328369140625) * _2821) + _2376;
    }
    else
    {
        _2539 = _2218;
        _2541 = _2219;
        _2543 = _2220;
        _2545 = _2374;
        _2547 = _2375;
        _2549 = _2376;
    }
    uint _2555 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _2561 = (cbSceneParam._m0[72u].y * ((_732 * ((_723 - _685) - (_723 * _696))) + _685)) * cbInstanceData._m0[_2555].x;
    float _2562 = (cbSceneParam._m0[72u].y * ((_732 * ((_724 - _686) - (_724 * _696))) + _686)) * cbInstanceData._m0[_2555].y;
    float _2563 = (((_732 * ((_725 - _687) - (_725 * _696))) + _687) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2555].z;
    float _4413 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4424 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4435 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2580 = (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2539 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _863))) + ((_2545 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1667)) * cbPerFrame._m0[3u].x)) + _2561;
    float _2582 = (_2562 + ((_2547 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1667)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2541 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _863)));
    float _2584 = (_2563 + ((_2549 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1667)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2543 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _863)));
    float _4461 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2597 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    uint _2598 = _838 + 6u;
    float _2606 = _800 / cbSceneParam._m0[86u].x;
    float _2607 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2621 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2623 = _2621.x;
    float _2624 = _2621.y;
    float _2625 = _2621.z;
    float _2626 = _2621.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _2686 = _2685 / _787;
        float _2697 = _2686 * _280;
        float _2698 = _281 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _282;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2869 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2928 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2720 * _2878) - exp2(_2720 * _2879)) * _2867))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2626);
        _2722 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2623;
        _2724 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2624;
        _2726 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2625;
        _2728 = _2939 * _2626;
    }
    else
    {
        _2722 = _2623;
        _2724 = _2624;
        _2726 = _2625;
        _2728 = _2626;
    }
    float _2739 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2740 = _2739 == 3.0;
    float _2741 = log2(_2728);
    float _2745 = exp2(_2741 * cbSceneParam._m0[78u].x);
    float _2746 = exp2(_2741 * cbSceneParam._m0[78u].y);
    float _2747 = exp2(_2741 * cbSceneParam._m0[78u].z);
    float _2748 = _2745 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0)));
    float _2749 = _2746 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0)));
    float _2750 = _2747 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0)));
    float _2759 = (_2739 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2759 * (_2740 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.y = _2759 * (_2740 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.z = _2759 * (_2740 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.w = cbInstanceData._m0[_2598].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2561) * _2597) * _2745) * _2759;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2562) * _2597) * _2746) * _2759;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2563) * _2597) * _2747) * _2759;
    SV_Target_1.w = cbInstanceData._m0[_2598].w;
}


