#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _388;
uint _2049;
uint _2050;
uint _2051;
uint _2285;
uint _2286;
uint _2287;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _200 = _199 * _191;
    float _201 = _199 * _192;
    float _202 = _199 * _193;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _297 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _320 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _332 = cbMtdParam._m0[28u].z + _267;
    float _333 = cbMtdParam._m0[28u].w + _268;
    float _334 = cbMtdParam._m0[29u].x + _269;
    float _351 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_313 * _200, _313 * _201, _313 * _202));
    float _352 = (-0.0) - dot(vec3(_332, _333, _334), vec3(_320 * _211, _320 * _212, _320 * _213));
    float _353 = (-0.0) - dot(vec3(_332, _333, _334), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _363 = ((cbMtdParam._m0[25u].y * _351) * _357) + (((_297.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = ((cbMtdParam._m0[25u].z * _352) * _357) + (((_297.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _367 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _368 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _386;
    float _389;
    float _391;
    if (_363 > 0.0)
    {
        float _372 = (1.0 - _367) / _363;
        _386 = _372;
        _389 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_372 * _358)) * 0.16666667163372039794921875;
        _391 = (fract((_372 * _364) + _368) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_363 < 0.0)
        {
            float _387 = ((-0.0) - _367) / _363;
            frontier_phi_3_2_ladder = (fract(_387 * _358) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _387;
            frontier_phi_3_2_ladder_2 = (fract((_387 * _364) + _368) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _388;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _386 = frontier_phi_3_2_ladder_1;
        _389 = frontier_phi_3_2_ladder;
        _391 = frontier_phi_3_2_ladder_2;
    }
    float _417;
    float _419;
    float _421;
    if (_364 > 0.0)
    {
        float _404 = (1.0 - _368) / _364;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_404 < _386)
        {
            frontier_phi_8_5_ladder = _404;
            frontier_phi_8_5_ladder_1 = (fract(_404 * _358) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_404 * _363) + _367) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _386;
            frontier_phi_8_5_ladder_1 = _391;
            frontier_phi_8_5_ladder_2 = _389;
        }
        _417 = frontier_phi_8_5_ladder;
        _419 = frontier_phi_8_5_ladder_2;
        _421 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_364 < 0.0)
        {
            float _418 = ((-0.0) - _368) / _364;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_418 < _386)
            {
                frontier_phi_8_6_ladder_9_ladder = _418;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_418 * _358) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_418 * _363) + _367) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _386;
                frontier_phi_8_6_ladder_9_ladder_1 = _391;
                frontier_phi_8_6_ladder_9_ladder_2 = _389;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _386;
            frontier_phi_8_6_ladder_1 = _391;
            frontier_phi_8_6_ladder_2 = _389;
        }
        _417 = frontier_phi_8_6_ladder;
        _419 = frontier_phi_8_6_ladder_2;
        _421 = frontier_phi_8_6_ladder_1;
    }
    float _425 = (_358 > 0.0) ? (cbMtdParam._m0[20u].z / _358) : 5000.0;
    float _438;
    float _439;
    if (_425 < _417)
    {
        _438 = ((_367 + cbMtdParam._m0[22u].x) + (_425 * _363)) * 0.16666667163372039794921875;
        _439 = (((_425 * _364) + _368) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _438 = _419;
        _439 = _421;
    }
    vec4 _441 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_438, _439));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _457 = (cbMtdParam._m0[19u].y * _443) * cbMtdParam._m0[16u].x;
    float _459 = (cbMtdParam._m0[19u].y * _444) * cbMtdParam._m0[16u].y;
    float _461 = (cbMtdParam._m0[19u].y * _445) * cbMtdParam._m0[16u].z;
    vec4 _488 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _493 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _499 = ((_488.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _501 = (-0.0) - (cbMtdParam._m0[21u].x * ((_488.x * 0.5) + (-0.25)));
    float _502 = fract(_493);
    float _504 = fract(_493 + 0.5);
    vec4 _531 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_502 * _501) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_499 * _502) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _533 = _531.x;
    float _539 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_504 * _501) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_499 * _504) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _533) * abs((_502 * 2.0) + (-1.0))) + _533;
    float _550 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _554 = fract(abs(_550));
    float _561 = sin(cbMtdParam._m0[21u].z);
    float _562 = cos(cbMtdParam._m0[21u].z);
    float _563 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _564 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _589 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_564, (-0.0) - _561, _562 * _563) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_564, _562, _563 * _561) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_550 >= ((-0.0) - _550)) ? _554 : ((-0.0) - _554)) * cbMtdParam._m0[18u].z) - _539)) + cbMtdParam._m0[18u].w;
    float _590 = ceil(_589);
    float _2513 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _2513 : (isnan(_2513) ? 1.0 : min(_2513, 1.0));
    float _611 = ((((cbMtdParam._m0[21u].w * _443) * cbMtdParam._m0[15u].x) - _457) * _591) + _457;
    float _612 = ((((cbMtdParam._m0[21u].w * _444) * cbMtdParam._m0[15u].y) - _459) * _591) + _459;
    float _613 = ((((cbMtdParam._m0[21u].w * _445) * cbMtdParam._m0[15u].z) - _461) * _591) + _461;
    float _617 = abs(cbMtdParam._m0[20u].w * _589);
    float _621 = (((_617 * cbMtdParam._m0[18u].y) - _539) * _617) + _539;
    float _2524 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
    vec4 _634 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _649 = (cbMtdParam._m0[14u].x * _634.x) * cbMtdParam._m0[19u].x;
    float _650 = (cbMtdParam._m0[14u].y * _634.y) * cbMtdParam._m0[19u].x;
    float _651 = (cbMtdParam._m0[14u].z * _634.z) * cbMtdParam._m0[19u].x;
    float _658 = exp2(log2(_622) * cbMtdParam._m0[20u].x);
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _698 = _267 * _697;
    float _699 = _268 * _697;
    float _700 = _269 * _697;
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_706 * cbSceneParam._m0[86u].x, _707 * cbSceneParam._m0[86u].y));
    float _719 = _716.x * TEXCOORD_4;
    float _720 = (-0.0) - _698;
    float _721 = (-0.0) - _699;
    float _722 = (-0.0) - _700;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = (cbModelParam._m0[37u].x * ((((fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _816 = (cbModelParam._m0[37u].y * ((((fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _817 = (((((fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        _891 = _854 * (_820.z + (-0.5));
        _892 = _854 * (_820.y + (-0.5));
        _893 = _854 * (_820.x + (-0.5));
        _894 = _864 * (_827.z + (-0.5));
        _895 = _864 * (_827.y + (-0.5));
        _896 = _864 * (_827.x + (-0.5));
        _897 = _874 * (_834.z + (-0.5));
        _898 = _874 * (_834.y + (-0.5));
        _899 = _874 * (_834.x + (-0.5));
        _900 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        _901 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        _902 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    }
    else
    {
        _891 = _388;
        _892 = _388;
        _893 = _388;
        _894 = _388;
        _895 = _388;
        _896 = _388;
        _897 = _388;
        _898 = _388;
        _899 = _388;
        _900 = _388;
        _901 = _388;
        _902 = _388;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = (cbModelParam._m0[38u].x * ((((fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _956 = (cbModelParam._m0[38u].y * ((((fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _957 = (((((fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        _1029 = _992 * (_959.z + (-0.5));
        _1030 = _992 * (_959.y + (-0.5));
        _1031 = _992 * (_959.x + (-0.5));
        _1032 = _1002 * (_966.z + (-0.5));
        _1033 = _1002 * (_966.y + (-0.5));
        _1034 = _1002 * (_966.x + (-0.5));
        _1035 = _1012 * (_973.z + (-0.5));
        _1036 = _1012 * (_973.y + (-0.5));
        _1037 = _1012 * (_973.x + (-0.5));
        _1038 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        _1039 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        _1040 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    }
    else
    {
        _1029 = _388;
        _1030 = _388;
        _1031 = _388;
        _1032 = _388;
        _1033 = _388;
        _1034 = _388;
        _1035 = _388;
        _1036 = _388;
        _1037 = _388;
        _1038 = _388;
        _1039 = _388;
        _1040 = _388;
    }
    float _1055 = _698 * (-0.5);
    float _1056 = _699 * (-0.5);
    float _1057 = _700 * (-0.5);
    float _1058 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1061 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1064 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1099;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1071 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_891, _894, _897, _900));
        float _1075 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_892, _895, _898, _901));
        float _1079 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_893, _896, _899, _902));
        float _1086 = dot(vec4(cbModelParam._m0[39u]), vec4(_1055, _1056, _1057, 1.0));
        _1099 = dot(vec3(isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)), isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1086) ? 0.0 : (isnan(0.0) ? _1086 : max(0.0, _1086))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1099 = 1.0;
    }
    float _1110;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1101 = dot(vec4(cbModelParam._m0[40u]), vec4(_1055, _1056, _1057, 1.0));
        _1110 = dot(vec3(isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)), isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)), isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1101) ? 0.0 : (isnan(0.0) ? _1101 : max(0.0, _1101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1110 = 1.0;
    }
    float _1114 = (_1110 * cbModelParam._m0[1u].x) + (_1099 * (1.0 - cbModelParam._m0[1u].x));
    float _1120 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1202;
    float _1204;
    float _1206;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1169 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1173 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1177 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1180 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1183 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1186 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1212;
        if (_1180 > 0.0)
        {
            _1212 = abs((1.0 - _1169) / _1180);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1180 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1169 + 1.0) / _1180);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1212 = frontier_phi_26_24_ladder;
        }
        float _1488;
        if (_1183 > 0.0)
        {
            _1488 = abs((1.0 - _1173) / _1183);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1183 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1173 + 1.0) / _1183);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1488 = frontier_phi_35_31_ladder;
        }
        float _1802;
        if (_1186 > 0.0)
        {
            _1802 = abs((1.0 - _1177) / _1186);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1186 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1177 + 1.0) / _1186);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1802 = frontier_phi_49_42_ladder;
        }
        float _1804 = isnan(_1488) ? _1212 : (isnan(_1212) ? _1488 : min(_1212, _1488));
        float _1805 = isnan(_1802) ? _1804 : (isnan(_1804) ? _1802 : min(_1804, _1802));
        float _1809 = (_1805 * _1180) + _1169;
        float _1810 = (_1805 * _1183) + _1173;
        float _1811 = (_1805 * _1186) + _1177;
        float _1812 = _1805 * 9.9999997473787516355514526367188e-05;
        float _1813 = (-1.0) - _1812;
        float _1815 = _1812 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1811 > _1815) || ((_1811 < _1813) || ((_1810 > _1815) || ((_1810 < _1813) || ((_1809 < _1813) || (_1809 > _1815))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1811, cbModelParam._m0[9u].z, fma(_1810, cbModelParam._m0[9u].y, _1809 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1811, cbModelParam._m0[10u].z, fma(_1810, cbModelParam._m0[10u].y, _1809 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1811, cbModelParam._m0[11u].z, fma(_1810, cbModelParam._m0[11u].y, _1809 * cbModelParam._m0[11u].x))), _1120);
            frontier_phi_25_49_ladder = _1922.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1922.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1922.x * cbModelParam._m0[1u].y;
        }
        _1202 = frontier_phi_25_49_ladder_2;
        _1204 = frontier_phi_25_49_ladder_1;
        _1206 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1120);
        _1202 = _1190.x * cbModelParam._m0[1u].y;
        _1204 = _1190.y * cbModelParam._m0[1u].y;
        _1206 = _1190.z * cbModelParam._m0[1u].y;
    }
    float _1209 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1297;
    float _1299;
    float _1301;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1261 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1265 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1269 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1272 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1275 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1278 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1493;
        if (_1272 > 0.0)
        {
            _1493 = abs((1.0 - _1261) / _1272);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1261 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1493 = frontier_phi_37_33_ladder;
        }
        float _1828;
        if (_1275 > 0.0)
        {
            _1828 = abs((1.0 - _1265) / _1275);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1265 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1828 = frontier_phi_51_44_ladder;
        }
        float _1979;
        if (_1278 > 0.0)
        {
            _1979 = abs((1.0 - _1269) / _1278);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1269 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1979 = frontier_phi_65_60_ladder;
        }
        float _1981 = isnan(_1828) ? _1493 : (isnan(_1493) ? _1828 : min(_1493, _1828));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1272) + _1261;
        float _1987 = (_1982 * _1275) + _1265;
        float _1988 = (_1982 * _1278) + _1269;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1989;
        float _1992 = _1989 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1988 > _1992) || ((_1988 < _1990) || ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 < _1990) || (_1986 > _1992))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1988, cbModelParam._m0[17u].z, fma(_1987, cbModelParam._m0[17u].y, _1986 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1988, cbModelParam._m0[18u].z, fma(_1987, cbModelParam._m0[18u].y, _1986 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1988, cbModelParam._m0[19u].z, fma(_1987, cbModelParam._m0[19u].y, _1986 * cbModelParam._m0[19u].x))), _1209);
            frontier_phi_34_65_ladder = _2148.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2148.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2148.x * cbModelParam._m0[1u].z;
        }
        _1297 = frontier_phi_34_65_ladder_2;
        _1299 = frontier_phi_34_65_ladder_1;
        _1301 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1281 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1209);
        _1297 = _1281.x * cbModelParam._m0[1u].z;
        _1299 = _1281.y * cbModelParam._m0[1u].z;
        _1301 = _1281.z * cbModelParam._m0[1u].z;
    }
    float _1313 = _719 * 0.01200000010430812835693359375;
    float _1315 = _1313 * ((cbModelParam._m0[1u].w * (_1297 - _1202)) + _1202);
    float _1316 = _1313 * ((cbModelParam._m0[1u].w * (_1299 - _1204)) + _1204);
    float _1317 = _1313 * ((cbModelParam._m0[1u].w * (_1301 - _1206)) + _1206);
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, _1315 * cbSceneParam._m0[91u].x));
    uint _1351 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1355 = floatBitsToUint(cbInstanceData._m0[_1351 + 5u]);
    uint _1357 = _1355.x * 14u;
    uint _1358 = _1357 + 13u;
    float _1363 = _719 + (-1.0);
    float _1366 = (cbLight._m0[_1358].x * _1363) + 1.0;
    float _1367 = (cbLight._m0[_1358].y * _1363) + 1.0;
    uint _1368 = _1357 + 8u;
    float _1379 = cbLight._m0[_1357].x + _698;
    float _1380 = cbLight._m0[_1357].y + _699;
    float _1381 = cbLight._m0[_1357].z + _700;
    float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
    float _1389 = dot(vec3(0.0), vec3(cbLight._m0[_1357].xyz));
    float _2650 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1392 = isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0));
    float _1393 = dot(vec3(0.0), vec3(_698, _699, _700));
    float _2661 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1396 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    float _1397 = dot(vec3(cbLight._m0[_1357].xyz), vec3(_1379 * _1385, _1380 * _1385, _1381 * _1385));
    float _2672 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1408 = (exp2(log2(1.0 - (isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1414 = (0.5 / ((_1392 + 9.9999999392252902907785028219223e-09) + _1396)) * _1392;
    float _2683 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1416 = (isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0))) * 0.31831014156341552734375;
    float _1418 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
    uint _1428 = _1357 + 9u;
    uint _1434 = _1357 | 1u;
    float _1440 = cbLight._m0[_1434].x + _698;
    float _1441 = cbLight._m0[_1434].y + _699;
    float _1442 = cbLight._m0[_1434].z + _700;
    float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
    float _1450 = dot(vec3(0.0), vec3(cbLight._m0[_1434].xyz));
    float _2699 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
    float _1453 = isnan(1.0) ? _2699 : (isnan(_2699) ? 1.0 : min(_2699, 1.0));
    float _1454 = dot(vec3(cbLight._m0[_1434].xyz), vec3(_1440 * _1446, _1441 * _1446, _1442 * _1446));
    float _2710 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
    float _1463 = (exp2(log2(1.0 - (isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1467 = (0.5 / ((_1453 + 9.9999999392252902907785028219223e-09) + _1396)) * _1453;
    float _2721 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1469 = (isnan(1.0) ? _2721 : (isnan(_2721) ? 1.0 : min(_2721, 1.0))) * 0.31831014156341552734375;
    float _1470 = isnan(1.0) ? _1367 : (isnan(_1367) ? 1.0 : min(_1367, 1.0));
    float _1480 = (((_1463 * cbLight._m0[_1428].x) * _1469) * _1470) + (((_1408 * cbLight._m0[_1368].x) * _1416) * _1418);
    float _1481 = (((_1463 * cbLight._m0[_1428].y) * _1469) * _1470) + (((_1408 * cbLight._m0[_1368].y) * _1416) * _1418);
    float _1482 = (((_1463 * cbLight._m0[_1428].z) * _1469) * _1470) + (((_1408 * cbLight._m0[_1368].z) * _1416) * _1418);
    float _1599;
    float _1601;
    float _1603;
    if (_1355.y == 0u)
    {
        float _1538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1538;
        float _1540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1538;
        float _1541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1538;
        uvec4 _1553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1554 = _1553.x;
        uint _1565 = uint((float(_1553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _1554))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _1554)));
        float _1575 = (log2(_1541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1576 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        uint _1579 = uint(isnan(14.0) ? _1576 : (isnan(_1576) ? 14.0 : min(_1576, 14.0)));
        uvec4 _1585 = texelFetch(g_lightClusterGridBuffer, int(((_1579 << 2u) + (_1565 << 6u)) >> 2u));
        uint _1586 = _1585.x;
        uint _1587 = _1553.z;
        float _1686;
        float _1688;
        float _1690;
        if (((((1u << ((_1587 >> 4u) & 15u)) + 4294967295u) & _1586) == 0u) || ((_1587 & 240u) == 0u))
        {
            _1686 = 0.0;
            _1688 = 0.0;
            _1690 = 0.0;
        }
        else
        {
            float _1687;
            float _1689;
            float _1691;
            float _1853 = 0.0;
            float _1854 = 0.0;
            float _1855 = 0.0;
            uint _1856 = 0u;
            uint _1865;
            bool _1866;
            for (;;)
            {
                _1865 = texelFetch(g_lightClassification, int((((_1579 << 5u) + (_1565 << 9u)) + (_1856 << 2u)) >> 2u)).x;
                _1866 = _1865 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1866)
                {
                    frontier_phi_62_pred = _1855;
                    frontier_phi_62_pred_1 = _1854;
                    frontier_phi_62_pred_2 = _1853;
                }
                else
                {
                    float _2019;
                    float _2020;
                    float _2021;
                    uint _2022;
                    _2019 = _1853;
                    _2020 = _1854;
                    _2021 = _1855;
                    _2022 = _1865;
                    float _1931;
                    float _1932;
                    float _1933;
                    for (;;)
                    {
                        uint _2026 = uint(findLSB(_2022)) + (_1856 << 5u);
                        uint _2023 = (_2022 + 4294967295u) & _2022;
                        uint _2028 = _2026 * 48u;
                        vec4 _2042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2028)).x, texelFetch(g_PointLightRenderingBuffer, int(_2028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2028 + 3u)).x));
                        uint _2059 = (_2026 * 48u) + 8u;
                        vec3 _2070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2059)).x, texelFetch(g_PointLightRenderingBuffer, int(_2059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2059 + 2u)).x));
                        float _2074 = _2042.x - _1539;
                        float _2075 = _2042.y - _1540;
                        float _2076 = _2042.z - _1541;
                        float _2077 = dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076));
                        float _2080 = inversesqrt(_2077);
                        float _2089 = 1.0 - (_2077 * _2042.w);
                        float _2747 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
                        float _2091 = sqrt(_2077) * uintBitsToFloat(uvec4(_2049, _2050, _2051, texelFetch(g_PointLightRenderingBuffer, int(((_2026 * 48u) + 4u) + 3u)).x)).w;
                        float _2094 = 1.39999997615814208984375 / (_2091 + 1.39999997615814208984375);
                        float _2095 = _2094 * _2094;
                        float _2098 = ((1.0 - _2095) * dot(vec3(0.0), vec3(_2080 * _2074, _2080 * _2075, _2080 * _2076))) + _2095;
                        float _2100 = (-0.0) - _1539;
                        float _2101 = (-0.0) - _1540;
                        float _2102 = (-0.0) - _1541;
                        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
                        float _2110 = dot(vec3(0.0), vec3(_2106 * _2100, _2106 * _2101, _2106 * _2102));
                        float _2758 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
                        float _2769 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
                        float _2114 = isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0));
                        float _2118 = (0.5 / (((isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0))) + 9.9999999392252902907785028219223e-09) + _2114)) * _2114;
                        float _2780 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
                        float _2127 = (((isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0))) * 3.1415927410125732421875) / (((_2091 * _2091) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2747 : (isnan(_2747) ? 1.0 : min(_2747, 1.0)));
                        _1931 = (_2127 * _2070.x) + _2019;
                        _1932 = (_2127 * _2070.y) + _2020;
                        _1933 = (_2127 * _2070.z) + _2021;
                        if (_2023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2019 = _1931;
                            _2020 = _1932;
                            _2021 = _1933;
                            _2022 = _2023;
                        }
                    }
                    frontier_phi_62_pred = _1933;
                    frontier_phi_62_pred_1 = _1932;
                    frontier_phi_62_pred_2 = _1931;
                }
                _1691 = frontier_phi_62_pred;
                _1689 = frontier_phi_62_pred_1;
                _1687 = frontier_phi_62_pred_2;
                uint _1857 = _1856 + 1u;
                if (_1857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1853 = _1687;
                    _1854 = _1689;
                    _1855 = _1691;
                    _1856 = _1857;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1686 = _1687;
            _1688 = _1689;
            _1690 = _1691;
        }
        uvec4 _1694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1695 = _1694.z;
        uint _1697 = (_1695 >> 8u) & 15u;
        float _1833;
        float _1835;
        float _1837;
        if (((4294967295u << _1697) & _1586) == 0u)
        {
            _1833 = _1686;
            _1835 = _1688;
            _1837 = _1690;
        }
        else
        {
            float _1849 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1697 < ((_1695 >> 12u) & 15u))
            {
                float _1834;
                float _1836;
                float _1838;
                float _2005 = _1686;
                float _2006 = _1688;
                float _2007 = _1690;
                uint _2008 = _1697;
                uint _2017;
                bool _2018;
                for (;;)
                {
                    _2017 = texelFetch(g_lightClassification, int((((_1579 << 5u) + (_1565 << 9u)) + (_2008 << 2u)) >> 2u)).x;
                    _2018 = _2017 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_2018)
                    {
                        frontier_phi_71_pred = _2007;
                        frontier_phi_71_pred_1 = _2006;
                        frontier_phi_71_pred_2 = _2005;
                    }
                    else
                    {
                        float _2153;
                        float _2154;
                        float _2155;
                        float _2374;
                        float _2375;
                        float _2376;
                        float _2163 = _2005;
                        float _2164 = _2006;
                        float _2165 = _2007;
                        uint _2166 = _2017;
                        uint _2167;
                        uint _2177;
                        vec4 _2192;
                        float _2193;
                        vec3 _2205;
                        vec4 _2220;
                        vec4 _2235;
                        float _2281;
                        bool _2282;
                        for (;;)
                        {
                            _2177 = ((_2008 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2166));
                            _2167 = (_2166 + 4294967295u) & _2166;
                            uint _2179 = _2177 * 40u;
                            _2192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2179 + 3u)).x));
                            _2193 = _2192.w;
                            uint _2195 = (_2177 * 40u) + 8u;
                            _2205 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 2u)).x));
                            uint _2207 = (_2177 * 40u) + 16u;
                            _2220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2207 + 3u)).x));
                            uint _2222 = (_2177 * 40u) + 20u;
                            _2235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2222 + 3u)).x));
                            uint _2237 = (_2177 * 40u) + 24u;
                            vec4 _2250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2237 + 3u)).x));
                            uint _2256 = (_2177 * 40u) + 28u;
                            vec4 _2269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2256 + 3u)).x));
                            _2281 = fma(_1541, _2269.z, fma(_1540, _2269.y, _2269.x * _1539)) + _2269.w;
                            _2282 = !((fma(_1541, _2250.z, fma(_1540, _2250.y, _2250.x * _1539)) + _2250.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2282)
                            {
                                float _2316 = _2192.x - _1539;
                                float _2317 = _2192.y - _1540;
                                float _2318 = _2192.z - _1541;
                                float _2319 = dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318));
                                float _2322 = inversesqrt(_2319);
                                float _2329 = 1.0 - (_2319 / (_2193 * _2193));
                                float _2791 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
                                float _2331 = sqrt(_2319) * uintBitsToFloat(uvec4(_2285, _2286, _2287, texelFetch(g_SpotLightRenderingBuffer, int(((_2177 * 40u) + 4u) + 3u)).x)).w;
                                float _2333 = 1.39999997615814208984375 / (_2331 + 1.39999997615814208984375);
                                float _2334 = _2333 * _2333;
                                float _2337 = (fma(_1541, _2220.z, fma(_1540, _2220.y, _2220.x * _1539)) + _2220.w) / _2281;
                                float _2338 = (fma(_1541, _2235.z, fma(_1540, _2235.y, _2235.x * _1539)) + _2235.w) / _2281;
                                float _2342 = 1.0 - dot(vec2(_2337, _2338), vec2(_2337, _2338));
                                float _2802 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
                                float _2350 = dot(vec3(0.0), vec3((-0.0) - (_1539 * _1849), (-0.0) - (_1540 * _1849), (-0.0) - (_1541 * _1849)));
                                float _2813 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                                float _2358 = ((1.0 - _2334) * dot(vec3(0.0), vec3(_2322 * _2316, _2322 * _2317, _2322 * _2318))) + _2334;
                                float _2824 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
                                float _2359 = isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0));
                                float _2363 = (0.5 / (((isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0))) + 9.9999999392252902907785028219223e-09) + _2359)) * _2359;
                                float _2835 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
                                float _2370 = ((isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0))) * (isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0)))) * (((isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0))) * 3.1415927410125732421875) / (((_2331 * _2331) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2370 * _2205.z;
                                frontier_phi_77_pred_1 = _2370 * _2205.x;
                                frontier_phi_77_pred_2 = _2370 * _2205.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2376 = frontier_phi_77_pred;
                            _2374 = frontier_phi_77_pred_1;
                            _2375 = frontier_phi_77_pred_2;
                            _2153 = _2374 + _2163;
                            _2154 = _2375 + _2164;
                            _2155 = _2376 + _2165;
                            if (_2167 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2163 = _2153;
                                _2164 = _2154;
                                _2165 = _2155;
                                _2166 = _2167;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2155;
                        frontier_phi_71_pred_1 = _2154;
                        frontier_phi_71_pred_2 = _2153;
                    }
                    _1838 = frontier_phi_71_pred;
                    _1836 = frontier_phi_71_pred_1;
                    _1834 = frontier_phi_71_pred_2;
                    uint _2009 = _2008 + 1u;
                    if (_2009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2005 = _1834;
                        _2006 = _1836;
                        _2007 = _1838;
                        _2008 = _2009;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1836;
                frontier_phi_53_54_ladder_1 = _1834;
                frontier_phi_53_54_ladder_2 = _1838;
            }
            else
            {
                frontier_phi_53_54_ladder = _1688;
                frontier_phi_53_54_ladder_1 = _1686;
                frontier_phi_53_54_ladder_2 = _1690;
            }
            _1833 = frontier_phi_53_54_ladder_1;
            _1835 = frontier_phi_53_54_ladder;
            _1837 = frontier_phi_53_54_ladder_2;
        }
        float _1842 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _1599 = ((_1833 * 0.039999999105930328369140625) * _1842) + _1480;
        _1601 = ((_1835 * 0.039999999105930328369140625) * _1842) + _1481;
        _1603 = ((_1837 * 0.039999999105930328369140625) * _1842) + _1482;
    }
    else
    {
        _1599 = _1480;
        _1601 = _1481;
        _1603 = _1482;
    }
    uint _1610 = (_1351 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1616 = (cbSceneParam._m0[72u].y * ((_658 * ((_649 - _611) - (_649 * _622))) + _611)) * cbInstanceData._m0[_1610].x;
    float _1617 = (cbSceneParam._m0[72u].y * ((_658 * ((_650 - _612) - (_650 * _622))) + _612)) * cbInstanceData._m0[_1610].y;
    float _1618 = (((_658 * ((_651 - _613) - (_651 * _622))) + _613) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1610].z;
    float _1625 = _1616 + ((_1599 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _1626 = _1617 + ((_1601 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _1627 = _1618 + ((_1603 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _2866 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1640 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
    uint _1641 = _1351 + 6u;
    float _1649 = _706 / cbSceneParam._m0[86u].x;
    float _1650 = _707 / cbSceneParam._m0[86u].y;
    vec4 _1664 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1649, _1650, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1666 = _1664.x;
    float _1667 = _1664.y;
    float _1668 = _1664.z;
    float _1669 = _1664.w;
    float _1743;
    float _1745;
    float _1747;
    float _1749;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _1705 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _1706 = _1705 / _693;
        float _1717 = _1706 * _267;
        float _1718 = _268 * _1706;
        float _1719 = (-0.0) - _1718;
        float _1720 = _1706 * _269;
        float _1722 = (cbSceneParam._m0[77u].w * _1719) / _1705;
        float _1723 = _1722 + cbSceneParam._m0[79u].w;
        float _1724 = cbSceneParam._m0[79u].w - _1718;
        float _1730 = sqrt(((_1717 * _1717) + (_1718 * _1718)) + (_1720 * _1720));
        float _1733 = (1.0 - (cbSceneParam._m0[77u].w / _1705)) * _1730;
        float _1739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1741 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1941;
        if (abs((_1719 - _1722) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1941 = ((((_1723 > 0.0) ? exp2(_1739 * _1723) : (2.0 - exp2(_1741 * _1723))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1733;
        }
        else
        {
            float _1879 = 1.0 / cbSceneParam._m0[80u].x;
            float _1880 = isnan(_1724) ? _1723 : (isnan(_1723) ? _1724 : max(_1723, _1724));
            float _1881 = isnan(_1724) ? _1723 : (isnan(_1723) ? _1724 : min(_1723, _1724));
            float _1890 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : min(_1880, 0.0));
            float _1891 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : min(_1881, 0.0));
            _1941 = ((abs(_1730 / _1719) * cbSceneParam._m0[80u].y) * ((((_1890 - _1891) * 2.0) - ((exp2(_1739 * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)))) - exp2(_1739 * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))))) * _1879)) - ((exp2(_1741 * _1890) - exp2(_1741 * _1891)) * _1879))) + (_1733 * cbSceneParam._m0[80u].z);
        }
        vec4 _1943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1649, _1650, 1.0), 0.0);
        float _1952 = exp2((_1941 * (-1.44269502162933349609375)) * (1.0 - _1943.w));
        float _1953 = log2(_1952);
        float _1969 = log2(_1669);
        _1743 = (exp2(_1969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1953 * cbSceneParam._m0[78u].x)) * _1943.x) / cbSceneParam._m0[78u].x)) + _1666;
        _1745 = (exp2(_1969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1953 * cbSceneParam._m0[78u].y)) * _1943.y) / cbSceneParam._m0[78u].y)) + _1667;
        _1747 = (exp2(_1969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1953 * cbSceneParam._m0[78u].z)) * _1943.z) / cbSceneParam._m0[78u].z)) + _1668;
        _1749 = _1952 * _1669;
    }
    else
    {
        _1743 = _1666;
        _1745 = _1667;
        _1747 = _1668;
        _1749 = _1669;
    }
    float _1760 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1761 = _1760 == 3.0;
    float _1763 = log2(_1749);
    float _1767 = exp2(_1763 * cbSceneParam._m0[78u].x);
    float _1768 = exp2(_1763 * cbSceneParam._m0[78u].y);
    float _1769 = exp2(_1763 * cbSceneParam._m0[78u].z);
    float _1770 = _1767 * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    float _1771 = _1768 * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    float _1772 = _1769 * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    float _1781 = (_1760 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1781 * (_1761 ? _1770 : (_1770 + (cbSceneParam._m0[72u].w * _1743)));
    SV_Target.y = _1781 * (_1761 ? _1771 : (_1771 + (cbSceneParam._m0[72u].w * _1745)));
    SV_Target.z = _1781 * (_1761 ? _1772 : (_1772 + (cbSceneParam._m0[72u].w * _1747)));
    SV_Target.w = cbInstanceData._m0[_1641].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1616) * _1640) * _1767) * _1781;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1617) * _1640) * _1768) * _1781;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1618) * _1640) * _1769) * _1781;
    SV_Target_1.w = cbInstanceData._m0[_1641].w;
}


