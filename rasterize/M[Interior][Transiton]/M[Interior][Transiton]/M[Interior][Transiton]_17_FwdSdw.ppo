#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _392;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _324 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = cbMtdParam._m0[28u].z + _271;
    float _337 = cbMtdParam._m0[28u].w + _272;
    float _338 = cbMtdParam._m0[29u].x + _273;
    float _355 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_317 * _204, _317 * _205, _317 * _206));
    float _356 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_324 * _215, _324 * _216, _324 * _217));
    float _357 = (-0.0) - dot(vec3(_336, _337, _338), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _367 = ((cbMtdParam._m0[25u].y * _355) * _361) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = ((cbMtdParam._m0[25u].z * _356) * _361) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _372 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _390;
    float _393;
    float _395;
    if (_367 > 0.0)
    {
        float _376 = (1.0 - _371) / _367;
        _390 = _376;
        _393 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_376 * _362)) * 0.16666667163372039794921875;
        _395 = (fract((_376 * _368) + _372) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _391 = ((-0.0) - _371) / _367;
            frontier_phi_3_2_ladder = (fract(_391 * _362) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _391;
            frontier_phi_3_2_ladder_2 = (fract((_391 * _368) + _372) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _390 = frontier_phi_3_2_ladder_1;
        _393 = frontier_phi_3_2_ladder;
        _395 = frontier_phi_3_2_ladder_2;
    }
    float _421;
    float _423;
    float _425;
    if (_368 > 0.0)
    {
        float _408 = (1.0 - _372) / _368;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_408 < _390)
        {
            frontier_phi_8_5_ladder = (fract(_408 * _362) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_408 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _408;
        }
        else
        {
            frontier_phi_8_5_ladder = _395;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _390;
        }
        _421 = frontier_phi_8_5_ladder_2;
        _423 = frontier_phi_8_5_ladder_1;
        _425 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_368 < 0.0)
        {
            float _422 = ((-0.0) - _372) / _368;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_422 < _390)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_422 * _362) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_422 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _422;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _395;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _390;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _395;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _390;
        }
        _421 = frontier_phi_8_6_ladder_2;
        _423 = frontier_phi_8_6_ladder_1;
        _425 = frontier_phi_8_6_ladder;
    }
    float _429 = (_362 > 0.0) ? (cbMtdParam._m0[20u].z / _362) : 5000.0;
    float _442;
    float _443;
    if (_429 < _421)
    {
        _442 = ((_371 + cbMtdParam._m0[22u].x) + (_429 * _367)) * 0.16666667163372039794921875;
        _443 = (((_429 * _368) + _372) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _442 = _423;
        _443 = _425;
    }
    vec4 _445 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_442, _443));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    vec4 _476 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _487 = ((_476.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _489 = (-0.0) - (cbMtdParam._m0[21u].x * ((_476.x * 0.5) + (-0.25)));
    float _490 = fract(_481);
    float _492 = fract(_481 + 0.5);
    vec4 _519 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_490 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _490) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _521 = _519.x;
    float _527 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_492 * _489) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_487 * _492) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _521) * abs((_490 * 2.0) + (-1.0))) + _521;
    float _541 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _545 = fract(abs(_541));
    float _551 = sin(cbMtdParam._m0[21u].z);
    float _552 = cos(cbMtdParam._m0[21u].z);
    float _553 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _554 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _584 = abs(cbMtdParam._m0[20u].w * (((_527 - (((_541 >= ((-0.0) - _541)) ? _545 : ((-0.0) - _545)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_554, (-0.0) - _551, _552 * _553) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_554, _552, _553 * _551) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _588 = (((_584 * cbMtdParam._m0[18u].y) - _527) * _584) + _527;
    float _3228 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    vec4 _601 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _616 = (cbMtdParam._m0[14u].x * _601.x) * cbMtdParam._m0[19u].x;
    float _617 = (cbMtdParam._m0[14u].y * _601.y) * cbMtdParam._m0[19u].x;
    float _618 = (cbMtdParam._m0[14u].z * _601.z) * cbMtdParam._m0[19u].x;
    float _628 = exp2(log2(_589) * cbMtdParam._m0[20u].x);
    float _3239 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3250 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3261 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _662 = _271 * _661;
    float _663 = _272 * _661;
    float _664 = _273 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _684 = uint(roundEven(NORMAL.w)) * 13u;
    uint _686 = _684 + 9u;
    uint _687 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3272 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _710 = _707.x * TEXCOORD_4;
    float _711 = (-0.0) - _662;
    float _712 = (-0.0) - _663;
    float _713 = (-0.0) - _664;
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = (cbModelParam._m0[37u].x * ((((fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _807 = (cbModelParam._m0[37u].y * ((((fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _808 = (((((fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(0.0), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3320 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3331 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3342 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(0.0), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3353 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3364 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3375 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(0.0), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3408 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1018 = _847;
        _1019 = _846;
        _1020 = _858;
        _1021 = _857;
        _1022 = _856;
        _1023 = _868;
        _1024 = _867;
        _1025 = _866;
        _1026 = _881;
        _1027 = _880;
        _1028 = _879;
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _392;
        _1018 = _392;
        _1019 = _392;
        _1020 = _392;
        _1021 = _392;
        _1022 = _392;
        _1023 = _392;
        _1024 = _392;
        _1025 = _392;
        _1026 = _392;
        _1027 = _392;
        _1028 = _392;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = (cbModelParam._m0[38u].x * ((((fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1085 = (cbModelParam._m0[38u].y * ((((fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1086 = (((((fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(0.0), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3471 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(0.0), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3504 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(0.0), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3537 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _392;
        _1292 = _392;
        _1293 = _392;
        _1294 = _392;
        _1295 = _392;
        _1296 = _392;
        _1297 = _392;
        _1298 = _392;
        _1299 = _392;
        _1300 = _392;
        _1301 = _392;
        _1302 = _392;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _1029)) + _1029;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _1030)) + _1030;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _1031)) + _1031;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _662 * (-0.5);
    float _1360 = _663 * (-0.5);
    float _1361 = _664 * (-0.5);
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1426 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1489 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1492 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1518;
        if (_1486 > 0.0)
        {
            _1518 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1518 = frontier_phi_26_24_ladder;
        }
        float _1688;
        if (_1489 > 0.0)
        {
            _1688 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1688 = frontier_phi_35_31_ladder;
        }
        float _2082;
        if (_1492 > 0.0)
        {
            _2082 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2082 = frontier_phi_47_42_ladder;
        }
        float _2084 = isnan(_1688) ? _1518 : (isnan(_1518) ? _1688 : min(_1518, _1688));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1486) + _1475;
        float _2090 = (_2085 * _1489) + _1479;
        float _2091 = (_2085 * _1492) + _1483;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_25_47_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_25_47_ladder_2;
        _1510 = frontier_phi_25_47_ladder_1;
        _1512 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1515 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1581 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1584 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1693;
        if (_1578 > 0.0)
        {
            _1693 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1693 = frontier_phi_37_33_ladder;
        }
        float _2109;
        if (_1581 > 0.0)
        {
            _2109 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2109 = frontier_phi_49_44_ladder;
        }
        float _2482;
        if (_1584 > 0.0)
        {
            _2482 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2482 = frontier_phi_61_56_ladder;
        }
        float _2484 = isnan(_2109) ? _1693 : (isnan(_1693) ? _2109 : min(_1693, _2109));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1578) + _1567;
        float _2490 = (_2485 * _1581) + _1571;
        float _2491 = (_2485 * _1584) + _1575;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2491, cbModelParam._m0[17u].z, fma(_2490, cbModelParam._m0[17u].y, _2489 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2491, cbModelParam._m0[18u].z, fma(_2490, cbModelParam._m0[18u].y, _2489 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2491, cbModelParam._m0[19u].z, fma(_2490, cbModelParam._m0[19u].y, _2489 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_34_61_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_34_61_ladder_2;
        _1605 = frontier_phi_34_61_ladder_1;
        _1607 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1515);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1619 = _710 * 0.01200000010430812835693359375;
    float _1621 = _1619 * ((cbModelParam._m0[1u].w * (_1603 - _1508)) + _1508);
    float _1622 = _1619 * ((cbModelParam._m0[1u].w * (_1605 - _1510)) + _1510);
    float _1623 = _1619 * ((cbModelParam._m0[1u].w * (_1607 - _1512)) + _1512);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    float _1667 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1680 = _1667 / _1679;
    float _1681 = _1671 / _1679;
    float _1682 = _1675 / _1679;
    float _1830;
    float _1831;
    float _1832;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1709 = ((uint(_1682 > cbSceneParam._m0[59u].y) + uint(_1682 > cbSceneParam._m0[59u].x)) + uint(_1682 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1710 = _1709 + 43u;
        uint _1718 = _1709 + 44u;
        uint _1726 = _1709 + 45u;
        uint _1734 = _1709 + 46u;
        float _1745 = fma(_1679, cbSceneParam._m0[_1710].w, fma(_1675, cbSceneParam._m0[_1710].z, fma(_1671, cbSceneParam._m0[_1710].y, _1667 * cbSceneParam._m0[_1710].x)));
        float _1749 = fma(_1679, cbSceneParam._m0[_1718].w, fma(_1675, cbSceneParam._m0[_1718].z, fma(_1671, cbSceneParam._m0[_1718].y, _1667 * cbSceneParam._m0[_1718].x)));
        float _1757 = fma(_1679, cbSceneParam._m0[_1734].w, fma(_1675, cbSceneParam._m0[_1734].z, fma(_1671, cbSceneParam._m0[_1734].y, _1667 * cbSceneParam._m0[_1734].x)));
        float _1762 = cbSceneParam._m0[33u].z * _1757;
        float _1764 = cbSceneParam._m0[33u].w * _1757;
        float _1767 = fma(_1679, cbSceneParam._m0[_1726].w, fma(_1675, cbSceneParam._m0[_1726].z, fma(_1671, cbSceneParam._m0[_1726].y, _1667 * cbSceneParam._m0[_1726].x))) / _1757;
        float _1815 = (cbSceneParam._m0[33u].x - sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682))) * cbSceneParam._m0[33u].y;
        float _3663 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1823 = (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 + _1745) / _1757, (_1764 + _1749) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1764 + _1745) / _1757, (_1749 - _1762) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 - _1762) / _1757, (_1749 - _1764) / _1757), _1767), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 - _1764) / _1757, (_1762 + _1749) / _1757), _1767), 0.0)).x), vec4(0.25)));
        _1830 = 1.0 - (_1823 * cbSceneParam._m0[34u].x);
        _1831 = 1.0 - (_1823 * cbSceneParam._m0[34u].y);
        _1832 = 1.0 - (_1823 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1830 = 1.0;
        _1831 = 1.0;
        _1832 = 1.0;
    }
    float _1896;
    float _1898;
    float _1900;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1884 = fma(_1679, cbSceneParam._m0[63u].w, fma(_1675, cbSceneParam._m0[63u].z, fma(_1671, cbSceneParam._m0[63u].y, _1667 * cbSceneParam._m0[63u].x)));
        float _1885 = fma(_1679, cbSceneParam._m0[60u].w, fma(_1675, cbSceneParam._m0[60u].z, fma(_1671, cbSceneParam._m0[60u].y, _1667 * cbSceneParam._m0[60u].x))) / _1884;
        float _1886 = fma(_1679, cbSceneParam._m0[61u].w, fma(_1675, cbSceneParam._m0[61u].z, fma(_1671, cbSceneParam._m0[61u].y, _1667 * cbSceneParam._m0[61u].x))) / _1884;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1885 >= cbSceneParam._m0[64u].x) && (_1886 >= cbSceneParam._m0[64u].y)) && (_1885 <= cbSceneParam._m0[64u].z)) && (_1886 <= cbSceneParam._m0[64u].w))
        {
            float _2122 = fma(_1679, cbSceneParam._m0[62u].w, fma(_1675, cbSceneParam._m0[62u].z, fma(_1671, cbSceneParam._m0[62u].y, _1667 * cbSceneParam._m0[62u].x))) / _1884;
            float _2126 = isnan(cbSceneParam._m0[41u].w) ? _2122 : (isnan(_2122) ? cbSceneParam._m0[41u].w : max(_2122, cbSceneParam._m0[41u].w));
            float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682))) * cbSceneParam._m0[33u].y;
            float _3679 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
            float _2176 = (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1885, cbSceneParam._m0[33u].w + _1886), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1885, _1886 - cbSceneParam._m0[33u].z), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].z, _1886 - cbSceneParam._m0[33u].w), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1886), _2126), 0.0)).x), vec4(0.25)));
            float _2180 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
            float _2181 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
            float _2182 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2182) ? _1832 : (isnan(_1832) ? _2182 : min(_1832, _2182));
            frontier_phi_46_45_ladder_1 = isnan(_2181) ? _1831 : (isnan(_1831) ? _2181 : min(_1831, _2181));
            frontier_phi_46_45_ladder_2 = isnan(_2180) ? _1830 : (isnan(_1830) ? _2180 : min(_1830, _2180));
        }
        else
        {
            frontier_phi_46_45_ladder = _1832;
            frontier_phi_46_45_ladder_1 = _1831;
            frontier_phi_46_45_ladder_2 = _1830;
        }
        _1896 = frontier_phi_46_45_ladder_2;
        _1898 = frontier_phi_46_45_ladder_1;
        _1900 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1896 = _1830;
        _1898 = _1831;
        _1900 = _1832;
    }
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_684 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1913 = _710 + (-1.0);
    float _1916 = (cbLight._m0[_1908].x * _1913) + 1.0;
    float _1917 = (cbLight._m0[_1908].y * _1913) + 1.0;
    uint _1918 = _1907 + 5u;
    float _1924 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1928 = _1907 + 4u;
    float _1937 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1941 = _1907 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1907].xyz), vec3(0.0));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(0.0));
    float _3715 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _3726 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1918].x * _1924) * _1962) + (((cbLight._m0[_1928].x * _1896) * _1937) * _1960);
    float _1970 = ((_1924 * cbLight._m0[_1918].y) * _1962) + (((cbLight._m0[_1928].y * _1898) * _1937) * _1960);
    float _1971 = ((_1924 * cbLight._m0[_1918].z) * _1962) + (((cbLight._m0[_1928].z * _1900) * _1937) * _1960);
    uint _1972 = _1907 + 8u;
    float _1978 = cbLight._m0[_1907].x + _662;
    float _1979 = cbLight._m0[_1907].y + _663;
    float _1980 = cbLight._m0[_1907].z + _664;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1988 = dot(vec3(0.0), vec3(cbLight._m0[_1907].xyz));
    float _3737 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1992 = dot(vec3(0.0), vec3(_662, _663, _664));
    float _3748 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_1978 * _1984, _1979 * _1984, _1980 * _1984));
    float _3759 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = (0.5 / ((_1991 + 9.9999999392252902907785028219223e-09) + _1995)) * _1991;
    float _3770 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.31831014156341552734375;
    uint _2029 = _1907 + 9u;
    float _2035 = cbLight._m0[_1941].x + _662;
    float _2036 = cbLight._m0[_1941].y + _663;
    float _2037 = cbLight._m0[_1941].z + _664;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2045 = dot(vec3(0.0), vec3(cbLight._m0[_1941].xyz));
    float _3781 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2035 * _2041, _2036 * _2041, _2037 * _2041));
    float _3792 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = (0.5 / ((_2048 + 9.9999999392252902907785028219223e-09) + _1995)) * _2048;
    float _3803 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.31831014156341552734375;
    float _2074 = (((_2058 * cbLight._m0[_2029].x) * _2064) * _1924) + ((((cbLight._m0[_1972].x * _1896) * _2007) * _2015) * _1937);
    float _2075 = (((_2058 * cbLight._m0[_2029].y) * _2064) * _1924) + ((((cbLight._m0[_1972].y * _1898) * _2007) * _2015) * _1937);
    float _2076 = (((_2058 * cbLight._m0[_2029].z) * _2064) * _1924) + ((((cbLight._m0[_1972].z * _1900) * _2007) * _2015) * _1937);
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1905.y == 0u)
    {
        uvec4 _2194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2195 = _2194.x;
        uint _2206 = uint((float(_2194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2195))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2195)));
        float _2216 = (log2(_1682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2217 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        uint _2220 = uint(isnan(14.0) ? _2217 : (isnan(_2217) ? 14.0 : min(_2217, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2220 << 2u) + (_2206 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2194.z;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
        }
        else
        {
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            uint _2543 = 0u;
            uint _2552;
            bool _2553;
            for (;;)
            {
                _2552 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                _2553 = _2552 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2553)
                {
                    frontier_phi_70_pred = _2540;
                    frontier_phi_70_pred_1 = _2542;
                    frontier_phi_70_pred_2 = _2541;
                    frontier_phi_70_pred_3 = _2539;
                    frontier_phi_70_pred_4 = _2538;
                    frontier_phi_70_pred_5 = _2537;
                }
                else
                {
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    uint _2688;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2552;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2692 = uint(findLSB(_2688)) + (_2543 << 5u);
                        uint _2689 = (_2688 + 4294967295u) & _2688;
                        uint _2694 = _2692 * 48u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2714 = (_2692 * 48u) + 4u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2733 = (_2692 * 48u) + 8u;
                        vec3 _2744 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x));
                        float _2748 = _2708.x - _1680;
                        float _2749 = _2708.y - _1681;
                        float _2750 = _2708.z - _1682;
                        float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                        float _2754 = inversesqrt(_2751);
                        float _2763 = 1.0 - (_2751 * _2708.w);
                        float _3824 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2765 = sqrt(_2751) * _2727.w;
                        float _2768 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * dot(vec3(0.0), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750))) + _2769;
                        float _2775 = _2765 * _2765;
                        float _2779 = ((isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))) * _2764) / ((_2775 * 0.699999988079071044921875) + 1.0);
                        float _2783 = (-0.0) - _1680;
                        float _2784 = (-0.0) - _1681;
                        float _2785 = (-0.0) - _1682;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2793 = dot(vec3(0.0), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785));
                        float _3840 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _3851 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2797 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                        float _2801 = (0.5 / (((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) + 9.9999999392252902907785028219223e-09) + _2797)) * _2797;
                        float _3862 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2810 = (((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 3.1415927410125732421875) / ((_2775 * 2.1991131305694580078125) + 3.141590118408203125)) * _2764;
                        _2617 = (_2779 * _2727.x) + _2685;
                        _2618 = (_2779 * _2727.y) + _2686;
                        _2619 = (_2779 * _2727.z) + _2687;
                        _2614 = (_2810 * _2744.x) + _2682;
                        _2615 = (_2810 * _2744.y) + _2683;
                        _2616 = (_2810 * _2744.z) + _2684;
                        if (_2689 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2689;
                        }
                    }
                    frontier_phi_70_pred = _2617;
                    frontier_phi_70_pred_1 = _2619;
                    frontier_phi_70_pred_2 = _2618;
                    frontier_phi_70_pred_3 = _2616;
                    frontier_phi_70_pred_4 = _2615;
                    frontier_phi_70_pred_5 = _2614;
                }
                _2368 = frontier_phi_70_pred;
                _2372 = frontier_phi_70_pred_1;
                _2370 = frontier_phi_70_pred_2;
                _2366 = frontier_phi_70_pred_3;
                _2364 = frontier_phi_70_pred_4;
                _2362 = frontier_phi_70_pred_5;
                uint _2544 = _2543 + 1u;
                if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2537 = _2362;
                    _2538 = _2364;
                    _2539 = _2366;
                    _2540 = _2368;
                    _2541 = _2370;
                    _2542 = _2372;
                    _2543 = _2544;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
        }
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.z;
        uint _2378 = (_2376 >> 8u) & 15u;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((4294967295u << _2378) & _2227) == 0u)
        {
            _2508 = _2361;
            _2510 = _2363;
            _2512 = _2365;
            _2514 = _2367;
            _2516 = _2369;
            _2518 = _2371;
        }
        else
        {
            float _2533 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2378 < ((_2376 >> 12u) & 15u))
            {
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2665 = _2361;
                float _2666 = _2363;
                float _2667 = _2365;
                float _2668 = _2367;
                float _2669 = _2369;
                float _2670 = _2371;
                uint _2671 = _2378;
                uint _2680;
                bool _2681;
                for (;;)
                {
                    _2680 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                    _2681 = _2680 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2681)
                    {
                        frontier_phi_76_pred = _2670;
                        frontier_phi_76_pred_1 = _2669;
                        frontier_phi_76_pred_2 = _2668;
                        frontier_phi_76_pred_3 = _2667;
                        frontier_phi_76_pred_4 = _2666;
                        frontier_phi_76_pred_5 = _2665;
                    }
                    else
                    {
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2828 = _2665;
                        float _2829 = _2666;
                        float _2830 = _2667;
                        float _2831 = _2668;
                        float _2832 = _2669;
                        float _2833 = _2670;
                        uint _2834 = _2680;
                        uint _2835;
                        vec4 _2860;
                        float _2861;
                        vec4 _2876;
                        vec3 _2888;
                        vec4 _2904;
                        vec4 _2919;
                        float _2965;
                        bool _2966;
                        for (;;)
                        {
                            uint _2845 = ((_2671 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2834));
                            _2835 = (_2834 + 4294967295u) & _2834;
                            uint _2847 = _2845 * 40u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            _2861 = _2860.w;
                            uint _2863 = (_2845 * 40u) + 4u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2845 * 40u) + 8u;
                            _2888 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x));
                            uint _2891 = (_2845 * 40u) + 16u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2845 * 40u) + 20u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2845 * 40u) + 24u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2940 = (_2845 * 40u) + 28u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2965 = fma(_1682, _2953.z, fma(_1681, _2953.y, _2953.x * _1680)) + _2953.w;
                            _2966 = !((fma(_1682, _2934.z, fma(_1681, _2934.y, _2934.x * _1680)) + _2934.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2966)
                            {
                                float _2993 = _2860.x - _1680;
                                float _2994 = _2860.y - _1681;
                                float _2995 = _2860.z - _1682;
                                float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                                float _2999 = inversesqrt(_2996);
                                float _3000 = _2999 * _2993;
                                float _3001 = _2999 * _2994;
                                float _3002 = _2999 * _2995;
                                float _3006 = 1.0 - (_2996 / (_2861 * _2861));
                                float _3873 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _3011 = sqrt(_2996) * _2876.w;
                                float _3013 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                                float _3014 = _3013 * _3013;
                                float _3015 = 1.0 - _3014;
                                float _3017 = (_3015 * dot(vec3(_3000, _3001, _3002), vec3(0.0))) + _3014;
                                float _3020 = _3011 * _3011;
                                float _3024 = (fma(_1682, _2904.z, fma(_1681, _2904.y, _2904.x * _1680)) + _2904.w) / _2965;
                                float _3025 = (fma(_1682, _2919.z, fma(_1681, _2919.y, _2919.x * _1680)) + _2919.w) / _2965;
                                float _3029 = 1.0 - dot(vec2(_3024, _3025), vec2(_3024, _3025));
                                float _3889 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _3031 = _3030 * (((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3007) / ((_3020 * 0.699999988079071044921875) + 1.0));
                                float _3041 = dot(vec3(0.0), vec3((-0.0) - (_1680 * _2533), (-0.0) - (_1681 * _2533), (-0.0) - (_1682 * _2533)));
                                float _3900 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3049 = (_3015 * dot(vec3(0.0), vec3(_3000, _3001, _3002))) + _3014;
                                float _3911 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _3054 = (0.5 / (((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) + 9.9999999392252902907785028219223e-09) + _3050)) * _3050;
                                float _3922 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3061 = (_3030 * _3007) * (((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 3.1415927410125732421875) / ((_3020 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _3031 * _2876.z;
                                frontier_phi_82_pred_1 = _3031 * _2876.y;
                                frontier_phi_82_pred_2 = _3031 * _2876.x;
                                frontier_phi_82_pred_3 = _3061 * _2888.z;
                                frontier_phi_82_pred_4 = _3061 * _2888.y;
                                frontier_phi_82_pred_5 = _3061 * _2888.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3070 = frontier_phi_82_pred;
                            _3069 = frontier_phi_82_pred_1;
                            _3068 = frontier_phi_82_pred_2;
                            _3067 = frontier_phi_82_pred_3;
                            _3066 = frontier_phi_82_pred_4;
                            _3065 = frontier_phi_82_pred_5;
                            _2818 = _3068 + _2831;
                            _2819 = _3069 + _2832;
                            _2820 = _3070 + _2833;
                            _2815 = _3065 + _2828;
                            _2816 = _3066 + _2829;
                            _2817 = _3067 + _2830;
                            if (_2835 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2835;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2820;
                        frontier_phi_76_pred_1 = _2819;
                        frontier_phi_76_pred_2 = _2818;
                        frontier_phi_76_pred_3 = _2817;
                        frontier_phi_76_pred_4 = _2816;
                        frontier_phi_76_pred_5 = _2815;
                    }
                    _2519 = frontier_phi_76_pred;
                    _2517 = frontier_phi_76_pred_1;
                    _2515 = frontier_phi_76_pred_2;
                    _2513 = frontier_phi_76_pred_3;
                    _2511 = frontier_phi_76_pred_4;
                    _2509 = frontier_phi_76_pred_5;
                    uint _2672 = _2671 + 1u;
                    if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2665 = _2509;
                        _2666 = _2511;
                        _2667 = _2513;
                        _2668 = _2515;
                        _2669 = _2517;
                        _2670 = _2519;
                        _2671 = _2672;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2517;
                frontier_phi_63_64_ladder_1 = _2519;
                frontier_phi_63_64_ladder_2 = _2515;
                frontier_phi_63_64_ladder_3 = _2513;
                frontier_phi_63_64_ladder_4 = _2511;
                frontier_phi_63_64_ladder_5 = _2509;
            }
            else
            {
                frontier_phi_63_64_ladder = _2369;
                frontier_phi_63_64_ladder_1 = _2371;
                frontier_phi_63_64_ladder_2 = _2367;
                frontier_phi_63_64_ladder_3 = _2365;
                frontier_phi_63_64_ladder_4 = _2363;
                frontier_phi_63_64_ladder_5 = _2361;
            }
            _2508 = frontier_phi_63_64_ladder_5;
            _2510 = frontier_phi_63_64_ladder_4;
            _2512 = frontier_phi_63_64_ladder_3;
            _2514 = frontier_phi_63_64_ladder_2;
            _2516 = frontier_phi_63_64_ladder;
            _2518 = frontier_phi_63_64_ladder_1;
        }
        float _2523 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2240 = (_2523 * _2514) + _1969;
        _2242 = (_2523 * _2516) + _1970;
        _2244 = (_2523 * _2518) + _1971;
        _2246 = ((_2508 * 0.039999999105930328369140625) * _2523) + _2074;
        _2248 = ((_2510 * 0.039999999105930328369140625) * _2523) + _2075;
        _2250 = ((_2512 * 0.039999999105930328369140625) * _2523) + _2076;
    }
    else
    {
        _2240 = _1969;
        _2242 = _1970;
        _2244 = _1971;
        _2246 = _2074;
        _2248 = _2075;
        _2250 = _2076;
    }
    uint _2256 = _686 + uint(cbMatDynParam._m0[0u].w);
    float _2262 = ((_628 * (_616 - (_616 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2256].x;
    float _2263 = ((_628 * (_617 - (_617 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2256].y;
    float _2264 = ((_628 * (_618 - (_618 * _589))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2256].z;
    float _3938 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3949 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3960 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _2281 = (((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2240 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _710))) + ((_2246 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + _2262;
    float _2283 = (_2263 + ((_2248 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2242 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _710)));
    float _2285 = (_2264 + ((_2250 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1417)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2244 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _710)));
    float _3986 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2298 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    uint _2299 = _684 + 6u;
    float _2307 = _670 / cbSceneParam._m0[86u].x;
    float _2308 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2386 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2387 = _2386 / _657;
        float _2398 = _2387 * _271;
        float _2399 = _272 * _2387;
        float _2400 = (-0.0) - _2399;
        float _2401 = _2387 * _273;
        float _2403 = (cbSceneParam._m0[77u].w * _2400) / _2386;
        float _2404 = _2403 + cbSceneParam._m0[79u].w;
        float _2405 = cbSceneParam._m0[79u].w - _2399;
        float _2411 = sqrt(((_2398 * _2398) + (_2399 * _2399)) + (_2401 * _2401));
        float _2414 = (1.0 - (cbSceneParam._m0[77u].w / _2386)) * _2411;
        float _2419 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2421 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2400 - _2403) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2404 > 0.0) ? exp2(_2419 * _2404) : (2.0 - exp2(_2421 * _2404))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2414;
        }
        else
        {
            float _2566 = 1.0 / cbSceneParam._m0[80u].x;
            float _2567 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : max(_2404, _2405));
            float _2568 = isnan(_2405) ? _2404 : (isnan(_2404) ? _2405 : min(_2404, _2405));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            _2627 = ((abs(_2411 / _2400) * cbSceneParam._m0[80u].y) * ((((_2577 - _2578) * 2.0) - ((exp2(_2419 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)))) - exp2(_2419 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))))) * _2566)) - ((exp2(_2421 * _2577) - exp2(_2421 * _2578)) * _2566))) + (_2414 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2327);
        _2423 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2425 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2427 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2429 = _2638 * _2327;
    }
    else
    {
        _2423 = _2324;
        _2425 = _2325;
        _2427 = _2326;
        _2429 = _2327;
    }
    float _2440 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2441 = _2440 == 3.0;
    float _2443 = log2(_2429);
    float _2447 = exp2(_2443 * cbSceneParam._m0[78u].x);
    float _2448 = exp2(_2443 * cbSceneParam._m0[78u].y);
    float _2449 = exp2(_2443 * cbSceneParam._m0[78u].z);
    float _2450 = _2447 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2451 = _2448 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)));
    float _2452 = _2449 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)));
    float _2461 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2461 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.y = _2461 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2425)));
    SV_Target.z = _2461 * (_2441 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.w = cbInstanceData._m0[_2299].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2262) * _2298) * _2447) * _2461;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2263) * _2298) * _2448) * _2461;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2264) * _2298) * _2449) * _2461;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
}


