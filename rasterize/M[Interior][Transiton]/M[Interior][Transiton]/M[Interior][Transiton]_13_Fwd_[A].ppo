#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1286;
float _3296;
float _3297;
float _3298;
float _3299;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _303 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _341 = cbMtdParam._m0[27u].w + _282;
    float _342 = cbMtdParam._m0[28u].x + _283;
    float _343 = cbMtdParam._m0[28u].y + _284;
    float _357 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_211 * _203, _211 * _204, _211 * _205));
    float _358 = (-0.0) - dot(vec3(_341, _342, _343), vec3(_225 * TANGENT.x, _225 * TANGENT.y, _225 * TANGENT.z));
    float _359 = (-0.0) - dot(vec3(_341, _342, _343), vec3((-0.0) - (_218 * NORMAL.x), (-0.0) - (_218 * NORMAL.y), (-0.0) - (_218 * NORMAL.z)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _366 = _363 * _359;
    float _367 = (_363 * _357) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = (_363 * _358) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = _367 * cbMtdParam._m0[24u].x;
    float _370 = _368 * cbMtdParam._m0[23u].w;
    float _371 = fract(TEXCOORD.x);
    float _372 = fract(TEXCOORD.y);
    float _378;
    if (_369 > 0.0)
    {
        _378 = (1.0 - _371) / _369;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_369 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _371) / _369;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _378 = frontier_phi_3_2_ladder;
    }
    float _386;
    if (_370 > 0.0)
    {
        _386 = (1.0 - _372) / _370;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_370 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _372) / _370;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _386 = frontier_phi_7_6_ladder;
    }
    bool _388 = _366 > 0.0;
    float _390 = _388 ? (cbMtdParam._m0[17u].x / _366) : 5000.0;
    float _391 = isnan(_386) ? _378 : (isnan(_378) ? _386 : min(_378, _386));
    float _392 = isnan(_390) ? _391 : (isnan(_391) ? _390 : min(_391, _390));
    float _396 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _397 = _371 + (-0.5);
    float _400 = _372 + (-0.5);
    float _403 = ((_392 * _366) + _396) / _396;
    vec4 _428 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_397 + (_392 * _369)) / _403) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_400 + (_392 * _370)) / _403) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _438 = cbMtdParam._m0[9u].x * _428.x;
    float _439 = cbMtdParam._m0[9u].y * _428.y;
    float _440 = cbMtdParam._m0[9u].z * _428.z;
    float _458 = _367 * cbMtdParam._m0[26u].z;
    float _459 = _368 * cbMtdParam._m0[26u].y;
    bool _460 = _458 > 0.0;
    float _465;
    if (_460)
    {
        _465 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _465 = frontier_phi_11_10_ladder;
    }
    bool _467 = _459 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _472 = frontier_phi_15_14_ladder;
    }
    float _475 = _388 ? (cbMtdParam._m0[19u].z / _366) : 5000.0;
    float _476 = isnan(_472) ? _465 : (isnan(_465) ? _472 : min(_465, _472));
    float _477 = isnan(_475) ? _476 : (isnan(_476) ? _475 : min(_476, _475));
    float _481 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _485 = ((_477 * _366) + _481) / _481;
    float _490 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _492 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _508 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_397 + (_477 * _458)) / _485) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_400 + (_477 * _459)) / _485) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520;
    if (_460)
    {
        _520 = (1.0 - _371) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _371) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_467)
    {
        _526 = (1.0 - _372) / _459;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_459 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _372) / _459;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_475) ? _528 : (isnan(_528) ? _475 : min(_528, _475));
    float _536 = ((_529 * _366) + _481) / _481;
    vec4 _556 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_397 + (_529 * _458)) / _536) + 0.5) + _490) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_400 + (_529 * _459)) / _536) + 0.5) + _492) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _558 = _556.x;
    float _565 = (_558 * ((_508.x * cbMtdParam._m0[10u].x) - _438)) + _438;
    float _566 = (_558 * ((_508.y * cbMtdParam._m0[10u].y) - _439)) + _439;
    float _567 = (_558 * ((_508.z * cbMtdParam._m0[10u].z) - _440)) + _440;
    float _581 = _367 * cbMtdParam._m0[27u].x;
    float _582 = _368 * cbMtdParam._m0[26u].w;
    bool _583 = _581 > 0.0;
    float _588;
    if (_583)
    {
        _588 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _588 = frontier_phi_27_26_ladder;
    }
    bool _590 = _582 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _595 = frontier_phi_31_30_ladder;
    }
    float _598 = _388 ? (cbMtdParam._m0[23u].x / _366) : 5000.0;
    float _599 = isnan(_595) ? _588 : (isnan(_588) ? _595 : min(_588, _595));
    float _600 = isnan(_598) ? _599 : (isnan(_599) ? _598 : min(_599, _598));
    float _604 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _608 = ((_600 * _366) + _604) / _604;
    float _613 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _615 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _631 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_397 + (_600 * _581)) / _608) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_400 + (_600 * _582)) / _608) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _643;
    if (_583)
    {
        _643 = (1.0 - _371) / _581;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_581 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _371) / _581;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _643 = frontier_phi_35_34_ladder;
    }
    float _649;
    if (_590)
    {
        _649 = (1.0 - _372) / _582;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_582 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _372) / _582;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _649 = frontier_phi_39_38_ladder;
    }
    float _651 = isnan(_649) ? _643 : (isnan(_643) ? _649 : min(_643, _649));
    float _652 = isnan(_598) ? _651 : (isnan(_651) ? _598 : min(_651, _598));
    float _659 = ((_652 * _366) + _604) / _604;
    vec4 _680 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_397 + (_652 * _581)) / _659) + 0.5) + _613) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_400 + (_652 * _582)) / _659) + 0.5) + _615) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _682 = _680.x;
    float _689 = (_682 * ((_631.x * cbMtdParam._m0[13u].x) - _565)) + _565;
    float _690 = (_682 * ((_631.y * cbMtdParam._m0[13u].y) - _566)) + _566;
    float _691 = (_682 * ((_631.z * cbMtdParam._m0[13u].z) - _567)) + _567;
    vec4 _715 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _720 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _726 = ((_715.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _728 = (-0.0) - (cbMtdParam._m0[21u].x * ((_715.x * 0.5) + (-0.25)));
    float _729 = fract(_720);
    float _731 = fract(_720 + 0.5);
    vec4 _758 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_729 * _728) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_726 * _729) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _760 = _758.x;
    float _766 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_731 * _728) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_726 * _731) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _760) * abs((_729 * 2.0) + (-1.0))) + _760;
    float _772 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _776 = fract(abs(_772));
    float _785 = sin(cbMtdParam._m0[21u].z);
    float _786 = cos(cbMtdParam._m0[21u].z);
    float _787 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _788 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _818 = abs(cbMtdParam._m0[20u].w * (((_766 - (((_772 >= ((-0.0) - _772)) ? _776 : ((-0.0) - _776)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_788, (-0.0) - _785, _786 * _787) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_788, _786, _787 * _785) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _822 = (((_818 * cbMtdParam._m0[18u].y) - _766) * _818) + _766;
    float _3358 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _823 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    vec4 _835 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _850 = (cbMtdParam._m0[14u].x * _835.x) * cbMtdParam._m0[19u].x;
    float _851 = (cbMtdParam._m0[14u].y * _835.y) * cbMtdParam._m0[19u].x;
    float _852 = (cbMtdParam._m0[14u].z * _835.z) * cbMtdParam._m0[19u].x;
    float _862 = exp2(log2(_823) * cbMtdParam._m0[20u].x);
    float _3369 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3380 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3391 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _896 = _282 * _895;
    float _897 = _283 * _895;
    float _898 = _284 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1001 = sqrt(((_282 * _282) + (_283 * _283)) + (_284 * _284));
        float _1007 = (cbMatDynParam._m0[5u].x * _1001) + cbMatDynParam._m0[5u].y;
        float _3402 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1012 = (cbMatDynParam._m0[5u].z * _1001) + cbMatDynParam._m0[5u].w;
        float _3413 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) - _1008)) + _1008) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _932 = uint(roundEven(NORMAL.w)) * 13u;
    uint _933 = _932 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3424 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _957 = _954.x * TEXCOORD_4;
    float _958 = (-0.0) - _896;
    float _959 = (-0.0) - _897;
    float _960 = (-0.0) - _898;
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = (cbModelParam._m0[37u].x * ((((fma(_990, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1075 = (cbModelParam._m0[37u].y * ((((fma(_990, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1076 = (((((fma(_990, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(0.0), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3494 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(0.0), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3527 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(0.0), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3560 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = (cbModelParam._m0[38u].x * ((((fma(_990, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1357 = (cbModelParam._m0[38u].y * ((((fma(_990, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1358 = (((((fma(_990, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1393 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1360.x + (-0.5));
        float _1395 = _1393 * (_1360.y + (-0.5));
        float _1396 = _1393 * (_1360.z + (-0.5));
        float _1403 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1367.x + (-0.5));
        float _1405 = _1403 * (_1367.y + (-0.5));
        float _1406 = _1403 * (_1367.z + (-0.5));
        float _1413 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1374.x + (-0.5));
        float _1415 = _1413 * (_1374.y + (-0.5));
        float _1416 = _1413 * (_1374.z + (-0.5));
        float _1423 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1381.x + (-0.5));
        float _1425 = _1423 * (_1381.y + (-0.5));
        float _1426 = _1423 * (_1381.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(0.0), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3623 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1457 + 1.0))) + _1462) * _1427;
        float _1472 = _1395 * 0.5;
        float _1473 = _1405 * 0.5;
        float _1474 = _1415 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(0.0), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3656 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1499 + 1.0))) + _1504) * _1428;
        float _1514 = _1396 * 0.5;
        float _1515 = _1406 * 0.5;
        float _1516 = _1416 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(0.0), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _3689 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1541 + 1.0))) + _1546) * _1429;
        _1563 = _1396;
        _1564 = _1395;
        _1565 = _1394;
        _1566 = _1406;
        _1567 = _1405;
        _1568 = _1404;
        _1569 = _1416;
        _1570 = _1415;
        _1571 = _1414;
        _1572 = _1429;
        _1573 = _1428;
        _1574 = _1427;
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1286;
        _1564 = _1286;
        _1565 = _1286;
        _1566 = _1286;
        _1567 = _1286;
        _1568 = _1286;
        _1569 = _1286;
        _1570 = _1286;
        _1571 = _1286;
        _1572 = _1286;
        _1573 = _1286;
        _1574 = _1286;
        _1575 = 0.0;
        _1576 = 0.0;
        _1577 = 0.0;
    }
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1298)) + _1298;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1299)) + _1299;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1300)) + _1300;
    float _1610 = fma(_1589, cbSceneParam._m0[89u].z, fma(_1588, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1613 = fma(_1589, cbSceneParam._m0[90u].z, fma(_1588, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1616 = fma(_1589, cbSceneParam._m0[91u].z, fma(_1588, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1587));
    float _1631 = _896 * (-0.5);
    float _1632 = _897 * (-0.5);
    float _1633 = _898 * (-0.5);
    float _1634 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1637 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1640 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1674;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1647 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1651 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1655 = dot(vec4(_1631, _1632, _1633, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1662 = dot(vec4(cbModelParam._m0[39u]), vec4(_1631, _1632, _1633, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1685;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1676 = dot(vec4(cbModelParam._m0[40u]), vec4(_1631, _1632, _1633, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1689 = (_1685 * cbModelParam._m0[1u].x) + (_1674 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_990, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_990, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_990, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1760 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1763 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1789;
        if (_1757 > 0.0)
        {
            _1789 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1789 = frontier_phi_57_55_ladder;
        }
        float _2084;
        if (_1760 > 0.0)
        {
            _2084 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2084 = frontier_phi_66_62_ladder;
        }
        float _2428;
        if (_1763 > 0.0)
        {
            _2428 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2428 = frontier_phi_80_73_ladder;
        }
        float _2430 = isnan(_2084) ? _1789 : (isnan(_1789) ? _2084 : min(_1789, _2084));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1757) + _1746;
        float _2436 = (_2431 * _1760) + _1750;
        float _2437 = (_2431 * _1763) + _1754;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_56_80_ladder = _2576.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2576.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2576.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_56_80_ladder_2;
        _1781 = frontier_phi_56_80_ladder_1;
        _1783 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1698);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1786 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1838 = fma(_990, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982)) + cbModelParam._m0[21u].w;
        float _1842 = fma(_990, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982)) + cbModelParam._m0[22u].w;
        float _1846 = fma(_990, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982)) + cbModelParam._m0[23u].w;
        float _1849 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1852 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1855 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _2089;
        if (_1849 > 0.0)
        {
            _2089 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2089 = frontier_phi_68_64_ladder;
        }
        float _2454;
        if (_1852 > 0.0)
        {
            _2454 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2454 = frontier_phi_82_75_ladder;
        }
        float _2641;
        if (_1855 > 0.0)
        {
            _2641 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2641 = frontier_phi_100_93_ladder;
        }
        float _2643 = isnan(_2454) ? _2089 : (isnan(_2089) ? _2454 : min(_2089, _2454));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1849) + _1838;
        float _2649 = (_2644 * _1852) + _1842;
        float _2650 = (_2644 * _1855) + _1846;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_65_100_ladder = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2842.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2842.z * cbModelParam._m0[1u].z;
        }
        _1874 = frontier_phi_65_100_ladder_1;
        _1876 = frontier_phi_65_100_ladder;
        _1878 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1786);
        _1874 = _1858.x * cbModelParam._m0[1u].z;
        _1876 = _1858.y * cbModelParam._m0[1u].z;
        _1878 = _1858.z * cbModelParam._m0[1u].z;
    }
    float _1890 = _957 * 0.01200000010430812835693359375;
    float _1892 = _1890 * ((cbModelParam._m0[1u].w * (_1874 - _1779)) + _1779);
    float _1893 = _1890 * ((cbModelParam._m0[1u].w * (_1876 - _1781)) + _1781);
    float _1894 = _1890 * ((cbModelParam._m0[1u].w * (_1878 - _1783)) + _1783);
    float _1897 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1900 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1903 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, _1892 * cbSceneParam._m0[91u].x));
    uvec4 _1913 = floatBitsToUint(cbInstanceData._m0[_932 + 5u]);
    uint _1915 = _1913.x * 14u;
    uint _1916 = _1915 + 13u;
    float _1921 = _957 + (-1.0);
    float _1924 = (cbLight._m0[_1916].x * _1921) + 1.0;
    float _1925 = (cbLight._m0[_1916].y * _1921) + 1.0;
    uint _1926 = _1915 + 5u;
    float _1932 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1936 = _1915 + 4u;
    float _1942 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1946 = _1915 | 1u;
    float _1957 = dot(vec3(cbLight._m0[_1915].xyz), vec3(0.0));
    float _1960 = dot(vec3(cbLight._m0[_1946].xyz), vec3(0.0));
    float _3825 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _3836 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1965 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1967 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1974 = ((cbLight._m0[_1926].x * _1932) * _1967) + ((cbLight._m0[_1936].x * _1942) * _1965);
    float _1975 = ((_1932 * cbLight._m0[_1926].y) * _1967) + ((_1942 * cbLight._m0[_1936].y) * _1965);
    float _1976 = ((_1932 * cbLight._m0[_1926].z) * _1967) + ((_1942 * cbLight._m0[_1936].z) * _1965);
    uint _1977 = _1915 + 8u;
    float _1983 = cbLight._m0[_1915].x + _896;
    float _1984 = cbLight._m0[_1915].y + _897;
    float _1985 = cbLight._m0[_1915].z + _898;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1993 = dot(vec3(0.0), vec3(cbLight._m0[_1915].xyz));
    float _3847 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1997 = dot(vec3(0.0), vec3(_896, _897, _898));
    float _3858 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_1983 * _1989, _1984 * _1989, _1985 * _1989));
    float _3869 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2018 = (0.5 / ((_1996 + 9.9999999392252902907785028219223e-09) + _2000)) * _1996;
    float _3880 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * 0.31831014156341552734375;
    uint _2031 = _1915 + 9u;
    float _2037 = cbLight._m0[_1946].x + _896;
    float _2038 = cbLight._m0[_1946].y + _897;
    float _2039 = cbLight._m0[_1946].z + _898;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2047 = dot(vec3(0.0), vec3(cbLight._m0[_1946].xyz));
    float _3891 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2037 * _2043, _2038 * _2043, _2039 * _2043));
    float _3902 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = (0.5 / ((_2050 + 9.9999999392252902907785028219223e-09) + _2000)) * _2050;
    float _3913 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.31831014156341552734375;
    float _2076 = (((_2060 * cbLight._m0[_2031].x) * _2066) * _1932) + (((_2012 * cbLight._m0[_1977].x) * _2020) * _1942);
    float _2077 = (((_2060 * cbLight._m0[_2031].y) * _2066) * _1932) + (((_2012 * cbLight._m0[_1977].y) * _2020) * _1942);
    float _2078 = (((_2060 * cbLight._m0[_2031].z) * _2066) * _1932) + (((_2012 * cbLight._m0[_1977].z) * _2020) * _1942);
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    if (_1913.y == 0u)
    {
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2133;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2133;
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2133;
        uvec4 _2148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2149 = _2148.x;
        uint _2160 = uint((float(_2148.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2149))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2149)));
        float _2170 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2171 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        uint _2174 = uint(isnan(14.0) ? _2171 : (isnan(_2171) ? 14.0 : min(_2171, 14.0)));
        uvec4 _2179 = texelFetch(g_lightClusterGridBuffer, int(((_2174 << 2u) + (_2160 << 6u)) >> 2u));
        uint _2180 = _2179.x;
        uint _2181 = _2148.z;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        if (((((1u << ((_2181 >> 4u) & 15u)) + 4294967295u) & _2180) == 0u) || ((_2181 & 240u) == 0u))
        {
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
        }
        else
        {
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            uint _2494 = 0u;
            uint _2503;
            bool _2504;
            for (;;)
            {
                _2503 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2494 << 2u)) >> 2u)).x;
                _2504 = _2503 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2504)
                {
                    frontier_phi_95_pred = _2489;
                    frontier_phi_95_pred_1 = _2488;
                    frontier_phi_95_pred_2 = _2490;
                    frontier_phi_95_pred_3 = _2493;
                    frontier_phi_95_pred_4 = _2492;
                    frontier_phi_95_pred_5 = _2491;
                }
                else
                {
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    uint _2690;
                    _2684 = _2488;
                    _2685 = _2489;
                    _2686 = _2490;
                    _2687 = _2491;
                    _2688 = _2492;
                    _2689 = _2493;
                    _2690 = _2503;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2694 = uint(findLSB(_2690)) + (_2494 << 5u);
                        uint _2691 = (_2690 + 4294967295u) & _2690;
                        uint _2696 = _2694 * 48u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2716 = (_2694 * 48u) + 4u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2735 = (_2694 * 48u) + 8u;
                        vec3 _2746 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x));
                        float _2750 = _2710.x - _2134;
                        float _2751 = _2710.y - _2135;
                        float _2752 = _2710.z - _2136;
                        float _2753 = dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752));
                        float _2756 = inversesqrt(_2753);
                        float _2765 = 1.0 - (_2753 * _2710.w);
                        float _3934 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                        float _2767 = sqrt(_2753) * _2729.w;
                        float _2770 = 1.39999997615814208984375 / (_2767 + 1.39999997615814208984375);
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * dot(vec3(0.0), vec3(_2756 * _2750, _2756 * _2751, _2756 * _2752))) + _2771;
                        float _2777 = _2767 * _2767;
                        float _2781 = ((isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))) * _2766) / ((_2777 * 0.699999988079071044921875) + 1.0);
                        float _2785 = (-0.0) - _2134;
                        float _2786 = (-0.0) - _2135;
                        float _2787 = (-0.0) - _2136;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(0.0), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _3950 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _3961 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2799 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2803 = (0.5 / (((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) + 9.9999999392252902907785028219223e-09) + _2799)) * _2799;
                        float _3972 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2812 = (((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 3.1415927410125732421875) / ((_2777 * 2.1991131305694580078125) + 3.141590118408203125)) * _2766;
                        _2588 = (_2781 * _2729.x) + _2687;
                        _2589 = (_2781 * _2729.y) + _2688;
                        _2590 = (_2781 * _2729.z) + _2689;
                        _2585 = (_2812 * _2746.x) + _2684;
                        _2586 = (_2812 * _2746.y) + _2685;
                        _2587 = (_2812 * _2746.z) + _2686;
                        if (_2691 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2684 = _2585;
                            _2685 = _2586;
                            _2686 = _2587;
                            _2687 = _2588;
                            _2688 = _2589;
                            _2689 = _2590;
                            _2690 = _2691;
                        }
                    }
                    frontier_phi_95_pred = _2586;
                    frontier_phi_95_pred_1 = _2585;
                    frontier_phi_95_pred_2 = _2587;
                    frontier_phi_95_pred_3 = _2590;
                    frontier_phi_95_pred_4 = _2589;
                    frontier_phi_95_pred_5 = _2588;
                }
                _2300 = frontier_phi_95_pred;
                _2298 = frontier_phi_95_pred_1;
                _2302 = frontier_phi_95_pred_2;
                _2308 = frontier_phi_95_pred_3;
                _2306 = frontier_phi_95_pred_4;
                _2304 = frontier_phi_95_pred_5;
                uint _2495 = _2494 + 1u;
                if (_2495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2488 = _2298;
                    _2489 = _2300;
                    _2490 = _2302;
                    _2491 = _2304;
                    _2492 = _2306;
                    _2493 = _2308;
                    _2494 = _2495;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
        }
        uvec4 _2311 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2312 = _2311.z;
        uint _2314 = (_2312 >> 8u) & 15u;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((4294967295u << _2314) & _2180) == 0u)
        {
            _2459 = _2297;
            _2461 = _2299;
            _2463 = _2301;
            _2465 = _2303;
            _2467 = _2305;
            _2469 = _2307;
        }
        else
        {
            float _2484 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2314 < ((_2312 >> 12u) & 15u))
            {
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2667 = _2297;
                float _2668 = _2299;
                float _2669 = _2301;
                float _2670 = _2303;
                float _2671 = _2305;
                float _2672 = _2307;
                uint _2673 = _2314;
                uint _2682;
                bool _2683;
                for (;;)
                {
                    _2682 = texelFetch(g_lightClassification, int((((_2174 << 5u) + (_2160 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                    _2683 = _2682 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2683)
                    {
                        frontier_phi_109_pred = _2668;
                        frontier_phi_109_pred_1 = _2667;
                        frontier_phi_109_pred_2 = _2672;
                        frontier_phi_109_pred_3 = _2671;
                        frontier_phi_109_pred_4 = _2670;
                        frontier_phi_109_pred_5 = _2669;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _2860 = _2667;
                        float _2861 = _2668;
                        float _2862 = _2669;
                        float _2863 = _2670;
                        float _2864 = _2671;
                        float _2865 = _2672;
                        uint _2866 = _2682;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2951;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2877 = ((_2673 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2877 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2877 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2877 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2136, _2985.z, fma(_2135, _2985.y, _2985.x * _2134)) + _2985.w;
                            _2998 = !((fma(_2136, _2966.z, fma(_2135, _2966.y, _2966.x * _2134)) + _2966.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2892.x - _2134;
                                float _3026 = _2892.y - _2135;
                                float _3027 = _2892.z - _2136;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2893 * _2893));
                                float _3983 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3043 = sqrt(_3028) * _2908.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3047 = 1.0 - _3046;
                                float _3049 = (_3047 * dot(vec3(_3032, _3033, _3034), vec3(0.0))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2136, _2936.z, fma(_2135, _2936.y, _2936.x * _2134)) + _2936.w) / _2997;
                                float _3057 = (fma(_2136, _2951.z, fma(_2135, _2951.y, _2951.x * _2134)) + _2951.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _3999 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3073 = dot(vec3(0.0), vec3((-0.0) - (_2134 * _2484), (-0.0) - (_2135 * _2484), (-0.0) - (_2136 * _2484)));
                                float _4010 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3081 = (_3047 * dot(vec3(0.0), vec3(_3032, _3033, _3034))) + _3046;
                                float _4021 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _3086 = (0.5 / (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) + 9.9999999392252902907785028219223e-09) + _3082)) * _3082;
                                float _4032 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3093 = (_3062 * _3039) * (((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 3.1415927410125732421875) / ((_3052 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _3063 * _2908.y;
                                frontier_phi_115_pred_1 = _3063 * _2908.x;
                                frontier_phi_115_pred_2 = _3093 * _2920.z;
                                frontier_phi_115_pred_3 = _3093 * _2920.y;
                                frontier_phi_115_pred_4 = _3093 * _2920.x;
                                frontier_phi_115_pred_5 = _3063 * _2908.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_115_pred;
                            _3100 = frontier_phi_115_pred_1;
                            _3099 = frontier_phi_115_pred_2;
                            _3098 = frontier_phi_115_pred_3;
                            _3097 = frontier_phi_115_pred_4;
                            _3102 = frontier_phi_115_pred_5;
                            _2850 = _3100 + _2863;
                            _2851 = _3101 + _2864;
                            _2852 = _3102 + _2865;
                            _2847 = _3097 + _2860;
                            _2848 = _3098 + _2861;
                            _2849 = _3099 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2848;
                        frontier_phi_109_pred_1 = _2847;
                        frontier_phi_109_pred_2 = _2852;
                        frontier_phi_109_pred_3 = _2851;
                        frontier_phi_109_pred_4 = _2850;
                        frontier_phi_109_pred_5 = _2849;
                    }
                    _2462 = frontier_phi_109_pred;
                    _2460 = frontier_phi_109_pred_1;
                    _2470 = frontier_phi_109_pred_2;
                    _2468 = frontier_phi_109_pred_3;
                    _2466 = frontier_phi_109_pred_4;
                    _2464 = frontier_phi_109_pred_5;
                    uint _2674 = _2673 + 1u;
                    if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2667 = _2460;
                        _2668 = _2462;
                        _2669 = _2464;
                        _2670 = _2466;
                        _2671 = _2468;
                        _2672 = _2470;
                        _2673 = _2674;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2460;
                frontier_phi_84_85_ladder_1 = _2464;
                frontier_phi_84_85_ladder_2 = _2470;
                frontier_phi_84_85_ladder_3 = _2468;
                frontier_phi_84_85_ladder_4 = _2466;
                frontier_phi_84_85_ladder_5 = _2462;
            }
            else
            {
                frontier_phi_84_85_ladder = _2297;
                frontier_phi_84_85_ladder_1 = _2301;
                frontier_phi_84_85_ladder_2 = _2307;
                frontier_phi_84_85_ladder_3 = _2305;
                frontier_phi_84_85_ladder_4 = _2303;
                frontier_phi_84_85_ladder_5 = _2299;
            }
            _2459 = frontier_phi_84_85_ladder;
            _2461 = frontier_phi_84_85_ladder_5;
            _2463 = frontier_phi_84_85_ladder_1;
            _2465 = frontier_phi_84_85_ladder_4;
            _2467 = frontier_phi_84_85_ladder_3;
            _2469 = frontier_phi_84_85_ladder_2;
        }
        float _2474 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2193 = (_2474 * _2465) + _1974;
        _2195 = (_2474 * _2467) + _1975;
        _2197 = (_2474 * _2469) + _1976;
        _2199 = ((_2459 * 0.039999999105930328369140625) * _2474) + _2076;
        _2201 = ((_2461 * 0.039999999105930328369140625) * _2474) + _2077;
        _2203 = ((_2463 * 0.039999999105930328369140625) * _2474) + _2078;
    }
    else
    {
        _2193 = _1974;
        _2195 = _1975;
        _2197 = _1976;
        _2199 = _2076;
        _2201 = _2077;
        _2203 = _2078;
    }
    uint _2209 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _2215 = ((_862 * (_850 - (_850 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2209].x;
    float _2216 = ((_862 * (_851 - (_851 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2209].y;
    float _2217 = ((_862 * (_852 - (_852 * _823))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2209].z;
    float _4048 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4059 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4070 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2234 = (((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2193 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _957))) + ((_2199 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + _2215;
    float _2236 = (_2216 + ((_2201 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2195 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _957)));
    float _2238 = (_2217 + ((_2203 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1689)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2197 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _957)));
    float _2239 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2240 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2241 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2247 = cbMtdParam._m0[2u].x * _2215;
    float _2248 = cbMtdParam._m0[2u].y * _2216;
    float _2249 = cbMtdParam._m0[2u].z * _2217;
    float _4096 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2251 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    uint _2252 = _932 + 6u;
    float _2260 = _918 / cbSceneParam._m0[86u].x;
    float _2261 = _919 / cbSceneParam._m0[86u].y;
    vec4 _2275 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2277 = _2275.x;
    float _2278 = _2275.y;
    float _2279 = _2275.z;
    float _2280 = _2275.w;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2322 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2323 = _2322 / _891;
        float _2334 = _2323 * _282;
        float _2335 = _283 * _2323;
        float _2336 = (-0.0) - _2335;
        float _2337 = _2323 * _284;
        float _2339 = (cbSceneParam._m0[77u].w * _2336) / _2322;
        float _2340 = _2339 + cbSceneParam._m0[79u].w;
        float _2341 = cbSceneParam._m0[79u].w - _2335;
        float _2347 = sqrt(((_2334 * _2334) + (_2335 * _2335)) + (_2337 * _2337));
        float _2350 = (1.0 - (cbSceneParam._m0[77u].w / _2322)) * _2347;
        float _2356 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2358 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2336 - _2339) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2340 > 0.0) ? exp2(_2356 * _2340) : (2.0 - exp2(_2358 * _2340))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2350;
        }
        else
        {
            float _2517 = 1.0 / cbSceneParam._m0[80u].x;
            float _2518 = isnan(_2341) ? _2340 : (isnan(_2340) ? _2341 : max(_2340, _2341));
            float _2519 = isnan(_2341) ? _2340 : (isnan(_2340) ? _2341 : min(_2340, _2341));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            _2598 = ((abs(_2347 / _2336) * cbSceneParam._m0[80u].y) * ((((_2528 - _2529) * 2.0) - ((exp2(_2356 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)))) - exp2(_2356 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0))))) * _2517)) - ((exp2(_2358 * _2528) - exp2(_2358 * _2529)) * _2517))) + (_2350 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2260, _2261, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2280);
        _2360 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2277;
        _2362 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2278;
        _2364 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2279;
        _2366 = _2609 * _2280;
    }
    else
    {
        _2360 = _2277;
        _2362 = _2278;
        _2364 = _2279;
        _2366 = _2280;
    }
    bool _2636;
    vec4 _2375;
    vec4 _2398;
    float _2400;
    float _2404;
    float _2405;
    float _2406;
    float _2409;
    float _2412;
    float _2415;
    float _2416;
    bool _2427;
    for (;;)
    {
        _2375 = cbMatDynParam._m0[0u];
        float _2377 = roundEven(_2375.y);
        bool _2378 = _2377 == 3.0;
        float _2380 = log2(_2366);
        float _2384 = exp2(_2380 * cbSceneParam._m0[78u].x);
        float _2385 = exp2(_2380 * cbSceneParam._m0[78u].y);
        float _2386 = exp2(_2380 * cbSceneParam._m0[78u].z);
        float _2387 = _2384 * _2239;
        float _2388 = _2385 * _2240;
        float _2389 = _2386 * _2241;
        float _2396 = _905 + (-0.5);
        _2398 = cbMtdParam._m0[1u];
        _2400 = _2398.y * _2396;
        float _2403 = (_2377 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2404 = _2403 * (_2378 ? _2387 : (_2387 + (cbSceneParam._m0[72u].w * _2360)));
        _2405 = _2403 * (_2378 ? _2388 : (_2388 + (cbSceneParam._m0[72u].w * _2362)));
        _2406 = _2403 * (_2378 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2364)));
        _2409 = ((_2247 * _2251) * _2384) * _2403;
        _2412 = ((_2248 * _2251) * _2385) * _2403;
        _2415 = ((_2249 * _2251) * _2386) * _2403;
        _2416 = _2396 * 0.999000012874603271484375;
        _2427 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2427)
        {
            if ((cbInstanceData._m0[_932 + 7u].x + _2416) < 0.5)
            {
                _2636 = true;
                break;
            }
        }
        uint _2552 = _933 + uint(_2375.w);
        if ((cbInstanceData._m0[_2552].w < 1.0) && ((cbInstanceData._m0[_2552].w + _2416) < 0.5))
        {
            _2636 = true;
            break;
        }
        if ((_2400 + 1.0) < _2398.x)
        {
            _2636 = true;
            break;
        }
        _2636 = false;
        break;
    }
    float _2817;
    if (_2636)
    {
        discard_state = true;
        _2817 = 0.0;
    }
    else
    {
        _2817 = cbInstanceData._m0[_2252].w;
    }
    SV_Target.x = _2404;
    SV_Target.y = _2405;
    SV_Target.z = _2406;
    SV_Target.w = _2817;
    SV_Target_1.x = _2409;
    SV_Target_1.y = _2412;
    SV_Target_1.z = _2415;
    SV_Target_1.w = cbInstanceData._m0[_2252].w;
    discard_exit();
}


