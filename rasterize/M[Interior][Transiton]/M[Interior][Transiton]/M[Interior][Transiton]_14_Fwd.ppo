#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _206 = _205 * _197;
    float _207 = _205 * _198;
    float _208 = _205 * _199;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _352 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _391 = cbMtdParam._m0[27u].w + _276;
    float _392 = cbMtdParam._m0[28u].x + _277;
    float _393 = cbMtdParam._m0[28u].y + _278;
    float _407 = (-0.0) - dot(vec3(_391, _392, _393), vec3(_206, _207, _208));
    float _408 = (-0.0) - dot(vec3(_391, _392, _393), vec3(_220, _221, _222));
    float _409 = (-0.0) - dot(vec3(_391, _392, _393), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _416 = _413 * _409;
    float _419 = ((_413 * _407) + ((cbMtdParam._m0[25u].w * _295) * ((_352.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _420 = ((_413 * _408) + ((cbMtdParam._m0[26u].x * _295) * ((_352.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _421 = fract(TEXCOORD.x);
    float _422 = fract(TEXCOORD.y);
    float _428;
    if (_419 > 0.0)
    {
        _428 = (1.0 - _421) / _419;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_419 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _421) / _419;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _428 = frontier_phi_3_2_ladder;
    }
    float _436;
    if (_420 > 0.0)
    {
        _436 = (1.0 - _422) / _420;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_420 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _422) / _420;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _436 = frontier_phi_7_6_ladder;
    }
    float _440 = (_416 > 0.0) ? (cbMtdParam._m0[17u].x / _416) : 5000.0;
    float _441 = isnan(_436) ? _428 : (isnan(_428) ? _436 : min(_428, _436));
    float _442 = isnan(_440) ? _441 : (isnan(_441) ? _440 : min(_441, _440));
    float _446 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _453 = ((_442 * _416) + _446) / _446;
    vec4 _478 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_421 + (-0.5)) + (_442 * _419)) / _453) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_422 + (-0.5)) + (_442 * _420)) / _453) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _494 = _295 * 0.1500000059604644775390625;
    float _502 = (_494 * (((_478.x * _295) * cbMtdParam._m0[9u].x) - _330)) + _330;
    float _503 = (_494 * (((_478.y * _295) * cbMtdParam._m0[9u].y) - _332)) + _332;
    float _504 = (_494 * (((_478.z * _295) * cbMtdParam._m0[9u].z) - _334)) + _334;
    vec4 _517 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _517.z;
    float _524 = (_517.x * 2.0) + (-1.0);
    float _525 = (_517.y * 2.0) + (-1.0);
    float _526 = dot(vec2(_524, _525), vec2(_524, _525));
    float _3298 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    vec4 _555 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _560 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _566 = ((_555.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _568 = (-0.0) - (cbMtdParam._m0[21u].x * ((_555.x * 0.5) + (-0.25)));
    float _569 = fract(_560);
    float _571 = fract(_560 + 0.5);
    vec4 _598 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_569 * _568) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_566 * _569) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _600 = _598.x;
    float _606 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_571 * _568) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_566 * _571) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _600) * abs((_569 * 2.0) + (-1.0))) + _600;
    float _615 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _619 = fract(abs(_615));
    float _628 = sin(cbMtdParam._m0[21u].z);
    float _629 = cos(cbMtdParam._m0[21u].z);
    float _630 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _631 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _661 = abs(cbMtdParam._m0[20u].w * (((_606 - (((_615 >= ((-0.0) - _615)) ? _619 : ((-0.0) - _619)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_631, (-0.0) - _628, _629 * _630) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_631, _629, _630 * _628) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _665 = (((_661 * cbMtdParam._m0[18u].y) - _606) * _661) + _606;
    float _3309 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    vec4 _678 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _693 = (cbMtdParam._m0[14u].x * _678.x) * cbMtdParam._m0[19u].x;
    float _694 = (cbMtdParam._m0[14u].y * _678.y) * cbMtdParam._m0[19u].x;
    float _695 = (cbMtdParam._m0[14u].z * _678.z) * cbMtdParam._m0[19u].x;
    float _705 = exp2(log2(_666) * cbMtdParam._m0[20u].x);
    float _718 = fma(_531, _213, fma(_525, _220, _524 * _206));
    float _721 = fma(_531, _214, fma(_525, _221, _524 * _207));
    float _724 = fma(_531, _215, fma(_525, _222, _524 * _208));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3320 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _732 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3342 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3353 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _751 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _756 = _276 * _755;
    float _757 = _277 * _755;
    float _758 = _278 * _755;
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _786 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _789 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _802 = uint(roundEven(NORMAL.w)) * 13u;
    uint _803 = _802 + 9u;
    uint _804 = _803 + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3364 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _827 = _824.x * TEXCOORD_4;
    float _828 = dot(vec3(_729, _730, _731), vec3(_756, _757, _758));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _729) - _756;
    float _836 = (_831 * _730) - _757;
    float _837 = (_831 * _731) - _758;
    float _841 = abs(dot(vec3(_756, _757, _758), vec3(_729, _730, _731)));
    float _3397 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_732);
    float _856 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _927 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _931 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _954 = _888 + _729;
        float _955 = _892 + _730;
        float _956 = _896 + _731;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_729, _730, _731), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3445 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_729, _730, _731), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3478 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_729, _730, _731), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3511 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1240 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1244 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1267 = _888 + _729;
        float _1268 = _892 + _730;
        float _1269 = _896 + _731;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_729, _730, _731), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3574 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_729, _730, _731), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3607 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_729, _730, _731), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3640 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1197;
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _835 * 0.5;
    float _1574 = _836 * 0.5;
    float _1575 = _837 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1704 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1707 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1735 = frontier_phi_22_20_ladder;
        }
        float _2080;
        if (_1704 > 0.0)
        {
            _2080 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _2080 = frontier_phi_31_27_ladder;
        }
        float _2414;
        if (_1707 > 0.0)
        {
            _2414 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2414 = frontier_phi_45_38_ladder;
        }
        float _2416 = isnan(_2080) ? _1735 : (isnan(_1735) ? _2080 : min(_1735, _2080));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1701) + _1690;
        float _2422 = (_2417 * _1704) + _1694;
        float _2423 = (_2417 * _1707) + _1698;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2424;
        float _2427 = _2424 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2423 > _2427) || ((_2423 < _2425) || ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 < _2425) || (_2421 > _2427))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_21_45_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_21_45_ladder_2;
        _1725 = frontier_phi_21_45_ladder_1;
        _1727 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1642);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1784 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1788 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1792 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1795 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1798 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1801 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _2085;
        if (_1795 > 0.0)
        {
            _2085 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _2085 = frontier_phi_33_29_ladder;
        }
        float _2440;
        if (_1798 > 0.0)
        {
            _2440 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2440 = frontier_phi_47_40_ladder;
        }
        float _2609;
        if (_1801 > 0.0)
        {
            _2609 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2609 = frontier_phi_61_56_ladder;
        }
        float _2611 = isnan(_2440) ? _2085 : (isnan(_2085) ? _2440 : min(_2085, _2440));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1795) + _1784;
        float _2617 = (_2612 * _1798) + _1788;
        float _2618 = (_2612 * _1801) + _1792;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_30_61_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1820 = frontier_phi_30_61_ladder_2;
        _1822 = frontier_phi_30_61_ladder_1;
        _1824 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1732);
        _1820 = _1804.x * cbModelParam._m0[1u].z;
        _1822 = _1804.y * cbModelParam._m0[1u].z;
        _1824 = _1804.z * cbModelParam._m0[1u].z;
    }
    float _1836 = ((((1.0 - _856) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_856 * _843)) * _827;
    float _1837 = _1836 * ((cbModelParam._m0[1u].w * (_1820 - _1723)) + _1723);
    float _1838 = _1836 * ((cbModelParam._m0[1u].w * (_1822 - _1725)) + _1725);
    float _1839 = _1836 * ((cbModelParam._m0[1u].w * (_1824 - _1727)) + _1727);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, _1837 * cbSceneParam._m0[91u].x));
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_802 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1866 = _827 + (-1.0);
    float _1869 = (cbLight._m0[_1861].x * _1866) + 1.0;
    float _1870 = (cbLight._m0[_1861].y * _1866) + 1.0;
    uint _1871 = _1860 + 5u;
    float _1877 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1881 = _1860 + 4u;
    float _1887 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1891 = _1860 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_729, _730, _731));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_729, _730, _731));
    float _3776 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _3787 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1871].x * _1877) * _1912) + ((cbLight._m0[_1881].x * _1887) * _1910);
    float _1920 = ((_1877 * cbLight._m0[_1871].y) * _1912) + ((_1887 * cbLight._m0[_1881].y) * _1910);
    float _1921 = ((_1877 * cbLight._m0[_1871].z) * _1912) + ((_1887 * cbLight._m0[_1881].z) * _1910);
    uint _1923 = _1860 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _732) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1860].x + _756;
    float _1939 = cbLight._m0[_1860].y + _757;
    float _1940 = cbLight._m0[_1860].z + _758;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1860].xyz));
    float _3798 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _1952 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1953 = dot(vec3(_729, _730, _731), vec3(_1945, _1946, _1947));
    float _3820 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_1945, _1946, _1947));
    float _3831 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1952 * ((_1951 * _1977) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1977) + _1937) * _1951))) * _1951;
    float _3842 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2001 = _1860 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _732) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1891].x + _756;
    float _2015 = cbLight._m0[_1891].y + _757;
    float _2016 = cbLight._m0[_1891].z + _758;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_1891].xyz));
    float _3853 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _2028 = dot(vec3(_729, _730, _731), vec3(_2021, _2022, _2023));
    float _3864 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2021, _2022, _2023));
    float _3875 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2013;
    float _2060 = (0.5 / (((_1952 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2050) + _2013) * _2027))) * _2027;
    float _3886 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2072 = (((_2049 * cbLight._m0[_2001].x) * _2062) * _1877) + (((_1976 * cbLight._m0[_1923].x) * _1990) * _1887);
    float _2073 = (((_2049 * cbLight._m0[_2001].y) * _2062) * _1877) + (((_1976 * cbLight._m0[_1923].y) * _1990) * _1887);
    float _2074 = (((_2049 * cbLight._m0[_2001].z) * _2062) * _1877) + (((_1976 * cbLight._m0[_1923].z) * _1990) * _1887);
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    if (_1858.y == 0u)
    {
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2129;
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2129;
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2129;
        uvec4 _2144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2145 = _2144.x;
        uint _2156 = uint((float(_2144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2145))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2145)));
        float _2166 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2167 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        uint _2170 = uint(isnan(14.0) ? _2167 : (isnan(_2167) ? 14.0 : min(_2167, 14.0)));
        uvec4 _2175 = texelFetch(g_lightClusterGridBuffer, int(((_2170 << 2u) + (_2156 << 6u)) >> 2u));
        uint _2176 = _2175.x;
        uint _2177 = _2144.z;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        if (((((1u << ((_2177 >> 4u) & 15u)) + 4294967295u) & _2176) == 0u) || ((_2177 & 240u) == 0u))
        {
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
        }
        else
        {
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            uint _2483 = 0u;
            uint _2492;
            bool _2493;
            for (;;)
            {
                _2492 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                _2493 = _2492 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2493)
                {
                    frontier_phi_58_pred = _2478;
                    frontier_phi_58_pred_1 = _2482;
                    frontier_phi_58_pred_2 = _2481;
                    frontier_phi_58_pred_3 = _2480;
                    frontier_phi_58_pred_4 = _2479;
                    frontier_phi_58_pred_5 = _2477;
                }
                else
                {
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    uint _2658;
                    _2652 = _2477;
                    _2653 = _2478;
                    _2654 = _2479;
                    _2655 = _2480;
                    _2656 = _2481;
                    _2657 = _2482;
                    _2658 = _2492;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    for (;;)
                    {
                        uint _2662 = uint(findLSB(_2658)) + (_2483 << 5u);
                        uint _2659 = (_2658 + 4294967295u) & _2658;
                        uint _2664 = _2662 * 48u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2684 = (_2662 * 48u) + 4u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2703 = (_2662 * 48u) + 8u;
                        vec3 _2714 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x));
                        float _2718 = _2678.x - _2130;
                        float _2719 = _2678.y - _2131;
                        float _2720 = _2678.z - _2132;
                        float _2721 = dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720));
                        float _2724 = inversesqrt(_2721);
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2728 = dot(vec3(_783, _786, _789), vec3(_2725, _2726, _2727));
                        float _2733 = 1.0 - (_2721 * _2678.w);
                        float _3907 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2735 = sqrt(_2721) * _2697.w;
                        float _2738 = 1.39999997615814208984375 / (_2735 + 1.39999997615814208984375);
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2728) + _2739;
                        float _2745 = _2735 * _2735;
                        float _2749 = ((isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))) * _2734) / ((_2745 * 0.699999988079071044921875) + 1.0);
                        float _2753 = (-0.0) - _2130;
                        float _2754 = (-0.0) - _2131;
                        float _2755 = (-0.0) - _2132;
                        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2770 = exp2(log2(1.0 / ((_2745 * 3.5) + 5.0)) * 0.25);
                        float _2771 = 1.0 - _843;
                        float _2778 = sqrt(1.0 - ((1.0 - (_2771 * _2771)) * (1.0 - (_2770 * _2770))));
                        float _2779 = _2778 * _2778;
                        float _2780 = _2779 * _2779;
                        float _2781 = _2760 + _2725;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
                        float _2791 = dot(vec3(_783, _786, _789), vec3(_2760, _2761, _2762));
                        float _3923 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2794 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2795 = dot(vec3(_783, _786, _789), vec3(_2787 * _2781, _2787 * _2782, _2787 * _2783));
                        float _3934 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                        float _2802 = ((_2798 * _2798) * (_2780 + (-1.0))) + 1.0;
                        float _2803 = _2738 * _2779;
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2728) + _2804;
                        float _3945 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2809 = 1.0 - _2779;
                        float _2819 = (0.5 / (((_2808 * ((_2794 * _2809) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _2809) + _2779) * _2794))) * _2808;
                        float _3956 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2830 = (((_2780 * 3.1415927410125732421875) * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) / ((_2802 * _2802) * ((_2745 * 2.1991131305694580078125) + 3.141590118408203125))) * _2734;
                        _2561 = (_2749 * _2697.x) + _2655;
                        _2562 = (_2749 * _2697.y) + _2656;
                        _2563 = (_2749 * _2697.z) + _2657;
                        _2558 = (_2830 * _2714.x) + _2652;
                        _2559 = (_2830 * _2714.y) + _2653;
                        _2560 = (_2830 * _2714.z) + _2654;
                        if (_2659 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2652 = _2558;
                            _2653 = _2559;
                            _2654 = _2560;
                            _2655 = _2561;
                            _2656 = _2562;
                            _2657 = _2563;
                            _2658 = _2659;
                        }
                    }
                    frontier_phi_58_pred = _2559;
                    frontier_phi_58_pred_1 = _2563;
                    frontier_phi_58_pred_2 = _2562;
                    frontier_phi_58_pred_3 = _2561;
                    frontier_phi_58_pred_4 = _2560;
                    frontier_phi_58_pred_5 = _2558;
                }
                _2296 = frontier_phi_58_pred;
                _2304 = frontier_phi_58_pred_1;
                _2302 = frontier_phi_58_pred_2;
                _2300 = frontier_phi_58_pred_3;
                _2298 = frontier_phi_58_pred_4;
                _2294 = frontier_phi_58_pred_5;
                uint _2484 = _2483 + 1u;
                if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2477 = _2294;
                    _2478 = _2296;
                    _2479 = _2298;
                    _2480 = _2300;
                    _2481 = _2302;
                    _2482 = _2304;
                    _2483 = _2484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
        }
        uvec4 _2307 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2308 = _2307.z;
        uint _2310 = (_2308 >> 8u) & 15u;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((4294967295u << _2310) & _2176) == 0u)
        {
            _2445 = _2293;
            _2447 = _2295;
            _2449 = _2297;
            _2451 = _2299;
            _2453 = _2301;
            _2455 = _2303;
        }
        else
        {
            float _2470 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _2471 = _2470 * _2130;
            float _2472 = _2470 * _2131;
            float _2473 = _2470 * _2132;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2310 < ((_2308 >> 12u) & 15u))
            {
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2635 = _2293;
                float _2636 = _2295;
                float _2637 = _2297;
                float _2638 = _2299;
                float _2639 = _2301;
                float _2640 = _2303;
                uint _2641 = _2310;
                uint _2650;
                bool _2651;
                for (;;)
                {
                    _2650 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2641 << 2u)) >> 2u)).x;
                    _2651 = _2650 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2651)
                    {
                        frontier_phi_67_pred = _2640;
                        frontier_phi_67_pred_1 = _2639;
                        frontier_phi_67_pred_2 = _2638;
                        frontier_phi_67_pred_3 = _2637;
                        frontier_phi_67_pred_4 = _2636;
                        frontier_phi_67_pred_5 = _2635;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2869 = _2635;
                        float _2870 = _2636;
                        float _2871 = _2637;
                        float _2872 = _2638;
                        float _2873 = _2639;
                        float _2874 = _2640;
                        uint _2875 = _2650;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2960;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2886 = ((_2641 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2886 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2886 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2886 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2132, _2994.z, fma(_2131, _2994.y, _2994.x * _2130)) + _2994.w;
                            _3007 = !((fma(_2132, _2975.z, fma(_2131, _2975.y, _2975.x * _2130)) + _2975.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2901.x - _2130;
                                float _3035 = _2901.y - _2131;
                                float _3036 = _2901.z - _2132;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2902 * _2902));
                                float _3967 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _3052 = sqrt(_3037) * _2917.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_783, _786, _789))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2132, _2945.z, fma(_2131, _2945.y, _2945.x * _2130)) + _2945.w) / _3006;
                                float _3066 = (fma(_2132, _2960.z, fma(_2131, _2960.y, _2960.x * _2130)) + _2960.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _3983 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _843;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2471;
                                float _3096 = _3042 - _2472;
                                float _3097 = _3043 - _2473;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_783, _786, _789), vec3((-0.0) - _2471, (-0.0) - _2472, (-0.0) - _2473));
                                float _3994 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3109 = dot(vec3(_783, _786, _789), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4005 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_783, _786, _789), vec3(_3041, _3042, _3043))) + _3118;
                                float _4016 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4027 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3072 * _2917.z;
                                frontier_phi_73_pred_1 = _3072 * _2917.y;
                                frontier_phi_73_pred_2 = _3072 * _2917.x;
                                frontier_phi_73_pred_3 = _3146 * _2929.z;
                                frontier_phi_73_pred_4 = _3146 * _2929.y;
                                frontier_phi_73_pred_5 = _3146 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_73_pred;
                            _3154 = frontier_phi_73_pred_1;
                            _3153 = frontier_phi_73_pred_2;
                            _3152 = frontier_phi_73_pred_3;
                            _3151 = frontier_phi_73_pred_4;
                            _3150 = frontier_phi_73_pred_5;
                            _2859 = _3153 + _2872;
                            _2860 = _3154 + _2873;
                            _2861 = _3155 + _2874;
                            _2856 = _3150 + _2869;
                            _2857 = _3151 + _2870;
                            _2858 = _3152 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2861;
                        frontier_phi_67_pred_1 = _2860;
                        frontier_phi_67_pred_2 = _2859;
                        frontier_phi_67_pred_3 = _2858;
                        frontier_phi_67_pred_4 = _2857;
                        frontier_phi_67_pred_5 = _2856;
                    }
                    _2456 = frontier_phi_67_pred;
                    _2454 = frontier_phi_67_pred_1;
                    _2452 = frontier_phi_67_pred_2;
                    _2450 = frontier_phi_67_pred_3;
                    _2448 = frontier_phi_67_pred_4;
                    _2446 = frontier_phi_67_pred_5;
                    uint _2642 = _2641 + 1u;
                    if (_2642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2635 = _2446;
                        _2636 = _2448;
                        _2637 = _2450;
                        _2638 = _2452;
                        _2639 = _2454;
                        _2640 = _2456;
                        _2641 = _2642;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2452;
                frontier_phi_49_50_ladder_1 = _2456;
                frontier_phi_49_50_ladder_2 = _2454;
                frontier_phi_49_50_ladder_3 = _2450;
                frontier_phi_49_50_ladder_4 = _2448;
                frontier_phi_49_50_ladder_5 = _2446;
            }
            else
            {
                frontier_phi_49_50_ladder = _2299;
                frontier_phi_49_50_ladder_1 = _2303;
                frontier_phi_49_50_ladder_2 = _2301;
                frontier_phi_49_50_ladder_3 = _2297;
                frontier_phi_49_50_ladder_4 = _2295;
                frontier_phi_49_50_ladder_5 = _2293;
            }
            _2445 = frontier_phi_49_50_ladder_5;
            _2447 = frontier_phi_49_50_ladder_4;
            _2449 = frontier_phi_49_50_ladder_3;
            _2451 = frontier_phi_49_50_ladder;
            _2453 = frontier_phi_49_50_ladder_2;
            _2455 = frontier_phi_49_50_ladder_1;
        }
        float _2460 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2189 = (_2460 * _2451) + _1919;
        _2191 = (_2460 * _2453) + _1920;
        _2193 = (_2460 * _2455) + _1921;
        _2195 = ((_2445 * 0.039999999105930328369140625) * _2460) + _2072;
        _2197 = ((_2447 * 0.039999999105930328369140625) * _2460) + _2073;
        _2199 = ((_2449 * 0.039999999105930328369140625) * _2460) + _2074;
    }
    else
    {
        _2189 = _1919;
        _2191 = _1920;
        _2193 = _1921;
        _2195 = _2072;
        _2197 = _2073;
        _2199 = _2074;
    }
    uint _2205 = _803 + uint(cbMatDynParam._m0[0u].w);
    float _2211 = ((_705 * (_693 - (_693 * _666))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2205].x;
    float _2212 = ((_705 * (_694 - (_694 * _666))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2205].y;
    float _2213 = ((_705 * (_695 - (_695 * _666))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2205].z;
    float _4043 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4054 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4065 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2230 = (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2189 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _827))) + ((_2195 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + _2211;
    float _2232 = (_2212 + ((_2197 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2191 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _827)));
    float _2234 = (_2213 + ((_2199 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1631)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2193 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _827)));
    float _4091 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2247 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    uint _2248 = _802 + 6u;
    float _2256 = _764 / cbSceneParam._m0[86u].x;
    float _2257 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2271 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2256, _2257, (log2((isnan(cbSceneParam._m0[77u].w) ? _751 : (isnan(_751) ? cbSceneParam._m0[77u].w : min(_751, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2273 = _2271.x;
    float _2274 = _2271.y;
    float _2275 = _2271.z;
    float _2276 = _2271.w;
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    if (_751 > cbSceneParam._m0[78u].w)
    {
        float _2318 = isnan(_751) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _751 : min(cbSceneParam._m0[80u].w, _751));
        float _2319 = _2318 / _751;
        float _2330 = _2319 * _276;
        float _2331 = _277 * _2319;
        float _2332 = (-0.0) - _2331;
        float _2333 = _2319 * _278;
        float _2335 = (cbSceneParam._m0[77u].w * _2332) / _2318;
        float _2336 = _2335 + cbSceneParam._m0[79u].w;
        float _2337 = cbSceneParam._m0[79u].w - _2331;
        float _2343 = sqrt(((_2330 * _2330) + (_2331 * _2331)) + (_2333 * _2333));
        float _2346 = (1.0 - (cbSceneParam._m0[77u].w / _2318)) * _2343;
        float _2352 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2354 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2571;
        if (abs((_2332 - _2335) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2571 = ((((_2336 > 0.0) ? exp2(_2352 * _2336) : (2.0 - exp2(_2354 * _2336))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2346;
        }
        else
        {
            float _2506 = 1.0 / cbSceneParam._m0[80u].x;
            float _2507 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : max(_2336, _2337));
            float _2508 = isnan(_2337) ? _2336 : (isnan(_2336) ? _2337 : min(_2336, _2337));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            _2571 = ((abs(_2343 / _2332) * cbSceneParam._m0[80u].y) * ((((_2517 - _2518) * 2.0) - ((exp2(_2352 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)))) - exp2(_2352 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))))) * _2506)) - ((exp2(_2354 * _2517) - exp2(_2354 * _2518)) * _2506))) + (_2346 * cbSceneParam._m0[80u].z);
        }
        vec4 _2573 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2256, _2257, 1.0), 0.0);
        float _2582 = exp2((_2571 * (-1.44269502162933349609375)) * (1.0 - _2573.w));
        float _2583 = log2(_2582);
        float _2599 = log2(_2276);
        _2356 = (exp2(_2599 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].x)) * _2573.x) / cbSceneParam._m0[78u].x)) + _2273;
        _2358 = (exp2(_2599 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].y)) * _2573.y) / cbSceneParam._m0[78u].y)) + _2274;
        _2360 = (exp2(_2599 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2583 * cbSceneParam._m0[78u].z)) * _2573.z) / cbSceneParam._m0[78u].z)) + _2275;
        _2362 = _2582 * _2276;
    }
    else
    {
        _2356 = _2273;
        _2358 = _2274;
        _2360 = _2275;
        _2362 = _2276;
    }
    float _2373 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2374 = _2373 == 3.0;
    float _2375 = log2(_2362);
    float _2379 = exp2(_2375 * cbSceneParam._m0[78u].x);
    float _2380 = exp2(_2375 * cbSceneParam._m0[78u].y);
    float _2381 = exp2(_2375 * cbSceneParam._m0[78u].z);
    float _2382 = _2379 * (isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0)));
    float _2383 = _2380 * (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0)));
    float _2384 = _2381 * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0)));
    float _2393 = (_2373 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2393 * (_2374 ? _2382 : (_2382 + (cbSceneParam._m0[72u].w * _2356)));
    SV_Target.y = _2393 * (_2374 ? _2383 : (_2383 + (cbSceneParam._m0[72u].w * _2358)));
    SV_Target.z = _2393 * (_2374 ? _2384 : (_2384 + (cbSceneParam._m0[72u].w * _2360)));
    SV_Target.w = cbInstanceData._m0[_2248].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2211) * _2247) * _2379) * _2393;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2212) * _2247) * _2380) * _2393;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2213) * _2247) * _2381) * _2393;
    SV_Target_1.w = cbInstanceData._m0[_2248].w;
}


