#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _3601;
float _3602;
float _3603;
float _3604;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _302 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _305 = _302.x;
    vec4 _323 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _340 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _305) + cbMtdParam._m0[12u].x) * _323.x;
    float _342 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _305) + cbMtdParam._m0[12u].y) * _323.y;
    float _344 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _305) + cbMtdParam._m0[12u].z) * _323.z;
    vec4 _362 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = cbMtdParam._m0[27u].w + _286;
    float _402 = cbMtdParam._m0[28u].x + _287;
    float _403 = cbMtdParam._m0[28u].y + _288;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_216, _217, _218));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_230, _231, _232));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _223, (-0.0) - _224, (-0.0) - _225));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _426 = _423 * _419;
    float _427 = (_423 * _417) + ((cbMtdParam._m0[25u].w * _305) * ((_362.x * 2.0) + (-1.0)));
    float _428 = (_423 * _418) + ((cbMtdParam._m0[26u].x * _305) * ((_362.y * 2.0) + (-1.0)));
    float _429 = _427 * cbMtdParam._m0[24u].x;
    float _430 = _428 * cbMtdParam._m0[23u].w;
    float _431 = fract(TEXCOORD.x);
    float _432 = fract(TEXCOORD.y);
    float _438;
    if (_429 > 0.0)
    {
        _438 = (1.0 - _431) / _429;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_429 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _431) / _429;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _438 = frontier_phi_3_2_ladder;
    }
    float _446;
    if (_430 > 0.0)
    {
        _446 = (1.0 - _432) / _430;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_430 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _432) / _430;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _446 = frontier_phi_7_6_ladder;
    }
    bool _448 = _426 > 0.0;
    float _450 = _448 ? (cbMtdParam._m0[17u].x / _426) : 5000.0;
    float _451 = isnan(_446) ? _438 : (isnan(_438) ? _446 : min(_438, _446));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = _431 + (-0.5);
    float _460 = _432 + (-0.5);
    float _463 = ((_452 * _426) + _456) / _456;
    vec4 _488 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_457 + (_452 * _429)) / _463) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_460 + (_452 * _430)) / _463) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _501 = (_488.x * _305) * cbMtdParam._m0[9u].x;
    float _502 = (_488.y * _305) * cbMtdParam._m0[9u].y;
    float _503 = (_488.z * _305) * cbMtdParam._m0[9u].z;
    float _521 = _427 * cbMtdParam._m0[26u].z;
    float _522 = _428 * cbMtdParam._m0[26u].y;
    bool _523 = _521 > 0.0;
    float _528;
    if (_523)
    {
        _528 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _528 = frontier_phi_11_10_ladder;
    }
    bool _530 = _522 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _535 = frontier_phi_15_14_ladder;
    }
    float _538 = _448 ? (cbMtdParam._m0[19u].z / _426) : 5000.0;
    float _539 = isnan(_535) ? _528 : (isnan(_528) ? _535 : min(_528, _535));
    float _540 = isnan(_538) ? _539 : (isnan(_539) ? _538 : min(_539, _538));
    float _544 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _548 = ((_540 * _426) + _544) / _544;
    float _553 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _555 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _571 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_457 + (_540 * _521)) / _548) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_460 + (_540 * _522)) / _548) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _586;
    if (_523)
    {
        _586 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _586 = frontier_phi_19_18_ladder;
    }
    float _592;
    if (_530)
    {
        _592 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _592 = frontier_phi_23_22_ladder;
    }
    float _594 = isnan(_592) ? _586 : (isnan(_586) ? _592 : min(_586, _592));
    float _595 = isnan(_538) ? _594 : (isnan(_594) ? _538 : min(_594, _538));
    float _602 = ((_595 * _426) + _544) / _544;
    vec4 _622 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_457 + (_595 * _521)) / _602) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_460 + (_595 * _522)) / _602) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _624 = _622.x;
    float _634 = (((((cbMtdParam._m0[10u].x * _305) * _571.x) - _501) * _305) * _624) + _501;
    float _635 = (((((cbMtdParam._m0[10u].y * _305) * _571.y) - _502) * _305) * _624) + _502;
    float _636 = (((((cbMtdParam._m0[10u].z * _305) * _571.z) - _503) * _305) * _624) + _503;
    vec4 _649 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _653 = _649.z;
    float _656 = (_649.x * 2.0) + (-1.0);
    float _657 = (_649.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3643 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    float _672 = (cbMtdParam._m0[19u].y * _634) * cbMtdParam._m0[16u].x;
    float _674 = (cbMtdParam._m0[19u].y * _635) * cbMtdParam._m0[16u].y;
    float _676 = (cbMtdParam._m0[19u].y * _636) * cbMtdParam._m0[16u].z;
    vec4 _700 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _705 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _711 = ((_700.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _713 = (-0.0) - (cbMtdParam._m0[21u].x * ((_700.x * 0.5) + (-0.25)));
    float _714 = fract(_705);
    float _716 = fract(_705 + 0.5);
    vec4 _743 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_714 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_711 * _714) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _745 = _743.x;
    float _751 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_716 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_711 * _716) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _745) * abs((_714 * 2.0) + (-1.0))) + _745;
    float _757 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _761 = fract(abs(_757));
    float _771 = sin(cbMtdParam._m0[21u].z);
    float _772 = cos(cbMtdParam._m0[21u].z);
    float _773 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _774 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _799 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_774, (-0.0) - _771, _772 * _773) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_774, _772, _773 * _771) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_757 >= ((-0.0) - _757)) ? _761 : ((-0.0) - _761)) * cbMtdParam._m0[18u].z) - _751)) + cbMtdParam._m0[18u].w;
    float _800 = ceil(_799);
    float _3654 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _821 = ((((cbMtdParam._m0[21u].w * _634) * cbMtdParam._m0[15u].x) - _672) * _801) + _672;
    float _822 = ((((cbMtdParam._m0[21u].w * _635) * cbMtdParam._m0[15u].y) - _674) * _801) + _674;
    float _823 = ((((cbMtdParam._m0[21u].w * _636) * cbMtdParam._m0[15u].z) - _676) * _801) + _676;
    float _827 = abs(cbMtdParam._m0[20u].w * _799);
    float _831 = (((_827 * cbMtdParam._m0[18u].y) - _751) * _827) + _751;
    float _3665 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _832 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    vec4 _844 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _859 = (cbMtdParam._m0[14u].x * _844.x) * cbMtdParam._m0[19u].x;
    float _860 = (cbMtdParam._m0[14u].y * _844.y) * cbMtdParam._m0[19u].x;
    float _861 = (cbMtdParam._m0[14u].z * _844.z) * cbMtdParam._m0[19u].x;
    float _868 = exp2(log2(_832) * cbMtdParam._m0[20u].x);
    float _890 = fma(_663, _223, fma(_657, _230, _656 * _216));
    float _893 = fma(_663, _224, fma(_657, _231, _656 * _217));
    float _896 = fma(_663, _225, fma(_657, _232, _656 * _218));
    float _900 = inversesqrt(dot(vec3(_890, _893, _896), vec3(_890, _893, _896)));
    float _901 = _900 * _890;
    float _902 = _900 * _893;
    float _903 = _900 * _896;
    float _3676 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _904 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3698 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3709 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _923 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _928 = _286 * _927;
    float _929 = _287 * _927;
    float _930 = _288 * _927;
    vec4 _935 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _937 = _935.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1092 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
        float _1098 = (cbMatDynParam._m0[5u].x * _1092) + cbMatDynParam._m0[5u].y;
        float _3720 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1103 = (cbMatDynParam._m0[5u].z * _1092) + cbMatDynParam._m0[5u].w;
        float _3731 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) - _1099)) + _1099) < ((_937 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _968 = fma(_903, cbSceneParam._m0[5u].z, fma(_902, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _901));
    float _971 = fma(_903, cbSceneParam._m0[6u].z, fma(_902, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _901));
    float _974 = fma(_903, cbSceneParam._m0[7u].z, fma(_902, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _901));
    uint _987 = uint(roundEven(NORMAL.w)) * 13u;
    uint _988 = _987 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_989].z;
    float _3742 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1012 = _1009.x * TEXCOORD_4;
    float _1013 = dot(vec3(_901, _902, _903), vec3(_928, _929, _930));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _901) - _928;
    float _1021 = (_1016 * _902) - _929;
    float _1022 = (_1016 * _903) - _930;
    float _1026 = abs(dot(vec3(_928, _929, _930), vec3(_901, _902, _903)));
    float _3775 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_904);
    float _1041 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1136 = fma(_1081, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073));
        float _1140 = fma(_1081, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073));
        float _1144 = fma(_1081, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073));
        float _1167 = _1073 + _901;
        float _1168 = _1077 + _902;
        float _1169 = _1081 + _903;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1136 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1140 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1144 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_901, _902, _903), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3823 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_901, _902, _903), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3856 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_901, _902, _903), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3889 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1081, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073));
        float _1456 = fma(_1081, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073));
        float _1460 = fma(_1081, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073));
        float _1483 = _1073 + _901;
        float _1484 = _1077 + _902;
        float _1485 = _1081 + _903;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_901, _902, _903), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _3952 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_901, _902, _903), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _3985 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_901, _902, _903), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4018 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = _1410;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1423)) + _1423;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1020 * 0.5;
    float _1790 = _1021 * 0.5;
    float _1791 = _1022 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _904);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1081, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1081, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1081, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1919 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1922 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1950 = frontier_phi_41_39_ladder;
        }
        float _2319;
        if (_1919 > 0.0)
        {
            _2319 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2319 = frontier_phi_50_46_ladder;
        }
        float _2661;
        if (_1922 > 0.0)
        {
            _2661 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2661 = frontier_phi_64_57_ladder;
        }
        float _2663 = isnan(_2319) ? _1950 : (isnan(_1950) ? _2319 : min(_1950, _2319));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _1916) + _1905;
        float _2669 = (_2664 * _1919) + _1909;
        float _2670 = (_2664 * _1922) + _1913;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2670, cbModelParam._m0[9u].z, fma(_2669, cbModelParam._m0[9u].y, _2668 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2670, cbModelParam._m0[10u].z, fma(_2669, cbModelParam._m0[10u].y, _2668 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2670, cbModelParam._m0[11u].z, fma(_2669, cbModelParam._m0[11u].y, _2668 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_40_64_ladder = _2812.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2812.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2812.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_40_64_ladder_2;
        _1940 = frontier_phi_40_64_ladder_1;
        _1942 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1858);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _904);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1081, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1081, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1081, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _2013 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _2016 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2324;
        if (_2010 > 0.0)
        {
            _2324 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2324 = frontier_phi_52_48_ladder;
        }
        float _2687;
        if (_2013 > 0.0)
        {
            _2687 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2687 = frontier_phi_66_59_ladder;
        }
        float _2877;
        if (_2016 > 0.0)
        {
            _2877 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2877 = frontier_phi_84_77_ladder;
        }
        float _2879 = isnan(_2687) ? _2324 : (isnan(_2324) ? _2687 : min(_2324, _2687));
        float _2880 = isnan(_2877) ? _2879 : (isnan(_2879) ? _2877 : min(_2879, _2877));
        float _2884 = (_2880 * _2010) + _1999;
        float _2885 = (_2880 * _2013) + _2003;
        float _2886 = (_2880 * _2016) + _2007;
        float _2887 = _2880 * 9.9999997473787516355514526367188e-05;
        float _2888 = (-1.0) - _2887;
        float _2890 = _2887 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2886 > _2890) || ((_2886 < _2888) || ((_2885 > _2890) || ((_2885 < _2888) || ((_2884 < _2888) || (_2884 > _2890))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2886, cbModelParam._m0[17u].z, fma(_2885, cbModelParam._m0[17u].y, _2884 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2886, cbModelParam._m0[18u].z, fma(_2885, cbModelParam._m0[18u].y, _2884 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2886, cbModelParam._m0[19u].z, fma(_2885, cbModelParam._m0[19u].y, _2884 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_49_84_ladder = _3128.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _3128.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _3128.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_49_84_ladder_2;
        _2037 = frontier_phi_49_84_ladder_1;
        _2039 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1947);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2051 = ((((1.0 - _1041) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1041 * _1028)) * _1012;
    float _2052 = _2051 * ((cbModelParam._m0[1u].w * (_2035 - _1938)) + _1938);
    float _2053 = _2051 * ((cbModelParam._m0[1u].w * (_2037 - _1940)) + _1940);
    float _2054 = _2051 * ((cbModelParam._m0[1u].w * (_2039 - _1942)) + _1942);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    vec4 _2071 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_949, _950));
    float _2073 = _2071.w;
    float _2085 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2073);
    float _2086 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2073);
    float _2087 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2073);
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_987 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2099 = _1012 + (-1.0);
    float _2102 = (cbLight._m0[_2094].x * _2099) + 1.0;
    float _2103 = (cbLight._m0[_2094].y * _2099) + 1.0;
    uint _2104 = _2093 + 5u;
    float _2110 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2114 = _2093 + 4u;
    float _2123 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2127 = _2093 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_901, _902, _903));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_901, _902, _903));
    float _4154 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4165 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2104].x * _2110) * _2148) + (((cbLight._m0[_2114].x * _2085) * _2123) * _2146);
    float _2156 = ((_2110 * cbLight._m0[_2104].y) * _2148) + (((cbLight._m0[_2114].y * _2086) * _2123) * _2146);
    float _2157 = ((_2110 * cbLight._m0[_2104].z) * _2148) + (((cbLight._m0[_2114].z * _2087) * _2123) * _2146);
    uint _2159 = _2093 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _904) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2093].x + _928;
    float _2175 = cbLight._m0[_2093].y + _929;
    float _2176 = cbLight._m0[_2093].z + _930;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_901, _902, _903), vec3(cbLight._m0[_2093].xyz));
    float _4176 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2188 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2189 = dot(vec3(_901, _902, _903), vec3(_2181, _2182, _2183));
    float _4198 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2181, _2182, _2183));
    float _4209 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2213 = 1.0 - _2173;
    float _2224 = (0.5 / (((_2188 * ((_2187 * _2213) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2213) + _2173) * _2187))) * _2187;
    float _4220 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2240 = _2093 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _904) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2127].x + _928;
    float _2254 = cbLight._m0[_2127].y + _929;
    float _2255 = cbLight._m0[_2127].z + _930;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_901, _902, _903), vec3(cbLight._m0[_2127].xyz));
    float _4231 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2267 = dot(vec3(_901, _902, _903), vec3(_2260, _2261, _2262));
    float _4242 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2260, _2261, _2262));
    float _4253 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2288 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2289 = 1.0 - _2252;
    float _2299 = (0.5 / (((_2188 * ((_2266 * _2289) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2289) + _2252) * _2266))) * _2266;
    float _4264 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2311 = (((_2288 * cbLight._m0[_2240].x) * _2301) * _2110) + ((((cbLight._m0[_2159].x * _2085) * _2212) * _2226) * _2123);
    float _2312 = (((_2288 * cbLight._m0[_2240].y) * _2301) * _2110) + ((((cbLight._m0[_2159].y * _2086) * _2212) * _2226) * _2123);
    float _2313 = (((_2288 * cbLight._m0[_2240].z) * _2301) * _2110) + ((((cbLight._m0[_2159].z * _2087) * _2212) * _2226) * _2123);
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_2091.y == 0u)
    {
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2368;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2368;
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2368;
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.x;
        uint _2395 = uint((float(_2383.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _2384))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _2384)));
        float _2405 = (log2(_2371 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2406 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        uint _2409 = uint(isnan(14.0) ? _2406 : (isnan(_2406) ? 14.0 : min(_2406, 14.0)));
        uvec4 _2414 = texelFetch(g_lightClusterGridBuffer, int(((_2409 << 2u) + (_2395 << 6u)) >> 2u));
        uint _2415 = _2414.x;
        uint _2416 = _2383.z;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((((1u << ((_2416 >> 4u) & 15u)) + 4294967295u) & _2415) == 0u) || ((_2416 & 240u) == 0u))
        {
            _2532 = 0.0;
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
        }
        else
        {
            float _2533;
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            uint _2730 = 0u;
            uint _2739;
            bool _2740;
            for (;;)
            {
                _2739 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                _2740 = _2739 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2740)
                {
                    frontier_phi_79_pred = _2729;
                    frontier_phi_79_pred_1 = _2728;
                    frontier_phi_79_pred_2 = _2727;
                    frontier_phi_79_pred_3 = _2726;
                    frontier_phi_79_pred_4 = _2725;
                    frontier_phi_79_pred_5 = _2724;
                }
                else
                {
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    uint _2926;
                    _2920 = _2724;
                    _2921 = _2725;
                    _2922 = _2726;
                    _2923 = _2727;
                    _2924 = _2728;
                    _2925 = _2729;
                    _2926 = _2739;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2930 = uint(findLSB(_2926)) + (_2730 << 5u);
                        uint _2927 = (_2926 + 4294967295u) & _2926;
                        uint _2932 = _2930 * 48u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2952 = (_2930 * 48u) + 4u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2971 = (_2930 * 48u) + 8u;
                        vec3 _2982 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x));
                        float _2986 = _2946.x - _2369;
                        float _2987 = _2946.y - _2370;
                        float _2988 = _2946.z - _2371;
                        float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                        float _2992 = inversesqrt(_2989);
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _2996 = dot(vec3(_968, _971, _974), vec3(_2993, _2994, _2995));
                        float _3001 = 1.0 - (_2989 * _2946.w);
                        float _4285 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3003 = sqrt(_2989) * _2965.w;
                        float _3006 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2996) + _3007;
                        float _3013 = _3003 * _3003;
                        float _3017 = ((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3002) / ((_3013 * 0.699999988079071044921875) + 1.0);
                        float _3021 = (-0.0) - _2369;
                        float _3022 = (-0.0) - _2370;
                        float _3023 = (-0.0) - _2371;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3038 = exp2(log2(1.0 / ((_3013 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _1028;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_968, _971, _974), vec3(_3028, _3029, _3030));
                        float _4301 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3063 = dot(vec3(_968, _971, _974), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4312 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3006 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2996) + _3072;
                        float _4323 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4334 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3070 * _3070) * ((_3013 * 2.1991131305694580078125) + 3.141590118408203125))) * _3002;
                        _2824 = (_3017 * _2965.x) + _2923;
                        _2825 = (_3017 * _2965.y) + _2924;
                        _2826 = (_3017 * _2965.z) + _2925;
                        _2821 = (_3098 * _2982.x) + _2920;
                        _2822 = (_3098 * _2982.y) + _2921;
                        _2823 = (_3098 * _2982.z) + _2922;
                        if (_2927 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2920 = _2821;
                            _2921 = _2822;
                            _2922 = _2823;
                            _2923 = _2824;
                            _2924 = _2825;
                            _2925 = _2826;
                            _2926 = _2927;
                        }
                    }
                    frontier_phi_79_pred = _2826;
                    frontier_phi_79_pred_1 = _2825;
                    frontier_phi_79_pred_2 = _2824;
                    frontier_phi_79_pred_3 = _2823;
                    frontier_phi_79_pred_4 = _2822;
                    frontier_phi_79_pred_5 = _2821;
                }
                _2543 = frontier_phi_79_pred;
                _2541 = frontier_phi_79_pred_1;
                _2539 = frontier_phi_79_pred_2;
                _2537 = frontier_phi_79_pred_3;
                _2535 = frontier_phi_79_pred_4;
                _2533 = frontier_phi_79_pred_5;
                uint _2731 = _2730 + 1u;
                if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2724 = _2533;
                    _2725 = _2535;
                    _2726 = _2537;
                    _2727 = _2539;
                    _2728 = _2541;
                    _2729 = _2543;
                    _2730 = _2731;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2532 = _2533;
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
        }
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.z;
        uint _2549 = (_2547 >> 8u) & 15u;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((4294967295u << _2549) & _2415) == 0u)
        {
            _2692 = _2532;
            _2694 = _2534;
            _2696 = _2536;
            _2698 = _2538;
            _2700 = _2540;
            _2702 = _2542;
        }
        else
        {
            float _2717 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
            float _2718 = _2717 * _2369;
            float _2719 = _2717 * _2370;
            float _2720 = _2717 * _2371;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2549 < ((_2547 >> 12u) & 15u))
            {
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2903 = _2532;
                float _2904 = _2534;
                float _2905 = _2536;
                float _2906 = _2538;
                float _2907 = _2540;
                float _2908 = _2542;
                uint _2909 = _2549;
                uint _2918;
                bool _2919;
                for (;;)
                {
                    _2918 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                    _2919 = _2918 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2919)
                    {
                        frontier_phi_93_pred = _2907;
                        frontier_phi_93_pred_1 = _2906;
                        frontier_phi_93_pred_2 = _2905;
                        frontier_phi_93_pred_3 = _2904;
                        frontier_phi_93_pred_4 = _2903;
                        frontier_phi_93_pred_5 = _2908;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3146 = _2903;
                        float _3147 = _2904;
                        float _3148 = _2905;
                        float _3149 = _2906;
                        float _3150 = _2907;
                        float _3151 = _2908;
                        uint _3152 = _2918;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3221;
                        vec4 _3236;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3163 = ((_2909 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3208 = (_3163 * 40u) + 16u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3163 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3163 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3163 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2371, _3270.z, fma(_2370, _3270.y, _3270.x * _2369)) + _3270.w;
                            _3283 = !((fma(_2371, _3251.z, fma(_2370, _3251.y, _3251.x * _2369)) + _3251.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3178.x - _2369;
                                float _3311 = _3178.y - _2370;
                                float _3312 = _3178.z - _2371;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3179 * _3179));
                                float _4345 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3328 = sqrt(_3313) * _3194.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_968, _971, _974))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2371, _3221.z, fma(_2370, _3221.y, _3221.x * _2369)) + _3221.w) / _3282;
                                float _3342 = (fma(_2371, _3236.z, fma(_2370, _3236.y, _3236.x * _2369)) + _3236.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4361 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _1028;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2718;
                                float _3372 = _3318 - _2719;
                                float _3373 = _3319 - _2720;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_968, _971, _974), vec3((-0.0) - _2718, (-0.0) - _2719, (-0.0) - _2720));
                                float _4372 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3385 = dot(vec3(_968, _971, _974), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4383 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_968, _971, _974), vec3(_3317, _3318, _3319))) + _3394;
                                float _4394 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4405 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3348 * _3194.z;
                                frontier_phi_99_pred_1 = _3348 * _3194.y;
                                frontier_phi_99_pred_2 = _3348 * _3194.x;
                                frontier_phi_99_pred_3 = _3422 * _3206.z;
                                frontier_phi_99_pred_4 = _3422 * _3206.y;
                                frontier_phi_99_pred_5 = _3422 * _3206.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3431 = frontier_phi_99_pred;
                            _3430 = frontier_phi_99_pred_1;
                            _3429 = frontier_phi_99_pred_2;
                            _3428 = frontier_phi_99_pred_3;
                            _3427 = frontier_phi_99_pred_4;
                            _3426 = frontier_phi_99_pred_5;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3135 = _3428 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _3137;
                        frontier_phi_93_pred_1 = _3136;
                        frontier_phi_93_pred_2 = _3135;
                        frontier_phi_93_pred_3 = _3134;
                        frontier_phi_93_pred_4 = _3133;
                        frontier_phi_93_pred_5 = _3138;
                    }
                    _2701 = frontier_phi_93_pred;
                    _2699 = frontier_phi_93_pred_1;
                    _2697 = frontier_phi_93_pred_2;
                    _2695 = frontier_phi_93_pred_3;
                    _2693 = frontier_phi_93_pred_4;
                    _2703 = frontier_phi_93_pred_5;
                    uint _2910 = _2909 + 1u;
                    if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2903 = _2693;
                        _2904 = _2695;
                        _2905 = _2697;
                        _2906 = _2699;
                        _2907 = _2701;
                        _2908 = _2703;
                        _2909 = _2910;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2703;
                frontier_phi_68_69_ladder_1 = _2701;
                frontier_phi_68_69_ladder_2 = _2699;
                frontier_phi_68_69_ladder_3 = _2697;
                frontier_phi_68_69_ladder_4 = _2693;
                frontier_phi_68_69_ladder_5 = _2695;
            }
            else
            {
                frontier_phi_68_69_ladder = _2542;
                frontier_phi_68_69_ladder_1 = _2540;
                frontier_phi_68_69_ladder_2 = _2538;
                frontier_phi_68_69_ladder_3 = _2536;
                frontier_phi_68_69_ladder_4 = _2532;
                frontier_phi_68_69_ladder_5 = _2534;
            }
            _2692 = frontier_phi_68_69_ladder_4;
            _2694 = frontier_phi_68_69_ladder_5;
            _2696 = frontier_phi_68_69_ladder_3;
            _2698 = frontier_phi_68_69_ladder_2;
            _2700 = frontier_phi_68_69_ladder_1;
            _2702 = frontier_phi_68_69_ladder;
        }
        float _2707 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _2428 = (_2707 * _2698) + _2155;
        _2430 = (_2707 * _2700) + _2156;
        _2432 = (_2707 * _2702) + _2157;
        _2434 = ((_2692 * 0.039999999105930328369140625) * _2707) + _2311;
        _2436 = ((_2694 * 0.039999999105930328369140625) * _2707) + _2312;
        _2438 = ((_2696 * 0.039999999105930328369140625) * _2707) + _2313;
    }
    else
    {
        _2428 = _2155;
        _2430 = _2156;
        _2432 = _2157;
        _2434 = _2311;
        _2436 = _2312;
        _2438 = _2313;
    }
    uint _2444 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _2450 = (cbSceneParam._m0[72u].y * ((_868 * ((_859 - _821) - (_859 * _832))) + _821)) * cbInstanceData._m0[_2444].x;
    float _2451 = (cbSceneParam._m0[72u].y * ((_868 * ((_860 - _822) - (_860 * _832))) + _822)) * cbInstanceData._m0[_2444].y;
    float _2452 = (((_868 * ((_861 - _823) - (_861 * _832))) + _823) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2444].z;
    float _4421 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4432 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4443 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2469 = (((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2428 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1012))) + ((_2434 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1847)) * cbPerFrame._m0[3u].x)) + _2450;
    float _2471 = (_2451 + ((_2436 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1847)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2430 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1012)));
    float _2473 = (_2452 + ((_2438 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1847)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2432 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1012)));
    float _2474 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2475 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2476 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2482 = cbMtdParam._m0[2u].x * _2450;
    float _2483 = cbMtdParam._m0[2u].y * _2451;
    float _2484 = cbMtdParam._m0[2u].z * _2452;
    float _4469 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2486 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    uint _2487 = _987 + 6u;
    float _2495 = _949 / cbSceneParam._m0[86u].x;
    float _2496 = _950 / cbSceneParam._m0[86u].y;
    vec4 _2510 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, (log2((isnan(cbSceneParam._m0[77u].w) ? _923 : (isnan(_923) ? cbSceneParam._m0[77u].w : min(_923, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2512 = _2510.x;
    float _2513 = _2510.y;
    float _2514 = _2510.z;
    float _2515 = _2510.w;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_923 > cbSceneParam._m0[78u].w)
    {
        float _2557 = isnan(_923) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _923 : min(cbSceneParam._m0[80u].w, _923));
        float _2558 = _2557 / _923;
        float _2569 = _2558 * _286;
        float _2570 = _287 * _2558;
        float _2571 = (-0.0) - _2570;
        float _2572 = _2558 * _288;
        float _2574 = (cbSceneParam._m0[77u].w * _2571) / _2557;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2570;
        float _2582 = sqrt(((_2569 * _2569) + (_2570 * _2570)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2557)) * _2582;
        float _2591 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2593 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2571 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2575 > 0.0) ? exp2(_2591 * _2575) : (2.0 - exp2(_2593 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2753 = 1.0 / cbSceneParam._m0[80u].x;
            float _2754 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2755 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            _2834 = ((abs(_2582 / _2571) * cbSceneParam._m0[80u].y) * ((((_2764 - _2765) * 2.0) - ((exp2(_2591 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0)))) - exp2(_2591 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))))) * _2753)) - ((exp2(_2593 * _2764) - exp2(_2593 * _2765)) * _2753))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2495, _2496, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2515);
        _2595 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2512;
        _2597 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2513;
        _2599 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2514;
        _2601 = _2845 * _2515;
    }
    else
    {
        _2595 = _2512;
        _2597 = _2513;
        _2599 = _2514;
        _2601 = _2515;
    }
    bool _2872;
    vec4 _2610;
    vec4 _2632;
    float _2634;
    float _2638;
    float _2639;
    float _2640;
    float _2643;
    float _2646;
    float _2649;
    float _2650;
    bool _2660;
    for (;;)
    {
        _2610 = cbMatDynParam._m0[0u];
        float _2612 = roundEven(_2610.y);
        bool _2613 = _2612 == 3.0;
        float _2614 = log2(_2601);
        float _2618 = exp2(_2614 * cbSceneParam._m0[78u].x);
        float _2619 = exp2(_2614 * cbSceneParam._m0[78u].y);
        float _2620 = exp2(_2614 * cbSceneParam._m0[78u].z);
        float _2621 = _2618 * _2474;
        float _2622 = _2619 * _2475;
        float _2623 = _2620 * _2476;
        float _2630 = _937 + (-0.5);
        _2632 = cbMtdParam._m0[1u];
        _2634 = _2632.y * _2630;
        float _2637 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2638 = _2637 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2595)));
        _2639 = _2637 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2597)));
        _2640 = _2637 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2599)));
        _2643 = ((_2482 * _2486) * _2618) * _2637;
        _2646 = ((_2483 * _2486) * _2619) * _2637;
        _2649 = ((_2484 * _2486) * _2620) * _2637;
        _2650 = _2630 * 0.999000012874603271484375;
        _2660 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2660)
        {
            if ((cbInstanceData._m0[_987 + 7u].x + _2650) < 0.5)
            {
                _2872 = true;
                break;
            }
        }
        uint _2788 = _988 + uint(_2610.w);
        if ((cbInstanceData._m0[_2788].w < 1.0) && ((cbInstanceData._m0[_2788].w + _2650) < 0.5))
        {
            _2872 = true;
            break;
        }
        if ((_2634 + 1.0) < _2632.x)
        {
            _2872 = true;
            break;
        }
        _2872 = false;
        break;
    }
    float _3103;
    if (_2872)
    {
        discard_state = true;
        _3103 = 0.0;
    }
    else
    {
        _3103 = cbInstanceData._m0[_2487].w;
    }
    SV_Target.x = _2638;
    SV_Target.y = _2639;
    SV_Target.z = _2640;
    SV_Target.w = _3103;
    SV_Target_1.x = _2643;
    SV_Target_1.y = _2646;
    SV_Target_1.z = _2649;
    SV_Target_1.w = cbInstanceData._m0[_2487].w;
    discard_exit();
}


