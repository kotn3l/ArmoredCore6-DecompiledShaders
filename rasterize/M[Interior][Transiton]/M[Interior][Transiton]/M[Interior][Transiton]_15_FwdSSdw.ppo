#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1333;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    vec4 _298 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _301 = _298.x;
    vec4 _319 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _301) + cbMtdParam._m0[12u].x) * _319.x;
    float _338 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _301) + cbMtdParam._m0[12u].y) * _319.y;
    float _340 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _301) + cbMtdParam._m0[12u].z) * _319.z;
    vec4 _358 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = cbMtdParam._m0[27u].w + _282;
    float _398 = cbMtdParam._m0[28u].x + _283;
    float _399 = cbMtdParam._m0[28u].y + _284;
    float _413 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_212, _213, _214));
    float _414 = (-0.0) - dot(vec3(_397, _398, _399), vec3(_226, _227, _228));
    float _415 = (-0.0) - dot(vec3(_397, _398, _399), vec3((-0.0) - _219, (-0.0) - _220, (-0.0) - _221));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _422 = _419 * _415;
    float _423 = (_419 * _413) + ((cbMtdParam._m0[25u].w * _301) * ((_358.x * 2.0) + (-1.0)));
    float _424 = (_419 * _414) + ((cbMtdParam._m0[26u].x * _301) * ((_358.y * 2.0) + (-1.0)));
    float _425 = _423 * cbMtdParam._m0[24u].x;
    float _426 = _424 * cbMtdParam._m0[23u].w;
    float _427 = fract(TEXCOORD.x);
    float _428 = fract(TEXCOORD.y);
    float _434;
    if (_425 > 0.0)
    {
        _434 = (1.0 - _427) / _425;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_425 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _427) / _425;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _434 = frontier_phi_3_2_ladder;
    }
    float _442;
    if (_426 > 0.0)
    {
        _442 = (1.0 - _428) / _426;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_426 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _428) / _426;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _442 = frontier_phi_7_6_ladder;
    }
    bool _444 = _422 > 0.0;
    float _446 = _444 ? (cbMtdParam._m0[17u].x / _422) : 5000.0;
    float _447 = isnan(_442) ? _434 : (isnan(_434) ? _442 : min(_434, _442));
    float _448 = isnan(_446) ? _447 : (isnan(_447) ? _446 : min(_447, _446));
    float _452 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _453 = _427 + (-0.5);
    float _456 = _428 + (-0.5);
    float _459 = ((_448 * _422) + _452) / _452;
    vec4 _484 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_453 + (_448 * _425)) / _459) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_456 + (_448 * _426)) / _459) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _497 = (_484.x * _301) * cbMtdParam._m0[9u].x;
    float _498 = (_484.y * _301) * cbMtdParam._m0[9u].y;
    float _499 = (_484.z * _301) * cbMtdParam._m0[9u].z;
    float _517 = _423 * cbMtdParam._m0[26u].z;
    float _518 = _424 * cbMtdParam._m0[26u].y;
    bool _519 = _517 > 0.0;
    float _524;
    if (_519)
    {
        _524 = (1.0 - _427) / _517;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_517 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _427) / _517;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _524 = frontier_phi_11_10_ladder;
    }
    bool _526 = _518 > 0.0;
    float _531;
    if (_526)
    {
        _531 = (1.0 - _428) / _518;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_518 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _428) / _518;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _531 = frontier_phi_15_14_ladder;
    }
    float _534 = _444 ? (cbMtdParam._m0[19u].z / _422) : 5000.0;
    float _535 = isnan(_531) ? _524 : (isnan(_524) ? _531 : min(_524, _531));
    float _536 = isnan(_534) ? _535 : (isnan(_535) ? _534 : min(_535, _534));
    float _540 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _544 = ((_536 * _422) + _540) / _540;
    float _549 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _551 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _567 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_453 + (_536 * _517)) / _544) + 0.5) + _549) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_456 + (_536 * _518)) / _544) + 0.5) + _551) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _582;
    if (_519)
    {
        _582 = (1.0 - _427) / _517;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_517 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _427) / _517;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _582 = frontier_phi_19_18_ladder;
    }
    float _588;
    if (_526)
    {
        _588 = (1.0 - _428) / _518;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_518 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _428) / _518;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _588 = frontier_phi_23_22_ladder;
    }
    float _590 = isnan(_588) ? _582 : (isnan(_582) ? _588 : min(_582, _588));
    float _591 = isnan(_534) ? _590 : (isnan(_590) ? _534 : min(_590, _534));
    float _598 = ((_591 * _422) + _540) / _540;
    vec4 _618 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_453 + (_591 * _517)) / _598) + 0.5) + _549) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_456 + (_591 * _518)) / _598) + 0.5) + _551) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _620 = _618.x;
    float _630 = _301 * 0.1500000059604644775390625;
    float _641 = (_630 * ((_497 - _336) + (((((cbMtdParam._m0[10u].x * _301) * _567.x) - _497) * _301) * _620))) + _336;
    float _642 = (_630 * ((_498 - _338) + (((((cbMtdParam._m0[10u].y * _301) * _567.y) - _498) * _301) * _620))) + _338;
    float _643 = (_630 * ((_499 - _340) + (((((cbMtdParam._m0[10u].z * _301) * _567.z) - _499) * _301) * _620))) + _340;
    vec4 _656 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _660 = _656.z;
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3502 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))));
    vec4 _694 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _699 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _705 = ((_694.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _707 = (-0.0) - (cbMtdParam._m0[21u].x * ((_694.x * 0.5) + (-0.25)));
    float _708 = fract(_699);
    float _710 = fract(_699 + 0.5);
    vec4 _737 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_708 * _707) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_705 * _708) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _739 = _737.x;
    float _745 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_710 * _707) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_705 * _710) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _739) * abs((_708 * 2.0) + (-1.0))) + _739;
    float _751 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _755 = fract(abs(_751));
    float _764 = sin(cbMtdParam._m0[21u].z);
    float _765 = cos(cbMtdParam._m0[21u].z);
    float _766 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _767 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _797 = abs(cbMtdParam._m0[20u].w * (((_745 - (((_751 >= ((-0.0) - _751)) ? _755 : ((-0.0) - _755)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_767, (-0.0) - _764, _765 * _766) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_767, _765, _766 * _764) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _801 = (((_797 * cbMtdParam._m0[18u].y) - _745) * _797) + _745;
    float _3513 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    vec4 _814 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _829 = (cbMtdParam._m0[14u].x * _814.x) * cbMtdParam._m0[19u].x;
    float _830 = (cbMtdParam._m0[14u].y * _814.y) * cbMtdParam._m0[19u].x;
    float _831 = (cbMtdParam._m0[14u].z * _814.z) * cbMtdParam._m0[19u].x;
    float _841 = exp2(log2(_802) * cbMtdParam._m0[20u].x);
    float _854 = fma(_670, _219, fma(_664, _226, _663 * _212));
    float _857 = fma(_670, _220, fma(_664, _227, _663 * _213));
    float _860 = fma(_670, _221, fma(_664, _228, _663 * _214));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _3524 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _868 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3546 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3557 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _892 = _282 * _891;
    float _893 = _283 * _891;
    float _894 = _284 * _891;
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _919 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _922 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _925 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    uint _938 = uint(roundEven(NORMAL.w)) * 13u;
    uint _939 = _938 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_940].z;
    float _3568 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _963 = _960.x * TEXCOORD_4;
    float _964 = dot(vec3(_865, _866, _867), vec3(_892, _893, _894));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _865) - _892;
    float _972 = (_967 * _866) - _893;
    float _973 = (_967 * _867) - _894;
    float _977 = abs(dot(vec3(_892, _893, _894), vec3(_865, _866, _867)));
    float _3601 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_868);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1063 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1067 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1090 = _1024 + _865;
        float _1091 = _1028 + _866;
        float _1092 = _1032 + _867;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_865, _866, _867), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3649 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_865, _866, _867), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3682 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_865, _866, _867), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3715 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1376 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1380 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1403 = _1024 + _865;
        float _1404 = _1028 + _866;
        float _1405 = _1032 + _867;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_865, _866, _867), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _3778 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_865, _866, _867), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _3811 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_865, _866, _867), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _3844 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1333;
        _1642 = _1333;
        _1643 = _1333;
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _971 * 0.5;
    float _1710 = _972 * 0.5;
    float _1711 = _973 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _868);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1840 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1843 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1871 = frontier_phi_38_36_ladder;
        }
        float _2240;
        if (_1840 > 0.0)
        {
            _2240 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2240 = frontier_phi_47_43_ladder;
        }
        float _2574;
        if (_1843 > 0.0)
        {
            _2574 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2574 = frontier_phi_61_54_ladder;
        }
        float _2576 = isnan(_2240) ? _1871 : (isnan(_1871) ? _2240 : min(_1871, _2240));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1837) + _1826;
        float _2582 = (_2577 * _1840) + _1830;
        float _2583 = (_2577 * _1843) + _1834;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2583, cbModelParam._m0[9u].z, fma(_2582, cbModelParam._m0[9u].y, _2581 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2583, cbModelParam._m0[10u].z, fma(_2582, cbModelParam._m0[10u].y, _2581 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2583, cbModelParam._m0[11u].z, fma(_2582, cbModelParam._m0[11u].y, _2581 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_37_61_ladder = _2709.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2709.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2709.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_37_61_ladder_2;
        _1861 = frontier_phi_37_61_ladder_1;
        _1863 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1778);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _868);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1934 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1937 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2245;
        if (_1931 > 0.0)
        {
            _2245 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2245 = frontier_phi_49_45_ladder;
        }
        float _2600;
        if (_1934 > 0.0)
        {
            _2600 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2600 = frontier_phi_63_56_ladder;
        }
        float _2769;
        if (_1937 > 0.0)
        {
            _2769 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2769 = frontier_phi_77_72_ladder;
        }
        float _2771 = isnan(_2600) ? _2245 : (isnan(_2245) ? _2600 : min(_2245, _2600));
        float _2772 = isnan(_2769) ? _2771 : (isnan(_2771) ? _2769 : min(_2771, _2769));
        float _2776 = (_2772 * _1931) + _1920;
        float _2777 = (_2772 * _1934) + _1924;
        float _2778 = (_2772 * _1937) + _1928;
        float _2779 = _2772 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2779;
        float _2782 = _2779 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2778 > _2782) || ((_2778 < _2780) || ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 < _2780) || (_2776 > _2782))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2778, cbModelParam._m0[17u].z, fma(_2777, cbModelParam._m0[17u].y, _2776 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2778, cbModelParam._m0[18u].z, fma(_2777, cbModelParam._m0[18u].y, _2776 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2778, cbModelParam._m0[19u].z, fma(_2777, cbModelParam._m0[19u].y, _2776 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_46_77_ladder = _3011.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _3011.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _3011.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_46_77_ladder_2;
        _1958 = frontier_phi_46_77_ladder_1;
        _1960 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1868);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1972 = ((((1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_992 * _979)) * _963;
    float _1973 = _1972 * ((cbModelParam._m0[1u].w * (_1956 - _1859)) + _1859);
    float _1974 = _1972 * ((cbModelParam._m0[1u].w * (_1958 - _1861)) + _1861);
    float _1975 = _1972 * ((cbModelParam._m0[1u].w * (_1960 - _1863)) + _1863);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    vec4 _1992 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_900, _901));
    float _1994 = _1992.w;
    float _2006 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1994);
    float _2007 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1994);
    float _2008 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1994);
    uvec4 _2012 = floatBitsToUint(cbInstanceData._m0[_938 + 5u]);
    uint _2014 = _2012.x * 14u;
    uint _2015 = _2014 + 13u;
    float _2020 = _963 + (-1.0);
    float _2023 = (cbLight._m0[_2015].x * _2020) + 1.0;
    float _2024 = (cbLight._m0[_2015].y * _2020) + 1.0;
    uint _2025 = _2014 + 5u;
    float _2031 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2035 = _2014 + 4u;
    float _2044 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2048 = _2014 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_865, _866, _867));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_865, _866, _867));
    float _3980 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _3991 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2025].x * _2031) * _2069) + (((cbLight._m0[_2035].x * _2006) * _2044) * _2067);
    float _2077 = ((_2031 * cbLight._m0[_2025].y) * _2069) + (((cbLight._m0[_2035].y * _2007) * _2044) * _2067);
    float _2078 = ((_2031 * cbLight._m0[_2025].z) * _2069) + (((cbLight._m0[_2035].z * _2008) * _2044) * _2067);
    uint _2080 = _2014 + 8u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _868) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_2014].x + _892;
    float _2096 = cbLight._m0[_2014].y + _893;
    float _2097 = cbLight._m0[_2014].z + _894;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2014].xyz));
    float _4002 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2109 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _2110 = dot(vec3(_865, _866, _867), vec3(_2102, _2103, _2104));
    float _4024 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2102, _2103, _2104));
    float _4035 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2094 * _2094;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2094;
    float _2145 = (0.5 / (((_2109 * ((_2108 * _2134) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2134) + _2094) * _2108))) * _2108;
    float _4046 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    uint _2161 = _2014 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _868) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2048].x + _892;
    float _2175 = cbLight._m0[_2048].y + _893;
    float _2176 = cbLight._m0[_2048].z + _894;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2048].xyz));
    float _4057 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _2188 = dot(vec3(_865, _866, _867), vec3(_2181, _2182, _2183));
    float _4068 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2181, _2182, _2183));
    float _4079 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2173;
    float _2220 = (0.5 / (((_2109 * ((_2187 * _2210) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2210) + _2173) * _2187))) * _2187;
    float _4090 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2232 = (((_2209 * cbLight._m0[_2161].x) * _2222) * _2031) + ((((cbLight._m0[_2080].x * _2006) * _2133) * _2147) * _2044);
    float _2233 = (((_2209 * cbLight._m0[_2161].y) * _2222) * _2031) + ((((cbLight._m0[_2080].y * _2007) * _2133) * _2147) * _2044);
    float _2234 = (((_2209 * cbLight._m0[_2161].z) * _2222) * _2031) + ((((cbLight._m0[_2080].z * _2008) * _2133) * _2147) * _2044);
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_2012.y == 0u)
    {
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2289;
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2289;
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2289;
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.x;
        uint _2316 = uint((float(_2304.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2305))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2305)));
        float _2326 = (log2(_2292 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2327 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        uint _2330 = uint(isnan(14.0) ? _2327 : (isnan(_2327) ? 14.0 : min(_2327, 14.0)));
        uvec4 _2335 = texelFetch(g_lightClusterGridBuffer, int(((_2330 << 2u) + (_2316 << 6u)) >> 2u));
        uint _2336 = _2335.x;
        uint _2337 = _2304.z;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((((1u << ((_2337 >> 4u) & 15u)) + 4294967295u) & _2336) == 0u) || ((_2337 & 240u) == 0u))
        {
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
        }
        else
        {
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            uint _2643 = 0u;
            uint _2652;
            bool _2653;
            for (;;)
            {
                _2652 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                _2653 = _2652 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2653)
                {
                    frontier_phi_74_pred = _2640;
                    frontier_phi_74_pred_1 = _2639;
                    frontier_phi_74_pred_2 = _2638;
                    frontier_phi_74_pred_3 = _2637;
                    frontier_phi_74_pred_4 = _2641;
                    frontier_phi_74_pred_5 = _2642;
                }
                else
                {
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    uint _2818;
                    _2812 = _2637;
                    _2813 = _2638;
                    _2814 = _2639;
                    _2815 = _2640;
                    _2816 = _2641;
                    _2817 = _2642;
                    _2818 = _2652;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    for (;;)
                    {
                        uint _2822 = uint(findLSB(_2818)) + (_2643 << 5u);
                        uint _2819 = (_2818 + 4294967295u) & _2818;
                        uint _2824 = _2822 * 48u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2844 = (_2822 * 48u) + 4u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2863 = (_2822 * 48u) + 8u;
                        vec3 _2874 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x));
                        float _2878 = _2838.x - _2290;
                        float _2879 = _2838.y - _2291;
                        float _2880 = _2838.z - _2292;
                        float _2881 = dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880));
                        float _2884 = inversesqrt(_2881);
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2888 = dot(vec3(_919, _922, _925), vec3(_2885, _2886, _2887));
                        float _2893 = 1.0 - (_2881 * _2838.w);
                        float _4111 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2895 = sqrt(_2881) * _2857.w;
                        float _2898 = 1.39999997615814208984375 / (_2895 + 1.39999997615814208984375);
                        float _2899 = _2898 * _2898;
                        float _2902 = ((1.0 - _2899) * _2888) + _2899;
                        float _2905 = _2895 * _2895;
                        float _2909 = ((isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))) * _2894) / ((_2905 * 0.699999988079071044921875) + 1.0);
                        float _2913 = (-0.0) - _2290;
                        float _2914 = (-0.0) - _2291;
                        float _2915 = (-0.0) - _2292;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2930 = exp2(log2(1.0 / ((_2905 * 3.5) + 5.0)) * 0.25);
                        float _2931 = 1.0 - _979;
                        float _2938 = sqrt(1.0 - ((1.0 - (_2931 * _2931)) * (1.0 - (_2930 * _2930))));
                        float _2939 = _2938 * _2938;
                        float _2940 = _2939 * _2939;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2951 = dot(vec3(_919, _922, _925), vec3(_2920, _2921, _2922));
                        float _4127 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2955 = dot(vec3(_919, _922, _925), vec3(_2947 * _2941, _2947 * _2942, _2947 * _2943));
                        float _4138 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2962 = ((_2958 * _2958) * (_2940 + (-1.0))) + 1.0;
                        float _2963 = _2898 * _2939;
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2888) + _2964;
                        float _4149 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2969 = 1.0 - _2939;
                        float _2979 = (0.5 / (((_2968 * ((_2954 * _2969) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2968 * _2969) + _2939) * _2954))) * _2968;
                        float _4160 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2990 = (((_2940 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_2962 * _2962) * ((_2905 * 2.1991131305694580078125) + 3.141590118408203125))) * _2894;
                        _2721 = (_2909 * _2857.x) + _2815;
                        _2722 = (_2909 * _2857.y) + _2816;
                        _2723 = (_2909 * _2857.z) + _2817;
                        _2718 = (_2990 * _2874.x) + _2812;
                        _2719 = (_2990 * _2874.y) + _2813;
                        _2720 = (_2990 * _2874.z) + _2814;
                        if (_2819 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2812 = _2718;
                            _2813 = _2719;
                            _2814 = _2720;
                            _2815 = _2721;
                            _2816 = _2722;
                            _2817 = _2723;
                            _2818 = _2819;
                        }
                    }
                    frontier_phi_74_pred = _2721;
                    frontier_phi_74_pred_1 = _2720;
                    frontier_phi_74_pred_2 = _2719;
                    frontier_phi_74_pred_3 = _2718;
                    frontier_phi_74_pred_4 = _2722;
                    frontier_phi_74_pred_5 = _2723;
                }
                _2460 = frontier_phi_74_pred;
                _2458 = frontier_phi_74_pred_1;
                _2456 = frontier_phi_74_pred_2;
                _2454 = frontier_phi_74_pred_3;
                _2462 = frontier_phi_74_pred_4;
                _2464 = frontier_phi_74_pred_5;
                uint _2644 = _2643 + 1u;
                if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2637 = _2454;
                    _2638 = _2456;
                    _2639 = _2458;
                    _2640 = _2460;
                    _2641 = _2462;
                    _2642 = _2464;
                    _2643 = _2644;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
        }
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.z;
        uint _2470 = (_2468 >> 8u) & 15u;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((4294967295u << _2470) & _2336) == 0u)
        {
            _2605 = _2453;
            _2607 = _2455;
            _2609 = _2457;
            _2611 = _2459;
            _2613 = _2461;
            _2615 = _2463;
        }
        else
        {
            float _2630 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
            float _2631 = _2630 * _2290;
            float _2632 = _2630 * _2291;
            float _2633 = _2630 * _2292;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2470 < ((_2468 >> 12u) & 15u))
            {
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2795 = _2453;
                float _2796 = _2455;
                float _2797 = _2457;
                float _2798 = _2459;
                float _2799 = _2461;
                float _2800 = _2463;
                uint _2801 = _2470;
                uint _2810;
                bool _2811;
                for (;;)
                {
                    _2810 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                    _2811 = _2810 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2811)
                    {
                        frontier_phi_83_pred = _2798;
                        frontier_phi_83_pred_1 = _2797;
                        frontier_phi_83_pred_2 = _2796;
                        frontier_phi_83_pred_3 = _2795;
                        frontier_phi_83_pred_4 = _2800;
                        frontier_phi_83_pred_5 = _2799;
                    }
                    else
                    {
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3029 = _2795;
                        float _3030 = _2796;
                        float _3031 = _2797;
                        float _3032 = _2798;
                        float _3033 = _2799;
                        float _3034 = _2800;
                        uint _3035 = _2810;
                        uint _3036;
                        vec4 _3061;
                        float _3062;
                        vec4 _3077;
                        vec3 _3089;
                        vec4 _3105;
                        vec4 _3120;
                        float _3166;
                        bool _3167;
                        for (;;)
                        {
                            uint _3046 = ((_2801 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3035));
                            _3036 = (_3035 + 4294967295u) & _3035;
                            uint _3048 = _3046 * 40u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3062 = _3061.w;
                            uint _3064 = (_3046 * 40u) + 4u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3079 = (_3046 * 40u) + 8u;
                            _3089 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x));
                            uint _3092 = (_3046 * 40u) + 16u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3046 * 40u) + 20u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3046 * 40u) + 24u;
                            vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3141 = (_3046 * 40u) + 28u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3166 = fma(_2292, _3154.z, fma(_2291, _3154.y, _3154.x * _2290)) + _3154.w;
                            _3167 = !((fma(_2292, _3135.z, fma(_2291, _3135.y, _3135.x * _2290)) + _3135.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3167)
                            {
                                float _3194 = _3061.x - _2290;
                                float _3195 = _3061.y - _2291;
                                float _3196 = _3061.z - _2292;
                                float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                                float _3200 = inversesqrt(_3197);
                                float _3201 = _3200 * _3194;
                                float _3202 = _3200 * _3195;
                                float _3203 = _3200 * _3196;
                                float _3207 = 1.0 - (_3197 / (_3062 * _3062));
                                float _4171 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3212 = sqrt(_3197) * _3077.w;
                                float _3214 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                                float _3215 = _3214 * _3214;
                                float _3218 = ((1.0 - _3215) * dot(vec3(_3201, _3202, _3203), vec3(_919, _922, _925))) + _3215;
                                float _3221 = _3212 * _3212;
                                float _3225 = (fma(_2292, _3105.z, fma(_2291, _3105.y, _3105.x * _2290)) + _3105.w) / _3166;
                                float _3226 = (fma(_2292, _3120.z, fma(_2291, _3120.y, _3120.x * _2290)) + _3120.w) / _3166;
                                float _3230 = 1.0 - dot(vec2(_3225, _3226), vec2(_3225, _3226));
                                float _4187 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3232 = _3231 * (((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3208) / ((_3221 * 0.699999988079071044921875) + 1.0));
                                float _3244 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                                float _3245 = 1.0 - _979;
                                float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                                float _3253 = _3252 * _3252;
                                float _3254 = _3253 * _3253;
                                float _3255 = _3201 - _2631;
                                float _3256 = _3202 - _2632;
                                float _3257 = _3203 - _2633;
                                float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                                float _3265 = dot(vec3(_919, _922, _925), vec3((-0.0) - _2631, (-0.0) - _2632, (-0.0) - _2633));
                                float _4198 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3269 = dot(vec3(_919, _922, _925), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                                float _4209 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3272 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                                float _3277 = _3214 * _3253;
                                float _3278 = _3277 * _3277;
                                float _3284 = ((1.0 - _3278) * dot(vec3(_919, _922, _925), vec3(_3201, _3202, _3203))) + _3278;
                                float _4220 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3286 = 1.0 - _3253;
                                float _3296 = (0.5 / (((_3285 * ((_3268 * _3286) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3253) * _3268))) * _3285;
                                float _4231 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3306 = (_3231 * _3208) * (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_3276 * _3276) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3232 * _3077.x;
                                frontier_phi_89_pred_1 = _3306 * _3089.z;
                                frontier_phi_89_pred_2 = _3306 * _3089.y;
                                frontier_phi_89_pred_3 = _3306 * _3089.x;
                                frontier_phi_89_pred_4 = _3232 * _3077.z;
                                frontier_phi_89_pred_5 = _3232 * _3077.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3313 = frontier_phi_89_pred;
                            _3312 = frontier_phi_89_pred_1;
                            _3311 = frontier_phi_89_pred_2;
                            _3310 = frontier_phi_89_pred_3;
                            _3315 = frontier_phi_89_pred_4;
                            _3314 = frontier_phi_89_pred_5;
                            _3019 = _3313 + _3032;
                            _3020 = _3314 + _3033;
                            _3021 = _3315 + _3034;
                            _3016 = _3310 + _3029;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            if (_3036 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3036;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3019;
                        frontier_phi_83_pred_1 = _3018;
                        frontier_phi_83_pred_2 = _3017;
                        frontier_phi_83_pred_3 = _3016;
                        frontier_phi_83_pred_4 = _3021;
                        frontier_phi_83_pred_5 = _3020;
                    }
                    _2612 = frontier_phi_83_pred;
                    _2610 = frontier_phi_83_pred_1;
                    _2608 = frontier_phi_83_pred_2;
                    _2606 = frontier_phi_83_pred_3;
                    _2616 = frontier_phi_83_pred_4;
                    _2614 = frontier_phi_83_pred_5;
                    uint _2802 = _2801 + 1u;
                    if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2795 = _2606;
                        _2796 = _2608;
                        _2797 = _2610;
                        _2798 = _2612;
                        _2799 = _2614;
                        _2800 = _2616;
                        _2801 = _2802;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2616;
                frontier_phi_65_66_ladder_1 = _2614;
                frontier_phi_65_66_ladder_2 = _2610;
                frontier_phi_65_66_ladder_3 = _2608;
                frontier_phi_65_66_ladder_4 = _2612;
                frontier_phi_65_66_ladder_5 = _2606;
            }
            else
            {
                frontier_phi_65_66_ladder = _2463;
                frontier_phi_65_66_ladder_1 = _2461;
                frontier_phi_65_66_ladder_2 = _2457;
                frontier_phi_65_66_ladder_3 = _2455;
                frontier_phi_65_66_ladder_4 = _2459;
                frontier_phi_65_66_ladder_5 = _2453;
            }
            _2605 = frontier_phi_65_66_ladder_5;
            _2607 = frontier_phi_65_66_ladder_3;
            _2609 = frontier_phi_65_66_ladder_2;
            _2611 = frontier_phi_65_66_ladder_4;
            _2613 = frontier_phi_65_66_ladder_1;
            _2615 = frontier_phi_65_66_ladder;
        }
        float _2620 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2349 = (_2620 * _2611) + _2076;
        _2351 = (_2620 * _2613) + _2077;
        _2353 = (_2620 * _2615) + _2078;
        _2355 = ((_2605 * 0.039999999105930328369140625) * _2620) + _2232;
        _2357 = ((_2607 * 0.039999999105930328369140625) * _2620) + _2233;
        _2359 = ((_2609 * 0.039999999105930328369140625) * _2620) + _2234;
    }
    else
    {
        _2349 = _2076;
        _2351 = _2077;
        _2353 = _2078;
        _2355 = _2232;
        _2357 = _2233;
        _2359 = _2234;
    }
    uint _2365 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _2371 = ((_841 * (_829 - (_829 * _802))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2365].x;
    float _2372 = ((_841 * (_830 - (_830 * _802))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2365].y;
    float _2373 = ((_841 * (_831 - (_831 * _802))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2365].z;
    float _4247 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4258 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4269 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _2390 = (((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2349 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _963))) + ((_2355 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + _2371;
    float _2392 = (_2372 + ((_2357 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2351 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _963)));
    float _2394 = (_2373 + ((_2359 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2353 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _963)));
    float _4295 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2407 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    uint _2408 = _938 + 6u;
    float _2416 = _900 / cbSceneParam._m0[86u].x;
    float _2417 = _901 / cbSceneParam._m0[86u].y;
    vec4 _2431 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2416, _2417, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2433 = _2431.x;
    float _2434 = _2431.y;
    float _2435 = _2431.z;
    float _2436 = _2431.w;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _2478 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _2479 = _2478 / _887;
        float _2490 = _2479 * _282;
        float _2491 = _283 * _2479;
        float _2492 = (-0.0) - _2491;
        float _2493 = _2479 * _284;
        float _2495 = (cbSceneParam._m0[77u].w * _2492) / _2478;
        float _2496 = _2495 + cbSceneParam._m0[79u].w;
        float _2497 = cbSceneParam._m0[79u].w - _2491;
        float _2503 = sqrt(((_2490 * _2490) + (_2491 * _2491)) + (_2493 * _2493));
        float _2506 = (1.0 - (cbSceneParam._m0[77u].w / _2478)) * _2503;
        float _2512 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2514 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2731;
        if (abs((_2492 - _2495) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2731 = ((((_2496 > 0.0) ? exp2(_2512 * _2496) : (2.0 - exp2(_2514 * _2496))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2506;
        }
        else
        {
            float _2666 = 1.0 / cbSceneParam._m0[80u].x;
            float _2667 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : max(_2496, _2497));
            float _2668 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : min(_2496, _2497));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            _2731 = ((abs(_2503 / _2492) * cbSceneParam._m0[80u].y) * ((((_2677 - _2678) * 2.0) - ((exp2(_2512 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0)))) - exp2(_2512 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))))) * _2666)) - ((exp2(_2514 * _2677) - exp2(_2514 * _2678)) * _2666))) + (_2506 * cbSceneParam._m0[80u].z);
        }
        vec4 _2733 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2416, _2417, 1.0), 0.0);
        float _2742 = exp2((_2731 * (-1.44269502162933349609375)) * (1.0 - _2733.w));
        float _2743 = log2(_2742);
        float _2759 = log2(_2436);
        _2516 = (exp2(_2759 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].x)) * _2733.x) / cbSceneParam._m0[78u].x)) + _2433;
        _2518 = (exp2(_2759 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].y)) * _2733.y) / cbSceneParam._m0[78u].y)) + _2434;
        _2520 = (exp2(_2759 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].z)) * _2733.z) / cbSceneParam._m0[78u].z)) + _2435;
        _2522 = _2742 * _2436;
    }
    else
    {
        _2516 = _2433;
        _2518 = _2434;
        _2520 = _2435;
        _2522 = _2436;
    }
    float _2533 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2534 = _2533 == 3.0;
    float _2535 = log2(_2522);
    float _2539 = exp2(_2535 * cbSceneParam._m0[78u].x);
    float _2540 = exp2(_2535 * cbSceneParam._m0[78u].y);
    float _2541 = exp2(_2535 * cbSceneParam._m0[78u].z);
    float _2542 = _2539 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0)));
    float _2543 = _2540 * (isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0)));
    float _2544 = _2541 * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0)));
    float _2553 = (_2533 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2553 * (_2534 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2516)));
    SV_Target.y = _2553 * (_2534 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2518)));
    SV_Target.z = _2553 * (_2534 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2520)));
    SV_Target.w = cbInstanceData._m0[_2408].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2371) * _2407) * _2539) * _2553;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2372) * _2407) * _2540) * _2553;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2373) * _2407) * _2541) * _2553;
    SV_Target_1.w = cbInstanceData._m0[_2408].w;
}


