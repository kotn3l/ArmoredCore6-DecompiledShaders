#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _452;
float _3460;
float _3461;
float _3462;
float _3463;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _365 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _387 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _399 = cbMtdParam._m0[28u].z + _280;
    float _400 = cbMtdParam._m0[28u].w + _281;
    float _401 = cbMtdParam._m0[29u].x + _282;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_380 * _210, _380 * _211, _380 * _212));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_387 * _224, _387 * _225, _387 * _226));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[25u].y * _415) * _421) + (((_365.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _428 = ((cbMtdParam._m0[25u].z * _416) * _421) + (((_365.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _431 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _450;
    float _453;
    float _455;
    if (_427 > 0.0)
    {
        float _436 = (1.0 - _431) / _427;
        _450 = _436;
        _453 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_436 * _422)) * 0.16666667163372039794921875;
        _455 = (fract((_436 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_427 < 0.0)
        {
            float _451 = ((-0.0) - _431) / _427;
            frontier_phi_3_2_ladder = _451;
            frontier_phi_3_2_ladder_1 = (fract((_451 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_451 * _422) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _452;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _450 = frontier_phi_3_2_ladder;
        _453 = frontier_phi_3_2_ladder_2;
        _455 = frontier_phi_3_2_ladder_1;
    }
    float _481;
    float _483;
    float _485;
    if (_428 > 0.0)
    {
        float _468 = (1.0 - _432) / _428;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_468 < _450)
        {
            frontier_phi_8_5_ladder = (fract(_468 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_468 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _468;
        }
        else
        {
            frontier_phi_8_5_ladder = _455;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = _450;
        }
        _481 = frontier_phi_8_5_ladder_2;
        _483 = frontier_phi_8_5_ladder_1;
        _485 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_428 < 0.0)
        {
            float _482 = ((-0.0) - _432) / _428;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_482 < _450)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_482 * _422) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_482 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _482;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _455;
                frontier_phi_8_6_ladder_9_ladder_1 = _453;
                frontier_phi_8_6_ladder_9_ladder_2 = _450;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _455;
            frontier_phi_8_6_ladder_1 = _453;
            frontier_phi_8_6_ladder_2 = _450;
        }
        _481 = frontier_phi_8_6_ladder_2;
        _483 = frontier_phi_8_6_ladder_1;
        _485 = frontier_phi_8_6_ladder;
    }
    float _489 = (_422 > 0.0) ? (cbMtdParam._m0[20u].z / _422) : 5000.0;
    float _502;
    float _503;
    if (_489 < _481)
    {
        _502 = ((_431 + cbMtdParam._m0[22u].x) + (_489 * _427)) * 0.16666667163372039794921875;
        _503 = (((_489 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _502 = _483;
        _503 = _485;
    }
    vec4 _505 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_502, _503));
    float _510 = _505.x * _299;
    float _511 = _505.y * _299;
    float _512 = _505.z * _299;
    vec4 _525 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _525.z;
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3472 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))));
    float _551 = (cbMtdParam._m0[19u].y * _510) * cbMtdParam._m0[16u].x;
    float _553 = (cbMtdParam._m0[19u].y * _511) * cbMtdParam._m0[16u].y;
    float _555 = (cbMtdParam._m0[19u].y * _512) * cbMtdParam._m0[16u].z;
    vec4 _582 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _587 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _593 = ((_582.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _595 = (-0.0) - (cbMtdParam._m0[21u].x * ((_582.x * 0.5) + (-0.25)));
    float _596 = fract(_587);
    float _598 = fract(_587 + 0.5);
    vec4 _625 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_596 * _595) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_593 * _596) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _627 = _625.x;
    float _633 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_598 * _595) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_593 * _598) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _627) * abs((_596 * 2.0) + (-1.0))) + _627;
    float _644 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _648 = fract(abs(_644));
    float _655 = sin(cbMtdParam._m0[21u].z);
    float _656 = cos(cbMtdParam._m0[21u].z);
    float _657 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _658 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _683 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_658, (-0.0) - _655, _656 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_658, _656, _657 * _655) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_644 >= ((-0.0) - _644)) ? _648 : ((-0.0) - _648)) * cbMtdParam._m0[18u].z) - _633)) + cbMtdParam._m0[18u].w;
    float _684 = ceil(_683);
    float _3483 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _705 = ((((cbMtdParam._m0[21u].w * _510) * cbMtdParam._m0[15u].x) - _551) * _685) + _551;
    float _706 = ((((cbMtdParam._m0[21u].w * _511) * cbMtdParam._m0[15u].y) - _553) * _685) + _553;
    float _707 = ((((cbMtdParam._m0[21u].w * _512) * cbMtdParam._m0[15u].z) - _555) * _685) + _555;
    float _711 = abs(cbMtdParam._m0[20u].w * _683);
    float _715 = (((_711 * cbMtdParam._m0[18u].y) - _633) * _711) + _633;
    float _3494 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    vec4 _728 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _743 = (cbMtdParam._m0[14u].x * _728.x) * cbMtdParam._m0[19u].x;
    float _744 = (cbMtdParam._m0[14u].y * _728.y) * cbMtdParam._m0[19u].x;
    float _745 = (cbMtdParam._m0[14u].z * _728.z) * cbMtdParam._m0[19u].x;
    float _752 = exp2(log2(_716) * cbMtdParam._m0[20u].x);
    float _774 = fma(_539, _217, fma(_533, _224, _532 * _210));
    float _777 = fma(_539, _218, fma(_533, _225, _532 * _211));
    float _780 = fma(_539, _219, fma(_533, _226, _532 * _212));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3505 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _788 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3527 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3538 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _812 = _280 * _811;
    float _813 = _281 * _811;
    float _814 = _282 * _811;
    vec4 _819 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _821 = _819.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3549 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3560 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) - _989)) + _989) < ((_821 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _861 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _864 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _877 = uint(roundEven(NORMAL.w)) * 13u;
    uint _878 = _877 + 9u;
    uint _879 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_879].z;
    float _3571 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _902 = _899.x * TEXCOORD_4;
    float _903 = dot(vec3(_785, _786, _787), vec3(_812, _813, _814));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _785) - _812;
    float _911 = (_906 * _786) - _813;
    float _912 = (_906 * _787) - _814;
    float _916 = abs(dot(vec3(_812, _813, _814), vec3(_785, _786, _787)));
    float _3604 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_788);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1031 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1035 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1059 = _963 + _785;
        float _1060 = _967 + _786;
        float _1061 = _971 + _787;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1027;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1031;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1035;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_785, _786, _787), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3652 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_785, _786, _787), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3685 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_785, _786, _787), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3718 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1302 = _1131;
        _1303 = _1130;
        _1304 = _1142;
        _1305 = _1141;
        _1306 = _1140;
        _1307 = _1152;
        _1308 = _1151;
        _1309 = _1150;
        _1310 = _1165;
        _1311 = _1164;
        _1312 = _1163;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _452;
        _1302 = _452;
        _1303 = _452;
        _1304 = _452;
        _1305 = _452;
        _1306 = _452;
        _1307 = _452;
        _1308 = _452;
        _1309 = _452;
        _1310 = _452;
        _1311 = _452;
        _1312 = _452;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1347 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1351 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1374 = _963 + _785;
        float _1375 = _967 + _786;
        float _1376 = _971 + _787;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_785, _786, _787), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3781 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_785, _786, _787), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _3814 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_785, _786, _787), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _3847 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _452;
        _1613 = _452;
        _1614 = _452;
        _1615 = _452;
        _1616 = _452;
        _1617 = _452;
        _1618 = _452;
        _1619 = _452;
        _1620 = _452;
        _1621 = _452;
        _1622 = _452;
        _1623 = _452;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1314)) + _1314;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _910 * 0.5;
    float _1681 = _911 * 0.5;
    float _1682 = _912 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1810 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1813 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1841 = frontier_phi_29_27_ladder;
        }
        float _2186;
        if (_1810 > 0.0)
        {
            _2186 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2186 = frontier_phi_38_34_ladder;
        }
        float _2528;
        if (_1813 > 0.0)
        {
            _2528 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2528 = frontier_phi_52_45_ladder;
        }
        float _2530 = isnan(_2186) ? _1841 : (isnan(_1841) ? _2186 : min(_1841, _2186));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1807) + _1796;
        float _2536 = (_2531 * _1810) + _1800;
        float _2537 = (_2531 * _1813) + _1804;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2537, cbModelParam._m0[9u].z, fma(_2536, cbModelParam._m0[9u].y, _2535 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2537, cbModelParam._m0[10u].z, fma(_2536, cbModelParam._m0[10u].y, _2535 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2537, cbModelParam._m0[11u].z, fma(_2536, cbModelParam._m0[11u].y, _2535 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_28_52_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_28_52_ladder_2;
        _1831 = frontier_phi_28_52_ladder_1;
        _1833 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1904 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1907 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2191;
        if (_1901 > 0.0)
        {
            _2191 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2191 = frontier_phi_40_36_ladder;
        }
        float _2554;
        if (_1904 > 0.0)
        {
            _2554 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2554 = frontier_phi_54_47_ladder;
        }
        float _2744;
        if (_1907 > 0.0)
        {
            _2744 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2744 = frontier_phi_72_65_ladder;
        }
        float _2746 = isnan(_2554) ? _2191 : (isnan(_2191) ? _2554 : min(_2191, _2554));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1901) + _1890;
        float _2752 = (_2747 * _1904) + _1894;
        float _2753 = (_2747 * _1907) + _1898;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_37_72_ladder = _2995.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2995.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2995.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_37_72_ladder_2;
        _1928 = frontier_phi_37_72_ladder_1;
        _1930 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1838);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1942 = ((((1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_931 * _918)) * _902;
    float _1943 = _1942 * ((cbModelParam._m0[1u].w * (_1926 - _1829)) + _1829);
    float _1944 = _1942 * ((cbModelParam._m0[1u].w * (_1928 - _1831)) + _1831);
    float _1945 = _1942 * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_877 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1972 = _902 + (-1.0);
    float _1975 = (cbLight._m0[_1967].x * _1972) + 1.0;
    float _1976 = (cbLight._m0[_1967].y * _1972) + 1.0;
    uint _1977 = _1966 + 5u;
    float _1983 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1987 = _1966 + 4u;
    float _1993 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1997 = _1966 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_785, _786, _787));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_785, _786, _787));
    float _3983 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _3994 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1977].x * _1983) * _2018) + ((cbLight._m0[_1987].x * _1993) * _2016);
    float _2026 = ((_1983 * cbLight._m0[_1977].y) * _2018) + ((_1993 * cbLight._m0[_1987].y) * _2016);
    float _2027 = ((_1983 * cbLight._m0[_1977].z) * _2018) + ((_1993 * cbLight._m0[_1987].z) * _2016);
    uint _2029 = _1966 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _788) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1966].x + _812;
    float _2045 = cbLight._m0[_1966].y + _813;
    float _2046 = cbLight._m0[_1966].z + _814;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_1966].xyz));
    float _4005 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2058 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _2059 = dot(vec3(_785, _786, _787), vec3(_2051, _2052, _2053));
    float _4027 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2051, _2052, _2053));
    float _4038 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2043;
    float _2094 = (0.5 / (((_2058 * ((_2057 * _2083) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2083) + _2043) * _2057))) * _2057;
    float _4049 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2107 = _1966 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _788) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1997].x + _812;
    float _2121 = cbLight._m0[_1997].y + _813;
    float _2122 = cbLight._m0[_1997].z + _814;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_1997].xyz));
    float _4060 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2134 = dot(vec3(_785, _786, _787), vec3(_2127, _2128, _2129));
    float _4071 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2127, _2128, _2129));
    float _4082 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2156 = 1.0 - _2119;
    float _2166 = (0.5 / (((_2058 * ((_2133 * _2156) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2156) + _2119) * _2133))) * _2133;
    float _4093 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2178 = (((_2155 * cbLight._m0[_2107].x) * _2168) * _1983) + (((_2082 * cbLight._m0[_2029].x) * _2096) * _1993);
    float _2179 = (((_2155 * cbLight._m0[_2107].y) * _2168) * _1983) + (((_2082 * cbLight._m0[_2029].y) * _2096) * _1993);
    float _2180 = (((_2155 * cbLight._m0[_2107].z) * _2168) * _1983) + (((_2082 * cbLight._m0[_2029].z) * _2096) * _1993);
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_1964.y == 0u)
    {
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2235;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2235;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2235;
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.x;
        uint _2262 = uint((float(_2250.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2251))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2251)));
        float _2272 = (log2(_2238 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2273 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        uint _2276 = uint(isnan(14.0) ? _2273 : (isnan(_2273) ? 14.0 : min(_2273, 14.0)));
        uvec4 _2281 = texelFetch(g_lightClusterGridBuffer, int(((_2276 << 2u) + (_2262 << 6u)) >> 2u));
        uint _2282 = _2281.x;
        uint _2283 = _2250.z;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((((1u << ((_2283 >> 4u) & 15u)) + 4294967295u) & _2282) == 0u) || ((_2283 & 240u) == 0u))
        {
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
        }
        else
        {
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            uint _2597 = 0u;
            uint _2606;
            bool _2607;
            for (;;)
            {
                _2606 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                _2607 = _2606 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2607)
                {
                    frontier_phi_67_pred = _2594;
                    frontier_phi_67_pred_1 = _2593;
                    frontier_phi_67_pred_2 = _2592;
                    frontier_phi_67_pred_3 = _2591;
                    frontier_phi_67_pred_4 = _2595;
                    frontier_phi_67_pred_5 = _2596;
                }
                else
                {
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    uint _2793;
                    _2787 = _2591;
                    _2788 = _2592;
                    _2789 = _2593;
                    _2790 = _2594;
                    _2791 = _2595;
                    _2792 = _2596;
                    _2793 = _2606;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2797 = uint(findLSB(_2793)) + (_2597 << 5u);
                        uint _2794 = (_2793 + 4294967295u) & _2793;
                        uint _2799 = _2797 * 48u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2819 = (_2797 * 48u) + 4u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2838 = (_2797 * 48u) + 8u;
                        vec3 _2849 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x));
                        float _2853 = _2813.x - _2236;
                        float _2854 = _2813.y - _2237;
                        float _2855 = _2813.z - _2238;
                        float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                        float _2859 = inversesqrt(_2856);
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2863 = dot(vec3(_858, _861, _864), vec3(_2860, _2861, _2862));
                        float _2868 = 1.0 - (_2856 * _2813.w);
                        float _4114 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2870 = sqrt(_2856) * _2832.w;
                        float _2873 = 1.39999997615814208984375 / (_2870 + 1.39999997615814208984375);
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2863) + _2874;
                        float _2880 = _2870 * _2870;
                        float _2884 = ((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2869) / ((_2880 * 0.699999988079071044921875) + 1.0);
                        float _2888 = (-0.0) - _2236;
                        float _2889 = (-0.0) - _2237;
                        float _2890 = (-0.0) - _2238;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2880 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _918;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_858, _861, _864), vec3(_2895, _2896, _2897));
                        float _4130 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2930 = dot(vec3(_858, _861, _864), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4141 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2873 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2863) + _2939;
                        float _4152 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4163 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_2937 * _2937) * ((_2880 * 2.1991131305694580078125) + 3.141590118408203125))) * _2869;
                        _2691 = (_2884 * _2832.x) + _2790;
                        _2692 = (_2884 * _2832.y) + _2791;
                        _2693 = (_2884 * _2832.z) + _2792;
                        _2688 = (_2965 * _2849.x) + _2787;
                        _2689 = (_2965 * _2849.y) + _2788;
                        _2690 = (_2965 * _2849.z) + _2789;
                        if (_2794 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2787 = _2688;
                            _2788 = _2689;
                            _2789 = _2690;
                            _2790 = _2691;
                            _2791 = _2692;
                            _2792 = _2693;
                            _2793 = _2794;
                        }
                    }
                    frontier_phi_67_pred = _2691;
                    frontier_phi_67_pred_1 = _2690;
                    frontier_phi_67_pred_2 = _2689;
                    frontier_phi_67_pred_3 = _2688;
                    frontier_phi_67_pred_4 = _2692;
                    frontier_phi_67_pred_5 = _2693;
                }
                _2406 = frontier_phi_67_pred;
                _2404 = frontier_phi_67_pred_1;
                _2402 = frontier_phi_67_pred_2;
                _2400 = frontier_phi_67_pred_3;
                _2408 = frontier_phi_67_pred_4;
                _2410 = frontier_phi_67_pred_5;
                uint _2598 = _2597 + 1u;
                if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2591 = _2400;
                    _2592 = _2402;
                    _2593 = _2404;
                    _2594 = _2406;
                    _2595 = _2408;
                    _2596 = _2410;
                    _2597 = _2598;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
        }
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.z;
        uint _2416 = (_2414 >> 8u) & 15u;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        if (((4294967295u << _2416) & _2282) == 0u)
        {
            _2559 = _2399;
            _2561 = _2401;
            _2563 = _2403;
            _2565 = _2405;
            _2567 = _2407;
            _2569 = _2409;
        }
        else
        {
            float _2584 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
            float _2585 = _2584 * _2236;
            float _2586 = _2584 * _2237;
            float _2587 = _2584 * _2238;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2416 < ((_2414 >> 12u) & 15u))
            {
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2770 = _2399;
                float _2771 = _2401;
                float _2772 = _2403;
                float _2773 = _2405;
                float _2774 = _2407;
                float _2775 = _2409;
                uint _2776 = _2416;
                uint _2785;
                bool _2786;
                for (;;)
                {
                    _2785 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                    _2786 = _2785 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2786)
                    {
                        frontier_phi_81_pred = _2773;
                        frontier_phi_81_pred_1 = _2772;
                        frontier_phi_81_pred_2 = _2771;
                        frontier_phi_81_pred_3 = _2770;
                        frontier_phi_81_pred_4 = _2775;
                        frontier_phi_81_pred_5 = _2774;
                    }
                    else
                    {
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3013 = _2770;
                        float _3014 = _2771;
                        float _3015 = _2772;
                        float _3016 = _2773;
                        float _3017 = _2774;
                        float _3018 = _2775;
                        uint _3019 = _2785;
                        uint _3020;
                        vec4 _3045;
                        float _3046;
                        vec4 _3061;
                        vec3 _3073;
                        vec4 _3088;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3030 = ((_2776 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3019));
                            _3020 = (_3019 + 4294967295u) & _3019;
                            uint _3032 = _3030 * 40u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.w;
                            uint _3048 = (_3030 * 40u) + 4u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3030 * 40u) + 8u;
                            _3073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x));
                            uint _3075 = (_3030 * 40u) + 16u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3030 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3030 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3030 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2238, _3137.z, fma(_2237, _3137.y, _3137.x * _2236)) + _3137.w;
                            _3150 = !((fma(_2238, _3118.z, fma(_2237, _3118.y, _3118.x * _2236)) + _3118.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3045.x - _2236;
                                float _3178 = _3045.y - _2237;
                                float _3179 = _3045.z - _2238;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3046 * _3046));
                                float _4174 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3195 = sqrt(_3180) * _3061.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_858, _861, _864))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2238, _3088.z, fma(_2237, _3088.y, _3088.x * _2236)) + _3088.w) / _3149;
                                float _3209 = (fma(_2238, _3103.z, fma(_2237, _3103.y, _3103.x * _2236)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4190 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _918;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2585;
                                float _3239 = _3185 - _2586;
                                float _3240 = _3186 - _2587;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2585, (-0.0) - _2586, (-0.0) - _2587));
                                float _4201 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3252 = dot(vec3(_858, _861, _864), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4212 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_858, _861, _864), vec3(_3184, _3185, _3186))) + _3261;
                                float _4223 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4234 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3215 * _3061.x;
                                frontier_phi_87_pred_1 = _3289 * _3073.z;
                                frontier_phi_87_pred_2 = _3289 * _3073.y;
                                frontier_phi_87_pred_3 = _3289 * _3073.x;
                                frontier_phi_87_pred_4 = _3215 * _3061.z;
                                frontier_phi_87_pred_5 = _3215 * _3061.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3296 = frontier_phi_87_pred;
                            _3295 = frontier_phi_87_pred_1;
                            _3294 = frontier_phi_87_pred_2;
                            _3293 = frontier_phi_87_pred_3;
                            _3298 = frontier_phi_87_pred_4;
                            _3297 = frontier_phi_87_pred_5;
                            _3003 = _3296 + _3016;
                            _3004 = _3297 + _3017;
                            _3005 = _3298 + _3018;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _3002 = _3295 + _3015;
                            if (_3020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3020;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3003;
                        frontier_phi_81_pred_1 = _3002;
                        frontier_phi_81_pred_2 = _3001;
                        frontier_phi_81_pred_3 = _3000;
                        frontier_phi_81_pred_4 = _3005;
                        frontier_phi_81_pred_5 = _3004;
                    }
                    _2566 = frontier_phi_81_pred;
                    _2564 = frontier_phi_81_pred_1;
                    _2562 = frontier_phi_81_pred_2;
                    _2560 = frontier_phi_81_pred_3;
                    _2570 = frontier_phi_81_pred_4;
                    _2568 = frontier_phi_81_pred_5;
                    uint _2777 = _2776 + 1u;
                    if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2770 = _2560;
                        _2771 = _2562;
                        _2772 = _2564;
                        _2773 = _2566;
                        _2774 = _2568;
                        _2775 = _2570;
                        _2776 = _2777;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2570;
                frontier_phi_56_57_ladder_1 = _2568;
                frontier_phi_56_57_ladder_2 = _2566;
                frontier_phi_56_57_ladder_3 = _2562;
                frontier_phi_56_57_ladder_4 = _2560;
                frontier_phi_56_57_ladder_5 = _2564;
            }
            else
            {
                frontier_phi_56_57_ladder = _2409;
                frontier_phi_56_57_ladder_1 = _2407;
                frontier_phi_56_57_ladder_2 = _2405;
                frontier_phi_56_57_ladder_3 = _2401;
                frontier_phi_56_57_ladder_4 = _2399;
                frontier_phi_56_57_ladder_5 = _2403;
            }
            _2559 = frontier_phi_56_57_ladder_4;
            _2561 = frontier_phi_56_57_ladder_3;
            _2563 = frontier_phi_56_57_ladder_5;
            _2565 = frontier_phi_56_57_ladder_2;
            _2567 = frontier_phi_56_57_ladder_1;
            _2569 = frontier_phi_56_57_ladder;
        }
        float _2574 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2295 = (_2574 * _2565) + _2025;
        _2297 = (_2574 * _2567) + _2026;
        _2299 = (_2574 * _2569) + _2027;
        _2301 = ((_2559 * 0.039999999105930328369140625) * _2574) + _2178;
        _2303 = ((_2561 * 0.039999999105930328369140625) * _2574) + _2179;
        _2305 = ((_2563 * 0.039999999105930328369140625) * _2574) + _2180;
    }
    else
    {
        _2295 = _2025;
        _2297 = _2026;
        _2299 = _2027;
        _2301 = _2178;
        _2303 = _2179;
        _2305 = _2180;
    }
    uint _2311 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _2317 = (cbSceneParam._m0[72u].y * ((_752 * ((_743 - _705) - (_743 * _716))) + _705)) * cbInstanceData._m0[_2311].x;
    float _2318 = (cbSceneParam._m0[72u].y * ((_752 * ((_744 - _706) - (_744 * _716))) + _706)) * cbInstanceData._m0[_2311].y;
    float _2319 = (((_752 * ((_745 - _707) - (_745 * _716))) + _707) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2311].z;
    float _4250 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4261 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4272 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2336 = (((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2295 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _902))) + ((_2301 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + _2317;
    float _2338 = (_2318 + ((_2303 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2297 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _902)));
    float _2340 = (_2319 + ((_2305 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2299 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _902)));
    float _2341 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2342 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2349 = cbMtdParam._m0[2u].x * _2317;
    float _2350 = cbMtdParam._m0[2u].y * _2318;
    float _2351 = cbMtdParam._m0[2u].z * _2319;
    float _4298 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2353 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    uint _2354 = _877 + 6u;
    float _2362 = _838 / cbSceneParam._m0[86u].x;
    float _2363 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2424 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2425 = _2424 / _807;
        float _2436 = _2425 * _280;
        float _2437 = _281 * _2425;
        float _2438 = (-0.0) - _2437;
        float _2439 = _2425 * _282;
        float _2441 = (cbSceneParam._m0[77u].w * _2438) / _2424;
        float _2442 = _2441 + cbSceneParam._m0[79u].w;
        float _2443 = cbSceneParam._m0[79u].w - _2437;
        float _2449 = sqrt(((_2436 * _2436) + (_2437 * _2437)) + (_2439 * _2439));
        float _2452 = (1.0 - (cbSceneParam._m0[77u].w / _2424)) * _2449;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2701;
        if (abs((_2438 - _2441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2701 = ((((_2442 > 0.0) ? exp2(_2458 * _2442) : (2.0 - exp2(_2460 * _2442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2452;
        }
        else
        {
            float _2620 = 1.0 / cbSceneParam._m0[80u].x;
            float _2621 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : max(_2442, _2443));
            float _2622 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : min(_2442, _2443));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            _2701 = ((abs(_2449 / _2438) * cbSceneParam._m0[80u].y) * ((((_2631 - _2632) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))))) * _2620)) - ((exp2(_2460 * _2631) - exp2(_2460 * _2632)) * _2620))) + (_2452 * cbSceneParam._m0[80u].z);
        }
        vec4 _2703 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2712 = exp2((_2701 * (-1.44269502162933349609375)) * (1.0 - _2703.w));
        float _2713 = log2(_2712);
        float _2729 = log2(_2382);
        _2462 = (exp2(_2729 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].x)) * _2703.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2464 = (exp2(_2729 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].y)) * _2703.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2466 = (exp2(_2729 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].z)) * _2703.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2468 = _2712 * _2382;
    }
    else
    {
        _2462 = _2379;
        _2464 = _2380;
        _2466 = _2381;
        _2468 = _2382;
    }
    bool _2739;
    vec4 _2477;
    vec4 _2499;
    float _2501;
    float _2505;
    float _2506;
    float _2507;
    float _2510;
    float _2513;
    float _2516;
    float _2517;
    bool _2527;
    for (;;)
    {
        _2477 = cbMatDynParam._m0[0u];
        float _2479 = roundEven(_2477.y);
        bool _2480 = _2479 == 3.0;
        float _2481 = log2(_2468);
        float _2485 = exp2(_2481 * cbSceneParam._m0[78u].x);
        float _2486 = exp2(_2481 * cbSceneParam._m0[78u].y);
        float _2487 = exp2(_2481 * cbSceneParam._m0[78u].z);
        float _2488 = _2485 * _2341;
        float _2489 = _2486 * _2342;
        float _2490 = _2487 * _2343;
        float _2497 = _821 + (-0.5);
        _2499 = cbMtdParam._m0[1u];
        _2501 = _2499.y * _2497;
        float _2504 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2505 = _2504 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2462)));
        _2506 = _2504 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2464)));
        _2507 = _2504 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2466)));
        _2510 = ((_2349 * _2353) * _2485) * _2504;
        _2513 = ((_2350 * _2353) * _2486) * _2504;
        _2516 = ((_2351 * _2353) * _2487) * _2504;
        _2517 = _2497 * 0.999000012874603271484375;
        _2527 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2527)
        {
            if ((cbInstanceData._m0[_877 + 7u].x + _2517) < 0.5)
            {
                _2739 = true;
                break;
            }
        }
        uint _2655 = _878 + uint(_2477.w);
        if ((cbInstanceData._m0[_2655].w < 1.0) && ((cbInstanceData._m0[_2655].w + _2517) < 0.5))
        {
            _2739 = true;
            break;
        }
        if ((_2501 + 1.0) < _2499.x)
        {
            _2739 = true;
            break;
        }
        _2739 = false;
        break;
    }
    float _2970;
    if (_2739)
    {
        discard_state = true;
        _2970 = 0.0;
    }
    else
    {
        _2970 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2505;
    SV_Target.y = _2506;
    SV_Target.z = _2507;
    SV_Target.w = _2970;
    SV_Target_1.x = _2510;
    SV_Target_1.y = _2513;
    SV_Target_1.z = _2516;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


