#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
uint _2376;
uint _2377;
uint _2378;
uint _2621;
uint _2622;
uint _2623;
float _2894;
float _2895;
float _2896;
float _2897;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _305 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _343 = cbMtdParam._m0[27u].w + _284;
    float _344 = cbMtdParam._m0[28u].x + _285;
    float _345 = cbMtdParam._m0[28u].y + _286;
    float _359 = (-0.0) - dot(vec3(_343, _344, _345), vec3(_213 * _205, _213 * _206, _213 * _207));
    float _360 = (-0.0) - dot(vec3(_343, _344, _345), vec3(_227 * TANGENT.x, _227 * TANGENT.y, _227 * TANGENT.z));
    float _361 = (-0.0) - dot(vec3(_343, _344, _345), vec3((-0.0) - (_220 * NORMAL.x), (-0.0) - (_220 * NORMAL.y), (-0.0) - (_220 * NORMAL.z)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _368 = _365 * _361;
    float _369 = (_365 * _359) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _370 = (_365 * _360) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = _369 * cbMtdParam._m0[24u].x;
    float _372 = _370 * cbMtdParam._m0[23u].w;
    float _373 = fract(TEXCOORD.x);
    float _374 = fract(TEXCOORD.y);
    float _380;
    if (_371 > 0.0)
    {
        _380 = (1.0 - _373) / _371;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_371 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _373) / _371;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _380 = frontier_phi_3_2_ladder;
    }
    float _388;
    if (_372 > 0.0)
    {
        _388 = (1.0 - _374) / _372;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_372 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _374) / _372;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _388 = frontier_phi_7_6_ladder;
    }
    bool _390 = _368 > 0.0;
    float _392 = _390 ? (cbMtdParam._m0[17u].x / _368) : 5000.0;
    float _393 = isnan(_388) ? _380 : (isnan(_380) ? _388 : min(_380, _388));
    float _394 = isnan(_392) ? _393 : (isnan(_393) ? _392 : min(_393, _392));
    float _398 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _399 = _373 + (-0.5);
    float _402 = _374 + (-0.5);
    float _405 = ((_394 * _368) + _398) / _398;
    vec4 _430 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_399 + (_394 * _371)) / _405) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_402 + (_394 * _372)) / _405) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _440 = cbMtdParam._m0[9u].x * _430.x;
    float _441 = cbMtdParam._m0[9u].y * _430.y;
    float _442 = cbMtdParam._m0[9u].z * _430.z;
    float _460 = _369 * cbMtdParam._m0[26u].z;
    float _461 = _370 * cbMtdParam._m0[26u].y;
    bool _462 = _460 > 0.0;
    float _467;
    if (_462)
    {
        _467 = (1.0 - _373) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _373) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _467 = frontier_phi_11_10_ladder;
    }
    bool _469 = _461 > 0.0;
    float _474;
    if (_469)
    {
        _474 = (1.0 - _374) / _461;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_461 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _374) / _461;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _474 = frontier_phi_15_14_ladder;
    }
    float _477 = _390 ? (cbMtdParam._m0[19u].z / _368) : 5000.0;
    float _478 = isnan(_474) ? _467 : (isnan(_467) ? _474 : min(_467, _474));
    float _479 = isnan(_477) ? _478 : (isnan(_478) ? _477 : min(_478, _477));
    float _483 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _487 = ((_479 * _368) + _483) / _483;
    float _492 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _494 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _510 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_399 + (_479 * _460)) / _487) + 0.5) + _492) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_402 + (_479 * _461)) / _487) + 0.5) + _494) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _522;
    if (_462)
    {
        _522 = (1.0 - _373) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _373) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_469)
    {
        _528 = (1.0 - _374) / _461;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_461 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _374) / _461;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_477) ? _530 : (isnan(_530) ? _477 : min(_530, _477));
    float _538 = ((_531 * _368) + _483) / _483;
    vec4 _558 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_399 + (_531 * _460)) / _538) + 0.5) + _492) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_402 + (_531 * _461)) / _538) + 0.5) + _494) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _560 = _558.x;
    float _567 = (_560 * ((_510.x * cbMtdParam._m0[10u].x) - _440)) + _440;
    float _568 = (_560 * ((_510.y * cbMtdParam._m0[10u].y) - _441)) + _441;
    float _569 = (_560 * ((_510.z * cbMtdParam._m0[10u].z) - _442)) + _442;
    float _583 = _369 * cbMtdParam._m0[27u].x;
    float _584 = _370 * cbMtdParam._m0[26u].w;
    bool _585 = _583 > 0.0;
    float _590;
    if (_585)
    {
        _590 = (1.0 - _373) / _583;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _373) / _583;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _590 = frontier_phi_27_26_ladder;
    }
    bool _592 = _584 > 0.0;
    float _597;
    if (_592)
    {
        _597 = (1.0 - _374) / _584;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_584 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _374) / _584;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _597 = frontier_phi_31_30_ladder;
    }
    float _600 = _390 ? (cbMtdParam._m0[23u].x / _368) : 5000.0;
    float _601 = isnan(_597) ? _590 : (isnan(_590) ? _597 : min(_590, _597));
    float _602 = isnan(_600) ? _601 : (isnan(_601) ? _600 : min(_601, _600));
    float _606 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _610 = ((_602 * _368) + _606) / _606;
    float _615 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _617 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _633 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_399 + (_602 * _583)) / _610) + 0.5) + _615) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_402 + (_602 * _584)) / _610) + 0.5) + _617) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _645;
    if (_585)
    {
        _645 = (1.0 - _373) / _583;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _373) / _583;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _645 = frontier_phi_35_34_ladder;
    }
    float _651;
    if (_592)
    {
        _651 = (1.0 - _374) / _584;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_584 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _374) / _584;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _651 = frontier_phi_39_38_ladder;
    }
    float _653 = isnan(_651) ? _645 : (isnan(_645) ? _651 : min(_645, _651));
    float _654 = isnan(_600) ? _653 : (isnan(_653) ? _600 : min(_653, _600));
    float _661 = ((_654 * _368) + _606) / _606;
    vec4 _682 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_399 + (_654 * _583)) / _661) + 0.5) + _615) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_402 + (_654 * _584)) / _661) + 0.5) + _617) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _684 = _682.x;
    float _691 = (_684 * ((_633.x * cbMtdParam._m0[13u].x) - _567)) + _567;
    float _692 = (_684 * ((_633.y * cbMtdParam._m0[13u].y) - _568)) + _568;
    float _693 = (_684 * ((_633.z * cbMtdParam._m0[13u].z) - _569)) + _569;
    float _702 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _691;
    float _704 = (_692 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _706 = (_693 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _730 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _735 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _741 = ((_730.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _743 = (-0.0) - (cbMtdParam._m0[21u].x * ((_730.x * 0.5) + (-0.25)));
    float _744 = fract(_735);
    float _746 = fract(_735 + 0.5);
    vec4 _773 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_744 * _743) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_741 * _744) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _775 = _773.x;
    float _781 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_746 * _743) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_741 * _746) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _775) * abs((_744 * 2.0) + (-1.0))) + _775;
    float _787 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _791 = fract(abs(_787));
    float _801 = sin(cbMtdParam._m0[21u].z);
    float _802 = cos(cbMtdParam._m0[21u].z);
    float _803 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _804 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _829 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_804, (-0.0) - _801, _802 * _803) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_804, _802, _803 * _801) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_787 >= ((-0.0) - _787)) ? _791 : ((-0.0) - _791)) * cbMtdParam._m0[18u].z) - _781)) + cbMtdParam._m0[18u].w;
    float _830 = ceil(_829);
    float _2956 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
    float _851 = ((((cbMtdParam._m0[21u].w * _691) * cbMtdParam._m0[15u].x) - _702) * _831) + _702;
    float _852 = ((((cbMtdParam._m0[21u].w * _692) * cbMtdParam._m0[15u].y) - _704) * _831) + _704;
    float _853 = ((((cbMtdParam._m0[21u].w * _693) * cbMtdParam._m0[15u].z) - _706) * _831) + _706;
    float _857 = abs(cbMtdParam._m0[20u].w * _829);
    float _861 = (((_857 * cbMtdParam._m0[18u].y) - _781) * _857) + _781;
    float _2967 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _862 = isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0));
    vec4 _874 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _889 = (cbMtdParam._m0[14u].x * _874.x) * cbMtdParam._m0[19u].x;
    float _890 = (cbMtdParam._m0[14u].y * _874.y) * cbMtdParam._m0[19u].x;
    float _891 = (cbMtdParam._m0[14u].z * _874.z) * cbMtdParam._m0[19u].x;
    float _898 = exp2(log2(_862) * cbMtdParam._m0[20u].x);
    float _933 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _938 = _284 * _937;
    float _939 = _285 * _937;
    float _940 = _286 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1017 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _1023 = (cbMatDynParam._m0[5u].x * _1017) + cbMatDynParam._m0[5u].y;
        float _2978 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
        float _1028 = (cbMatDynParam._m0[5u].z * _1017) + cbMatDynParam._m0[5u].w;
        float _2989 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0))) - _1024)) + _1024) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_960 * cbSceneParam._m0[86u].x, _961 * cbSceneParam._m0[86u].y));
    float _973 = _970.x * TEXCOORD_4;
    float _974 = (-0.0) - _938;
    float _975 = (-0.0) - _939;
    float _976 = (-0.0) - _940;
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = (cbModelParam._m0[37u].x * ((((fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1091 = (cbModelParam._m0[37u].y * ((((fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1092 = (((((fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        _1166 = _1129 * (_1095.z + (-0.5));
        _1168 = _1129 * (_1095.y + (-0.5));
        _1169 = _1129 * (_1095.x + (-0.5));
        _1170 = _1139 * (_1102.z + (-0.5));
        _1171 = _1139 * (_1102.y + (-0.5));
        _1172 = _1139 * (_1102.x + (-0.5));
        _1173 = _1149 * (_1109.z + (-0.5));
        _1174 = _1149 * (_1109.y + (-0.5));
        _1175 = _1149 * (_1109.x + (-0.5));
        _1176 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        _1177 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        _1178 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1234 = (cbModelParam._m0[38u].x * ((((fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1235 = (cbModelParam._m0[38u].y * ((((fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1236 = (((((fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        _1308 = _1271 * (_1238.z + (-0.5));
        _1309 = _1271 * (_1238.y + (-0.5));
        _1310 = _1271 * (_1238.x + (-0.5));
        _1311 = _1281 * (_1245.z + (-0.5));
        _1312 = _1281 * (_1245.y + (-0.5));
        _1313 = _1281 * (_1245.x + (-0.5));
        _1314 = _1291 * (_1252.z + (-0.5));
        _1315 = _1291 * (_1252.y + (-0.5));
        _1316 = _1291 * (_1252.x + (-0.5));
        _1317 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        _1318 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        _1319 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    }
    else
    {
        _1308 = _1167;
        _1309 = _1167;
        _1310 = _1167;
        _1311 = _1167;
        _1312 = _1167;
        _1313 = _1167;
        _1314 = _1167;
        _1315 = _1167;
        _1316 = _1167;
        _1317 = _1167;
        _1318 = _1167;
        _1319 = _1167;
    }
    float _1334 = _938 * (-0.5);
    float _1335 = _939 * (-0.5);
    float _1336 = _940 * (-0.5);
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1378;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1389;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1380 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1393 = (_1389 * cbModelParam._m0[1u].x) + (_1378 * (1.0 - cbModelParam._m0[1u].x));
    float _1399 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1446 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1450 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1454 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1457 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1460 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1463 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1489;
        if (_1457 > 0.0)
        {
            _1489 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1489 = frontier_phi_57_55_ladder;
        }
        float _1787;
        if (_1460 > 0.0)
        {
            _1787 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1787 = frontier_phi_66_62_ladder;
        }
        float _2108;
        if (_1463 > 0.0)
        {
            _2108 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2108 = frontier_phi_80_73_ladder;
        }
        float _2110 = isnan(_1787) ? _1489 : (isnan(_1489) ? _1787 : min(_1489, _1787));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1457) + _1446;
        float _2116 = (_2111 * _1460) + _1450;
        float _2117 = (_2111 * _1463) + _1454;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2118;
        float _2121 = _2118 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2117 > _2121) || ((_2117 < _2119) || ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 < _2119) || (_2115 > _2121))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1399);
            frontier_phi_56_80_ladder = _2244.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2244.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2244.x * cbModelParam._m0[1u].y;
        }
        _1479 = frontier_phi_56_80_ladder_2;
        _1481 = frontier_phi_56_80_ladder_1;
        _1483 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1399);
        _1479 = _1467.x * cbModelParam._m0[1u].y;
        _1481 = _1467.y * cbModelParam._m0[1u].y;
        _1483 = _1467.z * cbModelParam._m0[1u].y;
    }
    float _1486 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1538 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1542 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1546 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1549 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1552 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1555 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _1792;
        if (_1549 > 0.0)
        {
            _1792 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1792 = frontier_phi_68_64_ladder;
        }
        float _2134;
        if (_1552 > 0.0)
        {
            _2134 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2134 = frontier_phi_82_75_ladder;
        }
        float _2306;
        if (_1555 > 0.0)
        {
            _2306 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2306 = frontier_phi_100_93_ladder;
        }
        float _2308 = isnan(_2134) ? _1792 : (isnan(_1792) ? _2134 : min(_1792, _2134));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1549) + _1538;
        float _2314 = (_2309 * _1552) + _1542;
        float _2315 = (_2309 * _1555) + _1546;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1486);
            frontier_phi_65_100_ladder = _2484.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2484.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2484.x * cbModelParam._m0[1u].z;
        }
        _1574 = frontier_phi_65_100_ladder_2;
        _1576 = frontier_phi_65_100_ladder_1;
        _1578 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1486);
        _1574 = _1558.x * cbModelParam._m0[1u].z;
        _1576 = _1558.y * cbModelParam._m0[1u].z;
        _1578 = _1558.z * cbModelParam._m0[1u].z;
    }
    float _1590 = _973 * 0.01200000010430812835693359375;
    float _1592 = _1590 * ((cbModelParam._m0[1u].w * (_1574 - _1479)) + _1479);
    float _1593 = _1590 * ((cbModelParam._m0[1u].w * (_1576 - _1481)) + _1481);
    float _1594 = _1590 * ((cbModelParam._m0[1u].w * (_1578 - _1483)) + _1483);
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, _1592 * cbSceneParam._m0[91u].x));
    vec4 _1629 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_960, _961));
    float _1631 = _1629.w;
    uint _1647 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1651 = floatBitsToUint(cbInstanceData._m0[_1647 + 5u]);
    uint _1653 = _1651.x * 14u;
    uint _1654 = _1653 + 13u;
    float _1659 = _973 + (-1.0);
    float _1662 = (cbLight._m0[_1654].x * _1659) + 1.0;
    float _1663 = (cbLight._m0[_1654].y * _1659) + 1.0;
    uint _1664 = _1653 + 8u;
    float _1675 = cbLight._m0[_1653].x + _938;
    float _1676 = cbLight._m0[_1653].y + _939;
    float _1677 = cbLight._m0[_1653].z + _940;
    float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
    float _1685 = dot(vec3(0.0), vec3(cbLight._m0[_1653].xyz));
    float _3115 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
    float _1689 = dot(vec3(0.0), vec3(_938, _939, _940));
    float _3126 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _1693 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1675 * _1681, _1676 * _1681, _1677 * _1681));
    float _3137 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1704 = (exp2(log2(1.0 - (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1710 = (0.5 / ((_1688 + 9.9999999392252902907785028219223e-09) + _1692)) * _1688;
    float _3148 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1712 = (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * 0.31831014156341552734375;
    float _1714 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1727 = _1653 + 9u;
    uint _1733 = _1653 | 1u;
    float _1739 = cbLight._m0[_1733].x + _938;
    float _1740 = cbLight._m0[_1733].y + _939;
    float _1741 = cbLight._m0[_1733].z + _940;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1749 = dot(vec3(0.0), vec3(cbLight._m0[_1733].xyz));
    float _3164 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _1753 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1739 * _1745, _1740 * _1745, _1741 * _1745));
    float _3175 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1762 = (exp2(log2(1.0 - (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1766 = (0.5 / ((_1752 + 9.9999999392252902907785028219223e-09) + _1692)) * _1752;
    float _3186 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1768 = (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * 0.31831014156341552734375;
    float _1769 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    float _1779 = (((_1762 * cbLight._m0[_1727].x) * _1768) * _1769) + ((((cbLight._m0[_1664].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1631))) * _1704) * _1712) * _1714);
    float _1780 = (((_1762 * cbLight._m0[_1727].y) * _1768) * _1769) + ((((cbLight._m0[_1664].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1631))) * _1704) * _1712) * _1714);
    float _1781 = (((_1762 * cbLight._m0[_1727].z) * _1768) * _1769) + ((((cbLight._m0[_1664].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1631))) * _1704) * _1712) * _1714);
    float _1896;
    float _1898;
    float _1900;
    if (_1651.y == 0u)
    {
        float _1836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1836;
        float _1838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1836;
        float _1839 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1836;
        uvec4 _1851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1852 = _1851.x;
        uint _1863 = uint((float(_1851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _1852))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _1852)));
        float _1873 = (log2(_1839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1874 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        uint _1877 = uint(isnan(14.0) ? _1874 : (isnan(_1874) ? 14.0 : min(_1874, 14.0)));
        uvec4 _1882 = texelFetch(g_lightClusterGridBuffer, int(((_1877 << 2u) + (_1863 << 6u)) >> 2u));
        uint _1883 = _1882.x;
        uint _1884 = _1851.z;
        float _1983;
        float _1985;
        float _1987;
        if (((((1u << ((_1884 >> 4u) & 15u)) + 4294967295u) & _1883) == 0u) || ((_1884 & 240u) == 0u))
        {
            _1983 = 0.0;
            _1985 = 0.0;
            _1987 = 0.0;
        }
        else
        {
            float _1984;
            float _1986;
            float _1988;
            float _2159 = 0.0;
            float _2160 = 0.0;
            float _2161 = 0.0;
            uint _2162 = 0u;
            uint _2171;
            bool _2172;
            for (;;)
            {
                _2171 = texelFetch(g_lightClassification, int((((_1877 << 5u) + (_1863 << 9u)) + (_2162 << 2u)) >> 2u)).x;
                _2172 = _2171 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_2172)
                {
                    frontier_phi_95_pred = _2161;
                    frontier_phi_95_pred_1 = _2160;
                    frontier_phi_95_pred_2 = _2159;
                }
                else
                {
                    float _2346;
                    float _2347;
                    float _2348;
                    uint _2349;
                    _2346 = _2159;
                    _2347 = _2160;
                    _2348 = _2161;
                    _2349 = _2171;
                    float _2253;
                    float _2254;
                    float _2255;
                    for (;;)
                    {
                        uint _2353 = uint(findLSB(_2349)) + (_2162 << 5u);
                        uint _2350 = (_2349 + 4294967295u) & _2349;
                        uint _2355 = _2353 * 48u;
                        vec4 _2369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2355)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 3u)).x));
                        uint _2386 = (_2353 * 48u) + 8u;
                        vec3 _2397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2386)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 2u)).x));
                        float _2401 = _2369.x - _1837;
                        float _2402 = _2369.y - _1838;
                        float _2403 = _2369.z - _1839;
                        float _2404 = dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403));
                        float _2407 = inversesqrt(_2404);
                        float _2416 = 1.0 - (_2404 * _2369.w);
                        float _3212 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
                        float _2418 = sqrt(_2404) * uintBitsToFloat(uvec4(_2376, _2377, _2378, texelFetch(g_PointLightRenderingBuffer, int(((_2353 * 48u) + 4u) + 3u)).x)).w;
                        float _2421 = 1.39999997615814208984375 / (_2418 + 1.39999997615814208984375);
                        float _2422 = _2421 * _2421;
                        float _2425 = ((1.0 - _2422) * dot(vec3(0.0), vec3(_2407 * _2401, _2407 * _2402, _2407 * _2403))) + _2422;
                        float _2427 = (-0.0) - _1837;
                        float _2428 = (-0.0) - _1838;
                        float _2429 = (-0.0) - _1839;
                        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
                        float _2437 = dot(vec3(0.0), vec3(_2433 * _2427, _2433 * _2428, _2433 * _2429));
                        float _3223 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                        float _3234 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
                        float _2441 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
                        float _2445 = (0.5 / (((isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) + 9.9999999392252902907785028219223e-09) + _2441)) * _2441;
                        float _3245 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
                        float _2454 = (((isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * 3.1415927410125732421875) / (((_2418 * _2418) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)));
                        _2253 = (_2454 * _2397.x) + _2346;
                        _2254 = (_2454 * _2397.y) + _2347;
                        _2255 = (_2454 * _2397.z) + _2348;
                        if (_2350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2346 = _2253;
                            _2347 = _2254;
                            _2348 = _2255;
                            _2349 = _2350;
                        }
                    }
                    frontier_phi_95_pred = _2255;
                    frontier_phi_95_pred_1 = _2254;
                    frontier_phi_95_pred_2 = _2253;
                }
                _1988 = frontier_phi_95_pred;
                _1986 = frontier_phi_95_pred_1;
                _1984 = frontier_phi_95_pred_2;
                uint _2163 = _2162 + 1u;
                if (_2163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2159 = _1984;
                    _2160 = _1986;
                    _2161 = _1988;
                    _2162 = _2163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1983 = _1984;
            _1985 = _1986;
            _1987 = _1988;
        }
        uvec4 _1991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1992 = _1991.z;
        uint _1994 = (_1992 >> 8u) & 15u;
        float _2139;
        float _2141;
        float _2143;
        if (((4294967295u << _1994) & _1883) == 0u)
        {
            _2139 = _1983;
            _2141 = _1985;
            _2143 = _1987;
        }
        else
        {
            float _2155 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1994 < ((_1992 >> 12u) & 15u))
            {
                float _2140;
                float _2142;
                float _2144;
                float _2332 = _1983;
                float _2333 = _1985;
                float _2334 = _1987;
                uint _2335 = _1994;
                uint _2344;
                bool _2345;
                for (;;)
                {
                    _2344 = texelFetch(g_lightClassification, int((((_1877 << 5u) + (_1863 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                    _2345 = _2344 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2345)
                    {
                        frontier_phi_109_pred = _2334;
                        frontier_phi_109_pred_1 = _2333;
                        frontier_phi_109_pred_2 = _2332;
                    }
                    else
                    {
                        float _2489;
                        float _2490;
                        float _2491;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2499 = _2332;
                        float _2500 = _2333;
                        float _2501 = _2334;
                        uint _2502 = _2344;
                        uint _2503;
                        uint _2513;
                        vec4 _2528;
                        float _2529;
                        vec3 _2541;
                        vec4 _2556;
                        vec4 _2571;
                        float _2617;
                        bool _2618;
                        for (;;)
                        {
                            _2513 = ((_2335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2502));
                            _2503 = (_2502 + 4294967295u) & _2502;
                            uint _2515 = _2513 * 40u;
                            _2528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 3u)).x));
                            _2529 = _2528.w;
                            uint _2531 = (_2513 * 40u) + 8u;
                            _2541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2531 + 2u)).x));
                            uint _2543 = (_2513 * 40u) + 16u;
                            _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            uint _2558 = (_2513 * 40u) + 20u;
                            _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2573 = (_2513 * 40u) + 24u;
                            vec4 _2586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 3u)).x));
                            uint _2592 = (_2513 * 40u) + 28u;
                            vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 3u)).x));
                            _2617 = fma(_1839, _2605.z, fma(_1838, _2605.y, _2605.x * _1837)) + _2605.w;
                            _2618 = !((fma(_1839, _2586.z, fma(_1838, _2586.y, _2586.x * _1837)) + _2586.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2618)
                            {
                                float _2652 = _2528.x - _1837;
                                float _2653 = _2528.y - _1838;
                                float _2654 = _2528.z - _1839;
                                float _2655 = dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654));
                                float _2658 = inversesqrt(_2655);
                                float _2665 = 1.0 - (_2655 / (_2529 * _2529));
                                float _3256 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                                float _2667 = sqrt(_2655) * uintBitsToFloat(uvec4(_2621, _2622, _2623, texelFetch(g_SpotLightRenderingBuffer, int(((_2513 * 40u) + 4u) + 3u)).x)).w;
                                float _2669 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                                float _2670 = _2669 * _2669;
                                float _2673 = (fma(_1839, _2556.z, fma(_1838, _2556.y, _2556.x * _1837)) + _2556.w) / _2617;
                                float _2674 = (fma(_1839, _2571.z, fma(_1838, _2571.y, _2571.x * _1837)) + _2571.w) / _2617;
                                float _2678 = 1.0 - dot(vec2(_2673, _2674), vec2(_2673, _2674));
                                float _3267 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                                float _2686 = dot(vec3(0.0), vec3((-0.0) - (_1837 * _2155), (-0.0) - (_1838 * _2155), (-0.0) - (_1839 * _2155)));
                                float _3278 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                                float _2694 = ((1.0 - _2670) * dot(vec3(0.0), vec3(_2658 * _2652, _2658 * _2653, _2658 * _2654))) + _2670;
                                float _3289 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                                float _2695 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
                                float _2699 = (0.5 / (((isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) + 9.9999999392252902907785028219223e-09) + _2695)) * _2695;
                                float _3300 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                                float _2706 = ((isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * (((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * 3.1415927410125732421875) / (((_2667 * _2667) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2706 * _2541.y;
                                frontier_phi_115_pred_1 = _2706 * _2541.x;
                                frontier_phi_115_pred_2 = _2706 * _2541.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2711 = frontier_phi_115_pred;
                            _2710 = frontier_phi_115_pred_1;
                            _2712 = frontier_phi_115_pred_2;
                            _2489 = _2710 + _2499;
                            _2490 = _2711 + _2500;
                            _2491 = _2712 + _2501;
                            if (_2503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2499 = _2489;
                                _2500 = _2490;
                                _2501 = _2491;
                                _2502 = _2503;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2491;
                        frontier_phi_109_pred_1 = _2490;
                        frontier_phi_109_pred_2 = _2489;
                    }
                    _2144 = frontier_phi_109_pred;
                    _2142 = frontier_phi_109_pred_1;
                    _2140 = frontier_phi_109_pred_2;
                    uint _2336 = _2335 + 1u;
                    if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2332 = _2140;
                        _2333 = _2142;
                        _2334 = _2144;
                        _2335 = _2336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2144;
                frontier_phi_84_85_ladder_1 = _2142;
                frontier_phi_84_85_ladder_2 = _2140;
            }
            else
            {
                frontier_phi_84_85_ladder = _1987;
                frontier_phi_84_85_ladder_1 = _1985;
                frontier_phi_84_85_ladder_2 = _1983;
            }
            _2139 = frontier_phi_84_85_ladder_2;
            _2141 = frontier_phi_84_85_ladder_1;
            _2143 = frontier_phi_84_85_ladder;
        }
        float _2148 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _1896 = ((_2139 * 0.039999999105930328369140625) * _2148) + _1779;
        _1898 = ((_2141 * 0.039999999105930328369140625) * _2148) + _1780;
        _1900 = ((_2143 * 0.039999999105930328369140625) * _2148) + _1781;
    }
    else
    {
        _1896 = _1779;
        _1898 = _1780;
        _1900 = _1781;
    }
    uint _1906 = _1647 + 9u;
    uint _1907 = _1906 + uint(cbMatDynParam._m0[0u].w);
    float _1913 = (cbSceneParam._m0[72u].y * ((_898 * ((_889 - _851) - (_889 * _862))) + _851)) * cbInstanceData._m0[_1907].x;
    float _1914 = (cbSceneParam._m0[72u].y * ((_898 * ((_890 - _852) - (_890 * _862))) + _852)) * cbInstanceData._m0[_1907].y;
    float _1915 = (((_898 * ((_891 - _853) - (_891 * _862))) + _853) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1907].z;
    float _1922 = _1913 + ((_1896 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _1923 = _1914 + ((_1898 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _1924 = _1915 + ((_1900 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1393)) * cbPerFrame._m0[3u].x);
    float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1933 = cbMtdParam._m0[2u].x * _1913;
    float _1934 = cbMtdParam._m0[2u].y * _1914;
    float _1935 = cbMtdParam._m0[2u].z * _1915;
    float _3331 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1937 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    uint _1938 = _1647 + 6u;
    float _1946 = _960 / cbSceneParam._m0[86u].x;
    float _1947 = _961 / cbSceneParam._m0[86u].y;
    vec4 _1961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1946, _1947, (log2((isnan(cbSceneParam._m0[77u].w) ? _933 : (isnan(_933) ? cbSceneParam._m0[77u].w : min(_933, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1963 = _1961.x;
    float _1964 = _1961.y;
    float _1965 = _1961.z;
    float _1966 = _1961.w;
    float _2040;
    float _2042;
    float _2044;
    float _2046;
    if (_933 > cbSceneParam._m0[78u].w)
    {
        float _2002 = isnan(_933) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _933 : min(cbSceneParam._m0[80u].w, _933));
        float _2003 = _2002 / _933;
        float _2014 = _2003 * _284;
        float _2015 = _285 * _2003;
        float _2016 = (-0.0) - _2015;
        float _2017 = _2003 * _286;
        float _2019 = (cbSceneParam._m0[77u].w * _2016) / _2002;
        float _2020 = _2019 + cbSceneParam._m0[79u].w;
        float _2021 = cbSceneParam._m0[79u].w - _2015;
        float _2027 = sqrt(((_2014 * _2014) + (_2015 * _2015)) + (_2017 * _2017));
        float _2030 = (1.0 - (cbSceneParam._m0[77u].w / _2002)) * _2027;
        float _2036 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2038 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2263;
        if (abs((_2016 - _2019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2263 = ((((_2020 > 0.0) ? exp2(_2036 * _2020) : (2.0 - exp2(_2038 * _2020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2030;
        }
        else
        {
            float _2185 = 1.0 / cbSceneParam._m0[80u].x;
            float _2186 = isnan(_2021) ? _2020 : (isnan(_2020) ? _2021 : max(_2020, _2021));
            float _2187 = isnan(_2021) ? _2020 : (isnan(_2020) ? _2021 : min(_2020, _2021));
            float _2196 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : min(_2186, 0.0));
            float _2197 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : min(_2187, 0.0));
            _2263 = ((abs(_2027 / _2016) * cbSceneParam._m0[80u].y) * ((((_2196 - _2197) * 2.0) - ((exp2(_2036 * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)))) - exp2(_2036 * (isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))))) * _2185)) - ((exp2(_2038 * _2196) - exp2(_2038 * _2197)) * _2185))) + (_2030 * cbSceneParam._m0[80u].z);
        }
        vec4 _2265 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1946, _1947, 1.0), 0.0);
        float _2274 = exp2((_2263 * (-1.44269502162933349609375)) * (1.0 - _2265.w));
        float _2275 = log2(_2274);
        float _2291 = log2(_1966);
        _2040 = (exp2(_2291 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2275 * cbSceneParam._m0[78u].x)) * _2265.x) / cbSceneParam._m0[78u].x)) + _1963;
        _2042 = (exp2(_2291 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2275 * cbSceneParam._m0[78u].y)) * _2265.y) / cbSceneParam._m0[78u].y)) + _1964;
        _2044 = (exp2(_2291 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2275 * cbSceneParam._m0[78u].z)) * _2265.z) / cbSceneParam._m0[78u].z)) + _1965;
        _2046 = _2274 * _1966;
    }
    else
    {
        _2040 = _1963;
        _2042 = _1964;
        _2044 = _1965;
        _2046 = _1966;
    }
    bool _2301;
    vec4 _2055;
    vec4 _2078;
    float _2080;
    float _2084;
    float _2085;
    float _2086;
    float _2089;
    float _2092;
    float _2095;
    float _2096;
    bool _2107;
    for (;;)
    {
        _2055 = cbMatDynParam._m0[0u];
        float _2057 = roundEven(_2055.y);
        bool _2058 = _2057 == 3.0;
        float _2060 = log2(_2046);
        float _2064 = exp2(_2060 * cbSceneParam._m0[78u].x);
        float _2065 = exp2(_2060 * cbSceneParam._m0[78u].y);
        float _2066 = exp2(_2060 * cbSceneParam._m0[78u].z);
        float _2067 = _2064 * _1925;
        float _2068 = _2065 * _1926;
        float _2069 = _2066 * _1927;
        float _2076 = _947 + (-0.5);
        _2078 = cbMtdParam._m0[1u];
        _2080 = _2078.y * _2076;
        float _2083 = (_2057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2084 = _2083 * (_2058 ? _2067 : (_2067 + (cbSceneParam._m0[72u].w * _2040)));
        _2085 = _2083 * (_2058 ? _2068 : (_2068 + (cbSceneParam._m0[72u].w * _2042)));
        _2086 = _2083 * (_2058 ? _2069 : (_2069 + (cbSceneParam._m0[72u].w * _2044)));
        _2089 = ((_1933 * _1937) * _2064) * _2083;
        _2092 = ((_1934 * _1937) * _2065) * _2083;
        _2095 = ((_1935 * _1937) * _2066) * _2083;
        _2096 = _2076 * 0.999000012874603271484375;
        _2107 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2107)
        {
            if ((cbInstanceData._m0[_1647 + 7u].x + _2096) < 0.5)
            {
                _2301 = true;
                break;
            }
        }
        uint _2220 = _1906 + uint(_2055.w);
        if ((cbInstanceData._m0[_2220].w < 1.0) && ((cbInstanceData._m0[_2220].w + _2096) < 0.5))
        {
            _2301 = true;
            break;
        }
        if ((_2080 + 1.0) < _2078.x)
        {
            _2301 = true;
            break;
        }
        _2301 = false;
        break;
    }
    float _2459;
    if (_2301)
    {
        discard_state = true;
        _2459 = 0.0;
    }
    else
    {
        _2459 = cbInstanceData._m0[_1938].w;
    }
    SV_Target.x = _2084;
    SV_Target.y = _2085;
    SV_Target.z = _2086;
    SV_Target.w = _2459;
    SV_Target_1.x = _2089;
    SV_Target_1.y = _2092;
    SV_Target_1.z = _2095;
    SV_Target_1.w = cbInstanceData._m0[_1938].w;
    discard_exit();
}


