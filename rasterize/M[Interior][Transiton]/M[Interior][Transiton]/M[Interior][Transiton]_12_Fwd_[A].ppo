#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1159;
float _3146;
float _3147;
float _3148;
float _3149;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    vec4 _587 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _592 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _598 = ((_587.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _600 = (-0.0) - (cbMtdParam._m0[21u].x * ((_587.x * 0.5) + (-0.25)));
    float _601 = fract(_592);
    float _603 = fract(_592 + 0.5);
    vec4 _630 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_601 * _600) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_598 * _601) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _632 = _630.x;
    float _638 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_603 * _600) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_598 * _603) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _632) * abs((_601 * 2.0) + (-1.0))) + _632;
    float _644 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _648 = fract(abs(_644));
    float _657 = sin(cbMtdParam._m0[21u].z);
    float _658 = cos(cbMtdParam._m0[21u].z);
    float _659 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _660 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _690 = abs(cbMtdParam._m0[20u].w * (((_638 - (((_644 >= ((-0.0) - _644)) ? _648 : ((-0.0) - _648)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_660, (-0.0) - _657, _658 * _659) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_660, _658, _659 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _694 = (((_690 * cbMtdParam._m0[18u].y) - _638) * _690) + _638;
    float _3188 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
    vec4 _707 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _722 = (cbMtdParam._m0[14u].x * _707.x) * cbMtdParam._m0[19u].x;
    float _723 = (cbMtdParam._m0[14u].y * _707.y) * cbMtdParam._m0[19u].x;
    float _724 = (cbMtdParam._m0[14u].z * _707.z) * cbMtdParam._m0[19u].x;
    float _734 = exp2(log2(_695) * cbMtdParam._m0[20u].x);
    float _3199 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3210 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3221 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _768 = _278 * _767;
    float _769 = _279 * _767;
    float _770 = _280 * _767;
    vec4 _775 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _777 = _775.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _874 = sqrt(((_278 * _278) + (_279 * _279)) + (_280 * _280));
        float _880 = (cbMatDynParam._m0[5u].x * _874) + cbMatDynParam._m0[5u].y;
        float _3232 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _885 = (cbMatDynParam._m0[5u].z * _874) + cbMatDynParam._m0[5u].w;
        float _3243 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) - _881)) + _881) < ((_777 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _806 = _804 + 9u;
    uint _807 = _806 + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3254 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _830 = _827.x * TEXCOORD_4;
    float _831 = (-0.0) - _768;
    float _832 = (-0.0) - _769;
    float _833 = (-0.0) - _770;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = (cbModelParam._m0[37u].x * ((((fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _948 = (cbModelParam._m0[37u].y * ((((fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _949 = (((((fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_946, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_946, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_946, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_946, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(0.0), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3324 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(0.0), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3357 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(0.0), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3390 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = (cbModelParam._m0[38u].x * ((((fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1230 = (cbModelParam._m0[38u].y * ((((fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1231 = (((((fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(0.0), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3453 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(0.0), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3486 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(0.0), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3519 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1159;
        _1437 = _1159;
        _1438 = _1159;
        _1439 = _1159;
        _1440 = _1159;
        _1441 = _1159;
        _1442 = _1159;
        _1443 = _1159;
        _1444 = _1159;
        _1445 = _1159;
        _1446 = _1159;
        _1447 = _1159;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1171)) + _1171;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1172)) + _1172;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1173)) + _1173;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _768 * (-0.5);
    float _1505 = _769 * (-0.5);
    float _1506 = _770 * (-0.5);
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1633 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1636 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1662;
        if (_1630 > 0.0)
        {
            _1662 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1662 = frontier_phi_41_39_ladder;
        }
        float _1957;
        if (_1633 > 0.0)
        {
            _1957 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1957 = frontier_phi_50_46_ladder;
        }
        float _2302;
        if (_1636 > 0.0)
        {
            _2302 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2302 = frontier_phi_64_57_ladder;
        }
        float _2304 = isnan(_1957) ? _1662 : (isnan(_1662) ? _1957 : min(_1662, _1957));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1630) + _1619;
        float _2310 = (_2305 * _1633) + _1623;
        float _2311 = (_2305 * _1636) + _1627;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1571);
            frontier_phi_40_64_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_40_64_ladder_2;
        _1654 = frontier_phi_40_64_ladder_1;
        _1656 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1571);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1659 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1725 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1728 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1962;
        if (_1722 > 0.0)
        {
            _1962 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1962 = frontier_phi_52_48_ladder;
        }
        float _2328;
        if (_1725 > 0.0)
        {
            _2328 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2328 = frontier_phi_66_59_ladder;
        }
        float _2515;
        if (_1728 > 0.0)
        {
            _2515 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2515 = frontier_phi_84_77_ladder;
        }
        float _2517 = isnan(_2328) ? _1962 : (isnan(_1962) ? _2328 : min(_1962, _2328));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1722) + _1711;
        float _2523 = (_2518 * _1725) + _1715;
        float _2524 = (_2518 * _1728) + _1719;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_49_84_ladder = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_49_84_ladder_2;
        _1749 = frontier_phi_49_84_ladder_1;
        _1751 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1659);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1763 = _830 * 0.01200000010430812835693359375;
    float _1765 = _1763 * ((cbModelParam._m0[1u].w * (_1747 - _1652)) + _1652);
    float _1766 = _1763 * ((cbModelParam._m0[1u].w * (_1749 - _1654)) + _1654);
    float _1767 = _1763 * ((cbModelParam._m0[1u].w * (_1751 - _1656)) + _1656);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1794 = _830 + (-1.0);
    float _1797 = (cbLight._m0[_1789].x * _1794) + 1.0;
    float _1798 = (cbLight._m0[_1789].y * _1794) + 1.0;
    uint _1799 = _1788 + 5u;
    float _1805 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1809 = _1788 + 4u;
    float _1815 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1819 = _1788 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1788].xyz), vec3(0.0));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(0.0));
    float _3655 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _3666 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1799].x * _1805) * _1840) + ((cbLight._m0[_1809].x * _1815) * _1838);
    float _1848 = ((_1805 * cbLight._m0[_1799].y) * _1840) + ((_1815 * cbLight._m0[_1809].y) * _1838);
    float _1849 = ((_1805 * cbLight._m0[_1799].z) * _1840) + ((_1815 * cbLight._m0[_1809].z) * _1838);
    uint _1850 = _1788 + 8u;
    float _1856 = cbLight._m0[_1788].x + _768;
    float _1857 = cbLight._m0[_1788].y + _769;
    float _1858 = cbLight._m0[_1788].z + _770;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1866 = dot(vec3(0.0), vec3(cbLight._m0[_1788].xyz));
    float _3677 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _1870 = dot(vec3(0.0), vec3(_768, _769, _770));
    float _3688 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1856 * _1862, _1857 * _1862, _1858 * _1862));
    float _3699 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1885 = (exp2(log2(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = (0.5 / ((_1869 + 9.9999999392252902907785028219223e-09) + _1873)) * _1869;
    float _3710 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.31831014156341552734375;
    uint _1904 = _1788 + 9u;
    float _1910 = cbLight._m0[_1819].x + _768;
    float _1911 = cbLight._m0[_1819].y + _769;
    float _1912 = cbLight._m0[_1819].z + _770;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1920 = dot(vec3(0.0), vec3(cbLight._m0[_1819].xyz));
    float _3721 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1910 * _1916, _1911 * _1916, _1912 * _1916));
    float _3732 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1933 = (exp2(log2(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1937 = (0.5 / ((_1923 + 9.9999999392252902907785028219223e-09) + _1873)) * _1923;
    float _3743 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.31831014156341552734375;
    float _1949 = (((_1933 * cbLight._m0[_1904].x) * _1939) * _1805) + (((_1885 * cbLight._m0[_1850].x) * _1893) * _1815);
    float _1950 = (((_1933 * cbLight._m0[_1904].y) * _1939) * _1805) + (((_1885 * cbLight._m0[_1850].y) * _1893) * _1815);
    float _1951 = (((_1933 * cbLight._m0[_1904].z) * _1939) * _1805) + (((_1885 * cbLight._m0[_1850].z) * _1893) * _1815);
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    if (_1786.y == 0u)
    {
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2007;
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2007;
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2007;
        uvec4 _2022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2023 = _2022.x;
        uint _2034 = uint((float(_2022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2023))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2023)));
        float _2044 = (log2(_2010 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2045 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        uint _2048 = uint(isnan(14.0) ? _2045 : (isnan(_2045) ? 14.0 : min(_2045, 14.0)));
        uvec4 _2053 = texelFetch(g_lightClusterGridBuffer, int(((_2048 << 2u) + (_2034 << 6u)) >> 2u));
        uint _2054 = _2053.x;
        uint _2055 = _2022.z;
        float _2171;
        float _2173;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        if (((((1u << ((_2055 >> 4u) & 15u)) + 4294967295u) & _2054) == 0u) || ((_2055 & 240u) == 0u))
        {
            _2171 = 0.0;
            _2173 = 0.0;
            _2175 = 0.0;
            _2177 = 0.0;
            _2179 = 0.0;
            _2181 = 0.0;
        }
        else
        {
            float _2172;
            float _2174;
            float _2176;
            float _2178;
            float _2180;
            float _2182;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            uint _2368 = 0u;
            uint _2377;
            bool _2378;
            for (;;)
            {
                _2377 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2368 << 2u)) >> 2u)).x;
                _2378 = _2377 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2378)
                {
                    frontier_phi_79_pred = _2367;
                    frontier_phi_79_pred_1 = _2366;
                    frontier_phi_79_pred_2 = _2365;
                    frontier_phi_79_pred_3 = _2364;
                    frontier_phi_79_pred_4 = _2363;
                    frontier_phi_79_pred_5 = _2362;
                }
                else
                {
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    uint _2564;
                    _2558 = _2362;
                    _2559 = _2363;
                    _2560 = _2364;
                    _2561 = _2365;
                    _2562 = _2366;
                    _2563 = _2367;
                    _2564 = _2377;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    for (;;)
                    {
                        uint _2568 = uint(findLSB(_2564)) + (_2368 << 5u);
                        uint _2565 = (_2564 + 4294967295u) & _2564;
                        uint _2570 = _2568 * 48u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2590 = (_2568 * 48u) + 4u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2609 = (_2568 * 48u) + 8u;
                        vec3 _2620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x));
                        float _2624 = _2584.x - _2008;
                        float _2625 = _2584.y - _2009;
                        float _2626 = _2584.z - _2010;
                        float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                        float _2630 = inversesqrt(_2627);
                        float _2639 = 1.0 - (_2627 * _2584.w);
                        float _3764 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
                        float _2641 = sqrt(_2627) * _2603.w;
                        float _2644 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                        float _2645 = _2644 * _2644;
                        float _2648 = ((1.0 - _2645) * dot(vec3(0.0), vec3(_2630 * _2624, _2630 * _2625, _2630 * _2626))) + _2645;
                        float _2651 = _2641 * _2641;
                        float _2655 = ((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2640) / ((_2651 * 0.699999988079071044921875) + 1.0);
                        float _2659 = (-0.0) - _2008;
                        float _2660 = (-0.0) - _2009;
                        float _2661 = (-0.0) - _2010;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(0.0), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3780 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _3791 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2673 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                        float _2677 = (0.5 / (((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) + 9.9999999392252902907785028219223e-09) + _2673)) * _2673;
                        float _3802 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2686 = (((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 3.1415927410125732421875) / ((_2651 * 2.1991131305694580078125) + 3.141590118408203125)) * _2640;
                        _2462 = (_2655 * _2603.x) + _2561;
                        _2463 = (_2655 * _2603.y) + _2562;
                        _2464 = (_2655 * _2603.z) + _2563;
                        _2459 = (_2686 * _2620.x) + _2558;
                        _2460 = (_2686 * _2620.y) + _2559;
                        _2461 = (_2686 * _2620.z) + _2560;
                        if (_2565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2558 = _2459;
                            _2559 = _2460;
                            _2560 = _2461;
                            _2561 = _2462;
                            _2562 = _2463;
                            _2563 = _2464;
                            _2564 = _2565;
                        }
                    }
                    frontier_phi_79_pred = _2464;
                    frontier_phi_79_pred_1 = _2463;
                    frontier_phi_79_pred_2 = _2462;
                    frontier_phi_79_pred_3 = _2461;
                    frontier_phi_79_pred_4 = _2460;
                    frontier_phi_79_pred_5 = _2459;
                }
                _2182 = frontier_phi_79_pred;
                _2180 = frontier_phi_79_pred_1;
                _2178 = frontier_phi_79_pred_2;
                _2176 = frontier_phi_79_pred_3;
                _2174 = frontier_phi_79_pred_4;
                _2172 = frontier_phi_79_pred_5;
                uint _2369 = _2368 + 1u;
                if (_2369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2362 = _2172;
                    _2363 = _2174;
                    _2364 = _2176;
                    _2365 = _2178;
                    _2366 = _2180;
                    _2367 = _2182;
                    _2368 = _2369;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2171 = _2172;
            _2173 = _2174;
            _2175 = _2176;
            _2177 = _2178;
            _2179 = _2180;
            _2181 = _2182;
        }
        uvec4 _2185 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2186 = _2185.z;
        uint _2188 = (_2186 >> 8u) & 15u;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((4294967295u << _2188) & _2054) == 0u)
        {
            _2333 = _2171;
            _2335 = _2173;
            _2337 = _2175;
            _2339 = _2177;
            _2341 = _2179;
            _2343 = _2181;
        }
        else
        {
            float _2358 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2188 < ((_2186 >> 12u) & 15u))
            {
                float _2334;
                float _2336;
                float _2338;
                float _2340;
                float _2342;
                float _2344;
                float _2541 = _2171;
                float _2542 = _2173;
                float _2543 = _2175;
                float _2544 = _2177;
                float _2545 = _2179;
                float _2546 = _2181;
                uint _2547 = _2188;
                uint _2556;
                bool _2557;
                for (;;)
                {
                    _2556 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                    _2557 = _2556 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2557)
                    {
                        frontier_phi_93_pred = _2545;
                        frontier_phi_93_pred_1 = _2544;
                        frontier_phi_93_pred_2 = _2543;
                        frontier_phi_93_pred_3 = _2542;
                        frontier_phi_93_pred_4 = _2541;
                        frontier_phi_93_pred_5 = _2546;
                    }
                    else
                    {
                        float _2721;
                        float _2722;
                        float _2723;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2734 = _2541;
                        float _2735 = _2542;
                        float _2736 = _2543;
                        float _2737 = _2544;
                        float _2738 = _2545;
                        float _2739 = _2546;
                        uint _2740 = _2556;
                        uint _2741;
                        vec4 _2766;
                        float _2767;
                        vec4 _2782;
                        vec3 _2794;
                        vec4 _2810;
                        vec4 _2825;
                        float _2871;
                        bool _2872;
                        for (;;)
                        {
                            uint _2751 = ((_2547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2740));
                            _2741 = (_2740 + 4294967295u) & _2740;
                            uint _2753 = _2751 * 40u;
                            _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            _2767 = _2766.w;
                            uint _2769 = (_2751 * 40u) + 4u;
                            _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            uint _2784 = (_2751 * 40u) + 8u;
                            _2794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x));
                            uint _2797 = (_2751 * 40u) + 16u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2812 = (_2751 * 40u) + 20u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2751 * 40u) + 24u;
                            vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2846 = (_2751 * 40u) + 28u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2871 = fma(_2010, _2859.z, fma(_2009, _2859.y, _2859.x * _2008)) + _2859.w;
                            _2872 = !((fma(_2010, _2840.z, fma(_2009, _2840.y, _2840.x * _2008)) + _2840.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2872)
                            {
                                float _2899 = _2766.x - _2008;
                                float _2900 = _2766.y - _2009;
                                float _2901 = _2766.z - _2010;
                                float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                                float _2905 = inversesqrt(_2902);
                                float _2906 = _2905 * _2899;
                                float _2907 = _2905 * _2900;
                                float _2908 = _2905 * _2901;
                                float _2912 = 1.0 - (_2902 / (_2767 * _2767));
                                float _3813 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                                float _2917 = sqrt(_2902) * _2782.w;
                                float _2919 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                                float _2920 = _2919 * _2919;
                                float _2921 = 1.0 - _2920;
                                float _2923 = (_2921 * dot(vec3(_2906, _2907, _2908), vec3(0.0))) + _2920;
                                float _2926 = _2917 * _2917;
                                float _2930 = (fma(_2010, _2810.z, fma(_2009, _2810.y, _2810.x * _2008)) + _2810.w) / _2871;
                                float _2931 = (fma(_2010, _2825.z, fma(_2009, _2825.y, _2825.x * _2008)) + _2825.w) / _2871;
                                float _2935 = 1.0 - dot(vec2(_2930, _2931), vec2(_2930, _2931));
                                float _3829 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                                float _2937 = _2936 * (((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2913) / ((_2926 * 0.699999988079071044921875) + 1.0));
                                float _2947 = dot(vec3(0.0), vec3((-0.0) - (_2008 * _2358), (-0.0) - (_2009 * _2358), (-0.0) - (_2010 * _2358)));
                                float _3840 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2955 = (_2921 * dot(vec3(0.0), vec3(_2906, _2907, _2908))) + _2920;
                                float _3851 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                                float _2960 = (0.5 / (((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) + 9.9999999392252902907785028219223e-09) + _2956)) * _2956;
                                float _3862 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2967 = (_2936 * _2913) * (((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 3.1415927410125732421875) / ((_2926 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2937 * _2782.z;
                                frontier_phi_99_pred_1 = _2937 * _2782.y;
                                frontier_phi_99_pred_2 = _2937 * _2782.x;
                                frontier_phi_99_pred_3 = _2967 * _2794.z;
                                frontier_phi_99_pred_4 = _2967 * _2794.y;
                                frontier_phi_99_pred_5 = _2967 * _2794.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2976 = frontier_phi_99_pred;
                            _2975 = frontier_phi_99_pred_1;
                            _2974 = frontier_phi_99_pred_2;
                            _2973 = frontier_phi_99_pred_3;
                            _2972 = frontier_phi_99_pred_4;
                            _2971 = frontier_phi_99_pred_5;
                            _2724 = _2974 + _2737;
                            _2725 = _2975 + _2738;
                            _2726 = _2976 + _2739;
                            _2721 = _2971 + _2734;
                            _2722 = _2972 + _2735;
                            _2723 = _2973 + _2736;
                            if (_2741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2741;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2725;
                        frontier_phi_93_pred_1 = _2724;
                        frontier_phi_93_pred_2 = _2723;
                        frontier_phi_93_pred_3 = _2722;
                        frontier_phi_93_pred_4 = _2721;
                        frontier_phi_93_pred_5 = _2726;
                    }
                    _2342 = frontier_phi_93_pred;
                    _2340 = frontier_phi_93_pred_1;
                    _2338 = frontier_phi_93_pred_2;
                    _2336 = frontier_phi_93_pred_3;
                    _2334 = frontier_phi_93_pred_4;
                    _2344 = frontier_phi_93_pred_5;
                    uint _2548 = _2547 + 1u;
                    if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2541 = _2334;
                        _2542 = _2336;
                        _2543 = _2338;
                        _2544 = _2340;
                        _2545 = _2342;
                        _2546 = _2344;
                        _2547 = _2548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2344;
                frontier_phi_68_69_ladder_1 = _2342;
                frontier_phi_68_69_ladder_2 = _2340;
                frontier_phi_68_69_ladder_3 = _2338;
                frontier_phi_68_69_ladder_4 = _2334;
                frontier_phi_68_69_ladder_5 = _2336;
            }
            else
            {
                frontier_phi_68_69_ladder = _2181;
                frontier_phi_68_69_ladder_1 = _2179;
                frontier_phi_68_69_ladder_2 = _2177;
                frontier_phi_68_69_ladder_3 = _2175;
                frontier_phi_68_69_ladder_4 = _2171;
                frontier_phi_68_69_ladder_5 = _2173;
            }
            _2333 = frontier_phi_68_69_ladder_4;
            _2335 = frontier_phi_68_69_ladder_5;
            _2337 = frontier_phi_68_69_ladder_3;
            _2339 = frontier_phi_68_69_ladder_2;
            _2341 = frontier_phi_68_69_ladder_1;
            _2343 = frontier_phi_68_69_ladder;
        }
        float _2348 = isnan(1.0) ? _830 : (isnan(_830) ? 1.0 : min(_830, 1.0));
        _2067 = (_2348 * _2339) + _1847;
        _2069 = (_2348 * _2341) + _1848;
        _2071 = (_2348 * _2343) + _1849;
        _2073 = ((_2333 * 0.039999999105930328369140625) * _2348) + _1949;
        _2075 = ((_2335 * 0.039999999105930328369140625) * _2348) + _1950;
        _2077 = ((_2337 * 0.039999999105930328369140625) * _2348) + _1951;
    }
    else
    {
        _2067 = _1847;
        _2069 = _1848;
        _2071 = _1849;
        _2073 = _1949;
        _2075 = _1950;
        _2077 = _1951;
    }
    uint _2083 = _806 + uint(cbMatDynParam._m0[0u].w);
    float _2089 = ((_734 * (_722 - (_722 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2083].x;
    float _2090 = ((_734 * (_723 - (_723 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2083].y;
    float _2091 = ((_734 * (_724 - (_724 * _695))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2083].z;
    float _3878 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _3889 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3900 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2108 = (((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_2067 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _830))) + ((_2073 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + _2089;
    float _2110 = (_2090 + ((_2075 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_2069 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _830)));
    float _2112 = (_2091 + ((_2077 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1562)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_2071 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _830)));
    float _2113 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2114 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2121 = cbMtdParam._m0[2u].x * _2089;
    float _2122 = cbMtdParam._m0[2u].y * _2090;
    float _2123 = cbMtdParam._m0[2u].z * _2091;
    float _3926 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2125 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    uint _2126 = _804 + 6u;
    float _2134 = _790 / cbSceneParam._m0[86u].x;
    float _2135 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2149 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2134, _2135, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2151 = _2149.x;
    float _2152 = _2149.y;
    float _2153 = _2149.z;
    float _2154 = _2149.w;
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _2196 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _2197 = _2196 / _763;
        float _2208 = _2197 * _278;
        float _2209 = _279 * _2197;
        float _2210 = (-0.0) - _2209;
        float _2211 = _2197 * _280;
        float _2213 = (cbSceneParam._m0[77u].w * _2210) / _2196;
        float _2214 = _2213 + cbSceneParam._m0[79u].w;
        float _2215 = cbSceneParam._m0[79u].w - _2209;
        float _2221 = sqrt(((_2208 * _2208) + (_2209 * _2209)) + (_2211 * _2211));
        float _2224 = (1.0 - (cbSceneParam._m0[77u].w / _2196)) * _2221;
        float _2230 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2232 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2472;
        if (abs((_2210 - _2213) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2472 = ((((_2214 > 0.0) ? exp2(_2230 * _2214) : (2.0 - exp2(_2232 * _2214))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2224;
        }
        else
        {
            float _2391 = 1.0 / cbSceneParam._m0[80u].x;
            float _2392 = isnan(_2215) ? _2214 : (isnan(_2214) ? _2215 : max(_2214, _2215));
            float _2393 = isnan(_2215) ? _2214 : (isnan(_2214) ? _2215 : min(_2214, _2215));
            float _2402 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : min(_2392, 0.0));
            float _2403 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : min(_2393, 0.0));
            _2472 = ((abs(_2221 / _2210) * cbSceneParam._m0[80u].y) * ((((_2402 - _2403) * 2.0) - ((exp2(_2230 * (isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0)))) - exp2(_2230 * (isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0))))) * _2391)) - ((exp2(_2232 * _2402) - exp2(_2232 * _2403)) * _2391))) + (_2224 * cbSceneParam._m0[80u].z);
        }
        vec4 _2474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2134, _2135, 1.0), 0.0);
        float _2483 = exp2((_2472 * (-1.44269502162933349609375)) * (1.0 - _2474.w));
        float _2484 = log2(_2483);
        float _2500 = log2(_2154);
        _2234 = (exp2(_2500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].x)) * _2474.x) / cbSceneParam._m0[78u].x)) + _2151;
        _2236 = (exp2(_2500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].y)) * _2474.y) / cbSceneParam._m0[78u].y)) + _2152;
        _2238 = (exp2(_2500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].z)) * _2474.z) / cbSceneParam._m0[78u].z)) + _2153;
        _2240 = _2483 * _2154;
    }
    else
    {
        _2234 = _2151;
        _2236 = _2152;
        _2238 = _2153;
        _2240 = _2154;
    }
    bool _2510;
    vec4 _2249;
    vec4 _2272;
    float _2274;
    float _2278;
    float _2279;
    float _2280;
    float _2283;
    float _2286;
    float _2289;
    float _2290;
    bool _2301;
    for (;;)
    {
        _2249 = cbMatDynParam._m0[0u];
        float _2251 = roundEven(_2249.y);
        bool _2252 = _2251 == 3.0;
        float _2254 = log2(_2240);
        float _2258 = exp2(_2254 * cbSceneParam._m0[78u].x);
        float _2259 = exp2(_2254 * cbSceneParam._m0[78u].y);
        float _2260 = exp2(_2254 * cbSceneParam._m0[78u].z);
        float _2261 = _2258 * _2113;
        float _2262 = _2259 * _2114;
        float _2263 = _2260 * _2115;
        float _2270 = _777 + (-0.5);
        _2272 = cbMtdParam._m0[1u];
        _2274 = _2272.y * _2270;
        float _2277 = (_2251 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2278 = _2277 * (_2252 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2234)));
        _2279 = _2277 * (_2252 ? _2262 : (_2262 + (cbSceneParam._m0[72u].w * _2236)));
        _2280 = _2277 * (_2252 ? _2263 : (_2263 + (cbSceneParam._m0[72u].w * _2238)));
        _2283 = ((_2121 * _2125) * _2258) * _2277;
        _2286 = ((_2122 * _2125) * _2259) * _2277;
        _2289 = ((_2123 * _2125) * _2260) * _2277;
        _2290 = _2270 * 0.999000012874603271484375;
        _2301 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2301)
        {
            if ((cbInstanceData._m0[_804 + 7u].x + _2290) < 0.5)
            {
                _2510 = true;
                break;
            }
        }
        uint _2426 = _806 + uint(_2249.w);
        if ((cbInstanceData._m0[_2426].w < 1.0) && ((cbInstanceData._m0[_2426].w + _2290) < 0.5))
        {
            _2510 = true;
            break;
        }
        if ((_2274 + 1.0) < _2272.x)
        {
            _2510 = true;
            break;
        }
        _2510 = false;
        break;
    }
    float _2691;
    if (_2510)
    {
        discard_state = true;
        _2691 = 0.0;
    }
    else
    {
        _2691 = cbInstanceData._m0[_2126].w;
    }
    SV_Target.x = _2278;
    SV_Target.y = _2279;
    SV_Target.z = _2280;
    SV_Target.w = _2691;
    SV_Target_1.x = _2283;
    SV_Target_1.y = _2286;
    SV_Target_1.z = _2289;
    SV_Target_1.w = cbInstanceData._m0[_2126].w;
    discard_exit();
}


