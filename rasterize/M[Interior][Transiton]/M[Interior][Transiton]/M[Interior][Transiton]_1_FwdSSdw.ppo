#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;
uint _2044;
uint _2045;
uint _2046;
uint _2280;
uint _2281;
uint _2282;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = cbMtdParam._m0[27u].w + _269;
    float _329 = cbMtdParam._m0[28u].x + _270;
    float _330 = cbMtdParam._m0[28u].y + _271;
    float _347 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_201 * _193, _201 * _194, _201 * _195));
    float _348 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_212 * TANGENT.x, _212 * TANGENT.y, _212 * TANGENT.z));
    float _349 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (NORMAL.x * _208), (-0.0) - (NORMAL.y * _208), (-0.0) - (NORMAL.z * _208)));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _356 = _353 * _349;
    float _359 = ((_353 * _347) + (((_290.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _360 = ((_353 * _348) + (((_290.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_359 > 0.0)
    {
        _368 = (1.0 - _361) / _359;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_359 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _359;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[17u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_361 + (-0.5)) + (_382 * _359)) / _393) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _428 = cbMtdParam._m0[9u].x * _418.x;
    float _429 = cbMtdParam._m0[9u].y * _418.y;
    float _430 = cbMtdParam._m0[9u].z * _418.z;
    float _442 = (cbMtdParam._m0[19u].y * _428) * cbMtdParam._m0[16u].x;
    float _444 = (cbMtdParam._m0[19u].y * _429) * cbMtdParam._m0[16u].y;
    float _446 = (cbMtdParam._m0[19u].y * _430) * cbMtdParam._m0[16u].z;
    vec4 _470 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _475 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _481 = ((_470.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _483 = (-0.0) - (cbMtdParam._m0[21u].x * ((_470.x * 0.5) + (-0.25)));
    float _484 = fract(_475);
    float _486 = fract(_475 + 0.5);
    vec4 _513 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_484 * _483) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_481 * _484) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _515 = _513.x;
    float _521 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_486 * _483) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_481 * _486) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _515) * abs((_484 * 2.0) + (-1.0))) + _515;
    float _527 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _531 = fract(abs(_527));
    float _541 = sin(cbMtdParam._m0[21u].z);
    float _542 = cos(cbMtdParam._m0[21u].z);
    float _543 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _544 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _569 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_544, (-0.0) - _541, _542 * _543) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_544, _542, _543 * _541) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_527 >= ((-0.0) - _527)) ? _531 : ((-0.0) - _531)) * cbMtdParam._m0[18u].z) - _521)) + cbMtdParam._m0[18u].w;
    float _570 = ceil(_569);
    float _2502 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    float _591 = ((((cbMtdParam._m0[21u].w * _428) * cbMtdParam._m0[15u].x) - _442) * _571) + _442;
    float _592 = ((((cbMtdParam._m0[21u].w * _429) * cbMtdParam._m0[15u].y) - _444) * _571) + _444;
    float _593 = ((((cbMtdParam._m0[21u].w * _430) * cbMtdParam._m0[15u].z) - _446) * _571) + _446;
    float _597 = abs(cbMtdParam._m0[20u].w * _569);
    float _601 = (((_597 * cbMtdParam._m0[18u].y) - _521) * _597) + _521;
    float _2513 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _2513 : (isnan(_2513) ? 1.0 : min(_2513, 1.0));
    vec4 _614 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _629 = (cbMtdParam._m0[14u].x * _614.x) * cbMtdParam._m0[19u].x;
    float _630 = (cbMtdParam._m0[14u].y * _614.y) * cbMtdParam._m0[19u].x;
    float _631 = (cbMtdParam._m0[14u].z * _614.z) * cbMtdParam._m0[19u].x;
    float _638 = exp2(log2(_602) * cbMtdParam._m0[20u].x);
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _678 = _269 * _677;
    float _679 = _270 * _677;
    float _680 = _271 * _677;
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_686 * cbSceneParam._m0[86u].x, _687 * cbSceneParam._m0[86u].y));
    float _699 = _696.x * TEXCOORD_4;
    float _700 = (-0.0) - _678;
    float _701 = (-0.0) - _679;
    float _702 = (-0.0) - _680;
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = (cbModelParam._m0[37u].x * ((((fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _789 = (cbModelParam._m0[37u].y * ((((fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _790 = (((((fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        _864 = _827 * (_793.z + (-0.5));
        _866 = _827 * (_793.y + (-0.5));
        _867 = _827 * (_793.x + (-0.5));
        _868 = _837 * (_800.z + (-0.5));
        _869 = _837 * (_800.y + (-0.5));
        _870 = _837 * (_800.x + (-0.5));
        _871 = _847 * (_807.z + (-0.5));
        _872 = _847 * (_807.y + (-0.5));
        _873 = _847 * (_807.x + (-0.5));
        _874 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        _875 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        _876 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
    }
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _929 = (cbModelParam._m0[38u].x * ((((fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _930 = (cbModelParam._m0[38u].y * ((((fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _931 = (((((fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _966 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _976 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _986 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _996 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_954.x + (-0.5));
        float _998 = _996 * (_954.y + (-0.5));
        float _999 = _996 * (_954.z + (-0.5));
        _1003 = _966 * (_933.z + (-0.5));
        _1004 = _966 * (_933.y + (-0.5));
        _1005 = _966 * (_933.x + (-0.5));
        _1006 = _976 * (_940.z + (-0.5));
        _1007 = _976 * (_940.y + (-0.5));
        _1008 = _976 * (_940.x + (-0.5));
        _1009 = _986 * (_947.z + (-0.5));
        _1010 = _986 * (_947.y + (-0.5));
        _1011 = _986 * (_947.x + (-0.5));
        _1012 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        _1013 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        _1014 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    }
    else
    {
        _1003 = _865;
        _1004 = _865;
        _1005 = _865;
        _1006 = _865;
        _1007 = _865;
        _1008 = _865;
        _1009 = _865;
        _1010 = _865;
        _1011 = _865;
        _1012 = _865;
        _1013 = _865;
        _1014 = _865;
    }
    float _1029 = _678 * (-0.5);
    float _1030 = _679 * (-0.5);
    float _1031 = _680 * (-0.5);
    float _1032 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_1005, _1008, _1011, _1014));
    float _1035 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_1004, _1007, _1010, _1013));
    float _1038 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_1003, _1006, _1009, _1012));
    float _1073;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1045 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_864, _868, _871, _874));
        float _1049 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_866, _869, _872, _875));
        float _1053 = dot(vec4(_1029, _1030, _1031, 1.0), vec4(_867, _870, _873, _876));
        float _1060 = dot(vec4(cbModelParam._m0[39u]), vec4(_1029, _1030, _1031, 1.0));
        _1073 = dot(vec3(isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)), isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)), isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1060) ? 0.0 : (isnan(0.0) ? _1060 : max(0.0, _1060))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1073 = 1.0;
    }
    float _1084;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1075 = dot(vec4(cbModelParam._m0[40u]), vec4(_1029, _1030, _1031, 1.0));
        _1084 = dot(vec3(isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)), isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)), isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1075) ? 0.0 : (isnan(0.0) ? _1075 : max(0.0, _1075))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1084 = 1.0;
    }
    float _1088 = (_1084 * cbModelParam._m0[1u].x) + (_1073 * (1.0 - cbModelParam._m0[1u].x));
    float _1094 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1175;
    float _1177;
    float _1179;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1142 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1146 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1150 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1153 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1156 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1159 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1185;
        if (_1153 > 0.0)
        {
            _1185 = abs((1.0 - _1142) / _1153);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1153 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1142 + 1.0) / _1153);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1185 = frontier_phi_22_20_ladder;
        }
        float _1483;
        if (_1156 > 0.0)
        {
            _1483 = abs((1.0 - _1146) / _1156);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1156 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1146 + 1.0) / _1156);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1483 = frontier_phi_31_27_ladder;
        }
        float _1797;
        if (_1159 > 0.0)
        {
            _1797 = abs((1.0 - _1150) / _1159);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1159 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1150 + 1.0) / _1159);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1797 = frontier_phi_45_38_ladder;
        }
        float _1799 = isnan(_1483) ? _1185 : (isnan(_1185) ? _1483 : min(_1185, _1483));
        float _1800 = isnan(_1797) ? _1799 : (isnan(_1799) ? _1797 : min(_1799, _1797));
        float _1804 = (_1800 * _1153) + _1142;
        float _1805 = (_1800 * _1156) + _1146;
        float _1806 = (_1800 * _1159) + _1150;
        float _1807 = _1800 * 9.9999997473787516355514526367188e-05;
        float _1808 = (-1.0) - _1807;
        float _1810 = _1807 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1806 > _1810) || ((_1806 < _1808) || ((_1805 > _1810) || ((_1805 < _1808) || ((_1804 < _1808) || (_1804 > _1810))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1806, cbModelParam._m0[9u].z, fma(_1805, cbModelParam._m0[9u].y, _1804 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1806, cbModelParam._m0[10u].z, fma(_1805, cbModelParam._m0[10u].y, _1804 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1806, cbModelParam._m0[11u].z, fma(_1805, cbModelParam._m0[11u].y, _1804 * cbModelParam._m0[11u].x))), _1094);
            frontier_phi_21_45_ladder = _1917.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1917.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1917.x * cbModelParam._m0[1u].y;
        }
        _1175 = frontier_phi_21_45_ladder_2;
        _1177 = frontier_phi_21_45_ladder_1;
        _1179 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1094);
        _1175 = _1163.x * cbModelParam._m0[1u].y;
        _1177 = _1163.y * cbModelParam._m0[1u].y;
        _1179 = _1163.z * cbModelParam._m0[1u].y;
    }
    float _1182 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1270;
    float _1272;
    float _1274;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1234 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1238 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1242 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1245 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1248 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1251 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1488;
        if (_1245 > 0.0)
        {
            _1488 = abs((1.0 - _1234) / _1245);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1234 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1488 = frontier_phi_33_29_ladder;
        }
        float _1823;
        if (_1248 > 0.0)
        {
            _1823 = abs((1.0 - _1238) / _1248);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1248 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1238 + 1.0) / _1248);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1823 = frontier_phi_47_40_ladder;
        }
        float _1974;
        if (_1251 > 0.0)
        {
            _1974 = abs((1.0 - _1242) / _1251);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1242 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1974 = frontier_phi_61_56_ladder;
        }
        float _1976 = isnan(_1823) ? _1488 : (isnan(_1488) ? _1823 : min(_1488, _1823));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1245) + _1234;
        float _1982 = (_1977 * _1248) + _1238;
        float _1983 = (_1977 * _1251) + _1242;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1985 = (-1.0) - _1984;
        float _1987 = _1984 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1983 > _1987) || ((_1983 < _1985) || ((_1982 > _1987) || ((_1982 < _1985) || ((_1981 < _1985) || (_1981 > _1987))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1983, cbModelParam._m0[17u].z, fma(_1982, cbModelParam._m0[17u].y, _1981 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1983, cbModelParam._m0[18u].z, fma(_1982, cbModelParam._m0[18u].y, _1981 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1983, cbModelParam._m0[19u].z, fma(_1982, cbModelParam._m0[19u].y, _1981 * cbModelParam._m0[19u].x))), _1182);
            frontier_phi_30_61_ladder = _2143.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2143.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2143.x * cbModelParam._m0[1u].z;
        }
        _1270 = frontier_phi_30_61_ladder_2;
        _1272 = frontier_phi_30_61_ladder;
        _1274 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1254 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1182);
        _1270 = _1254.x * cbModelParam._m0[1u].z;
        _1272 = _1254.y * cbModelParam._m0[1u].z;
        _1274 = _1254.z * cbModelParam._m0[1u].z;
    }
    float _1286 = _699 * 0.01200000010430812835693359375;
    float _1288 = _1286 * ((cbModelParam._m0[1u].w * (_1270 - _1175)) + _1175);
    float _1289 = _1286 * ((cbModelParam._m0[1u].w * (_1272 - _1177)) + _1177);
    float _1290 = _1286 * ((cbModelParam._m0[1u].w * (_1274 - _1179)) + _1179);
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, _1288 * cbSceneParam._m0[91u].x));
    vec4 _1325 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_686, _687));
    float _1327 = _1325.w;
    uint _1343 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1347 = floatBitsToUint(cbInstanceData._m0[_1343 + 5u]);
    uint _1349 = _1347.x * 14u;
    uint _1350 = _1349 + 13u;
    float _1355 = _699 + (-1.0);
    float _1358 = (cbLight._m0[_1350].x * _1355) + 1.0;
    float _1359 = (cbLight._m0[_1350].y * _1355) + 1.0;
    uint _1360 = _1349 + 8u;
    float _1371 = cbLight._m0[_1349].x + _678;
    float _1372 = cbLight._m0[_1349].y + _679;
    float _1373 = cbLight._m0[_1349].z + _680;
    float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
    float _1381 = dot(vec3(0.0), vec3(cbLight._m0[_1349].xyz));
    float _2639 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
    float _1384 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
    float _1385 = dot(vec3(0.0), vec3(_678, _679, _680));
    float _2650 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1388 = isnan(1.0) ? _2650 : (isnan(_2650) ? 1.0 : min(_2650, 1.0));
    float _1389 = dot(vec3(cbLight._m0[_1349].xyz), vec3(_1371 * _1377, _1372 * _1377, _1373 * _1377));
    float _2661 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1400 = (exp2(log2(1.0 - (isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1406 = (0.5 / ((_1384 + 9.9999999392252902907785028219223e-09) + _1388)) * _1384;
    float _2672 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1408 = (isnan(1.0) ? _2672 : (isnan(_2672) ? 1.0 : min(_2672, 1.0))) * 0.31831014156341552734375;
    float _1410 = isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0));
    uint _1423 = _1349 + 9u;
    uint _1429 = _1349 | 1u;
    float _1435 = cbLight._m0[_1429].x + _678;
    float _1436 = cbLight._m0[_1429].y + _679;
    float _1437 = cbLight._m0[_1429].z + _680;
    float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
    float _1445 = dot(vec3(0.0), vec3(cbLight._m0[_1429].xyz));
    float _2688 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1448 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
    float _1449 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1435 * _1441, _1436 * _1441, _1437 * _1441));
    float _2699 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
    float _1458 = (exp2(log2(1.0 - (isnan(1.0) ? _2699 : (isnan(_2699) ? 1.0 : min(_2699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1462 = (0.5 / ((_1448 + 9.9999999392252902907785028219223e-09) + _1388)) * _1448;
    float _2710 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
    float _1464 = (isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0))) * 0.31831014156341552734375;
    float _1465 = isnan(1.0) ? _1359 : (isnan(_1359) ? 1.0 : min(_1359, 1.0));
    float _1475 = (((_1458 * cbLight._m0[_1423].x) * _1464) * _1465) + ((((cbLight._m0[_1360].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1327))) * _1400) * _1408) * _1410);
    float _1476 = (((_1458 * cbLight._m0[_1423].y) * _1464) * _1465) + ((((cbLight._m0[_1360].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1327))) * _1400) * _1408) * _1410);
    float _1477 = (((_1458 * cbLight._m0[_1423].z) * _1464) * _1465) + ((((cbLight._m0[_1360].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1327))) * _1400) * _1408) * _1410);
    float _1594;
    float _1596;
    float _1598;
    if (_1347.y == 0u)
    {
        float _1533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1533;
        float _1535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1533;
        float _1536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1533;
        uvec4 _1548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1549 = _1548.x;
        uint _1560 = uint((float(_1548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _1549))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _1549)));
        float _1570 = (log2(_1536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1571 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        uint _1574 = uint(isnan(14.0) ? _1571 : (isnan(_1571) ? 14.0 : min(_1571, 14.0)));
        uvec4 _1580 = texelFetch(g_lightClusterGridBuffer, int(((_1574 << 2u) + (_1560 << 6u)) >> 2u));
        uint _1581 = _1580.x;
        uint _1582 = _1548.z;
        float _1681;
        float _1683;
        float _1685;
        if (((((1u << ((_1582 >> 4u) & 15u)) + 4294967295u) & _1581) == 0u) || ((_1582 & 240u) == 0u))
        {
            _1681 = 0.0;
            _1683 = 0.0;
            _1685 = 0.0;
        }
        else
        {
            float _1682;
            float _1684;
            float _1686;
            float _1848 = 0.0;
            float _1849 = 0.0;
            float _1850 = 0.0;
            uint _1851 = 0u;
            uint _1860;
            bool _1861;
            for (;;)
            {
                _1860 = texelFetch(g_lightClassification, int((((_1574 << 5u) + (_1560 << 9u)) + (_1851 << 2u)) >> 2u)).x;
                _1861 = _1860 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1861)
                {
                    frontier_phi_58_pred = _1850;
                    frontier_phi_58_pred_1 = _1849;
                    frontier_phi_58_pred_2 = _1848;
                }
                else
                {
                    float _2014;
                    float _2015;
                    float _2016;
                    uint _2017;
                    _2014 = _1848;
                    _2015 = _1849;
                    _2016 = _1850;
                    _2017 = _1860;
                    float _1926;
                    float _1927;
                    float _1928;
                    for (;;)
                    {
                        uint _2021 = uint(findLSB(_2017)) + (_1851 << 5u);
                        uint _2018 = (_2017 + 4294967295u) & _2017;
                        uint _2023 = _2021 * 48u;
                        vec4 _2037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2023)).x, texelFetch(g_PointLightRenderingBuffer, int(_2023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2023 + 3u)).x));
                        uint _2054 = (_2021 * 48u) + 8u;
                        vec3 _2065 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2054)).x, texelFetch(g_PointLightRenderingBuffer, int(_2054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2054 + 2u)).x));
                        float _2069 = _2037.x - _1534;
                        float _2070 = _2037.y - _1535;
                        float _2071 = _2037.z - _1536;
                        float _2072 = dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071));
                        float _2075 = inversesqrt(_2072);
                        float _2084 = 1.0 - (_2072 * _2037.w);
                        float _2736 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
                        float _2086 = sqrt(_2072) * uintBitsToFloat(uvec4(_2044, _2045, _2046, texelFetch(g_PointLightRenderingBuffer, int(((_2021 * 48u) + 4u) + 3u)).x)).w;
                        float _2089 = 1.39999997615814208984375 / (_2086 + 1.39999997615814208984375);
                        float _2090 = _2089 * _2089;
                        float _2093 = ((1.0 - _2090) * dot(vec3(0.0), vec3(_2075 * _2069, _2075 * _2070, _2075 * _2071))) + _2090;
                        float _2095 = (-0.0) - _1534;
                        float _2096 = (-0.0) - _1535;
                        float _2097 = (-0.0) - _1536;
                        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
                        float _2105 = dot(vec3(0.0), vec3(_2101 * _2095, _2101 * _2096, _2101 * _2097));
                        float _2747 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
                        float _2758 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
                        float _2109 = isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0));
                        float _2113 = (0.5 / (((isnan(1.0) ? _2747 : (isnan(_2747) ? 1.0 : min(_2747, 1.0))) + 9.9999999392252902907785028219223e-09) + _2109)) * _2109;
                        float _2769 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
                        float _2122 = (((isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0))) * 3.1415927410125732421875) / (((_2086 * _2086) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2736 : (isnan(_2736) ? 1.0 : min(_2736, 1.0)));
                        _1926 = (_2122 * _2065.x) + _2014;
                        _1927 = (_2122 * _2065.y) + _2015;
                        _1928 = (_2122 * _2065.z) + _2016;
                        if (_2018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2014 = _1926;
                            _2015 = _1927;
                            _2016 = _1928;
                            _2017 = _2018;
                        }
                    }
                    frontier_phi_58_pred = _1928;
                    frontier_phi_58_pred_1 = _1927;
                    frontier_phi_58_pred_2 = _1926;
                }
                _1686 = frontier_phi_58_pred;
                _1684 = frontier_phi_58_pred_1;
                _1682 = frontier_phi_58_pred_2;
                uint _1852 = _1851 + 1u;
                if (_1852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1848 = _1682;
                    _1849 = _1684;
                    _1850 = _1686;
                    _1851 = _1852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1681 = _1682;
            _1683 = _1684;
            _1685 = _1686;
        }
        uvec4 _1689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1690 = _1689.z;
        uint _1692 = (_1690 >> 8u) & 15u;
        float _1828;
        float _1830;
        float _1832;
        if (((4294967295u << _1692) & _1581) == 0u)
        {
            _1828 = _1681;
            _1830 = _1683;
            _1832 = _1685;
        }
        else
        {
            float _1844 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1692 < ((_1690 >> 12u) & 15u))
            {
                float _1829;
                float _1831;
                float _1833;
                float _2000 = _1681;
                float _2001 = _1683;
                float _2002 = _1685;
                uint _2003 = _1692;
                uint _2012;
                bool _2013;
                for (;;)
                {
                    _2012 = texelFetch(g_lightClassification, int((((_1574 << 5u) + (_1560 << 9u)) + (_2003 << 2u)) >> 2u)).x;
                    _2013 = _2012 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_2013)
                    {
                        frontier_phi_67_pred = _2002;
                        frontier_phi_67_pred_1 = _2001;
                        frontier_phi_67_pred_2 = _2000;
                    }
                    else
                    {
                        float _2148;
                        float _2149;
                        float _2150;
                        float _2369;
                        float _2370;
                        float _2371;
                        float _2158 = _2000;
                        float _2159 = _2001;
                        float _2160 = _2002;
                        uint _2161 = _2012;
                        uint _2162;
                        uint _2172;
                        vec4 _2187;
                        float _2188;
                        vec3 _2200;
                        vec4 _2215;
                        vec4 _2230;
                        float _2276;
                        bool _2277;
                        for (;;)
                        {
                            _2172 = ((_2003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2161));
                            _2162 = (_2161 + 4294967295u) & _2161;
                            uint _2174 = _2172 * 40u;
                            _2187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2174 + 3u)).x));
                            _2188 = _2187.w;
                            uint _2190 = (_2172 * 40u) + 8u;
                            _2200 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2190 + 2u)).x));
                            uint _2202 = (_2172 * 40u) + 16u;
                            _2215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2202 + 3u)).x));
                            uint _2217 = (_2172 * 40u) + 20u;
                            _2230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2217 + 3u)).x));
                            uint _2232 = (_2172 * 40u) + 24u;
                            vec4 _2245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2232 + 3u)).x));
                            uint _2251 = (_2172 * 40u) + 28u;
                            vec4 _2264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2251 + 3u)).x));
                            _2276 = fma(_1536, _2264.z, fma(_1535, _2264.y, _2264.x * _1534)) + _2264.w;
                            _2277 = !((fma(_1536, _2245.z, fma(_1535, _2245.y, _2245.x * _1534)) + _2245.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_2277)
                            {
                                float _2311 = _2187.x - _1534;
                                float _2312 = _2187.y - _1535;
                                float _2313 = _2187.z - _1536;
                                float _2314 = dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313));
                                float _2317 = inversesqrt(_2314);
                                float _2324 = 1.0 - (_2314 / (_2188 * _2188));
                                float _2780 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
                                float _2326 = sqrt(_2314) * uintBitsToFloat(uvec4(_2280, _2281, _2282, texelFetch(g_SpotLightRenderingBuffer, int(((_2172 * 40u) + 4u) + 3u)).x)).w;
                                float _2328 = 1.39999997615814208984375 / (_2326 + 1.39999997615814208984375);
                                float _2329 = _2328 * _2328;
                                float _2332 = (fma(_1536, _2215.z, fma(_1535, _2215.y, _2215.x * _1534)) + _2215.w) / _2276;
                                float _2333 = (fma(_1536, _2230.z, fma(_1535, _2230.y, _2230.x * _1534)) + _2230.w) / _2276;
                                float _2337 = 1.0 - dot(vec2(_2332, _2333), vec2(_2332, _2333));
                                float _2791 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
                                float _2345 = dot(vec3(0.0), vec3((-0.0) - (_1534 * _1844), (-0.0) - (_1535 * _1844), (-0.0) - (_1536 * _1844)));
                                float _2802 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
                                float _2353 = ((1.0 - _2329) * dot(vec3(0.0), vec3(_2317 * _2311, _2317 * _2312, _2317 * _2313))) + _2329;
                                float _2813 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
                                float _2354 = isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0));
                                float _2358 = (0.5 / (((isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0))) + 9.9999999392252902907785028219223e-09) + _2354)) * _2354;
                                float _2824 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
                                float _2365 = ((isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0))) * (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0)))) * (((isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0))) * 3.1415927410125732421875) / (((_2326 * _2326) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2365 * _2200.z;
                                frontier_phi_73_pred_1 = _2365 * _2200.y;
                                frontier_phi_73_pred_2 = _2365 * _2200.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2371 = frontier_phi_73_pred;
                            _2370 = frontier_phi_73_pred_1;
                            _2369 = frontier_phi_73_pred_2;
                            _2148 = _2369 + _2158;
                            _2149 = _2370 + _2159;
                            _2150 = _2371 + _2160;
                            if (_2162 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2158 = _2148;
                                _2159 = _2149;
                                _2160 = _2150;
                                _2161 = _2162;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2150;
                        frontier_phi_67_pred_1 = _2149;
                        frontier_phi_67_pred_2 = _2148;
                    }
                    _1833 = frontier_phi_67_pred;
                    _1831 = frontier_phi_67_pred_1;
                    _1829 = frontier_phi_67_pred_2;
                    uint _2004 = _2003 + 1u;
                    if (_2004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2000 = _1829;
                        _2001 = _1831;
                        _2002 = _1833;
                        _2003 = _2004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1831;
                frontier_phi_49_50_ladder_1 = _1833;
                frontier_phi_49_50_ladder_2 = _1829;
            }
            else
            {
                frontier_phi_49_50_ladder = _1683;
                frontier_phi_49_50_ladder_1 = _1685;
                frontier_phi_49_50_ladder_2 = _1681;
            }
            _1828 = frontier_phi_49_50_ladder_2;
            _1830 = frontier_phi_49_50_ladder;
            _1832 = frontier_phi_49_50_ladder_1;
        }
        float _1837 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _1594 = ((_1828 * 0.039999999105930328369140625) * _1837) + _1475;
        _1596 = ((_1830 * 0.039999999105930328369140625) * _1837) + _1476;
        _1598 = ((_1832 * 0.039999999105930328369140625) * _1837) + _1477;
    }
    else
    {
        _1594 = _1475;
        _1596 = _1476;
        _1598 = _1477;
    }
    uint _1605 = (_1343 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1611 = (cbSceneParam._m0[72u].y * ((_638 * ((_629 - _591) - (_629 * _602))) + _591)) * cbInstanceData._m0[_1605].x;
    float _1612 = (cbSceneParam._m0[72u].y * ((_638 * ((_630 - _592) - (_630 * _602))) + _592)) * cbInstanceData._m0[_1605].y;
    float _1613 = (((_638 * ((_631 - _593) - (_631 * _602))) + _593) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1605].z;
    float _1620 = _1611 + ((_1594 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _1088)) * cbPerFrame._m0[3u].x);
    float _1621 = _1612 + ((_1596 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _1088)) * cbPerFrame._m0[3u].x);
    float _1622 = _1613 + ((_1598 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _1088)) * cbPerFrame._m0[3u].x);
    float _2855 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1635 = isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0));
    uint _1636 = _1343 + 6u;
    float _1644 = _686 / cbSceneParam._m0[86u].x;
    float _1645 = _687 / cbSceneParam._m0[86u].y;
    vec4 _1659 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1644, _1645, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1661 = _1659.x;
    float _1662 = _1659.y;
    float _1663 = _1659.z;
    float _1664 = _1659.w;
    float _1738;
    float _1740;
    float _1742;
    float _1744;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _1700 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _1701 = _1700 / _673;
        float _1712 = _1701 * _269;
        float _1713 = _270 * _1701;
        float _1714 = (-0.0) - _1713;
        float _1715 = _1701 * _271;
        float _1717 = (cbSceneParam._m0[77u].w * _1714) / _1700;
        float _1718 = _1717 + cbSceneParam._m0[79u].w;
        float _1719 = cbSceneParam._m0[79u].w - _1713;
        float _1725 = sqrt(((_1712 * _1712) + (_1713 * _1713)) + (_1715 * _1715));
        float _1728 = (1.0 - (cbSceneParam._m0[77u].w / _1700)) * _1725;
        float _1734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1936;
        if (abs((_1714 - _1717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1936 = ((((_1718 > 0.0) ? exp2(_1734 * _1718) : (2.0 - exp2(_1736 * _1718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1728;
        }
        else
        {
            float _1874 = 1.0 / cbSceneParam._m0[80u].x;
            float _1875 = isnan(_1719) ? _1718 : (isnan(_1718) ? _1719 : max(_1718, _1719));
            float _1876 = isnan(_1719) ? _1718 : (isnan(_1718) ? _1719 : min(_1718, _1719));
            float _1885 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : min(_1875, 0.0));
            float _1886 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : min(_1876, 0.0));
            _1936 = ((abs(_1725 / _1714) * cbSceneParam._m0[80u].y) * ((((_1885 - _1886) * 2.0) - ((exp2(_1734 * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)))) - exp2(_1734 * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))))) * _1874)) - ((exp2(_1736 * _1885) - exp2(_1736 * _1886)) * _1874))) + (_1728 * cbSceneParam._m0[80u].z);
        }
        vec4 _1938 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1644, _1645, 1.0), 0.0);
        float _1947 = exp2((_1936 * (-1.44269502162933349609375)) * (1.0 - _1938.w));
        float _1948 = log2(_1947);
        float _1964 = log2(_1664);
        _1738 = (exp2(_1964 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1948 * cbSceneParam._m0[78u].x)) * _1938.x) / cbSceneParam._m0[78u].x)) + _1661;
        _1740 = (exp2(_1964 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1948 * cbSceneParam._m0[78u].y)) * _1938.y) / cbSceneParam._m0[78u].y)) + _1662;
        _1742 = (exp2(_1964 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1948 * cbSceneParam._m0[78u].z)) * _1938.z) / cbSceneParam._m0[78u].z)) + _1663;
        _1744 = _1947 * _1664;
    }
    else
    {
        _1738 = _1661;
        _1740 = _1662;
        _1742 = _1663;
        _1744 = _1664;
    }
    float _1755 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1756 = _1755 == 3.0;
    float _1758 = log2(_1744);
    float _1762 = exp2(_1758 * cbSceneParam._m0[78u].x);
    float _1763 = exp2(_1758 * cbSceneParam._m0[78u].y);
    float _1764 = exp2(_1758 * cbSceneParam._m0[78u].z);
    float _1765 = _1762 * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    float _1766 = _1763 * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    float _1767 = _1764 * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    float _1776 = (_1755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1776 * (_1756 ? _1765 : (_1765 + (cbSceneParam._m0[72u].w * _1738)));
    SV_Target.y = _1776 * (_1756 ? _1766 : (_1766 + (cbSceneParam._m0[72u].w * _1740)));
    SV_Target.z = _1776 * (_1756 ? _1767 : (_1767 + (cbSceneParam._m0[72u].w * _1742)));
    SV_Target.w = cbInstanceData._m0[_1636].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1611) * _1635) * _1762) * _1776;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1612) * _1635) * _1763) * _1776;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1613) * _1635) * _1764) * _1776;
    SV_Target_1.w = cbInstanceData._m0[_1636].w;
}


