#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    vec4 _297 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _335 = cbMtdParam._m0[27u].w + _276;
    float _336 = cbMtdParam._m0[28u].x + _277;
    float _337 = cbMtdParam._m0[28u].y + _278;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_205 * _197, _205 * _198, _205 * _199));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_219 * TANGENT.x, _219 * TANGENT.y, _219 * TANGENT.z));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - (_212 * NORMAL.x), (-0.0) - (_212 * NORMAL.y), (-0.0) - (_212 * NORMAL.z)));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _360 = _357 * _353;
    float _361 = (_357 * _351) + (((_297.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _362 = (_357 * _352) + (((_297.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _363 = _361 * cbMtdParam._m0[24u].x;
    float _364 = _362 * cbMtdParam._m0[23u].w;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_363 > 0.0)
    {
        _372 = (1.0 - _365) / _363;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_363 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _363;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    bool _382 = _360 > 0.0;
    float _384 = _382 ? (cbMtdParam._m0[17u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _391 = _365 + (-0.5);
    float _394 = _366 + (-0.5);
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_386 * _363)) / _397) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _432 = cbMtdParam._m0[9u].x * _422.x;
    float _433 = cbMtdParam._m0[9u].y * _422.y;
    float _434 = cbMtdParam._m0[9u].z * _422.z;
    float _452 = _361 * cbMtdParam._m0[26u].z;
    float _453 = _362 * cbMtdParam._m0[26u].y;
    bool _454 = _452 > 0.0;
    float _459;
    if (_454)
    {
        _459 = (1.0 - _365) / _452;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _365) / _452;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _459 = frontier_phi_11_10_ladder;
    }
    bool _461 = _453 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _366) / _453;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_453 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _366) / _453;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _466 = frontier_phi_15_14_ladder;
    }
    float _469 = _382 ? (cbMtdParam._m0[19u].z / _360) : 5000.0;
    float _470 = isnan(_466) ? _459 : (isnan(_459) ? _466 : min(_459, _466));
    float _471 = isnan(_469) ? _470 : (isnan(_470) ? _469 : min(_470, _469));
    float _475 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _479 = ((_471 * _360) + _475) / _475;
    float _484 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _486 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _502 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_471 * _452)) / _479) + 0.5) + _484) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_471 * _453)) / _479) + 0.5) + _486) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514;
    if (_454)
    {
        _514 = (1.0 - _365) / _452;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _365) / _452;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _514 = frontier_phi_19_18_ladder;
    }
    float _520;
    if (_461)
    {
        _520 = (1.0 - _366) / _453;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_453 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _366) / _453;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _520 = frontier_phi_23_22_ladder;
    }
    float _522 = isnan(_520) ? _514 : (isnan(_514) ? _520 : min(_514, _520));
    float _523 = isnan(_469) ? _522 : (isnan(_522) ? _469 : min(_522, _469));
    float _530 = ((_523 * _360) + _475) / _475;
    vec4 _550 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_391 + (_523 * _452)) / _530) + 0.5) + _484) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_394 + (_523 * _453)) / _530) + 0.5) + _486) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _552 = _550.x;
    float _559 = (_552 * ((_502.x * cbMtdParam._m0[10u].x) - _432)) + _432;
    float _560 = (_552 * ((_502.y * cbMtdParam._m0[10u].y) - _433)) + _433;
    float _561 = (_552 * ((_502.z * cbMtdParam._m0[10u].z) - _434)) + _434;
    vec4 _585 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _590 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _596 = ((_585.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _598 = (-0.0) - (cbMtdParam._m0[21u].x * ((_585.x * 0.5) + (-0.25)));
    float _599 = fract(_590);
    float _601 = fract(_590 + 0.5);
    vec4 _628 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_599 * _598) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_596 * _599) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _630 = _628.x;
    float _636 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_601 * _598) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_596 * _601) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _630) * abs((_599 * 2.0) + (-1.0))) + _630;
    float _642 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _646 = fract(abs(_642));
    float _655 = sin(cbMtdParam._m0[21u].z);
    float _656 = cos(cbMtdParam._m0[21u].z);
    float _657 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _658 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _688 = abs(cbMtdParam._m0[20u].w * (((_636 - (((_642 >= ((-0.0) - _642)) ? _646 : ((-0.0) - _646)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_658, (-0.0) - _655, _656 * _657) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_658, _656, _657 * _655) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _692 = (((_688 * cbMtdParam._m0[18u].y) - _636) * _688) + _636;
    float _3103 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
    vec4 _705 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _720 = (cbMtdParam._m0[14u].x * _705.x) * cbMtdParam._m0[19u].x;
    float _721 = (cbMtdParam._m0[14u].y * _705.y) * cbMtdParam._m0[19u].x;
    float _722 = (cbMtdParam._m0[14u].z * _705.z) * cbMtdParam._m0[19u].x;
    float _732 = exp2(log2(_693) * cbMtdParam._m0[20u].x);
    float _3114 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3125 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3136 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _766 = _276 * _765;
    float _767 = _277 * _765;
    float _768 = _278 * _765;
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _788 = uint(roundEven(NORMAL.w)) * 13u;
    uint _790 = _788 + 9u;
    uint _791 = _790 + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0)))) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0)))) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_791].z;
    float _3147 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
    float _3158 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
    float _3169 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _814 = _811.x * TEXCOORD_4;
    float _815 = (-0.0) - _766;
    float _816 = (-0.0) - _767;
    float _817 = (-0.0) - _768;
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = (cbModelParam._m0[37u].x * ((((fma(_847, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _904 = (cbModelParam._m0[37u].y * ((((fma(_847, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _905 = (((((fma(_847, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(0.0), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3195 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3206 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3217 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(0.0), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3228 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3239 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3250 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(0.0), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3261 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3272 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3283 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = (cbModelParam._m0[38u].x * ((((fma(_847, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1183 = (cbModelParam._m0[38u].y * ((((fma(_847, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1184 = (((((fma(_847, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(0.0), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3346 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(0.0), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3379 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(0.0), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3412 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1115;
        _1390 = _1115;
        _1391 = _1115;
        _1392 = _1115;
        _1393 = _1115;
        _1394 = _1115;
        _1395 = _1115;
        _1396 = _1115;
        _1397 = _1115;
        _1398 = _1115;
        _1399 = _1115;
        _1400 = _1115;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1127)) + _1127;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1128)) + _1128;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1129)) + _1129;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _766 * (-0.5);
    float _1458 = _767 * (-0.5);
    float _1459 = _768 * (-0.5);
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1572 = fma(_847, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839)) + cbModelParam._m0[13u].w;
        float _1576 = fma(_847, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839)) + cbModelParam._m0[14u].w;
        float _1580 = fma(_847, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839)) + cbModelParam._m0[15u].w;
        float _1583 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1586 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1589 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1615;
        if (_1583 > 0.0)
        {
            _1615 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1615 = frontier_phi_38_36_ladder;
        }
        float _1935;
        if (_1586 > 0.0)
        {
            _1935 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1935 = frontier_phi_47_43_ladder;
        }
        float _2272;
        if (_1589 > 0.0)
        {
            _2272 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2272 = frontier_phi_61_54_ladder;
        }
        float _2274 = isnan(_1935) ? _1615 : (isnan(_1615) ? _1935 : min(_1615, _1935));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1583) + _1572;
        float _2280 = (_2275 * _1586) + _1576;
        float _2281 = (_2275 * _1589) + _1580;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2282;
        float _2285 = _2282 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2281 > _2285) || ((_2281 < _2283) || ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 < _2283) || (_2279 > _2285))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1524);
            frontier_phi_37_61_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1605 = frontier_phi_37_61_ladder_2;
        _1607 = frontier_phi_37_61_ladder_1;
        _1609 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1524);
        _1605 = _1593.x * cbModelParam._m0[1u].y;
        _1607 = _1593.y * cbModelParam._m0[1u].y;
        _1609 = _1593.z * cbModelParam._m0[1u].y;
    }
    float _1612 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_847, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_847, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_847, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1678 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1681 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1940;
        if (_1675 > 0.0)
        {
            _1940 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1940 = frontier_phi_49_45_ladder;
        }
        float _2298;
        if (_1678 > 0.0)
        {
            _2298 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2298 = frontier_phi_63_56_ladder;
        }
        float _2464;
        if (_1681 > 0.0)
        {
            _2464 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2464 = frontier_phi_77_72_ladder;
        }
        float _2466 = isnan(_2298) ? _1940 : (isnan(_1940) ? _2298 : min(_1940, _2298));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1675) + _1664;
        float _2472 = (_2467 * _1678) + _1668;
        float _2473 = (_2467 * _1681) + _1672;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_46_77_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_46_77_ladder_2;
        _1702 = frontier_phi_46_77_ladder_1;
        _1704 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1612);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1716 = _814 * 0.01200000010430812835693359375;
    float _1718 = _1716 * ((cbModelParam._m0[1u].w * (_1700 - _1605)) + _1605);
    float _1719 = _1716 * ((cbModelParam._m0[1u].w * (_1702 - _1607)) + _1607);
    float _1720 = _1716 * ((cbModelParam._m0[1u].w * (_1704 - _1609)) + _1609);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_774, _775));
    float _1739 = _1737.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_788 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1766 = _814 + (-1.0);
    float _1769 = (cbLight._m0[_1761].x * _1766) + 1.0;
    float _1770 = (cbLight._m0[_1761].y * _1766) + 1.0;
    uint _1771 = _1760 + 5u;
    float _1777 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1781 = _1760 + 4u;
    float _1790 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1794 = _1760 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1760].xyz), vec3(0.0));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(0.0));
    float _3548 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3559 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1771].x * _1777) * _1815) + (((cbLight._m0[_1781].x * _1752) * _1790) * _1813);
    float _1823 = ((_1777 * cbLight._m0[_1771].y) * _1815) + (((cbLight._m0[_1781].y * _1753) * _1790) * _1813);
    float _1824 = ((_1777 * cbLight._m0[_1771].z) * _1815) + (((cbLight._m0[_1781].z * _1754) * _1790) * _1813);
    uint _1825 = _1760 + 8u;
    float _1831 = cbLight._m0[_1760].x + _766;
    float _1832 = cbLight._m0[_1760].y + _767;
    float _1833 = cbLight._m0[_1760].z + _768;
    float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
    float _1841 = dot(vec3(0.0), vec3(cbLight._m0[_1760].xyz));
    float _3570 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _1845 = dot(vec3(0.0), vec3(_766, _767, _768));
    float _3581 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1831 * _1837, _1832 * _1837, _1833 * _1837));
    float _3592 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1860 = (exp2(log2(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = (0.5 / ((_1844 + 9.9999999392252902907785028219223e-09) + _1848)) * _1844;
    float _3603 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.31831014156341552734375;
    uint _1882 = _1760 + 9u;
    float _1888 = cbLight._m0[_1794].x + _766;
    float _1889 = cbLight._m0[_1794].y + _767;
    float _1890 = cbLight._m0[_1794].z + _768;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1898 = dot(vec3(0.0), vec3(cbLight._m0[_1794].xyz));
    float _3614 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1888 * _1894, _1889 * _1894, _1890 * _1894));
    float _3625 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1911 = (exp2(log2(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = (0.5 / ((_1901 + 9.9999999392252902907785028219223e-09) + _1848)) * _1901;
    float _3636 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.31831014156341552734375;
    float _1927 = (((_1911 * cbLight._m0[_1882].x) * _1917) * _1777) + ((((cbLight._m0[_1825].x * _1752) * _1860) * _1868) * _1790);
    float _1928 = (((_1911 * cbLight._m0[_1882].y) * _1917) * _1777) + ((((cbLight._m0[_1825].y * _1753) * _1860) * _1868) * _1790);
    float _1929 = (((_1911 * cbLight._m0[_1882].z) * _1917) * _1777) + ((((cbLight._m0[_1825].z * _1754) * _1860) * _1868) * _1790);
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    if (_1758.y == 0u)
    {
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1985;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1985;
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1985;
        uvec4 _2000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2001 = _2000.x;
        uint _2012 = uint((float(_2000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2001))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2001)));
        float _2022 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2023 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        uint _2026 = uint(isnan(14.0) ? _2023 : (isnan(_2023) ? 14.0 : min(_2023, 14.0)));
        uvec4 _2032 = texelFetch(g_lightClusterGridBuffer, int(((_2026 << 2u) + (_2012 << 6u)) >> 2u));
        uint _2033 = _2032.x;
        uint _2034 = _2000.z;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        if (((((1u << ((_2034 >> 4u) & 15u)) + 4294967295u) & _2033) == 0u) || ((_2034 & 240u) == 0u))
        {
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
        }
        else
        {
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            uint _2338 = 0u;
            uint _2347;
            bool _2348;
            for (;;)
            {
                _2347 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2338 << 2u)) >> 2u)).x;
                _2348 = _2347 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2348)
                {
                    frontier_phi_74_pred = _2335;
                    frontier_phi_74_pred_1 = _2334;
                    frontier_phi_74_pred_2 = _2333;
                    frontier_phi_74_pred_3 = _2332;
                    frontier_phi_74_pred_4 = _2336;
                    frontier_phi_74_pred_5 = _2337;
                }
                else
                {
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    uint _2513;
                    _2507 = _2332;
                    _2508 = _2333;
                    _2509 = _2334;
                    _2510 = _2335;
                    _2511 = _2336;
                    _2512 = _2337;
                    _2513 = _2347;
                    float _2413;
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    for (;;)
                    {
                        uint _2517 = uint(findLSB(_2513)) + (_2338 << 5u);
                        uint _2514 = (_2513 + 4294967295u) & _2513;
                        uint _2519 = _2517 * 48u;
                        vec4 _2533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 3u)).x));
                        uint _2539 = (_2517 * 48u) + 4u;
                        vec4 _2552 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2539)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 3u)).x));
                        uint _2558 = (_2517 * 48u) + 8u;
                        vec3 _2569 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2558)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 2u)).x));
                        float _2573 = _2533.x - _1986;
                        float _2574 = _2533.y - _1987;
                        float _2575 = _2533.z - _1988;
                        float _2576 = dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575));
                        float _2579 = inversesqrt(_2576);
                        float _2588 = 1.0 - (_2576 * _2533.w);
                        float _3657 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2589 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
                        float _2590 = sqrt(_2576) * _2552.w;
                        float _2593 = 1.39999997615814208984375 / (_2590 + 1.39999997615814208984375);
                        float _2594 = _2593 * _2593;
                        float _2597 = ((1.0 - _2594) * dot(vec3(0.0), vec3(_2579 * _2573, _2579 * _2574, _2579 * _2575))) + _2594;
                        float _2600 = _2590 * _2590;
                        float _2604 = ((isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))) * _2589) / ((_2600 * 0.699999988079071044921875) + 1.0);
                        float _2608 = (-0.0) - _1986;
                        float _2609 = (-0.0) - _1987;
                        float _2610 = (-0.0) - _1988;
                        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
                        float _2618 = dot(vec3(0.0), vec3(_2614 * _2608, _2614 * _2609, _2614 * _2610));
                        float _3673 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _3684 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2622 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
                        float _2626 = (0.5 / (((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) + 9.9999999392252902907785028219223e-09) + _2622)) * _2622;
                        float _3695 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
                        float _2635 = (((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 3.1415927410125732421875) / ((_2600 * 2.1991131305694580078125) + 3.141590118408203125)) * _2589;
                        _2416 = (_2604 * _2552.x) + _2510;
                        _2417 = (_2604 * _2552.y) + _2511;
                        _2418 = (_2604 * _2552.z) + _2512;
                        _2413 = (_2635 * _2569.x) + _2507;
                        _2414 = (_2635 * _2569.y) + _2508;
                        _2415 = (_2635 * _2569.z) + _2509;
                        if (_2514 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2507 = _2413;
                            _2508 = _2414;
                            _2509 = _2415;
                            _2510 = _2416;
                            _2511 = _2417;
                            _2512 = _2418;
                            _2513 = _2514;
                        }
                    }
                    frontier_phi_74_pred = _2416;
                    frontier_phi_74_pred_1 = _2415;
                    frontier_phi_74_pred_2 = _2414;
                    frontier_phi_74_pred_3 = _2413;
                    frontier_phi_74_pred_4 = _2417;
                    frontier_phi_74_pred_5 = _2418;
                }
                _2157 = frontier_phi_74_pred;
                _2155 = frontier_phi_74_pred_1;
                _2153 = frontier_phi_74_pred_2;
                _2151 = frontier_phi_74_pred_3;
                _2159 = frontier_phi_74_pred_4;
                _2161 = frontier_phi_74_pred_5;
                uint _2339 = _2338 + 1u;
                if (_2339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2332 = _2151;
                    _2333 = _2153;
                    _2334 = _2155;
                    _2335 = _2157;
                    _2336 = _2159;
                    _2337 = _2161;
                    _2338 = _2339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
        }
        uvec4 _2164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2165 = _2164.z;
        uint _2167 = (_2165 >> 8u) & 15u;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        if (((4294967295u << _2167) & _2033) == 0u)
        {
            _2303 = _2150;
            _2305 = _2152;
            _2307 = _2154;
            _2309 = _2156;
            _2311 = _2158;
            _2313 = _2160;
        }
        else
        {
            float _2328 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2167 < ((_2165 >> 12u) & 15u))
            {
                float _2304;
                float _2306;
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2490 = _2150;
                float _2491 = _2152;
                float _2492 = _2154;
                float _2493 = _2156;
                float _2494 = _2158;
                float _2495 = _2160;
                uint _2496 = _2167;
                uint _2505;
                bool _2506;
                for (;;)
                {
                    _2505 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                    _2506 = _2505 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2506)
                    {
                        frontier_phi_83_pred = _2493;
                        frontier_phi_83_pred_1 = _2492;
                        frontier_phi_83_pred_2 = _2491;
                        frontier_phi_83_pred_3 = _2490;
                        frontier_phi_83_pred_4 = _2495;
                        frontier_phi_83_pred_5 = _2494;
                    }
                    else
                    {
                        float _2661;
                        float _2662;
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2674 = _2490;
                        float _2675 = _2491;
                        float _2676 = _2492;
                        float _2677 = _2493;
                        float _2678 = _2494;
                        float _2679 = _2495;
                        uint _2680 = _2505;
                        uint _2681;
                        vec4 _2706;
                        float _2707;
                        vec4 _2722;
                        vec3 _2734;
                        vec4 _2750;
                        vec4 _2765;
                        float _2811;
                        bool _2812;
                        for (;;)
                        {
                            uint _2691 = ((_2496 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2680));
                            _2681 = (_2680 + 4294967295u) & _2680;
                            uint _2693 = _2691 * 40u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            _2707 = _2706.w;
                            uint _2709 = (_2691 * 40u) + 4u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2691 * 40u) + 8u;
                            _2734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x));
                            uint _2737 = (_2691 * 40u) + 16u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2752 = (_2691 * 40u) + 20u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2767 = (_2691 * 40u) + 24u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            uint _2786 = (_2691 * 40u) + 28u;
                            vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            _2811 = fma(_1988, _2799.z, fma(_1987, _2799.y, _2799.x * _1986)) + _2799.w;
                            _2812 = !((fma(_1988, _2780.z, fma(_1987, _2780.y, _2780.x * _1986)) + _2780.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2812)
                            {
                                float _2839 = _2706.x - _1986;
                                float _2840 = _2706.y - _1987;
                                float _2841 = _2706.z - _1988;
                                float _2842 = dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841));
                                float _2845 = inversesqrt(_2842);
                                float _2846 = _2845 * _2839;
                                float _2847 = _2845 * _2840;
                                float _2848 = _2845 * _2841;
                                float _2852 = 1.0 - (_2842 / (_2707 * _2707));
                                float _3706 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                                float _2857 = sqrt(_2842) * _2722.w;
                                float _2859 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                                float _2860 = _2859 * _2859;
                                float _2861 = 1.0 - _2860;
                                float _2863 = (_2861 * dot(vec3(_2846, _2847, _2848), vec3(0.0))) + _2860;
                                float _2866 = _2857 * _2857;
                                float _2870 = (fma(_1988, _2750.z, fma(_1987, _2750.y, _2750.x * _1986)) + _2750.w) / _2811;
                                float _2871 = (fma(_1988, _2765.z, fma(_1987, _2765.y, _2765.x * _1986)) + _2765.w) / _2811;
                                float _2875 = 1.0 - dot(vec2(_2870, _2871), vec2(_2870, _2871));
                                float _3722 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                                float _2877 = _2876 * (((isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))) * _2853) / ((_2866 * 0.699999988079071044921875) + 1.0));
                                float _2887 = dot(vec3(0.0), vec3((-0.0) - (_1986 * _2328), (-0.0) - (_1987 * _2328), (-0.0) - (_1988 * _2328)));
                                float _3733 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                                float _2895 = (_2861 * dot(vec3(0.0), vec3(_2846, _2847, _2848))) + _2860;
                                float _3744 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                                float _2896 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                                float _2900 = (0.5 / (((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) + 9.9999999392252902907785028219223e-09) + _2896)) * _2896;
                                float _3755 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                                float _2907 = (_2876 * _2853) * (((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 3.1415927410125732421875) / ((_2866 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2877 * _2722.x;
                                frontier_phi_89_pred_1 = _2907 * _2734.z;
                                frontier_phi_89_pred_2 = _2907 * _2734.y;
                                frontier_phi_89_pred_3 = _2907 * _2734.x;
                                frontier_phi_89_pred_4 = _2877 * _2722.z;
                                frontier_phi_89_pred_5 = _2877 * _2722.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2914 = frontier_phi_89_pred;
                            _2913 = frontier_phi_89_pred_1;
                            _2912 = frontier_phi_89_pred_2;
                            _2911 = frontier_phi_89_pred_3;
                            _2916 = frontier_phi_89_pred_4;
                            _2915 = frontier_phi_89_pred_5;
                            _2664 = _2914 + _2677;
                            _2665 = _2915 + _2678;
                            _2666 = _2916 + _2679;
                            _2661 = _2911 + _2674;
                            _2662 = _2912 + _2675;
                            _2663 = _2913 + _2676;
                            if (_2681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2681;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2664;
                        frontier_phi_83_pred_1 = _2663;
                        frontier_phi_83_pred_2 = _2662;
                        frontier_phi_83_pred_3 = _2661;
                        frontier_phi_83_pred_4 = _2666;
                        frontier_phi_83_pred_5 = _2665;
                    }
                    _2310 = frontier_phi_83_pred;
                    _2308 = frontier_phi_83_pred_1;
                    _2306 = frontier_phi_83_pred_2;
                    _2304 = frontier_phi_83_pred_3;
                    _2314 = frontier_phi_83_pred_4;
                    _2312 = frontier_phi_83_pred_5;
                    uint _2497 = _2496 + 1u;
                    if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2490 = _2304;
                        _2491 = _2306;
                        _2492 = _2308;
                        _2493 = _2310;
                        _2494 = _2312;
                        _2495 = _2314;
                        _2496 = _2497;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2314;
                frontier_phi_65_66_ladder_1 = _2312;
                frontier_phi_65_66_ladder_2 = _2308;
                frontier_phi_65_66_ladder_3 = _2306;
                frontier_phi_65_66_ladder_4 = _2310;
                frontier_phi_65_66_ladder_5 = _2304;
            }
            else
            {
                frontier_phi_65_66_ladder = _2160;
                frontier_phi_65_66_ladder_1 = _2158;
                frontier_phi_65_66_ladder_2 = _2154;
                frontier_phi_65_66_ladder_3 = _2152;
                frontier_phi_65_66_ladder_4 = _2156;
                frontier_phi_65_66_ladder_5 = _2150;
            }
            _2303 = frontier_phi_65_66_ladder_5;
            _2305 = frontier_phi_65_66_ladder_3;
            _2307 = frontier_phi_65_66_ladder_2;
            _2309 = frontier_phi_65_66_ladder_4;
            _2311 = frontier_phi_65_66_ladder_1;
            _2313 = frontier_phi_65_66_ladder;
        }
        float _2318 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
        _2046 = (_2318 * _2309) + _1822;
        _2048 = (_2318 * _2311) + _1823;
        _2050 = (_2318 * _2313) + _1824;
        _2052 = ((_2303 * 0.039999999105930328369140625) * _2318) + _1927;
        _2054 = ((_2305 * 0.039999999105930328369140625) * _2318) + _1928;
        _2056 = ((_2307 * 0.039999999105930328369140625) * _2318) + _1929;
    }
    else
    {
        _2046 = _1822;
        _2048 = _1823;
        _2050 = _1824;
        _2052 = _1927;
        _2054 = _1928;
        _2056 = _1929;
    }
    uint _2062 = _790 + uint(cbMatDynParam._m0[0u].w);
    float _2068 = ((_732 * (_720 - (_720 * _693))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2062].x;
    float _2069 = ((_732 * (_721 - (_721 * _693))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2062].y;
    float _2070 = ((_732 * (_722 - (_722 * _693))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2062].z;
    float _3771 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _3782 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3793 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2087 = (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_2046 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _814))) + ((_2052 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + _2068;
    float _2089 = (_2069 + ((_2054 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_2048 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _814)));
    float _2091 = (_2070 + ((_2056 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_2050 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _814)));
    float _3819 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2104 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    uint _2105 = _788 + 6u;
    float _2113 = _774 / cbSceneParam._m0[86u].x;
    float _2114 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2130 = _2128.x;
    float _2131 = _2128.y;
    float _2132 = _2128.z;
    float _2133 = _2128.w;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _2175 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _2176 = _2175 / _761;
        float _2187 = _2176 * _276;
        float _2188 = _277 * _2176;
        float _2189 = (-0.0) - _2188;
        float _2190 = _2176 * _278;
        float _2192 = (cbSceneParam._m0[77u].w * _2189) / _2175;
        float _2193 = _2192 + cbSceneParam._m0[79u].w;
        float _2194 = cbSceneParam._m0[79u].w - _2188;
        float _2200 = sqrt(((_2187 * _2187) + (_2188 * _2188)) + (_2190 * _2190));
        float _2203 = (1.0 - (cbSceneParam._m0[77u].w / _2175)) * _2200;
        float _2209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2426;
        if (abs((_2189 - _2192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2426 = ((((_2193 > 0.0) ? exp2(_2209 * _2193) : (2.0 - exp2(_2211 * _2193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2203;
        }
        else
        {
            float _2361 = 1.0 / cbSceneParam._m0[80u].x;
            float _2362 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : max(_2193, _2194));
            float _2363 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : min(_2193, _2194));
            float _2372 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : min(_2362, 0.0));
            float _2373 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : min(_2363, 0.0));
            _2426 = ((abs(_2200 / _2189) * cbSceneParam._m0[80u].y) * ((((_2372 - _2373) * 2.0) - ((exp2(_2209 * (isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0)))) - exp2(_2209 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0))))) * _2361)) - ((exp2(_2211 * _2372) - exp2(_2211 * _2373)) * _2361))) + (_2203 * cbSceneParam._m0[80u].z);
        }
        vec4 _2428 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, 1.0), 0.0);
        float _2437 = exp2((_2426 * (-1.44269502162933349609375)) * (1.0 - _2428.w));
        float _2438 = log2(_2437);
        float _2454 = log2(_2133);
        _2213 = (exp2(_2454 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2438 * cbSceneParam._m0[78u].x)) * _2428.x) / cbSceneParam._m0[78u].x)) + _2130;
        _2215 = (exp2(_2454 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2438 * cbSceneParam._m0[78u].y)) * _2428.y) / cbSceneParam._m0[78u].y)) + _2131;
        _2217 = (exp2(_2454 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2438 * cbSceneParam._m0[78u].z)) * _2428.z) / cbSceneParam._m0[78u].z)) + _2132;
        _2219 = _2437 * _2133;
    }
    else
    {
        _2213 = _2130;
        _2215 = _2131;
        _2217 = _2132;
        _2219 = _2133;
    }
    float _2230 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2231 = _2230 == 3.0;
    float _2233 = log2(_2219);
    float _2237 = exp2(_2233 * cbSceneParam._m0[78u].x);
    float _2238 = exp2(_2233 * cbSceneParam._m0[78u].y);
    float _2239 = exp2(_2233 * cbSceneParam._m0[78u].z);
    float _2240 = _2237 * (isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0)));
    float _2241 = _2238 * (isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0)));
    float _2242 = _2239 * (isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0)));
    float _2251 = (_2230 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2251 * (_2231 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2213)));
    SV_Target.y = _2251 * (_2231 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2215)));
    SV_Target.z = _2251 * (_2231 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2217)));
    SV_Target.w = cbInstanceData._m0[_2105].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2068) * _2104) * _2237) * _2251;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2069) * _2104) * _2238) * _2251;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2070) * _2104) * _2239) * _2251;
    SV_Target_1.w = cbInstanceData._m0[_2105].w;
}


