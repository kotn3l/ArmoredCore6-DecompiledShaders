#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _995;
uint _2446;
uint _2447;
uint _2448;
uint _2661;
uint _2662;
uint _2663;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    float _572 = (cbMtdParam._m0[16u].x * cbMtdParam._m0[19u].y) * _561;
    float _574 = (_562 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].y;
    float _576 = (_563 * cbMtdParam._m0[19u].y) * cbMtdParam._m0[16u].z;
    vec4 _600 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _605 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _611 = ((_600.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _613 = (-0.0) - (cbMtdParam._m0[21u].x * ((_600.x * 0.5) + (-0.25)));
    float _614 = fract(_605);
    float _616 = fract(_605 + 0.5);
    vec4 _643 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_614 * _613) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_611 * _614) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _645 = _643.x;
    float _651 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_616 * _613) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_611 * _616) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _645) * abs((_614 * 2.0) + (-1.0))) + _645;
    float _657 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _661 = fract(abs(_657));
    float _671 = sin(cbMtdParam._m0[21u].z);
    float _672 = cos(cbMtdParam._m0[21u].z);
    float _673 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _674 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _699 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_674, (-0.0) - _671, _672 * _673) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_674, _672, _673 * _671) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_657 >= ((-0.0) - _657)) ? _661 : ((-0.0) - _661)) * cbMtdParam._m0[18u].z) - _651)) + cbMtdParam._m0[18u].w;
    float _700 = ceil(_699);
    float _2936 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
    float _721 = ((((cbMtdParam._m0[21u].w * _561) * cbMtdParam._m0[15u].x) - _572) * _701) + _572;
    float _722 = ((((cbMtdParam._m0[21u].w * _562) * cbMtdParam._m0[15u].y) - _574) * _701) + _574;
    float _723 = ((((cbMtdParam._m0[21u].w * _563) * cbMtdParam._m0[15u].z) - _576) * _701) + _576;
    float _727 = abs(cbMtdParam._m0[20u].w * _699);
    float _731 = (((_727 * cbMtdParam._m0[18u].y) - _651) * _727) + _651;
    float _2947 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
    vec4 _744 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _759 = (cbMtdParam._m0[14u].x * _744.x) * cbMtdParam._m0[19u].x;
    float _760 = (cbMtdParam._m0[14u].y * _744.y) * cbMtdParam._m0[19u].x;
    float _761 = (cbMtdParam._m0[14u].z * _744.z) * cbMtdParam._m0[19u].x;
    float _768 = exp2(log2(_732) * cbMtdParam._m0[20u].x);
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _808 = _278 * _807;
    float _809 = _279 * _807;
    float _810 = _280 * _807;
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _826 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_816 * cbSceneParam._m0[86u].x, _817 * cbSceneParam._m0[86u].y));
    float _829 = _826.x * TEXCOORD_4;
    float _830 = (-0.0) - _808;
    float _831 = (-0.0) - _809;
    float _832 = (-0.0) - _810;
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = (cbModelParam._m0[37u].x * ((((fma(_862, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _919 = (cbModelParam._m0[37u].y * ((((fma(_862, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _920 = (((((fma(_862, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        _994 = _957 * (_923.z + (-0.5));
        _996 = _957 * (_923.y + (-0.5));
        _997 = _957 * (_923.x + (-0.5));
        _998 = _967 * (_930.z + (-0.5));
        _999 = _967 * (_930.y + (-0.5));
        _1000 = _967 * (_930.x + (-0.5));
        _1001 = _977 * (_937.z + (-0.5));
        _1002 = _977 * (_937.y + (-0.5));
        _1003 = _977 * (_937.x + (-0.5));
        _1004 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        _1005 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        _1006 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
    }
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = (cbModelParam._m0[38u].x * ((((fma(_862, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _854)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1060 = (cbModelParam._m0[38u].y * ((((fma(_862, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _854)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1061 = (((((fma(_862, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _854)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        _1133 = _1096 * (_1063.z + (-0.5));
        _1134 = _1096 * (_1063.y + (-0.5));
        _1135 = _1096 * (_1063.x + (-0.5));
        _1136 = _1106 * (_1070.z + (-0.5));
        _1137 = _1106 * (_1070.y + (-0.5));
        _1138 = _1106 * (_1070.x + (-0.5));
        _1139 = _1116 * (_1077.z + (-0.5));
        _1140 = _1116 * (_1077.y + (-0.5));
        _1141 = _1116 * (_1077.x + (-0.5));
        _1142 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        _1143 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        _1144 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    }
    else
    {
        _1133 = _995;
        _1134 = _995;
        _1135 = _995;
        _1136 = _995;
        _1137 = _995;
        _1138 = _995;
        _1139 = _995;
        _1140 = _995;
        _1141 = _995;
        _1142 = _995;
        _1143 = _995;
        _1144 = _995;
    }
    float _1159 = _808 * (-0.5);
    float _1160 = _809 * (-0.5);
    float _1161 = _810 * (-0.5);
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1203;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1175 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_994, _998, _1001, _1004));
        float _1179 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_996, _999, _1002, _1005));
        float _1183 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1190 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1214;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1205 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1205) ? 0.0 : (isnan(0.0) ? _1205 : max(0.0, _1205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1218 = (_1214 * cbModelParam._m0[1u].x) + (_1203 * (1.0 - cbModelParam._m0[1u].x));
    float _1224 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1305;
    float _1307;
    float _1309;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1272 = fma(_862, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854)) + cbModelParam._m0[13u].w;
        float _1276 = fma(_862, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854)) + cbModelParam._m0[14u].w;
        float _1280 = fma(_862, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854)) + cbModelParam._m0[15u].w;
        float _1283 = fma(_832, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830));
        float _1286 = fma(_832, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830));
        float _1289 = fma(_832, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830));
        float _1315;
        if (_1283 > 0.0)
        {
            _1315 = abs((1.0 - _1272) / _1283);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1272 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1315 = frontier_phi_38_36_ladder;
        }
        float _1503;
        if (_1286 > 0.0)
        {
            _1503 = abs((1.0 - _1276) / _1286);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1276 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1503 = frontier_phi_47_43_ladder;
        }
        float _1857;
        if (_1289 > 0.0)
        {
            _1857 = abs((1.0 - _1280) / _1289);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1280 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _1857 = frontier_phi_59_54_ladder;
        }
        float _1859 = isnan(_1503) ? _1315 : (isnan(_1315) ? _1503 : min(_1315, _1503));
        float _1860 = isnan(_1857) ? _1859 : (isnan(_1859) ? _1857 : min(_1859, _1857));
        float _1864 = (_1860 * _1283) + _1272;
        float _1865 = (_1860 * _1286) + _1276;
        float _1866 = (_1860 * _1289) + _1280;
        float _1867 = _1860 * 9.9999997473787516355514526367188e-05;
        float _1869 = (-1.0) - _1867;
        float _1871 = _1867 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_1866 > _1871) || ((_1866 < _1869) || ((_1865 > _1871) || ((_1865 < _1869) || ((_1864 < _1869) || (_1864 > _1871))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1866, cbModelParam._m0[9u].z, fma(_1865, cbModelParam._m0[9u].y, _1864 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1866, cbModelParam._m0[10u].z, fma(_1865, cbModelParam._m0[10u].y, _1864 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1866, cbModelParam._m0[11u].z, fma(_1865, cbModelParam._m0[11u].y, _1864 * cbModelParam._m0[11u].x))), _1224);
            frontier_phi_37_59_ladder = _2110.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2110.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2110.x * cbModelParam._m0[1u].y;
        }
        _1305 = frontier_phi_37_59_ladder_2;
        _1307 = frontier_phi_37_59_ladder_1;
        _1309 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_830, _831, _832), _1224);
        _1305 = _1293.x * cbModelParam._m0[1u].y;
        _1307 = _1293.y * cbModelParam._m0[1u].y;
        _1309 = _1293.z * cbModelParam._m0[1u].y;
    }
    float _1312 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_862, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_862, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_862, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_832, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830));
        float _1378 = fma(_832, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830));
        float _1381 = fma(_832, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830));
        float _1508;
        if (_1375 > 0.0)
        {
            _1508 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1508 = frontier_phi_49_45_ladder;
        }
        float _1884;
        if (_1378 > 0.0)
        {
            _1884 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1884 = frontier_phi_61_56_ladder;
        }
        float _2234;
        if (_1381 > 0.0)
        {
            _2234 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2234 = frontier_phi_73_68_ladder;
        }
        float _2236 = isnan(_1884) ? _1508 : (isnan(_1508) ? _1884 : min(_1508, _1884));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1375) + _1364;
        float _2242 = (_2237 * _1378) + _1368;
        float _2243 = (_2237 * _1381) + _1372;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2244;
        float _2247 = _2244 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2243 > _2247) || ((_2243 < _2245) || ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 < _2245) || (_2241 > _2247))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2243, cbModelParam._m0[17u].z, fma(_2242, cbModelParam._m0[17u].y, _2241 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2243, cbModelParam._m0[18u].z, fma(_2242, cbModelParam._m0[18u].y, _2241 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2243, cbModelParam._m0[19u].z, fma(_2242, cbModelParam._m0[19u].y, _2241 * cbModelParam._m0[19u].x))), _1312);
            frontier_phi_46_73_ladder = _2349.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2349.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2349.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_46_73_ladder_2;
        _1402 = frontier_phi_46_73_ladder_1;
        _1404 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_830, _831, _832), _1312);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _829 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1305)) + _1305);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1307)) + _1307);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1309)) + _1309);
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    float _1482 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1490 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1494 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1495 = _1482 / _1494;
    float _1496 = _1486 / _1494;
    float _1497 = _1490 / _1494;
    float _1645;
    float _1646;
    float _1647;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1524 = ((uint(_1497 > cbSceneParam._m0[59u].y) + uint(_1497 > cbSceneParam._m0[59u].x)) + uint(_1497 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1525 = _1524 + 43u;
        uint _1533 = _1524 + 44u;
        uint _1541 = _1524 + 45u;
        uint _1549 = _1524 + 46u;
        float _1560 = fma(_1494, cbSceneParam._m0[_1525].w, fma(_1490, cbSceneParam._m0[_1525].z, fma(_1486, cbSceneParam._m0[_1525].y, _1482 * cbSceneParam._m0[_1525].x)));
        float _1564 = fma(_1494, cbSceneParam._m0[_1533].w, fma(_1490, cbSceneParam._m0[_1533].z, fma(_1486, cbSceneParam._m0[_1533].y, _1482 * cbSceneParam._m0[_1533].x)));
        float _1572 = fma(_1494, cbSceneParam._m0[_1549].w, fma(_1490, cbSceneParam._m0[_1549].z, fma(_1486, cbSceneParam._m0[_1549].y, _1482 * cbSceneParam._m0[_1549].x)));
        float _1577 = cbSceneParam._m0[33u].z * _1572;
        float _1579 = cbSceneParam._m0[33u].w * _1572;
        float _1582 = fma(_1494, cbSceneParam._m0[_1541].w, fma(_1490, cbSceneParam._m0[_1541].z, fma(_1486, cbSceneParam._m0[_1541].y, _1482 * cbSceneParam._m0[_1541].x))) / _1572;
        float _1630 = (cbSceneParam._m0[33u].x - sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497))) * cbSceneParam._m0[33u].y;
        float _3073 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1638 = (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 + _1560) / _1572, (_1579 + _1564) / _1572), _1582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1579 + _1560) / _1572, (_1564 - _1577) / _1572), _1582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1560 - _1577) / _1572, (_1564 - _1579) / _1572), _1582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1560 - _1579) / _1572, (_1577 + _1564) / _1572), _1582), 0.0)).x), vec4(0.25)));
        _1645 = 1.0 - (_1638 * cbSceneParam._m0[34u].x);
        _1646 = 1.0 - (_1638 * cbSceneParam._m0[34u].y);
        _1647 = 1.0 - (_1638 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1645 = 1.0;
        _1646 = 1.0;
        _1647 = 1.0;
    }
    float _1711;
    float _1713;
    float _1715;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1699 = fma(_1494, cbSceneParam._m0[63u].w, fma(_1490, cbSceneParam._m0[63u].z, fma(_1486, cbSceneParam._m0[63u].y, _1482 * cbSceneParam._m0[63u].x)));
        float _1700 = fma(_1494, cbSceneParam._m0[60u].w, fma(_1490, cbSceneParam._m0[60u].z, fma(_1486, cbSceneParam._m0[60u].y, _1482 * cbSceneParam._m0[60u].x))) / _1699;
        float _1701 = fma(_1494, cbSceneParam._m0[61u].w, fma(_1490, cbSceneParam._m0[61u].z, fma(_1486, cbSceneParam._m0[61u].y, _1482 * cbSceneParam._m0[61u].x))) / _1699;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1700 >= cbSceneParam._m0[64u].x) && (_1701 >= cbSceneParam._m0[64u].y)) && (_1700 <= cbSceneParam._m0[64u].z)) && (_1701 <= cbSceneParam._m0[64u].w))
        {
            float _1897 = fma(_1494, cbSceneParam._m0[62u].w, fma(_1490, cbSceneParam._m0[62u].z, fma(_1486, cbSceneParam._m0[62u].y, _1482 * cbSceneParam._m0[62u].x))) / _1699;
            float _1901 = isnan(cbSceneParam._m0[41u].w) ? _1897 : (isnan(_1897) ? cbSceneParam._m0[41u].w : max(_1897, cbSceneParam._m0[41u].w));
            float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497))) * cbSceneParam._m0[33u].y;
            float _3089 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
            float _1951 = (isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1700, cbSceneParam._m0[33u].w + _1701), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1700, _1701 - cbSceneParam._m0[33u].z), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1700 - cbSceneParam._m0[33u].z, _1701 - cbSceneParam._m0[33u].w), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1700 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1701), _1901), 0.0)).x), vec4(0.25)));
            float _1955 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
            float _1956 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
            float _1957 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_1955) ? _1645 : (isnan(_1645) ? _1955 : min(_1645, _1955));
            frontier_phi_58_57_ladder_1 = isnan(_1956) ? _1646 : (isnan(_1646) ? _1956 : min(_1646, _1956));
            frontier_phi_58_57_ladder_2 = isnan(_1957) ? _1647 : (isnan(_1647) ? _1957 : min(_1647, _1957));
        }
        else
        {
            frontier_phi_58_57_ladder = _1645;
            frontier_phi_58_57_ladder_1 = _1646;
            frontier_phi_58_57_ladder_2 = _1647;
        }
        _1711 = frontier_phi_58_57_ladder;
        _1713 = frontier_phi_58_57_ladder_1;
        _1715 = frontier_phi_58_57_ladder_2;
    }
    else
    {
        _1711 = _1645;
        _1713 = _1646;
        _1715 = _1647;
    }
    uint _1717 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1721 = floatBitsToUint(cbInstanceData._m0[_1717 + 5u]);
    uint _1723 = _1721.x * 14u;
    uint _1724 = _1723 + 13u;
    float _1729 = _829 + (-1.0);
    float _1732 = (cbLight._m0[_1724].x * _1729) + 1.0;
    float _1733 = (cbLight._m0[_1724].y * _1729) + 1.0;
    uint _1734 = _1723 + 8u;
    float _1745 = cbLight._m0[_1723].x + _808;
    float _1746 = cbLight._m0[_1723].y + _809;
    float _1747 = cbLight._m0[_1723].z + _810;
    float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
    float _1755 = dot(vec3(0.0), vec3(cbLight._m0[_1723].xyz));
    float _3115 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
    float _1759 = dot(vec3(0.0), vec3(_808, _809, _810));
    float _3126 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1745 * _1751, _1746 * _1751, _1747 * _1751));
    float _3137 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1774 = (exp2(log2(1.0 - (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = (0.5 / ((_1758 + 9.9999999392252902907785028219223e-09) + _1762)) * _1758;
    float _3148 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * 0.31831014156341552734375;
    float _1784 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1797 = _1723 + 9u;
    uint _1803 = _1723 | 1u;
    float _1809 = cbLight._m0[_1803].x + _808;
    float _1810 = cbLight._m0[_1803].y + _809;
    float _1811 = cbLight._m0[_1803].z + _810;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1819 = dot(vec3(0.0), vec3(cbLight._m0[_1803].xyz));
    float _3164 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1809 * _1815, _1810 * _1815, _1811 * _1815));
    float _3175 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = (0.5 / ((_1822 + 9.9999999392252902907785028219223e-09) + _1762)) * _1822;
    float _3186 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * 0.31831014156341552734375;
    float _1839 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    float _1849 = (((_1832 * cbLight._m0[_1797].x) * _1838) * _1839) + ((((cbLight._m0[_1734].x * _1711) * _1774) * _1782) * _1784);
    float _1850 = (((_1832 * cbLight._m0[_1797].y) * _1838) * _1839) + ((((cbLight._m0[_1734].y * _1713) * _1774) * _1782) * _1784);
    float _1851 = (((_1832 * cbLight._m0[_1797].z) * _1838) * _1839) + ((((cbLight._m0[_1734].z * _1715) * _1774) * _1782) * _1784);
    float _2015;
    float _2017;
    float _2019;
    if (_1721.y == 0u)
    {
        uvec4 _1969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1970 = _1969.x;
        uint _1981 = uint((float(_1969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _1970))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _1970)));
        float _1991 = (log2(_1497 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1992 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        uint _1995 = uint(isnan(14.0) ? _1992 : (isnan(_1992) ? 14.0 : min(_1992, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1995 << 2u) + (_1981 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1969.z;
        float _2119;
        float _2121;
        float _2123;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
        }
        else
        {
            float _2120;
            float _2122;
            float _2124;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            uint _2283 = 0u;
            uint _2292;
            bool _2293;
            for (;;)
            {
                _2292 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2283 << 2u)) >> 2u)).x;
                _2293 = _2292 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                if (_2293)
                {
                    frontier_phi_82_pred = _2282;
                    frontier_phi_82_pred_1 = _2281;
                    frontier_phi_82_pred_2 = _2280;
                }
                else
                {
                    float _2416;
                    float _2417;
                    float _2418;
                    uint _2419;
                    _2416 = _2280;
                    _2417 = _2281;
                    _2418 = _2282;
                    _2419 = _2292;
                    float _2354;
                    float _2355;
                    float _2356;
                    for (;;)
                    {
                        uint _2423 = uint(findLSB(_2419)) + (_2283 << 5u);
                        uint _2420 = (_2419 + 4294967295u) & _2419;
                        uint _2425 = _2423 * 48u;
                        vec4 _2439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2425)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2425 + 3u)).x));
                        uint _2456 = (_2423 * 48u) + 8u;
                        vec3 _2467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2456)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 2u)).x));
                        float _2471 = _2439.x - _1495;
                        float _2472 = _2439.y - _1496;
                        float _2473 = _2439.z - _1497;
                        float _2474 = dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473));
                        float _2477 = inversesqrt(_2474);
                        float _2486 = 1.0 - (_2474 * _2439.w);
                        float _3212 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _2488 = sqrt(_2474) * uintBitsToFloat(uvec4(_2446, _2447, _2448, texelFetch(g_PointLightRenderingBuffer, int(((_2423 * 48u) + 4u) + 3u)).x)).w;
                        float _2491 = 1.39999997615814208984375 / (_2488 + 1.39999997615814208984375);
                        float _2492 = _2491 * _2491;
                        float _2495 = ((1.0 - _2492) * dot(vec3(0.0), vec3(_2477 * _2471, _2477 * _2472, _2477 * _2473))) + _2492;
                        float _2497 = (-0.0) - _1495;
                        float _2498 = (-0.0) - _1496;
                        float _2499 = (-0.0) - _1497;
                        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
                        float _2507 = dot(vec3(0.0), vec3(_2503 * _2497, _2503 * _2498, _2503 * _2499));
                        float _3223 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _3234 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2511 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
                        float _2515 = (0.5 / (((isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) + 9.9999999392252902907785028219223e-09) + _2511)) * _2511;
                        float _3245 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2524 = (((isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * 3.1415927410125732421875) / (((_2488 * _2488) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0)));
                        _2354 = (_2524 * _2467.x) + _2416;
                        _2355 = (_2524 * _2467.y) + _2417;
                        _2356 = (_2524 * _2467.z) + _2418;
                        if (_2420 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2416 = _2354;
                            _2417 = _2355;
                            _2418 = _2356;
                            _2419 = _2420;
                        }
                    }
                    frontier_phi_82_pred = _2356;
                    frontier_phi_82_pred_1 = _2355;
                    frontier_phi_82_pred_2 = _2354;
                }
                _2124 = frontier_phi_82_pred;
                _2122 = frontier_phi_82_pred_1;
                _2120 = frontier_phi_82_pred_2;
                uint _2284 = _2283 + 1u;
                if (_2284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2280 = _2120;
                    _2281 = _2122;
                    _2282 = _2124;
                    _2283 = _2284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
        }
        uvec4 _2127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2128 = _2127.z;
        uint _2130 = (_2128 >> 8u) & 15u;
        float _2260;
        float _2262;
        float _2264;
        if (((4294967295u << _2130) & _2002) == 0u)
        {
            _2260 = _2119;
            _2262 = _2121;
            _2264 = _2123;
        }
        else
        {
            float _2276 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            if (_2130 < ((_2128 >> 12u) & 15u))
            {
                float _2261;
                float _2263;
                float _2265;
                float _2402 = _2119;
                float _2403 = _2121;
                float _2404 = _2123;
                uint _2405 = _2130;
                uint _2414;
                bool _2415;
                for (;;)
                {
                    _2414 = texelFetch(g_lightClassification, int((((_1995 << 5u) + (_1981 << 9u)) + (_2405 << 2u)) >> 2u)).x;
                    _2415 = _2414 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    if (_2415)
                    {
                        frontier_phi_88_pred = _2404;
                        frontier_phi_88_pred_1 = _2403;
                        frontier_phi_88_pred_2 = _2402;
                    }
                    else
                    {
                        float _2529;
                        float _2530;
                        float _2531;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2539 = _2402;
                        float _2540 = _2403;
                        float _2541 = _2404;
                        uint _2542 = _2414;
                        uint _2543;
                        uint _2553;
                        vec4 _2568;
                        float _2569;
                        vec3 _2581;
                        vec4 _2596;
                        vec4 _2611;
                        float _2657;
                        bool _2658;
                        for (;;)
                        {
                            _2553 = ((_2405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2542));
                            _2543 = (_2542 + 4294967295u) & _2542;
                            uint _2555 = _2553 * 40u;
                            _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            _2569 = _2568.w;
                            uint _2571 = (_2553 * 40u) + 8u;
                            _2581 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x));
                            uint _2583 = (_2553 * 40u) + 16u;
                            _2596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 3u)).x));
                            uint _2598 = (_2553 * 40u) + 20u;
                            _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            uint _2613 = (_2553 * 40u) + 24u;
                            vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2632 = (_2553 * 40u) + 28u;
                            vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            _2657 = fma(_1497, _2645.z, fma(_1496, _2645.y, _2645.x * _1495)) + _2645.w;
                            _2658 = !((fma(_1497, _2626.z, fma(_1496, _2626.y, _2626.x * _1495)) + _2626.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            if (_2658)
                            {
                                float _2692 = _2568.x - _1495;
                                float _2693 = _2568.y - _1496;
                                float _2694 = _2568.z - _1497;
                                float _2695 = dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694));
                                float _2698 = inversesqrt(_2695);
                                float _2705 = 1.0 - (_2695 / (_2569 * _2569));
                                float _3256 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                                float _2707 = sqrt(_2695) * uintBitsToFloat(uvec4(_2661, _2662, _2663, texelFetch(g_SpotLightRenderingBuffer, int(((_2553 * 40u) + 4u) + 3u)).x)).w;
                                float _2709 = 1.39999997615814208984375 / (_2707 + 1.39999997615814208984375);
                                float _2710 = _2709 * _2709;
                                float _2713 = (fma(_1497, _2596.z, fma(_1496, _2596.y, _2596.x * _1495)) + _2596.w) / _2657;
                                float _2714 = (fma(_1497, _2611.z, fma(_1496, _2611.y, _2611.x * _1495)) + _2611.w) / _2657;
                                float _2718 = 1.0 - dot(vec2(_2713, _2714), vec2(_2713, _2714));
                                float _3267 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                                float _2726 = dot(vec3(0.0), vec3((-0.0) - (_1495 * _2276), (-0.0) - (_1496 * _2276), (-0.0) - (_1497 * _2276)));
                                float _3278 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                                float _2734 = ((1.0 - _2710) * dot(vec3(0.0), vec3(_2698 * _2692, _2698 * _2693, _2698 * _2694))) + _2710;
                                float _3289 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                                float _2735 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
                                float _2739 = (0.5 / (((isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) + 9.9999999392252902907785028219223e-09) + _2735)) * _2735;
                                float _3300 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2746 = ((isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * (((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * 3.1415927410125732421875) / (((_2707 * _2707) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _2746 * _2581.x;
                                frontier_phi_94_pred_1 = _2746 * _2581.z;
                                frontier_phi_94_pred_2 = _2746 * _2581.y;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                            }
                            _2750 = frontier_phi_94_pred;
                            _2752 = frontier_phi_94_pred_1;
                            _2751 = frontier_phi_94_pred_2;
                            _2529 = _2750 + _2539;
                            _2530 = _2751 + _2540;
                            _2531 = _2752 + _2541;
                            if (_2543 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2539 = _2529;
                                _2540 = _2530;
                                _2541 = _2531;
                                _2542 = _2543;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2531;
                        frontier_phi_88_pred_1 = _2530;
                        frontier_phi_88_pred_2 = _2529;
                    }
                    _2265 = frontier_phi_88_pred;
                    _2263 = frontier_phi_88_pred_1;
                    _2261 = frontier_phi_88_pred_2;
                    uint _2406 = _2405 + 1u;
                    if (_2406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2402 = _2261;
                        _2403 = _2263;
                        _2404 = _2265;
                        _2405 = _2406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2265;
                frontier_phi_75_76_ladder_1 = _2263;
                frontier_phi_75_76_ladder_2 = _2261;
            }
            else
            {
                frontier_phi_75_76_ladder = _2123;
                frontier_phi_75_76_ladder_1 = _2121;
                frontier_phi_75_76_ladder_2 = _2119;
            }
            _2260 = frontier_phi_75_76_ladder_2;
            _2262 = frontier_phi_75_76_ladder_1;
            _2264 = frontier_phi_75_76_ladder;
        }
        float _2269 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2015 = ((_2260 * 0.039999999105930328369140625) * _2269) + _1849;
        _2017 = ((_2262 * 0.039999999105930328369140625) * _2269) + _1850;
        _2019 = ((_2264 * 0.039999999105930328369140625) * _2269) + _1851;
    }
    else
    {
        _2015 = _1849;
        _2017 = _1850;
        _2019 = _1851;
    }
    uint _2026 = (_1717 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2032 = (cbSceneParam._m0[72u].y * ((_768 * ((_759 - _721) - (_759 * _732))) + _721)) * cbInstanceData._m0[_2026].x;
    float _2033 = (cbSceneParam._m0[72u].y * ((_768 * ((_760 - _722) - (_760 * _732))) + _722)) * cbInstanceData._m0[_2026].y;
    float _2034 = (((_768 * ((_761 - _723) - (_761 * _732))) + _723) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2026].z;
    float _2041 = _2032 + ((_2015 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1218)) * cbPerFrame._m0[3u].x);
    float _2042 = _2033 + ((_2017 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1218)) * cbPerFrame._m0[3u].x);
    float _2043 = _2034 + ((_2019 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1218)) * cbPerFrame._m0[3u].x);
    float _3331 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2056 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    uint _2057 = _1717 + 6u;
    float _2065 = _816 / cbSceneParam._m0[86u].x;
    float _2066 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2082 = _2080.x;
    float _2083 = _2080.y;
    float _2084 = _2080.z;
    float _2085 = _2080.w;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _2138 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _2139 = _2138 / _803;
        float _2150 = _2139 * _278;
        float _2151 = _279 * _2139;
        float _2152 = (-0.0) - _2151;
        float _2153 = _2139 * _280;
        float _2155 = (cbSceneParam._m0[77u].w * _2152) / _2138;
        float _2156 = _2155 + cbSceneParam._m0[79u].w;
        float _2157 = cbSceneParam._m0[79u].w - _2151;
        float _2163 = sqrt(((_2150 * _2150) + (_2151 * _2151)) + (_2153 * _2153));
        float _2166 = (1.0 - (cbSceneParam._m0[77u].w / _2138)) * _2163;
        float _2171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2364;
        if (abs((_2152 - _2155) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2364 = ((((_2156 > 0.0) ? exp2(_2171 * _2156) : (2.0 - exp2(_2173 * _2156))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2166;
        }
        else
        {
            float _2306 = 1.0 / cbSceneParam._m0[80u].x;
            float _2307 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : max(_2156, _2157));
            float _2308 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : min(_2156, _2157));
            float _2317 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : min(_2307, 0.0));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            _2364 = ((abs(_2163 / _2152) * cbSceneParam._m0[80u].y) * ((((_2317 - _2318) * 2.0) - ((exp2(_2171 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0)))) - exp2(_2171 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0))))) * _2306)) - ((exp2(_2173 * _2317) - exp2(_2173 * _2318)) * _2306))) + (_2166 * cbSceneParam._m0[80u].z);
        }
        vec4 _2366 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, 1.0), 0.0);
        float _2375 = exp2((_2364 * (-1.44269502162933349609375)) * (1.0 - _2366.w));
        float _2376 = log2(_2375);
        float _2392 = log2(_2085);
        _2175 = (exp2(_2392 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2376 * cbSceneParam._m0[78u].x)) * _2366.x) / cbSceneParam._m0[78u].x)) + _2082;
        _2177 = (exp2(_2392 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2376 * cbSceneParam._m0[78u].y)) * _2366.y) / cbSceneParam._m0[78u].y)) + _2083;
        _2179 = (exp2(_2392 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2376 * cbSceneParam._m0[78u].z)) * _2366.z) / cbSceneParam._m0[78u].z)) + _2084;
        _2181 = _2375 * _2085;
    }
    else
    {
        _2175 = _2082;
        _2177 = _2083;
        _2179 = _2084;
        _2181 = _2085;
    }
    float _2192 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2193 = _2192 == 3.0;
    float _2195 = log2(_2181);
    float _2199 = exp2(_2195 * cbSceneParam._m0[78u].x);
    float _2200 = exp2(_2195 * cbSceneParam._m0[78u].y);
    float _2201 = exp2(_2195 * cbSceneParam._m0[78u].z);
    float _2202 = _2199 * (isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)));
    float _2203 = _2200 * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2204 = _2201 * (isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)));
    float _2213 = (_2192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2213 * (_2193 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2175)));
    SV_Target.y = _2213 * (_2193 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.z = _2213 * (_2193 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2179)));
    SV_Target.w = cbInstanceData._m0[_2057].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2032) * _2056) * _2199) * _2213;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2033) * _2056) * _2200) * _2213;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2034) * _2056) * _2201) * _2213;
    SV_Target_1.w = cbInstanceData._m0[_2057].w;
}


