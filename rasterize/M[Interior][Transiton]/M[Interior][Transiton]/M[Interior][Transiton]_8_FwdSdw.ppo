#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _392;
uint _2347;
uint _2348;
uint _2349;
uint _2562;
uint _2563;
uint _2564;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _204 = _203 * _195;
    float _205 = _203 * _196;
    float _206 = _203 * _197;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _324 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _336 = cbMtdParam._m0[28u].z + _271;
    float _337 = cbMtdParam._m0[28u].w + _272;
    float _338 = cbMtdParam._m0[29u].x + _273;
    float _355 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_317 * _204, _317 * _205, _317 * _206));
    float _356 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_324 * _215, _324 * _216, _324 * _217));
    float _357 = (-0.0) - dot(vec3(_336, _337, _338), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _367 = ((cbMtdParam._m0[25u].y * _355) * _361) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _368 = ((cbMtdParam._m0[25u].z * _356) * _361) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _371 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _372 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _390;
    float _393;
    float _395;
    if (_367 > 0.0)
    {
        float _376 = (1.0 - _371) / _367;
        _390 = _376;
        _393 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_376 * _362)) * 0.16666667163372039794921875;
        _395 = (fract((_376 * _368) + _372) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _391 = ((-0.0) - _371) / _367;
            frontier_phi_3_2_ladder = (fract(_391 * _362) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _391;
            frontier_phi_3_2_ladder_2 = (fract((_391 * _368) + _372) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _390 = frontier_phi_3_2_ladder_1;
        _393 = frontier_phi_3_2_ladder;
        _395 = frontier_phi_3_2_ladder_2;
    }
    float _421;
    float _423;
    float _425;
    if (_368 > 0.0)
    {
        float _408 = (1.0 - _372) / _368;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_408 < _390)
        {
            frontier_phi_8_5_ladder = (fract(_408 * _362) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_408 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _408;
        }
        else
        {
            frontier_phi_8_5_ladder = _395;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _390;
        }
        _421 = frontier_phi_8_5_ladder_2;
        _423 = frontier_phi_8_5_ladder_1;
        _425 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_368 < 0.0)
        {
            float _422 = ((-0.0) - _372) / _368;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_422 < _390)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_422 * _362) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_422 * _367) + _371) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _422;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _395;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _390;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _395;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _390;
        }
        _421 = frontier_phi_8_6_ladder_2;
        _423 = frontier_phi_8_6_ladder_1;
        _425 = frontier_phi_8_6_ladder;
    }
    float _429 = (_362 > 0.0) ? (cbMtdParam._m0[20u].z / _362) : 5000.0;
    float _442;
    float _443;
    if (_429 < _421)
    {
        _442 = ((_371 + cbMtdParam._m0[22u].x) + (_429 * _367)) * 0.16666667163372039794921875;
        _443 = (((_429 * _368) + _372) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _442 = _423;
        _443 = _425;
    }
    vec4 _445 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_442, _443));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _461 = (cbMtdParam._m0[19u].y * _447) * cbMtdParam._m0[16u].x;
    float _463 = (cbMtdParam._m0[19u].y * _448) * cbMtdParam._m0[16u].y;
    float _465 = (cbMtdParam._m0[19u].y * _449) * cbMtdParam._m0[16u].z;
    vec4 _492 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _497 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _503 = ((_492.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _505 = (-0.0) - (cbMtdParam._m0[21u].x * ((_492.x * 0.5) + (-0.25)));
    float _506 = fract(_497);
    float _508 = fract(_497 + 0.5);
    vec4 _535 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_506 * _505) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_503 * _506) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _537 = _535.x;
    float _543 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_508 * _505) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_503 * _508) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _537) * abs((_506 * 2.0) + (-1.0))) + _537;
    float _554 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _558 = fract(abs(_554));
    float _565 = sin(cbMtdParam._m0[21u].z);
    float _566 = cos(cbMtdParam._m0[21u].z);
    float _567 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _568 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _593 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_568, (-0.0) - _565, _566 * _567) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_568, _566, _567 * _565) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_554 >= ((-0.0) - _554)) ? _558 : ((-0.0) - _558)) * cbMtdParam._m0[18u].z) - _543)) + cbMtdParam._m0[18u].w;
    float _594 = ceil(_593);
    float _2799 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0));
    float _615 = ((((cbMtdParam._m0[21u].w * _447) * cbMtdParam._m0[15u].x) - _461) * _595) + _461;
    float _616 = ((((cbMtdParam._m0[21u].w * _448) * cbMtdParam._m0[15u].y) - _463) * _595) + _463;
    float _617 = ((((cbMtdParam._m0[21u].w * _449) * cbMtdParam._m0[15u].z) - _465) * _595) + _465;
    float _621 = abs(cbMtdParam._m0[20u].w * _593);
    float _625 = (((_621 * cbMtdParam._m0[18u].y) - _543) * _621) + _543;
    float _2810 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0));
    vec4 _638 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _653 = (cbMtdParam._m0[14u].x * _638.x) * cbMtdParam._m0[19u].x;
    float _654 = (cbMtdParam._m0[14u].y * _638.y) * cbMtdParam._m0[19u].x;
    float _655 = (cbMtdParam._m0[14u].z * _638.z) * cbMtdParam._m0[19u].x;
    float _662 = exp2(log2(_626) * cbMtdParam._m0[20u].x);
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _702 = _271 * _701;
    float _703 = _272 * _701;
    float _704 = _273 * _701;
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_710 * cbSceneParam._m0[86u].x, _711 * cbSceneParam._m0[86u].y));
    float _723 = _720.x * TEXCOORD_4;
    float _724 = (-0.0) - _702;
    float _725 = (-0.0) - _703;
    float _726 = (-0.0) - _704;
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = (cbModelParam._m0[37u].x * ((((fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _820 = (cbModelParam._m0[37u].y * ((((fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _821 = (((((fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        _895 = _858 * (_824.z + (-0.5));
        _896 = _858 * (_824.y + (-0.5));
        _897 = _858 * (_824.x + (-0.5));
        _898 = _868 * (_831.z + (-0.5));
        _899 = _868 * (_831.y + (-0.5));
        _900 = _868 * (_831.x + (-0.5));
        _901 = _878 * (_838.z + (-0.5));
        _902 = _878 * (_838.y + (-0.5));
        _903 = _878 * (_838.x + (-0.5));
        _904 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        _905 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        _906 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    }
    else
    {
        _895 = _392;
        _896 = _392;
        _897 = _392;
        _898 = _392;
        _899 = _392;
        _900 = _392;
        _901 = _392;
        _902 = _392;
        _903 = _392;
        _904 = _392;
        _905 = _392;
        _906 = _392;
    }
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _959 = (cbModelParam._m0[38u].x * ((((fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _960 = (cbModelParam._m0[38u].y * ((((fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _961 = (((((fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        _1033 = _996 * (_963.z + (-0.5));
        _1034 = _996 * (_963.y + (-0.5));
        _1035 = _996 * (_963.x + (-0.5));
        _1036 = _1006 * (_970.z + (-0.5));
        _1037 = _1006 * (_970.y + (-0.5));
        _1038 = _1006 * (_970.x + (-0.5));
        _1039 = _1016 * (_977.z + (-0.5));
        _1040 = _1016 * (_977.y + (-0.5));
        _1041 = _1016 * (_977.x + (-0.5));
        _1042 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        _1043 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        _1044 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    }
    else
    {
        _1033 = _392;
        _1034 = _392;
        _1035 = _392;
        _1036 = _392;
        _1037 = _392;
        _1038 = _392;
        _1039 = _392;
        _1040 = _392;
        _1041 = _392;
        _1042 = _392;
        _1043 = _392;
        _1044 = _392;
    }
    float _1059 = _702 * (-0.5);
    float _1060 = _703 * (-0.5);
    float _1061 = _704 * (-0.5);
    float _1062 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1065 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1068 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1103;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1075 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_895, _898, _901, _904));
        float _1079 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_896, _899, _902, _905));
        float _1083 = dot(vec4(_1059, _1060, _1061, 1.0), vec4(_897, _900, _903, _906));
        float _1090 = dot(vec4(cbModelParam._m0[39u]), vec4(_1059, _1060, _1061, 1.0));
        _1103 = dot(vec3(isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)), isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1090) ? 0.0 : (isnan(0.0) ? _1090 : max(0.0, _1090))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1103 = 1.0;
    }
    float _1114;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1105 = dot(vec4(cbModelParam._m0[40u]), vec4(_1059, _1060, _1061, 1.0));
        _1114 = dot(vec3(isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)), isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)), isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1105) ? 0.0 : (isnan(0.0) ? _1105 : max(0.0, _1105))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1114 = 1.0;
    }
    float _1118 = (_1114 * cbModelParam._m0[1u].x) + (_1103 * (1.0 - cbModelParam._m0[1u].x));
    float _1124 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1206;
    float _1208;
    float _1210;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1173 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1177 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1181 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1184 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1187 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1190 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1216;
        if (_1184 > 0.0)
        {
            _1216 = abs((1.0 - _1173) / _1184);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1184 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1173 + 1.0) / _1184);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1216 = frontier_phi_26_24_ladder;
        }
        float _1404;
        if (_1187 > 0.0)
        {
            _1404 = abs((1.0 - _1177) / _1187);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1187 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1177 + 1.0) / _1187);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1404 = frontier_phi_35_31_ladder;
        }
        float _1758;
        if (_1190 > 0.0)
        {
            _1758 = abs((1.0 - _1181) / _1190);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1190 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1181 + 1.0) / _1190);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1758 = frontier_phi_47_42_ladder;
        }
        float _1760 = isnan(_1404) ? _1216 : (isnan(_1216) ? _1404 : min(_1216, _1404));
        float _1761 = isnan(_1758) ? _1760 : (isnan(_1760) ? _1758 : min(_1760, _1758));
        float _1765 = (_1761 * _1184) + _1173;
        float _1766 = (_1761 * _1187) + _1177;
        float _1767 = (_1761 * _1190) + _1181;
        float _1768 = _1761 * 9.9999997473787516355514526367188e-05;
        float _1770 = (-1.0) - _1768;
        float _1772 = _1768 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1767 > _1772) || ((_1767 < _1770) || ((_1766 > _1772) || ((_1766 < _1770) || ((_1765 < _1770) || (_1765 > _1772))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2011 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1767, cbModelParam._m0[9u].z, fma(_1766, cbModelParam._m0[9u].y, _1765 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1767, cbModelParam._m0[10u].z, fma(_1766, cbModelParam._m0[10u].y, _1765 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1767, cbModelParam._m0[11u].z, fma(_1766, cbModelParam._m0[11u].y, _1765 * cbModelParam._m0[11u].x))), _1124);
            frontier_phi_25_47_ladder = _2011.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2011.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2011.x * cbModelParam._m0[1u].y;
        }
        _1206 = frontier_phi_25_47_ladder_2;
        _1208 = frontier_phi_25_47_ladder_1;
        _1210 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1124);
        _1206 = _1194.x * cbModelParam._m0[1u].y;
        _1208 = _1194.y * cbModelParam._m0[1u].y;
        _1210 = _1194.z * cbModelParam._m0[1u].y;
    }
    float _1213 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1301;
    float _1303;
    float _1305;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1265 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1269 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1273 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1276 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1279 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1282 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1409;
        if (_1276 > 0.0)
        {
            _1409 = abs((1.0 - _1265) / _1276);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1265 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1409 = frontier_phi_37_33_ladder;
        }
        float _1785;
        if (_1279 > 0.0)
        {
            _1785 = abs((1.0 - _1269) / _1279);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1269 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _1785 = frontier_phi_49_44_ladder;
        }
        float _2135;
        if (_1282 > 0.0)
        {
            _2135 = abs((1.0 - _1273) / _1282);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1273 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2135 = frontier_phi_61_56_ladder;
        }
        float _2137 = isnan(_1785) ? _1409 : (isnan(_1409) ? _1785 : min(_1409, _1785));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1276) + _1265;
        float _2143 = (_2138 * _1279) + _1269;
        float _2144 = (_2138 * _1282) + _1273;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2145;
        float _2148 = _2145 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2144 > _2148) || ((_2144 < _2146) || ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 < _2146) || (_2142 > _2148))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2144, cbModelParam._m0[17u].z, fma(_2143, cbModelParam._m0[17u].y, _2142 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2144, cbModelParam._m0[18u].z, fma(_2143, cbModelParam._m0[18u].y, _2142 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2144, cbModelParam._m0[19u].z, fma(_2143, cbModelParam._m0[19u].y, _2142 * cbModelParam._m0[19u].x))), _1213);
            frontier_phi_34_61_ladder = _2250.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2250.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2250.x * cbModelParam._m0[1u].z;
        }
        _1301 = frontier_phi_34_61_ladder_2;
        _1303 = frontier_phi_34_61_ladder;
        _1305 = frontier_phi_34_61_ladder_1;
    }
    else
    {
        vec4 _1285 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1213);
        _1301 = _1285.x * cbModelParam._m0[1u].z;
        _1303 = _1285.y * cbModelParam._m0[1u].z;
        _1305 = _1285.z * cbModelParam._m0[1u].z;
    }
    float _1317 = _723 * 0.01200000010430812835693359375;
    float _1319 = _1317 * ((cbModelParam._m0[1u].w * (_1301 - _1206)) + _1206);
    float _1320 = _1317 * ((cbModelParam._m0[1u].w * (_1303 - _1208)) + _1208);
    float _1321 = _1317 * ((cbModelParam._m0[1u].w * (_1305 - _1210)) + _1210);
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, _1319 * cbSceneParam._m0[91u].x));
    float _1383 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1395 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1396 = _1383 / _1395;
    float _1397 = _1387 / _1395;
    float _1398 = _1391 / _1395;
    float _1546;
    float _1547;
    float _1548;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1425 = ((uint(_1398 > cbSceneParam._m0[59u].y) + uint(_1398 > cbSceneParam._m0[59u].x)) + uint(_1398 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1426 = _1425 + 43u;
        uint _1434 = _1425 + 44u;
        uint _1442 = _1425 + 45u;
        uint _1450 = _1425 + 46u;
        float _1461 = fma(_1395, cbSceneParam._m0[_1426].w, fma(_1391, cbSceneParam._m0[_1426].z, fma(_1387, cbSceneParam._m0[_1426].y, _1383 * cbSceneParam._m0[_1426].x)));
        float _1465 = fma(_1395, cbSceneParam._m0[_1434].w, fma(_1391, cbSceneParam._m0[_1434].z, fma(_1387, cbSceneParam._m0[_1434].y, _1383 * cbSceneParam._m0[_1434].x)));
        float _1473 = fma(_1395, cbSceneParam._m0[_1450].w, fma(_1391, cbSceneParam._m0[_1450].z, fma(_1387, cbSceneParam._m0[_1450].y, _1383 * cbSceneParam._m0[_1450].x)));
        float _1478 = cbSceneParam._m0[33u].z * _1473;
        float _1480 = cbSceneParam._m0[33u].w * _1473;
        float _1483 = fma(_1395, cbSceneParam._m0[_1442].w, fma(_1391, cbSceneParam._m0[_1442].z, fma(_1387, cbSceneParam._m0[_1442].y, _1383 * cbSceneParam._m0[_1442].x))) / _1473;
        float _1531 = (cbSceneParam._m0[33u].x - sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398))) * cbSceneParam._m0[33u].y;
        float _2936 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1539 = (isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1478 + _1461) / _1473, (_1480 + _1465) / _1473), _1483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1480 + _1461) / _1473, (_1465 - _1478) / _1473), _1483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1461 - _1478) / _1473, (_1465 - _1480) / _1473), _1483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1461 - _1480) / _1473, (_1478 + _1465) / _1473), _1483), 0.0)).x), vec4(0.25)));
        _1546 = 1.0 - (_1539 * cbSceneParam._m0[34u].x);
        _1547 = 1.0 - (_1539 * cbSceneParam._m0[34u].y);
        _1548 = 1.0 - (_1539 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1546 = 1.0;
        _1547 = 1.0;
        _1548 = 1.0;
    }
    float _1612;
    float _1614;
    float _1616;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1600 = fma(_1395, cbSceneParam._m0[63u].w, fma(_1391, cbSceneParam._m0[63u].z, fma(_1387, cbSceneParam._m0[63u].y, _1383 * cbSceneParam._m0[63u].x)));
        float _1601 = fma(_1395, cbSceneParam._m0[60u].w, fma(_1391, cbSceneParam._m0[60u].z, fma(_1387, cbSceneParam._m0[60u].y, _1383 * cbSceneParam._m0[60u].x))) / _1600;
        float _1602 = fma(_1395, cbSceneParam._m0[61u].w, fma(_1391, cbSceneParam._m0[61u].z, fma(_1387, cbSceneParam._m0[61u].y, _1383 * cbSceneParam._m0[61u].x))) / _1600;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1601 >= cbSceneParam._m0[64u].x) && (_1602 >= cbSceneParam._m0[64u].y)) && (_1601 <= cbSceneParam._m0[64u].z)) && (_1602 <= cbSceneParam._m0[64u].w))
        {
            float _1798 = fma(_1395, cbSceneParam._m0[62u].w, fma(_1391, cbSceneParam._m0[62u].z, fma(_1387, cbSceneParam._m0[62u].y, _1383 * cbSceneParam._m0[62u].x))) / _1600;
            float _1802 = isnan(cbSceneParam._m0[41u].w) ? _1798 : (isnan(_1798) ? cbSceneParam._m0[41u].w : max(_1798, cbSceneParam._m0[41u].w));
            float _1845 = (cbSceneParam._m0[33u].x - sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398))) * cbSceneParam._m0[33u].y;
            float _2952 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
            float _1852 = (isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1601, cbSceneParam._m0[33u].w + _1602), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1601, _1602 - cbSceneParam._m0[33u].z), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1601 - cbSceneParam._m0[33u].z, _1602 - cbSceneParam._m0[33u].w), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1601 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1602), _1802), 0.0)).x), vec4(0.25)));
            float _1856 = 1.0 - (_1852 * cbSceneParam._m0[34u].x);
            float _1857 = 1.0 - (_1852 * cbSceneParam._m0[34u].y);
            float _1858 = 1.0 - (_1852 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_1858) ? _1548 : (isnan(_1548) ? _1858 : min(_1548, _1858));
            frontier_phi_46_45_ladder_1 = isnan(_1857) ? _1547 : (isnan(_1547) ? _1857 : min(_1547, _1857));
            frontier_phi_46_45_ladder_2 = isnan(_1856) ? _1546 : (isnan(_1546) ? _1856 : min(_1546, _1856));
        }
        else
        {
            frontier_phi_46_45_ladder = _1548;
            frontier_phi_46_45_ladder_1 = _1547;
            frontier_phi_46_45_ladder_2 = _1546;
        }
        _1612 = frontier_phi_46_45_ladder_2;
        _1614 = frontier_phi_46_45_ladder_1;
        _1616 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1612 = _1546;
        _1614 = _1547;
        _1616 = _1548;
    }
    uint _1618 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1622 = floatBitsToUint(cbInstanceData._m0[_1618 + 5u]);
    uint _1624 = _1622.x * 14u;
    uint _1625 = _1624 + 13u;
    float _1630 = _723 + (-1.0);
    float _1633 = (cbLight._m0[_1625].x * _1630) + 1.0;
    float _1634 = (cbLight._m0[_1625].y * _1630) + 1.0;
    uint _1635 = _1624 + 8u;
    float _1646 = cbLight._m0[_1624].x + _702;
    float _1647 = cbLight._m0[_1624].y + _703;
    float _1648 = cbLight._m0[_1624].z + _704;
    float _1652 = inversesqrt(dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648)));
    float _1656 = dot(vec3(0.0), vec3(cbLight._m0[_1624].xyz));
    float _2978 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1659 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
    float _1660 = dot(vec3(0.0), vec3(_702, _703, _704));
    float _2989 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
    float _1664 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1646 * _1652, _1647 * _1652, _1648 * _1652));
    float _3000 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1675 = (exp2(log2(1.0 - (isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1681 = (0.5 / ((_1659 + 9.9999999392252902907785028219223e-09) + _1663)) * _1659;
    float _3011 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0))) * 0.31831014156341552734375;
    float _1685 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1698 = _1624 + 9u;
    uint _1704 = _1624 | 1u;
    float _1710 = cbLight._m0[_1704].x + _702;
    float _1711 = cbLight._m0[_1704].y + _703;
    float _1712 = cbLight._m0[_1704].z + _704;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1720 = dot(vec3(0.0), vec3(cbLight._m0[_1704].xyz));
    float _3027 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1710 * _1716, _1711 * _1716, _1712 * _1716));
    float _3038 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1733 = (exp2(log2(1.0 - (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1737 = (0.5 / ((_1723 + 9.9999999392252902907785028219223e-09) + _1663)) * _1723;
    float _3049 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1739 = (isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0))) * 0.31831014156341552734375;
    float _1740 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    float _1750 = (((_1733 * cbLight._m0[_1698].x) * _1739) * _1740) + ((((cbLight._m0[_1635].x * _1612) * _1675) * _1683) * _1685);
    float _1751 = (((_1733 * cbLight._m0[_1698].y) * _1739) * _1740) + ((((cbLight._m0[_1635].y * _1614) * _1675) * _1683) * _1685);
    float _1752 = (((_1733 * cbLight._m0[_1698].z) * _1739) * _1740) + ((((cbLight._m0[_1635].z * _1616) * _1675) * _1683) * _1685);
    float _1916;
    float _1918;
    float _1920;
    if (_1622.y == 0u)
    {
        uvec4 _1870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1871 = _1870.x;
        uint _1882 = uint((float(_1870.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _1871))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _1871)));
        float _1892 = (log2(_1398 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1893 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        uint _1896 = uint(isnan(14.0) ? _1893 : (isnan(_1893) ? 14.0 : min(_1893, 14.0)));
        uvec4 _1902 = texelFetch(g_lightClusterGridBuffer, int(((_1896 << 2u) + (_1882 << 6u)) >> 2u));
        uint _1903 = _1902.x;
        uint _1904 = _1870.z;
        float _2020;
        float _2022;
        float _2024;
        if (((((1u << ((_1904 >> 4u) & 15u)) + 4294967295u) & _1903) == 0u) || ((_1904 & 240u) == 0u))
        {
            _2020 = 0.0;
            _2022 = 0.0;
            _2024 = 0.0;
        }
        else
        {
            float _2021;
            float _2023;
            float _2025;
            float _2181 = 0.0;
            float _2182 = 0.0;
            float _2183 = 0.0;
            uint _2184 = 0u;
            uint _2193;
            bool _2194;
            for (;;)
            {
                _2193 = texelFetch(g_lightClassification, int((((_1896 << 5u) + (_1882 << 9u)) + (_2184 << 2u)) >> 2u)).x;
                _2194 = _2193 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                if (_2194)
                {
                    frontier_phi_70_pred = _2183;
                    frontier_phi_70_pred_1 = _2182;
                    frontier_phi_70_pred_2 = _2181;
                }
                else
                {
                    float _2317;
                    float _2318;
                    float _2319;
                    uint _2320;
                    _2317 = _2181;
                    _2318 = _2182;
                    _2319 = _2183;
                    _2320 = _2193;
                    float _2255;
                    float _2256;
                    float _2257;
                    for (;;)
                    {
                        uint _2324 = uint(findLSB(_2320)) + (_2184 << 5u);
                        uint _2321 = (_2320 + 4294967295u) & _2320;
                        uint _2326 = _2324 * 48u;
                        vec4 _2340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2326)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 3u)).x));
                        uint _2357 = (_2324 * 48u) + 8u;
                        vec3 _2368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2357)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2357 + 2u)).x));
                        float _2372 = _2340.x - _1396;
                        float _2373 = _2340.y - _1397;
                        float _2374 = _2340.z - _1398;
                        float _2375 = dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374));
                        float _2378 = inversesqrt(_2375);
                        float _2387 = 1.0 - (_2375 * _2340.w);
                        float _3075 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
                        float _2389 = sqrt(_2375) * uintBitsToFloat(uvec4(_2347, _2348, _2349, texelFetch(g_PointLightRenderingBuffer, int(((_2324 * 48u) + 4u) + 3u)).x)).w;
                        float _2392 = 1.39999997615814208984375 / (_2389 + 1.39999997615814208984375);
                        float _2393 = _2392 * _2392;
                        float _2396 = ((1.0 - _2393) * dot(vec3(0.0), vec3(_2378 * _2372, _2378 * _2373, _2378 * _2374))) + _2393;
                        float _2398 = (-0.0) - _1396;
                        float _2399 = (-0.0) - _1397;
                        float _2400 = (-0.0) - _1398;
                        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
                        float _2408 = dot(vec3(0.0), vec3(_2404 * _2398, _2404 * _2399, _2404 * _2400));
                        float _3086 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
                        float _3097 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
                        float _2412 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
                        float _2416 = (0.5 / (((isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) + 9.9999999392252902907785028219223e-09) + _2412)) * _2412;
                        float _3108 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
                        float _2425 = (((isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) * 3.1415927410125732421875) / (((_2389 * _2389) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0)));
                        _2255 = (_2425 * _2368.x) + _2317;
                        _2256 = (_2425 * _2368.y) + _2318;
                        _2257 = (_2425 * _2368.z) + _2319;
                        if (_2321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2317 = _2255;
                            _2318 = _2256;
                            _2319 = _2257;
                            _2320 = _2321;
                        }
                    }
                    frontier_phi_70_pred = _2257;
                    frontier_phi_70_pred_1 = _2256;
                    frontier_phi_70_pred_2 = _2255;
                }
                _2025 = frontier_phi_70_pred;
                _2023 = frontier_phi_70_pred_1;
                _2021 = frontier_phi_70_pred_2;
                uint _2185 = _2184 + 1u;
                if (_2185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2181 = _2021;
                    _2182 = _2023;
                    _2183 = _2025;
                    _2184 = _2185;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2020 = _2021;
            _2022 = _2023;
            _2024 = _2025;
        }
        uvec4 _2028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2029 = _2028.z;
        uint _2031 = (_2029 >> 8u) & 15u;
        float _2161;
        float _2163;
        float _2165;
        if (((4294967295u << _2031) & _1903) == 0u)
        {
            _2161 = _2020;
            _2163 = _2022;
            _2165 = _2024;
        }
        else
        {
            float _2177 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            if (_2031 < ((_2029 >> 12u) & 15u))
            {
                float _2162;
                float _2164;
                float _2166;
                float _2303 = _2020;
                float _2304 = _2022;
                float _2305 = _2024;
                uint _2306 = _2031;
                uint _2315;
                bool _2316;
                for (;;)
                {
                    _2315 = texelFetch(g_lightClassification, int((((_1896 << 5u) + (_1882 << 9u)) + (_2306 << 2u)) >> 2u)).x;
                    _2316 = _2315 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    if (_2316)
                    {
                        frontier_phi_76_pred = _2303;
                        frontier_phi_76_pred_1 = _2305;
                        frontier_phi_76_pred_2 = _2304;
                    }
                    else
                    {
                        float _2430;
                        float _2431;
                        float _2432;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2440 = _2303;
                        float _2441 = _2304;
                        float _2442 = _2305;
                        uint _2443 = _2315;
                        uint _2444;
                        uint _2454;
                        vec4 _2469;
                        float _2470;
                        vec3 _2482;
                        vec4 _2497;
                        vec4 _2512;
                        float _2558;
                        bool _2559;
                        for (;;)
                        {
                            _2454 = ((_2306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2443));
                            _2444 = (_2443 + 4294967295u) & _2443;
                            uint _2456 = _2454 * 40u;
                            _2469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 3u)).x));
                            _2470 = _2469.w;
                            uint _2472 = (_2454 * 40u) + 8u;
                            _2482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x));
                            uint _2484 = (_2454 * 40u) + 16u;
                            _2497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 3u)).x));
                            uint _2499 = (_2454 * 40u) + 20u;
                            _2512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2499 + 3u)).x));
                            uint _2514 = (_2454 * 40u) + 24u;
                            vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 3u)).x));
                            uint _2533 = (_2454 * 40u) + 28u;
                            vec4 _2546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2533 + 3u)).x));
                            _2558 = fma(_1398, _2546.z, fma(_1397, _2546.y, _2546.x * _1396)) + _2546.w;
                            _2559 = !((fma(_1398, _2527.z, fma(_1397, _2527.y, _2527.x * _1396)) + _2527.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            if (_2559)
                            {
                                float _2593 = _2469.x - _1396;
                                float _2594 = _2469.y - _1397;
                                float _2595 = _2469.z - _1398;
                                float _2596 = dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595));
                                float _2599 = inversesqrt(_2596);
                                float _2606 = 1.0 - (_2596 / (_2470 * _2470));
                                float _3119 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                                float _2608 = sqrt(_2596) * uintBitsToFloat(uvec4(_2562, _2563, _2564, texelFetch(g_SpotLightRenderingBuffer, int(((_2454 * 40u) + 4u) + 3u)).x)).w;
                                float _2610 = 1.39999997615814208984375 / (_2608 + 1.39999997615814208984375);
                                float _2611 = _2610 * _2610;
                                float _2614 = (fma(_1398, _2497.z, fma(_1397, _2497.y, _2497.x * _1396)) + _2497.w) / _2558;
                                float _2615 = (fma(_1398, _2512.z, fma(_1397, _2512.y, _2512.x * _1396)) + _2512.w) / _2558;
                                float _2619 = 1.0 - dot(vec2(_2614, _2615), vec2(_2614, _2615));
                                float _3130 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                                float _2627 = dot(vec3(0.0), vec3((-0.0) - (_1396 * _2177), (-0.0) - (_1397 * _2177), (-0.0) - (_1398 * _2177)));
                                float _3141 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                                float _2635 = ((1.0 - _2611) * dot(vec3(0.0), vec3(_2599 * _2593, _2599 * _2594, _2599 * _2595))) + _2611;
                                float _3152 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                                float _2636 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
                                float _2640 = (0.5 / (((isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0))) + 9.9999999392252902907785028219223e-09) + _2636)) * _2636;
                                float _3163 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                                float _2647 = ((isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0)))) * (((isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * 3.1415927410125732421875) / (((_2608 * _2608) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2647 * _2482.z;
                                frontier_phi_82_pred_1 = _2647 * _2482.y;
                                frontier_phi_82_pred_2 = _2647 * _2482.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                            }
                            _2653 = frontier_phi_82_pred;
                            _2652 = frontier_phi_82_pred_1;
                            _2651 = frontier_phi_82_pred_2;
                            _2430 = _2651 + _2440;
                            _2431 = _2652 + _2441;
                            _2432 = _2653 + _2442;
                            if (_2444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2440 = _2430;
                                _2441 = _2431;
                                _2442 = _2432;
                                _2443 = _2444;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2430;
                        frontier_phi_76_pred_1 = _2432;
                        frontier_phi_76_pred_2 = _2431;
                    }
                    _2162 = frontier_phi_76_pred;
                    _2166 = frontier_phi_76_pred_1;
                    _2164 = frontier_phi_76_pred_2;
                    uint _2307 = _2306 + 1u;
                    if (_2307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2303 = _2162;
                        _2304 = _2164;
                        _2305 = _2166;
                        _2306 = _2307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2166;
                frontier_phi_63_64_ladder_1 = _2164;
                frontier_phi_63_64_ladder_2 = _2162;
            }
            else
            {
                frontier_phi_63_64_ladder = _2024;
                frontier_phi_63_64_ladder_1 = _2022;
                frontier_phi_63_64_ladder_2 = _2020;
            }
            _2161 = frontier_phi_63_64_ladder_2;
            _2163 = frontier_phi_63_64_ladder_1;
            _2165 = frontier_phi_63_64_ladder;
        }
        float _2170 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _1916 = ((_2161 * 0.039999999105930328369140625) * _2170) + _1750;
        _1918 = ((_2163 * 0.039999999105930328369140625) * _2170) + _1751;
        _1920 = ((_2165 * 0.039999999105930328369140625) * _2170) + _1752;
    }
    else
    {
        _1916 = _1750;
        _1918 = _1751;
        _1920 = _1752;
    }
    uint _1927 = (_1618 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1933 = (cbSceneParam._m0[72u].y * ((_662 * ((_653 - _615) - (_653 * _626))) + _615)) * cbInstanceData._m0[_1927].x;
    float _1934 = (cbSceneParam._m0[72u].y * ((_662 * ((_654 - _616) - (_654 * _626))) + _616)) * cbInstanceData._m0[_1927].y;
    float _1935 = (((_662 * ((_655 - _617) - (_655 * _626))) + _617) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1927].z;
    float _1942 = _1933 + ((_1916 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _1118)) * cbPerFrame._m0[3u].x);
    float _1943 = _1934 + ((_1918 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _1118)) * cbPerFrame._m0[3u].x);
    float _1944 = _1935 + ((_1920 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _1118)) * cbPerFrame._m0[3u].x);
    float _3194 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1957 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    uint _1958 = _1618 + 6u;
    float _1966 = _710 / cbSceneParam._m0[86u].x;
    float _1967 = _711 / cbSceneParam._m0[86u].y;
    vec4 _1981 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1966, _1967, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1983 = _1981.x;
    float _1984 = _1981.y;
    float _1985 = _1981.z;
    float _1986 = _1981.w;
    float _2076;
    float _2078;
    float _2080;
    float _2082;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2039 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2040 = _2039 / _697;
        float _2051 = _2040 * _271;
        float _2052 = _272 * _2040;
        float _2053 = (-0.0) - _2052;
        float _2054 = _2040 * _273;
        float _2056 = (cbSceneParam._m0[77u].w * _2053) / _2039;
        float _2057 = _2056 + cbSceneParam._m0[79u].w;
        float _2058 = cbSceneParam._m0[79u].w - _2052;
        float _2064 = sqrt(((_2051 * _2051) + (_2052 * _2052)) + (_2054 * _2054));
        float _2067 = (1.0 - (cbSceneParam._m0[77u].w / _2039)) * _2064;
        float _2072 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2074 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2265;
        if (abs((_2053 - _2056) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2265 = ((((_2057 > 0.0) ? exp2(_2072 * _2057) : (2.0 - exp2(_2074 * _2057))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2067;
        }
        else
        {
            float _2207 = 1.0 / cbSceneParam._m0[80u].x;
            float _2208 = isnan(_2058) ? _2057 : (isnan(_2057) ? _2058 : max(_2057, _2058));
            float _2209 = isnan(_2058) ? _2057 : (isnan(_2057) ? _2058 : min(_2057, _2058));
            float _2218 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : min(_2208, 0.0));
            float _2219 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : min(_2209, 0.0));
            _2265 = ((abs(_2064 / _2053) * cbSceneParam._m0[80u].y) * ((((_2218 - _2219) * 2.0) - ((exp2(_2072 * (isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0)))) - exp2(_2072 * (isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))))) * _2207)) - ((exp2(_2074 * _2218) - exp2(_2074 * _2219)) * _2207))) + (_2067 * cbSceneParam._m0[80u].z);
        }
        vec4 _2267 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1966, _1967, 1.0), 0.0);
        float _2276 = exp2((_2265 * (-1.44269502162933349609375)) * (1.0 - _2267.w));
        float _2277 = log2(_2276);
        float _2293 = log2(_1986);
        _2076 = (exp2(_2293 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2277 * cbSceneParam._m0[78u].x)) * _2267.x) / cbSceneParam._m0[78u].x)) + _1983;
        _2078 = (exp2(_2293 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2277 * cbSceneParam._m0[78u].y)) * _2267.y) / cbSceneParam._m0[78u].y)) + _1984;
        _2080 = (exp2(_2293 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2277 * cbSceneParam._m0[78u].z)) * _2267.z) / cbSceneParam._m0[78u].z)) + _1985;
        _2082 = _2276 * _1986;
    }
    else
    {
        _2076 = _1983;
        _2078 = _1984;
        _2080 = _1985;
        _2082 = _1986;
    }
    float _2093 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2094 = _2093 == 3.0;
    float _2096 = log2(_2082);
    float _2100 = exp2(_2096 * cbSceneParam._m0[78u].x);
    float _2101 = exp2(_2096 * cbSceneParam._m0[78u].y);
    float _2102 = exp2(_2096 * cbSceneParam._m0[78u].z);
    float _2103 = _2100 * (isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)));
    float _2104 = _2101 * (isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)));
    float _2105 = _2102 * (isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)));
    float _2114 = (_2093 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2114 * (_2094 ? _2103 : (_2103 + (cbSceneParam._m0[72u].w * _2076)));
    SV_Target.y = _2114 * (_2094 ? _2104 : (_2104 + (cbSceneParam._m0[72u].w * _2078)));
    SV_Target.z = _2114 * (_2094 ? _2105 : (_2105 + (cbSceneParam._m0[72u].w * _2080)));
    SV_Target.w = cbInstanceData._m0[_1958].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1933) * _1957) * _2100) * _2114;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1934) * _1957) * _2101) * _2114;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1935) * _1957) * _2102) * _2114;
    SV_Target_1.w = cbInstanceData._m0[_1958].w;
}


