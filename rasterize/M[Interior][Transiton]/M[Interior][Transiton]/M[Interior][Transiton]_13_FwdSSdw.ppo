#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1242;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _339 = cbMtdParam._m0[27u].w + _280;
    float _340 = cbMtdParam._m0[28u].x + _281;
    float _341 = cbMtdParam._m0[28u].y + _282;
    float _355 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_209 * _201, _209 * _202, _209 * _203));
    float _356 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_223 * TANGENT.x, _223 * TANGENT.y, _223 * TANGENT.z));
    float _357 = (-0.0) - dot(vec3(_339, _340, _341), vec3((-0.0) - (_216 * NORMAL.x), (-0.0) - (_216 * NORMAL.y), (-0.0) - (_216 * NORMAL.z)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _364 = _361 * _357;
    float _365 = (_361 * _355) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _366 = (_361 * _356) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _367 = _365 * cbMtdParam._m0[24u].x;
    float _368 = _366 * cbMtdParam._m0[23u].w;
    float _369 = fract(TEXCOORD.x);
    float _370 = fract(TEXCOORD.y);
    float _376;
    if (_367 > 0.0)
    {
        _376 = (1.0 - _369) / _367;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_367 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _369) / _367;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _376 = frontier_phi_3_2_ladder;
    }
    float _384;
    if (_368 > 0.0)
    {
        _384 = (1.0 - _370) / _368;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_368 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _370) / _368;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _384 = frontier_phi_7_6_ladder;
    }
    bool _386 = _364 > 0.0;
    float _388 = _386 ? (cbMtdParam._m0[17u].x / _364) : 5000.0;
    float _389 = isnan(_384) ? _376 : (isnan(_376) ? _384 : min(_376, _384));
    float _390 = isnan(_388) ? _389 : (isnan(_389) ? _388 : min(_389, _388));
    float _394 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = _369 + (-0.5);
    float _398 = _370 + (-0.5);
    float _401 = ((_390 * _364) + _394) / _394;
    vec4 _426 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_395 + (_390 * _367)) / _401) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_398 + (_390 * _368)) / _401) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _436 = cbMtdParam._m0[9u].x * _426.x;
    float _437 = cbMtdParam._m0[9u].y * _426.y;
    float _438 = cbMtdParam._m0[9u].z * _426.z;
    float _456 = _365 * cbMtdParam._m0[26u].z;
    float _457 = _366 * cbMtdParam._m0[26u].y;
    bool _458 = _456 > 0.0;
    float _463;
    if (_458)
    {
        _463 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _463 = frontier_phi_11_10_ladder;
    }
    bool _465 = _457 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _470 = frontier_phi_15_14_ladder;
    }
    float _473 = _386 ? (cbMtdParam._m0[19u].z / _364) : 5000.0;
    float _474 = isnan(_470) ? _463 : (isnan(_463) ? _470 : min(_463, _470));
    float _475 = isnan(_473) ? _474 : (isnan(_474) ? _473 : min(_474, _473));
    float _479 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _483 = ((_475 * _364) + _479) / _479;
    float _488 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _490 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _506 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_395 + (_475 * _456)) / _483) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_398 + (_475 * _457)) / _483) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518;
    if (_458)
    {
        _518 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _518 = frontier_phi_19_18_ladder;
    }
    float _524;
    if (_465)
    {
        _524 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _524 = frontier_phi_23_22_ladder;
    }
    float _526 = isnan(_524) ? _518 : (isnan(_518) ? _524 : min(_518, _524));
    float _527 = isnan(_473) ? _526 : (isnan(_526) ? _473 : min(_526, _473));
    float _534 = ((_527 * _364) + _479) / _479;
    vec4 _554 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_395 + (_527 * _456)) / _534) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_398 + (_527 * _457)) / _534) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _556 = _554.x;
    float _563 = (_556 * ((_506.x * cbMtdParam._m0[10u].x) - _436)) + _436;
    float _564 = (_556 * ((_506.y * cbMtdParam._m0[10u].y) - _437)) + _437;
    float _565 = (_556 * ((_506.z * cbMtdParam._m0[10u].z) - _438)) + _438;
    float _579 = _365 * cbMtdParam._m0[27u].x;
    float _580 = _366 * cbMtdParam._m0[26u].w;
    bool _581 = _579 > 0.0;
    float _586;
    if (_581)
    {
        _586 = (1.0 - _369) / _579;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_579 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _369) / _579;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _586 = frontier_phi_27_26_ladder;
    }
    bool _588 = _580 > 0.0;
    float _593;
    if (_588)
    {
        _593 = (1.0 - _370) / _580;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_580 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _370) / _580;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _593 = frontier_phi_31_30_ladder;
    }
    float _596 = _386 ? (cbMtdParam._m0[23u].x / _364) : 5000.0;
    float _597 = isnan(_593) ? _586 : (isnan(_586) ? _593 : min(_586, _593));
    float _598 = isnan(_596) ? _597 : (isnan(_597) ? _596 : min(_597, _596));
    float _602 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _606 = ((_598 * _364) + _602) / _602;
    float _611 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _613 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _629 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_395 + (_598 * _579)) / _606) + 0.5) + _611) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_398 + (_598 * _580)) / _606) + 0.5) + _613) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _641;
    if (_581)
    {
        _641 = (1.0 - _369) / _579;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_579 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _369) / _579;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _641 = frontier_phi_35_34_ladder;
    }
    float _647;
    if (_588)
    {
        _647 = (1.0 - _370) / _580;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_580 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _370) / _580;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _647 = frontier_phi_39_38_ladder;
    }
    float _649 = isnan(_647) ? _641 : (isnan(_641) ? _647 : min(_641, _647));
    float _650 = isnan(_596) ? _649 : (isnan(_649) ? _596 : min(_649, _596));
    float _657 = ((_650 * _364) + _602) / _602;
    vec4 _678 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_395 + (_650 * _579)) / _657) + 0.5) + _611) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_398 + (_650 * _580)) / _657) + 0.5) + _613) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _680 = _678.x;
    float _687 = (_680 * ((_629.x * cbMtdParam._m0[13u].x) - _563)) + _563;
    float _688 = (_680 * ((_629.y * cbMtdParam._m0[13u].y) - _564)) + _564;
    float _689 = (_680 * ((_629.z * cbMtdParam._m0[13u].z) - _565)) + _565;
    vec4 _713 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _718 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _724 = ((_713.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _726 = (-0.0) - (cbMtdParam._m0[21u].x * ((_713.x * 0.5) + (-0.25)));
    float _727 = fract(_718);
    float _729 = fract(_718 + 0.5);
    vec4 _756 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_727 * _726) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_724 * _727) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _758 = _756.x;
    float _764 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_729 * _726) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_724 * _729) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _758) * abs((_727 * 2.0) + (-1.0))) + _758;
    float _770 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _774 = fract(abs(_770));
    float _783 = sin(cbMtdParam._m0[21u].z);
    float _784 = cos(cbMtdParam._m0[21u].z);
    float _785 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _786 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _816 = abs(cbMtdParam._m0[20u].w * (((_764 - (((_770 >= ((-0.0) - _770)) ? _774 : ((-0.0) - _774)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_786, (-0.0) - _783, _784 * _785) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_786, _784, _785 * _783) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _820 = (((_816 * cbMtdParam._m0[18u].y) - _764) * _816) + _764;
    float _3273 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _821 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    vec4 _833 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _848 = (cbMtdParam._m0[14u].x * _833.x) * cbMtdParam._m0[19u].x;
    float _849 = (cbMtdParam._m0[14u].y * _833.y) * cbMtdParam._m0[19u].x;
    float _850 = (cbMtdParam._m0[14u].z * _833.z) * cbMtdParam._m0[19u].x;
    float _860 = exp2(log2(_821) * cbMtdParam._m0[20u].x);
    float _3284 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3295 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3306 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _894 = _280 * _893;
    float _895 = _281 * _893;
    float _896 = _282 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _916 = uint(roundEven(NORMAL.w)) * 13u;
    uint _917 = _916 + 9u;
    uint _918 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_918].z;
    float _3317 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _941 = _938.x * TEXCOORD_4;
    float _942 = (-0.0) - _894;
    float _943 = (-0.0) - _895;
    float _944 = (-0.0) - _896;
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = (cbModelParam._m0[37u].x * ((((fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1031 = (cbModelParam._m0[37u].y * ((((fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1032 = (((((fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(0.0), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3387 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(0.0), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3420 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(0.0), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3453 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = (cbModelParam._m0[38u].x * ((((fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1310 = (cbModelParam._m0[38u].y * ((((fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1311 = (((((fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(0.0), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3516 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(0.0), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3549 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(0.0), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3582 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1242;
        _1517 = _1242;
        _1518 = _1242;
        _1519 = _1242;
        _1520 = _1242;
        _1521 = _1242;
        _1522 = _1242;
        _1523 = _1242;
        _1524 = _1242;
        _1525 = _1242;
        _1526 = _1242;
        _1527 = _1242;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1254)) + _1254;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1255)) + _1255;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1256)) + _1256;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _894 * (-0.5);
    float _1585 = _895 * (-0.5);
    float _1586 = _896 * (-0.5);
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1627;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1638;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1629 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1642 = (_1638 * cbModelParam._m0[1u].x) + (_1627 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1713 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1716 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1742;
        if (_1710 > 0.0)
        {
            _1742 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1742 = frontier_phi_54_52_ladder;
        }
        float _2062;
        if (_1713 > 0.0)
        {
            _2062 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2062 = frontier_phi_63_59_ladder;
        }
        float _2398;
        if (_1716 > 0.0)
        {
            _2398 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2398 = frontier_phi_77_70_ladder;
        }
        float _2400 = isnan(_2062) ? _1742 : (isnan(_1742) ? _2062 : min(_1742, _2062));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1710) + _1699;
        float _2406 = (_2401 * _1713) + _1703;
        float _2407 = (_2401 * _1716) + _1707;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1651);
            frontier_phi_53_77_ladder = _2530.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2530.z * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_53_77_ladder;
        _1734 = frontier_phi_53_77_ladder_1;
        _1736 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1651);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1739 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1805 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1808 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2067;
        if (_1802 > 0.0)
        {
            _2067 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2067 = frontier_phi_65_61_ladder;
        }
        float _2424;
        if (_1805 > 0.0)
        {
            _2424 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2424 = frontier_phi_79_72_ladder;
        }
        float _2590;
        if (_1808 > 0.0)
        {
            _2590 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2590 = frontier_phi_93_88_ladder;
        }
        float _2592 = isnan(_2424) ? _2067 : (isnan(_2067) ? _2424 : min(_2067, _2424));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _1802) + _1791;
        float _2598 = (_2593 * _1805) + _1795;
        float _2599 = (_2593 * _1808) + _1799;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2600;
        float _2603 = _2600 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2599 > _2603) || ((_2599 < _2601) || ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 < _2601) || (_2597 > _2603))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2599, cbModelParam._m0[17u].z, fma(_2598, cbModelParam._m0[17u].y, _2597 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2599, cbModelParam._m0[18u].z, fma(_2598, cbModelParam._m0[18u].y, _2597 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2599, cbModelParam._m0[19u].z, fma(_2598, cbModelParam._m0[19u].y, _2597 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_62_93_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_62_93_ladder_2;
        _1829 = frontier_phi_62_93_ladder_1;
        _1831 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1739);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1843 = _941 * 0.01200000010430812835693359375;
    float _1845 = _1843 * ((cbModelParam._m0[1u].w * (_1827 - _1732)) + _1732);
    float _1846 = _1843 * ((cbModelParam._m0[1u].w * (_1829 - _1734)) + _1734);
    float _1847 = _1843 * ((cbModelParam._m0[1u].w * (_1831 - _1736)) + _1736);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    vec4 _1864 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_902, _903));
    float _1866 = _1864.w;
    float _1879 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1866);
    float _1880 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1866);
    float _1881 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1866);
    uvec4 _1885 = floatBitsToUint(cbInstanceData._m0[_916 + 5u]);
    uint _1887 = _1885.x * 14u;
    uint _1888 = _1887 + 13u;
    float _1893 = _941 + (-1.0);
    float _1896 = (cbLight._m0[_1888].x * _1893) + 1.0;
    float _1897 = (cbLight._m0[_1888].y * _1893) + 1.0;
    uint _1898 = _1887 + 5u;
    float _1904 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1908 = _1887 + 4u;
    float _1917 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1921 = _1887 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1887].xyz), vec3(0.0));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(0.0));
    float _3718 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _3729 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1898].x * _1904) * _1942) + (((cbLight._m0[_1908].x * _1879) * _1917) * _1940);
    float _1950 = ((_1904 * cbLight._m0[_1898].y) * _1942) + (((cbLight._m0[_1908].y * _1880) * _1917) * _1940);
    float _1951 = ((_1904 * cbLight._m0[_1898].z) * _1942) + (((cbLight._m0[_1908].z * _1881) * _1917) * _1940);
    uint _1952 = _1887 + 8u;
    float _1958 = cbLight._m0[_1887].x + _894;
    float _1959 = cbLight._m0[_1887].y + _895;
    float _1960 = cbLight._m0[_1887].z + _896;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1968 = dot(vec3(0.0), vec3(cbLight._m0[_1887].xyz));
    float _3740 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _1972 = dot(vec3(0.0), vec3(_894, _895, _896));
    float _3751 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_1958 * _1964, _1959 * _1964, _1960 * _1964));
    float _3762 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1993 = (0.5 / ((_1971 + 9.9999999392252902907785028219223e-09) + _1975)) * _1971;
    float _3773 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.31831014156341552734375;
    uint _2009 = _1887 + 9u;
    float _2015 = cbLight._m0[_1921].x + _894;
    float _2016 = cbLight._m0[_1921].y + _895;
    float _2017 = cbLight._m0[_1921].z + _896;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2025 = dot(vec3(0.0), vec3(cbLight._m0[_1921].xyz));
    float _3784 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2015 * _2021, _2016 * _2021, _2017 * _2021));
    float _3795 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = (0.5 / ((_2028 + 9.9999999392252902907785028219223e-09) + _1975)) * _2028;
    float _3806 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.31831014156341552734375;
    float _2054 = (((_2038 * cbLight._m0[_2009].x) * _2044) * _1904) + ((((cbLight._m0[_1952].x * _1879) * _1987) * _1995) * _1917);
    float _2055 = (((_2038 * cbLight._m0[_2009].y) * _2044) * _1904) + ((((cbLight._m0[_1952].y * _1880) * _1987) * _1995) * _1917);
    float _2056 = (((_2038 * cbLight._m0[_2009].z) * _2044) * _1904) + ((((cbLight._m0[_1952].z * _1881) * _1987) * _1995) * _1917);
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    if (_1885.y == 0u)
    {
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2111;
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2111;
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2111;
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.x;
        uint _2138 = uint((float(_2126.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2127))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2127)));
        float _2148 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2149 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        uint _2152 = uint(isnan(14.0) ? _2149 : (isnan(_2149) ? 14.0 : min(_2149, 14.0)));
        uvec4 _2158 = texelFetch(g_lightClusterGridBuffer, int(((_2152 << 2u) + (_2138 << 6u)) >> 2u));
        uint _2159 = _2158.x;
        uint _2160 = _2126.z;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        if (((((1u << ((_2160 >> 4u) & 15u)) + 4294967295u) & _2159) == 0u) || ((_2160 & 240u) == 0u))
        {
            _2276 = 0.0;
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
        }
        else
        {
            float _2277;
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2458 = 0.0;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            uint _2464 = 0u;
            uint _2473;
            bool _2474;
            for (;;)
            {
                _2473 = texelFetch(g_lightClassification, int((((_2152 << 5u) + (_2138 << 9u)) + (_2464 << 2u)) >> 2u)).x;
                _2474 = _2473 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2474)
                {
                    frontier_phi_90_pred = _2463;
                    frontier_phi_90_pred_1 = _2458;
                    frontier_phi_90_pred_2 = _2459;
                    frontier_phi_90_pred_3 = _2460;
                    frontier_phi_90_pred_4 = _2461;
                    frontier_phi_90_pred_5 = _2462;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2458;
                    _2634 = _2459;
                    _2635 = _2460;
                    _2636 = _2461;
                    _2637 = _2462;
                    _2638 = _2463;
                    _2639 = _2473;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2464 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _2112;
                        float _2700 = _2659.y - _2113;
                        float _2701 = _2659.z - _2114;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _3827 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * dot(vec3(0.0), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701))) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _2112;
                        float _2735 = (-0.0) - _2113;
                        float _2736 = (-0.0) - _2114;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2744 = dot(vec3(0.0), vec3(_2740 * _2734, _2740 * _2735, _2740 * _2736));
                        float _3843 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _3854 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2748 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2752 = (0.5 / (((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) + 9.9999999392252902907785028219223e-09) + _2748)) * _2748;
                        float _3865 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2761 = (((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 3.1415927410125732421875) / ((_2726 * 2.1991131305694580078125) + 3.141590118408203125)) * _2715;
                        _2542 = (_2730 * _2678.x) + _2636;
                        _2543 = (_2730 * _2678.y) + _2637;
                        _2544 = (_2730 * _2678.z) + _2638;
                        _2539 = (_2761 * _2695.x) + _2633;
                        _2540 = (_2761 * _2695.y) + _2634;
                        _2541 = (_2761 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2539;
                            _2634 = _2540;
                            _2635 = _2541;
                            _2636 = _2542;
                            _2637 = _2543;
                            _2638 = _2544;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_90_pred = _2544;
                    frontier_phi_90_pred_1 = _2539;
                    frontier_phi_90_pred_2 = _2540;
                    frontier_phi_90_pred_3 = _2541;
                    frontier_phi_90_pred_4 = _2542;
                    frontier_phi_90_pred_5 = _2543;
                }
                _2287 = frontier_phi_90_pred;
                _2277 = frontier_phi_90_pred_1;
                _2279 = frontier_phi_90_pred_2;
                _2281 = frontier_phi_90_pred_3;
                _2283 = frontier_phi_90_pred_4;
                _2285 = frontier_phi_90_pred_5;
                uint _2465 = _2464 + 1u;
                if (_2465 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2458 = _2277;
                    _2459 = _2279;
                    _2460 = _2281;
                    _2461 = _2283;
                    _2462 = _2285;
                    _2463 = _2287;
                    _2464 = _2465;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2276 = _2277;
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
        }
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.z;
        uint _2293 = (_2291 >> 8u) & 15u;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((4294967295u << _2293) & _2159) == 0u)
        {
            _2429 = _2276;
            _2431 = _2278;
            _2433 = _2280;
            _2435 = _2282;
            _2437 = _2284;
            _2439 = _2286;
        }
        else
        {
            float _2454 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2293 < ((_2291 >> 12u) & 15u))
            {
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2616 = _2276;
                float _2617 = _2278;
                float _2618 = _2280;
                float _2619 = _2282;
                float _2620 = _2284;
                float _2621 = _2286;
                uint _2622 = _2293;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2152 << 5u) + (_2138 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2632)
                    {
                        frontier_phi_99_pred = _2619;
                        frontier_phi_99_pred_1 = _2618;
                        frontier_phi_99_pred_2 = _2617;
                        frontier_phi_99_pred_3 = _2616;
                        frontier_phi_99_pred_4 = _2621;
                        frontier_phi_99_pred_5 = _2620;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _2800 = _2616;
                        float _2801 = _2617;
                        float _2802 = _2618;
                        float _2803 = _2619;
                        float _2804 = _2620;
                        float _2805 = _2621;
                        uint _2806 = _2631;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2876;
                        vec4 _2891;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2817 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2863 = (_2817 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2817 * 40u) + 20u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2817 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2817 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_2114, _2925.z, fma(_2113, _2925.y, _2925.x * _2112)) + _2925.w;
                            _2938 = !((fma(_2114, _2906.z, fma(_2113, _2906.y, _2906.x * _2112)) + _2906.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2832.x - _2112;
                                float _2966 = _2832.y - _2113;
                                float _2967 = _2832.z - _2114;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2833 * _2833));
                                float _3876 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _2983 = sqrt(_2968) * _2848.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2987 = 1.0 - _2986;
                                float _2989 = (_2987 * dot(vec3(_2972, _2973, _2974), vec3(0.0))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_2114, _2876.z, fma(_2113, _2876.y, _2876.x * _2112)) + _2876.w) / _2937;
                                float _2997 = (fma(_2114, _2891.z, fma(_2113, _2891.y, _2891.x * _2112)) + _2891.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _3892 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3013 = dot(vec3(0.0), vec3((-0.0) - (_2112 * _2454), (-0.0) - (_2113 * _2454), (-0.0) - (_2114 * _2454)));
                                float _3903 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3021 = (_2987 * dot(vec3(0.0), vec3(_2972, _2973, _2974))) + _2986;
                                float _3914 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _3026 = (0.5 / (((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) + 9.9999999392252902907785028219223e-09) + _3022)) * _3022;
                                float _3925 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3033 = (_3002 * _2979) * (((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 3.1415927410125732421875) / ((_2992 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _3003 * _2848.z;
                                frontier_phi_105_pred_1 = _3033 * _2860.x;
                                frontier_phi_105_pred_2 = _3033 * _2860.y;
                                frontier_phi_105_pred_3 = _3033 * _2860.z;
                                frontier_phi_105_pred_4 = _3003 * _2848.x;
                                frontier_phi_105_pred_5 = _3003 * _2848.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3042 = frontier_phi_105_pred;
                            _3037 = frontier_phi_105_pred_1;
                            _3038 = frontier_phi_105_pred_2;
                            _3039 = frontier_phi_105_pred_3;
                            _3040 = frontier_phi_105_pred_4;
                            _3041 = frontier_phi_105_pred_5;
                            _2790 = _3040 + _2803;
                            _2791 = _3041 + _2804;
                            _2792 = _3042 + _2805;
                            _2787 = _3037 + _2800;
                            _2788 = _3038 + _2801;
                            _2789 = _3039 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2790;
                        frontier_phi_99_pred_1 = _2789;
                        frontier_phi_99_pred_2 = _2788;
                        frontier_phi_99_pred_3 = _2787;
                        frontier_phi_99_pred_4 = _2792;
                        frontier_phi_99_pred_5 = _2791;
                    }
                    _2436 = frontier_phi_99_pred;
                    _2434 = frontier_phi_99_pred_1;
                    _2432 = frontier_phi_99_pred_2;
                    _2430 = frontier_phi_99_pred_3;
                    _2440 = frontier_phi_99_pred_4;
                    _2438 = frontier_phi_99_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2430;
                        _2617 = _2432;
                        _2618 = _2434;
                        _2619 = _2436;
                        _2620 = _2438;
                        _2621 = _2440;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2440;
                frontier_phi_81_82_ladder_1 = _2436;
                frontier_phi_81_82_ladder_2 = _2434;
                frontier_phi_81_82_ladder_3 = _2432;
                frontier_phi_81_82_ladder_4 = _2430;
                frontier_phi_81_82_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_81_82_ladder = _2286;
                frontier_phi_81_82_ladder_1 = _2282;
                frontier_phi_81_82_ladder_2 = _2280;
                frontier_phi_81_82_ladder_3 = _2278;
                frontier_phi_81_82_ladder_4 = _2276;
                frontier_phi_81_82_ladder_5 = _2284;
            }
            _2429 = frontier_phi_81_82_ladder_4;
            _2431 = frontier_phi_81_82_ladder_3;
            _2433 = frontier_phi_81_82_ladder_2;
            _2435 = frontier_phi_81_82_ladder_1;
            _2437 = frontier_phi_81_82_ladder_5;
            _2439 = frontier_phi_81_82_ladder;
        }
        float _2444 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2172 = (_2444 * _2435) + _1949;
        _2174 = (_2444 * _2437) + _1950;
        _2176 = (_2444 * _2439) + _1951;
        _2178 = ((_2429 * 0.039999999105930328369140625) * _2444) + _2054;
        _2180 = ((_2431 * 0.039999999105930328369140625) * _2444) + _2055;
        _2182 = ((_2433 * 0.039999999105930328369140625) * _2444) + _2056;
    }
    else
    {
        _2172 = _1949;
        _2174 = _1950;
        _2176 = _1951;
        _2178 = _2054;
        _2180 = _2055;
        _2182 = _2056;
    }
    uint _2188 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _2194 = ((_860 * (_848 - (_848 * _821))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2188].x;
    float _2195 = ((_860 * (_849 - (_849 * _821))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2188].y;
    float _2196 = ((_860 * (_850 - (_850 * _821))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2188].z;
    float _3941 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _3952 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3963 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2213 = (((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_2172 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _941))) + ((_2178 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + _2194;
    float _2215 = (_2195 + ((_2180 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2174 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _941)));
    float _2217 = (_2196 + ((_2182 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2176 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _941)));
    float _3989 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2230 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    uint _2231 = _916 + 6u;
    float _2239 = _902 / cbSceneParam._m0[86u].x;
    float _2240 = _903 / cbSceneParam._m0[86u].y;
    vec4 _2254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2256 = _2254.x;
    float _2257 = _2254.y;
    float _2258 = _2254.z;
    float _2259 = _2254.w;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2301 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2302 = _2301 / _889;
        float _2313 = _2302 * _280;
        float _2314 = _281 * _2302;
        float _2315 = (-0.0) - _2314;
        float _2316 = _2302 * _282;
        float _2318 = (cbSceneParam._m0[77u].w * _2315) / _2301;
        float _2319 = _2318 + cbSceneParam._m0[79u].w;
        float _2320 = cbSceneParam._m0[79u].w - _2314;
        float _2326 = sqrt(((_2313 * _2313) + (_2314 * _2314)) + (_2316 * _2316));
        float _2329 = (1.0 - (cbSceneParam._m0[77u].w / _2301)) * _2326;
        float _2335 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2337 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2315 - _2318) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2319 > 0.0) ? exp2(_2335 * _2319) : (2.0 - exp2(_2337 * _2319))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2329;
        }
        else
        {
            float _2487 = 1.0 / cbSceneParam._m0[80u].x;
            float _2488 = isnan(_2320) ? _2319 : (isnan(_2319) ? _2320 : max(_2319, _2320));
            float _2489 = isnan(_2320) ? _2319 : (isnan(_2319) ? _2320 : min(_2319, _2320));
            float _2498 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : min(_2488, 0.0));
            float _2499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : min(_2489, 0.0));
            _2552 = ((abs(_2326 / _2315) * cbSceneParam._m0[80u].y) * ((((_2498 - _2499) * 2.0) - ((exp2(_2335 * (isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0)))) - exp2(_2335 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0))))) * _2487)) - ((exp2(_2337 * _2498) - exp2(_2337 * _2499)) * _2487))) + (_2329 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2259);
        _2339 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2256;
        _2341 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2257;
        _2343 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2258;
        _2345 = _2563 * _2259;
    }
    else
    {
        _2339 = _2256;
        _2341 = _2257;
        _2343 = _2258;
        _2345 = _2259;
    }
    float _2356 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2357 = _2356 == 3.0;
    float _2359 = log2(_2345);
    float _2363 = exp2(_2359 * cbSceneParam._m0[78u].x);
    float _2364 = exp2(_2359 * cbSceneParam._m0[78u].y);
    float _2365 = exp2(_2359 * cbSceneParam._m0[78u].z);
    float _2366 = _2363 * (isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0)));
    float _2367 = _2364 * (isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0)));
    float _2368 = _2365 * (isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0)));
    float _2377 = (_2356 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2377 * (_2357 ? _2366 : (_2366 + (cbSceneParam._m0[72u].w * _2339)));
    SV_Target.y = _2377 * (_2357 ? _2367 : (_2367 + (cbSceneParam._m0[72u].w * _2341)));
    SV_Target.z = _2377 * (_2357 ? _2368 : (_2368 + (cbSceneParam._m0[72u].w * _2343)));
    SV_Target.w = cbInstanceData._m0[_2231].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2194) * _2230) * _2363) * _2377;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2195) * _2230) * _2364) * _2377;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2196) * _2230) * _2365) * _2377;
    SV_Target_1.w = cbInstanceData._m0[_2231].w;
}


