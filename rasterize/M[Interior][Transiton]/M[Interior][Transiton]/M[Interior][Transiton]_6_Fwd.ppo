#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1495;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _300 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _303 = _300.x;
    vec4 _321 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _303) + cbMtdParam._m0[12u].x) * _321.x;
    float _340 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _303) + cbMtdParam._m0[12u].y) * _321.y;
    float _342 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _303) + cbMtdParam._m0[12u].z) * _321.z;
    vec4 _360 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = cbMtdParam._m0[27u].w + _284;
    float _400 = cbMtdParam._m0[28u].x + _285;
    float _401 = cbMtdParam._m0[28u].y + _286;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_214, _215, _216));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_228, _229, _230));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _221, (-0.0) - _222, (-0.0) - _223));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _424 = _421 * _417;
    float _425 = (_421 * _415) + ((cbMtdParam._m0[25u].w * _303) * ((_360.x * 2.0) + (-1.0)));
    float _426 = (_421 * _416) + ((cbMtdParam._m0[26u].x * _303) * ((_360.y * 2.0) + (-1.0)));
    float _427 = _425 * cbMtdParam._m0[24u].x;
    float _428 = _426 * cbMtdParam._m0[23u].w;
    float _429 = fract(TEXCOORD.x);
    float _430 = fract(TEXCOORD.y);
    float _436;
    if (_427 > 0.0)
    {
        _436 = (1.0 - _429) / _427;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_427 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _429) / _427;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _436 = frontier_phi_3_2_ladder;
    }
    float _444;
    if (_428 > 0.0)
    {
        _444 = (1.0 - _430) / _428;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_428 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _430) / _428;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _444 = frontier_phi_7_6_ladder;
    }
    bool _446 = _424 > 0.0;
    float _448 = _446 ? (cbMtdParam._m0[17u].x / _424) : 5000.0;
    float _449 = isnan(_444) ? _436 : (isnan(_436) ? _444 : min(_436, _444));
    float _450 = isnan(_448) ? _449 : (isnan(_449) ? _448 : min(_449, _448));
    float _454 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = _429 + (-0.5);
    float _458 = _430 + (-0.5);
    float _461 = ((_450 * _424) + _454) / _454;
    vec4 _486 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_455 + (_450 * _427)) / _461) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_458 + (_450 * _428)) / _461) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _499 = (_486.x * _303) * cbMtdParam._m0[9u].x;
    float _500 = (_486.y * _303) * cbMtdParam._m0[9u].y;
    float _501 = (_486.z * _303) * cbMtdParam._m0[9u].z;
    float _519 = _425 * cbMtdParam._m0[26u].z;
    float _520 = _426 * cbMtdParam._m0[26u].y;
    bool _521 = _519 > 0.0;
    float _526;
    if (_521)
    {
        _526 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _526 = frontier_phi_11_10_ladder;
    }
    bool _528 = _520 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _533 = frontier_phi_15_14_ladder;
    }
    float _536 = _446 ? (cbMtdParam._m0[19u].z / _424) : 5000.0;
    float _537 = isnan(_533) ? _526 : (isnan(_526) ? _533 : min(_526, _533));
    float _538 = isnan(_536) ? _537 : (isnan(_537) ? _536 : min(_537, _536));
    float _542 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _546 = ((_538 * _424) + _542) / _542;
    float _551 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _553 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _569 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_455 + (_538 * _519)) / _546) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_458 + (_538 * _520)) / _546) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _584;
    if (_521)
    {
        _584 = (1.0 - _429) / _519;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_519 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _429) / _519;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _584 = frontier_phi_19_18_ladder;
    }
    float _590;
    if (_528)
    {
        _590 = (1.0 - _430) / _520;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_520 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _430) / _520;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _590 = frontier_phi_23_22_ladder;
    }
    float _592 = isnan(_590) ? _584 : (isnan(_584) ? _590 : min(_584, _590));
    float _593 = isnan(_536) ? _592 : (isnan(_592) ? _536 : min(_592, _536));
    float _600 = ((_593 * _424) + _542) / _542;
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_455 + (_593 * _519)) / _600) + 0.5) + _551) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_458 + (_593 * _520)) / _600) + 0.5) + _553) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _622 = _620.x;
    float _632 = (((((cbMtdParam._m0[10u].x * _303) * _569.x) - _499) * _303) * _622) + _499;
    float _633 = (((((cbMtdParam._m0[10u].y * _303) * _569.y) - _500) * _303) * _622) + _500;
    float _634 = (((((cbMtdParam._m0[10u].z * _303) * _569.z) - _501) * _303) * _622) + _501;
    float _647 = _425 * cbMtdParam._m0[27u].x;
    float _648 = _426 * cbMtdParam._m0[26u].w;
    bool _649 = _647 > 0.0;
    float _654;
    if (_649)
    {
        _654 = (1.0 - _429) / _647;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_647 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _429) / _647;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _654 = frontier_phi_27_26_ladder;
    }
    bool _656 = _648 > 0.0;
    float _661;
    if (_656)
    {
        _661 = (1.0 - _430) / _648;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_648 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _430) / _648;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _661 = frontier_phi_31_30_ladder;
    }
    float _664 = _446 ? (cbMtdParam._m0[23u].x / _424) : 5000.0;
    float _665 = isnan(_661) ? _654 : (isnan(_654) ? _661 : min(_654, _661));
    float _666 = isnan(_664) ? _665 : (isnan(_665) ? _664 : min(_665, _664));
    float _670 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _674 = ((_666 * _424) + _670) / _670;
    float _679 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _681 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _697 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_455 + (_666 * _647)) / _674) + 0.5) + _679) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_458 + (_666 * _648)) / _674) + 0.5) + _681) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _712;
    if (_649)
    {
        _712 = (1.0 - _429) / _647;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_647 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _429) / _647;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _712 = frontier_phi_35_34_ladder;
    }
    float _718;
    if (_656)
    {
        _718 = (1.0 - _430) / _648;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_648 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _430) / _648;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _718 = frontier_phi_39_38_ladder;
    }
    float _720 = isnan(_718) ? _712 : (isnan(_712) ? _718 : min(_712, _718));
    float _721 = isnan(_664) ? _720 : (isnan(_720) ? _664 : min(_720, _664));
    float _728 = ((_721 * _424) + _670) / _670;
    vec4 _748 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_455 + (_721 * _647)) / _728) + 0.5) + _679) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_458 + (_721 * _648)) / _728) + 0.5) + _681) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _750 = _748.x;
    float _760 = (((((cbMtdParam._m0[13u].x * _303) * _697.x) - _632) * _303) * _750) + _632;
    float _761 = (((((cbMtdParam._m0[13u].y * _303) * _697.y) - _633) * _303) * _750) + _633;
    float _762 = (((((cbMtdParam._m0[13u].z * _303) * _697.z) - _634) * _303) * _750) + _634;
    vec4 _775 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _779 = _775.z;
    float _782 = (_775.x * 2.0) + (-1.0);
    float _783 = (_775.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3682 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))));
    float _798 = (cbMtdParam._m0[19u].y * _760) * cbMtdParam._m0[16u].x;
    float _800 = (cbMtdParam._m0[19u].y * _761) * cbMtdParam._m0[16u].y;
    float _802 = (cbMtdParam._m0[19u].y * _762) * cbMtdParam._m0[16u].z;
    vec4 _826 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _831 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _837 = ((_826.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _839 = (-0.0) - (cbMtdParam._m0[21u].x * ((_826.x * 0.5) + (-0.25)));
    float _840 = fract(_831);
    float _842 = fract(_831 + 0.5);
    vec4 _869 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_840 * _839) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_837 * _840) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _871 = _869.x;
    float _877 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_842 * _839) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_837 * _842) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _871) * abs((_840 * 2.0) + (-1.0))) + _871;
    float _883 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _887 = fract(abs(_883));
    float _897 = sin(cbMtdParam._m0[21u].z);
    float _898 = cos(cbMtdParam._m0[21u].z);
    float _899 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _900 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _925 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_900, (-0.0) - _897, _898 * _899) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_900, _898, _899 * _897) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_883 >= ((-0.0) - _883)) ? _887 : ((-0.0) - _887)) * cbMtdParam._m0[18u].z) - _877)) + cbMtdParam._m0[18u].w;
    float _926 = ceil(_925);
    float _3693 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _927 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _947 = ((((cbMtdParam._m0[21u].w * _760) * cbMtdParam._m0[15u].x) - _798) * _927) + _798;
    float _948 = ((((cbMtdParam._m0[21u].w * _761) * cbMtdParam._m0[15u].y) - _800) * _927) + _800;
    float _949 = ((((cbMtdParam._m0[21u].w * _762) * cbMtdParam._m0[15u].z) - _802) * _927) + _802;
    float _953 = abs(cbMtdParam._m0[20u].w * _925);
    float _957 = (((_953 * cbMtdParam._m0[18u].y) - _877) * _953) + _877;
    float _3704 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _958 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _970 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _985 = (cbMtdParam._m0[14u].x * _970.x) * cbMtdParam._m0[19u].x;
    float _986 = (cbMtdParam._m0[14u].y * _970.y) * cbMtdParam._m0[19u].x;
    float _987 = (cbMtdParam._m0[14u].z * _970.z) * cbMtdParam._m0[19u].x;
    float _994 = exp2(log2(_958) * cbMtdParam._m0[20u].x);
    float _1016 = fma(_789, _221, fma(_783, _228, _782 * _214));
    float _1019 = fma(_789, _222, fma(_783, _229, _782 * _215));
    float _1022 = fma(_789, _223, fma(_783, _230, _782 * _216));
    float _1026 = inversesqrt(dot(vec3(_1016, _1019, _1022), vec3(_1016, _1019, _1022)));
    float _1027 = _1026 * _1016;
    float _1028 = _1026 * _1019;
    float _1029 = _1026 * _1022;
    float _3715 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _1030 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3737 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3748 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _1049 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1053 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _1054 = _284 * _1053;
    float _1055 = _285 * _1053;
    float _1056 = _286 * _1053;
    float _1062 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1063 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1081 = fma(_1029, cbSceneParam._m0[5u].z, fma(_1028, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1027));
    float _1084 = fma(_1029, cbSceneParam._m0[6u].z, fma(_1028, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1027));
    float _1087 = fma(_1029, cbSceneParam._m0[7u].z, fma(_1028, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1027));
    uint _1100 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1101 = _1100 + 9u;
    uint _1102 = _1101 + uint(cbMatDynParam._m0[0u].w);
    float _1108 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_1102].x;
    float _1109 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_1102].y;
    float _1110 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_1102].z;
    float _3759 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _1122 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1062, cbSceneParam._m0[86u].y * _1063));
    float _1125 = _1122.x * TEXCOORD_4;
    float _1126 = dot(vec3(_1027, _1028, _1029), vec3(_1054, _1055, _1056));
    float _1129 = _1126 * 2.0;
    float _1133 = (_1129 * _1027) - _1054;
    float _1134 = (_1129 * _1028) - _1055;
    float _1135 = (_1129 * _1029) - _1056;
    float _1139 = abs(dot(vec3(_1054, _1055, _1056), vec3(_1027, _1028, _1029)));
    float _3792 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1141 = sqrt(_1030);
    float _1154 = exp2((_1141 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1141 * 3.0));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1494;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1194, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186));
        float _1225 = fma(_1194, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186));
        float _1229 = fma(_1194, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186));
        float _1252 = _1186 + _1027;
        float _1253 = _1190 + _1028;
        float _1254 = _1194 + _1029;
        float _1264 = fma(_1254, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1322 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1288.x + (-0.5));
        float _1324 = _1322 * (_1288.y + (-0.5));
        float _1325 = _1322 * (_1288.z + (-0.5));
        float _1332 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1295.x + (-0.5));
        float _1334 = _1332 * (_1295.y + (-0.5));
        float _1335 = _1332 * (_1295.z + (-0.5));
        float _1342 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1302.x + (-0.5));
        float _1344 = _1342 * (_1302.y + (-0.5));
        float _1345 = _1342 * (_1302.z + (-0.5));
        float _1352 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1309.x + (-0.5));
        float _1354 = _1352 * (_1309.y + (-0.5));
        float _1355 = _1352 * (_1309.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1376 = (dot(vec3(_1027, _1028, _1029), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1386 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3840 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1388 + 1.0))) + _1393) * _1356;
        float _1403 = _1324 * 0.5;
        float _1404 = _1334 * 0.5;
        float _1405 = _1344 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_1027, _1028, _1029), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3873 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1430 + 1.0))) + _1435) * _1357;
        float _1445 = _1325 * 0.5;
        float _1446 = _1335 * 0.5;
        float _1447 = _1345 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_1027, _1028, _1029), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3906 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1472 + 1.0))) + _1477) * _1358;
        _1494 = _1325;
        _1496 = _1324;
        _1497 = _1323;
        _1498 = _1335;
        _1499 = _1334;
        _1500 = _1333;
        _1501 = _1345;
        _1502 = _1344;
        _1503 = _1343;
        _1504 = _1358;
        _1505 = _1357;
        _1506 = _1356;
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1495;
        _1496 = _1495;
        _1497 = _1495;
        _1498 = _1495;
        _1499 = _1495;
        _1500 = _1495;
        _1501 = _1495;
        _1502 = _1495;
        _1503 = _1495;
        _1504 = _1495;
        _1505 = _1495;
        _1506 = _1495;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1534 = fma(_1194, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186));
        float _1538 = fma(_1194, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186));
        float _1542 = fma(_1194, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186));
        float _1565 = _1186 + _1027;
        float _1566 = _1190 + _1028;
        float _1567 = _1194 + _1029;
        float _1577 = fma(_1567, cbModelParam._m0[30u].z, fma(_1566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1565)) - _1534;
        float _1578 = fma(_1567, cbModelParam._m0[31u].z, fma(_1566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1565)) - _1538;
        float _1579 = fma(_1567, cbModelParam._m0[32u].z, fma(_1566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1565)) - _1542;
        float _1583 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
        float _1596 = ((_1583 * _1577) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1534 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1583 * _1578) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1538 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1583 * _1579) / cbModelParam._m0[35u].z) + ((((((_1542 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1596, _1597, _1598), 0.0);
        float _1633 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1600.x + (-0.5));
        float _1635 = _1633 * (_1600.y + (-0.5));
        float _1636 = _1633 * (_1600.z + (-0.5));
        float _1643 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1607.x + (-0.5));
        float _1645 = _1643 * (_1607.y + (-0.5));
        float _1646 = _1643 * (_1607.z + (-0.5));
        float _1653 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1614.x + (-0.5));
        float _1655 = _1653 * (_1614.y + (-0.5));
        float _1656 = _1653 * (_1614.z + (-0.5));
        float _1663 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1621.x + (-0.5));
        float _1665 = _1663 * (_1621.y + (-0.5));
        float _1666 = _1663 * (_1621.z + (-0.5));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = _1634 * 0.5;
        float _1671 = _1644 * 0.5;
        float _1672 = _1654 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_1027, _1028, _1029), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _3969 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1697 + 1.0))) + _1702) * _1667;
        float _1712 = _1635 * 0.5;
        float _1713 = _1645 * 0.5;
        float _1714 = _1655 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_1027, _1028, _1029), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4002 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1739 + 1.0))) + _1744) * _1668;
        float _1754 = _1636 * 0.5;
        float _1755 = _1646 * 0.5;
        float _1756 = _1656 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_1027, _1028, _1029), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4035 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1781 + 1.0))) + _1786) * _1669;
        _1803 = _1636;
        _1804 = _1635;
        _1805 = _1634;
        _1806 = _1646;
        _1807 = _1645;
        _1808 = _1644;
        _1809 = _1656;
        _1810 = _1655;
        _1811 = _1654;
        _1812 = _1669;
        _1813 = _1668;
        _1814 = _1667;
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
    }
    else
    {
        _1803 = _1495;
        _1804 = _1495;
        _1805 = _1495;
        _1806 = _1495;
        _1807 = _1495;
        _1808 = _1495;
        _1809 = _1495;
        _1810 = _1495;
        _1811 = _1495;
        _1812 = _1495;
        _1813 = _1495;
        _1814 = _1495;
        _1815 = 0.0;
        _1816 = 0.0;
        _1817 = 0.0;
    }
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1507)) + _1507;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1508)) + _1508;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1509)) + _1509;
    float _1850 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1827));
    float _1871 = _1133 * 0.5;
    float _1872 = _1134 * 0.5;
    float _1873 = _1135 * 0.5;
    float _1874 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1877 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1880 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1914;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1887 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1494, _1498, _1501, _1504));
        float _1891 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1895 = dot(vec4(_1871, _1872, _1873, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1902 = dot(vec4(cbModelParam._m0[39u]), vec4(_1871, _1872, _1873, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1925;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1916 = dot(vec4(cbModelParam._m0[40u]), vec4(_1871, _1872, _1873, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1929 = (_1925 * cbModelParam._m0[1u].x) + (_1914 * (1.0 - cbModelParam._m0[1u].x));
    float _1939 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1030);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1939 : min(cbModelParam._m0[25u].z, _1939));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1987 = fma(_1194, cbModelParam._m0[13u].z, fma(_1190, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186)) + cbModelParam._m0[13u].w;
        float _1991 = fma(_1194, cbModelParam._m0[14u].z, fma(_1190, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186)) + cbModelParam._m0[14u].w;
        float _1995 = fma(_1194, cbModelParam._m0[15u].z, fma(_1190, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186)) + cbModelParam._m0[15u].w;
        float _1998 = fma(_1135, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133));
        float _2001 = fma(_1135, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133));
        float _2004 = fma(_1135, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133));
        float _2032;
        if (_1998 > 0.0)
        {
            _2032 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _2032 = frontier_phi_54_52_ladder;
        }
        float _2377;
        if (_2001 > 0.0)
        {
            _2377 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2377 = frontier_phi_63_59_ladder;
        }
        float _2711;
        if (_2004 > 0.0)
        {
            _2711 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2711 = frontier_phi_77_70_ladder;
        }
        float _2713 = isnan(_2377) ? _2032 : (isnan(_2032) ? _2377 : min(_2032, _2377));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _1998) + _1987;
        float _2719 = (_2714 * _2001) + _1991;
        float _2720 = (_2714 * _2004) + _1995;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2720, cbModelParam._m0[9u].z, fma(_2719, cbModelParam._m0[9u].y, _2718 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2720, cbModelParam._m0[10u].z, fma(_2719, cbModelParam._m0[10u].y, _2718 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2720, cbModelParam._m0[11u].z, fma(_2719, cbModelParam._m0[11u].y, _2718 * cbModelParam._m0[11u].x))), _1940);
            frontier_phi_53_77_ladder = _2846.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2846.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2846.z * cbModelParam._m0[1u].y;
        }
        _2020 = frontier_phi_53_77_ladder;
        _2022 = frontier_phi_53_77_ladder_1;
        _2024 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1133, _1134, _1135), _1940);
        _2020 = _2008.x * cbModelParam._m0[1u].y;
        _2022 = _2008.y * cbModelParam._m0[1u].y;
        _2024 = _2008.z * cbModelParam._m0[1u].y;
    }
    float _2028 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1030);
    float _2029 = isnan(_2028) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2028 : min(cbModelParam._m0[25u].w, _2028));
    float _2117;
    float _2119;
    float _2121;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2081 = fma(_1194, cbModelParam._m0[21u].z, fma(_1190, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186)) + cbModelParam._m0[21u].w;
        float _2085 = fma(_1194, cbModelParam._m0[22u].z, fma(_1190, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186)) + cbModelParam._m0[22u].w;
        float _2089 = fma(_1194, cbModelParam._m0[23u].z, fma(_1190, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186)) + cbModelParam._m0[23u].w;
        float _2092 = fma(_1135, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133));
        float _2095 = fma(_1135, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133));
        float _2098 = fma(_1135, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133));
        float _2382;
        if (_2092 > 0.0)
        {
            _2382 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2382 = frontier_phi_65_61_ladder;
        }
        float _2737;
        if (_2095 > 0.0)
        {
            _2737 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2737 = frontier_phi_79_72_ladder;
        }
        float _2906;
        if (_2098 > 0.0)
        {
            _2906 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2906 = frontier_phi_93_88_ladder;
        }
        float _2908 = isnan(_2737) ? _2382 : (isnan(_2382) ? _2737 : min(_2382, _2737));
        float _2909 = isnan(_2906) ? _2908 : (isnan(_2908) ? _2906 : min(_2908, _2906));
        float _2913 = (_2909 * _2092) + _2081;
        float _2914 = (_2909 * _2095) + _2085;
        float _2915 = (_2909 * _2098) + _2089;
        float _2916 = _2909 * 9.9999997473787516355514526367188e-05;
        float _2917 = (-1.0) - _2916;
        float _2919 = _2916 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2915 > _2919) || ((_2915 < _2917) || ((_2914 > _2919) || ((_2914 < _2917) || ((_2913 < _2917) || (_2913 > _2919))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2915, cbModelParam._m0[17u].z, fma(_2914, cbModelParam._m0[17u].y, _2913 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2915, cbModelParam._m0[18u].z, fma(_2914, cbModelParam._m0[18u].y, _2913 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2915, cbModelParam._m0[19u].z, fma(_2914, cbModelParam._m0[19u].y, _2913 * cbModelParam._m0[19u].x))), _2029);
            frontier_phi_62_93_ladder = _3148.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _3148.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _3148.x * cbModelParam._m0[1u].z;
        }
        _2117 = frontier_phi_62_93_ladder_2;
        _2119 = frontier_phi_62_93_ladder_1;
        _2121 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _2101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1133, _1134, _1135), _2029);
        _2117 = _2101.x * cbModelParam._m0[1u].z;
        _2119 = _2101.y * cbModelParam._m0[1u].z;
        _2121 = _2101.z * cbModelParam._m0[1u].z;
    }
    float _2133 = ((((1.0 - _1154) * ((_1141 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1154 * _1141)) * _1125;
    float _2134 = _2133 * ((cbModelParam._m0[1u].w * (_2117 - _2020)) + _2020);
    float _2135 = _2133 * ((cbModelParam._m0[1u].w * (_2119 - _2022)) + _2022);
    float _2136 = _2133 * ((cbModelParam._m0[1u].w * (_2121 - _2024)) + _2024);
    float _2139 = fma(_2136, cbSceneParam._m0[89u].z, fma(_2135, cbSceneParam._m0[89u].y, _2134 * cbSceneParam._m0[89u].x));
    float _2142 = fma(_2136, cbSceneParam._m0[90u].z, fma(_2135, cbSceneParam._m0[90u].y, _2134 * cbSceneParam._m0[90u].x));
    float _2145 = fma(_2136, cbSceneParam._m0[91u].z, fma(_2135, cbSceneParam._m0[91u].y, _2134 * cbSceneParam._m0[91u].x));
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_1100 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2163 = _1125 + (-1.0);
    float _2166 = (cbLight._m0[_2158].x * _2163) + 1.0;
    float _2167 = (cbLight._m0[_2158].y * _2163) + 1.0;
    uint _2168 = _2157 + 5u;
    float _2174 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2178 = _2157 + 4u;
    float _2184 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2188 = _2157 | 1u;
    float _2199 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_1027, _1028, _1029));
    float _2202 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_1027, _1028, _1029));
    float _4171 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _4182 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2207 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _2209 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2216 = ((cbLight._m0[_2168].x * _2174) * _2209) + ((cbLight._m0[_2178].x * _2184) * _2207);
    float _2217 = ((_2174 * cbLight._m0[_2168].y) * _2209) + ((_2184 * cbLight._m0[_2178].y) * _2207);
    float _2218 = ((_2174 * cbLight._m0[_2168].z) * _2209) + ((_2184 * cbLight._m0[_2178].z) * _2207);
    uint _2220 = _2157 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _1030) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2157].x + _1054;
    float _2236 = cbLight._m0[_2157].y + _1055;
    float _2237 = cbLight._m0[_2157].z + _1056;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2157].xyz));
    float _4193 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2249 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2250 = dot(vec3(_1027, _1028, _1029), vec3(_2242, _2243, _2244));
    float _4215 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2242, _2243, _2244));
    float _4226 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2274 = 1.0 - _2234;
    float _2285 = (0.5 / (((_2249 * ((_2248 * _2274) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2274) + _2234) * _2248))) * _2248;
    float _4237 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2298 = _2157 + 9u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _1030) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2188].x + _1054;
    float _2312 = cbLight._m0[_2188].y + _1055;
    float _2313 = cbLight._m0[_2188].z + _1056;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2188].xyz));
    float _4248 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2325 = dot(vec3(_1027, _1028, _1029), vec3(_2318, _2319, _2320));
    float _4259 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2318, _2319, _2320));
    float _4270 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2310 * _2310;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2347 = 1.0 - _2310;
    float _2357 = (0.5 / (((_2249 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2347) + _2310) * _2324))) * _2324;
    float _4281 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    float _2369 = (((_2346 * cbLight._m0[_2298].x) * _2359) * _2174) + (((_2273 * cbLight._m0[_2220].x) * _2287) * _2184);
    float _2370 = (((_2346 * cbLight._m0[_2298].y) * _2359) * _2174) + (((_2273 * cbLight._m0[_2220].y) * _2287) * _2184);
    float _2371 = (((_2346 * cbLight._m0[_2298].z) * _2359) * _2174) + (((_2273 * cbLight._m0[_2220].z) * _2287) * _2184);
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_2155.y == 0u)
    {
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2426;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2426;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2426;
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1063) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _1062) / _2442)));
        float _2463 = (log2(_2429 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            uint _2780 = 0u;
            uint _2789;
            bool _2790;
            for (;;)
            {
                _2789 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                _2790 = _2789 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2790)
                {
                    frontier_phi_90_pred = _2779;
                    frontier_phi_90_pred_1 = _2774;
                    frontier_phi_90_pred_2 = _2775;
                    frontier_phi_90_pred_3 = _2776;
                    frontier_phi_90_pred_4 = _2777;
                    frontier_phi_90_pred_5 = _2778;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2774;
                    _2950 = _2775;
                    _2951 = _2776;
                    _2952 = _2777;
                    _2953 = _2778;
                    _2954 = _2779;
                    _2955 = _2789;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2780 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2427;
                        float _3016 = _2975.y - _2428;
                        float _3017 = _2975.z - _2429;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_1081, _1084, _1087), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4302 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2427;
                        float _3051 = (-0.0) - _2428;
                        float _3052 = (-0.0) - _2429;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _1141;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_1081, _1084, _1087), vec3(_3057, _3058, _3059));
                        float _4318 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3092 = dot(vec3(_1081, _1084, _1087), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4329 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4340 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4351 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2858 = (_3046 * _2994.x) + _2952;
                        _2859 = (_3046 * _2994.y) + _2953;
                        _2860 = (_3046 * _2994.z) + _2954;
                        _2855 = (_3127 * _3011.x) + _2949;
                        _2856 = (_3127 * _3011.y) + _2950;
                        _2857 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2855;
                            _2950 = _2856;
                            _2951 = _2857;
                            _2952 = _2858;
                            _2953 = _2859;
                            _2954 = _2860;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_90_pred = _2860;
                    frontier_phi_90_pred_1 = _2855;
                    frontier_phi_90_pred_2 = _2856;
                    frontier_phi_90_pred_3 = _2857;
                    frontier_phi_90_pred_4 = _2858;
                    frontier_phi_90_pred_5 = _2859;
                }
                _2601 = frontier_phi_90_pred;
                _2591 = frontier_phi_90_pred_1;
                _2593 = frontier_phi_90_pred_2;
                _2595 = frontier_phi_90_pred_3;
                _2597 = frontier_phi_90_pred_4;
                _2599 = frontier_phi_90_pred_5;
                uint _2781 = _2780 + 1u;
                if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2774 = _2591;
                    _2775 = _2593;
                    _2776 = _2595;
                    _2777 = _2597;
                    _2778 = _2599;
                    _2779 = _2601;
                    _2780 = _2781;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((4294967295u << _2607) & _2473) == 0u)
        {
            _2742 = _2590;
            _2744 = _2592;
            _2746 = _2594;
            _2748 = _2596;
            _2750 = _2598;
            _2752 = _2600;
        }
        else
        {
            float _2767 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
            float _2768 = _2767 * _2427;
            float _2769 = _2767 * _2428;
            float _2770 = _2767 * _2429;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2932 = _2590;
                float _2933 = _2592;
                float _2934 = _2594;
                float _2935 = _2596;
                float _2936 = _2598;
                float _2937 = _2600;
                uint _2938 = _2607;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2948)
                    {
                        frontier_phi_99_pred = _2935;
                        frontier_phi_99_pred_1 = _2934;
                        frontier_phi_99_pred_2 = _2933;
                        frontier_phi_99_pred_3 = _2932;
                        frontier_phi_99_pred_4 = _2937;
                        frontier_phi_99_pred_5 = _2936;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3166 = _2932;
                        float _3167 = _2933;
                        float _3168 = _2934;
                        float _3169 = _2935;
                        float _3170 = _2936;
                        float _3171 = _2937;
                        uint _3172 = _2947;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3241;
                        vec4 _3256;
                        float _3302;
                        bool _3303;
                        for (;;)
                        {
                            uint _3183 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3228 = (_3183 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3183 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3183 * 40u) + 24u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3277 = (_3183 * 40u) + 28u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3302 = fma(_2429, _3290.z, fma(_2428, _3290.y, _3290.x * _2427)) + _3290.w;
                            _3303 = !((fma(_2429, _3271.z, fma(_2428, _3271.y, _3271.x * _2427)) + _3271.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3303)
                            {
                                float _3330 = _3198.x - _2427;
                                float _3331 = _3198.y - _2428;
                                float _3332 = _3198.z - _2429;
                                float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                                float _3336 = inversesqrt(_3333);
                                float _3337 = _3336 * _3330;
                                float _3338 = _3336 * _3331;
                                float _3339 = _3336 * _3332;
                                float _3343 = 1.0 - (_3333 / (_3199 * _3199));
                                float _4362 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3348 = sqrt(_3333) * _3214.w;
                                float _3350 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                                float _3351 = _3350 * _3350;
                                float _3354 = ((1.0 - _3351) * dot(vec3(_3337, _3338, _3339), vec3(_1081, _1084, _1087))) + _3351;
                                float _3357 = _3348 * _3348;
                                float _3361 = (fma(_2429, _3241.z, fma(_2428, _3241.y, _3241.x * _2427)) + _3241.w) / _3302;
                                float _3362 = (fma(_2429, _3256.z, fma(_2428, _3256.y, _3256.x * _2427)) + _3256.w) / _3302;
                                float _3366 = 1.0 - dot(vec2(_3361, _3362), vec2(_3361, _3362));
                                float _4378 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3368 = _3367 * (((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3344) / ((_3357 * 0.699999988079071044921875) + 1.0));
                                float _3380 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                                float _3381 = 1.0 - _1141;
                                float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                                float _3389 = _3388 * _3388;
                                float _3390 = _3389 * _3389;
                                float _3391 = _3337 - _2768;
                                float _3392 = _3338 - _2769;
                                float _3393 = _3339 - _2770;
                                float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                                float _3401 = dot(vec3(_1081, _1084, _1087), vec3((-0.0) - _2768, (-0.0) - _2769, (-0.0) - _2770));
                                float _4389 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3405 = dot(vec3(_1081, _1084, _1087), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                                float _4400 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                                float _3413 = _3350 * _3389;
                                float _3414 = _3413 * _3413;
                                float _3420 = ((1.0 - _3414) * dot(vec3(_1081, _1084, _1087), vec3(_3337, _3338, _3339))) + _3414;
                                float _4411 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3422 = 1.0 - _3389;
                                float _3432 = (0.5 / (((_3421 * ((_3404 * _3422) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3389) * _3404))) * _3421;
                                float _4422 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3442 = (_3367 * _3344) * (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3412 * _3412) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3368 * _3214.z;
                                frontier_phi_105_pred_1 = _3442 * _3226.x;
                                frontier_phi_105_pred_2 = _3442 * _3226.y;
                                frontier_phi_105_pred_3 = _3442 * _3226.z;
                                frontier_phi_105_pred_4 = _3368 * _3214.x;
                                frontier_phi_105_pred_5 = _3368 * _3214.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3451 = frontier_phi_105_pred;
                            _3446 = frontier_phi_105_pred_1;
                            _3447 = frontier_phi_105_pred_2;
                            _3448 = frontier_phi_105_pred_3;
                            _3449 = frontier_phi_105_pred_4;
                            _3450 = frontier_phi_105_pred_5;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            _3158 = _3451 + _3171;
                            _3153 = _3446 + _3166;
                            _3154 = _3447 + _3167;
                            _3155 = _3448 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _3156;
                        frontier_phi_99_pred_1 = _3155;
                        frontier_phi_99_pred_2 = _3154;
                        frontier_phi_99_pred_3 = _3153;
                        frontier_phi_99_pred_4 = _3158;
                        frontier_phi_99_pred_5 = _3157;
                    }
                    _2749 = frontier_phi_99_pred;
                    _2747 = frontier_phi_99_pred_1;
                    _2745 = frontier_phi_99_pred_2;
                    _2743 = frontier_phi_99_pred_3;
                    _2753 = frontier_phi_99_pred_4;
                    _2751 = frontier_phi_99_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2743;
                        _2933 = _2745;
                        _2934 = _2747;
                        _2935 = _2749;
                        _2936 = _2751;
                        _2937 = _2753;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2753;
                frontier_phi_81_82_ladder_1 = _2749;
                frontier_phi_81_82_ladder_2 = _2747;
                frontier_phi_81_82_ladder_3 = _2745;
                frontier_phi_81_82_ladder_4 = _2743;
                frontier_phi_81_82_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_81_82_ladder = _2600;
                frontier_phi_81_82_ladder_1 = _2596;
                frontier_phi_81_82_ladder_2 = _2594;
                frontier_phi_81_82_ladder_3 = _2592;
                frontier_phi_81_82_ladder_4 = _2590;
                frontier_phi_81_82_ladder_5 = _2598;
            }
            _2742 = frontier_phi_81_82_ladder_4;
            _2744 = frontier_phi_81_82_ladder_3;
            _2746 = frontier_phi_81_82_ladder_2;
            _2748 = frontier_phi_81_82_ladder_1;
            _2750 = frontier_phi_81_82_ladder_5;
            _2752 = frontier_phi_81_82_ladder;
        }
        float _2757 = isnan(1.0) ? _1125 : (isnan(_1125) ? 1.0 : min(_1125, 1.0));
        _2486 = (_2757 * _2748) + _2216;
        _2488 = (_2757 * _2750) + _2217;
        _2490 = (_2757 * _2752) + _2218;
        _2492 = ((_2742 * 0.039999999105930328369140625) * _2757) + _2369;
        _2494 = ((_2744 * 0.039999999105930328369140625) * _2757) + _2370;
        _2496 = ((_2746 * 0.039999999105930328369140625) * _2757) + _2371;
    }
    else
    {
        _2486 = _2216;
        _2488 = _2217;
        _2490 = _2218;
        _2492 = _2369;
        _2494 = _2370;
        _2496 = _2371;
    }
    uint _2502 = _1101 + uint(cbMatDynParam._m0[0u].w);
    float _2508 = (cbSceneParam._m0[72u].y * ((_994 * ((_985 - _947) - (_985 * _958))) + _947)) * cbInstanceData._m0[_2502].x;
    float _2509 = (cbSceneParam._m0[72u].y * ((_994 * ((_986 - _948) - (_986 * _958))) + _948)) * cbInstanceData._m0[_2502].y;
    float _2510 = (((_994 * ((_987 - _949) - (_987 * _958))) + _949) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2502].z;
    float _4438 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _4449 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _4460 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2527 = (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2486 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1125))) + ((_2492 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1929)) * cbPerFrame._m0[3u].x)) + _2508;
    float _2529 = (_2509 + ((_2494 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1929)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2488 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1125)));
    float _2531 = (_2510 + ((_2496 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1929)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2490 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1125)));
    float _4486 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2544 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    uint _2545 = _1100 + 6u;
    float _2553 = _1062 / cbSceneParam._m0[86u].x;
    float _2554 = _1063 / cbSceneParam._m0[86u].y;
    vec4 _2568 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, (log2((isnan(cbSceneParam._m0[77u].w) ? _1049 : (isnan(_1049) ? cbSceneParam._m0[77u].w : min(_1049, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2570 = _2568.x;
    float _2571 = _2568.y;
    float _2572 = _2568.z;
    float _2573 = _2568.w;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1049 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_1049) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1049 : min(cbSceneParam._m0[80u].w, _1049));
        float _2616 = _2615 / _1049;
        float _2627 = _2616 * _284;
        float _2628 = _285 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _286;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2649 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2651 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2633 > 0.0) ? exp2(_2649 * _2633) : (2.0 - exp2(_2651 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2803 = 1.0 / cbSceneParam._m0[80u].x;
            float _2804 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2805 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            _2868 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2814 - _2815) * 2.0) - ((exp2(_2649 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)))) - exp2(_2649 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))))) * _2803)) - ((exp2(_2651 * _2814) - exp2(_2651 * _2815)) * _2803))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2553, _2554, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2573);
        _2653 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2570;
        _2655 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2571;
        _2657 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2572;
        _2659 = _2879 * _2573;
    }
    else
    {
        _2653 = _2570;
        _2655 = _2571;
        _2657 = _2572;
        _2659 = _2573;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2659);
    float _2676 = exp2(_2672 * cbSceneParam._m0[78u].x);
    float _2677 = exp2(_2672 * cbSceneParam._m0[78u].y);
    float _2678 = exp2(_2672 * cbSceneParam._m0[78u].z);
    float _2679 = _2676 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0)));
    float _2680 = _2677 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0)));
    float _2681 = _2678 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.w = cbInstanceData._m0[_2545].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2508) * _2544) * _2676) * _2690;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2509) * _2544) * _2677) * _2690;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2510) * _2544) * _2678) * _2690;
    SV_Target_1.w = cbInstanceData._m0[_2545].w;
}


