#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1161;
float _3173;
float _3174;
float _3175;
float _3176;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _301 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _339 = cbMtdParam._m0[27u].w + _280;
    float _340 = cbMtdParam._m0[28u].x + _281;
    float _341 = cbMtdParam._m0[28u].y + _282;
    float _355 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_209 * _201, _209 * _202, _209 * _203));
    float _356 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_223 * TANGENT.x, _223 * TANGENT.y, _223 * TANGENT.z));
    float _357 = (-0.0) - dot(vec3(_339, _340, _341), vec3((-0.0) - (_216 * NORMAL.x), (-0.0) - (_216 * NORMAL.y), (-0.0) - (_216 * NORMAL.z)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _364 = _361 * _357;
    float _365 = (_361 * _355) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _366 = (_361 * _356) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _367 = _365 * cbMtdParam._m0[24u].x;
    float _368 = _366 * cbMtdParam._m0[23u].w;
    float _369 = fract(TEXCOORD.x);
    float _370 = fract(TEXCOORD.y);
    float _376;
    if (_367 > 0.0)
    {
        _376 = (1.0 - _369) / _367;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_367 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _369) / _367;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _376 = frontier_phi_3_2_ladder;
    }
    float _384;
    if (_368 > 0.0)
    {
        _384 = (1.0 - _370) / _368;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_368 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _370) / _368;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _384 = frontier_phi_7_6_ladder;
    }
    bool _386 = _364 > 0.0;
    float _388 = _386 ? (cbMtdParam._m0[17u].x / _364) : 5000.0;
    float _389 = isnan(_384) ? _376 : (isnan(_376) ? _384 : min(_376, _384));
    float _390 = isnan(_388) ? _389 : (isnan(_389) ? _388 : min(_389, _388));
    float _394 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = _369 + (-0.5);
    float _398 = _370 + (-0.5);
    float _401 = ((_390 * _364) + _394) / _394;
    vec4 _426 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_395 + (_390 * _367)) / _401) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_398 + (_390 * _368)) / _401) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _436 = cbMtdParam._m0[9u].x * _426.x;
    float _437 = cbMtdParam._m0[9u].y * _426.y;
    float _438 = cbMtdParam._m0[9u].z * _426.z;
    float _456 = _365 * cbMtdParam._m0[26u].z;
    float _457 = _366 * cbMtdParam._m0[26u].y;
    bool _458 = _456 > 0.0;
    float _463;
    if (_458)
    {
        _463 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _463 = frontier_phi_11_10_ladder;
    }
    bool _465 = _457 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _470 = frontier_phi_15_14_ladder;
    }
    float _473 = _386 ? (cbMtdParam._m0[19u].z / _364) : 5000.0;
    float _474 = isnan(_470) ? _463 : (isnan(_463) ? _470 : min(_463, _470));
    float _475 = isnan(_473) ? _474 : (isnan(_474) ? _473 : min(_474, _473));
    float _479 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _483 = ((_475 * _364) + _479) / _479;
    float _488 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _490 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _506 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_395 + (_475 * _456)) / _483) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_398 + (_475 * _457)) / _483) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518;
    if (_458)
    {
        _518 = (1.0 - _369) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _369) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _518 = frontier_phi_19_18_ladder;
    }
    float _524;
    if (_465)
    {
        _524 = (1.0 - _370) / _457;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_457 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _370) / _457;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _524 = frontier_phi_23_22_ladder;
    }
    float _526 = isnan(_524) ? _518 : (isnan(_518) ? _524 : min(_518, _524));
    float _527 = isnan(_473) ? _526 : (isnan(_526) ? _473 : min(_526, _473));
    float _534 = ((_527 * _364) + _479) / _479;
    vec4 _554 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_395 + (_527 * _456)) / _534) + 0.5) + _488) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_398 + (_527 * _457)) / _534) + 0.5) + _490) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _556 = _554.x;
    float _563 = (_556 * ((_506.x * cbMtdParam._m0[10u].x) - _436)) + _436;
    float _564 = (_556 * ((_506.y * cbMtdParam._m0[10u].y) - _437)) + _437;
    float _565 = (_556 * ((_506.z * cbMtdParam._m0[10u].z) - _438)) + _438;
    vec4 _589 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _594 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _600 = ((_589.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _602 = (-0.0) - (cbMtdParam._m0[21u].x * ((_589.x * 0.5) + (-0.25)));
    float _603 = fract(_594);
    float _605 = fract(_594 + 0.5);
    vec4 _632 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_603 * _602) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_600 * _603) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _634 = _632.x;
    float _640 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_605 * _602) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_600 * _605) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _634) * abs((_603 * 2.0) + (-1.0))) + _634;
    float _646 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _650 = fract(abs(_646));
    float _659 = sin(cbMtdParam._m0[21u].z);
    float _660 = cos(cbMtdParam._m0[21u].z);
    float _661 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _662 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _692 = abs(cbMtdParam._m0[20u].w * (((_640 - (((_646 >= ((-0.0) - _646)) ? _650 : ((-0.0) - _650)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_662, (-0.0) - _659, _660 * _661) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_662, _660, _661 * _659) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _696 = (((_692 * cbMtdParam._m0[18u].y) - _640) * _692) + _640;
    float _3215 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    vec4 _709 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _724 = (cbMtdParam._m0[14u].x * _709.x) * cbMtdParam._m0[19u].x;
    float _725 = (cbMtdParam._m0[14u].y * _709.y) * cbMtdParam._m0[19u].x;
    float _726 = (cbMtdParam._m0[14u].z * _709.z) * cbMtdParam._m0[19u].x;
    float _736 = exp2(log2(_697) * cbMtdParam._m0[20u].x);
    float _3226 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3237 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3248 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _765 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _770 = _280 * _769;
    float _771 = _281 * _769;
    float _772 = _282 * _769;
    vec4 _777 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _779 = _777.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3259 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3270 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) - _883)) + _883) < ((_779 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _806 = uint(roundEven(NORMAL.w)) * 13u;
    uint _808 = _806 + 9u;
    uint _809 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3281 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _832 = _829.x * TEXCOORD_4;
    float _833 = (-0.0) - _770;
    float _834 = (-0.0) - _771;
    float _835 = (-0.0) - _772;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1160;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = (cbModelParam._m0[37u].x * ((((fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _950 = (cbModelParam._m0[37u].y * ((((fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _951 = (((((fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _950, _951), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _950, _951), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _950, _951), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _950, _951), 0.0);
        float _988 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_954.x + (-0.5));
        float _990 = _988 * (_954.y + (-0.5));
        float _991 = _988 * (_954.z + (-0.5));
        float _998 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_961.x + (-0.5));
        float _1000 = _998 * (_961.y + (-0.5));
        float _1001 = _998 * (_961.z + (-0.5));
        float _1008 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_968.x + (-0.5));
        float _1010 = _1008 * (_968.y + (-0.5));
        float _1011 = _1008 * (_968.z + (-0.5));
        float _1018 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_975.x + (-0.5));
        float _1020 = _1018 * (_975.y + (-0.5));
        float _1021 = _1018 * (_975.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1042 = (dot(vec3(0.0), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3329 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1052 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3340 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3351 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * (_1054 + 1.0))) + _1059) * _1022;
        float _1069 = _990 * 0.5;
        float _1070 = _1000 * 0.5;
        float _1071 = _1010 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(0.0), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3362 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3373 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3384 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * (_1096 + 1.0))) + _1101) * _1023;
        float _1111 = _991 * 0.5;
        float _1112 = _1001 * 0.5;
        float _1113 = _1011 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(0.0), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3395 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3406 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3417 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * (_1138 + 1.0))) + _1143) * _1024;
        _1160 = _991;
        _1162 = _990;
        _1163 = _989;
        _1164 = _1001;
        _1165 = _1000;
        _1166 = _999;
        _1167 = _1011;
        _1168 = _1010;
        _1169 = _1009;
        _1170 = _1024;
        _1171 = _1023;
        _1172 = _1022;
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _1161;
        _1162 = _1161;
        _1163 = _1161;
        _1164 = _1161;
        _1165 = _1161;
        _1166 = _1161;
        _1167 = _1161;
        _1168 = _1161;
        _1169 = _1161;
        _1170 = _1161;
        _1171 = _1161;
        _1172 = _1161;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1231 = (cbModelParam._m0[38u].x * ((((fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1232 = (cbModelParam._m0[38u].y * ((((fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1233 = (((((fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(0.0), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3480 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(0.0), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3513 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(0.0), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3546 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1161;
        _1439 = _1161;
        _1440 = _1161;
        _1441 = _1161;
        _1442 = _1161;
        _1443 = _1161;
        _1444 = _1161;
        _1445 = _1161;
        _1446 = _1161;
        _1447 = _1161;
        _1448 = _1161;
        _1449 = _1161;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1173)) + _1173;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1174)) + _1174;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1175)) + _1175;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _770 * (-0.5);
    float _1507 = _771 * (-0.5);
    float _1508 = _772 * (-0.5);
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1160, _1164, _1167, _1170));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_835, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833));
        float _1635 = fma(_835, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833));
        float _1638 = fma(_835, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833));
        float _1664;
        if (_1632 > 0.0)
        {
            _1664 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1664 = frontier_phi_41_39_ladder;
        }
        float _1984;
        if (_1635 > 0.0)
        {
            _1984 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1984 = frontier_phi_50_46_ladder;
        }
        float _2329;
        if (_1638 > 0.0)
        {
            _2329 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2329 = frontier_phi_64_57_ladder;
        }
        float _2331 = isnan(_1984) ? _1664 : (isnan(_1664) ? _1984 : min(_1664, _1984));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1632) + _1621;
        float _2337 = (_2332 * _1635) + _1625;
        float _2338 = (_2332 * _1638) + _1629;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2338, cbModelParam._m0[9u].z, fma(_2337, cbModelParam._m0[9u].y, _2336 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2338, cbModelParam._m0[10u].z, fma(_2337, cbModelParam._m0[10u].y, _2336 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2338, cbModelParam._m0[11u].z, fma(_2337, cbModelParam._m0[11u].y, _2336 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_40_64_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_40_64_ladder_2;
        _1656 = frontier_phi_40_64_ladder_1;
        _1658 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_833, _834, _835), _1573);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1661 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_835, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833));
        float _1727 = fma(_835, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833));
        float _1730 = fma(_835, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833));
        float _1989;
        if (_1724 > 0.0)
        {
            _1989 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1989 = frontier_phi_52_48_ladder;
        }
        float _2355;
        if (_1727 > 0.0)
        {
            _2355 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2355 = frontier_phi_66_59_ladder;
        }
        float _2542;
        if (_1730 > 0.0)
        {
            _2542 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2542 = frontier_phi_84_77_ladder;
        }
        float _2544 = isnan(_2355) ? _1989 : (isnan(_1989) ? _2355 : min(_1989, _2355));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1724) + _1713;
        float _2550 = (_2545 * _1727) + _1717;
        float _2551 = (_2545 * _1730) + _1721;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_49_84_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_49_84_ladder_2;
        _1751 = frontier_phi_49_84_ladder_1;
        _1753 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_833, _834, _835), _1661);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1765 = _832 * 0.01200000010430812835693359375;
    float _1767 = _1765 * ((cbModelParam._m0[1u].w * (_1749 - _1654)) + _1654);
    float _1768 = _1765 * ((cbModelParam._m0[1u].w * (_1751 - _1656)) + _1656);
    float _1769 = _1765 * ((cbModelParam._m0[1u].w * (_1753 - _1658)) + _1658);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    vec4 _1786 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_792, _793));
    float _1788 = _1786.w;
    float _1801 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1788);
    float _1802 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1788);
    float _1803 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1788);
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_806 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1815 = _832 + (-1.0);
    float _1818 = (cbLight._m0[_1810].x * _1815) + 1.0;
    float _1819 = (cbLight._m0[_1810].y * _1815) + 1.0;
    uint _1820 = _1809 + 5u;
    float _1826 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1830 = _1809 + 4u;
    float _1839 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1843 = _1809 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1809].xyz), vec3(0.0));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(0.0));
    float _3682 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _3693 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1820].x * _1826) * _1864) + (((cbLight._m0[_1830].x * _1801) * _1839) * _1862);
    float _1872 = ((_1826 * cbLight._m0[_1820].y) * _1864) + (((cbLight._m0[_1830].y * _1802) * _1839) * _1862);
    float _1873 = ((_1826 * cbLight._m0[_1820].z) * _1864) + (((cbLight._m0[_1830].z * _1803) * _1839) * _1862);
    uint _1874 = _1809 + 8u;
    float _1880 = cbLight._m0[_1809].x + _770;
    float _1881 = cbLight._m0[_1809].y + _771;
    float _1882 = cbLight._m0[_1809].z + _772;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1890 = dot(vec3(0.0), vec3(cbLight._m0[_1809].xyz));
    float _3704 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1894 = dot(vec3(0.0), vec3(_770, _771, _772));
    float _3715 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1880 * _1886, _1881 * _1886, _1882 * _1886));
    float _3726 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = (0.5 / ((_1893 + 9.9999999392252902907785028219223e-09) + _1897)) * _1893;
    float _3737 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.31831014156341552734375;
    uint _1931 = _1809 + 9u;
    float _1937 = cbLight._m0[_1843].x + _770;
    float _1938 = cbLight._m0[_1843].y + _771;
    float _1939 = cbLight._m0[_1843].z + _772;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1947 = dot(vec3(0.0), vec3(cbLight._m0[_1843].xyz));
    float _3748 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1937 * _1943, _1938 * _1943, _1939 * _1943));
    float _3759 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = (0.5 / ((_1950 + 9.9999999392252902907785028219223e-09) + _1897)) * _1950;
    float _3770 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.31831014156341552734375;
    float _1976 = (((_1960 * cbLight._m0[_1931].x) * _1966) * _1826) + ((((cbLight._m0[_1874].x * _1801) * _1909) * _1917) * _1839);
    float _1977 = (((_1960 * cbLight._m0[_1931].y) * _1966) * _1826) + ((((cbLight._m0[_1874].y * _1802) * _1909) * _1917) * _1839);
    float _1978 = (((_1960 * cbLight._m0[_1931].z) * _1966) * _1826) + ((((cbLight._m0[_1874].z * _1803) * _1909) * _1917) * _1839);
    float _2094;
    float _2096;
    float _2098;
    float _2100;
    float _2102;
    float _2104;
    if (_1807.y == 0u)
    {
        float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2034;
        float _2036 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2034;
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2034;
        uvec4 _2049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2050 = _2049.x;
        uint _2061 = uint((float(_2049.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2050))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2050)));
        float _2071 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2072 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        uint _2075 = uint(isnan(14.0) ? _2072 : (isnan(_2072) ? 14.0 : min(_2072, 14.0)));
        uvec4 _2080 = texelFetch(g_lightClusterGridBuffer, int(((_2075 << 2u) + (_2061 << 6u)) >> 2u));
        uint _2081 = _2080.x;
        uint _2082 = _2049.z;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        if (((((1u << ((_2082 >> 4u) & 15u)) + 4294967295u) & _2081) == 0u) || ((_2082 & 240u) == 0u))
        {
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
            _2206 = 0.0;
            _2208 = 0.0;
        }
        else
        {
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2207;
            float _2209;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            uint _2395 = 0u;
            uint _2404;
            bool _2405;
            for (;;)
            {
                _2404 = texelFetch(g_lightClassification, int((((_2075 << 5u) + (_2061 << 9u)) + (_2395 << 2u)) >> 2u)).x;
                _2405 = _2404 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2405)
                {
                    frontier_phi_79_pred = _2394;
                    frontier_phi_79_pred_1 = _2393;
                    frontier_phi_79_pred_2 = _2392;
                    frontier_phi_79_pred_3 = _2391;
                    frontier_phi_79_pred_4 = _2390;
                    frontier_phi_79_pred_5 = _2389;
                }
                else
                {
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    uint _2591;
                    _2585 = _2389;
                    _2586 = _2390;
                    _2587 = _2391;
                    _2588 = _2392;
                    _2589 = _2393;
                    _2590 = _2394;
                    _2591 = _2404;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    for (;;)
                    {
                        uint _2595 = uint(findLSB(_2591)) + (_2395 << 5u);
                        uint _2592 = (_2591 + 4294967295u) & _2591;
                        uint _2597 = _2595 * 48u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2597)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2597 + 3u)).x));
                        uint _2617 = (_2595 * 48u) + 4u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 3u)).x));
                        uint _2636 = (_2595 * 48u) + 8u;
                        vec3 _2647 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x));
                        float _2651 = _2611.x - _2035;
                        float _2652 = _2611.y - _2036;
                        float _2653 = _2611.z - _2037;
                        float _2654 = dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653));
                        float _2657 = inversesqrt(_2654);
                        float _2666 = 1.0 - (_2654 * _2611.w);
                        float _3791 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2667 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                        float _2668 = sqrt(_2654) * _2630.w;
                        float _2671 = 1.39999997615814208984375 / (_2668 + 1.39999997615814208984375);
                        float _2672 = _2671 * _2671;
                        float _2675 = ((1.0 - _2672) * dot(vec3(0.0), vec3(_2657 * _2651, _2657 * _2652, _2657 * _2653))) + _2672;
                        float _2678 = _2668 * _2668;
                        float _2682 = ((isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0))) * _2667) / ((_2678 * 0.699999988079071044921875) + 1.0);
                        float _2686 = (-0.0) - _2035;
                        float _2687 = (-0.0) - _2036;
                        float _2688 = (-0.0) - _2037;
                        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
                        float _2696 = dot(vec3(0.0), vec3(_2692 * _2686, _2692 * _2687, _2692 * _2688));
                        float _3807 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _3818 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                        float _2700 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
                        float _2704 = (0.5 / (((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) + 9.9999999392252902907785028219223e-09) + _2700)) * _2700;
                        float _3829 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2713 = (((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 3.1415927410125732421875) / ((_2678 * 2.1991131305694580078125) + 3.141590118408203125)) * _2667;
                        _2489 = (_2682 * _2630.x) + _2588;
                        _2490 = (_2682 * _2630.y) + _2589;
                        _2491 = (_2682 * _2630.z) + _2590;
                        _2486 = (_2713 * _2647.x) + _2585;
                        _2487 = (_2713 * _2647.y) + _2586;
                        _2488 = (_2713 * _2647.z) + _2587;
                        if (_2592 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2585 = _2486;
                            _2586 = _2487;
                            _2587 = _2488;
                            _2588 = _2489;
                            _2589 = _2490;
                            _2590 = _2491;
                            _2591 = _2592;
                        }
                    }
                    frontier_phi_79_pred = _2491;
                    frontier_phi_79_pred_1 = _2490;
                    frontier_phi_79_pred_2 = _2489;
                    frontier_phi_79_pred_3 = _2488;
                    frontier_phi_79_pred_4 = _2487;
                    frontier_phi_79_pred_5 = _2486;
                }
                _2209 = frontier_phi_79_pred;
                _2207 = frontier_phi_79_pred_1;
                _2205 = frontier_phi_79_pred_2;
                _2203 = frontier_phi_79_pred_3;
                _2201 = frontier_phi_79_pred_4;
                _2199 = frontier_phi_79_pred_5;
                uint _2396 = _2395 + 1u;
                if (_2396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2389 = _2199;
                    _2390 = _2201;
                    _2391 = _2203;
                    _2392 = _2205;
                    _2393 = _2207;
                    _2394 = _2209;
                    _2395 = _2396;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
            _2206 = _2207;
            _2208 = _2209;
        }
        uvec4 _2212 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2213 = _2212.z;
        uint _2215 = (_2213 >> 8u) & 15u;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        if (((4294967295u << _2215) & _2081) == 0u)
        {
            _2360 = _2198;
            _2362 = _2200;
            _2364 = _2202;
            _2366 = _2204;
            _2368 = _2206;
            _2370 = _2208;
        }
        else
        {
            float _2385 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2215 < ((_2213 >> 12u) & 15u))
            {
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2371;
                float _2568 = _2198;
                float _2569 = _2200;
                float _2570 = _2202;
                float _2571 = _2204;
                float _2572 = _2206;
                float _2573 = _2208;
                uint _2574 = _2215;
                uint _2583;
                bool _2584;
                for (;;)
                {
                    _2583 = texelFetch(g_lightClassification, int((((_2075 << 5u) + (_2061 << 9u)) + (_2574 << 2u)) >> 2u)).x;
                    _2584 = _2583 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2584)
                    {
                        frontier_phi_93_pred = _2572;
                        frontier_phi_93_pred_1 = _2571;
                        frontier_phi_93_pred_2 = _2570;
                        frontier_phi_93_pred_3 = _2569;
                        frontier_phi_93_pred_4 = _2568;
                        frontier_phi_93_pred_5 = _2573;
                    }
                    else
                    {
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _2761 = _2568;
                        float _2762 = _2569;
                        float _2763 = _2570;
                        float _2764 = _2571;
                        float _2765 = _2572;
                        float _2766 = _2573;
                        uint _2767 = _2583;
                        uint _2768;
                        vec4 _2793;
                        float _2794;
                        vec4 _2809;
                        vec3 _2821;
                        vec4 _2837;
                        vec4 _2852;
                        float _2898;
                        bool _2899;
                        for (;;)
                        {
                            uint _2778 = ((_2574 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2767));
                            _2768 = (_2767 + 4294967295u) & _2767;
                            uint _2780 = _2778 * 40u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            _2794 = _2793.w;
                            uint _2796 = (_2778 * 40u) + 4u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2811 = (_2778 * 40u) + 8u;
                            _2821 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x));
                            uint _2824 = (_2778 * 40u) + 16u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2778 * 40u) + 20u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2778 * 40u) + 24u;
                            vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2873 = (_2778 * 40u) + 28u;
                            vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            _2898 = fma(_2037, _2886.z, fma(_2036, _2886.y, _2886.x * _2035)) + _2886.w;
                            _2899 = !((fma(_2037, _2867.z, fma(_2036, _2867.y, _2867.x * _2035)) + _2867.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2899)
                            {
                                float _2926 = _2793.x - _2035;
                                float _2927 = _2793.y - _2036;
                                float _2928 = _2793.z - _2037;
                                float _2929 = dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928));
                                float _2932 = inversesqrt(_2929);
                                float _2933 = _2932 * _2926;
                                float _2934 = _2932 * _2927;
                                float _2935 = _2932 * _2928;
                                float _2939 = 1.0 - (_2929 / (_2794 * _2794));
                                float _3840 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2940 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                                float _2944 = sqrt(_2929) * _2809.w;
                                float _2946 = 1.39999997615814208984375 / (_2944 + 1.39999997615814208984375);
                                float _2947 = _2946 * _2946;
                                float _2948 = 1.0 - _2947;
                                float _2950 = (_2948 * dot(vec3(_2933, _2934, _2935), vec3(0.0))) + _2947;
                                float _2953 = _2944 * _2944;
                                float _2957 = (fma(_2037, _2837.z, fma(_2036, _2837.y, _2837.x * _2035)) + _2837.w) / _2898;
                                float _2958 = (fma(_2037, _2852.z, fma(_2036, _2852.y, _2852.x * _2035)) + _2852.w) / _2898;
                                float _2962 = 1.0 - dot(vec2(_2957, _2958), vec2(_2957, _2958));
                                float _3856 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                                float _2964 = _2963 * (((isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))) * _2940) / ((_2953 * 0.699999988079071044921875) + 1.0));
                                float _2974 = dot(vec3(0.0), vec3((-0.0) - (_2035 * _2385), (-0.0) - (_2036 * _2385), (-0.0) - (_2037 * _2385)));
                                float _3867 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2982 = (_2948 * dot(vec3(0.0), vec3(_2933, _2934, _2935))) + _2947;
                                float _3878 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                                float _2987 = (0.5 / (((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) + 9.9999999392252902907785028219223e-09) + _2983)) * _2983;
                                float _3889 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2994 = (_2963 * _2940) * (((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 3.1415927410125732421875) / ((_2953 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2964 * _2809.z;
                                frontier_phi_99_pred_1 = _2964 * _2809.y;
                                frontier_phi_99_pred_2 = _2964 * _2809.x;
                                frontier_phi_99_pred_3 = _2994 * _2821.z;
                                frontier_phi_99_pred_4 = _2994 * _2821.y;
                                frontier_phi_99_pred_5 = _2994 * _2821.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3003 = frontier_phi_99_pred;
                            _3002 = frontier_phi_99_pred_1;
                            _3001 = frontier_phi_99_pred_2;
                            _3000 = frontier_phi_99_pred_3;
                            _2999 = frontier_phi_99_pred_4;
                            _2998 = frontier_phi_99_pred_5;
                            _2751 = _3001 + _2764;
                            _2752 = _3002 + _2765;
                            _2753 = _3003 + _2766;
                            _2748 = _2998 + _2761;
                            _2749 = _2999 + _2762;
                            _2750 = _3000 + _2763;
                            if (_2768 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2768;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2752;
                        frontier_phi_93_pred_1 = _2751;
                        frontier_phi_93_pred_2 = _2750;
                        frontier_phi_93_pred_3 = _2749;
                        frontier_phi_93_pred_4 = _2748;
                        frontier_phi_93_pred_5 = _2753;
                    }
                    _2369 = frontier_phi_93_pred;
                    _2367 = frontier_phi_93_pred_1;
                    _2365 = frontier_phi_93_pred_2;
                    _2363 = frontier_phi_93_pred_3;
                    _2361 = frontier_phi_93_pred_4;
                    _2371 = frontier_phi_93_pred_5;
                    uint _2575 = _2574 + 1u;
                    if (_2575 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2568 = _2361;
                        _2569 = _2363;
                        _2570 = _2365;
                        _2571 = _2367;
                        _2572 = _2369;
                        _2573 = _2371;
                        _2574 = _2575;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2371;
                frontier_phi_68_69_ladder_1 = _2369;
                frontier_phi_68_69_ladder_2 = _2367;
                frontier_phi_68_69_ladder_3 = _2365;
                frontier_phi_68_69_ladder_4 = _2361;
                frontier_phi_68_69_ladder_5 = _2363;
            }
            else
            {
                frontier_phi_68_69_ladder = _2208;
                frontier_phi_68_69_ladder_1 = _2206;
                frontier_phi_68_69_ladder_2 = _2204;
                frontier_phi_68_69_ladder_3 = _2202;
                frontier_phi_68_69_ladder_4 = _2198;
                frontier_phi_68_69_ladder_5 = _2200;
            }
            _2360 = frontier_phi_68_69_ladder_4;
            _2362 = frontier_phi_68_69_ladder_5;
            _2364 = frontier_phi_68_69_ladder_3;
            _2366 = frontier_phi_68_69_ladder_2;
            _2368 = frontier_phi_68_69_ladder_1;
            _2370 = frontier_phi_68_69_ladder;
        }
        float _2375 = isnan(1.0) ? _832 : (isnan(_832) ? 1.0 : min(_832, 1.0));
        _2094 = (_2375 * _2366) + _1871;
        _2096 = (_2375 * _2368) + _1872;
        _2098 = (_2375 * _2370) + _1873;
        _2100 = ((_2360 * 0.039999999105930328369140625) * _2375) + _1976;
        _2102 = ((_2362 * 0.039999999105930328369140625) * _2375) + _1977;
        _2104 = ((_2364 * 0.039999999105930328369140625) * _2375) + _1978;
    }
    else
    {
        _2094 = _1871;
        _2096 = _1872;
        _2098 = _1873;
        _2100 = _1976;
        _2102 = _1977;
        _2104 = _1978;
    }
    uint _2110 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _2116 = ((_736 * (_724 - (_724 * _697))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2110].x;
    float _2117 = ((_736 * (_725 - (_725 * _697))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2110].y;
    float _2118 = ((_736 * (_726 - (_726 * _697))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2110].z;
    float _3905 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _3916 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _3927 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2135 = (((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_2094 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _832))) + ((_2100 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + _2116;
    float _2137 = (_2117 + ((_2102 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_2096 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _832)));
    float _2139 = (_2118 + ((_2104 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1564)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_2098 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _832)));
    float _2140 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2141 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2148 = cbMtdParam._m0[2u].x * _2116;
    float _2149 = cbMtdParam._m0[2u].y * _2117;
    float _2150 = cbMtdParam._m0[2u].z * _2118;
    float _3953 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2152 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    uint _2153 = _806 + 6u;
    float _2161 = _792 / cbSceneParam._m0[86u].x;
    float _2162 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2176 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2161, _2162, (log2((isnan(cbSceneParam._m0[77u].w) ? _765 : (isnan(_765) ? cbSceneParam._m0[77u].w : min(_765, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2178 = _2176.x;
    float _2179 = _2176.y;
    float _2180 = _2176.z;
    float _2181 = _2176.w;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_765 > cbSceneParam._m0[78u].w)
    {
        float _2223 = isnan(_765) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _765 : min(cbSceneParam._m0[80u].w, _765));
        float _2224 = _2223 / _765;
        float _2235 = _2224 * _280;
        float _2236 = _281 * _2224;
        float _2237 = (-0.0) - _2236;
        float _2238 = _2224 * _282;
        float _2240 = (cbSceneParam._m0[77u].w * _2237) / _2223;
        float _2241 = _2240 + cbSceneParam._m0[79u].w;
        float _2242 = cbSceneParam._m0[79u].w - _2236;
        float _2248 = sqrt(((_2235 * _2235) + (_2236 * _2236)) + (_2238 * _2238));
        float _2251 = (1.0 - (cbSceneParam._m0[77u].w / _2223)) * _2248;
        float _2257 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2259 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2499;
        if (abs((_2237 - _2240) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2499 = ((((_2241 > 0.0) ? exp2(_2257 * _2241) : (2.0 - exp2(_2259 * _2241))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2251;
        }
        else
        {
            float _2418 = 1.0 / cbSceneParam._m0[80u].x;
            float _2419 = isnan(_2242) ? _2241 : (isnan(_2241) ? _2242 : max(_2241, _2242));
            float _2420 = isnan(_2242) ? _2241 : (isnan(_2241) ? _2242 : min(_2241, _2242));
            float _2429 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : min(_2419, 0.0));
            float _2430 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : min(_2420, 0.0));
            _2499 = ((abs(_2248 / _2237) * cbSceneParam._m0[80u].y) * ((((_2429 - _2430) * 2.0) - ((exp2(_2257 * (isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0)))) - exp2(_2257 * (isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0))))) * _2418)) - ((exp2(_2259 * _2429) - exp2(_2259 * _2430)) * _2418))) + (_2251 * cbSceneParam._m0[80u].z);
        }
        vec4 _2501 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2161, _2162, 1.0), 0.0);
        float _2510 = exp2((_2499 * (-1.44269502162933349609375)) * (1.0 - _2501.w));
        float _2511 = log2(_2510);
        float _2527 = log2(_2181);
        _2261 = (exp2(_2527 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2511 * cbSceneParam._m0[78u].x)) * _2501.x) / cbSceneParam._m0[78u].x)) + _2178;
        _2263 = (exp2(_2527 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2511 * cbSceneParam._m0[78u].y)) * _2501.y) / cbSceneParam._m0[78u].y)) + _2179;
        _2265 = (exp2(_2527 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2511 * cbSceneParam._m0[78u].z)) * _2501.z) / cbSceneParam._m0[78u].z)) + _2180;
        _2267 = _2510 * _2181;
    }
    else
    {
        _2261 = _2178;
        _2263 = _2179;
        _2265 = _2180;
        _2267 = _2181;
    }
    bool _2537;
    vec4 _2276;
    vec4 _2299;
    float _2301;
    float _2305;
    float _2306;
    float _2307;
    float _2310;
    float _2313;
    float _2316;
    float _2317;
    bool _2328;
    for (;;)
    {
        _2276 = cbMatDynParam._m0[0u];
        float _2278 = roundEven(_2276.y);
        bool _2279 = _2278 == 3.0;
        float _2281 = log2(_2267);
        float _2285 = exp2(_2281 * cbSceneParam._m0[78u].x);
        float _2286 = exp2(_2281 * cbSceneParam._m0[78u].y);
        float _2287 = exp2(_2281 * cbSceneParam._m0[78u].z);
        float _2288 = _2285 * _2140;
        float _2289 = _2286 * _2141;
        float _2290 = _2287 * _2142;
        float _2297 = _779 + (-0.5);
        _2299 = cbMtdParam._m0[1u];
        _2301 = _2299.y * _2297;
        float _2304 = (_2278 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2305 = _2304 * (_2279 ? _2288 : (_2288 + (cbSceneParam._m0[72u].w * _2261)));
        _2306 = _2304 * (_2279 ? _2289 : (_2289 + (cbSceneParam._m0[72u].w * _2263)));
        _2307 = _2304 * (_2279 ? _2290 : (_2290 + (cbSceneParam._m0[72u].w * _2265)));
        _2310 = ((_2148 * _2152) * _2285) * _2304;
        _2313 = ((_2149 * _2152) * _2286) * _2304;
        _2316 = ((_2150 * _2152) * _2287) * _2304;
        _2317 = _2297 * 0.999000012874603271484375;
        _2328 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2328)
        {
            if ((cbInstanceData._m0[_806 + 7u].x + _2317) < 0.5)
            {
                _2537 = true;
                break;
            }
        }
        uint _2453 = _808 + uint(_2276.w);
        if ((cbInstanceData._m0[_2453].w < 1.0) && ((cbInstanceData._m0[_2453].w + _2317) < 0.5))
        {
            _2537 = true;
            break;
        }
        if ((_2301 + 1.0) < _2299.x)
        {
            _2537 = true;
            break;
        }
        _2537 = false;
        break;
    }
    float _2718;
    if (_2537)
    {
        discard_state = true;
        _2718 = 0.0;
    }
    else
    {
        _2718 = cbInstanceData._m0[_2153].w;
    }
    SV_Target.x = _2305;
    SV_Target.y = _2306;
    SV_Target.z = _2307;
    SV_Target.w = _2718;
    SV_Target_1.x = _2310;
    SV_Target_1.y = _2313;
    SV_Target_1.z = _2316;
    SV_Target_1.w = cbInstanceData._m0[_2153].w;
    discard_exit();
}


