#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1544;
float _4018;
float _4019;
float _4020;
float _4021;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    vec4 _308 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _311 = _308.x;
    vec4 _329 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _346 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _311) + cbMtdParam._m0[12u].x) * _329.x;
    float _348 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _311) + cbMtdParam._m0[12u].y) * _329.y;
    float _350 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _311) + cbMtdParam._m0[12u].z) * _329.z;
    vec4 _368 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = cbMtdParam._m0[27u].w + _292;
    float _408 = cbMtdParam._m0[28u].x + _293;
    float _409 = cbMtdParam._m0[28u].y + _294;
    float _423 = (-0.0) - dot(vec3(_407, _408, _409), vec3(_222, _223, _224));
    float _424 = (-0.0) - dot(vec3(_407, _408, _409), vec3(_236, _237, _238));
    float _425 = (-0.0) - dot(vec3(_407, _408, _409), vec3((-0.0) - _229, (-0.0) - _230, (-0.0) - _231));
    float _429 = inversesqrt(dot(vec3(_423, _424, _425), vec3(_423, _424, _425)));
    float _432 = _429 * _425;
    float _433 = (_429 * _423) + ((cbMtdParam._m0[25u].w * _311) * ((_368.x * 2.0) + (-1.0)));
    float _434 = (_429 * _424) + ((cbMtdParam._m0[26u].x * _311) * ((_368.y * 2.0) + (-1.0)));
    float _435 = _433 * cbMtdParam._m0[24u].x;
    float _436 = _434 * cbMtdParam._m0[23u].w;
    float _437 = fract(TEXCOORD.x);
    float _438 = fract(TEXCOORD.y);
    float _444;
    if (_435 > 0.0)
    {
        _444 = (1.0 - _437) / _435;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _437) / _435;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _444 = frontier_phi_3_2_ladder;
    }
    float _452;
    if (_436 > 0.0)
    {
        _452 = (1.0 - _438) / _436;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _438) / _436;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _452 = frontier_phi_7_6_ladder;
    }
    bool _454 = _432 > 0.0;
    float _456 = _454 ? (cbMtdParam._m0[17u].x / _432) : 5000.0;
    float _457 = isnan(_452) ? _444 : (isnan(_444) ? _452 : min(_444, _452));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _463 = _437 + (-0.5);
    float _466 = _438 + (-0.5);
    float _469 = ((_458 * _432) + _462) / _462;
    vec4 _494 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_463 + (_458 * _435)) / _469) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_466 + (_458 * _436)) / _469) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _507 = (_494.x * _311) * cbMtdParam._m0[9u].x;
    float _508 = (_494.y * _311) * cbMtdParam._m0[9u].y;
    float _509 = (_494.z * _311) * cbMtdParam._m0[9u].z;
    float _527 = _433 * cbMtdParam._m0[26u].z;
    float _528 = _434 * cbMtdParam._m0[26u].y;
    bool _529 = _527 > 0.0;
    float _534;
    if (_529)
    {
        _534 = (1.0 - _437) / _527;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _437) / _527;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _534 = frontier_phi_11_10_ladder;
    }
    bool _536 = _528 > 0.0;
    float _541;
    if (_536)
    {
        _541 = (1.0 - _438) / _528;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_528 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _438) / _528;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _541 = frontier_phi_15_14_ladder;
    }
    float _544 = _454 ? (cbMtdParam._m0[19u].z / _432) : 5000.0;
    float _545 = isnan(_541) ? _534 : (isnan(_534) ? _541 : min(_534, _541));
    float _546 = isnan(_544) ? _545 : (isnan(_545) ? _544 : min(_545, _544));
    float _550 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _554 = ((_546 * _432) + _550) / _550;
    float _559 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _561 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _577 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_463 + (_546 * _527)) / _554) + 0.5) + _559) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_466 + (_546 * _528)) / _554) + 0.5) + _561) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _592;
    if (_529)
    {
        _592 = (1.0 - _437) / _527;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _437) / _527;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _592 = frontier_phi_19_18_ladder;
    }
    float _598;
    if (_536)
    {
        _598 = (1.0 - _438) / _528;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_528 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _438) / _528;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _598 = frontier_phi_23_22_ladder;
    }
    float _600 = isnan(_598) ? _592 : (isnan(_592) ? _598 : min(_592, _598));
    float _601 = isnan(_544) ? _600 : (isnan(_600) ? _544 : min(_600, _544));
    float _608 = ((_601 * _432) + _550) / _550;
    vec4 _628 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_463 + (_601 * _527)) / _608) + 0.5) + _559) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_466 + (_601 * _528)) / _608) + 0.5) + _561) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _630 = _628.x;
    float _640 = (((((cbMtdParam._m0[10u].x * _311) * _577.x) - _507) * _311) * _630) + _507;
    float _641 = (((((cbMtdParam._m0[10u].y * _311) * _577.y) - _508) * _311) * _630) + _508;
    float _642 = (((((cbMtdParam._m0[10u].z * _311) * _577.z) - _509) * _311) * _630) + _509;
    float _655 = _433 * cbMtdParam._m0[27u].x;
    float _656 = _434 * cbMtdParam._m0[26u].w;
    bool _657 = _655 > 0.0;
    float _662;
    if (_657)
    {
        _662 = (1.0 - _437) / _655;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_655 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _437) / _655;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _662 = frontier_phi_27_26_ladder;
    }
    bool _664 = _656 > 0.0;
    float _669;
    if (_664)
    {
        _669 = (1.0 - _438) / _656;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_656 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _438) / _656;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _669 = frontier_phi_31_30_ladder;
    }
    float _672 = _454 ? (cbMtdParam._m0[23u].x / _432) : 5000.0;
    float _673 = isnan(_669) ? _662 : (isnan(_662) ? _669 : min(_662, _669));
    float _674 = isnan(_672) ? _673 : (isnan(_673) ? _672 : min(_673, _672));
    float _678 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _682 = ((_674 * _432) + _678) / _678;
    float _687 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _689 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _705 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_463 + (_674 * _655)) / _682) + 0.5) + _687) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_466 + (_674 * _656)) / _682) + 0.5) + _689) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _720;
    if (_657)
    {
        _720 = (1.0 - _437) / _655;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_655 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _437) / _655;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _720 = frontier_phi_35_34_ladder;
    }
    float _726;
    if (_664)
    {
        _726 = (1.0 - _438) / _656;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_656 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _438) / _656;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _726 = frontier_phi_39_38_ladder;
    }
    float _728 = isnan(_726) ? _720 : (isnan(_720) ? _726 : min(_720, _726));
    float _729 = isnan(_672) ? _728 : (isnan(_728) ? _672 : min(_728, _672));
    float _736 = ((_729 * _432) + _678) / _678;
    vec4 _756 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_463 + (_729 * _655)) / _736) + 0.5) + _687) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_466 + (_729 * _656)) / _736) + 0.5) + _689) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _758 = _756.x;
    float _768 = (((((cbMtdParam._m0[13u].x * _311) * _705.x) - _640) * _311) * _758) + _640;
    float _769 = (((((cbMtdParam._m0[13u].y * _311) * _705.y) - _641) * _311) * _758) + _641;
    float _770 = (((((cbMtdParam._m0[13u].z * _311) * _705.z) - _642) * _311) * _758) + _642;
    vec4 _783 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _787 = _783.z;
    float _790 = (_783.x * 2.0) + (-1.0);
    float _791 = (_783.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4080 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _797 = sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))));
    float _806 = (cbMtdParam._m0[19u].y * _768) * cbMtdParam._m0[16u].x;
    float _808 = (cbMtdParam._m0[19u].y * _769) * cbMtdParam._m0[16u].y;
    float _810 = (cbMtdParam._m0[19u].y * _770) * cbMtdParam._m0[16u].z;
    vec4 _834 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _839 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _845 = ((_834.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _847 = (-0.0) - (cbMtdParam._m0[21u].x * ((_834.x * 0.5) + (-0.25)));
    float _848 = fract(_839);
    float _850 = fract(_839 + 0.5);
    vec4 _877 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_848 * _847) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_845 * _848) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _879 = _877.x;
    float _885 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_850 * _847) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_845 * _850) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _879) * abs((_848 * 2.0) + (-1.0))) + _879;
    float _891 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _895 = fract(abs(_891));
    float _905 = sin(cbMtdParam._m0[21u].z);
    float _906 = cos(cbMtdParam._m0[21u].z);
    float _907 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _908 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _933 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_908, (-0.0) - _905, _906 * _907) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_908, _906, _907 * _905) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_891 >= ((-0.0) - _891)) ? _895 : ((-0.0) - _895)) * cbMtdParam._m0[18u].z) - _885)) + cbMtdParam._m0[18u].w;
    float _934 = ceil(_933);
    float _4091 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _935 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _955 = ((((cbMtdParam._m0[21u].w * _768) * cbMtdParam._m0[15u].x) - _806) * _935) + _806;
    float _956 = ((((cbMtdParam._m0[21u].w * _769) * cbMtdParam._m0[15u].y) - _808) * _935) + _808;
    float _957 = ((((cbMtdParam._m0[21u].w * _770) * cbMtdParam._m0[15u].z) - _810) * _935) + _810;
    float _961 = abs(cbMtdParam._m0[20u].w * _933);
    float _965 = (((_961 * cbMtdParam._m0[18u].y) - _885) * _961) + _885;
    float _4102 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _966 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    vec4 _978 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _993 = (cbMtdParam._m0[14u].x * _978.x) * cbMtdParam._m0[19u].x;
    float _994 = (cbMtdParam._m0[14u].y * _978.y) * cbMtdParam._m0[19u].x;
    float _995 = (cbMtdParam._m0[14u].z * _978.z) * cbMtdParam._m0[19u].x;
    float _1002 = exp2(log2(_966) * cbMtdParam._m0[20u].x);
    float _1024 = fma(_797, _229, fma(_791, _236, _790 * _222));
    float _1027 = fma(_797, _230, fma(_791, _237, _790 * _223));
    float _1030 = fma(_797, _231, fma(_791, _238, _790 * _224));
    float _1034 = inversesqrt(dot(vec3(_1024, _1027, _1030), vec3(_1024, _1027, _1030)));
    float _1035 = _1034 * _1024;
    float _1036 = _1034 * _1027;
    float _1037 = _1034 * _1030;
    float _4113 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _1038 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _4135 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _4146 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _1057 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1061 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _1062 = _292 * _1061;
    float _1063 = _293 * _1061;
    float _1064 = _294 * _1061;
    vec4 _1069 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1071 = _1069.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1226 = sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294));
        float _1232 = (cbMatDynParam._m0[5u].x * _1226) + cbMatDynParam._m0[5u].y;
        float _4157 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1237 = (cbMatDynParam._m0[5u].z * _1226) + cbMatDynParam._m0[5u].w;
        float _4168 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) - _1233)) + _1233) < ((_1071 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1083 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1084 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1102 = fma(_1037, cbSceneParam._m0[5u].z, fma(_1036, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1035));
    float _1105 = fma(_1037, cbSceneParam._m0[6u].z, fma(_1036, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1035));
    float _1108 = fma(_1037, cbSceneParam._m0[7u].z, fma(_1036, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1035));
    uint _1121 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1122 = _1121 + 9u;
    uint _1123 = _1122 + uint(cbMatDynParam._m0[0u].w);
    float _1129 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_1123].x;
    float _1130 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_1123].y;
    float _1131 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1123].z;
    float _4179 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1132 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1133 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1134 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    vec4 _1143 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1083, cbSceneParam._m0[86u].y * _1084));
    float _1146 = _1143.x * TEXCOORD_4;
    float _1147 = dot(vec3(_1035, _1036, _1037), vec3(_1062, _1063, _1064));
    float _1150 = _1147 * 2.0;
    float _1154 = (_1150 * _1035) - _1062;
    float _1155 = (_1150 * _1036) - _1063;
    float _1156 = (_1150 * _1037) - _1064;
    float _1160 = abs(dot(vec3(_1062, _1063, _1064), vec3(_1035, _1036, _1037)));
    float _4212 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1162 = sqrt(_1038);
    float _1175 = exp2((_1162 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1162 * 3.0));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1543;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1270 = fma(_1215, cbModelParam._m0[26u].z, fma(_1211, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207));
        float _1274 = fma(_1215, cbModelParam._m0[27u].z, fma(_1211, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207));
        float _1278 = fma(_1215, cbModelParam._m0[28u].z, fma(_1211, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207));
        float _1301 = _1207 + _1035;
        float _1302 = _1211 + _1036;
        float _1303 = _1215 + _1037;
        float _1313 = fma(_1303, cbModelParam._m0[26u].z, fma(_1302, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[27u].z, fma(_1302, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[28u].z, fma(_1302, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1270 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1274 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[34u].z) + ((((((_1278 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1371 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1337.x + (-0.5));
        float _1373 = _1371 * (_1337.y + (-0.5));
        float _1374 = _1371 * (_1337.z + (-0.5));
        float _1381 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1344.x + (-0.5));
        float _1383 = _1381 * (_1344.y + (-0.5));
        float _1384 = _1381 * (_1344.z + (-0.5));
        float _1391 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1351.x + (-0.5));
        float _1393 = _1391 * (_1351.y + (-0.5));
        float _1394 = _1391 * (_1351.z + (-0.5));
        float _1401 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1358.x + (-0.5));
        float _1403 = _1401 * (_1358.y + (-0.5));
        float _1404 = _1401 * (_1358.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1425 = (dot(vec3(_1035, _1036, _1037), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1435 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4260 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1437 + 1.0))) + _1442) * _1405;
        float _1452 = _1373 * 0.5;
        float _1453 = _1383 * 0.5;
        float _1454 = _1393 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_1035, _1036, _1037), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4293 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1479 + 1.0))) + _1484) * _1406;
        float _1494 = _1374 * 0.5;
        float _1495 = _1384 * 0.5;
        float _1496 = _1394 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_1035, _1036, _1037), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4326 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1521 + 1.0))) + _1526) * _1407;
        _1543 = _1374;
        _1545 = _1373;
        _1546 = _1372;
        _1547 = _1384;
        _1548 = _1383;
        _1549 = _1382;
        _1550 = _1394;
        _1551 = _1393;
        _1552 = _1392;
        _1553 = _1407;
        _1554 = _1406;
        _1555 = _1405;
        _1556 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1557 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1558 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1544;
        _1545 = _1544;
        _1546 = _1544;
        _1547 = _1544;
        _1548 = _1544;
        _1549 = _1544;
        _1550 = _1544;
        _1551 = _1544;
        _1552 = _1544;
        _1553 = _1544;
        _1554 = _1544;
        _1555 = _1544;
        _1556 = 0.0;
        _1557 = 0.0;
        _1558 = 0.0;
    }
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1586 = fma(_1215, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207));
        float _1590 = fma(_1215, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207));
        float _1594 = fma(_1215, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207));
        float _1617 = _1207 + _1035;
        float _1618 = _1211 + _1036;
        float _1619 = _1215 + _1037;
        float _1629 = fma(_1619, cbModelParam._m0[30u].z, fma(_1618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1617)) - _1586;
        float _1630 = fma(_1619, cbModelParam._m0[31u].z, fma(_1618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1617)) - _1590;
        float _1631 = fma(_1619, cbModelParam._m0[32u].z, fma(_1618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1617)) - _1594;
        float _1635 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
        float _1648 = ((_1635 * _1629) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1586 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1649 = ((_1635 * _1630) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1590 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1650 = ((_1635 * _1631) / cbModelParam._m0[35u].z) + ((((((_1594 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        float _1685 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1652.x + (-0.5));
        float _1687 = _1685 * (_1652.y + (-0.5));
        float _1688 = _1685 * (_1652.z + (-0.5));
        float _1695 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1659.x + (-0.5));
        float _1697 = _1695 * (_1659.y + (-0.5));
        float _1698 = _1695 * (_1659.z + (-0.5));
        float _1705 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1666.x + (-0.5));
        float _1707 = _1705 * (_1666.y + (-0.5));
        float _1708 = _1705 * (_1666.z + (-0.5));
        float _1715 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1673.x + (-0.5));
        float _1717 = _1715 * (_1673.y + (-0.5));
        float _1718 = _1715 * (_1673.z + (-0.5));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = _1686 * 0.5;
        float _1723 = _1696 * 0.5;
        float _1724 = _1706 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_1035, _1036, _1037), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4389 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1749 + 1.0))) + _1754) * _1719;
        float _1764 = _1687 * 0.5;
        float _1765 = _1697 * 0.5;
        float _1766 = _1707 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_1035, _1036, _1037), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1720 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4422 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1791 + 1.0))) + _1796) * _1720;
        float _1806 = _1688 * 0.5;
        float _1807 = _1698 * 0.5;
        float _1808 = _1708 * 0.5;
        float _1809 = dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808));
        float _1814 = (_1809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1809);
        float _1822 = (dot(vec3(_1035, _1036, _1037), vec3(_1814 * _1806, _1814 * _1807, _1814 * _1808)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = sqrt(((_1807 * _1807) + (_1806 * _1806)) + (_1808 * _1808)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1833 = _1832 * 2.0;
        float _1837 = (1.0 - _1832) / (_1832 + 1.0);
        float _4455 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1847 = ((((1.0 - _1838) * (_1833 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1833 + 1.0))) + _1838) * _1721;
        _1855 = _1688;
        _1856 = _1687;
        _1857 = _1686;
        _1858 = _1698;
        _1859 = _1697;
        _1860 = _1696;
        _1861 = _1708;
        _1862 = _1707;
        _1863 = _1706;
        _1864 = _1721;
        _1865 = _1720;
        _1866 = _1719;
        _1867 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1868 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
        _1869 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)));
    }
    else
    {
        _1855 = _1544;
        _1856 = _1544;
        _1857 = _1544;
        _1858 = _1544;
        _1859 = _1544;
        _1860 = _1544;
        _1861 = _1544;
        _1862 = _1544;
        _1863 = _1544;
        _1864 = _1544;
        _1865 = _1544;
        _1866 = _1544;
        _1867 = 0.0;
        _1868 = 0.0;
        _1869 = 0.0;
    }
    float _1879 = (cbModelParam._m0[1u].x * (_1867 - _1556)) + _1556;
    float _1880 = (cbModelParam._m0[1u].x * (_1868 - _1557)) + _1557;
    float _1881 = (cbModelParam._m0[1u].x * (_1869 - _1558)) + _1558;
    float _1902 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1879));
    float _1923 = _1154 * 0.5;
    float _1924 = _1155 * 0.5;
    float _1925 = _1156 * 0.5;
    float _1926 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1857, _1860, _1863, _1866));
    float _1929 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1856, _1859, _1862, _1865));
    float _1932 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1855, _1858, _1861, _1864));
    float _1966;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1939 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1543, _1547, _1550, _1553));
        float _1943 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1545, _1548, _1551, _1554));
        float _1947 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1546, _1549, _1552, _1555));
        float _1954 = dot(vec4(cbModelParam._m0[39u]), vec4(_1923, _1924, _1925, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1977;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1968 = dot(vec4(cbModelParam._m0[40u]), vec4(_1923, _1924, _1925, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1981 = (_1977 * cbModelParam._m0[1u].x) + (_1966 * (1.0 - cbModelParam._m0[1u].x));
    float _1991 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1038);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1991 : min(cbModelParam._m0[25u].z, _1991));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2039 = fma(_1215, cbModelParam._m0[13u].z, fma(_1211, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1207)) + cbModelParam._m0[13u].w;
        float _2043 = fma(_1215, cbModelParam._m0[14u].z, fma(_1211, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1207)) + cbModelParam._m0[14u].w;
        float _2047 = fma(_1215, cbModelParam._m0[15u].z, fma(_1211, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1207)) + cbModelParam._m0[15u].w;
        float _2050 = fma(_1156, cbModelParam._m0[13u].z, fma(_1155, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154));
        float _2053 = fma(_1156, cbModelParam._m0[14u].z, fma(_1155, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154));
        float _2056 = fma(_1156, cbModelParam._m0[15u].z, fma(_1155, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154));
        float _2084;
        if (_2050 > 0.0)
        {
            _2084 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _2084 = frontier_phi_57_55_ladder;
        }
        float _2252;
        if (_2053 > 0.0)
        {
            _2252 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2252 = frontier_phi_66_62_ladder;
        }
        float _2696;
        if (_2056 > 0.0)
        {
            _2696 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2696 = frontier_phi_78_73_ladder;
        }
        float _2698 = isnan(_2252) ? _2084 : (isnan(_2084) ? _2252 : min(_2084, _2252));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _2050) + _2039;
        float _2704 = (_2699 * _2053) + _2043;
        float _2705 = (_2699 * _2056) + _2047;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2708 = (-1.0) - _2706;
        float _2710 = _2706 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2705 > _2710) || ((_2705 < _2708) || ((_2704 > _2710) || ((_2704 < _2708) || ((_2703 < _2708) || (_2703 > _2710))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2705, cbModelParam._m0[9u].z, fma(_2704, cbModelParam._m0[9u].y, _2703 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2705, cbModelParam._m0[10u].z, fma(_2704, cbModelParam._m0[10u].y, _2703 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2705, cbModelParam._m0[11u].z, fma(_2704, cbModelParam._m0[11u].y, _2703 * cbModelParam._m0[11u].x))), _1992);
            frontier_phi_56_78_ladder = _2965.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2965.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2965.x * cbModelParam._m0[1u].y;
        }
        _2072 = frontier_phi_56_78_ladder_2;
        _2074 = frontier_phi_56_78_ladder_1;
        _2076 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1154, _1155, _1156), _1992);
        _2072 = _2060.x * cbModelParam._m0[1u].y;
        _2074 = _2060.y * cbModelParam._m0[1u].y;
        _2076 = _2060.z * cbModelParam._m0[1u].y;
    }
    float _2080 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1038);
    float _2081 = isnan(_2080) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2080 : min(cbModelParam._m0[25u].w, _2080));
    float _2169;
    float _2171;
    float _2173;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2133 = fma(_1215, cbModelParam._m0[21u].z, fma(_1211, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1207)) + cbModelParam._m0[21u].w;
        float _2137 = fma(_1215, cbModelParam._m0[22u].z, fma(_1211, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1207)) + cbModelParam._m0[22u].w;
        float _2141 = fma(_1215, cbModelParam._m0[23u].z, fma(_1211, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1207)) + cbModelParam._m0[23u].w;
        float _2144 = fma(_1156, cbModelParam._m0[21u].z, fma(_1155, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154));
        float _2147 = fma(_1156, cbModelParam._m0[22u].z, fma(_1155, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154));
        float _2150 = fma(_1156, cbModelParam._m0[23u].z, fma(_1155, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154));
        float _2257;
        if (_2144 > 0.0)
        {
            _2257 = abs((1.0 - _2133) / _2144);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_2133 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2257 = frontier_phi_68_64_ladder;
        }
        float _2723;
        if (_2147 > 0.0)
        {
            _2723 = abs((1.0 - _2137) / _2147);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_2137 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2723 = frontier_phi_80_75_ladder;
        }
        float _3102;
        if (_2150 > 0.0)
        {
            _3102 = abs((1.0 - _2141) / _2150);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_2141 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _3102 = frontier_phi_92_87_ladder;
        }
        float _3104 = isnan(_2723) ? _2257 : (isnan(_2257) ? _2723 : min(_2257, _2723));
        float _3105 = isnan(_3102) ? _3104 : (isnan(_3104) ? _3102 : min(_3104, _3102));
        float _3109 = (_3105 * _2144) + _2133;
        float _3110 = (_3105 * _2147) + _2137;
        float _3111 = (_3105 * _2150) + _2141;
        float _3112 = _3105 * 9.9999997473787516355514526367188e-05;
        float _3113 = (-1.0) - _3112;
        float _3115 = _3112 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_3111 > _3115) || ((_3111 < _3113) || ((_3110 > _3115) || ((_3110 < _3113) || ((_3109 < _3113) || (_3109 > _3115))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3248 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3111, cbModelParam._m0[17u].z, fma(_3110, cbModelParam._m0[17u].y, _3109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3111, cbModelParam._m0[18u].z, fma(_3110, cbModelParam._m0[18u].y, _3109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3111, cbModelParam._m0[19u].z, fma(_3110, cbModelParam._m0[19u].y, _3109 * cbModelParam._m0[19u].x))), _2081);
            frontier_phi_65_92_ladder = _3248.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _3248.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _3248.x * cbModelParam._m0[1u].z;
        }
        _2169 = frontier_phi_65_92_ladder_2;
        _2171 = frontier_phi_65_92_ladder_1;
        _2173 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _2153 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1154, _1155, _1156), _2081);
        _2169 = _2153.x * cbModelParam._m0[1u].z;
        _2171 = _2153.y * cbModelParam._m0[1u].z;
        _2173 = _2153.z * cbModelParam._m0[1u].z;
    }
    float _2185 = ((((1.0 - _1175) * ((_1162 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1175 * _1162)) * _1146;
    float _2186 = _2185 * ((cbModelParam._m0[1u].w * (_2169 - _2072)) + _2072);
    float _2187 = _2185 * ((cbModelParam._m0[1u].w * (_2171 - _2074)) + _2074);
    float _2188 = _2185 * ((cbModelParam._m0[1u].w * (_2173 - _2076)) + _2076);
    float _2191 = fma(_2188, cbSceneParam._m0[89u].z, fma(_2187, cbSceneParam._m0[89u].y, _2186 * cbSceneParam._m0[89u].x));
    float _2194 = fma(_2188, cbSceneParam._m0[90u].z, fma(_2187, cbSceneParam._m0[90u].y, _2186 * cbSceneParam._m0[90u].x));
    float _2197 = fma(_2188, cbSceneParam._m0[91u].z, fma(_2187, cbSceneParam._m0[91u].y, _2186 * cbSceneParam._m0[91u].x));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2235 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2239 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2244 = _2231 / _2243;
    float _2245 = _2235 / _2243;
    float _2246 = _2239 / _2243;
    float _2393;
    float _2394;
    float _2395;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2273 = ((uint(_2246 > cbSceneParam._m0[59u].y) + uint(_2246 > cbSceneParam._m0[59u].x)) + uint(_2246 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2274 = _2273 + 43u;
        uint _2282 = _2273 + 44u;
        uint _2290 = _2273 + 45u;
        uint _2298 = _2273 + 46u;
        float _2309 = fma(_2243, cbSceneParam._m0[_2274].w, fma(_2239, cbSceneParam._m0[_2274].z, fma(_2235, cbSceneParam._m0[_2274].y, _2231 * cbSceneParam._m0[_2274].x)));
        float _2313 = fma(_2243, cbSceneParam._m0[_2282].w, fma(_2239, cbSceneParam._m0[_2282].z, fma(_2235, cbSceneParam._m0[_2282].y, _2231 * cbSceneParam._m0[_2282].x)));
        float _2321 = fma(_2243, cbSceneParam._m0[_2298].w, fma(_2239, cbSceneParam._m0[_2298].z, fma(_2235, cbSceneParam._m0[_2298].y, _2231 * cbSceneParam._m0[_2298].x)));
        float _2326 = cbSceneParam._m0[33u].z * _2321;
        float _2328 = cbSceneParam._m0[33u].w * _2321;
        float _2331 = fma(_2243, cbSceneParam._m0[_2290].w, fma(_2239, cbSceneParam._m0[_2290].z, fma(_2235, cbSceneParam._m0[_2290].y, _2231 * cbSceneParam._m0[_2290].x))) / _2321;
        float _2379 = (cbSceneParam._m0[33u].x - sqrt(((_2245 * _2245) + (_2244 * _2244)) + (_2246 * _2246))) * cbSceneParam._m0[33u].y;
        float _4581 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2386 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2326 + _2309) / _2321, (_2328 + _2313) / _2321), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 + _2309) / _2321, (_2313 - _2326) / _2321), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2309 - _2326) / _2321, (_2313 - _2328) / _2321), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2309 - _2328) / _2321, (_2326 + _2313) / _2321), _2331), 0.0)).x), vec4(0.25)));
        _2393 = 1.0 - (_2386 * cbSceneParam._m0[34u].x);
        _2394 = 1.0 - (_2386 * cbSceneParam._m0[34u].y);
        _2395 = 1.0 - (_2386 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2393 = 1.0;
        _2394 = 1.0;
        _2395 = 1.0;
    }
    float _2459;
    float _2461;
    float _2463;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2447 = fma(_2243, cbSceneParam._m0[63u].w, fma(_2239, cbSceneParam._m0[63u].z, fma(_2235, cbSceneParam._m0[63u].y, _2231 * cbSceneParam._m0[63u].x)));
        float _2448 = fma(_2243, cbSceneParam._m0[60u].w, fma(_2239, cbSceneParam._m0[60u].z, fma(_2235, cbSceneParam._m0[60u].y, _2231 * cbSceneParam._m0[60u].x))) / _2447;
        float _2449 = fma(_2243, cbSceneParam._m0[61u].w, fma(_2239, cbSceneParam._m0[61u].z, fma(_2235, cbSceneParam._m0[61u].y, _2231 * cbSceneParam._m0[61u].x))) / _2447;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2448 >= cbSceneParam._m0[64u].x) && (_2449 >= cbSceneParam._m0[64u].y)) && (_2448 <= cbSceneParam._m0[64u].z)) && (_2449 <= cbSceneParam._m0[64u].w))
        {
            float _2736 = fma(_2243, cbSceneParam._m0[62u].w, fma(_2239, cbSceneParam._m0[62u].z, fma(_2235, cbSceneParam._m0[62u].y, _2231 * cbSceneParam._m0[62u].x))) / _2447;
            float _2740 = isnan(cbSceneParam._m0[41u].w) ? _2736 : (isnan(_2736) ? cbSceneParam._m0[41u].w : max(_2736, cbSceneParam._m0[41u].w));
            float _2783 = (cbSceneParam._m0[33u].x - sqrt(((_2245 * _2245) + (_2244 * _2244)) + (_2246 * _2246))) * cbSceneParam._m0[33u].y;
            float _4597 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
            float _2790 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2448, cbSceneParam._m0[33u].w + _2449), _2740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2448, _2449 - cbSceneParam._m0[33u].z), _2740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2448 - cbSceneParam._m0[33u].z, _2449 - cbSceneParam._m0[33u].w), _2740), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2448 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2449), _2740), 0.0)).x), vec4(0.25)));
            float _2794 = 1.0 - (_2790 * cbSceneParam._m0[34u].x);
            float _2795 = 1.0 - (_2790 * cbSceneParam._m0[34u].y);
            float _2796 = 1.0 - (_2790 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2796) ? _2395 : (isnan(_2395) ? _2796 : min(_2395, _2796));
            frontier_phi_77_76_ladder_1 = isnan(_2795) ? _2394 : (isnan(_2394) ? _2795 : min(_2394, _2795));
            frontier_phi_77_76_ladder_2 = isnan(_2794) ? _2393 : (isnan(_2393) ? _2794 : min(_2393, _2794));
        }
        else
        {
            frontier_phi_77_76_ladder = _2395;
            frontier_phi_77_76_ladder_1 = _2394;
            frontier_phi_77_76_ladder_2 = _2393;
        }
        _2459 = frontier_phi_77_76_ladder_2;
        _2461 = frontier_phi_77_76_ladder_1;
        _2463 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2459 = _2393;
        _2461 = _2394;
        _2463 = _2395;
    }
    uvec4 _2468 = floatBitsToUint(cbInstanceData._m0[_1121 + 5u]);
    uint _2470 = _2468.x * 14u;
    uint _2471 = _2470 + 13u;
    float _2476 = _1146 + (-1.0);
    float _2479 = (cbLight._m0[_2471].x * _2476) + 1.0;
    float _2480 = (cbLight._m0[_2471].y * _2476) + 1.0;
    uint _2481 = _2470 + 5u;
    float _2487 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
    uint _2491 = _2470 + 4u;
    float _2500 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
    uint _2504 = _2470 | 1u;
    float _2515 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_1035, _1036, _1037));
    float _2518 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_1035, _1036, _1037));
    float _4633 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _4644 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2523 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2525 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2532 = ((cbLight._m0[_2481].x * _2487) * _2525) + (((cbLight._m0[_2491].x * _2459) * _2500) * _2523);
    float _2533 = ((_2487 * cbLight._m0[_2481].y) * _2525) + (((cbLight._m0[_2491].y * _2461) * _2500) * _2523);
    float _2534 = ((_2487 * cbLight._m0[_2481].z) * _2525) + (((cbLight._m0[_2491].z * _2463) * _2500) * _2523);
    uint _2536 = _2470 + 8u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _1038) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2470].x + _1062;
    float _2552 = cbLight._m0[_2470].y + _1063;
    float _2553 = cbLight._m0[_2470].z + _1064;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_1035, _1036, _1037), vec3(cbLight._m0[_2470].xyz));
    float _4655 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _2565 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2566 = dot(vec3(_1035, _1036, _1037), vec3(_2558, _2559, _2560));
    float _4677 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2558, _2559, _2560));
    float _4688 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2550 * _2550;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2590 = 1.0 - _2550;
    float _2601 = (0.5 / (((_2565 * ((_2564 * _2590) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2590) + _2550) * _2564))) * _2564;
    float _4699 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    uint _2617 = _2470 + 9u;
    float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _1038) * 0.949999988079071044921875);
    float _2629 = _2628 * _2628;
    float _2630 = cbLight._m0[_2504].x + _1062;
    float _2631 = cbLight._m0[_2504].y + _1063;
    float _2632 = cbLight._m0[_2504].z + _1064;
    float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
    float _2637 = _2636 * _2630;
    float _2638 = _2636 * _2631;
    float _2639 = _2636 * _2632;
    float _2640 = dot(vec3(_1035, _1036, _1037), vec3(cbLight._m0[_2504].xyz));
    float _4710 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2644 = dot(vec3(_1035, _1036, _1037), vec3(_2637, _2638, _2639));
    float _4721 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2637, _2638, _2639));
    float _4732 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2629 * _2629;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2665 = (exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2666 = 1.0 - _2629;
    float _2676 = (0.5 / (((_2565 * ((_2643 * _2666) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2666) + _2629) * _2643))) * _2643;
    float _4743 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    float _2688 = (((_2665 * cbLight._m0[_2617].x) * _2678) * _2487) + ((((cbLight._m0[_2536].x * _2459) * _2589) * _2603) * _2500);
    float _2689 = (((_2665 * cbLight._m0[_2617].y) * _2678) * _2487) + ((((cbLight._m0[_2536].y * _2461) * _2589) * _2603) * _2500);
    float _2690 = (((_2665 * cbLight._m0[_2617].z) * _2678) * _2487) + ((((cbLight._m0[_2536].z * _2463) * _2589) * _2603) * _2500);
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_2468.y == 0u)
    {
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.x;
        uint _2820 = uint((float(_2808.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1084) / _2809))) + floor(float(uint(cbSceneParam._m0[85u].x * _1083) / _2809)));
        float _2830 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2831 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        uint _2834 = uint(isnan(14.0) ? _2831 : (isnan(_2831) ? 14.0 : min(_2831, 14.0)));
        uvec4 _2839 = texelFetch(g_lightClusterGridBuffer, int(((_2834 << 2u) + (_2820 << 6u)) >> 2u));
        uint _2840 = _2839.x;
        uint _2841 = _2808.z;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((((1u << ((_2841 >> 4u) & 15u)) + 4294967295u) & _2840) == 0u) || ((_2841 & 240u) == 0u))
        {
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
        }
        else
        {
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_3176)
                {
                    frontier_phi_103_pred = _3161;
                    frontier_phi_103_pred_1 = _3165;
                    frontier_phi_103_pred_2 = _3164;
                    frontier_phi_103_pred_3 = _3163;
                    frontier_phi_103_pred_4 = _3162;
                    frontier_phi_103_pred_5 = _3160;
                }
                else
                {
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    uint _3332;
                    _3326 = _3160;
                    _3327 = _3161;
                    _3328 = _3162;
                    _3329 = _3163;
                    _3330 = _3164;
                    _3331 = _3165;
                    _3332 = _3175;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    for (;;)
                    {
                        uint _3336 = uint(findLSB(_3332)) + (_3166 << 5u);
                        uint _3333 = (_3332 + 4294967295u) & _3332;
                        uint _3338 = _3336 * 48u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3358 = (_3336 * 48u) + 4u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3377 = (_3336 * 48u) + 8u;
                        vec3 _3388 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x));
                        float _3392 = _3352.x - _2244;
                        float _3393 = _3352.y - _2245;
                        float _3394 = _3352.z - _2246;
                        float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                        float _3398 = inversesqrt(_3395);
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3402 = dot(vec3(_1102, _1105, _1108), vec3(_3399, _3400, _3401));
                        float _3407 = 1.0 - (_3395 * _3352.w);
                        float _4764 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3409 = sqrt(_3395) * _3371.w;
                        float _3412 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3402) + _3413;
                        float _3419 = _3409 * _3409;
                        float _3423 = ((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3408) / ((_3419 * 0.699999988079071044921875) + 1.0);
                        float _3427 = (-0.0) - _2244;
                        float _3428 = (-0.0) - _2245;
                        float _3429 = (-0.0) - _2246;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3443 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                        float _3444 = 1.0 - _1162;
                        float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                        float _3452 = _3451 * _3451;
                        float _3453 = _3452 * _3452;
                        float _3454 = _3434 + _3399;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3464 = dot(vec3(_1102, _1105, _1108), vec3(_3434, _3435, _3436));
                        float _4780 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3468 = dot(vec3(_1102, _1105, _1108), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                        float _4791 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                        float _3476 = _3412 * _3452;
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3402) + _3477;
                        float _4802 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3482 = 1.0 - _3452;
                        float _3492 = (0.5 / (((_3481 * ((_3467 * _3482) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3452) * _3467))) * _3481;
                        float _4813 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3503 = (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3475 * _3475) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125))) * _3408;
                        _3256 = (_3423 * _3371.x) + _3329;
                        _3257 = (_3423 * _3371.y) + _3330;
                        _3258 = (_3423 * _3371.z) + _3331;
                        _3253 = (_3503 * _3388.x) + _3326;
                        _3254 = (_3503 * _3388.y) + _3327;
                        _3255 = (_3503 * _3388.z) + _3328;
                        if (_3333 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3333;
                        }
                    }
                    frontier_phi_103_pred = _3254;
                    frontier_phi_103_pred_1 = _3258;
                    frontier_phi_103_pred_2 = _3257;
                    frontier_phi_103_pred_3 = _3256;
                    frontier_phi_103_pred_4 = _3255;
                    frontier_phi_103_pred_5 = _3253;
                }
                _2977 = frontier_phi_103_pred;
                _2985 = frontier_phi_103_pred_1;
                _2983 = frontier_phi_103_pred_2;
                _2981 = frontier_phi_103_pred_3;
                _2979 = frontier_phi_103_pred_4;
                _2975 = frontier_phi_103_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _2975;
                    _3161 = _2977;
                    _3162 = _2979;
                    _3163 = _2981;
                    _3164 = _2983;
                    _3165 = _2985;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
        }
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.z;
        uint _2991 = (_2989 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _2991) & _2840) == 0u)
        {
            _3128 = _2974;
            _3130 = _2976;
            _3132 = _2978;
            _3134 = _2980;
            _3136 = _2982;
            _3138 = _2984;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _3154 = _3153 * _2244;
            float _3155 = _3153 * _2245;
            float _3156 = _3153 * _2246;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2991 < ((_2989 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3309 = _2974;
                float _3310 = _2976;
                float _3311 = _2978;
                float _3312 = _2980;
                float _3313 = _2982;
                float _3314 = _2984;
                uint _3315 = _2991;
                uint _3324;
                bool _3325;
                for (;;)
                {
                    _3324 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                    _3325 = _3324 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3325)
                    {
                        frontier_phi_114_pred = _3314;
                        frontier_phi_114_pred_1 = _3313;
                        frontier_phi_114_pred_2 = _3312;
                        frontier_phi_114_pred_3 = _3311;
                        frontier_phi_114_pred_4 = _3310;
                        frontier_phi_114_pred_5 = _3309;
                    }
                    else
                    {
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3530 = _3309;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        uint _3536 = _3324;
                        uint _3537;
                        vec4 _3562;
                        float _3563;
                        vec4 _3578;
                        vec3 _3590;
                        vec4 _3605;
                        vec4 _3620;
                        float _3666;
                        bool _3667;
                        for (;;)
                        {
                            uint _3547 = ((_3315 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3536));
                            _3537 = (_3536 + 4294967295u) & _3536;
                            uint _3549 = _3547 * 40u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3563 = _3562.w;
                            uint _3565 = (_3547 * 40u) + 4u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3547 * 40u) + 8u;
                            _3590 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x));
                            uint _3592 = (_3547 * 40u) + 16u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3547 * 40u) + 20u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3547 * 40u) + 24u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3641 = (_3547 * 40u) + 28u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3666 = fma(_2246, _3654.z, fma(_2245, _3654.y, _3654.x * _2244)) + _3654.w;
                            _3667 = !((fma(_2246, _3635.z, fma(_2245, _3635.y, _3635.x * _2244)) + _3635.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3667)
                            {
                                float _3694 = _3562.x - _2244;
                                float _3695 = _3562.y - _2245;
                                float _3696 = _3562.z - _2246;
                                float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                                float _3700 = inversesqrt(_3697);
                                float _3701 = _3700 * _3694;
                                float _3702 = _3700 * _3695;
                                float _3703 = _3700 * _3696;
                                float _3707 = 1.0 - (_3697 / (_3563 * _3563));
                                float _4824 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3712 = sqrt(_3697) * _3578.w;
                                float _3714 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                                float _3715 = _3714 * _3714;
                                float _3718 = ((1.0 - _3715) * dot(vec3(_3701, _3702, _3703), vec3(_1102, _1105, _1108))) + _3715;
                                float _3721 = _3712 * _3712;
                                float _3725 = (fma(_2246, _3605.z, fma(_2245, _3605.y, _3605.x * _2244)) + _3605.w) / _3666;
                                float _3726 = (fma(_2246, _3620.z, fma(_2245, _3620.y, _3620.x * _2244)) + _3620.w) / _3666;
                                float _3730 = 1.0 - dot(vec2(_3725, _3726), vec2(_3725, _3726));
                                float _4840 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3732 = _3731 * (((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3708) / ((_3721 * 0.699999988079071044921875) + 1.0));
                                float _3744 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                                float _3745 = 1.0 - _1162;
                                float _3752 = sqrt(1.0 - ((1.0 - (_3745 * _3745)) * (1.0 - (_3744 * _3744))));
                                float _3753 = _3752 * _3752;
                                float _3754 = _3753 * _3753;
                                float _3755 = _3701 - _3154;
                                float _3756 = _3702 - _3155;
                                float _3757 = _3703 - _3156;
                                float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                                float _3765 = dot(vec3(_1102, _1105, _1108), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4851 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3769 = dot(vec3(_1102, _1105, _1108), vec3(_3761 * _3755, _3761 * _3756, _3761 * _3757));
                                float _4862 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3776 = ((_3772 * _3772) * (_3754 + (-1.0))) + 1.0;
                                float _3777 = _3714 * _3753;
                                float _3778 = _3777 * _3777;
                                float _3784 = ((1.0 - _3778) * dot(vec3(_1102, _1105, _1108), vec3(_3701, _3702, _3703))) + _3778;
                                float _4873 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3786 = 1.0 - _3753;
                                float _3796 = (0.5 / (((_3785 * ((_3768 * _3786) + _3753)) + 9.9999999392252902907785028219223e-09) + (((_3785 * _3786) + _3753) * _3768))) * _3785;
                                float _4884 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3806 = (_3731 * _3708) * (((_3754 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3776 * _3776) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3732 * _3578.z;
                                frontier_phi_120_pred_1 = _3732 * _3578.y;
                                frontier_phi_120_pred_2 = _3732 * _3578.x;
                                frontier_phi_120_pred_3 = _3806 * _3590.z;
                                frontier_phi_120_pred_4 = _3806 * _3590.y;
                                frontier_phi_120_pred_5 = _3806 * _3590.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3815 = frontier_phi_120_pred;
                            _3814 = frontier_phi_120_pred_1;
                            _3813 = frontier_phi_120_pred_2;
                            _3812 = frontier_phi_120_pred_3;
                            _3811 = frontier_phi_120_pred_4;
                            _3810 = frontier_phi_120_pred_5;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3517 = _3810 + _3530;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            if (_3537 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3537;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3522;
                        frontier_phi_114_pred_1 = _3521;
                        frontier_phi_114_pred_2 = _3520;
                        frontier_phi_114_pred_3 = _3519;
                        frontier_phi_114_pred_4 = _3518;
                        frontier_phi_114_pred_5 = _3517;
                    }
                    _3139 = frontier_phi_114_pred;
                    _3137 = frontier_phi_114_pred_1;
                    _3135 = frontier_phi_114_pred_2;
                    _3133 = frontier_phi_114_pred_3;
                    _3131 = frontier_phi_114_pred_4;
                    _3129 = frontier_phi_114_pred_5;
                    uint _3316 = _3315 + 1u;
                    if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3309 = _3129;
                        _3310 = _3131;
                        _3311 = _3133;
                        _3312 = _3135;
                        _3313 = _3137;
                        _3314 = _3139;
                        _3315 = _3316;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _3135;
                frontier_phi_94_95_ladder_1 = _3139;
                frontier_phi_94_95_ladder_2 = _3137;
                frontier_phi_94_95_ladder_3 = _3133;
                frontier_phi_94_95_ladder_4 = _3131;
                frontier_phi_94_95_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_94_95_ladder = _2980;
                frontier_phi_94_95_ladder_1 = _2984;
                frontier_phi_94_95_ladder_2 = _2982;
                frontier_phi_94_95_ladder_3 = _2978;
                frontier_phi_94_95_ladder_4 = _2976;
                frontier_phi_94_95_ladder_5 = _2974;
            }
            _3128 = frontier_phi_94_95_ladder_5;
            _3130 = frontier_phi_94_95_ladder_4;
            _3132 = frontier_phi_94_95_ladder_3;
            _3134 = frontier_phi_94_95_ladder;
            _3136 = frontier_phi_94_95_ladder_2;
            _3138 = frontier_phi_94_95_ladder_1;
        }
        float _3143 = isnan(1.0) ? _1146 : (isnan(_1146) ? 1.0 : min(_1146, 1.0));
        _2853 = (_3143 * _3134) + _2532;
        _2855 = (_3143 * _3136) + _2533;
        _2857 = (_3143 * _3138) + _2534;
        _2859 = ((_3128 * 0.039999999105930328369140625) * _3143) + _2688;
        _2861 = ((_3130 * 0.039999999105930328369140625) * _3143) + _2689;
        _2863 = ((_3132 * 0.039999999105930328369140625) * _3143) + _2690;
    }
    else
    {
        _2853 = _2532;
        _2855 = _2533;
        _2857 = _2534;
        _2859 = _2688;
        _2861 = _2689;
        _2863 = _2690;
    }
    uint _2869 = _1122 + uint(cbMatDynParam._m0[0u].w);
    float _2875 = (cbSceneParam._m0[72u].y * ((_1002 * ((_993 - _955) - (_993 * _966))) + _955)) * cbInstanceData._m0[_2869].x;
    float _2876 = (cbSceneParam._m0[72u].y * ((_1002 * ((_994 - _956) - (_994 * _966))) + _956)) * cbInstanceData._m0[_2869].y;
    float _2877 = (((_1002 * ((_995 - _957) - (_995 * _966))) + _957) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2869].z;
    float _4900 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _4911 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _4922 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _2894 = (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2853 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1146))) + ((_2859 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1981)) * cbPerFrame._m0[3u].x)) + _2875;
    float _2896 = (_2876 + ((_2861 + ((isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0))) * _1981)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2855 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1146)));
    float _2898 = (_2877 + ((_2863 + ((isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))) * _1981)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2857 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1146)));
    float _2899 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2900 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2901 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2907 = cbMtdParam._m0[2u].x * _2875;
    float _2908 = cbMtdParam._m0[2u].y * _2876;
    float _2909 = cbMtdParam._m0[2u].z * _2877;
    float _4948 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2911 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
    uint _2912 = _1121 + 6u;
    float _2920 = _1083 / cbSceneParam._m0[86u].x;
    float _2921 = _1084 / cbSceneParam._m0[86u].y;
    vec4 _2935 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, (log2((isnan(cbSceneParam._m0[77u].w) ? _1057 : (isnan(_1057) ? cbSceneParam._m0[77u].w : min(_1057, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2937 = _2935.x;
    float _2938 = _2935.y;
    float _2939 = _2935.z;
    float _2940 = _2935.w;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_1057 > cbSceneParam._m0[78u].w)
    {
        float _2999 = isnan(_1057) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1057 : min(cbSceneParam._m0[80u].w, _1057));
        float _3000 = _2999 / _1057;
        float _3011 = _3000 * _292;
        float _3012 = _293 * _3000;
        float _3013 = (-0.0) - _3012;
        float _3014 = _3000 * _294;
        float _3016 = (cbSceneParam._m0[77u].w * _3013) / _2999;
        float _3017 = _3016 + cbSceneParam._m0[79u].w;
        float _3018 = cbSceneParam._m0[79u].w - _3012;
        float _3024 = sqrt(((_3011 * _3011) + (_3012 * _3012)) + (_3014 * _3014));
        float _3027 = (1.0 - (cbSceneParam._m0[77u].w / _2999)) * _3024;
        float _3032 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3034 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3266;
        if (abs((_3013 - _3016) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3266 = ((((_3017 > 0.0) ? exp2(_3032 * _3017) : (2.0 - exp2(_3034 * _3017))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3027;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : max(_3017, _3018));
            float _3191 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : min(_3017, _3018));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3266 = ((abs(_3024 / _3013) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3032 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3032 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3034 * _3200) - exp2(_3034 * _3201)) * _3189))) + (_3027 * cbSceneParam._m0[80u].z);
        }
        vec4 _3268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, 1.0), 0.0);
        float _3277 = exp2((_3266 * (-1.44269502162933349609375)) * (1.0 - _3268.w));
        float _3278 = log2(_3277);
        float _3294 = log2(_2940);
        _3036 = (exp2(_3294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].x)) * _3268.x) / cbSceneParam._m0[78u].x)) + _2937;
        _3038 = (exp2(_3294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].y)) * _3268.y) / cbSceneParam._m0[78u].y)) + _2938;
        _3040 = (exp2(_3294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].z)) * _3268.z) / cbSceneParam._m0[78u].z)) + _2939;
        _3042 = _3277 * _2940;
    }
    else
    {
        _3036 = _2937;
        _3038 = _2938;
        _3040 = _2939;
        _3042 = _2940;
    }
    bool _3304;
    vec4 _3051;
    vec4 _3073;
    float _3075;
    float _3079;
    float _3080;
    float _3081;
    float _3084;
    float _3087;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3051 = cbMatDynParam._m0[0u];
        float _3053 = roundEven(_3051.y);
        bool _3054 = _3053 == 3.0;
        float _3055 = log2(_3042);
        float _3059 = exp2(_3055 * cbSceneParam._m0[78u].x);
        float _3060 = exp2(_3055 * cbSceneParam._m0[78u].y);
        float _3061 = exp2(_3055 * cbSceneParam._m0[78u].z);
        float _3062 = _3059 * _2899;
        float _3063 = _3060 * _2900;
        float _3064 = _3061 * _2901;
        float _3071 = _1071 + (-0.5);
        _3073 = cbMtdParam._m0[1u];
        _3075 = _3073.y * _3071;
        float _3078 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3079 = _3078 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3036)));
        _3080 = _3078 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3038)));
        _3081 = _3078 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3040)));
        _3084 = ((_2907 * _2911) * _3059) * _3078;
        _3087 = ((_2908 * _2911) * _3060) * _3078;
        _3090 = ((_2909 * _2911) * _3061) * _3078;
        _3091 = _3071 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_1121 + 7u].x + _3091) < 0.5)
            {
                _3304 = true;
                break;
            }
        }
        uint _3224 = _1122 + uint(_3051.w);
        if ((cbInstanceData._m0[_3224].w < 1.0) && ((cbInstanceData._m0[_3224].w + _3091) < 0.5))
        {
            _3304 = true;
            break;
        }
        if ((_3075 + 1.0) < _3073.x)
        {
            _3304 = true;
            break;
        }
        _3304 = false;
        break;
    }
    float _3508;
    if (_3304)
    {
        discard_state = true;
        _3508 = 0.0;
    }
    else
    {
        _3508 = cbInstanceData._m0[_2912].w;
    }
    SV_Target.x = _3079;
    SV_Target.y = _3080;
    SV_Target.z = _3081;
    SV_Target.w = _3508;
    SV_Target_1.x = _3084;
    SV_Target_1.y = _3087;
    SV_Target_1.z = _3090;
    SV_Target_1.w = cbInstanceData._m0[_2912].w;
    discard_exit();
}


