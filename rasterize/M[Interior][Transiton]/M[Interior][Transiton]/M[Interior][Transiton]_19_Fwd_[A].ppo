#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _452;
float _3430;
float _3431;
float _3432;
float _3433;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    vec4 _296 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _365 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _387 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _399 = cbMtdParam._m0[28u].z + _280;
    float _400 = cbMtdParam._m0[28u].w + _281;
    float _401 = cbMtdParam._m0[29u].x + _282;
    float _415 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_380 * _210, _380 * _211, _380 * _212));
    float _416 = (-0.0) - dot(vec3(_399, _400, _401), vec3(_387 * _224, _387 * _225, _387 * _226));
    float _417 = (-0.0) - dot(vec3(_399, _400, _401), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[25u].y * _415) * _421) + (((_365.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _428 = ((cbMtdParam._m0[25u].z * _416) * _421) + (((_365.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _431 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _450;
    float _453;
    float _455;
    if (_427 > 0.0)
    {
        float _436 = (1.0 - _431) / _427;
        _450 = _436;
        _453 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_436 * _422)) * 0.16666667163372039794921875;
        _455 = (fract((_436 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_427 < 0.0)
        {
            float _451 = ((-0.0) - _431) / _427;
            frontier_phi_3_2_ladder = _451;
            frontier_phi_3_2_ladder_1 = (fract((_451 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_451 * _422) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _452;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _450 = frontier_phi_3_2_ladder;
        _453 = frontier_phi_3_2_ladder_2;
        _455 = frontier_phi_3_2_ladder_1;
    }
    float _481;
    float _483;
    float _485;
    if (_428 > 0.0)
    {
        float _468 = (1.0 - _432) / _428;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_468 < _450)
        {
            frontier_phi_8_5_ladder = (fract(_468 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_468 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _468;
        }
        else
        {
            frontier_phi_8_5_ladder = _455;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = _450;
        }
        _481 = frontier_phi_8_5_ladder_2;
        _483 = frontier_phi_8_5_ladder_1;
        _485 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_428 < 0.0)
        {
            float _482 = ((-0.0) - _432) / _428;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_482 < _450)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_482 * _422) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_482 * _427) + _431) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _482;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _455;
                frontier_phi_8_6_ladder_9_ladder_1 = _453;
                frontier_phi_8_6_ladder_9_ladder_2 = _450;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _455;
            frontier_phi_8_6_ladder_1 = _453;
            frontier_phi_8_6_ladder_2 = _450;
        }
        _481 = frontier_phi_8_6_ladder_2;
        _483 = frontier_phi_8_6_ladder_1;
        _485 = frontier_phi_8_6_ladder;
    }
    float _489 = (_422 > 0.0) ? (cbMtdParam._m0[20u].z / _422) : 5000.0;
    float _502;
    float _503;
    if (_489 < _481)
    {
        _502 = ((_431 + cbMtdParam._m0[22u].x) + (_489 * _427)) * 0.16666667163372039794921875;
        _503 = (((_489 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _502 = _483;
        _503 = _485;
    }
    vec4 _505 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_502, _503));
    float _513 = _299 * 0.1500000059604644775390625;
    float _521 = (_513 * ((_505.x * _299) - _334)) + _334;
    float _522 = (_513 * ((_505.y * _299) - _336)) + _336;
    float _523 = (_513 * ((_505.z * _299) - _338)) + _338;
    vec4 _536 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _536.z;
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3442 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))));
    vec4 _577 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _582 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _588 = ((_577.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _590 = (-0.0) - (cbMtdParam._m0[21u].x * ((_577.x * 0.5) + (-0.25)));
    float _591 = fract(_582);
    float _593 = fract(_582 + 0.5);
    vec4 _620 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_591 * _590) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_588 * _591) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _622 = _620.x;
    float _628 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_593 * _590) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_588 * _593) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _622) * abs((_591 * 2.0) + (-1.0))) + _622;
    float _642 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _646 = fract(abs(_642));
    float _652 = sin(cbMtdParam._m0[21u].z);
    float _653 = cos(cbMtdParam._m0[21u].z);
    float _654 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _655 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _685 = abs(cbMtdParam._m0[20u].w * (((_628 - (((_642 >= ((-0.0) - _642)) ? _646 : ((-0.0) - _646)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_655, (-0.0) - _652, _653 * _654) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_655, _653, _654 * _652) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _689 = (((_685 * cbMtdParam._m0[18u].y) - _628) * _685) + _628;
    float _3453 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    vec4 _702 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _717 = (cbMtdParam._m0[14u].x * _702.x) * cbMtdParam._m0[19u].x;
    float _718 = (cbMtdParam._m0[14u].y * _702.y) * cbMtdParam._m0[19u].x;
    float _719 = (cbMtdParam._m0[14u].z * _702.z) * cbMtdParam._m0[19u].x;
    float _729 = exp2(log2(_690) * cbMtdParam._m0[20u].x);
    float _742 = fma(_550, _217, fma(_544, _224, _543 * _210));
    float _745 = fma(_550, _218, fma(_544, _225, _543 * _211));
    float _748 = fma(_550, _219, fma(_544, _226, _543 * _212));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3464 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _756 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3486 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3497 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _780 = _280 * _779;
    float _781 = _281 * _779;
    float _782 = _282 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _950 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _956 = (cbMatDynParam._m0[5u].x * _950) + cbMatDynParam._m0[5u].y;
        float _3508 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _961 = (cbMatDynParam._m0[5u].z * _950) + cbMatDynParam._m0[5u].w;
        float _3519 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) - _957)) + _957) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _829 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _832 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _845 = uint(roundEven(NORMAL.w)) * 13u;
    uint _846 = _845 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_847].z;
    float _3530 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _870 = _867.x * TEXCOORD_4;
    float _871 = dot(vec3(_753, _754, _755), vec3(_780, _781, _782));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _753) - _780;
    float _879 = (_874 * _754) - _781;
    float _880 = (_874 * _755) - _782;
    float _884 = abs(dot(vec3(_780, _781, _782), vec3(_753, _754, _755)));
    float _3563 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_756);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _999 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _1003 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _1027 = _931 + _753;
        float _1028 = _935 + _754;
        float _1029 = _939 + _755;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _995;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _999;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1003;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_753, _754, _755), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3611 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_753, _754, _755), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3644 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_753, _754, _755), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3677 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1098;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1108;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1118;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = _1131;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _452;
        _1270 = _452;
        _1271 = _452;
        _1272 = _452;
        _1273 = _452;
        _1274 = _452;
        _1275 = _452;
        _1276 = _452;
        _1277 = _452;
        _1278 = _452;
        _1279 = _452;
        _1280 = _452;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1315 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1319 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1342 = _931 + _753;
        float _1343 = _935 + _754;
        float _1344 = _939 + _755;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_753, _754, _755), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3740 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_753, _754, _755), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3773 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_753, _754, _755), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _3806 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _452;
        _1581 = _452;
        _1582 = _452;
        _1583 = _452;
        _1584 = _452;
        _1585 = _452;
        _1586 = _452;
        _1587 = _452;
        _1588 = _452;
        _1589 = _452;
        _1590 = _452;
        _1591 = _452;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _878 * 0.5;
    float _1649 = _879 * 0.5;
    float _1650 = _880 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1779 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1782 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1810 = frontier_phi_29_27_ladder;
        }
        float _2155;
        if (_1779 > 0.0)
        {
            _2155 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2155 = frontier_phi_38_34_ladder;
        }
        float _2497;
        if (_1782 > 0.0)
        {
            _2497 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2497 = frontier_phi_52_45_ladder;
        }
        float _2499 = isnan(_2155) ? _1810 : (isnan(_1810) ? _2155 : min(_1810, _2155));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1776) + _1765;
        float _2505 = (_2500 * _1779) + _1769;
        float _2506 = (_2500 * _1782) + _1773;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_28_52_ladder = _2648.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2648.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2648.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_28_52_ladder_2;
        _1800 = frontier_phi_28_52_ladder_1;
        _1802 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1717);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1873 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1876 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2160;
        if (_1870 > 0.0)
        {
            _2160 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2160 = frontier_phi_40_36_ladder;
        }
        float _2523;
        if (_1873 > 0.0)
        {
            _2523 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2523 = frontier_phi_54_47_ladder;
        }
        float _2713;
        if (_1876 > 0.0)
        {
            _2713 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2713 = frontier_phi_72_65_ladder;
        }
        float _2715 = isnan(_2523) ? _2160 : (isnan(_2160) ? _2523 : min(_2160, _2523));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1870) + _1859;
        float _2721 = (_2716 * _1873) + _1863;
        float _2722 = (_2716 * _1876) + _1867;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_37_72_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_37_72_ladder_2;
        _1897 = frontier_phi_37_72_ladder_1;
        _1899 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1807);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1911 = ((((1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_899 * _886)) * _870;
    float _1912 = _1911 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1913 = _1911 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1914 = _1911 * ((cbModelParam._m0[1u].w * (_1899 - _1802)) + _1802);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_845 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1941 = _870 + (-1.0);
    float _1944 = (cbLight._m0[_1936].x * _1941) + 1.0;
    float _1945 = (cbLight._m0[_1936].y * _1941) + 1.0;
    uint _1946 = _1935 + 5u;
    float _1952 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1956 = _1935 + 4u;
    float _1962 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1966 = _1935 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_753, _754, _755));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_753, _754, _755));
    float _3942 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _3953 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1946].x * _1952) * _1987) + ((cbLight._m0[_1956].x * _1962) * _1985);
    float _1995 = ((_1952 * cbLight._m0[_1946].y) * _1987) + ((_1962 * cbLight._m0[_1956].y) * _1985);
    float _1996 = ((_1952 * cbLight._m0[_1946].z) * _1987) + ((_1962 * cbLight._m0[_1956].z) * _1985);
    uint _1998 = _1935 + 8u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _756) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1935].x + _780;
    float _2014 = cbLight._m0[_1935].y + _781;
    float _2015 = cbLight._m0[_1935].z + _782;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1935].xyz));
    float _3964 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2027 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _2028 = dot(vec3(_753, _754, _755), vec3(_2020, _2021, _2022));
    float _3986 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2020, _2021, _2022));
    float _3997 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2012 * _2012;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2052 = 1.0 - _2012;
    float _2063 = (0.5 / (((_2027 * ((_2026 * _2052) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2052) + _2012) * _2026))) * _2026;
    float _4008 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    uint _2076 = _1935 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _756) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1966].x + _780;
    float _2090 = cbLight._m0[_1966].y + _781;
    float _2091 = cbLight._m0[_1966].z + _782;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1966].xyz));
    float _4019 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _2103 = dot(vec3(_753, _754, _755), vec3(_2096, _2097, _2098));
    float _4030 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2096, _2097, _2098));
    float _4041 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2088;
    float _2135 = (0.5 / (((_2027 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2125) + _2088) * _2102))) * _2102;
    float _4052 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2147 = (((_2124 * cbLight._m0[_2076].x) * _2137) * _1952) + (((_2051 * cbLight._m0[_1998].x) * _2065) * _1962);
    float _2148 = (((_2124 * cbLight._m0[_2076].y) * _2137) * _1952) + (((_2051 * cbLight._m0[_1998].y) * _2065) * _1962);
    float _2149 = (((_2124 * cbLight._m0[_2076].z) * _2137) * _1952) + (((_2051 * cbLight._m0[_1998].z) * _2065) * _1962);
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_1933.y == 0u)
    {
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2204;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2204;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2204;
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.x;
        uint _2231 = uint((float(_2219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2220))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2220)));
        float _2241 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2242 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        uint _2245 = uint(isnan(14.0) ? _2242 : (isnan(_2242) ? 14.0 : min(_2242, 14.0)));
        uvec4 _2250 = texelFetch(g_lightClusterGridBuffer, int(((_2245 << 2u) + (_2231 << 6u)) >> 2u));
        uint _2251 = _2250.x;
        uint _2252 = _2219.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2252 >> 4u) & 15u)) + 4294967295u) & _2251) == 0u) || ((_2252 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            uint _2566 = 0u;
            uint _2575;
            bool _2576;
            for (;;)
            {
                _2575 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2566 << 2u)) >> 2u)).x;
                _2576 = _2575 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2576)
                {
                    frontier_phi_67_pred = _2563;
                    frontier_phi_67_pred_1 = _2562;
                    frontier_phi_67_pred_2 = _2561;
                    frontier_phi_67_pred_3 = _2560;
                    frontier_phi_67_pred_4 = _2564;
                    frontier_phi_67_pred_5 = _2565;
                }
                else
                {
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    uint _2762;
                    _2756 = _2560;
                    _2757 = _2561;
                    _2758 = _2562;
                    _2759 = _2563;
                    _2760 = _2564;
                    _2761 = _2565;
                    _2762 = _2575;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2766 = uint(findLSB(_2762)) + (_2566 << 5u);
                        uint _2763 = (_2762 + 4294967295u) & _2762;
                        uint _2768 = _2766 * 48u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2788 = (_2766 * 48u) + 4u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2807 = (_2766 * 48u) + 8u;
                        vec3 _2818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x));
                        float _2822 = _2782.x - _2205;
                        float _2823 = _2782.y - _2206;
                        float _2824 = _2782.z - _2207;
                        float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                        float _2828 = inversesqrt(_2825);
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2832 = dot(vec3(_826, _829, _832), vec3(_2829, _2830, _2831));
                        float _2837 = 1.0 - (_2825 * _2782.w);
                        float _4073 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2839 = sqrt(_2825) * _2801.w;
                        float _2842 = 1.39999997615814208984375 / (_2839 + 1.39999997615814208984375);
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2832) + _2843;
                        float _2849 = _2839 * _2839;
                        float _2853 = ((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2838) / ((_2849 * 0.699999988079071044921875) + 1.0);
                        float _2857 = (-0.0) - _2205;
                        float _2858 = (-0.0) - _2206;
                        float _2859 = (-0.0) - _2207;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2874 = exp2(log2(1.0 / ((_2849 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _886;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2887 = _2866 + _2831;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_826, _829, _832), vec3(_2864, _2865, _2866));
                        float _4089 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2899 = dot(vec3(_826, _829, _832), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4100 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2842 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2832) + _2908;
                        float _4111 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4122 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_2906 * _2906) * ((_2849 * 2.1991131305694580078125) + 3.141590118408203125))) * _2838;
                        _2660 = (_2853 * _2801.x) + _2759;
                        _2661 = (_2853 * _2801.y) + _2760;
                        _2662 = (_2853 * _2801.z) + _2761;
                        _2657 = (_2934 * _2818.x) + _2756;
                        _2658 = (_2934 * _2818.y) + _2757;
                        _2659 = (_2934 * _2818.z) + _2758;
                        if (_2763 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2756 = _2657;
                            _2757 = _2658;
                            _2758 = _2659;
                            _2759 = _2660;
                            _2760 = _2661;
                            _2761 = _2662;
                            _2762 = _2763;
                        }
                    }
                    frontier_phi_67_pred = _2660;
                    frontier_phi_67_pred_1 = _2659;
                    frontier_phi_67_pred_2 = _2658;
                    frontier_phi_67_pred_3 = _2657;
                    frontier_phi_67_pred_4 = _2661;
                    frontier_phi_67_pred_5 = _2662;
                }
                _2375 = frontier_phi_67_pred;
                _2373 = frontier_phi_67_pred_1;
                _2371 = frontier_phi_67_pred_2;
                _2369 = frontier_phi_67_pred_3;
                _2377 = frontier_phi_67_pred_4;
                _2379 = frontier_phi_67_pred_5;
                uint _2567 = _2566 + 1u;
                if (_2567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2560 = _2369;
                    _2561 = _2371;
                    _2562 = _2373;
                    _2563 = _2375;
                    _2564 = _2377;
                    _2565 = _2379;
                    _2566 = _2567;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        if (((4294967295u << _2385) & _2251) == 0u)
        {
            _2528 = _2368;
            _2530 = _2370;
            _2532 = _2372;
            _2534 = _2374;
            _2536 = _2376;
            _2538 = _2378;
        }
        else
        {
            float _2553 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _2554 = _2553 * _2205;
            float _2555 = _2553 * _2206;
            float _2556 = _2553 * _2207;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2739 = _2368;
                float _2740 = _2370;
                float _2741 = _2372;
                float _2742 = _2374;
                float _2743 = _2376;
                float _2744 = _2378;
                uint _2745 = _2385;
                uint _2754;
                bool _2755;
                for (;;)
                {
                    _2754 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                    _2755 = _2754 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2755)
                    {
                        frontier_phi_81_pred = _2742;
                        frontier_phi_81_pred_1 = _2741;
                        frontier_phi_81_pred_2 = _2740;
                        frontier_phi_81_pred_3 = _2739;
                        frontier_phi_81_pred_4 = _2744;
                        frontier_phi_81_pred_5 = _2743;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _2982 = _2739;
                        float _2983 = _2740;
                        float _2984 = _2741;
                        float _2985 = _2742;
                        float _2986 = _2743;
                        float _2987 = _2744;
                        uint _2988 = _2754;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        vec3 _3042;
                        vec4 _3058;
                        vec4 _3073;
                        float _3119;
                        bool _3120;
                        for (;;)
                        {
                            uint _2999 = ((_2745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2999 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3045 = (_2999 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_2999 * 40u) + 20u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_2999 * 40u) + 24u;
                            vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3094 = (_2999 * 40u) + 28u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3119 = fma(_2207, _3107.z, fma(_2206, _3107.y, _3107.x * _2205)) + _3107.w;
                            _3120 = !((fma(_2207, _3088.z, fma(_2206, _3088.y, _3088.x * _2205)) + _3088.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3120)
                            {
                                float _3147 = _3014.x - _2205;
                                float _3148 = _3014.y - _2206;
                                float _3149 = _3014.z - _2207;
                                float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                                float _3153 = inversesqrt(_3150);
                                float _3154 = _3153 * _3147;
                                float _3155 = _3153 * _3148;
                                float _3156 = _3153 * _3149;
                                float _3160 = 1.0 - (_3150 / (_3015 * _3015));
                                float _4133 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3165 = sqrt(_3150) * _3030.w;
                                float _3167 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                                float _3168 = _3167 * _3167;
                                float _3171 = ((1.0 - _3168) * dot(vec3(_3154, _3155, _3156), vec3(_826, _829, _832))) + _3168;
                                float _3174 = _3165 * _3165;
                                float _3178 = (fma(_2207, _3058.z, fma(_2206, _3058.y, _3058.x * _2205)) + _3058.w) / _3119;
                                float _3179 = (fma(_2207, _3073.z, fma(_2206, _3073.y, _3073.x * _2205)) + _3073.w) / _3119;
                                float _3183 = 1.0 - dot(vec2(_3178, _3179), vec2(_3178, _3179));
                                float _4149 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3185 = _3184 * (((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3161) / ((_3174 * 0.699999988079071044921875) + 1.0));
                                float _3197 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                                float _3198 = 1.0 - _886;
                                float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                                float _3206 = _3205 * _3205;
                                float _3207 = _3206 * _3206;
                                float _3208 = _3154 - _2554;
                                float _3209 = _3155 - _2555;
                                float _3210 = _3156 - _2556;
                                float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                                float _3218 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2554, (-0.0) - _2555, (-0.0) - _2556));
                                float _4160 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3222 = dot(vec3(_826, _829, _832), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                                float _4171 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                                float _3230 = _3167 * _3206;
                                float _3231 = _3230 * _3230;
                                float _3237 = ((1.0 - _3231) * dot(vec3(_826, _829, _832), vec3(_3154, _3155, _3156))) + _3231;
                                float _4182 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3239 = 1.0 - _3206;
                                float _3249 = (0.5 / (((_3238 * ((_3221 * _3239) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3206) * _3221))) * _3238;
                                float _4193 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3259 = (_3184 * _3161) * (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_3229 * _3229) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3185 * _3030.x;
                                frontier_phi_87_pred_1 = _3259 * _3042.z;
                                frontier_phi_87_pred_2 = _3259 * _3042.y;
                                frontier_phi_87_pred_3 = _3259 * _3042.x;
                                frontier_phi_87_pred_4 = _3185 * _3030.z;
                                frontier_phi_87_pred_5 = _3185 * _3030.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3266 = frontier_phi_87_pred;
                            _3265 = frontier_phi_87_pred_1;
                            _3264 = frontier_phi_87_pred_2;
                            _3263 = frontier_phi_87_pred_3;
                            _3268 = frontier_phi_87_pred_4;
                            _3267 = frontier_phi_87_pred_5;
                            _2972 = _3266 + _2985;
                            _2973 = _3267 + _2986;
                            _2974 = _3268 + _2987;
                            _2969 = _3263 + _2982;
                            _2970 = _3264 + _2983;
                            _2971 = _3265 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2972;
                        frontier_phi_81_pred_1 = _2971;
                        frontier_phi_81_pred_2 = _2970;
                        frontier_phi_81_pred_3 = _2969;
                        frontier_phi_81_pred_4 = _2974;
                        frontier_phi_81_pred_5 = _2973;
                    }
                    _2535 = frontier_phi_81_pred;
                    _2533 = frontier_phi_81_pred_1;
                    _2531 = frontier_phi_81_pred_2;
                    _2529 = frontier_phi_81_pred_3;
                    _2539 = frontier_phi_81_pred_4;
                    _2537 = frontier_phi_81_pred_5;
                    uint _2746 = _2745 + 1u;
                    if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2739 = _2529;
                        _2740 = _2531;
                        _2741 = _2533;
                        _2742 = _2535;
                        _2743 = _2537;
                        _2744 = _2539;
                        _2745 = _2746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2539;
                frontier_phi_56_57_ladder_1 = _2537;
                frontier_phi_56_57_ladder_2 = _2535;
                frontier_phi_56_57_ladder_3 = _2531;
                frontier_phi_56_57_ladder_4 = _2529;
                frontier_phi_56_57_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_56_57_ladder = _2378;
                frontier_phi_56_57_ladder_1 = _2376;
                frontier_phi_56_57_ladder_2 = _2374;
                frontier_phi_56_57_ladder_3 = _2370;
                frontier_phi_56_57_ladder_4 = _2368;
                frontier_phi_56_57_ladder_5 = _2372;
            }
            _2528 = frontier_phi_56_57_ladder_4;
            _2530 = frontier_phi_56_57_ladder_3;
            _2532 = frontier_phi_56_57_ladder_5;
            _2534 = frontier_phi_56_57_ladder_2;
            _2536 = frontier_phi_56_57_ladder_1;
            _2538 = frontier_phi_56_57_ladder;
        }
        float _2543 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2264 = (_2543 * _2534) + _1994;
        _2266 = (_2543 * _2536) + _1995;
        _2268 = (_2543 * _2538) + _1996;
        _2270 = ((_2528 * 0.039999999105930328369140625) * _2543) + _2147;
        _2272 = ((_2530 * 0.039999999105930328369140625) * _2543) + _2148;
        _2274 = ((_2532 * 0.039999999105930328369140625) * _2543) + _2149;
    }
    else
    {
        _2264 = _1994;
        _2266 = _1995;
        _2268 = _1996;
        _2270 = _2147;
        _2272 = _2148;
        _2274 = _2149;
    }
    uint _2280 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _2286 = ((_729 * (_717 - (_717 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2280].x;
    float _2287 = ((_729 * (_718 - (_718 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2280].y;
    float _2288 = ((_729 * (_719 - (_719 * _690))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2280].z;
    float _4209 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4220 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4231 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2305 = (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2264 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _870))) + ((_2270 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + _2286;
    float _2307 = (_2287 + ((_2272 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2266 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _870)));
    float _2309 = (_2288 + ((_2274 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1706)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2268 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _870)));
    float _2310 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2311 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2318 = cbMtdParam._m0[2u].x * _2286;
    float _2319 = cbMtdParam._m0[2u].y * _2287;
    float _2320 = cbMtdParam._m0[2u].z * _2288;
    float _4257 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2322 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    uint _2323 = _845 + 6u;
    float _2331 = _806 / cbSceneParam._m0[86u].x;
    float _2332 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _2394 = _2393 / _775;
        float _2405 = _2394 * _280;
        float _2406 = _281 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _282;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2411 > 0.0) ? exp2(_2427 * _2411) : (2.0 - exp2(_2429 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2589 = 1.0 / cbSceneParam._m0[80u].x;
            float _2590 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2591 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            _2670 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2600 - _2601) * 2.0) - ((exp2(_2427 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)))) - exp2(_2427 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))))) * _2589)) - ((exp2(_2429 * _2600) - exp2(_2429 * _2601)) * _2589))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2351);
        _2431 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2433 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2435 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2437 = _2681 * _2351;
    }
    else
    {
        _2431 = _2348;
        _2433 = _2349;
        _2435 = _2350;
        _2437 = _2351;
    }
    bool _2708;
    vec4 _2446;
    vec4 _2468;
    float _2470;
    float _2474;
    float _2475;
    float _2476;
    float _2479;
    float _2482;
    float _2485;
    float _2486;
    bool _2496;
    for (;;)
    {
        _2446 = cbMatDynParam._m0[0u];
        float _2448 = roundEven(_2446.y);
        bool _2449 = _2448 == 3.0;
        float _2450 = log2(_2437);
        float _2454 = exp2(_2450 * cbSceneParam._m0[78u].x);
        float _2455 = exp2(_2450 * cbSceneParam._m0[78u].y);
        float _2456 = exp2(_2450 * cbSceneParam._m0[78u].z);
        float _2457 = _2454 * _2310;
        float _2458 = _2455 * _2311;
        float _2459 = _2456 * _2312;
        float _2466 = _789 + (-0.5);
        _2468 = cbMtdParam._m0[1u];
        _2470 = _2468.y * _2466;
        float _2473 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2474 = _2473 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2431)));
        _2475 = _2473 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2433)));
        _2476 = _2473 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2435)));
        _2479 = ((_2318 * _2322) * _2454) * _2473;
        _2482 = ((_2319 * _2322) * _2455) * _2473;
        _2485 = ((_2320 * _2322) * _2456) * _2473;
        _2486 = _2466 * 0.999000012874603271484375;
        _2496 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2496)
        {
            if ((cbInstanceData._m0[_845 + 7u].x + _2486) < 0.5)
            {
                _2708 = true;
                break;
            }
        }
        uint _2624 = _846 + uint(_2446.w);
        if ((cbInstanceData._m0[_2624].w < 1.0) && ((cbInstanceData._m0[_2624].w + _2486) < 0.5))
        {
            _2708 = true;
            break;
        }
        if ((_2470 + 1.0) < _2468.x)
        {
            _2708 = true;
            break;
        }
        _2708 = false;
        break;
    }
    float _2939;
    if (_2708)
    {
        discard_state = true;
        _2939 = 0.0;
    }
    else
    {
        _2939 = cbInstanceData._m0[_2323].w;
    }
    SV_Target.x = _2474;
    SV_Target.y = _2475;
    SV_Target.z = _2476;
    SV_Target.w = _2939;
    SV_Target_1.x = _2479;
    SV_Target_1.y = _2482;
    SV_Target_1.z = _2485;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
    discard_exit();
}


