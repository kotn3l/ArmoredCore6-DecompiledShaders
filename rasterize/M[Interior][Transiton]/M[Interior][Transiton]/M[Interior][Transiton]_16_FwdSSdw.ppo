#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1465;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    vec4 _302 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _305 = _302.x;
    vec4 _323 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _340 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _305) + cbMtdParam._m0[12u].x) * _323.x;
    float _342 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _305) + cbMtdParam._m0[12u].y) * _323.y;
    float _344 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _305) + cbMtdParam._m0[12u].z) * _323.z;
    vec4 _362 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = cbMtdParam._m0[27u].w + _286;
    float _402 = cbMtdParam._m0[28u].x + _287;
    float _403 = cbMtdParam._m0[28u].y + _288;
    float _417 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_216, _217, _218));
    float _418 = (-0.0) - dot(vec3(_401, _402, _403), vec3(_230, _231, _232));
    float _419 = (-0.0) - dot(vec3(_401, _402, _403), vec3((-0.0) - _223, (-0.0) - _224, (-0.0) - _225));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _426 = _423 * _419;
    float _427 = (_423 * _417) + ((cbMtdParam._m0[25u].w * _305) * ((_362.x * 2.0) + (-1.0)));
    float _428 = (_423 * _418) + ((cbMtdParam._m0[26u].x * _305) * ((_362.y * 2.0) + (-1.0)));
    float _429 = _427 * cbMtdParam._m0[24u].x;
    float _430 = _428 * cbMtdParam._m0[23u].w;
    float _431 = fract(TEXCOORD.x);
    float _432 = fract(TEXCOORD.y);
    float _438;
    if (_429 > 0.0)
    {
        _438 = (1.0 - _431) / _429;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_429 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _431) / _429;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _438 = frontier_phi_3_2_ladder;
    }
    float _446;
    if (_430 > 0.0)
    {
        _446 = (1.0 - _432) / _430;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_430 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _432) / _430;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _446 = frontier_phi_7_6_ladder;
    }
    bool _448 = _426 > 0.0;
    float _450 = _448 ? (cbMtdParam._m0[17u].x / _426) : 5000.0;
    float _451 = isnan(_446) ? _438 : (isnan(_438) ? _446 : min(_438, _446));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _457 = _431 + (-0.5);
    float _460 = _432 + (-0.5);
    float _463 = ((_452 * _426) + _456) / _456;
    vec4 _488 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_457 + (_452 * _429)) / _463) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_460 + (_452 * _430)) / _463) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _501 = (_488.x * _305) * cbMtdParam._m0[9u].x;
    float _502 = (_488.y * _305) * cbMtdParam._m0[9u].y;
    float _503 = (_488.z * _305) * cbMtdParam._m0[9u].z;
    float _521 = _427 * cbMtdParam._m0[26u].z;
    float _522 = _428 * cbMtdParam._m0[26u].y;
    bool _523 = _521 > 0.0;
    float _528;
    if (_523)
    {
        _528 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _528 = frontier_phi_11_10_ladder;
    }
    bool _530 = _522 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _535 = frontier_phi_15_14_ladder;
    }
    float _538 = _448 ? (cbMtdParam._m0[19u].z / _426) : 5000.0;
    float _539 = isnan(_535) ? _528 : (isnan(_528) ? _535 : min(_528, _535));
    float _540 = isnan(_538) ? _539 : (isnan(_539) ? _538 : min(_539, _538));
    float _544 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _548 = ((_540 * _426) + _544) / _544;
    float _553 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _555 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _571 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_457 + (_540 * _521)) / _548) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_460 + (_540 * _522)) / _548) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _586;
    if (_523)
    {
        _586 = (1.0 - _431) / _521;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_521 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _431) / _521;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _586 = frontier_phi_19_18_ladder;
    }
    float _592;
    if (_530)
    {
        _592 = (1.0 - _432) / _522;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_522 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _432) / _522;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _592 = frontier_phi_23_22_ladder;
    }
    float _594 = isnan(_592) ? _586 : (isnan(_586) ? _592 : min(_586, _592));
    float _595 = isnan(_538) ? _594 : (isnan(_594) ? _538 : min(_594, _538));
    float _602 = ((_595 * _426) + _544) / _544;
    vec4 _622 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_457 + (_595 * _521)) / _602) + 0.5) + _553) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_460 + (_595 * _522)) / _602) + 0.5) + _555) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _624 = _622.x;
    float _634 = (((((cbMtdParam._m0[10u].x * _305) * _571.x) - _501) * _305) * _624) + _501;
    float _635 = (((((cbMtdParam._m0[10u].y * _305) * _571.y) - _502) * _305) * _624) + _502;
    float _636 = (((((cbMtdParam._m0[10u].z * _305) * _571.z) - _503) * _305) * _624) + _503;
    float _649 = _427 * cbMtdParam._m0[27u].x;
    float _650 = _428 * cbMtdParam._m0[26u].w;
    bool _651 = _649 > 0.0;
    float _656;
    if (_651)
    {
        _656 = (1.0 - _431) / _649;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_649 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _431) / _649;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _656 = frontier_phi_27_26_ladder;
    }
    bool _658 = _650 > 0.0;
    float _663;
    if (_658)
    {
        _663 = (1.0 - _432) / _650;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_650 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _432) / _650;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _663 = frontier_phi_31_30_ladder;
    }
    float _666 = _448 ? (cbMtdParam._m0[23u].x / _426) : 5000.0;
    float _667 = isnan(_663) ? _656 : (isnan(_656) ? _663 : min(_656, _663));
    float _668 = isnan(_666) ? _667 : (isnan(_667) ? _666 : min(_667, _666));
    float _672 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _676 = ((_668 * _426) + _672) / _672;
    float _681 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _683 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _699 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_457 + (_668 * _649)) / _676) + 0.5) + _681) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_460 + (_668 * _650)) / _676) + 0.5) + _683) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _714;
    if (_651)
    {
        _714 = (1.0 - _431) / _649;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_649 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _431) / _649;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _714 = frontier_phi_35_34_ladder;
    }
    float _720;
    if (_658)
    {
        _720 = (1.0 - _432) / _650;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_650 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _432) / _650;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _720 = frontier_phi_39_38_ladder;
    }
    float _722 = isnan(_720) ? _714 : (isnan(_714) ? _720 : min(_714, _720));
    float _723 = isnan(_666) ? _722 : (isnan(_722) ? _666 : min(_722, _666));
    float _730 = ((_723 * _426) + _672) / _672;
    vec4 _750 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_457 + (_723 * _649)) / _730) + 0.5) + _681) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_460 + (_723 * _650)) / _730) + 0.5) + _683) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _752 = _750.x;
    float _762 = _305 * 0.1500000059604644775390625;
    float _773 = (_762 * ((_634 - _340) + (((((cbMtdParam._m0[13u].x * _305) * _699.x) - _634) * _305) * _752))) + _340;
    float _774 = (_762 * ((_635 - _342) + (((((cbMtdParam._m0[13u].y * _305) * _699.y) - _635) * _305) * _752))) + _342;
    float _775 = (_762 * ((_636 - _344) + (((((cbMtdParam._m0[13u].z * _305) * _699.z) - _636) * _305) * _752))) + _344;
    vec4 _788 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _792 = _788.z;
    float _795 = (_788.x * 2.0) + (-1.0);
    float _796 = (_788.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _3678 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _802 = sqrt(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))));
    vec4 _826 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _831 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _837 = ((_826.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _839 = (-0.0) - (cbMtdParam._m0[21u].x * ((_826.x * 0.5) + (-0.25)));
    float _840 = fract(_831);
    float _842 = fract(_831 + 0.5);
    vec4 _869 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_840 * _839) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_837 * _840) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _871 = _869.x;
    float _877 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_842 * _839) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_837 * _842) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _871) * abs((_840 * 2.0) + (-1.0))) + _871;
    float _883 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _887 = fract(abs(_883));
    float _896 = sin(cbMtdParam._m0[21u].z);
    float _897 = cos(cbMtdParam._m0[21u].z);
    float _898 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _899 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _929 = abs(cbMtdParam._m0[20u].w * (((_877 - (((_883 >= ((-0.0) - _883)) ? _887 : ((-0.0) - _887)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_899, (-0.0) - _896, _897 * _898) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_899, _897, _898 * _896) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _933 = (((_929 * cbMtdParam._m0[18u].y) - _877) * _929) + _877;
    float _3689 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _934 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _946 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _961 = (cbMtdParam._m0[14u].x * _946.x) * cbMtdParam._m0[19u].x;
    float _962 = (cbMtdParam._m0[14u].y * _946.y) * cbMtdParam._m0[19u].x;
    float _963 = (cbMtdParam._m0[14u].z * _946.z) * cbMtdParam._m0[19u].x;
    float _973 = exp2(log2(_934) * cbMtdParam._m0[20u].x);
    float _986 = fma(_802, _223, fma(_796, _230, _795 * _216));
    float _989 = fma(_802, _224, fma(_796, _231, _795 * _217));
    float _992 = fma(_802, _225, fma(_796, _232, _795 * _218));
    float _996 = inversesqrt(dot(vec3(_986, _989, _992), vec3(_986, _989, _992)));
    float _997 = _996 * _986;
    float _998 = _996 * _989;
    float _999 = _996 * _992;
    float _3700 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _1000 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3722 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _3733 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _1019 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1023 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _1024 = _286 * _1023;
    float _1025 = _287 * _1023;
    float _1026 = _288 * _1023;
    float _1032 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1033 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1051 = fma(_999, cbSceneParam._m0[5u].z, fma(_998, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _997));
    float _1054 = fma(_999, cbSceneParam._m0[6u].z, fma(_998, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _997));
    float _1057 = fma(_999, cbSceneParam._m0[7u].z, fma(_998, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _997));
    uint _1070 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1071 = _1070 + 9u;
    uint _1072 = _1071 + uint(cbMatDynParam._m0[0u].w);
    float _1078 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_1072].x;
    float _1079 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_1072].y;
    float _1080 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_1072].z;
    float _3744 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1032, cbSceneParam._m0[86u].y * _1033));
    float _1095 = _1092.x * TEXCOORD_4;
    float _1096 = dot(vec3(_997, _998, _999), vec3(_1024, _1025, _1026));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _997) - _1024;
    float _1104 = (_1099 * _998) - _1025;
    float _1105 = (_1099 * _999) - _1026;
    float _1109 = abs(dot(vec3(_1024, _1025, _1026), vec3(_997, _998, _999)));
    float _3777 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_1000);
    float _1124 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1464;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1191 = fma(_1164, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156));
        float _1195 = fma(_1164, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156));
        float _1199 = fma(_1164, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156));
        float _1222 = _1156 + _997;
        float _1223 = _1160 + _998;
        float _1224 = _1164 + _999;
        float _1234 = fma(_1224, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1191 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1195 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[34u].z) + ((((((_1199 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1292 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1258.x + (-0.5));
        float _1294 = _1292 * (_1258.y + (-0.5));
        float _1295 = _1292 * (_1258.z + (-0.5));
        float _1302 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1265.x + (-0.5));
        float _1304 = _1302 * (_1265.y + (-0.5));
        float _1305 = _1302 * (_1265.z + (-0.5));
        float _1312 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1272.x + (-0.5));
        float _1314 = _1312 * (_1272.y + (-0.5));
        float _1315 = _1312 * (_1272.z + (-0.5));
        float _1322 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1279.x + (-0.5));
        float _1324 = _1322 * (_1279.y + (-0.5));
        float _1325 = _1322 * (_1279.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1346 = (dot(vec3(_997, _998, _999), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1356 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3825 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1358 + 1.0))) + _1363) * _1326;
        float _1373 = _1294 * 0.5;
        float _1374 = _1304 * 0.5;
        float _1375 = _1314 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_997, _998, _999), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3858 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1400 + 1.0))) + _1405) * _1327;
        float _1415 = _1295 * 0.5;
        float _1416 = _1305 * 0.5;
        float _1417 = _1315 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_997, _998, _999), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3891 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1442 + 1.0))) + _1447) * _1328;
        _1464 = _1295;
        _1466 = _1294;
        _1467 = _1293;
        _1468 = _1305;
        _1469 = _1304;
        _1470 = _1303;
        _1471 = _1315;
        _1472 = _1314;
        _1473 = _1313;
        _1474 = _1328;
        _1475 = _1327;
        _1476 = _1326;
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1465;
        _1466 = _1465;
        _1467 = _1465;
        _1468 = _1465;
        _1469 = _1465;
        _1470 = _1465;
        _1471 = _1465;
        _1472 = _1465;
        _1473 = _1465;
        _1474 = _1465;
        _1475 = _1465;
        _1476 = _1465;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1504 = fma(_1164, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156));
        float _1508 = fma(_1164, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156));
        float _1512 = fma(_1164, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156));
        float _1535 = _1156 + _997;
        float _1536 = _1160 + _998;
        float _1537 = _1164 + _999;
        float _1547 = fma(_1537, cbModelParam._m0[30u].z, fma(_1536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1535)) - _1504;
        float _1548 = fma(_1537, cbModelParam._m0[31u].z, fma(_1536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1535)) - _1508;
        float _1549 = fma(_1537, cbModelParam._m0[32u].z, fma(_1536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1535)) - _1512;
        float _1553 = inversesqrt(dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549)));
        float _1566 = ((_1553 * _1547) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1504 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1553 * _1548) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1508 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1553 * _1549) / cbModelParam._m0[35u].z) + ((((((_1512 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        float _1603 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1570.x + (-0.5));
        float _1605 = _1603 * (_1570.y + (-0.5));
        float _1606 = _1603 * (_1570.z + (-0.5));
        float _1613 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1577.x + (-0.5));
        float _1615 = _1613 * (_1577.y + (-0.5));
        float _1616 = _1613 * (_1577.z + (-0.5));
        float _1623 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1584.x + (-0.5));
        float _1625 = _1623 * (_1584.y + (-0.5));
        float _1626 = _1623 * (_1584.z + (-0.5));
        float _1633 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1591.x + (-0.5));
        float _1635 = _1633 * (_1591.y + (-0.5));
        float _1636 = _1633 * (_1591.z + (-0.5));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = _1604 * 0.5;
        float _1641 = _1614 * 0.5;
        float _1642 = _1624 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_997, _998, _999), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _3954 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1667 + 1.0))) + _1672) * _1637;
        float _1682 = _1605 * 0.5;
        float _1683 = _1615 * 0.5;
        float _1684 = _1625 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_997, _998, _999), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _3987 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1709 + 1.0))) + _1714) * _1638;
        float _1724 = _1606 * 0.5;
        float _1725 = _1616 * 0.5;
        float _1726 = _1626 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_997, _998, _999), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4020 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1751 + 1.0))) + _1756) * _1639;
        _1773 = _1606;
        _1774 = _1605;
        _1775 = _1604;
        _1776 = _1616;
        _1777 = _1615;
        _1778 = _1614;
        _1779 = _1626;
        _1780 = _1625;
        _1781 = _1624;
        _1782 = _1639;
        _1783 = _1638;
        _1784 = _1637;
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
    }
    else
    {
        _1773 = _1465;
        _1774 = _1465;
        _1775 = _1465;
        _1776 = _1465;
        _1777 = _1465;
        _1778 = _1465;
        _1779 = _1465;
        _1780 = _1465;
        _1781 = _1465;
        _1782 = _1465;
        _1783 = _1465;
        _1784 = _1465;
        _1785 = 0.0;
        _1786 = 0.0;
        _1787 = 0.0;
    }
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1477)) + _1477;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1478)) + _1478;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1479)) + _1479;
    float _1820 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1797));
    float _1841 = _1103 * 0.5;
    float _1842 = _1104 * 0.5;
    float _1843 = _1105 * 0.5;
    float _1844 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1847 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1850 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1884;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1857 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1464, _1468, _1471, _1474));
        float _1861 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1865 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1872 = dot(vec4(cbModelParam._m0[39u]), vec4(_1841, _1842, _1843, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1895;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1886 = dot(vec4(cbModelParam._m0[40u]), vec4(_1841, _1842, _1843, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1899 = (_1895 * cbModelParam._m0[1u].x) + (_1884 * (1.0 - cbModelParam._m0[1u].x));
    float _1909 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1000);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1909 : min(cbModelParam._m0[25u].z, _1909));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1958 = fma(_1164, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156)) + cbModelParam._m0[13u].w;
        float _1962 = fma(_1164, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156)) + cbModelParam._m0[14u].w;
        float _1966 = fma(_1164, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156)) + cbModelParam._m0[15u].w;
        float _1969 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _1972 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _1975 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2003;
        if (_1969 > 0.0)
        {
            _2003 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _2003 = frontier_phi_54_52_ladder;
        }
        float _2372;
        if (_1972 > 0.0)
        {
            _2372 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2372 = frontier_phi_63_59_ladder;
        }
        float _2706;
        if (_1975 > 0.0)
        {
            _2706 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2706 = frontier_phi_77_70_ladder;
        }
        float _2708 = isnan(_2372) ? _2003 : (isnan(_2003) ? _2372 : min(_2003, _2372));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _1969) + _1958;
        float _2714 = (_2709 * _1972) + _1962;
        float _2715 = (_2709 * _1975) + _1966;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2715, cbModelParam._m0[9u].z, fma(_2714, cbModelParam._m0[9u].y, _2713 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2715, cbModelParam._m0[10u].z, fma(_2714, cbModelParam._m0[10u].y, _2713 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2715, cbModelParam._m0[11u].z, fma(_2714, cbModelParam._m0[11u].y, _2713 * cbModelParam._m0[11u].x))), _1910);
            frontier_phi_53_77_ladder = _2841.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2841.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2841.z * cbModelParam._m0[1u].y;
        }
        _1991 = frontier_phi_53_77_ladder;
        _1993 = frontier_phi_53_77_ladder_1;
        _1995 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1910);
        _1991 = _1979.x * cbModelParam._m0[1u].y;
        _1993 = _1979.y * cbModelParam._m0[1u].y;
        _1995 = _1979.z * cbModelParam._m0[1u].y;
    }
    float _1999 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1000);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1999 : min(cbModelParam._m0[25u].w, _1999));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1164, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1164, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1164, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2066 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2069 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2377;
        if (_2063 > 0.0)
        {
            _2377 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2377 = frontier_phi_65_61_ladder;
        }
        float _2732;
        if (_2066 > 0.0)
        {
            _2732 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2732 = frontier_phi_79_72_ladder;
        }
        float _2901;
        if (_2069 > 0.0)
        {
            _2901 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2901 = frontier_phi_93_88_ladder;
        }
        float _2903 = isnan(_2732) ? _2377 : (isnan(_2377) ? _2732 : min(_2377, _2732));
        float _2904 = isnan(_2901) ? _2903 : (isnan(_2903) ? _2901 : min(_2903, _2901));
        float _2908 = (_2904 * _2063) + _2052;
        float _2909 = (_2904 * _2066) + _2056;
        float _2910 = (_2904 * _2069) + _2060;
        float _2911 = _2904 * 9.9999997473787516355514526367188e-05;
        float _2912 = (-1.0) - _2911;
        float _2914 = _2911 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2910 > _2914) || ((_2910 < _2912) || ((_2909 > _2914) || ((_2909 < _2912) || ((_2908 < _2912) || (_2908 > _2914))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2910, cbModelParam._m0[17u].z, fma(_2909, cbModelParam._m0[17u].y, _2908 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2910, cbModelParam._m0[18u].z, fma(_2909, cbModelParam._m0[18u].y, _2908 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2910, cbModelParam._m0[19u].z, fma(_2909, cbModelParam._m0[19u].y, _2908 * cbModelParam._m0[19u].x))), _2000);
            frontier_phi_62_93_ladder = _3143.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _3143.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _3143.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_62_93_ladder_2;
        _2090 = frontier_phi_62_93_ladder_1;
        _2092 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2000);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2104 = ((((1.0 - _1124) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1124 * _1111)) * _1095;
    float _2105 = _2104 * ((cbModelParam._m0[1u].w * (_2088 - _1991)) + _1991);
    float _2106 = _2104 * ((cbModelParam._m0[1u].w * (_2090 - _1993)) + _1993);
    float _2107 = _2104 * ((cbModelParam._m0[1u].w * (_2092 - _1995)) + _1995);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    vec4 _2124 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1032, _1033));
    float _2126 = _2124.w;
    float _2138 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2126);
    float _2139 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2126);
    float _2140 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2126);
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_1070 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2152 = _1095 + (-1.0);
    float _2155 = (cbLight._m0[_2147].x * _2152) + 1.0;
    float _2156 = (cbLight._m0[_2147].y * _2152) + 1.0;
    uint _2157 = _2146 + 5u;
    float _2163 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2167 = _2146 + 4u;
    float _2176 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2180 = _2146 | 1u;
    float _2191 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_997, _998, _999));
    float _2194 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_997, _998, _999));
    float _4156 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _4167 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2199 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _2201 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _2208 = ((cbLight._m0[_2157].x * _2163) * _2201) + (((cbLight._m0[_2167].x * _2138) * _2176) * _2199);
    float _2209 = ((_2163 * cbLight._m0[_2157].y) * _2201) + (((cbLight._m0[_2167].y * _2139) * _2176) * _2199);
    float _2210 = ((_2163 * cbLight._m0[_2157].z) * _2201) + (((cbLight._m0[_2167].z * _2140) * _2176) * _2199);
    uint _2212 = _2146 + 8u;
    float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _1000) * 0.949999988079071044921875);
    float _2226 = _2225 * _2225;
    float _2227 = cbLight._m0[_2146].x + _1024;
    float _2228 = cbLight._m0[_2146].y + _1025;
    float _2229 = cbLight._m0[_2146].z + _1026;
    float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
    float _2234 = _2233 * _2227;
    float _2235 = _2233 * _2228;
    float _2236 = _2233 * _2229;
    float _2237 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2146].xyz));
    float _4178 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2241 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2242 = dot(vec3(_997, _998, _999), vec3(_2234, _2235, _2236));
    float _4200 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2246 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2234, _2235, _2236));
    float _4211 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = _2226 * _2226;
    float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
    float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2266 = 1.0 - _2226;
    float _2277 = (0.5 / (((_2241 * ((_2240 * _2266) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2266) + _2226) * _2240))) * _2240;
    float _4222 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
    uint _2293 = _2146 + 9u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _1000) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2180].x + _1024;
    float _2307 = cbLight._m0[_2180].y + _1025;
    float _2308 = cbLight._m0[_2180].z + _1026;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2180].xyz));
    float _4233 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2320 = dot(vec3(_997, _998, _999), vec3(_2313, _2314, _2315));
    float _4244 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2313, _2314, _2315));
    float _4255 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2305 * _2305;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2305;
    float _2352 = (0.5 / (((_2241 * ((_2319 * _2342) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2342) + _2305) * _2319))) * _2319;
    float _4266 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    float _2364 = (((_2341 * cbLight._m0[_2293].x) * _2354) * _2163) + ((((cbLight._m0[_2212].x * _2138) * _2265) * _2279) * _2176);
    float _2365 = (((_2341 * cbLight._m0[_2293].y) * _2354) * _2163) + ((((cbLight._m0[_2212].y * _2139) * _2265) * _2279) * _2176);
    float _2366 = (((_2341 * cbLight._m0[_2293].z) * _2354) * _2163) + ((((cbLight._m0[_2212].z * _2140) * _2265) * _2279) * _2176);
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_2144.y == 0u)
    {
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2421;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2421;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2421;
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.x;
        uint _2448 = uint((float(_2436.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1033) / _2437))) + floor(float(uint(cbSceneParam._m0[85u].x * _1032) / _2437)));
        float _2458 = (log2(_2424 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2459 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        uint _2462 = uint(isnan(14.0) ? _2459 : (isnan(_2459) ? 14.0 : min(_2459, 14.0)));
        uvec4 _2467 = texelFetch(g_lightClusterGridBuffer, int(((_2462 << 2u) + (_2448 << 6u)) >> 2u));
        uint _2468 = _2467.x;
        uint _2469 = _2436.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2469 >> 4u) & 15u)) + 4294967295u) & _2468) == 0u) || ((_2469 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2785)
                {
                    frontier_phi_90_pred = _2774;
                    frontier_phi_90_pred_1 = _2769;
                    frontier_phi_90_pred_2 = _2770;
                    frontier_phi_90_pred_3 = _2771;
                    frontier_phi_90_pred_4 = _2772;
                    frontier_phi_90_pred_5 = _2773;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2769;
                    _2945 = _2770;
                    _2946 = _2771;
                    _2947 = _2772;
                    _2948 = _2773;
                    _2949 = _2774;
                    _2950 = _2784;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2775 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2422;
                        float _3011 = _2970.y - _2423;
                        float _3012 = _2970.z - _2424;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_1051, _1054, _1057), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4287 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2422;
                        float _3046 = (-0.0) - _2423;
                        float _3047 = (-0.0) - _2424;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _1111;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_1051, _1054, _1057), vec3(_3052, _3053, _3054));
                        float _4303 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3087 = dot(vec3(_1051, _1054, _1057), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4314 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4325 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4336 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3122 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2853 = (_3041 * _2989.x) + _2947;
                        _2854 = (_3041 * _2989.y) + _2948;
                        _2855 = (_3041 * _2989.z) + _2949;
                        _2850 = (_3122 * _3006.x) + _2944;
                        _2851 = (_3122 * _3006.y) + _2945;
                        _2852 = (_3122 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2850;
                            _2945 = _2851;
                            _2946 = _2852;
                            _2947 = _2853;
                            _2948 = _2854;
                            _2949 = _2855;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_90_pred = _2855;
                    frontier_phi_90_pred_1 = _2850;
                    frontier_phi_90_pred_2 = _2851;
                    frontier_phi_90_pred_3 = _2852;
                    frontier_phi_90_pred_4 = _2853;
                    frontier_phi_90_pred_5 = _2854;
                }
                _2596 = frontier_phi_90_pred;
                _2586 = frontier_phi_90_pred_1;
                _2588 = frontier_phi_90_pred_2;
                _2590 = frontier_phi_90_pred_3;
                _2592 = frontier_phi_90_pred_4;
                _2594 = frontier_phi_90_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2586;
                    _2770 = _2588;
                    _2771 = _2590;
                    _2772 = _2592;
                    _2773 = _2594;
                    _2774 = _2596;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2602) & _2468) == 0u)
        {
            _2737 = _2585;
            _2739 = _2587;
            _2741 = _2589;
            _2743 = _2591;
            _2745 = _2593;
            _2747 = _2595;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
            float _2763 = _2762 * _2422;
            float _2764 = _2762 * _2423;
            float _2765 = _2762 * _2424;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2927 = _2585;
                float _2928 = _2587;
                float _2929 = _2589;
                float _2930 = _2591;
                float _2931 = _2593;
                float _2932 = _2595;
                uint _2933 = _2602;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2943)
                    {
                        frontier_phi_99_pred = _2930;
                        frontier_phi_99_pred_1 = _2929;
                        frontier_phi_99_pred_2 = _2928;
                        frontier_phi_99_pred_3 = _2927;
                        frontier_phi_99_pred_4 = _2932;
                        frontier_phi_99_pred_5 = _2931;
                    }
                    else
                    {
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3161 = _2927;
                        float _3162 = _2928;
                        float _3163 = _2929;
                        float _3164 = _2930;
                        float _3165 = _2931;
                        float _3166 = _2932;
                        uint _3167 = _2942;
                        uint _3168;
                        vec4 _3193;
                        float _3194;
                        vec4 _3209;
                        vec3 _3221;
                        vec4 _3237;
                        vec4 _3252;
                        float _3298;
                        bool _3299;
                        for (;;)
                        {
                            uint _3178 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3167));
                            _3168 = (_3167 + 4294967295u) & _3167;
                            uint _3180 = _3178 * 40u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3194 = _3193.w;
                            uint _3196 = (_3178 * 40u) + 4u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3178 * 40u) + 8u;
                            _3221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x));
                            uint _3224 = (_3178 * 40u) + 16u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3178 * 40u) + 20u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3178 * 40u) + 24u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3273 = (_3178 * 40u) + 28u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3298 = fma(_2424, _3286.z, fma(_2423, _3286.y, _3286.x * _2422)) + _3286.w;
                            _3299 = !((fma(_2424, _3267.z, fma(_2423, _3267.y, _3267.x * _2422)) + _3267.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3299)
                            {
                                float _3326 = _3193.x - _2422;
                                float _3327 = _3193.y - _2423;
                                float _3328 = _3193.z - _2424;
                                float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                                float _3332 = inversesqrt(_3329);
                                float _3333 = _3332 * _3326;
                                float _3334 = _3332 * _3327;
                                float _3335 = _3332 * _3328;
                                float _3339 = 1.0 - (_3329 / (_3194 * _3194));
                                float _4347 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3344 = sqrt(_3329) * _3209.w;
                                float _3346 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                                float _3347 = _3346 * _3346;
                                float _3350 = ((1.0 - _3347) * dot(vec3(_3333, _3334, _3335), vec3(_1051, _1054, _1057))) + _3347;
                                float _3353 = _3344 * _3344;
                                float _3357 = (fma(_2424, _3237.z, fma(_2423, _3237.y, _3237.x * _2422)) + _3237.w) / _3298;
                                float _3358 = (fma(_2424, _3252.z, fma(_2423, _3252.y, _3252.x * _2422)) + _3252.w) / _3298;
                                float _3362 = 1.0 - dot(vec2(_3357, _3358), vec2(_3357, _3358));
                                float _4363 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3364 = _3363 * (((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3340) / ((_3353 * 0.699999988079071044921875) + 1.0));
                                float _3376 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                                float _3377 = 1.0 - _1111;
                                float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                                float _3385 = _3384 * _3384;
                                float _3386 = _3385 * _3385;
                                float _3387 = _3333 - _2763;
                                float _3388 = _3334 - _2764;
                                float _3389 = _3335 - _2765;
                                float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                                float _3397 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4374 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3401 = dot(vec3(_1051, _1054, _1057), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                                float _4385 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                                float _3409 = _3346 * _3385;
                                float _3410 = _3409 * _3409;
                                float _3416 = ((1.0 - _3410) * dot(vec3(_1051, _1054, _1057), vec3(_3333, _3334, _3335))) + _3410;
                                float _4396 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3418 = 1.0 - _3385;
                                float _3428 = (0.5 / (((_3417 * ((_3400 * _3418) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3385) * _3400))) * _3417;
                                float _4407 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3438 = (_3363 * _3340) * (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3408 * _3408) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3364 * _3209.z;
                                frontier_phi_105_pred_1 = _3438 * _3221.x;
                                frontier_phi_105_pred_2 = _3438 * _3221.y;
                                frontier_phi_105_pred_3 = _3438 * _3221.z;
                                frontier_phi_105_pred_4 = _3364 * _3209.x;
                                frontier_phi_105_pred_5 = _3364 * _3209.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3447 = frontier_phi_105_pred;
                            _3442 = frontier_phi_105_pred_1;
                            _3443 = frontier_phi_105_pred_2;
                            _3444 = frontier_phi_105_pred_3;
                            _3445 = frontier_phi_105_pred_4;
                            _3446 = frontier_phi_105_pred_5;
                            _3151 = _3445 + _3164;
                            _3152 = _3446 + _3165;
                            _3153 = _3447 + _3166;
                            _3148 = _3442 + _3161;
                            _3149 = _3443 + _3162;
                            _3150 = _3444 + _3163;
                            if (_3168 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3168;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _3151;
                        frontier_phi_99_pred_1 = _3150;
                        frontier_phi_99_pred_2 = _3149;
                        frontier_phi_99_pred_3 = _3148;
                        frontier_phi_99_pred_4 = _3153;
                        frontier_phi_99_pred_5 = _3152;
                    }
                    _2744 = frontier_phi_99_pred;
                    _2742 = frontier_phi_99_pred_1;
                    _2740 = frontier_phi_99_pred_2;
                    _2738 = frontier_phi_99_pred_3;
                    _2748 = frontier_phi_99_pred_4;
                    _2746 = frontier_phi_99_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2738;
                        _2928 = _2740;
                        _2929 = _2742;
                        _2930 = _2744;
                        _2931 = _2746;
                        _2932 = _2748;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2748;
                frontier_phi_81_82_ladder_1 = _2744;
                frontier_phi_81_82_ladder_2 = _2742;
                frontier_phi_81_82_ladder_3 = _2740;
                frontier_phi_81_82_ladder_4 = _2738;
                frontier_phi_81_82_ladder_5 = _2746;
            }
            else
            {
                frontier_phi_81_82_ladder = _2595;
                frontier_phi_81_82_ladder_1 = _2591;
                frontier_phi_81_82_ladder_2 = _2589;
                frontier_phi_81_82_ladder_3 = _2587;
                frontier_phi_81_82_ladder_4 = _2585;
                frontier_phi_81_82_ladder_5 = _2593;
            }
            _2737 = frontier_phi_81_82_ladder_4;
            _2739 = frontier_phi_81_82_ladder_3;
            _2741 = frontier_phi_81_82_ladder_2;
            _2743 = frontier_phi_81_82_ladder_1;
            _2745 = frontier_phi_81_82_ladder_5;
            _2747 = frontier_phi_81_82_ladder;
        }
        float _2752 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _2481 = (_2752 * _2743) + _2208;
        _2483 = (_2752 * _2745) + _2209;
        _2485 = (_2752 * _2747) + _2210;
        _2487 = ((_2737 * 0.039999999105930328369140625) * _2752) + _2364;
        _2489 = ((_2739 * 0.039999999105930328369140625) * _2752) + _2365;
        _2491 = ((_2741 * 0.039999999105930328369140625) * _2752) + _2366;
    }
    else
    {
        _2481 = _2208;
        _2483 = _2209;
        _2485 = _2210;
        _2487 = _2364;
        _2489 = _2365;
        _2491 = _2366;
    }
    uint _2497 = _1071 + uint(cbMatDynParam._m0[0u].w);
    float _2503 = ((_973 * (_961 - (_961 * _934))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2497].x;
    float _2504 = ((_973 * (_962 - (_962 * _934))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2497].y;
    float _2505 = ((_973 * (_963 - (_963 * _934))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2497].z;
    float _4423 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4434 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4445 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2522 = (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2481 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1095))) + ((_2487 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + _2503;
    float _2524 = (_2504 + ((_2489 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2483 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1095)));
    float _2526 = (_2505 + ((_2491 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1899)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2485 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1095)));
    float _4471 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2539 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    uint _2540 = _1070 + 6u;
    float _2548 = _1032 / cbSceneParam._m0[86u].x;
    float _2549 = _1033 / cbSceneParam._m0[86u].y;
    vec4 _2563 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, (log2((isnan(cbSceneParam._m0[77u].w) ? _1019 : (isnan(_1019) ? cbSceneParam._m0[77u].w : min(_1019, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2565 = _2563.x;
    float _2566 = _2563.y;
    float _2567 = _2563.z;
    float _2568 = _2563.w;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_1019 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_1019) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1019 : min(cbSceneParam._m0[80u].w, _1019));
        float _2611 = _2610 / _1019;
        float _2622 = _2611 * _286;
        float _2623 = _287 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2625 = _2611 * _288;
        float _2627 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2623;
        float _2635 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2635;
        float _2644 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2646 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2863;
        if (abs((_2624 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2863 = ((((_2628 > 0.0) ? exp2(_2644 * _2628) : (2.0 - exp2(_2646 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2800 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2863 = ((abs(_2635 / _2624) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2644 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2644 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2646 * _2809) - exp2(_2646 * _2810)) * _2798))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2865 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, 1.0), 0.0);
        float _2874 = exp2((_2863 * (-1.44269502162933349609375)) * (1.0 - _2865.w));
        float _2875 = log2(_2874);
        float _2891 = log2(_2568);
        _2648 = (exp2(_2891 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].x)) * _2865.x) / cbSceneParam._m0[78u].x)) + _2565;
        _2650 = (exp2(_2891 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].y)) * _2865.y) / cbSceneParam._m0[78u].y)) + _2566;
        _2652 = (exp2(_2891 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].z)) * _2865.z) / cbSceneParam._m0[78u].z)) + _2567;
        _2654 = _2874 * _2568;
    }
    else
    {
        _2648 = _2565;
        _2650 = _2566;
        _2652 = _2567;
        _2654 = _2568;
    }
    float _2665 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2666 = _2665 == 3.0;
    float _2667 = log2(_2654);
    float _2671 = exp2(_2667 * cbSceneParam._m0[78u].x);
    float _2672 = exp2(_2667 * cbSceneParam._m0[78u].y);
    float _2673 = exp2(_2667 * cbSceneParam._m0[78u].z);
    float _2674 = _2671 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)));
    float _2675 = _2672 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)));
    float _2676 = _2673 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0)));
    float _2685 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2685 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.y = _2685 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.z = _2685 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.w = cbInstanceData._m0[_2540].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2503) * _2539) * _2671) * _2685;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2504) * _2539) * _2672) * _2685;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2505) * _2539) * _2673) * _2685;
    SV_Target_1.w = cbInstanceData._m0[_2540].w;
}


