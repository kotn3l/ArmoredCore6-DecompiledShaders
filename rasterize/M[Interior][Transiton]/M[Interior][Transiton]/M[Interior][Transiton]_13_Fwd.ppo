#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _337 = cbMtdParam._m0[27u].w + _278;
    float _338 = cbMtdParam._m0[28u].x + _279;
    float _339 = cbMtdParam._m0[28u].y + _280;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_207 * _199, _207 * _200, _207 * _201));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_221 * TANGENT.x, _221 * TANGENT.y, _221 * TANGENT.z));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - (_214 * NORMAL.x), (-0.0) - (_214 * NORMAL.y), (-0.0) - (_214 * NORMAL.z)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _362 = _359 * _355;
    float _363 = (_359 * _353) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _364 = (_359 * _354) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _365 = _363 * cbMtdParam._m0[24u].x;
    float _366 = _364 * cbMtdParam._m0[23u].w;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_365 > 0.0)
    {
        _374 = (1.0 - _367) / _365;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_365 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _365;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[17u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_388 * _365)) / _399) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _434 = cbMtdParam._m0[9u].x * _424.x;
    float _435 = cbMtdParam._m0[9u].y * _424.y;
    float _436 = cbMtdParam._m0[9u].z * _424.z;
    float _454 = _363 * cbMtdParam._m0[26u].z;
    float _455 = _364 * cbMtdParam._m0[26u].y;
    bool _456 = _454 > 0.0;
    float _461;
    if (_456)
    {
        _461 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _461 = frontier_phi_11_10_ladder;
    }
    bool _463 = _455 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _468 = frontier_phi_15_14_ladder;
    }
    float _471 = _384 ? (cbMtdParam._m0[19u].z / _362) : 5000.0;
    float _472 = isnan(_468) ? _461 : (isnan(_461) ? _468 : min(_461, _468));
    float _473 = isnan(_471) ? _472 : (isnan(_472) ? _471 : min(_472, _471));
    float _477 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _481 = ((_473 * _362) + _477) / _477;
    float _486 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _488 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _504 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_473 * _454)) / _481) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_473 * _455)) / _481) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516;
    if (_456)
    {
        _516 = (1.0 - _367) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _516 = frontier_phi_19_18_ladder;
    }
    float _522;
    if (_463)
    {
        _522 = (1.0 - _368) / _455;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_455 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _455;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _522 = frontier_phi_23_22_ladder;
    }
    float _524 = isnan(_522) ? _516 : (isnan(_516) ? _522 : min(_516, _522));
    float _525 = isnan(_471) ? _524 : (isnan(_524) ? _471 : min(_524, _471));
    float _532 = ((_525 * _362) + _477) / _477;
    vec4 _552 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_393 + (_525 * _454)) / _532) + 0.5) + _486) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_396 + (_525 * _455)) / _532) + 0.5) + _488) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _554 = _552.x;
    float _561 = (_554 * ((_504.x * cbMtdParam._m0[10u].x) - _434)) + _434;
    float _562 = (_554 * ((_504.y * cbMtdParam._m0[10u].y) - _435)) + _435;
    float _563 = (_554 * ((_504.z * cbMtdParam._m0[10u].z) - _436)) + _436;
    float _577 = _363 * cbMtdParam._m0[27u].x;
    float _578 = _364 * cbMtdParam._m0[26u].w;
    bool _579 = _577 > 0.0;
    float _584;
    if (_579)
    {
        _584 = (1.0 - _367) / _577;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_577 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _367) / _577;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _584 = frontier_phi_27_26_ladder;
    }
    bool _586 = _578 > 0.0;
    float _591;
    if (_586)
    {
        _591 = (1.0 - _368) / _578;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_578 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _368) / _578;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _591 = frontier_phi_31_30_ladder;
    }
    float _594 = _384 ? (cbMtdParam._m0[23u].x / _362) : 5000.0;
    float _595 = isnan(_591) ? _584 : (isnan(_584) ? _591 : min(_584, _591));
    float _596 = isnan(_594) ? _595 : (isnan(_595) ? _594 : min(_595, _594));
    float _600 = cbMtdParam._m0[23u].x * cbMtdParam._m0[17u].z;
    float _604 = ((_596 * _362) + _600) / _600;
    float _609 = cbMtdParam._m0[22u].w - cbMtdParam._m0[27u].y * trunc(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    float _611 = floor(cbMtdParam._m0[22u].w / cbMtdParam._m0[27u].y);
    vec4 _627 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * (((((_393 + (_596 * _577)) / _604) + 0.5) + _609) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * (((((_396 + (_596 * _578)) / _604) + 0.5) + _611) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[11u].w));
    float _639;
    if (_579)
    {
        _639 = (1.0 - _367) / _577;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_577 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _367) / _577;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _639 = frontier_phi_35_34_ladder;
    }
    float _645;
    if (_586)
    {
        _645 = (1.0 - _368) / _578;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_578 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _368) / _578;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _645 = frontier_phi_39_38_ladder;
    }
    float _647 = isnan(_645) ? _639 : (isnan(_639) ? _645 : min(_639, _645));
    float _648 = isnan(_594) ? _647 : (isnan(_647) ? _594 : min(_647, _594));
    float _655 = ((_648 * _362) + _600) / _600;
    vec4 _676 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * (((((_393 + (_648 * _577)) / _655) + 0.5) + _609) / cbMtdParam._m0[27u].y)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * (((((_396 + (_648 * _578)) / _655) + 0.5) + _611) / cbMtdParam._m0[27u].z)) + cbTextureTilingScale._m0[12u].w));
    float _678 = _676.x;
    float _685 = (_678 * ((_627.x * cbMtdParam._m0[13u].x) - _561)) + _561;
    float _686 = (_678 * ((_627.y * cbMtdParam._m0[13u].y) - _562)) + _562;
    float _687 = (_678 * ((_627.z * cbMtdParam._m0[13u].z) - _563)) + _563;
    vec4 _711 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _716 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _722 = ((_711.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _724 = (-0.0) - (cbMtdParam._m0[21u].x * ((_711.x * 0.5) + (-0.25)));
    float _725 = fract(_716);
    float _727 = fract(_716 + 0.5);
    vec4 _754 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_725 * _724) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_722 * _725) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _756 = _754.x;
    float _762 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_727 * _724) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_722 * _727) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _756) * abs((_725 * 2.0) + (-1.0))) + _756;
    float _768 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _772 = fract(abs(_768));
    float _781 = sin(cbMtdParam._m0[21u].z);
    float _782 = cos(cbMtdParam._m0[21u].z);
    float _783 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _784 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _814 = abs(cbMtdParam._m0[20u].w * (((_762 - (((_768 >= ((-0.0) - _768)) ? _772 : ((-0.0) - _772)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_784, (-0.0) - _781, _782 * _783) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_784, _782, _783 * _781) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _818 = (((_814 * cbMtdParam._m0[18u].y) - _762) * _814) + _762;
    float _3246 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _819 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    vec4 _831 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _846 = (cbMtdParam._m0[14u].x * _831.x) * cbMtdParam._m0[19u].x;
    float _847 = (cbMtdParam._m0[14u].y * _831.y) * cbMtdParam._m0[19u].x;
    float _848 = (cbMtdParam._m0[14u].z * _831.z) * cbMtdParam._m0[19u].x;
    float _858 = exp2(log2(_819) * cbMtdParam._m0[20u].x);
    float _3257 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3268 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3279 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _892 = _278 * _891;
    float _893 = _279 * _891;
    float _894 = _280 * _891;
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _914 = uint(roundEven(NORMAL.w)) * 13u;
    uint _915 = _914 + 9u;
    uint _916 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _922 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_916].x;
    float _923 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_916].y;
    float _924 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_916].z;
    float _3290 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _939 = _936.x * TEXCOORD_4;
    float _940 = (-0.0) - _892;
    float _941 = (-0.0) - _893;
    float _942 = (-0.0) - _894;
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = (cbModelParam._m0[37u].x * ((((fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1029 = (cbModelParam._m0[37u].y * ((((fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1030 = (((((fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(0.0), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3360 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(0.0), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3393 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(0.0), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3426 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1307 = (cbModelParam._m0[38u].x * ((((fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1308 = (cbModelParam._m0[38u].y * ((((fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1309 = (((((fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1344 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1311.x + (-0.5));
        float _1346 = _1344 * (_1311.y + (-0.5));
        float _1347 = _1344 * (_1311.z + (-0.5));
        float _1354 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1318.x + (-0.5));
        float _1356 = _1354 * (_1318.y + (-0.5));
        float _1357 = _1354 * (_1318.z + (-0.5));
        float _1364 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1325.x + (-0.5));
        float _1366 = _1364 * (_1325.y + (-0.5));
        float _1367 = _1364 * (_1325.z + (-0.5));
        float _1374 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1332.x + (-0.5));
        float _1376 = _1374 * (_1332.y + (-0.5));
        float _1377 = _1374 * (_1332.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(0.0), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3489 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1408 + 1.0))) + _1413) * _1378;
        float _1423 = _1346 * 0.5;
        float _1424 = _1356 * 0.5;
        float _1425 = _1366 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(0.0), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3522 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1450 + 1.0))) + _1455) * _1379;
        float _1465 = _1347 * 0.5;
        float _1466 = _1357 * 0.5;
        float _1467 = _1367 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(0.0), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3555 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1492 + 1.0))) + _1497) * _1380;
        _1514 = _1347;
        _1515 = _1346;
        _1516 = _1345;
        _1517 = _1357;
        _1518 = _1356;
        _1519 = _1355;
        _1520 = _1367;
        _1521 = _1366;
        _1522 = _1365;
        _1523 = _1380;
        _1524 = _1379;
        _1525 = _1378;
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1240;
        _1515 = _1240;
        _1516 = _1240;
        _1517 = _1240;
        _1518 = _1240;
        _1519 = _1240;
        _1520 = _1240;
        _1521 = _1240;
        _1522 = _1240;
        _1523 = _1240;
        _1524 = _1240;
        _1525 = _1240;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1252)) + _1252;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1253)) + _1253;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1254)) + _1254;
    float _1561 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1538));
    float _1582 = _892 * (-0.5);
    float _1583 = _893 * (-0.5);
    float _1584 = _894 * (-0.5);
    float _1585 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1588 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1591 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1625;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1598 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1602 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1606 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1613 = dot(vec4(cbModelParam._m0[39u]), vec4(_1582, _1583, _1584, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1636;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1627 = dot(vec4(cbModelParam._m0[40u]), vec4(_1582, _1583, _1584, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1640 = (_1636 * cbModelParam._m0[1u].x) + (_1625 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1711 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1714 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1740;
        if (_1708 > 0.0)
        {
            _1740 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1740 = frontier_phi_54_52_ladder;
        }
        float _2035;
        if (_1711 > 0.0)
        {
            _2035 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2035 = frontier_phi_63_59_ladder;
        }
        float _2371;
        if (_1714 > 0.0)
        {
            _2371 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2371 = frontier_phi_77_70_ladder;
        }
        float _2373 = isnan(_2035) ? _1740 : (isnan(_1740) ? _2035 : min(_1740, _2035));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1708) + _1697;
        float _2379 = (_2374 * _1711) + _1701;
        float _2380 = (_2374 * _1714) + _1705;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2380, cbModelParam._m0[9u].z, fma(_2379, cbModelParam._m0[9u].y, _2378 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2380, cbModelParam._m0[10u].z, fma(_2379, cbModelParam._m0[10u].y, _2378 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2380, cbModelParam._m0[11u].z, fma(_2379, cbModelParam._m0[11u].y, _2378 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_53_77_ladder = _2503.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2503.z * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_53_77_ladder;
        _1732 = frontier_phi_53_77_ladder_1;
        _1734 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1649);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1737 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1803 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1806 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2040;
        if (_1800 > 0.0)
        {
            _2040 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2040 = frontier_phi_65_61_ladder;
        }
        float _2397;
        if (_1803 > 0.0)
        {
            _2397 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2397 = frontier_phi_79_72_ladder;
        }
        float _2563;
        if (_1806 > 0.0)
        {
            _2563 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2563 = frontier_phi_93_88_ladder;
        }
        float _2565 = isnan(_2397) ? _2040 : (isnan(_2040) ? _2397 : min(_2040, _2397));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1800) + _1789;
        float _2571 = (_2566 * _1803) + _1793;
        float _2572 = (_2566 * _1806) + _1797;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_62_93_ladder = _2755.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2755.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2755.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_62_93_ladder_2;
        _1827 = frontier_phi_62_93_ladder_1;
        _1829 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1737);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = _939 * 0.01200000010430812835693359375;
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1730)) + _1730);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1732)) + _1732);
    float _1845 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1734)) + _1734);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_914 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1872 = _939 + (-1.0);
    float _1875 = (cbLight._m0[_1867].x * _1872) + 1.0;
    float _1876 = (cbLight._m0[_1867].y * _1872) + 1.0;
    uint _1877 = _1866 + 5u;
    float _1883 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1887 = _1866 + 4u;
    float _1893 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1897 = _1866 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1866].xyz), vec3(0.0));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(0.0));
    float _3691 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _3702 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1877].x * _1883) * _1918) + ((cbLight._m0[_1887].x * _1893) * _1916);
    float _1926 = ((_1883 * cbLight._m0[_1877].y) * _1918) + ((_1893 * cbLight._m0[_1887].y) * _1916);
    float _1927 = ((_1883 * cbLight._m0[_1877].z) * _1918) + ((_1893 * cbLight._m0[_1887].z) * _1916);
    uint _1928 = _1866 + 8u;
    float _1934 = cbLight._m0[_1866].x + _892;
    float _1935 = cbLight._m0[_1866].y + _893;
    float _1936 = cbLight._m0[_1866].z + _894;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1944 = dot(vec3(0.0), vec3(cbLight._m0[_1866].xyz));
    float _3713 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1948 = dot(vec3(0.0), vec3(_892, _893, _894));
    float _3724 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_1934 * _1940, _1935 * _1940, _1936 * _1940));
    float _3735 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1969 = (0.5 / ((_1947 + 9.9999999392252902907785028219223e-09) + _1951)) * _1947;
    float _3746 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.31831014156341552734375;
    uint _1982 = _1866 + 9u;
    float _1988 = cbLight._m0[_1897].x + _892;
    float _1989 = cbLight._m0[_1897].y + _893;
    float _1990 = cbLight._m0[_1897].z + _894;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1998 = dot(vec3(0.0), vec3(cbLight._m0[_1897].xyz));
    float _3757 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_1988 * _1994, _1989 * _1994, _1990 * _1994));
    float _3768 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2011 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = (0.5 / ((_2001 + 9.9999999392252902907785028219223e-09) + _1951)) * _2001;
    float _3779 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.31831014156341552734375;
    float _2027 = (((_2011 * cbLight._m0[_1982].x) * _2017) * _1883) + (((_1963 * cbLight._m0[_1928].x) * _1971) * _1893);
    float _2028 = (((_2011 * cbLight._m0[_1982].y) * _2017) * _1883) + (((_1963 * cbLight._m0[_1928].y) * _1971) * _1893);
    float _2029 = (((_2011 * cbLight._m0[_1982].z) * _2017) * _1883) + (((_1963 * cbLight._m0[_1928].z) * _1971) * _1893);
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    if (_1864.y == 0u)
    {
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2084;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2084;
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2084;
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2100)));
        float _2121 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2131 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2132 = _2131.x;
        uint _2133 = _2099.z;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        if (((((1u << ((_2133 >> 4u) & 15u)) + 4294967295u) & _2132) == 0u) || ((_2133 & 240u) == 0u))
        {
            _2249 = 0.0;
            _2251 = 0.0;
            _2253 = 0.0;
            _2255 = 0.0;
            _2257 = 0.0;
            _2259 = 0.0;
        }
        else
        {
            float _2250;
            float _2252;
            float _2254;
            float _2256;
            float _2258;
            float _2260;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            uint _2437 = 0u;
            uint _2446;
            bool _2447;
            for (;;)
            {
                _2446 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                _2447 = _2446 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2447)
                {
                    frontier_phi_90_pred = _2436;
                    frontier_phi_90_pred_1 = _2431;
                    frontier_phi_90_pred_2 = _2432;
                    frontier_phi_90_pred_3 = _2433;
                    frontier_phi_90_pred_4 = _2434;
                    frontier_phi_90_pred_5 = _2435;
                }
                else
                {
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    uint _2612;
                    _2606 = _2431;
                    _2607 = _2432;
                    _2608 = _2433;
                    _2609 = _2434;
                    _2610 = _2435;
                    _2611 = _2436;
                    _2612 = _2446;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    for (;;)
                    {
                        uint _2616 = uint(findLSB(_2612)) + (_2437 << 5u);
                        uint _2613 = (_2612 + 4294967295u) & _2612;
                        uint _2618 = _2616 * 48u;
                        vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 3u)).x));
                        uint _2638 = (_2616 * 48u) + 4u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 3u)).x));
                        uint _2657 = (_2616 * 48u) + 8u;
                        vec3 _2668 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x));
                        float _2672 = _2632.x - _2085;
                        float _2673 = _2632.y - _2086;
                        float _2674 = _2632.z - _2087;
                        float _2675 = dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674));
                        float _2678 = inversesqrt(_2675);
                        float _2687 = 1.0 - (_2675 * _2632.w);
                        float _3800 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                        float _2688 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                        float _2689 = sqrt(_2675) * _2651.w;
                        float _2692 = 1.39999997615814208984375 / (_2689 + 1.39999997615814208984375);
                        float _2693 = _2692 * _2692;
                        float _2696 = ((1.0 - _2693) * dot(vec3(0.0), vec3(_2678 * _2672, _2678 * _2673, _2678 * _2674))) + _2693;
                        float _2699 = _2689 * _2689;
                        float _2703 = ((isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))) * _2688) / ((_2699 * 0.699999988079071044921875) + 1.0);
                        float _2707 = (-0.0) - _2085;
                        float _2708 = (-0.0) - _2086;
                        float _2709 = (-0.0) - _2087;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2717 = dot(vec3(0.0), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709));
                        float _3816 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _3827 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2721 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2725 = (0.5 / (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) + 9.9999999392252902907785028219223e-09) + _2721)) * _2721;
                        float _3838 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2734 = (((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 3.1415927410125732421875) / ((_2699 * 2.1991131305694580078125) + 3.141590118408203125)) * _2688;
                        _2515 = (_2703 * _2651.x) + _2609;
                        _2516 = (_2703 * _2651.y) + _2610;
                        _2517 = (_2703 * _2651.z) + _2611;
                        _2512 = (_2734 * _2668.x) + _2606;
                        _2513 = (_2734 * _2668.y) + _2607;
                        _2514 = (_2734 * _2668.z) + _2608;
                        if (_2613 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2606 = _2512;
                            _2607 = _2513;
                            _2608 = _2514;
                            _2609 = _2515;
                            _2610 = _2516;
                            _2611 = _2517;
                            _2612 = _2613;
                        }
                    }
                    frontier_phi_90_pred = _2517;
                    frontier_phi_90_pred_1 = _2512;
                    frontier_phi_90_pred_2 = _2513;
                    frontier_phi_90_pred_3 = _2514;
                    frontier_phi_90_pred_4 = _2515;
                    frontier_phi_90_pred_5 = _2516;
                }
                _2260 = frontier_phi_90_pred;
                _2250 = frontier_phi_90_pred_1;
                _2252 = frontier_phi_90_pred_2;
                _2254 = frontier_phi_90_pred_3;
                _2256 = frontier_phi_90_pred_4;
                _2258 = frontier_phi_90_pred_5;
                uint _2438 = _2437 + 1u;
                if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2431 = _2250;
                    _2432 = _2252;
                    _2433 = _2254;
                    _2434 = _2256;
                    _2435 = _2258;
                    _2436 = _2260;
                    _2437 = _2438;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2249 = _2250;
            _2251 = _2252;
            _2253 = _2254;
            _2255 = _2256;
            _2257 = _2258;
            _2259 = _2260;
        }
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.z;
        uint _2266 = (_2264 >> 8u) & 15u;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        if (((4294967295u << _2266) & _2132) == 0u)
        {
            _2402 = _2249;
            _2404 = _2251;
            _2406 = _2253;
            _2408 = _2255;
            _2410 = _2257;
            _2412 = _2259;
        }
        else
        {
            float _2427 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2266 < ((_2264 >> 12u) & 15u))
            {
                float _2403;
                float _2405;
                float _2407;
                float _2409;
                float _2411;
                float _2413;
                float _2589 = _2249;
                float _2590 = _2251;
                float _2591 = _2253;
                float _2592 = _2255;
                float _2593 = _2257;
                float _2594 = _2259;
                uint _2595 = _2266;
                uint _2604;
                bool _2605;
                for (;;)
                {
                    _2604 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                    _2605 = _2604 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2605)
                    {
                        frontier_phi_99_pred = _2592;
                        frontier_phi_99_pred_1 = _2591;
                        frontier_phi_99_pred_2 = _2590;
                        frontier_phi_99_pred_3 = _2589;
                        frontier_phi_99_pred_4 = _2594;
                        frontier_phi_99_pred_5 = _2593;
                    }
                    else
                    {
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _2773 = _2589;
                        float _2774 = _2590;
                        float _2775 = _2591;
                        float _2776 = _2592;
                        float _2777 = _2593;
                        float _2778 = _2594;
                        uint _2779 = _2604;
                        uint _2780;
                        vec4 _2805;
                        float _2806;
                        vec4 _2821;
                        vec3 _2833;
                        vec4 _2849;
                        vec4 _2864;
                        float _2910;
                        bool _2911;
                        for (;;)
                        {
                            uint _2790 = ((_2595 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2779));
                            _2780 = (_2779 + 4294967295u) & _2779;
                            uint _2792 = _2790 * 40u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            _2806 = _2805.w;
                            uint _2808 = (_2790 * 40u) + 4u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            uint _2823 = (_2790 * 40u) + 8u;
                            _2833 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x));
                            uint _2836 = (_2790 * 40u) + 16u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2790 * 40u) + 20u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2866 = (_2790 * 40u) + 24u;
                            vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2885 = (_2790 * 40u) + 28u;
                            vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2910 = fma(_2087, _2898.z, fma(_2086, _2898.y, _2898.x * _2085)) + _2898.w;
                            _2911 = !((fma(_2087, _2879.z, fma(_2086, _2879.y, _2879.x * _2085)) + _2879.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2911)
                            {
                                float _2938 = _2805.x - _2085;
                                float _2939 = _2805.y - _2086;
                                float _2940 = _2805.z - _2087;
                                float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                                float _2944 = inversesqrt(_2941);
                                float _2945 = _2944 * _2938;
                                float _2946 = _2944 * _2939;
                                float _2947 = _2944 * _2940;
                                float _2951 = 1.0 - (_2941 / (_2806 * _2806));
                                float _3849 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2952 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
                                float _2956 = sqrt(_2941) * _2821.w;
                                float _2958 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                                float _2959 = _2958 * _2958;
                                float _2960 = 1.0 - _2959;
                                float _2962 = (_2960 * dot(vec3(_2945, _2946, _2947), vec3(0.0))) + _2959;
                                float _2965 = _2956 * _2956;
                                float _2969 = (fma(_2087, _2849.z, fma(_2086, _2849.y, _2849.x * _2085)) + _2849.w) / _2910;
                                float _2970 = (fma(_2087, _2864.z, fma(_2086, _2864.y, _2864.x * _2085)) + _2864.w) / _2910;
                                float _2974 = 1.0 - dot(vec2(_2969, _2970), vec2(_2969, _2970));
                                float _3865 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                                float _2976 = _2975 * (((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2952) / ((_2965 * 0.699999988079071044921875) + 1.0));
                                float _2986 = dot(vec3(0.0), vec3((-0.0) - (_2085 * _2427), (-0.0) - (_2086 * _2427), (-0.0) - (_2087 * _2427)));
                                float _3876 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2994 = (_2960 * dot(vec3(0.0), vec3(_2945, _2946, _2947))) + _2959;
                                float _3887 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2999 = (0.5 / (((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) + 9.9999999392252902907785028219223e-09) + _2995)) * _2995;
                                float _3898 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                                float _3006 = (_2975 * _2952) * (((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 3.1415927410125732421875) / ((_2965 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2976 * _2821.z;
                                frontier_phi_105_pred_1 = _3006 * _2833.x;
                                frontier_phi_105_pred_2 = _3006 * _2833.y;
                                frontier_phi_105_pred_3 = _3006 * _2833.z;
                                frontier_phi_105_pred_4 = _2976 * _2821.x;
                                frontier_phi_105_pred_5 = _2976 * _2821.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3015 = frontier_phi_105_pred;
                            _3010 = frontier_phi_105_pred_1;
                            _3011 = frontier_phi_105_pred_2;
                            _3012 = frontier_phi_105_pred_3;
                            _3013 = frontier_phi_105_pred_4;
                            _3014 = frontier_phi_105_pred_5;
                            _2763 = _3013 + _2776;
                            _2764 = _3014 + _2777;
                            _2765 = _3015 + _2778;
                            _2760 = _3010 + _2773;
                            _2761 = _3011 + _2774;
                            _2762 = _3012 + _2775;
                            if (_2780 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2780;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2763;
                        frontier_phi_99_pred_1 = _2762;
                        frontier_phi_99_pred_2 = _2761;
                        frontier_phi_99_pred_3 = _2760;
                        frontier_phi_99_pred_4 = _2765;
                        frontier_phi_99_pred_5 = _2764;
                    }
                    _2409 = frontier_phi_99_pred;
                    _2407 = frontier_phi_99_pred_1;
                    _2405 = frontier_phi_99_pred_2;
                    _2403 = frontier_phi_99_pred_3;
                    _2413 = frontier_phi_99_pred_4;
                    _2411 = frontier_phi_99_pred_5;
                    uint _2596 = _2595 + 1u;
                    if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2589 = _2403;
                        _2590 = _2405;
                        _2591 = _2407;
                        _2592 = _2409;
                        _2593 = _2411;
                        _2594 = _2413;
                        _2595 = _2596;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2413;
                frontier_phi_81_82_ladder_1 = _2409;
                frontier_phi_81_82_ladder_2 = _2407;
                frontier_phi_81_82_ladder_3 = _2405;
                frontier_phi_81_82_ladder_4 = _2403;
                frontier_phi_81_82_ladder_5 = _2411;
            }
            else
            {
                frontier_phi_81_82_ladder = _2259;
                frontier_phi_81_82_ladder_1 = _2255;
                frontier_phi_81_82_ladder_2 = _2253;
                frontier_phi_81_82_ladder_3 = _2251;
                frontier_phi_81_82_ladder_4 = _2249;
                frontier_phi_81_82_ladder_5 = _2257;
            }
            _2402 = frontier_phi_81_82_ladder_4;
            _2404 = frontier_phi_81_82_ladder_3;
            _2406 = frontier_phi_81_82_ladder_2;
            _2408 = frontier_phi_81_82_ladder_1;
            _2410 = frontier_phi_81_82_ladder_5;
            _2412 = frontier_phi_81_82_ladder;
        }
        float _2417 = isnan(1.0) ? _939 : (isnan(_939) ? 1.0 : min(_939, 1.0));
        _2145 = (_2417 * _2408) + _1925;
        _2147 = (_2417 * _2410) + _1926;
        _2149 = (_2417 * _2412) + _1927;
        _2151 = ((_2402 * 0.039999999105930328369140625) * _2417) + _2027;
        _2153 = ((_2404 * 0.039999999105930328369140625) * _2417) + _2028;
        _2155 = ((_2406 * 0.039999999105930328369140625) * _2417) + _2029;
    }
    else
    {
        _2145 = _1925;
        _2147 = _1926;
        _2149 = _1927;
        _2151 = _2027;
        _2153 = _2028;
        _2155 = _2029;
    }
    uint _2161 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _2167 = ((_858 * (_846 - (_846 * _819))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2161].x;
    float _2168 = ((_858 * (_847 - (_847 * _819))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2161].y;
    float _2169 = ((_858 * (_848 - (_848 * _819))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2161].z;
    float _3914 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _3925 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _3936 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2186 = (((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_2145 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _939))) + ((_2151 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + _2167;
    float _2188 = (_2168 + ((_2153 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2147 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _939)));
    float _2190 = (_2169 + ((_2155 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1640)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2149 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _939)));
    float _3962 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2203 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    uint _2204 = _914 + 6u;
    float _2212 = _900 / cbSceneParam._m0[86u].x;
    float _2213 = _901 / cbSceneParam._m0[86u].y;
    vec4 _2227 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2212, _2213, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2229 = _2227.x;
    float _2230 = _2227.y;
    float _2231 = _2227.z;
    float _2232 = _2227.w;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _2274 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _2275 = _2274 / _887;
        float _2286 = _2275 * _278;
        float _2287 = _279 * _2275;
        float _2288 = (-0.0) - _2287;
        float _2289 = _2275 * _280;
        float _2291 = (cbSceneParam._m0[77u].w * _2288) / _2274;
        float _2292 = _2291 + cbSceneParam._m0[79u].w;
        float _2293 = cbSceneParam._m0[79u].w - _2287;
        float _2299 = sqrt(((_2286 * _2286) + (_2287 * _2287)) + (_2289 * _2289));
        float _2302 = (1.0 - (cbSceneParam._m0[77u].w / _2274)) * _2299;
        float _2308 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2310 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2525;
        if (abs((_2288 - _2291) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2525 = ((((_2292 > 0.0) ? exp2(_2308 * _2292) : (2.0 - exp2(_2310 * _2292))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2302;
        }
        else
        {
            float _2460 = 1.0 / cbSceneParam._m0[80u].x;
            float _2461 = isnan(_2293) ? _2292 : (isnan(_2292) ? _2293 : max(_2292, _2293));
            float _2462 = isnan(_2293) ? _2292 : (isnan(_2292) ? _2293 : min(_2292, _2293));
            float _2471 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : min(_2461, 0.0));
            float _2472 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : min(_2462, 0.0));
            _2525 = ((abs(_2299 / _2288) * cbSceneParam._m0[80u].y) * ((((_2471 - _2472) * 2.0) - ((exp2(_2308 * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)))) - exp2(_2308 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0))))) * _2460)) - ((exp2(_2310 * _2471) - exp2(_2310 * _2472)) * _2460))) + (_2302 * cbSceneParam._m0[80u].z);
        }
        vec4 _2527 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2212, _2213, 1.0), 0.0);
        float _2536 = exp2((_2525 * (-1.44269502162933349609375)) * (1.0 - _2527.w));
        float _2537 = log2(_2536);
        float _2553 = log2(_2232);
        _2312 = (exp2(_2553 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].x)) * _2527.x) / cbSceneParam._m0[78u].x)) + _2229;
        _2314 = (exp2(_2553 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].y)) * _2527.y) / cbSceneParam._m0[78u].y)) + _2230;
        _2316 = (exp2(_2553 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].z)) * _2527.z) / cbSceneParam._m0[78u].z)) + _2231;
        _2318 = _2536 * _2232;
    }
    else
    {
        _2312 = _2229;
        _2314 = _2230;
        _2316 = _2231;
        _2318 = _2232;
    }
    float _2329 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2330 = _2329 == 3.0;
    float _2332 = log2(_2318);
    float _2336 = exp2(_2332 * cbSceneParam._m0[78u].x);
    float _2337 = exp2(_2332 * cbSceneParam._m0[78u].y);
    float _2338 = exp2(_2332 * cbSceneParam._m0[78u].z);
    float _2339 = _2336 * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)));
    float _2340 = _2337 * (isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0)));
    float _2341 = _2338 * (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0)));
    float _2350 = (_2329 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2350 * (_2330 ? _2339 : (_2339 + (cbSceneParam._m0[72u].w * _2312)));
    SV_Target.y = _2350 * (_2330 ? _2340 : (_2340 + (cbSceneParam._m0[72u].w * _2314)));
    SV_Target.z = _2350 * (_2330 ? _2341 : (_2341 + (cbSceneParam._m0[72u].w * _2316)));
    SV_Target.w = cbInstanceData._m0[_2204].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2167) * _2203) * _2336) * _2350;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2168) * _2203) * _2337) * _2350;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2169) * _2203) * _2338) * _2350;
    SV_Target_1.w = cbInstanceData._m0[_2204].w;
}


