#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _989;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = cbMtdParam._m0[27u].w + _271;
    float _331 = cbMtdParam._m0[28u].x + _272;
    float _332 = cbMtdParam._m0[28u].y + _273;
    float _349 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_203 * _195, _203 * _196, _203 * _197));
    float _350 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_214 * TANGENT.x, _214 * TANGENT.y, _214 * TANGENT.z));
    float _351 = (-0.0) - dot(vec3(_330, _331, _332), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _358 = _355 * _351;
    float _361 = ((_355 * _349) + (((_292.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w)) * cbMtdParam._m0[24u].x;
    float _362 = ((_355 * _350) + (((_292.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x)) * cbMtdParam._m0[23u].w;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_361 > 0.0)
    {
        _370 = (1.0 - _363) / _361;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_361 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _361;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    float _382 = (_358 > 0.0) ? (cbMtdParam._m0[17u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_363 + (-0.5)) + (_384 * _361)) / _395) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_364 + (-0.5)) + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _430 = cbMtdParam._m0[9u].x * _420.x;
    float _431 = cbMtdParam._m0[9u].y * _420.y;
    float _432 = cbMtdParam._m0[9u].z * _420.z;
    vec4 _456 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _461 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _467 = ((_456.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _469 = (-0.0) - (cbMtdParam._m0[21u].x * ((_456.x * 0.5) + (-0.25)));
    float _470 = fract(_461);
    float _472 = fract(_461 + 0.5);
    vec4 _499 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_470 * _469) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_467 * _470) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _501 = _499.x;
    float _507 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_472 * _469) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_467 * _472) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _501) * abs((_470 * 2.0) + (-1.0))) + _501;
    float _516 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _520 = fract(abs(_516));
    float _529 = sin(cbMtdParam._m0[21u].z);
    float _530 = cos(cbMtdParam._m0[21u].z);
    float _531 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _532 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _562 = abs(cbMtdParam._m0[20u].w * (((_507 - (((_516 >= ((-0.0) - _516)) ? _520 : ((-0.0) - _520)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_532, (-0.0) - _529, _530 * _531) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_532, _530, _531 * _529) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _566 = (((_562 * cbMtdParam._m0[18u].y) - _507) * _562) + _507;
    float _3193 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    vec4 _579 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _594 = (cbMtdParam._m0[14u].x * _579.x) * cbMtdParam._m0[19u].x;
    float _595 = (cbMtdParam._m0[14u].y * _579.y) * cbMtdParam._m0[19u].x;
    float _596 = (cbMtdParam._m0[14u].z * _579.z) * cbMtdParam._m0[19u].x;
    float _606 = exp2(log2(_567) * cbMtdParam._m0[20u].x);
    float _3204 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3215 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3226 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _640 = _271 * _639;
    float _641 = _272 * _639;
    float _642 = _273 * _639;
    float _648 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _649 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _662 = uint(roundEven(NORMAL.w)) * 13u;
    uint _664 = _662 + 9u;
    uint _665 = _664 + uint(cbMatDynParam._m0[0u].w);
    float _671 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_665].x;
    float _672 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_665].y;
    float _673 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_665].z;
    float _3237 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _3248 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _648, cbSceneParam._m0[86u].y * _649));
    float _688 = _685.x * TEXCOORD_4;
    float _689 = (-0.0) - _640;
    float _690 = (-0.0) - _641;
    float _691 = (-0.0) - _642;
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _988;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = (cbModelParam._m0[37u].x * ((((fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _778 = (cbModelParam._m0[37u].y * ((((fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _779 = (((((fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _778, _779), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _778, _779), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _778, _779), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _778, _779), 0.0);
        float _816 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_782.x + (-0.5));
        float _818 = _816 * (_782.y + (-0.5));
        float _819 = _816 * (_782.z + (-0.5));
        float _826 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_789.x + (-0.5));
        float _828 = _826 * (_789.y + (-0.5));
        float _829 = _826 * (_789.z + (-0.5));
        float _836 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_796.x + (-0.5));
        float _838 = _836 * (_796.y + (-0.5));
        float _839 = _836 * (_796.z + (-0.5));
        float _846 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_803.x + (-0.5));
        float _848 = _846 * (_803.y + (-0.5));
        float _849 = _846 * (_803.z + (-0.5));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = _817 * 0.5;
        float _854 = _827 * 0.5;
        float _855 = _837 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _870 = (dot(vec3(0.0), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _880 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3307 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_882 + 1.0))) + _887) * _850;
        float _897 = _818 * 0.5;
        float _898 = _828 * 0.5;
        float _899 = _838 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(0.0), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3340 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_924 + 1.0))) + _929) * _851;
        float _939 = _819 * 0.5;
        float _940 = _829 * 0.5;
        float _941 = _839 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(0.0), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3373 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_966 + 1.0))) + _971) * _852;
        _988 = _819;
        _990 = _818;
        _991 = _817;
        _992 = _829;
        _993 = _828;
        _994 = _827;
        _995 = _839;
        _996 = _838;
        _997 = _837;
        _998 = _852;
        _999 = _851;
        _1000 = _850;
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
    }
    else
    {
        _988 = _989;
        _990 = _989;
        _991 = _989;
        _992 = _989;
        _993 = _989;
        _994 = _989;
        _995 = _989;
        _996 = _989;
        _997 = _989;
        _998 = _989;
        _999 = _989;
        _1000 = _989;
        _1001 = 0.0;
        _1002 = 0.0;
        _1003 = 0.0;
    }
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1056 = (cbModelParam._m0[38u].x * ((((fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1057 = (cbModelParam._m0[38u].y * ((((fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1058 = (((((fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1093 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1060.x + (-0.5));
        float _1095 = _1093 * (_1060.y + (-0.5));
        float _1096 = _1093 * (_1060.z + (-0.5));
        float _1103 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1067.x + (-0.5));
        float _1105 = _1103 * (_1067.y + (-0.5));
        float _1106 = _1103 * (_1067.z + (-0.5));
        float _1113 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1074.x + (-0.5));
        float _1115 = _1113 * (_1074.y + (-0.5));
        float _1116 = _1113 * (_1074.z + (-0.5));
        float _1123 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1081.x + (-0.5));
        float _1125 = _1123 * (_1081.y + (-0.5));
        float _1126 = _1123 * (_1081.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(0.0), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3436 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1157 + 1.0))) + _1162) * _1127;
        float _1172 = _1095 * 0.5;
        float _1173 = _1105 * 0.5;
        float _1174 = _1115 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(0.0), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3469 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1199 + 1.0))) + _1204) * _1128;
        float _1214 = _1096 * 0.5;
        float _1215 = _1106 * 0.5;
        float _1216 = _1116 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(0.0), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3502 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1241 + 1.0))) + _1246) * _1129;
        _1263 = _1096;
        _1264 = _1095;
        _1265 = _1094;
        _1266 = _1106;
        _1267 = _1105;
        _1268 = _1104;
        _1269 = _1116;
        _1270 = _1115;
        _1271 = _1114;
        _1272 = _1129;
        _1273 = _1128;
        _1274 = _1127;
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _989;
        _1264 = _989;
        _1265 = _989;
        _1266 = _989;
        _1267 = _989;
        _1268 = _989;
        _1269 = _989;
        _1270 = _989;
        _1271 = _989;
        _1272 = _989;
        _1273 = _989;
        _1274 = _989;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _1001)) + _1001;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _1002)) + _1002;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _1003)) + _1003;
    float _1310 = fma(_1289, cbSceneParam._m0[89u].z, fma(_1288, cbSceneParam._m0[89u].y, _1287 * cbSceneParam._m0[89u].x));
    float _1313 = fma(_1289, cbSceneParam._m0[90u].z, fma(_1288, cbSceneParam._m0[90u].y, _1287 * cbSceneParam._m0[90u].x));
    float _1316 = fma(_1289, cbSceneParam._m0[91u].z, fma(_1288, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1287));
    float _1331 = _640 * (-0.5);
    float _1332 = _641 * (-0.5);
    float _1333 = _642 * (-0.5);
    float _1334 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1337 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1340 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1374;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1347 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_988, _992, _995, _998));
        float _1351 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_990, _993, _996, _999));
        float _1355 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_991, _994, _997, _1000));
        float _1362 = dot(vec4(cbModelParam._m0[39u]), vec4(_1331, _1332, _1333, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1385;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1376 = dot(vec4(cbModelParam._m0[40u]), vec4(_1331, _1332, _1333, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1389 = (_1385 * cbModelParam._m0[1u].x) + (_1374 * (1.0 - cbModelParam._m0[1u].x));
    float _1398 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1446 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1450 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1454 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1457 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1460 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1463 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1489;
        if (_1457 > 0.0)
        {
            _1489 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1489 = frontier_phi_22_20_ladder;
        }
        float _1659;
        if (_1460 > 0.0)
        {
            _1659 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1659 = frontier_phi_31_27_ladder;
        }
        float _2053;
        if (_1463 > 0.0)
        {
            _2053 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2053 = frontier_phi_43_38_ladder;
        }
        float _2055 = isnan(_1659) ? _1489 : (isnan(_1489) ? _1659 : min(_1489, _1659));
        float _2056 = isnan(_2053) ? _2055 : (isnan(_2055) ? _2053 : min(_2055, _2053));
        float _2060 = (_2056 * _1457) + _1446;
        float _2061 = (_2056 * _1460) + _1450;
        float _2062 = (_2056 * _1463) + _1454;
        float _2063 = _2056 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2063;
        float _2067 = _2063 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 > _2067) || ((_2061 < _2065) || ((_2060 < _2065) || (_2060 > _2067))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2062, cbModelParam._m0[9u].z, fma(_2061, cbModelParam._m0[9u].y, _2060 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2062, cbModelParam._m0[10u].z, fma(_2061, cbModelParam._m0[10u].y, _2060 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2062, cbModelParam._m0[11u].z, fma(_2061, cbModelParam._m0[11u].y, _2060 * cbModelParam._m0[11u].x))), _1398);
            frontier_phi_21_43_ladder = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2323.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2323.z * cbModelParam._m0[1u].y;
        }
        _1479 = frontier_phi_21_43_ladder_1;
        _1481 = frontier_phi_21_43_ladder;
        _1483 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1398);
        _1479 = _1467.x * cbModelParam._m0[1u].y;
        _1481 = _1467.y * cbModelParam._m0[1u].y;
        _1483 = _1467.z * cbModelParam._m0[1u].y;
    }
    float _1486 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1538 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1542 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1546 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1549 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1552 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1555 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1664;
        if (_1549 > 0.0)
        {
            _1664 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1664 = frontier_phi_33_29_ladder;
        }
        float _2080;
        if (_1552 > 0.0)
        {
            _2080 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2080 = frontier_phi_45_40_ladder;
        }
        float _2453;
        if (_1555 > 0.0)
        {
            _2453 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2453 = frontier_phi_57_52_ladder;
        }
        float _2455 = isnan(_2080) ? _1664 : (isnan(_1664) ? _2080 : min(_1664, _2080));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1549) + _1538;
        float _2461 = (_2456 * _1552) + _1542;
        float _2462 = (_2456 * _1555) + _1546;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1486);
            frontier_phi_30_57_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1574 = frontier_phi_30_57_ladder_2;
        _1576 = frontier_phi_30_57_ladder_1;
        _1578 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1486);
        _1574 = _1558.x * cbModelParam._m0[1u].z;
        _1576 = _1558.y * cbModelParam._m0[1u].z;
        _1578 = _1558.z * cbModelParam._m0[1u].z;
    }
    float _1590 = _688 * 0.01200000010430812835693359375;
    float _1592 = _1590 * ((cbModelParam._m0[1u].w * (_1574 - _1479)) + _1479);
    float _1593 = _1590 * ((cbModelParam._m0[1u].w * (_1576 - _1481)) + _1481);
    float _1594 = _1590 * ((cbModelParam._m0[1u].w * (_1578 - _1483)) + _1483);
    float _1597 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, _1592 * cbSceneParam._m0[91u].x));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1651 = _1638 / _1650;
    float _1652 = _1642 / _1650;
    float _1653 = _1646 / _1650;
    float _1801;
    float _1802;
    float _1803;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1680 = ((uint(_1653 > cbSceneParam._m0[59u].y) + uint(_1653 > cbSceneParam._m0[59u].x)) + uint(_1653 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1681 = _1680 + 43u;
        uint _1689 = _1680 + 44u;
        uint _1697 = _1680 + 45u;
        uint _1705 = _1680 + 46u;
        float _1716 = fma(_1650, cbSceneParam._m0[_1681].w, fma(_1646, cbSceneParam._m0[_1681].z, fma(_1642, cbSceneParam._m0[_1681].y, _1638 * cbSceneParam._m0[_1681].x)));
        float _1720 = fma(_1650, cbSceneParam._m0[_1689].w, fma(_1646, cbSceneParam._m0[_1689].z, fma(_1642, cbSceneParam._m0[_1689].y, _1638 * cbSceneParam._m0[_1689].x)));
        float _1728 = fma(_1650, cbSceneParam._m0[_1705].w, fma(_1646, cbSceneParam._m0[_1705].z, fma(_1642, cbSceneParam._m0[_1705].y, _1638 * cbSceneParam._m0[_1705].x)));
        float _1733 = cbSceneParam._m0[33u].z * _1728;
        float _1735 = cbSceneParam._m0[33u].w * _1728;
        float _1738 = fma(_1650, cbSceneParam._m0[_1697].w, fma(_1646, cbSceneParam._m0[_1697].z, fma(_1642, cbSceneParam._m0[_1697].y, _1638 * cbSceneParam._m0[_1697].x))) / _1728;
        float _1786 = (cbSceneParam._m0[33u].x - sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653))) * cbSceneParam._m0[33u].y;
        float _3628 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1794 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1733 + _1716) / _1728, (_1735 + _1720) / _1728), _1738), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1735 + _1716) / _1728, (_1720 - _1733) / _1728), _1738), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1716 - _1733) / _1728, (_1720 - _1735) / _1728), _1738), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1716 - _1735) / _1728, (_1733 + _1720) / _1728), _1738), 0.0)).x), vec4(0.25)));
        _1801 = 1.0 - (_1794 * cbSceneParam._m0[34u].x);
        _1802 = 1.0 - (_1794 * cbSceneParam._m0[34u].y);
        _1803 = 1.0 - (_1794 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1801 = 1.0;
        _1802 = 1.0;
        _1803 = 1.0;
    }
    float _1867;
    float _1869;
    float _1871;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1855 = fma(_1650, cbSceneParam._m0[63u].w, fma(_1646, cbSceneParam._m0[63u].z, fma(_1642, cbSceneParam._m0[63u].y, _1638 * cbSceneParam._m0[63u].x)));
        float _1856 = fma(_1650, cbSceneParam._m0[60u].w, fma(_1646, cbSceneParam._m0[60u].z, fma(_1642, cbSceneParam._m0[60u].y, _1638 * cbSceneParam._m0[60u].x))) / _1855;
        float _1857 = fma(_1650, cbSceneParam._m0[61u].w, fma(_1646, cbSceneParam._m0[61u].z, fma(_1642, cbSceneParam._m0[61u].y, _1638 * cbSceneParam._m0[61u].x))) / _1855;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1856 >= cbSceneParam._m0[64u].x) && (_1857 >= cbSceneParam._m0[64u].y)) && (_1856 <= cbSceneParam._m0[64u].z)) && (_1857 <= cbSceneParam._m0[64u].w))
        {
            float _2093 = fma(_1650, cbSceneParam._m0[62u].w, fma(_1646, cbSceneParam._m0[62u].z, fma(_1642, cbSceneParam._m0[62u].y, _1638 * cbSceneParam._m0[62u].x))) / _1855;
            float _2097 = isnan(cbSceneParam._m0[41u].w) ? _2093 : (isnan(_2093) ? cbSceneParam._m0[41u].w : max(_2093, cbSceneParam._m0[41u].w));
            float _2140 = (cbSceneParam._m0[33u].x - sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653))) * cbSceneParam._m0[33u].y;
            float _3644 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
            float _2147 = (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1856, cbSceneParam._m0[33u].w + _1857), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1856, _1857 - cbSceneParam._m0[33u].z), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1856 - cbSceneParam._m0[33u].z, _1857 - cbSceneParam._m0[33u].w), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1856 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1857), _2097), 0.0)).x), vec4(0.25)));
            float _2151 = 1.0 - (_2147 * cbSceneParam._m0[34u].x);
            float _2152 = 1.0 - (_2147 * cbSceneParam._m0[34u].y);
            float _2153 = 1.0 - (_2147 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2152) ? _1802 : (isnan(_1802) ? _2152 : min(_1802, _2152));
            frontier_phi_42_41_ladder_1 = isnan(_2151) ? _1801 : (isnan(_1801) ? _2151 : min(_1801, _2151));
            frontier_phi_42_41_ladder_2 = isnan(_2153) ? _1803 : (isnan(_1803) ? _2153 : min(_1803, _2153));
        }
        else
        {
            frontier_phi_42_41_ladder = _1802;
            frontier_phi_42_41_ladder_1 = _1801;
            frontier_phi_42_41_ladder_2 = _1803;
        }
        _1867 = frontier_phi_42_41_ladder_1;
        _1869 = frontier_phi_42_41_ladder;
        _1871 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1867 = _1801;
        _1869 = _1802;
        _1871 = _1803;
    }
    uvec4 _1876 = floatBitsToUint(cbInstanceData._m0[_662 + 5u]);
    uint _1878 = _1876.x * 14u;
    uint _1879 = _1878 + 13u;
    float _1884 = _688 + (-1.0);
    float _1887 = (cbLight._m0[_1879].x * _1884) + 1.0;
    float _1888 = (cbLight._m0[_1879].y * _1884) + 1.0;
    uint _1889 = _1878 + 5u;
    float _1895 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1899 = _1878 + 4u;
    float _1908 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1912 = _1878 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1878].xyz), vec3(0.0));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(0.0));
    float _3680 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _3691 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1889].x * _1895) * _1933) + (((cbLight._m0[_1899].x * _1867) * _1908) * _1931);
    float _1941 = ((_1895 * cbLight._m0[_1889].y) * _1933) + (((cbLight._m0[_1899].y * _1869) * _1908) * _1931);
    float _1942 = ((_1895 * cbLight._m0[_1889].z) * _1933) + (((cbLight._m0[_1899].z * _1871) * _1908) * _1931);
    uint _1943 = _1878 + 8u;
    float _1949 = cbLight._m0[_1878].x + _640;
    float _1950 = cbLight._m0[_1878].y + _641;
    float _1951 = cbLight._m0[_1878].z + _642;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1959 = dot(vec3(0.0), vec3(cbLight._m0[_1878].xyz));
    float _3702 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1963 = dot(vec3(0.0), vec3(_640, _641, _642));
    float _3713 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_1949 * _1955, _1950 * _1955, _1951 * _1955));
    float _3724 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1984 = (0.5 / ((_1962 + 9.9999999392252902907785028219223e-09) + _1966)) * _1962;
    float _3735 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.31831014156341552734375;
    uint _2000 = _1878 + 9u;
    float _2006 = cbLight._m0[_1912].x + _640;
    float _2007 = cbLight._m0[_1912].y + _641;
    float _2008 = cbLight._m0[_1912].z + _642;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2016 = dot(vec3(0.0), vec3(cbLight._m0[_1912].xyz));
    float _3746 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2006 * _2012, _2007 * _2012, _2008 * _2012));
    float _3757 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2033 = (0.5 / ((_2019 + 9.9999999392252902907785028219223e-09) + _1966)) * _2019;
    float _3768 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.31831014156341552734375;
    float _2045 = (((_2029 * cbLight._m0[_2000].x) * _2035) * _1895) + ((((cbLight._m0[_1943].x * _1867) * _1978) * _1986) * _1908);
    float _2046 = (((_2029 * cbLight._m0[_2000].y) * _2035) * _1895) + ((((cbLight._m0[_1943].y * _1869) * _1978) * _1986) * _1908);
    float _2047 = (((_2029 * cbLight._m0[_2000].z) * _2035) * _1895) + ((((cbLight._m0[_1943].z * _1871) * _1978) * _1986) * _1908);
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    if (_1876.y == 0u)
    {
        uvec4 _2165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2166 = _2165.x;
        uint _2177 = uint((float(_2165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _649) / _2166))) + floor(float(uint(cbSceneParam._m0[85u].x * _648) / _2166)));
        float _2187 = (log2(_1653 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2188 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        uint _2191 = uint(isnan(14.0) ? _2188 : (isnan(_2188) ? 14.0 : min(_2188, 14.0)));
        uvec4 _2197 = texelFetch(g_lightClusterGridBuffer, int(((_2191 << 2u) + (_2177 << 6u)) >> 2u));
        uint _2198 = _2197.x;
        uint _2199 = _2165.z;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        if (((((1u << ((_2199 >> 4u) & 15u)) + 4294967295u) & _2198) == 0u) || ((_2199 & 240u) == 0u))
        {
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
        }
        else
        {
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2524)
                {
                    frontier_phi_66_pred = _2509;
                    frontier_phi_66_pred_1 = _2508;
                    frontier_phi_66_pred_2 = _2510;
                    frontier_phi_66_pred_3 = _2513;
                    frontier_phi_66_pred_4 = _2512;
                    frontier_phi_66_pred_5 = _2511;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2508;
                    _2654 = _2509;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2523;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2514 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _1651;
                        float _2720 = _2679.y - _1652;
                        float _2721 = _2679.z - _1653;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _3789 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * dot(vec3(0.0), vec3(_2725 * _2719, _2725 * _2720, _2725 * _2721))) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _1651;
                        float _2755 = (-0.0) - _1652;
                        float _2756 = (-0.0) - _1653;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(0.0), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _3805 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _3816 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2768 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2772 = (0.5 / (((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) + 9.9999999392252902907785028219223e-09) + _2768)) * _2768;
                        float _3827 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2781 = (((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 3.1415927410125732421875) / ((_2746 * 2.1991131305694580078125) + 3.141590118408203125)) * _2735;
                        _2588 = (_2750 * _2698.x) + _2656;
                        _2589 = (_2750 * _2698.y) + _2657;
                        _2590 = (_2750 * _2698.z) + _2658;
                        _2585 = (_2781 * _2715.x) + _2653;
                        _2586 = (_2781 * _2715.y) + _2654;
                        _2587 = (_2781 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_66_pred = _2586;
                    frontier_phi_66_pred_1 = _2585;
                    frontier_phi_66_pred_2 = _2587;
                    frontier_phi_66_pred_3 = _2590;
                    frontier_phi_66_pred_4 = _2589;
                    frontier_phi_66_pred_5 = _2588;
                }
                _2335 = frontier_phi_66_pred;
                _2333 = frontier_phi_66_pred_1;
                _2337 = frontier_phi_66_pred_2;
                _2343 = frontier_phi_66_pred_3;
                _2341 = frontier_phi_66_pred_4;
                _2339 = frontier_phi_66_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2333;
                    _2509 = _2335;
                    _2510 = _2337;
                    _2511 = _2339;
                    _2512 = _2341;
                    _2513 = _2343;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
        }
        uvec4 _2346 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2347 = _2346.z;
        uint _2349 = (_2347 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2349) & _2198) == 0u)
        {
            _2479 = _2332;
            _2481 = _2334;
            _2483 = _2336;
            _2485 = _2338;
            _2487 = _2340;
            _2489 = _2342;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2349 < ((_2347 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2636 = _2332;
                float _2637 = _2334;
                float _2638 = _2336;
                float _2639 = _2338;
                float _2640 = _2340;
                float _2641 = _2342;
                uint _2642 = _2349;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2652)
                    {
                        frontier_phi_72_pred = _2637;
                        frontier_phi_72_pred_1 = _2636;
                        frontier_phi_72_pred_2 = _2641;
                        frontier_phi_72_pred_3 = _2640;
                        frontier_phi_72_pred_4 = _2639;
                        frontier_phi_72_pred_5 = _2638;
                    }
                    else
                    {
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2799 = _2636;
                        float _2800 = _2637;
                        float _2801 = _2638;
                        float _2802 = _2639;
                        float _2803 = _2640;
                        float _2804 = _2641;
                        uint _2805 = _2651;
                        uint _2806;
                        vec4 _2831;
                        float _2832;
                        vec4 _2847;
                        vec3 _2859;
                        vec4 _2875;
                        vec4 _2890;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2816 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2805));
                            _2806 = (_2805 + 4294967295u) & _2805;
                            uint _2818 = _2816 * 40u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            _2832 = _2831.w;
                            uint _2834 = (_2816 * 40u) + 4u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2849 = (_2816 * 40u) + 8u;
                            _2859 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x));
                            uint _2862 = (_2816 * 40u) + 16u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2816 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2816 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2816 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_1653, _2924.z, fma(_1652, _2924.y, _2924.x * _1651)) + _2924.w;
                            _2937 = !((fma(_1653, _2905.z, fma(_1652, _2905.y, _2905.x * _1651)) + _2905.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2831.x - _1651;
                                float _2965 = _2831.y - _1652;
                                float _2966 = _2831.z - _1653;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2832 * _2832));
                                float _3838 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                                float _2982 = sqrt(_2967) * _2847.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2986 = 1.0 - _2985;
                                float _2988 = (_2986 * dot(vec3(_2971, _2972, _2973), vec3(0.0))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_1653, _2875.z, fma(_1652, _2875.y, _2875.x * _1651)) + _2875.w) / _2936;
                                float _2996 = (fma(_1653, _2890.z, fma(_1652, _2890.y, _2890.x * _1651)) + _2890.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _3854 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3012 = dot(vec3(0.0), vec3((-0.0) - (_1651 * _2504), (-0.0) - (_1652 * _2504), (-0.0) - (_1653 * _2504)));
                                float _3865 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3020 = (_2986 * dot(vec3(0.0), vec3(_2971, _2972, _2973))) + _2985;
                                float _3876 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _3025 = (0.5 / (((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) + 9.9999999392252902907785028219223e-09) + _3021)) * _3021;
                                float _3887 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3032 = (_3001 * _2978) * (((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 3.1415927410125732421875) / ((_2991 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3032 * _2859.y;
                                frontier_phi_78_pred_1 = _3032 * _2859.x;
                                frontier_phi_78_pred_2 = _3002 * _2847.z;
                                frontier_phi_78_pred_3 = _3002 * _2847.y;
                                frontier_phi_78_pred_4 = _3002 * _2847.x;
                                frontier_phi_78_pred_5 = _3032 * _2859.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3037 = frontier_phi_78_pred;
                            _3036 = frontier_phi_78_pred_1;
                            _3041 = frontier_phi_78_pred_2;
                            _3040 = frontier_phi_78_pred_3;
                            _3039 = frontier_phi_78_pred_4;
                            _3038 = frontier_phi_78_pred_5;
                            _2789 = _3039 + _2802;
                            _2790 = _3040 + _2803;
                            _2791 = _3041 + _2804;
                            _2786 = _3036 + _2799;
                            _2787 = _3037 + _2800;
                            _2788 = _3038 + _2801;
                            if (_2806 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2806;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2787;
                        frontier_phi_72_pred_1 = _2786;
                        frontier_phi_72_pred_2 = _2791;
                        frontier_phi_72_pred_3 = _2790;
                        frontier_phi_72_pred_4 = _2789;
                        frontier_phi_72_pred_5 = _2788;
                    }
                    _2482 = frontier_phi_72_pred;
                    _2480 = frontier_phi_72_pred_1;
                    _2490 = frontier_phi_72_pred_2;
                    _2488 = frontier_phi_72_pred_3;
                    _2486 = frontier_phi_72_pred_4;
                    _2484 = frontier_phi_72_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2480;
                        _2637 = _2482;
                        _2638 = _2484;
                        _2639 = _2486;
                        _2640 = _2488;
                        _2641 = _2490;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2490;
                frontier_phi_59_60_ladder_1 = _2486;
                frontier_phi_59_60_ladder_2 = _2484;
                frontier_phi_59_60_ladder_3 = _2482;
                frontier_phi_59_60_ladder_4 = _2480;
                frontier_phi_59_60_ladder_5 = _2488;
            }
            else
            {
                frontier_phi_59_60_ladder = _2342;
                frontier_phi_59_60_ladder_1 = _2338;
                frontier_phi_59_60_ladder_2 = _2336;
                frontier_phi_59_60_ladder_3 = _2334;
                frontier_phi_59_60_ladder_4 = _2332;
                frontier_phi_59_60_ladder_5 = _2340;
            }
            _2479 = frontier_phi_59_60_ladder_4;
            _2481 = frontier_phi_59_60_ladder_3;
            _2483 = frontier_phi_59_60_ladder_2;
            _2485 = frontier_phi_59_60_ladder_1;
            _2487 = frontier_phi_59_60_ladder_5;
            _2489 = frontier_phi_59_60_ladder;
        }
        float _2494 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2211 = (_2494 * _2485) + _1940;
        _2213 = (_2494 * _2487) + _1941;
        _2215 = (_2494 * _2489) + _1942;
        _2217 = ((_2479 * 0.039999999105930328369140625) * _2494) + _2045;
        _2219 = ((_2481 * 0.039999999105930328369140625) * _2494) + _2046;
        _2221 = ((_2483 * 0.039999999105930328369140625) * _2494) + _2047;
    }
    else
    {
        _2211 = _1940;
        _2213 = _1941;
        _2215 = _1942;
        _2217 = _2045;
        _2219 = _2046;
        _2221 = _2047;
    }
    uint _2227 = _664 + uint(cbMatDynParam._m0[0u].w);
    float _2233 = ((_606 * (_594 - (_594 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2227].x;
    float _2234 = ((_606 * (_595 - (_595 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2227].y;
    float _2235 = ((_606 * (_596 - (_596 * _567))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2227].z;
    float _3903 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3914 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3925 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _2252 = (((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_2211 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _688))) + ((_2217 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1389)) * cbPerFrame._m0[3u].x)) + _2233;
    float _2254 = (_2234 + ((_2219 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1389)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_2213 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _688)));
    float _2256 = (_2235 + ((_2221 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1389)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2215 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _688)));
    float _3951 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2269 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    uint _2270 = _662 + 6u;
    float _2278 = _648 / cbSceneParam._m0[86u].x;
    float _2279 = _649 / cbSceneParam._m0[86u].y;
    vec4 _2293 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2295 = _2293.x;
    float _2296 = _2293.y;
    float _2297 = _2293.z;
    float _2298 = _2293.w;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2357 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2358 = _2357 / _635;
        float _2369 = _2358 * _271;
        float _2370 = _272 * _2358;
        float _2371 = (-0.0) - _2370;
        float _2372 = _2358 * _273;
        float _2374 = (cbSceneParam._m0[77u].w * _2371) / _2357;
        float _2375 = _2374 + cbSceneParam._m0[79u].w;
        float _2376 = cbSceneParam._m0[79u].w - _2370;
        float _2382 = sqrt(((_2369 * _2369) + (_2370 * _2370)) + (_2372 * _2372));
        float _2385 = (1.0 - (cbSceneParam._m0[77u].w / _2357)) * _2382;
        float _2390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2371 - _2374) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2375 > 0.0) ? exp2(_2390 * _2375) : (2.0 - exp2(_2392 * _2375))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2385;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : max(_2375, _2376));
            float _2539 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : min(_2375, _2376));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2598 = ((abs(_2382 / _2371) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2390 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2390 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2392 * _2548) - exp2(_2392 * _2549)) * _2537))) + (_2385 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2298);
        _2394 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2295;
        _2396 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2296;
        _2398 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2297;
        _2400 = _2609 * _2298;
    }
    else
    {
        _2394 = _2295;
        _2396 = _2296;
        _2398 = _2297;
        _2400 = _2298;
    }
    float _2411 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2412 = _2411 == 3.0;
    float _2414 = log2(_2400);
    float _2418 = exp2(_2414 * cbSceneParam._m0[78u].x);
    float _2419 = exp2(_2414 * cbSceneParam._m0[78u].y);
    float _2420 = exp2(_2414 * cbSceneParam._m0[78u].z);
    float _2421 = _2418 * (isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0)));
    float _2422 = _2419 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0)));
    float _2423 = _2420 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)));
    float _2432 = (_2411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2432 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.y = _2432 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.z = _2432 * (_2412 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.w = cbInstanceData._m0[_2270].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2233) * _2269) * _2418) * _2432;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2234) * _2269) * _2419) * _2432;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2235) * _2269) * _2420) * _2432;
    SV_Target_1.w = cbInstanceData._m0[_2270].w;
}


