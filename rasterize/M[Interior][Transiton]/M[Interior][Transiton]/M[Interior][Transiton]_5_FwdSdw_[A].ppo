#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1412;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _304 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _307 = _304.x;
    vec4 _325 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _307) + cbMtdParam._m0[12u].x) * _325.x;
    float _344 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _307) + cbMtdParam._m0[12u].y) * _325.y;
    float _346 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _307) + cbMtdParam._m0[12u].z) * _325.z;
    vec4 _364 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = cbMtdParam._m0[27u].w + _288;
    float _404 = cbMtdParam._m0[28u].x + _289;
    float _405 = cbMtdParam._m0[28u].y + _290;
    float _419 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_218, _219, _220));
    float _420 = (-0.0) - dot(vec3(_403, _404, _405), vec3(_232, _233, _234));
    float _421 = (-0.0) - dot(vec3(_403, _404, _405), vec3((-0.0) - _225, (-0.0) - _226, (-0.0) - _227));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _428 = _425 * _421;
    float _429 = (_425 * _419) + ((cbMtdParam._m0[25u].w * _307) * ((_364.x * 2.0) + (-1.0)));
    float _430 = (_425 * _420) + ((cbMtdParam._m0[26u].x * _307) * ((_364.y * 2.0) + (-1.0)));
    float _431 = _429 * cbMtdParam._m0[24u].x;
    float _432 = _430 * cbMtdParam._m0[23u].w;
    float _433 = fract(TEXCOORD.x);
    float _434 = fract(TEXCOORD.y);
    float _440;
    if (_431 > 0.0)
    {
        _440 = (1.0 - _433) / _431;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_431 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _433) / _431;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _440 = frontier_phi_3_2_ladder;
    }
    float _448;
    if (_432 > 0.0)
    {
        _448 = (1.0 - _434) / _432;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _434) / _432;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _448 = frontier_phi_7_6_ladder;
    }
    bool _450 = _428 > 0.0;
    float _452 = _450 ? (cbMtdParam._m0[17u].x / _428) : 5000.0;
    float _453 = isnan(_448) ? _440 : (isnan(_440) ? _448 : min(_440, _448));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _459 = _433 + (-0.5);
    float _462 = _434 + (-0.5);
    float _465 = ((_454 * _428) + _458) / _458;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_459 + (_454 * _431)) / _465) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_462 + (_454 * _432)) / _465) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _503 = (_490.x * _307) * cbMtdParam._m0[9u].x;
    float _504 = (_490.y * _307) * cbMtdParam._m0[9u].y;
    float _505 = (_490.z * _307) * cbMtdParam._m0[9u].z;
    float _523 = _429 * cbMtdParam._m0[26u].z;
    float _524 = _430 * cbMtdParam._m0[26u].y;
    bool _525 = _523 > 0.0;
    float _530;
    if (_525)
    {
        _530 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _530 = frontier_phi_11_10_ladder;
    }
    bool _532 = _524 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _537 = frontier_phi_15_14_ladder;
    }
    float _540 = _450 ? (cbMtdParam._m0[19u].z / _428) : 5000.0;
    float _541 = isnan(_537) ? _530 : (isnan(_530) ? _537 : min(_530, _537));
    float _542 = isnan(_540) ? _541 : (isnan(_541) ? _540 : min(_541, _540));
    float _546 = cbMtdParam._m0[22u].z * cbMtdParam._m0[19u].z;
    float _550 = ((_542 * _428) + _546) / _546;
    float _555 = cbMtdParam._m0[22u].y - cbMtdParam._m0[23u].y * trunc(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    float _557 = floor(cbMtdParam._m0[22u].y / cbMtdParam._m0[23u].y);
    vec4 _573 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_459 + (_542 * _523)) / _550) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_462 + (_542 * _524)) / _550) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[0u].w));
    float _588;
    if (_525)
    {
        _588 = (1.0 - _433) / _523;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _433) / _523;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _588 = frontier_phi_19_18_ladder;
    }
    float _594;
    if (_532)
    {
        _594 = (1.0 - _434) / _524;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_524 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _434) / _524;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _594 = frontier_phi_23_22_ladder;
    }
    float _596 = isnan(_594) ? _588 : (isnan(_588) ? _594 : min(_588, _594));
    float _597 = isnan(_540) ? _596 : (isnan(_596) ? _540 : min(_596, _540));
    float _604 = ((_597 * _428) + _546) / _546;
    vec4 _624 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_459 + (_597 * _523)) / _604) + 0.5) + _555) / cbMtdParam._m0[23u].y)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_462 + (_597 * _524)) / _604) + 0.5) + _557) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].w));
    float _626 = _624.x;
    float _636 = (((((cbMtdParam._m0[10u].x * _307) * _573.x) - _503) * _307) * _626) + _503;
    float _637 = (((((cbMtdParam._m0[10u].y * _307) * _573.y) - _504) * _307) * _626) + _504;
    float _638 = (((((cbMtdParam._m0[10u].z * _307) * _573.z) - _505) * _307) * _626) + _505;
    vec4 _651 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _655 = _651.z;
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3904 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))));
    float _674 = (cbMtdParam._m0[19u].y * _636) * cbMtdParam._m0[16u].x;
    float _676 = (cbMtdParam._m0[19u].y * _637) * cbMtdParam._m0[16u].y;
    float _678 = (cbMtdParam._m0[19u].y * _638) * cbMtdParam._m0[16u].z;
    vec4 _702 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _707 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _713 = ((_702.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _715 = (-0.0) - (cbMtdParam._m0[21u].x * ((_702.x * 0.5) + (-0.25)));
    float _716 = fract(_707);
    float _718 = fract(_707 + 0.5);
    vec4 _745 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_716 * _715) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_713 * _716) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _747 = _745.x;
    float _753 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_718 * _715) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_713 * _718) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _747) * abs((_716 * 2.0) + (-1.0))) + _747;
    float _759 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _763 = fract(abs(_759));
    float _773 = sin(cbMtdParam._m0[21u].z);
    float _774 = cos(cbMtdParam._m0[21u].z);
    float _775 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _776 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _801 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_776, (-0.0) - _773, _774 * _775) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_776, _774, _775 * _773) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_759 >= ((-0.0) - _759)) ? _763 : ((-0.0) - _763)) * cbMtdParam._m0[18u].z) - _753)) + cbMtdParam._m0[18u].w;
    float _802 = ceil(_801);
    float _3915 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _803 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _823 = ((((cbMtdParam._m0[21u].w * _636) * cbMtdParam._m0[15u].x) - _674) * _803) + _674;
    float _824 = ((((cbMtdParam._m0[21u].w * _637) * cbMtdParam._m0[15u].y) - _676) * _803) + _676;
    float _825 = ((((cbMtdParam._m0[21u].w * _638) * cbMtdParam._m0[15u].z) - _678) * _803) + _678;
    float _829 = abs(cbMtdParam._m0[20u].w * _801);
    float _833 = (((_829 * cbMtdParam._m0[18u].y) - _753) * _829) + _753;
    float _3926 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _834 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    vec4 _846 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _861 = (cbMtdParam._m0[14u].x * _846.x) * cbMtdParam._m0[19u].x;
    float _862 = (cbMtdParam._m0[14u].y * _846.y) * cbMtdParam._m0[19u].x;
    float _863 = (cbMtdParam._m0[14u].z * _846.z) * cbMtdParam._m0[19u].x;
    float _870 = exp2(log2(_834) * cbMtdParam._m0[20u].x);
    float _892 = fma(_665, _225, fma(_659, _232, _658 * _218));
    float _895 = fma(_665, _226, fma(_659, _233, _658 * _219));
    float _898 = fma(_665, _227, fma(_659, _234, _658 * _220));
    float _902 = inversesqrt(dot(vec3(_892, _895, _898), vec3(_892, _895, _898)));
    float _903 = _902 * _892;
    float _904 = _902 * _895;
    float _905 = _902 * _898;
    float _3937 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _906 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3959 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3970 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _925 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _930 = _288 * _929;
    float _931 = _289 * _929;
    float _932 = _290 * _929;
    vec4 _937 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _939 = _937.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3981 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _3992 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) - _1101)) + _1101) < ((_939 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_905, cbSceneParam._m0[5u].z, fma(_904, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _903));
    float _973 = fma(_905, cbSceneParam._m0[6u].z, fma(_904, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _903));
    float _976 = fma(_905, cbSceneParam._m0[7u].z, fma(_904, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _903));
    uint _989 = uint(roundEven(NORMAL.w)) * 13u;
    uint _990 = _989 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4003 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1014 = _1011.x * TEXCOORD_4;
    float _1015 = dot(vec3(_903, _904, _905), vec3(_930, _931, _932));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _903) - _930;
    float _1023 = (_1018 * _904) - _931;
    float _1024 = (_1018 * _905) - _932;
    float _1028 = abs(dot(vec3(_930, _931, _932), vec3(_903, _904, _905)));
    float _4036 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_906);
    float _1043 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1411;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1142 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1146 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1169 = _1075 + _903;
        float _1170 = _1079 + _904;
        float _1171 = _1083 + _905;
        float _1181 = fma(_1171, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1239 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1205.x + (-0.5));
        float _1241 = _1239 * (_1205.y + (-0.5));
        float _1242 = _1239 * (_1205.z + (-0.5));
        float _1249 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1212.x + (-0.5));
        float _1251 = _1249 * (_1212.y + (-0.5));
        float _1252 = _1249 * (_1212.z + (-0.5));
        float _1259 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1219.x + (-0.5));
        float _1261 = _1259 * (_1219.y + (-0.5));
        float _1262 = _1259 * (_1219.z + (-0.5));
        float _1269 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1226.x + (-0.5));
        float _1271 = _1269 * (_1226.y + (-0.5));
        float _1272 = _1269 * (_1226.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1293 = (dot(vec3(_903, _904, _905), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1303 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4084 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1305 + 1.0))) + _1310) * _1273;
        float _1320 = _1241 * 0.5;
        float _1321 = _1251 * 0.5;
        float _1322 = _1261 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_903, _904, _905), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4117 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1347 + 1.0))) + _1352) * _1274;
        float _1362 = _1242 * 0.5;
        float _1363 = _1252 * 0.5;
        float _1364 = _1262 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_903, _904, _905), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4150 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1389 + 1.0))) + _1394) * _1275;
        _1411 = _1242;
        _1413 = _1241;
        _1414 = _1240;
        _1415 = _1252;
        _1416 = _1251;
        _1417 = _1250;
        _1418 = _1262;
        _1419 = _1261;
        _1420 = _1260;
        _1421 = _1275;
        _1422 = _1274;
        _1423 = _1273;
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1412;
        _1413 = _1412;
        _1414 = _1412;
        _1415 = _1412;
        _1416 = _1412;
        _1417 = _1412;
        _1418 = _1412;
        _1419 = _1412;
        _1420 = _1412;
        _1421 = _1412;
        _1422 = _1412;
        _1423 = _1412;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1458 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1462 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1485 = _1075 + _903;
        float _1486 = _1079 + _904;
        float _1487 = _1083 + _905;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_903, _904, _905), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4213 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_903, _904, _905), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4246 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_903, _904, _905), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4279 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1412;
        _1724 = _1412;
        _1725 = _1412;
        _1726 = _1412;
        _1727 = _1412;
        _1728 = _1412;
        _1729 = _1412;
        _1730 = _1412;
        _1731 = _1412;
        _1732 = _1412;
        _1733 = _1412;
        _1734 = _1412;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1425)) + _1425;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1426)) + _1426;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1022 * 0.5;
    float _1792 = _1023 * 0.5;
    float _1793 = _1024 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1411, _1415, _1418, _1421));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _906);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1921 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1924 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1952 = frontier_phi_41_39_ladder;
        }
        float _2120;
        if (_1921 > 0.0)
        {
            _2120 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2120 = frontier_phi_50_46_ladder;
        }
        float _2564;
        if (_1924 > 0.0)
        {
            _2564 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2564 = frontier_phi_62_57_ladder;
        }
        float _2566 = isnan(_2120) ? _1952 : (isnan(_1952) ? _2120 : min(_1952, _2120));
        float _2567 = isnan(_2564) ? _2566 : (isnan(_2566) ? _2564 : min(_2566, _2564));
        float _2571 = (_2567 * _1918) + _1907;
        float _2572 = (_2567 * _1921) + _1911;
        float _2573 = (_2567 * _1924) + _1915;
        float _2574 = _2567 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2574;
        float _2578 = _2574 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 > _2578) || ((_2572 < _2576) || ((_2571 < _2576) || (_2571 > _2578))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2573, cbModelParam._m0[9u].z, fma(_2572, cbModelParam._m0[9u].y, _2571 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2573, cbModelParam._m0[10u].z, fma(_2572, cbModelParam._m0[10u].y, _2571 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2573, cbModelParam._m0[11u].z, fma(_2572, cbModelParam._m0[11u].y, _2571 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_40_62_ladder = _2833.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2833.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2833.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_40_62_ladder_2;
        _1942 = frontier_phi_40_62_ladder_1;
        _1944 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1860);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _906);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _2015 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _2018 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2125;
        if (_2012 > 0.0)
        {
            _2125 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2125 = frontier_phi_52_48_ladder;
        }
        float _2591;
        if (_2015 > 0.0)
        {
            _2591 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2591 = frontier_phi_64_59_ladder;
        }
        float _2970;
        if (_2018 > 0.0)
        {
            _2970 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2970 = frontier_phi_76_71_ladder;
        }
        float _2972 = isnan(_2591) ? _2125 : (isnan(_2125) ? _2591 : min(_2125, _2591));
        float _2973 = isnan(_2970) ? _2972 : (isnan(_2972) ? _2970 : min(_2972, _2970));
        float _2977 = (_2973 * _2012) + _2001;
        float _2978 = (_2973 * _2015) + _2005;
        float _2979 = (_2973 * _2018) + _2009;
        float _2980 = _2973 * 9.9999997473787516355514526367188e-05;
        float _2981 = (-1.0) - _2980;
        float _2983 = _2980 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2979 > _2983) || ((_2979 < _2981) || ((_2978 > _2983) || ((_2978 < _2981) || ((_2977 < _2981) || (_2977 > _2983))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2979, cbModelParam._m0[17u].z, fma(_2978, cbModelParam._m0[17u].y, _2977 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2979, cbModelParam._m0[18u].z, fma(_2978, cbModelParam._m0[18u].y, _2977 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2979, cbModelParam._m0[19u].z, fma(_2978, cbModelParam._m0[19u].y, _2977 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_49_76_ladder = _3116.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _3116.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _3116.y * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_49_76_ladder_1;
        _2039 = frontier_phi_49_76_ladder_2;
        _2041 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1949);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2053 = ((((1.0 - _1043) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1043 * _1030)) * _1014;
    float _2054 = _2053 * ((cbModelParam._m0[1u].w * (_2037 - _1940)) + _1940);
    float _2055 = _2053 * ((cbModelParam._m0[1u].w * (_2039 - _1942)) + _1942);
    float _2056 = _2053 * ((cbModelParam._m0[1u].w * (_2041 - _1944)) + _1944);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2112 = _2099 / _2111;
    float _2113 = _2103 / _2111;
    float _2114 = _2107 / _2111;
    float _2261;
    float _2262;
    float _2263;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2141 = ((uint(_2114 > cbSceneParam._m0[59u].y) + uint(_2114 > cbSceneParam._m0[59u].x)) + uint(_2114 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2142 = _2141 + 43u;
        uint _2150 = _2141 + 44u;
        uint _2158 = _2141 + 45u;
        uint _2166 = _2141 + 46u;
        float _2177 = fma(_2111, cbSceneParam._m0[_2142].w, fma(_2107, cbSceneParam._m0[_2142].z, fma(_2103, cbSceneParam._m0[_2142].y, _2099 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2111, cbSceneParam._m0[_2150].w, fma(_2107, cbSceneParam._m0[_2150].z, fma(_2103, cbSceneParam._m0[_2150].y, _2099 * cbSceneParam._m0[_2150].x)));
        float _2189 = fma(_2111, cbSceneParam._m0[_2166].w, fma(_2107, cbSceneParam._m0[_2166].z, fma(_2103, cbSceneParam._m0[_2166].y, _2099 * cbSceneParam._m0[_2166].x)));
        float _2194 = cbSceneParam._m0[33u].z * _2189;
        float _2196 = cbSceneParam._m0[33u].w * _2189;
        float _2199 = fma(_2111, cbSceneParam._m0[_2158].w, fma(_2107, cbSceneParam._m0[_2158].z, fma(_2103, cbSceneParam._m0[_2158].y, _2099 * cbSceneParam._m0[_2158].x))) / _2189;
        float _2247 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
        float _4405 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2254 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2177) / _2189, (_2196 + _2181) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2177) / _2189, (_2181 - _2194) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2194) / _2189, (_2181 - _2196) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2196) / _2189, (_2194 + _2181) / _2189), _2199), 0.0)).x), vec4(0.25)));
        _2261 = 1.0 - (_2254 * cbSceneParam._m0[34u].x);
        _2262 = 1.0 - (_2254 * cbSceneParam._m0[34u].y);
        _2263 = 1.0 - (_2254 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2261 = 1.0;
        _2262 = 1.0;
        _2263 = 1.0;
    }
    float _2327;
    float _2329;
    float _2331;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2315 = fma(_2111, cbSceneParam._m0[63u].w, fma(_2107, cbSceneParam._m0[63u].z, fma(_2103, cbSceneParam._m0[63u].y, _2099 * cbSceneParam._m0[63u].x)));
        float _2316 = fma(_2111, cbSceneParam._m0[60u].w, fma(_2107, cbSceneParam._m0[60u].z, fma(_2103, cbSceneParam._m0[60u].y, _2099 * cbSceneParam._m0[60u].x))) / _2315;
        float _2317 = fma(_2111, cbSceneParam._m0[61u].w, fma(_2107, cbSceneParam._m0[61u].z, fma(_2103, cbSceneParam._m0[61u].y, _2099 * cbSceneParam._m0[61u].x))) / _2315;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2316 >= cbSceneParam._m0[64u].x) && (_2317 >= cbSceneParam._m0[64u].y)) && (_2316 <= cbSceneParam._m0[64u].z)) && (_2317 <= cbSceneParam._m0[64u].w))
        {
            float _2604 = fma(_2111, cbSceneParam._m0[62u].w, fma(_2107, cbSceneParam._m0[62u].z, fma(_2103, cbSceneParam._m0[62u].y, _2099 * cbSceneParam._m0[62u].x))) / _2315;
            float _2608 = isnan(cbSceneParam._m0[41u].w) ? _2604 : (isnan(_2604) ? cbSceneParam._m0[41u].w : max(_2604, cbSceneParam._m0[41u].w));
            float _2651 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
            float _4421 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
            float _2658 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2316, cbSceneParam._m0[33u].w + _2317), _2608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2316, _2317 - cbSceneParam._m0[33u].z), _2608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].z, _2317 - cbSceneParam._m0[33u].w), _2608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2317), _2608), 0.0)).x), vec4(0.25)));
            float _2662 = 1.0 - (_2658 * cbSceneParam._m0[34u].x);
            float _2663 = 1.0 - (_2658 * cbSceneParam._m0[34u].y);
            float _2664 = 1.0 - (_2658 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2664) ? _2263 : (isnan(_2263) ? _2664 : min(_2263, _2664));
            frontier_phi_61_60_ladder_1 = isnan(_2663) ? _2262 : (isnan(_2262) ? _2663 : min(_2262, _2663));
            frontier_phi_61_60_ladder_2 = isnan(_2662) ? _2261 : (isnan(_2261) ? _2662 : min(_2261, _2662));
        }
        else
        {
            frontier_phi_61_60_ladder = _2263;
            frontier_phi_61_60_ladder_1 = _2262;
            frontier_phi_61_60_ladder_2 = _2261;
        }
        _2327 = frontier_phi_61_60_ladder_2;
        _2329 = frontier_phi_61_60_ladder_1;
        _2331 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2327 = _2261;
        _2329 = _2262;
        _2331 = _2263;
    }
    uvec4 _2336 = floatBitsToUint(cbInstanceData._m0[_989 + 5u]);
    uint _2338 = _2336.x * 14u;
    uint _2339 = _2338 + 13u;
    float _2344 = _1014 + (-1.0);
    float _2347 = (cbLight._m0[_2339].x * _2344) + 1.0;
    float _2348 = (cbLight._m0[_2339].y * _2344) + 1.0;
    uint _2349 = _2338 + 5u;
    float _2355 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2359 = _2338 + 4u;
    float _2368 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2372 = _2338 | 1u;
    float _2383 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_903, _904, _905));
    float _2386 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_903, _904, _905));
    float _4457 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _4468 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2391 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2393 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2400 = ((cbLight._m0[_2349].x * _2355) * _2393) + (((cbLight._m0[_2359].x * _2327) * _2368) * _2391);
    float _2401 = ((_2355 * cbLight._m0[_2349].y) * _2393) + (((cbLight._m0[_2359].y * _2329) * _2368) * _2391);
    float _2402 = ((_2355 * cbLight._m0[_2349].z) * _2393) + (((cbLight._m0[_2359].z * _2331) * _2368) * _2391);
    uint _2404 = _2338 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _906) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2338].x + _930;
    float _2420 = cbLight._m0[_2338].y + _931;
    float _2421 = cbLight._m0[_2338].z + _932;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2338].xyz));
    float _4479 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _4490 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2433 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2434 = dot(vec3(_903, _904, _905), vec3(_2426, _2427, _2428));
    float _4501 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2426, _2427, _2428));
    float _4512 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2457 = (exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2458 = 1.0 - _2418;
    float _2469 = (0.5 / (((_2433 * ((_2432 * _2458) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2458) + _2418) * _2432))) * _2432;
    float _4523 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2485 = _2338 + 9u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _906) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2372].x + _930;
    float _2499 = cbLight._m0[_2372].y + _931;
    float _2500 = cbLight._m0[_2372].z + _932;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_903, _904, _905), vec3(cbLight._m0[_2372].xyz));
    float _4534 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2512 = dot(vec3(_903, _904, _905), vec3(_2505, _2506, _2507));
    float _4545 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2505, _2506, _2507));
    float _4556 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2497 * _2497;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2533 = (exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2534 = 1.0 - _2497;
    float _2544 = (0.5 / (((_2433 * ((_2511 * _2534) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2534) + _2497) * _2511))) * _2511;
    float _4567 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    float _2556 = (((_2533 * cbLight._m0[_2485].x) * _2546) * _2355) + ((((cbLight._m0[_2404].x * _2327) * _2457) * _2471) * _2368);
    float _2557 = (((_2533 * cbLight._m0[_2485].y) * _2546) * _2355) + ((((cbLight._m0[_2404].y * _2329) * _2457) * _2471) * _2368);
    float _2558 = (((_2533 * cbLight._m0[_2485].z) * _2546) * _2355) + ((((cbLight._m0[_2404].z * _2331) * _2457) * _2471) * _2368);
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2336.y == 0u)
    {
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2677)));
        float _2698 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_3044)
                {
                    frontier_phi_87_pred = _3028;
                    frontier_phi_87_pred_1 = _3033;
                    frontier_phi_87_pred_2 = _3032;
                    frontier_phi_87_pred_3 = _3031;
                    frontier_phi_87_pred_4 = _3030;
                    frontier_phi_87_pred_5 = _3029;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3028;
                    _3195 = _3029;
                    _3196 = _3030;
                    _3197 = _3031;
                    _3198 = _3032;
                    _3199 = _3033;
                    _3200 = _3043;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3034 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2112;
                        float _3261 = _3220.y - _2113;
                        float _3262 = _3220.z - _2114;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_970, _973, _976), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4588 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3291 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3295 = (-0.0) - _2112;
                        float _3296 = (-0.0) - _2113;
                        float _3297 = (-0.0) - _2114;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3311 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3312 = 1.0 - _1030;
                        float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                        float _3320 = _3319 * _3319;
                        float _3321 = _3320 * _3320;
                        float _3322 = _3302 + _3267;
                        float _3323 = _3303 + _3268;
                        float _3324 = _3304 + _3269;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3332 = dot(vec3(_970, _973, _976), vec3(_3302, _3303, _3304));
                        float _4604 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3336 = dot(vec3(_970, _973, _976), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                        float _4615 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                        float _3344 = _3280 * _3320;
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3270) + _3345;
                        float _4626 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3350 = 1.0 - _3320;
                        float _3360 = (0.5 / (((_3349 * ((_3335 * _3350) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3320) * _3335))) * _3349;
                        float _4637 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3371 = (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3343 * _3343) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3124 = (_3291 * _3239.x) + _3197;
                        _3125 = (_3291 * _3239.y) + _3198;
                        _3126 = (_3291 * _3239.z) + _3199;
                        _3121 = (_3371 * _3256.x) + _3194;
                        _3122 = (_3371 * _3256.y) + _3195;
                        _3123 = (_3371 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_87_pred = _3121;
                    frontier_phi_87_pred_1 = _3126;
                    frontier_phi_87_pred_2 = _3125;
                    frontier_phi_87_pred_3 = _3124;
                    frontier_phi_87_pred_4 = _3123;
                    frontier_phi_87_pred_5 = _3122;
                }
                _2843 = frontier_phi_87_pred;
                _2853 = frontier_phi_87_pred_1;
                _2851 = frontier_phi_87_pred_2;
                _2849 = frontier_phi_87_pred_3;
                _2847 = frontier_phi_87_pred_4;
                _2845 = frontier_phi_87_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2843;
                    _3029 = _2845;
                    _3030 = _2847;
                    _3031 = _2849;
                    _3032 = _2851;
                    _3033 = _2853;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2859) & _2708) == 0u)
        {
            _2996 = _2842;
            _2998 = _2844;
            _3000 = _2846;
            _3002 = _2848;
            _3004 = _2850;
            _3006 = _2852;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
            float _3022 = _3021 * _2112;
            float _3023 = _3021 * _2113;
            float _3024 = _3021 * _2114;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3177 = _2842;
                float _3178 = _2844;
                float _3179 = _2846;
                float _3180 = _2848;
                float _3181 = _2850;
                float _3182 = _2852;
                uint _3183 = _2859;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_3193)
                    {
                        frontier_phi_98_pred = _3182;
                        frontier_phi_98_pred_1 = _3181;
                        frontier_phi_98_pred_2 = _3180;
                        frontier_phi_98_pred_3 = _3179;
                        frontier_phi_98_pred_4 = _3178;
                        frontier_phi_98_pred_5 = _3177;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3398 = _3177;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        uint _3404 = _3192;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3415 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3415 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3415 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_2114, _3522.z, fma(_2113, _3522.y, _3522.x * _2112)) + _3522.w;
                            _3535 = !((fma(_2114, _3503.z, fma(_2113, _3503.y, _3503.x * _2112)) + _3503.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3430.x - _2112;
                                float _3563 = _3430.y - _2113;
                                float _3564 = _3430.z - _2114;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3431 * _3431));
                                float _4648 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3580 = sqrt(_3565) * _3446.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_970, _973, _976))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_2114, _3473.z, fma(_2113, _3473.y, _3473.x * _2112)) + _3473.w) / _3534;
                                float _3594 = (fma(_2114, _3488.z, fma(_2113, _3488.y, _3488.x * _2112)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4664 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _1030;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3022;
                                float _3624 = _3570 - _3023;
                                float _3625 = _3571 - _3024;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4675 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3637 = dot(vec3(_970, _973, _976), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4686 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_970, _973, _976), vec3(_3569, _3570, _3571))) + _3646;
                                float _4697 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4708 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3600 * _3446.y;
                                frontier_phi_104_pred_1 = _3600 * _3446.x;
                                frontier_phi_104_pred_2 = _3674 * _3458.z;
                                frontier_phi_104_pred_3 = _3674 * _3458.y;
                                frontier_phi_104_pred_4 = _3674 * _3458.x;
                                frontier_phi_104_pred_5 = _3600 * _3446.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3682 = frontier_phi_104_pred;
                            _3681 = frontier_phi_104_pred_1;
                            _3680 = frontier_phi_104_pred_2;
                            _3679 = frontier_phi_104_pred_3;
                            _3678 = frontier_phi_104_pred_4;
                            _3683 = frontier_phi_104_pred_5;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3390;
                        frontier_phi_98_pred_1 = _3389;
                        frontier_phi_98_pred_2 = _3388;
                        frontier_phi_98_pred_3 = _3387;
                        frontier_phi_98_pred_4 = _3386;
                        frontier_phi_98_pred_5 = _3385;
                    }
                    _3007 = frontier_phi_98_pred;
                    _3005 = frontier_phi_98_pred_1;
                    _3003 = frontier_phi_98_pred_2;
                    _3001 = frontier_phi_98_pred_3;
                    _2999 = frontier_phi_98_pred_4;
                    _2997 = frontier_phi_98_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _2997;
                        _3178 = _2999;
                        _3179 = _3001;
                        _3180 = _3003;
                        _3181 = _3005;
                        _3182 = _3007;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _3001;
                frontier_phi_78_79_ladder_1 = _3007;
                frontier_phi_78_79_ladder_2 = _3005;
                frontier_phi_78_79_ladder_3 = _3003;
                frontier_phi_78_79_ladder_4 = _2999;
                frontier_phi_78_79_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_78_79_ladder = _2846;
                frontier_phi_78_79_ladder_1 = _2852;
                frontier_phi_78_79_ladder_2 = _2850;
                frontier_phi_78_79_ladder_3 = _2848;
                frontier_phi_78_79_ladder_4 = _2844;
                frontier_phi_78_79_ladder_5 = _2842;
            }
            _2996 = frontier_phi_78_79_ladder_5;
            _2998 = frontier_phi_78_79_ladder_4;
            _3000 = frontier_phi_78_79_ladder;
            _3002 = frontier_phi_78_79_ladder_3;
            _3004 = frontier_phi_78_79_ladder_2;
            _3006 = frontier_phi_78_79_ladder_1;
        }
        float _3011 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2721 = (_3011 * _3002) + _2400;
        _2723 = (_3011 * _3004) + _2401;
        _2725 = (_3011 * _3006) + _2402;
        _2727 = ((_2996 * 0.039999999105930328369140625) * _3011) + _2556;
        _2729 = ((_2998 * 0.039999999105930328369140625) * _3011) + _2557;
        _2731 = ((_3000 * 0.039999999105930328369140625) * _3011) + _2558;
    }
    else
    {
        _2721 = _2400;
        _2723 = _2401;
        _2725 = _2402;
        _2727 = _2556;
        _2729 = _2557;
        _2731 = _2558;
    }
    uint _2737 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _2743 = (cbSceneParam._m0[72u].y * ((_870 * ((_861 - _823) - (_861 * _834))) + _823)) * cbInstanceData._m0[_2737].x;
    float _2744 = (cbSceneParam._m0[72u].y * ((_870 * ((_862 - _824) - (_862 * _834))) + _824)) * cbInstanceData._m0[_2737].y;
    float _2745 = (((_870 * ((_863 - _825) - (_863 * _834))) + _825) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2737].z;
    float _4724 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4735 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4746 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2762 = (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2721 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1014))) + ((_2727 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + _2743;
    float _2764 = (_2744 + ((_2729 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2723 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1014)));
    float _2766 = (_2745 + ((_2731 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1849)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2725 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1014)));
    float _2767 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2768 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2769 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2775 = cbMtdParam._m0[2u].x * _2743;
    float _2776 = cbMtdParam._m0[2u].y * _2744;
    float _2777 = cbMtdParam._m0[2u].z * _2745;
    float _4772 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2779 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    uint _2780 = _989 + 6u;
    float _2788 = _951 / cbSceneParam._m0[86u].x;
    float _2789 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _925 : (isnan(_925) ? cbSceneParam._m0[77u].w : min(_925, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_925 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_925) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _925 : min(cbSceneParam._m0[80u].w, _925));
        float _2868 = _2867 / _925;
        float _2879 = _2868 * _288;
        float _2880 = _289 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2882 = _2868 * _290;
        float _2884 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2885 = _2884 + cbSceneParam._m0[79u].w;
        float _2886 = cbSceneParam._m0[79u].w - _2880;
        float _2892 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2882 * _2882));
        float _2895 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2892;
        float _2900 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2902 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2881 - _2884) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2885 > 0.0) ? exp2(_2900 * _2885) : (2.0 - exp2(_2902 * _2885))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2895;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : max(_2885, _2886));
            float _3059 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : min(_2885, _2886));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3134 = ((abs(_2892 / _2881) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2900 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2900 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2902 * _3068) - exp2(_2902 * _3069)) * _3057))) + (_2895 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2808);
        _2904 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2906 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2908 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2910 = _3145 * _2808;
    }
    else
    {
        _2904 = _2805;
        _2906 = _2806;
        _2908 = _2807;
        _2910 = _2808;
    }
    bool _3172;
    vec4 _2919;
    vec4 _2941;
    float _2943;
    float _2947;
    float _2948;
    float _2949;
    float _2952;
    float _2955;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2919 = cbMatDynParam._m0[0u];
        float _2921 = roundEven(_2919.y);
        bool _2922 = _2921 == 3.0;
        float _2923 = log2(_2910);
        float _2927 = exp2(_2923 * cbSceneParam._m0[78u].x);
        float _2928 = exp2(_2923 * cbSceneParam._m0[78u].y);
        float _2929 = exp2(_2923 * cbSceneParam._m0[78u].z);
        float _2930 = _2927 * _2767;
        float _2931 = _2928 * _2768;
        float _2932 = _2929 * _2769;
        float _2939 = _939 + (-0.5);
        _2941 = cbMtdParam._m0[1u];
        _2943 = _2941.y * _2939;
        float _2946 = (_2921 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2947 = _2946 * (_2922 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
        _2948 = _2946 * (_2922 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
        _2949 = _2946 * (_2922 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2908)));
        _2952 = ((_2775 * _2779) * _2927) * _2946;
        _2955 = ((_2776 * _2779) * _2928) * _2946;
        _2958 = ((_2777 * _2779) * _2929) * _2946;
        _2959 = _2939 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_989 + 7u].x + _2959) < 0.5)
            {
                _3172 = true;
                break;
            }
        }
        uint _3092 = _990 + uint(_2919.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2959) < 0.5))
        {
            _3172 = true;
            break;
        }
        if ((_2943 + 1.0) < _2941.x)
        {
            _3172 = true;
            break;
        }
        _3172 = false;
        break;
    }
    float _3376;
    if (_3172)
    {
        discard_state = true;
        _3376 = 0.0;
    }
    else
    {
        _3376 = cbInstanceData._m0[_2780].w;
    }
    SV_Target.x = _2947;
    SV_Target.y = _2948;
    SV_Target.z = _2949;
    SV_Target.w = _3376;
    SV_Target_1.x = _2952;
    SV_Target_1.y = _2955;
    SV_Target_1.z = _2958;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
    discard_exit();
}


