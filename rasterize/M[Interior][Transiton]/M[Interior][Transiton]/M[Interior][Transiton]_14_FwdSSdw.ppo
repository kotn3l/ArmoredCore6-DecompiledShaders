#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_1;
layout(set = 0, binding = 13) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1199;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    vec4 _294 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _297 = _294.x;
    vec4 _315 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _297) + cbMtdParam._m0[12u].x) * _315.x;
    float _334 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _297) + cbMtdParam._m0[12u].y) * _315.y;
    float _336 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _297) + cbMtdParam._m0[12u].z) * _315.z;
    vec4 _354 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _393 = cbMtdParam._m0[27u].w + _278;
    float _394 = cbMtdParam._m0[28u].x + _279;
    float _395 = cbMtdParam._m0[28u].y + _280;
    float _409 = (-0.0) - dot(vec3(_393, _394, _395), vec3(_208, _209, _210));
    float _410 = (-0.0) - dot(vec3(_393, _394, _395), vec3(_222, _223, _224));
    float _411 = (-0.0) - dot(vec3(_393, _394, _395), vec3((-0.0) - _215, (-0.0) - _216, (-0.0) - _217));
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _418 = _415 * _411;
    float _421 = ((_415 * _409) + ((cbMtdParam._m0[25u].w * _297) * ((_354.x * 2.0) + (-1.0)))) * cbMtdParam._m0[24u].x;
    float _422 = ((_415 * _410) + ((cbMtdParam._m0[26u].x * _297) * ((_354.y * 2.0) + (-1.0)))) * cbMtdParam._m0[23u].w;
    float _423 = fract(TEXCOORD.x);
    float _424 = fract(TEXCOORD.y);
    float _430;
    if (_421 > 0.0)
    {
        _430 = (1.0 - _423) / _421;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_421 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _423) / _421;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _430 = frontier_phi_3_2_ladder;
    }
    float _438;
    if (_422 > 0.0)
    {
        _438 = (1.0 - _424) / _422;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_422 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _424) / _422;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _438 = frontier_phi_7_6_ladder;
    }
    float _442 = (_418 > 0.0) ? (cbMtdParam._m0[17u].x / _418) : 5000.0;
    float _443 = isnan(_438) ? _430 : (isnan(_430) ? _438 : min(_430, _438));
    float _444 = isnan(_442) ? _443 : (isnan(_443) ? _442 : min(_443, _442));
    float _448 = cbMtdParam._m0[17u].y * cbMtdParam._m0[17u].x;
    float _455 = ((_444 * _418) + _448) / _448;
    vec4 _480 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((((_423 + (-0.5)) + (_444 * _421)) / _455) + 0.5) + (cbMtdParam._m0[18u].x - cbMtdParam._m0[24u].w * trunc(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w))) / cbMtdParam._m0[24u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((((_424 + (-0.5)) + (_444 * _422)) / _455) + 0.5) + floor(cbMtdParam._m0[18u].x / cbMtdParam._m0[24u].w)) / cbMtdParam._m0[25u].x)) + cbTextureTilingScale._m0[7u].w));
    float _496 = _297 * 0.1500000059604644775390625;
    float _504 = (_496 * (((_480.x * _297) * cbMtdParam._m0[9u].x) - _332)) + _332;
    float _505 = (_496 * (((_480.y * _297) * cbMtdParam._m0[9u].y) - _334)) + _334;
    float _506 = (_496 * (((_480.z * _297) * cbMtdParam._m0[9u].z) - _336)) + _336;
    vec4 _519 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _519.z;
    float _526 = (_519.x * 2.0) + (-1.0);
    float _527 = (_519.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3324 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))));
    vec4 _557 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _562 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _568 = ((_557.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _570 = (-0.0) - (cbMtdParam._m0[21u].x * ((_557.x * 0.5) + (-0.25)));
    float _571 = fract(_562);
    float _573 = fract(_562 + 0.5);
    vec4 _600 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_571 * _570) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_568 * _571) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _602 = _600.x;
    float _608 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_573 * _570) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_568 * _573) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _602) * abs((_571 * 2.0) + (-1.0))) + _602;
    float _617 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _621 = fract(abs(_617));
    float _630 = sin(cbMtdParam._m0[21u].z);
    float _631 = cos(cbMtdParam._m0[21u].z);
    float _632 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _633 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _663 = abs(cbMtdParam._m0[20u].w * (((_608 - (((_617 >= ((-0.0) - _617)) ? _621 : ((-0.0) - _621)) * cbMtdParam._m0[18u].z)) + texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_633, (-0.0) - _630, _631 * _632) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_633, _631, _632 * _630) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[18u].w));
    float _667 = (((_663 * cbMtdParam._m0[18u].y) - _608) * _663) + _608;
    float _3335 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    vec4 _680 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _695 = (cbMtdParam._m0[14u].x * _680.x) * cbMtdParam._m0[19u].x;
    float _696 = (cbMtdParam._m0[14u].y * _680.y) * cbMtdParam._m0[19u].x;
    float _697 = (cbMtdParam._m0[14u].z * _680.z) * cbMtdParam._m0[19u].x;
    float _707 = exp2(log2(_668) * cbMtdParam._m0[20u].x);
    float _720 = fma(_533, _215, fma(_527, _222, _526 * _208));
    float _723 = fma(_533, _216, fma(_527, _223, _526 * _209));
    float _726 = fma(_533, _217, fma(_527, _224, _526 * _210));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _3346 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _734 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3368 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3379 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _753 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _757 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _758 = _278 * _757;
    float _759 = _279 * _757;
    float _760 = _280 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _788 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _791 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _805 = _804 + 9u;
    uint _806 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_806].z;
    float _3390 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    vec4 _826 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _829 = _826.x * TEXCOORD_4;
    float _830 = dot(vec3(_731, _732, _733), vec3(_758, _759, _760));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _731) - _758;
    float _838 = (_833 * _732) - _759;
    float _839 = (_833 * _733) - _760;
    float _843 = abs(dot(vec3(_758, _759, _760), vec3(_731, _732, _733)));
    float _3423 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_734);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _925 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _929 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _933 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _956 = _890 + _731;
        float _957 = _894 + _732;
        float _958 = _898 + _733;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _925;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _929;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _933;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_925 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_929 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_933 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_731, _732, _733), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3471 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_731, _732, _733), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3504 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_731, _732, _733), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3537 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1238 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1242 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1246 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1269 = _890 + _731;
        float _1270 = _894 + _732;
        float _1271 = _898 + _733;
        float _1281 = fma(_1271, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1238 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1242 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[35u].z) + ((((((_1246 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1337 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1304.x + (-0.5));
        float _1339 = _1337 * (_1304.y + (-0.5));
        float _1340 = _1337 * (_1304.z + (-0.5));
        float _1347 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1311.x + (-0.5));
        float _1349 = _1347 * (_1311.y + (-0.5));
        float _1350 = _1347 * (_1311.z + (-0.5));
        float _1357 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1318.x + (-0.5));
        float _1359 = _1357 * (_1318.y + (-0.5));
        float _1360 = _1357 * (_1318.z + (-0.5));
        float _1367 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1325.x + (-0.5));
        float _1369 = _1367 * (_1325.y + (-0.5));
        float _1370 = _1367 * (_1325.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_731, _732, _733), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3600 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1401 + 1.0))) + _1406) * _1371;
        float _1416 = _1339 * 0.5;
        float _1417 = _1349 * 0.5;
        float _1418 = _1359 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_731, _732, _733), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3633 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1443 + 1.0))) + _1448) * _1372;
        float _1458 = _1340 * 0.5;
        float _1459 = _1350 * 0.5;
        float _1460 = _1360 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_731, _732, _733), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3666 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1485 + 1.0))) + _1490) * _1373;
        _1507 = _1340;
        _1508 = _1339;
        _1509 = _1338;
        _1510 = _1350;
        _1511 = _1349;
        _1512 = _1348;
        _1513 = _1360;
        _1514 = _1359;
        _1515 = _1358;
        _1516 = _1373;
        _1517 = _1372;
        _1518 = _1371;
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1199;
        _1508 = _1199;
        _1509 = _1199;
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1212)) + _1212;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1213)) + _1213;
    float _1554 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1531));
    float _1575 = _837 * 0.5;
    float _1576 = _838 * 0.5;
    float _1577 = _839 * 0.5;
    float _1578 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1581 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1584 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1618;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1591 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1595 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1599 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1606 = dot(vec4(cbModelParam._m0[39u]), vec4(_1575, _1576, _1577, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1629;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1620 = dot(vec4(cbModelParam._m0[40u]), vec4(_1575, _1576, _1577, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1633 = (_1629 * cbModelParam._m0[1u].x) + (_1618 * (1.0 - cbModelParam._m0[1u].x));
    float _1643 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1643 : min(cbModelParam._m0[25u].z, _1643));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1706 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1709 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1737 = frontier_phi_22_20_ladder;
        }
        float _2106;
        if (_1706 > 0.0)
        {
            _2106 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _2106 = frontier_phi_31_27_ladder;
        }
        float _2440;
        if (_1709 > 0.0)
        {
            _2440 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2440 = frontier_phi_45_38_ladder;
        }
        float _2442 = isnan(_2106) ? _1737 : (isnan(_1737) ? _2106 : min(_1737, _2106));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1703) + _1692;
        float _2448 = (_2443 * _1706) + _1696;
        float _2449 = (_2443 * _1709) + _1700;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1644);
            frontier_phi_21_45_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_21_45_ladder_2;
        _1727 = frontier_phi_21_45_ladder_1;
        _1729 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1644);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1800 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1803 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _2111;
        if (_1797 > 0.0)
        {
            _2111 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _2111 = frontier_phi_33_29_ladder;
        }
        float _2466;
        if (_1800 > 0.0)
        {
            _2466 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2466 = frontier_phi_47_40_ladder;
        }
        float _2635;
        if (_1803 > 0.0)
        {
            _2635 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2635 = frontier_phi_61_56_ladder;
        }
        float _2637 = isnan(_2466) ? _2111 : (isnan(_2111) ? _2466 : min(_2111, _2466));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1797) + _1786;
        float _2643 = (_2638 * _1800) + _1790;
        float _2644 = (_2638 * _1803) + _1794;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_30_61_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_30_61_ladder_2;
        _1824 = frontier_phi_30_61_ladder_1;
        _1826 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1734);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1838 = ((((1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_858 * _845)) * _829;
    float _1839 = _1838 * ((cbModelParam._m0[1u].w * (_1822 - _1725)) + _1725);
    float _1840 = _1838 * ((cbModelParam._m0[1u].w * (_1824 - _1727)) + _1727);
    float _1841 = _1838 * ((cbModelParam._m0[1u].w * (_1826 - _1729)) + _1729);
    float _1844 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    vec4 _1858 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_766, _767));
    float _1860 = _1858.w;
    float _1872 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1860);
    float _1873 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1860);
    float _1874 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1860);
    uvec4 _1878 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _1880 = _1878.x * 14u;
    uint _1881 = _1880 + 13u;
    float _1886 = _829 + (-1.0);
    float _1889 = (cbLight._m0[_1881].x * _1886) + 1.0;
    float _1890 = (cbLight._m0[_1881].y * _1886) + 1.0;
    uint _1891 = _1880 + 5u;
    float _1897 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1901 = _1880 + 4u;
    float _1910 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1914 = _1880 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_731, _732, _733));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_731, _732, _733));
    float _3802 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _3813 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1891].x * _1897) * _1935) + (((cbLight._m0[_1901].x * _1872) * _1910) * _1933);
    float _1943 = ((_1897 * cbLight._m0[_1891].y) * _1935) + (((cbLight._m0[_1901].y * _1873) * _1910) * _1933);
    float _1944 = ((_1897 * cbLight._m0[_1891].z) * _1935) + (((cbLight._m0[_1901].z * _1874) * _1910) * _1933);
    uint _1946 = _1880 + 8u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _734) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1880].x + _758;
    float _1962 = cbLight._m0[_1880].y + _759;
    float _1963 = cbLight._m0[_1880].z + _760;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1880].xyz));
    float _3824 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _1975 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1976 = dot(vec3(_731, _732, _733), vec3(_1968, _1969, _1970));
    float _3846 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_1968, _1969, _1970));
    float _3857 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1960 * _1960;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2000 = 1.0 - _1960;
    float _2011 = (0.5 / (((_1975 * ((_1974 * _2000) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2000) + _1960) * _1974))) * _1974;
    float _3868 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    uint _2027 = _1880 + 9u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _734) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1914].x + _758;
    float _2041 = cbLight._m0[_1914].y + _759;
    float _2042 = cbLight._m0[_1914].z + _760;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1914].xyz));
    float _3879 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _2054 = dot(vec3(_731, _732, _733), vec3(_2047, _2048, _2049));
    float _3890 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2047, _2048, _2049));
    float _3901 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2039 * _2039;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2039;
    float _2086 = (0.5 / (((_1975 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2076) + _2039) * _2053))) * _2053;
    float _3912 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    float _2098 = (((_2075 * cbLight._m0[_2027].x) * _2088) * _1897) + ((((cbLight._m0[_1946].x * _1872) * _1999) * _2013) * _1910);
    float _2099 = (((_2075 * cbLight._m0[_2027].y) * _2088) * _1897) + ((((cbLight._m0[_1946].y * _1873) * _1999) * _2013) * _1910);
    float _2100 = (((_2075 * cbLight._m0[_2027].z) * _2088) * _1897) + ((((cbLight._m0[_1946].z * _1874) * _1999) * _2013) * _1910);
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    float _2225;
    if (_1878.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
        }
        else
        {
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2519)
                {
                    frontier_phi_58_pred = _2504;
                    frontier_phi_58_pred_1 = _2508;
                    frontier_phi_58_pred_2 = _2507;
                    frontier_phi_58_pred_3 = _2506;
                    frontier_phi_58_pred_4 = _2505;
                    frontier_phi_58_pred_5 = _2503;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2503;
                    _2679 = _2504;
                    _2680 = _2505;
                    _2681 = _2506;
                    _2682 = _2507;
                    _2683 = _2508;
                    _2684 = _2518;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2509 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _2156;
                        float _2745 = _2704.y - _2157;
                        float _2746 = _2704.z - _2158;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2754 = dot(vec3(_785, _788, _791), vec3(_2751, _2752, _2753));
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _3933 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2754) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _2156;
                        float _2780 = (-0.0) - _2157;
                        float _2781 = (-0.0) - _2158;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2796 = exp2(log2(1.0 / ((_2771 * 3.5) + 5.0)) * 0.25);
                        float _2797 = 1.0 - _845;
                        float _2804 = sqrt(1.0 - ((1.0 - (_2797 * _2797)) * (1.0 - (_2796 * _2796))));
                        float _2805 = _2804 * _2804;
                        float _2806 = _2805 * _2805;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2817 = dot(vec3(_785, _788, _791), vec3(_2786, _2787, _2788));
                        float _3949 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2820 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2821 = dot(vec3(_785, _788, _791), vec3(_2813 * _2807, _2813 * _2808, _2813 * _2809));
                        float _3960 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2828 = ((_2824 * _2824) * (_2806 + (-1.0))) + 1.0;
                        float _2829 = _2764 * _2805;
                        float _2830 = _2829 * _2829;
                        float _2833 = ((1.0 - _2830) * _2754) + _2830;
                        float _3971 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2835 = 1.0 - _2805;
                        float _2845 = (0.5 / (((_2834 * ((_2820 * _2835) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2834 * _2835) + _2805) * _2820))) * _2834;
                        float _3982 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2856 = (((_2806 * 3.1415927410125732421875) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) / ((_2828 * _2828) * ((_2771 * 2.1991131305694580078125) + 3.141590118408203125))) * _2760;
                        _2587 = (_2775 * _2723.x) + _2681;
                        _2588 = (_2775 * _2723.y) + _2682;
                        _2589 = (_2775 * _2723.z) + _2683;
                        _2584 = (_2856 * _2740.x) + _2678;
                        _2585 = (_2856 * _2740.y) + _2679;
                        _2586 = (_2856 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2584;
                            _2679 = _2585;
                            _2680 = _2586;
                            _2681 = _2587;
                            _2682 = _2588;
                            _2683 = _2589;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_58_pred = _2585;
                    frontier_phi_58_pred_1 = _2589;
                    frontier_phi_58_pred_2 = _2588;
                    frontier_phi_58_pred_3 = _2587;
                    frontier_phi_58_pred_4 = _2586;
                    frontier_phi_58_pred_5 = _2584;
                }
                _2322 = frontier_phi_58_pred;
                _2330 = frontier_phi_58_pred_1;
                _2328 = frontier_phi_58_pred_2;
                _2326 = frontier_phi_58_pred_3;
                _2324 = frontier_phi_58_pred_4;
                _2320 = frontier_phi_58_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2320;
                    _2504 = _2322;
                    _2505 = _2324;
                    _2506 = _2326;
                    _2507 = _2328;
                    _2508 = _2330;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
        }
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.z;
        uint _2336 = (_2334 >> 8u) & 15u;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((4294967295u << _2336) & _2202) == 0u)
        {
            _2471 = _2319;
            _2473 = _2321;
            _2475 = _2323;
            _2477 = _2325;
            _2479 = _2327;
            _2481 = _2329;
        }
        else
        {
            float _2496 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2497 = _2496 * _2156;
            float _2498 = _2496 * _2157;
            float _2499 = _2496 * _2158;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2336 < ((_2334 >> 12u) & 15u))
            {
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2661 = _2319;
                float _2662 = _2321;
                float _2663 = _2323;
                float _2664 = _2325;
                float _2665 = _2327;
                float _2666 = _2329;
                uint _2667 = _2336;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2677)
                    {
                        frontier_phi_67_pred = _2666;
                        frontier_phi_67_pred_1 = _2665;
                        frontier_phi_67_pred_2 = _2664;
                        frontier_phi_67_pred_3 = _2663;
                        frontier_phi_67_pred_4 = _2662;
                        frontier_phi_67_pred_5 = _2661;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _2895 = _2661;
                        float _2896 = _2662;
                        float _2897 = _2663;
                        float _2898 = _2664;
                        float _2899 = _2665;
                        float _2900 = _2666;
                        uint _2901 = _2676;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2971;
                        vec4 _2986;
                        float _3032;
                        bool _3033;
                        for (;;)
                        {
                            uint _2912 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2958 = (_2912 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2973 = (_2912 * 40u) + 20u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2912 * 40u) + 24u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3007 = (_2912 * 40u) + 28u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3032 = fma(_2158, _3020.z, fma(_2157, _3020.y, _3020.x * _2156)) + _3020.w;
                            _3033 = !((fma(_2158, _3001.z, fma(_2157, _3001.y, _3001.x * _2156)) + _3001.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3033)
                            {
                                float _3060 = _2927.x - _2156;
                                float _3061 = _2927.y - _2157;
                                float _3062 = _2927.z - _2158;
                                float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                                float _3066 = inversesqrt(_3063);
                                float _3067 = _3066 * _3060;
                                float _3068 = _3066 * _3061;
                                float _3069 = _3066 * _3062;
                                float _3073 = 1.0 - (_3063 / (_2928 * _2928));
                                float _3993 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _3078 = sqrt(_3063) * _2943.w;
                                float _3080 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                                float _3081 = _3080 * _3080;
                                float _3084 = ((1.0 - _3081) * dot(vec3(_3067, _3068, _3069), vec3(_785, _788, _791))) + _3081;
                                float _3087 = _3078 * _3078;
                                float _3091 = (fma(_2158, _2971.z, fma(_2157, _2971.y, _2971.x * _2156)) + _2971.w) / _3032;
                                float _3092 = (fma(_2158, _2986.z, fma(_2157, _2986.y, _2986.x * _2156)) + _2986.w) / _3032;
                                float _3096 = 1.0 - dot(vec2(_3091, _3092), vec2(_3091, _3092));
                                float _4009 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3098 = _3097 * (((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3074) / ((_3087 * 0.699999988079071044921875) + 1.0));
                                float _3110 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                                float _3111 = 1.0 - _845;
                                float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                                float _3119 = _3118 * _3118;
                                float _3120 = _3119 * _3119;
                                float _3121 = _3067 - _2497;
                                float _3122 = _3068 - _2498;
                                float _3123 = _3069 - _2499;
                                float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                                float _3131 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2497, (-0.0) - _2498, (-0.0) - _2499));
                                float _4020 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3135 = dot(vec3(_785, _788, _791), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                                float _4031 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                                float _3143 = _3080 * _3119;
                                float _3144 = _3143 * _3143;
                                float _3150 = ((1.0 - _3144) * dot(vec3(_785, _788, _791), vec3(_3067, _3068, _3069))) + _3144;
                                float _4042 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3152 = 1.0 - _3119;
                                float _3162 = (0.5 / (((_3151 * ((_3134 * _3152) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3119) * _3134))) * _3151;
                                float _4053 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3172 = (_3097 * _3074) * (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_3142 * _3142) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3098 * _2943.z;
                                frontier_phi_73_pred_1 = _3098 * _2943.y;
                                frontier_phi_73_pred_2 = _3098 * _2943.x;
                                frontier_phi_73_pred_3 = _3172 * _2955.z;
                                frontier_phi_73_pred_4 = _3172 * _2955.y;
                                frontier_phi_73_pred_5 = _3172 * _2955.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3181 = frontier_phi_73_pred;
                            _3180 = frontier_phi_73_pred_1;
                            _3179 = frontier_phi_73_pred_2;
                            _3178 = frontier_phi_73_pred_3;
                            _3177 = frontier_phi_73_pred_4;
                            _3176 = frontier_phi_73_pred_5;
                            _2885 = _3179 + _2898;
                            _2886 = _3180 + _2899;
                            _2887 = _3181 + _2900;
                            _2882 = _3176 + _2895;
                            _2883 = _3177 + _2896;
                            _2884 = _3178 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2887;
                        frontier_phi_67_pred_1 = _2886;
                        frontier_phi_67_pred_2 = _2885;
                        frontier_phi_67_pred_3 = _2884;
                        frontier_phi_67_pred_4 = _2883;
                        frontier_phi_67_pred_5 = _2882;
                    }
                    _2482 = frontier_phi_67_pred;
                    _2480 = frontier_phi_67_pred_1;
                    _2478 = frontier_phi_67_pred_2;
                    _2476 = frontier_phi_67_pred_3;
                    _2474 = frontier_phi_67_pred_4;
                    _2472 = frontier_phi_67_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2472;
                        _2662 = _2474;
                        _2663 = _2476;
                        _2664 = _2478;
                        _2665 = _2480;
                        _2666 = _2482;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2478;
                frontier_phi_49_50_ladder_1 = _2482;
                frontier_phi_49_50_ladder_2 = _2480;
                frontier_phi_49_50_ladder_3 = _2476;
                frontier_phi_49_50_ladder_4 = _2474;
                frontier_phi_49_50_ladder_5 = _2472;
            }
            else
            {
                frontier_phi_49_50_ladder = _2325;
                frontier_phi_49_50_ladder_1 = _2329;
                frontier_phi_49_50_ladder_2 = _2327;
                frontier_phi_49_50_ladder_3 = _2323;
                frontier_phi_49_50_ladder_4 = _2321;
                frontier_phi_49_50_ladder_5 = _2319;
            }
            _2471 = frontier_phi_49_50_ladder_5;
            _2473 = frontier_phi_49_50_ladder_4;
            _2475 = frontier_phi_49_50_ladder_3;
            _2477 = frontier_phi_49_50_ladder;
            _2479 = frontier_phi_49_50_ladder_2;
            _2481 = frontier_phi_49_50_ladder_1;
        }
        float _2486 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2215 = (_2486 * _2477) + _1942;
        _2217 = (_2486 * _2479) + _1943;
        _2219 = (_2486 * _2481) + _1944;
        _2221 = ((_2471 * 0.039999999105930328369140625) * _2486) + _2098;
        _2223 = ((_2473 * 0.039999999105930328369140625) * _2486) + _2099;
        _2225 = ((_2475 * 0.039999999105930328369140625) * _2486) + _2100;
    }
    else
    {
        _2215 = _1942;
        _2217 = _1943;
        _2219 = _1944;
        _2221 = _2098;
        _2223 = _2099;
        _2225 = _2100;
    }
    uint _2231 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _2237 = ((_707 * (_695 - (_695 * _668))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2231].x;
    float _2238 = ((_707 * (_696 - (_696 * _668))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2231].y;
    float _2239 = ((_707 * (_697 - (_697 * _668))) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2231].z;
    float _4069 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4080 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4091 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2256 = (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2215 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _829))) + ((_2221 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1633)) * cbPerFrame._m0[3u].x)) + _2237;
    float _2258 = (_2238 + ((_2223 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1633)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2217 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _829)));
    float _2260 = (_2239 + ((_2225 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1633)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2219 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _829)));
    float _4117 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2273 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    uint _2274 = _804 + 6u;
    float _2282 = _766 / cbSceneParam._m0[86u].x;
    float _2283 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2297 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2282, _2283, (log2((isnan(cbSceneParam._m0[77u].w) ? _753 : (isnan(_753) ? cbSceneParam._m0[77u].w : min(_753, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2299 = _2297.x;
    float _2300 = _2297.y;
    float _2301 = _2297.z;
    float _2302 = _2297.w;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_753 > cbSceneParam._m0[78u].w)
    {
        float _2344 = isnan(_753) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _753 : min(cbSceneParam._m0[80u].w, _753));
        float _2345 = _2344 / _753;
        float _2356 = _2345 * _278;
        float _2357 = _279 * _2345;
        float _2358 = (-0.0) - _2357;
        float _2359 = _2345 * _280;
        float _2361 = (cbSceneParam._m0[77u].w * _2358) / _2344;
        float _2362 = _2361 + cbSceneParam._m0[79u].w;
        float _2363 = cbSceneParam._m0[79u].w - _2357;
        float _2369 = sqrt(((_2356 * _2356) + (_2357 * _2357)) + (_2359 * _2359));
        float _2372 = (1.0 - (cbSceneParam._m0[77u].w / _2344)) * _2369;
        float _2378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2597;
        if (abs((_2358 - _2361) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2597 = ((((_2362 > 0.0) ? exp2(_2378 * _2362) : (2.0 - exp2(_2380 * _2362))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2372;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : max(_2362, _2363));
            float _2534 = isnan(_2363) ? _2362 : (isnan(_2362) ? _2363 : min(_2362, _2363));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2597 = ((abs(_2369 / _2358) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2378 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2378 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2380 * _2543) - exp2(_2380 * _2544)) * _2532))) + (_2372 * cbSceneParam._m0[80u].z);
        }
        vec4 _2599 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2282, _2283, 1.0), 0.0);
        float _2608 = exp2((_2597 * (-1.44269502162933349609375)) * (1.0 - _2599.w));
        float _2609 = log2(_2608);
        float _2625 = log2(_2302);
        _2382 = (exp2(_2625 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].x)) * _2599.x) / cbSceneParam._m0[78u].x)) + _2299;
        _2384 = (exp2(_2625 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].y)) * _2599.y) / cbSceneParam._m0[78u].y)) + _2300;
        _2386 = (exp2(_2625 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2609 * cbSceneParam._m0[78u].z)) * _2599.z) / cbSceneParam._m0[78u].z)) + _2301;
        _2388 = _2608 * _2302;
    }
    else
    {
        _2382 = _2299;
        _2384 = _2300;
        _2386 = _2301;
        _2388 = _2302;
    }
    float _2399 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2400 = _2399 == 3.0;
    float _2401 = log2(_2388);
    float _2405 = exp2(_2401 * cbSceneParam._m0[78u].x);
    float _2406 = exp2(_2401 * cbSceneParam._m0[78u].y);
    float _2407 = exp2(_2401 * cbSceneParam._m0[78u].z);
    float _2408 = _2405 * (isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0)));
    float _2409 = _2406 * (isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0)));
    float _2410 = _2407 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)));
    float _2419 = (_2399 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2419 * (_2400 ? _2408 : (_2408 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.y = _2419 * (_2400 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2384)));
    SV_Target.z = _2419 * (_2400 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2386)));
    SV_Target.w = cbInstanceData._m0[_2274].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2237) * _2273) * _2405) * _2419;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2238) * _2273) * _2406) * _2419;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2239) * _2273) * _2407) * _2419;
    SV_Target_1.w = cbInstanceData._m0[_2274].w;
}


