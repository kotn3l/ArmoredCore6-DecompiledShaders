#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[30];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_Transiton_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _390;
uint _2073;
uint _2074;
uint _2075;
uint _2309;
uint _2310;
uint _2311;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _202 = _201 * _193;
    float _203 = _201 * _194;
    float _204 = _201 * _195;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _299 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _322 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _334 = cbMtdParam._m0[28u].z + _269;
    float _335 = cbMtdParam._m0[28u].w + _270;
    float _336 = cbMtdParam._m0[29u].x + _271;
    float _353 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_315 * _202, _315 * _203, _315 * _204));
    float _354 = (-0.0) - dot(vec3(_334, _335, _336), vec3(_322 * _213, _322 * _214, _322 * _215));
    float _355 = (-0.0) - dot(vec3(_334, _335, _336), vec3((-0.0) - (NORMAL.x * _208), (-0.0) - (NORMAL.y * _208), (-0.0) - (NORMAL.z * _208)));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _365 = ((cbMtdParam._m0[25u].y * _353) * _359) + (((_299.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].w);
    float _366 = ((cbMtdParam._m0[25u].z * _354) * _359) + (((_299.y * 2.0) + (-1.0)) * cbMtdParam._m0[26u].x);
    float _369 = fract(cbMtdParam._m0[25u].y * TEXCOORD.x);
    float _370 = fract(cbMtdParam._m0[25u].z * TEXCOORD.y);
    float _388;
    float _391;
    float _393;
    if (_365 > 0.0)
    {
        float _374 = (1.0 - _369) / _365;
        _388 = _374;
        _391 = ((cbMtdParam._m0[22u].x + 1.0) - fract(_374 * _360)) * 0.16666667163372039794921875;
        _393 = (fract((_374 * _366) + _370) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_365 < 0.0)
        {
            float _389 = ((-0.0) - _369) / _365;
            frontier_phi_3_2_ladder = (fract(_389 * _360) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _389;
            frontier_phi_3_2_ladder_2 = (fract((_389 * _366) + _370) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _390;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _388 = frontier_phi_3_2_ladder_1;
        _391 = frontier_phi_3_2_ladder;
        _393 = frontier_phi_3_2_ladder_2;
    }
    float _419;
    float _421;
    float _423;
    if (_366 > 0.0)
    {
        float _406 = (1.0 - _370) / _366;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_406 < _388)
        {
            frontier_phi_8_5_ladder = _406;
            frontier_phi_8_5_ladder_1 = (fract(_406 * _360) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_406 * _365) + _369) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _388;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _391;
        }
        _419 = frontier_phi_8_5_ladder;
        _421 = frontier_phi_8_5_ladder_2;
        _423 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_366 < 0.0)
        {
            float _420 = ((-0.0) - _370) / _366;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_420 < _388)
            {
                frontier_phi_8_6_ladder_9_ladder = _420;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_420 * _360) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_420 * _365) + _369) + cbMtdParam._m0[22u].x) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _388;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _391;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _388;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _391;
        }
        _419 = frontier_phi_8_6_ladder;
        _421 = frontier_phi_8_6_ladder_2;
        _423 = frontier_phi_8_6_ladder_1;
    }
    float _427 = (_360 > 0.0) ? (cbMtdParam._m0[20u].z / _360) : 5000.0;
    float _440;
    float _441;
    if (_427 < _419)
    {
        _440 = ((_369 + cbMtdParam._m0[22u].x) + (_427 * _365)) * 0.16666667163372039794921875;
        _441 = (((_427 * _366) + _370) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _440 = _421;
        _441 = _423;
    }
    vec4 _443 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_440, _441));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _459 = (cbMtdParam._m0[19u].y * _445) * cbMtdParam._m0[16u].x;
    float _461 = (cbMtdParam._m0[19u].y * _446) * cbMtdParam._m0[16u].y;
    float _463 = (cbMtdParam._m0[19u].y * _447) * cbMtdParam._m0[16u].z;
    vec4 _490 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_15, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * ((cbMtdParam._m0[24u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((cbMtdParam._m0[24u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w)) + cbTextureTilingScale._m0[4u].w));
    float _495 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[21u].y;
    float _501 = ((_490.y * 0.5) + (-0.25)) * cbMtdParam._m0[21u].x;
    float _503 = (-0.0) - (cbMtdParam._m0[21u].x * ((_490.x * 0.5) + (-0.25)));
    float _504 = fract(_495);
    float _506 = fract(_495 + 0.5);
    vec4 _533 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_504 * _503) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_501 * _504) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _535 = _533.x;
    float _541 = ((texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_14, SS_WrapLinear), vec2((((_506 * _503) + TEXCOORD.x) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_501 * _506) + TEXCOORD.y) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w)).x - _535) * abs((_504 * 2.0) + (-1.0))) + _535;
    float _552 = ((cbMtdParam._m0[17u].w * 0.5) * cbMtdParam._m0[19u].w) / cbMtdParam._m0[18u].z;
    float _556 = fract(abs(_552));
    float _563 = sin(cbMtdParam._m0[21u].z);
    float _564 = cos(cbMtdParam._m0[21u].z);
    float _565 = TEXCOORD.z - cbMtdParam._m0[20u].y;
    float _566 = TEXCOORD.w - cbMtdParam._m0[20u].y;
    float _591 = (texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_16, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (fma(_566, (-0.0) - _563, _564 * _565) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (fma(_566, _564, _565 * _563) + cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[5u].w)).x - ((((_552 >= ((-0.0) - _552)) ? _556 : ((-0.0) - _556)) * cbMtdParam._m0[18u].z) - _541)) + cbMtdParam._m0[18u].w;
    float _592 = ceil(_591);
    float _2537 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0));
    float _613 = ((((cbMtdParam._m0[21u].w * _445) * cbMtdParam._m0[15u].x) - _459) * _593) + _459;
    float _614 = ((((cbMtdParam._m0[21u].w * _446) * cbMtdParam._m0[15u].y) - _461) * _593) + _461;
    float _615 = ((((cbMtdParam._m0[21u].w * _447) * cbMtdParam._m0[15u].z) - _463) * _593) + _463;
    float _619 = abs(cbMtdParam._m0[20u].w * _591);
    float _623 = (((_619 * cbMtdParam._m0[18u].y) - _541) * _619) + _541;
    float _2548 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
    vec4 _636 = texture(sampler2D(M_Interior_Transiton_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _651 = (cbMtdParam._m0[14u].x * _636.x) * cbMtdParam._m0[19u].x;
    float _652 = (cbMtdParam._m0[14u].y * _636.y) * cbMtdParam._m0[19u].x;
    float _653 = (cbMtdParam._m0[14u].z * _636.z) * cbMtdParam._m0[19u].x;
    float _660 = exp2(log2(_624) * cbMtdParam._m0[20u].x);
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _700 = _269 * _699;
    float _701 = _270 * _699;
    float _702 = _271 * _699;
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_708 * cbSceneParam._m0[86u].x, _709 * cbSceneParam._m0[86u].y));
    float _721 = _718.x * TEXCOORD_4;
    float _722 = (-0.0) - _700;
    float _723 = (-0.0) - _701;
    float _724 = (-0.0) - _702;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = (cbModelParam._m0[37u].x * ((((fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _818 = (cbModelParam._m0[37u].y * ((((fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _819 = (((((fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        _893 = _856 * (_822.z + (-0.5));
        _894 = _856 * (_822.y + (-0.5));
        _895 = _856 * (_822.x + (-0.5));
        _896 = _866 * (_829.z + (-0.5));
        _897 = _866 * (_829.y + (-0.5));
        _898 = _866 * (_829.x + (-0.5));
        _899 = _876 * (_836.z + (-0.5));
        _900 = _876 * (_836.y + (-0.5));
        _901 = _876 * (_836.x + (-0.5));
        _902 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        _903 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        _904 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    }
    else
    {
        _893 = _390;
        _894 = _390;
        _895 = _390;
        _896 = _390;
        _897 = _390;
        _898 = _390;
        _899 = _390;
        _900 = _390;
        _901 = _390;
        _902 = _390;
        _903 = _390;
        _904 = _390;
    }
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _957 = (cbModelParam._m0[38u].x * ((((fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _958 = (cbModelParam._m0[38u].y * ((((fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _959 = (((((fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        _1031 = _994 * (_961.z + (-0.5));
        _1032 = _994 * (_961.y + (-0.5));
        _1033 = _994 * (_961.x + (-0.5));
        _1034 = _1004 * (_968.z + (-0.5));
        _1035 = _1004 * (_968.y + (-0.5));
        _1036 = _1004 * (_968.x + (-0.5));
        _1037 = _1014 * (_975.z + (-0.5));
        _1038 = _1014 * (_975.y + (-0.5));
        _1039 = _1014 * (_975.x + (-0.5));
        _1040 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        _1041 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        _1042 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    }
    else
    {
        _1031 = _390;
        _1032 = _390;
        _1033 = _390;
        _1034 = _390;
        _1035 = _390;
        _1036 = _390;
        _1037 = _390;
        _1038 = _390;
        _1039 = _390;
        _1040 = _390;
        _1041 = _390;
        _1042 = _390;
    }
    float _1057 = _700 * (-0.5);
    float _1058 = _701 * (-0.5);
    float _1059 = _702 * (-0.5);
    float _1060 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1063 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1066 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1101;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1073 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_893, _896, _899, _902));
        float _1077 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_894, _897, _900, _903));
        float _1081 = dot(vec4(_1057, _1058, _1059, 1.0), vec4(_895, _898, _901, _904));
        float _1088 = dot(vec4(cbModelParam._m0[39u]), vec4(_1057, _1058, _1059, 1.0));
        _1101 = dot(vec3(isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)), isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)), isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1088) ? 0.0 : (isnan(0.0) ? _1088 : max(0.0, _1088))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1101 = 1.0;
    }
    float _1112;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1103 = dot(vec4(cbModelParam._m0[40u]), vec4(_1057, _1058, _1059, 1.0));
        _1112 = dot(vec3(isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)), isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)), isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1103) ? 0.0 : (isnan(0.0) ? _1103 : max(0.0, _1103))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1112 = 1.0;
    }
    float _1116 = (_1112 * cbModelParam._m0[1u].x) + (_1101 * (1.0 - cbModelParam._m0[1u].x));
    float _1122 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1204;
    float _1206;
    float _1208;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1171 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1175 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1179 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1182 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1185 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1188 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1214;
        if (_1182 > 0.0)
        {
            _1214 = abs((1.0 - _1171) / _1182);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1182 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1171 + 1.0) / _1182);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1214 = frontier_phi_26_24_ladder;
        }
        float _1512;
        if (_1185 > 0.0)
        {
            _1512 = abs((1.0 - _1175) / _1185);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1185 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1175 + 1.0) / _1185);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1512 = frontier_phi_35_31_ladder;
        }
        float _1826;
        if (_1188 > 0.0)
        {
            _1826 = abs((1.0 - _1179) / _1188);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1188 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1179 + 1.0) / _1188);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1826 = frontier_phi_49_42_ladder;
        }
        float _1828 = isnan(_1512) ? _1214 : (isnan(_1214) ? _1512 : min(_1214, _1512));
        float _1829 = isnan(_1826) ? _1828 : (isnan(_1828) ? _1826 : min(_1828, _1826));
        float _1833 = (_1829 * _1182) + _1171;
        float _1834 = (_1829 * _1185) + _1175;
        float _1835 = (_1829 * _1188) + _1179;
        float _1836 = _1829 * 9.9999997473787516355514526367188e-05;
        float _1837 = (-1.0) - _1836;
        float _1839 = _1836 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1835 > _1839) || ((_1835 < _1837) || ((_1834 > _1839) || ((_1834 < _1837) || ((_1833 < _1837) || (_1833 > _1839))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1835, cbModelParam._m0[9u].z, fma(_1834, cbModelParam._m0[9u].y, _1833 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1835, cbModelParam._m0[10u].z, fma(_1834, cbModelParam._m0[10u].y, _1833 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1835, cbModelParam._m0[11u].z, fma(_1834, cbModelParam._m0[11u].y, _1833 * cbModelParam._m0[11u].x))), _1122);
            frontier_phi_25_49_ladder = _1946.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1946.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1946.x * cbModelParam._m0[1u].y;
        }
        _1204 = frontier_phi_25_49_ladder_2;
        _1206 = frontier_phi_25_49_ladder_1;
        _1208 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1192 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1122);
        _1204 = _1192.x * cbModelParam._m0[1u].y;
        _1206 = _1192.y * cbModelParam._m0[1u].y;
        _1208 = _1192.z * cbModelParam._m0[1u].y;
    }
    float _1211 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1299;
    float _1301;
    float _1303;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1263 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1267 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1271 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1274 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1277 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1280 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1517;
        if (_1274 > 0.0)
        {
            _1517 = abs((1.0 - _1263) / _1274);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1263 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1517 = frontier_phi_37_33_ladder;
        }
        float _1852;
        if (_1277 > 0.0)
        {
            _1852 = abs((1.0 - _1267) / _1277);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1267 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1852 = frontier_phi_51_44_ladder;
        }
        float _2003;
        if (_1280 > 0.0)
        {
            _2003 = abs((1.0 - _1271) / _1280);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1271 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2003 = frontier_phi_65_60_ladder;
        }
        float _2005 = isnan(_1852) ? _1517 : (isnan(_1517) ? _1852 : min(_1517, _1852));
        float _2006 = isnan(_2003) ? _2005 : (isnan(_2005) ? _2003 : min(_2005, _2003));
        float _2010 = (_2006 * _1274) + _1263;
        float _2011 = (_2006 * _1277) + _1267;
        float _2012 = (_2006 * _1280) + _1271;
        float _2013 = _2006 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2013;
        float _2016 = _2013 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2012 > _2016) || ((_2012 < _2014) || ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 < _2014) || (_2010 > _2016))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2012, cbModelParam._m0[17u].z, fma(_2011, cbModelParam._m0[17u].y, _2010 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2012, cbModelParam._m0[18u].z, fma(_2011, cbModelParam._m0[18u].y, _2010 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2012, cbModelParam._m0[19u].z, fma(_2011, cbModelParam._m0[19u].y, _2010 * cbModelParam._m0[19u].x))), _1211);
            frontier_phi_34_65_ladder = _2172.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2172.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2172.x * cbModelParam._m0[1u].z;
        }
        _1299 = frontier_phi_34_65_ladder_2;
        _1301 = frontier_phi_34_65_ladder_1;
        _1303 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1283 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1211);
        _1299 = _1283.x * cbModelParam._m0[1u].z;
        _1301 = _1283.y * cbModelParam._m0[1u].z;
        _1303 = _1283.z * cbModelParam._m0[1u].z;
    }
    float _1315 = _721 * 0.01200000010430812835693359375;
    float _1317 = _1315 * ((cbModelParam._m0[1u].w * (_1299 - _1204)) + _1204);
    float _1318 = _1315 * ((cbModelParam._m0[1u].w * (_1301 - _1206)) + _1206);
    float _1319 = _1315 * ((cbModelParam._m0[1u].w * (_1303 - _1208)) + _1208);
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, _1317 * cbSceneParam._m0[91u].x));
    vec4 _1354 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_708, _709));
    float _1356 = _1354.w;
    uint _1372 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1376 = floatBitsToUint(cbInstanceData._m0[_1372 + 5u]);
    uint _1378 = _1376.x * 14u;
    uint _1379 = _1378 + 13u;
    float _1384 = _721 + (-1.0);
    float _1387 = (cbLight._m0[_1379].x * _1384) + 1.0;
    float _1388 = (cbLight._m0[_1379].y * _1384) + 1.0;
    uint _1389 = _1378 + 8u;
    float _1400 = cbLight._m0[_1378].x + _700;
    float _1401 = cbLight._m0[_1378].y + _701;
    float _1402 = cbLight._m0[_1378].z + _702;
    float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
    float _1410 = dot(vec3(0.0), vec3(cbLight._m0[_1378].xyz));
    float _2674 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1413 = isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0));
    float _1414 = dot(vec3(0.0), vec3(_700, _701, _702));
    float _2685 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1417 = isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0));
    float _1418 = dot(vec3(cbLight._m0[_1378].xyz), vec3(_1400 * _1406, _1401 * _1406, _1402 * _1406));
    float _2696 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
    float _1429 = (exp2(log2(1.0 - (isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1435 = (0.5 / ((_1413 + 9.9999999392252902907785028219223e-09) + _1417)) * _1413;
    float _2707 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    float _1437 = (isnan(1.0) ? _2707 : (isnan(_2707) ? 1.0 : min(_2707, 1.0))) * 0.31831014156341552734375;
    float _1439 = isnan(1.0) ? _1387 : (isnan(_1387) ? 1.0 : min(_1387, 1.0));
    uint _1452 = _1378 + 9u;
    uint _1458 = _1378 | 1u;
    float _1464 = cbLight._m0[_1458].x + _700;
    float _1465 = cbLight._m0[_1458].y + _701;
    float _1466 = cbLight._m0[_1458].z + _702;
    float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
    float _1474 = dot(vec3(0.0), vec3(cbLight._m0[_1458].xyz));
    float _2723 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _1477 = isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0));
    float _1478 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_1464 * _1470, _1465 * _1470, _1466 * _1470));
    float _2734 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
    float _1487 = (exp2(log2(1.0 - (isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1491 = (0.5 / ((_1477 + 9.9999999392252902907785028219223e-09) + _1417)) * _1477;
    float _2745 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1493 = (isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0))) * 0.31831014156341552734375;
    float _1494 = isnan(1.0) ? _1388 : (isnan(_1388) ? 1.0 : min(_1388, 1.0));
    float _1504 = (((_1487 * cbLight._m0[_1452].x) * _1493) * _1494) + ((((cbLight._m0[_1389].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1356))) * _1429) * _1437) * _1439);
    float _1505 = (((_1487 * cbLight._m0[_1452].y) * _1493) * _1494) + ((((cbLight._m0[_1389].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1356))) * _1429) * _1437) * _1439);
    float _1506 = (((_1487 * cbLight._m0[_1452].z) * _1493) * _1494) + ((((cbLight._m0[_1389].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1356))) * _1429) * _1437) * _1439);
    float _1623;
    float _1625;
    float _1627;
    if (_1376.y == 0u)
    {
        float _1562 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1562;
        float _1564 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1562;
        float _1565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1562;
        uvec4 _1577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1578 = _1577.x;
        uint _1589 = uint((float(_1577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _1578))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _1578)));
        float _1599 = (log2(_1565 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1600 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        uint _1603 = uint(isnan(14.0) ? _1600 : (isnan(_1600) ? 14.0 : min(_1600, 14.0)));
        uvec4 _1609 = texelFetch(g_lightClusterGridBuffer, int(((_1603 << 2u) + (_1589 << 6u)) >> 2u));
        uint _1610 = _1609.x;
        uint _1611 = _1577.z;
        float _1710;
        float _1712;
        float _1714;
        if (((((1u << ((_1611 >> 4u) & 15u)) + 4294967295u) & _1610) == 0u) || ((_1611 & 240u) == 0u))
        {
            _1710 = 0.0;
            _1712 = 0.0;
            _1714 = 0.0;
        }
        else
        {
            float _1711;
            float _1713;
            float _1715;
            float _1877 = 0.0;
            float _1878 = 0.0;
            float _1879 = 0.0;
            uint _1880 = 0u;
            uint _1889;
            bool _1890;
            for (;;)
            {
                _1889 = texelFetch(g_lightClassification, int((((_1603 << 5u) + (_1589 << 9u)) + (_1880 << 2u)) >> 2u)).x;
                _1890 = _1889 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1890)
                {
                    frontier_phi_62_pred = _1879;
                    frontier_phi_62_pred_1 = _1878;
                    frontier_phi_62_pred_2 = _1877;
                }
                else
                {
                    float _2043;
                    float _2044;
                    float _2045;
                    uint _2046;
                    _2043 = _1877;
                    _2044 = _1878;
                    _2045 = _1879;
                    _2046 = _1889;
                    float _1955;
                    float _1956;
                    float _1957;
                    for (;;)
                    {
                        uint _2050 = uint(findLSB(_2046)) + (_1880 << 5u);
                        uint _2047 = (_2046 + 4294967295u) & _2046;
                        uint _2052 = _2050 * 48u;
                        vec4 _2066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2052)).x, texelFetch(g_PointLightRenderingBuffer, int(_2052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2052 + 3u)).x));
                        uint _2083 = (_2050 * 48u) + 8u;
                        vec3 _2094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2083)).x, texelFetch(g_PointLightRenderingBuffer, int(_2083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2083 + 2u)).x));
                        float _2098 = _2066.x - _1563;
                        float _2099 = _2066.y - _1564;
                        float _2100 = _2066.z - _1565;
                        float _2101 = dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100));
                        float _2104 = inversesqrt(_2101);
                        float _2113 = 1.0 - (_2101 * _2066.w);
                        float _2771 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
                        float _2115 = sqrt(_2101) * uintBitsToFloat(uvec4(_2073, _2074, _2075, texelFetch(g_PointLightRenderingBuffer, int(((_2050 * 48u) + 4u) + 3u)).x)).w;
                        float _2118 = 1.39999997615814208984375 / (_2115 + 1.39999997615814208984375);
                        float _2119 = _2118 * _2118;
                        float _2122 = ((1.0 - _2119) * dot(vec3(0.0), vec3(_2104 * _2098, _2104 * _2099, _2104 * _2100))) + _2119;
                        float _2124 = (-0.0) - _1563;
                        float _2125 = (-0.0) - _1564;
                        float _2126 = (-0.0) - _1565;
                        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
                        float _2134 = dot(vec3(0.0), vec3(_2130 * _2124, _2130 * _2125, _2130 * _2126));
                        float _2782 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
                        float _2793 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
                        float _2138 = isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0));
                        float _2142 = (0.5 / (((isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0))) + 9.9999999392252902907785028219223e-09) + _2138)) * _2138;
                        float _2804 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
                        float _2151 = (((isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0))) * 3.1415927410125732421875) / (((_2115 * _2115) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0)));
                        _1955 = (_2151 * _2094.x) + _2043;
                        _1956 = (_2151 * _2094.y) + _2044;
                        _1957 = (_2151 * _2094.z) + _2045;
                        if (_2047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2043 = _1955;
                            _2044 = _1956;
                            _2045 = _1957;
                            _2046 = _2047;
                        }
                    }
                    frontier_phi_62_pred = _1957;
                    frontier_phi_62_pred_1 = _1956;
                    frontier_phi_62_pred_2 = _1955;
                }
                _1715 = frontier_phi_62_pred;
                _1713 = frontier_phi_62_pred_1;
                _1711 = frontier_phi_62_pred_2;
                uint _1881 = _1880 + 1u;
                if (_1881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1877 = _1711;
                    _1878 = _1713;
                    _1879 = _1715;
                    _1880 = _1881;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1710 = _1711;
            _1712 = _1713;
            _1714 = _1715;
        }
        uvec4 _1718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1719 = _1718.z;
        uint _1721 = (_1719 >> 8u) & 15u;
        float _1857;
        float _1859;
        float _1861;
        if (((4294967295u << _1721) & _1610) == 0u)
        {
            _1857 = _1710;
            _1859 = _1712;
            _1861 = _1714;
        }
        else
        {
            float _1873 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1721 < ((_1719 >> 12u) & 15u))
            {
                float _1858;
                float _1860;
                float _1862;
                float _2029 = _1710;
                float _2030 = _1712;
                float _2031 = _1714;
                uint _2032 = _1721;
                uint _2041;
                bool _2042;
                for (;;)
                {
                    _2041 = texelFetch(g_lightClassification, int((((_1603 << 5u) + (_1589 << 9u)) + (_2032 << 2u)) >> 2u)).x;
                    _2042 = _2041 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_2042)
                    {
                        frontier_phi_71_pred = _2031;
                        frontier_phi_71_pred_1 = _2030;
                        frontier_phi_71_pred_2 = _2029;
                    }
                    else
                    {
                        float _2177;
                        float _2178;
                        float _2179;
                        float _2398;
                        float _2399;
                        float _2400;
                        float _2187 = _2029;
                        float _2188 = _2030;
                        float _2189 = _2031;
                        uint _2190 = _2041;
                        uint _2191;
                        uint _2201;
                        vec4 _2216;
                        float _2217;
                        vec3 _2229;
                        vec4 _2244;
                        vec4 _2259;
                        float _2305;
                        bool _2306;
                        for (;;)
                        {
                            _2201 = ((_2032 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2190));
                            _2191 = (_2190 + 4294967295u) & _2190;
                            uint _2203 = _2201 * 40u;
                            _2216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2203 + 3u)).x));
                            _2217 = _2216.w;
                            uint _2219 = (_2201 * 40u) + 8u;
                            _2229 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 2u)).x));
                            uint _2231 = (_2201 * 40u) + 16u;
                            _2244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 3u)).x));
                            uint _2246 = (_2201 * 40u) + 20u;
                            _2259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2246 + 3u)).x));
                            uint _2261 = (_2201 * 40u) + 24u;
                            vec4 _2274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2261 + 3u)).x));
                            uint _2280 = (_2201 * 40u) + 28u;
                            vec4 _2293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2280 + 3u)).x));
                            _2305 = fma(_1565, _2293.z, fma(_1564, _2293.y, _2293.x * _1563)) + _2293.w;
                            _2306 = !((fma(_1565, _2274.z, fma(_1564, _2274.y, _2274.x * _1563)) + _2274.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2306)
                            {
                                float _2340 = _2216.x - _1563;
                                float _2341 = _2216.y - _1564;
                                float _2342 = _2216.z - _1565;
                                float _2343 = dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342));
                                float _2346 = inversesqrt(_2343);
                                float _2353 = 1.0 - (_2343 / (_2217 * _2217));
                                float _2815 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
                                float _2355 = sqrt(_2343) * uintBitsToFloat(uvec4(_2309, _2310, _2311, texelFetch(g_SpotLightRenderingBuffer, int(((_2201 * 40u) + 4u) + 3u)).x)).w;
                                float _2357 = 1.39999997615814208984375 / (_2355 + 1.39999997615814208984375);
                                float _2358 = _2357 * _2357;
                                float _2361 = (fma(_1565, _2244.z, fma(_1564, _2244.y, _2244.x * _1563)) + _2244.w) / _2305;
                                float _2362 = (fma(_1565, _2259.z, fma(_1564, _2259.y, _2259.x * _1563)) + _2259.w) / _2305;
                                float _2366 = 1.0 - dot(vec2(_2361, _2362), vec2(_2361, _2362));
                                float _2826 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
                                float _2374 = dot(vec3(0.0), vec3((-0.0) - (_1563 * _1873), (-0.0) - (_1564 * _1873), (-0.0) - (_1565 * _1873)));
                                float _2837 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                                float _2382 = ((1.0 - _2358) * dot(vec3(0.0), vec3(_2346 * _2340, _2346 * _2341, _2346 * _2342))) + _2358;
                                float _2848 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
                                float _2383 = isnan(1.0) ? _2848 : (isnan(_2848) ? 1.0 : min(_2848, 1.0));
                                float _2387 = (0.5 / (((isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0))) + 9.9999999392252902907785028219223e-09) + _2383)) * _2383;
                                float _2859 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
                                float _2394 = ((isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0))) * (isnan(1.0) ? _2815 : (isnan(_2815) ? 1.0 : min(_2815, 1.0)))) * (((isnan(1.0) ? _2859 : (isnan(_2859) ? 1.0 : min(_2859, 1.0))) * 3.1415927410125732421875) / (((_2355 * _2355) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2394 * _2229.z;
                                frontier_phi_77_pred_1 = _2394 * _2229.x;
                                frontier_phi_77_pred_2 = _2394 * _2229.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2400 = frontier_phi_77_pred;
                            _2398 = frontier_phi_77_pred_1;
                            _2399 = frontier_phi_77_pred_2;
                            _2177 = _2398 + _2187;
                            _2178 = _2399 + _2188;
                            _2179 = _2400 + _2189;
                            if (_2191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2187 = _2177;
                                _2188 = _2178;
                                _2189 = _2179;
                                _2190 = _2191;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2179;
                        frontier_phi_71_pred_1 = _2178;
                        frontier_phi_71_pred_2 = _2177;
                    }
                    _1862 = frontier_phi_71_pred;
                    _1860 = frontier_phi_71_pred_1;
                    _1858 = frontier_phi_71_pred_2;
                    uint _2033 = _2032 + 1u;
                    if (_2033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2029 = _1858;
                        _2030 = _1860;
                        _2031 = _1862;
                        _2032 = _2033;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1860;
                frontier_phi_53_54_ladder_1 = _1858;
                frontier_phi_53_54_ladder_2 = _1862;
            }
            else
            {
                frontier_phi_53_54_ladder = _1712;
                frontier_phi_53_54_ladder_1 = _1710;
                frontier_phi_53_54_ladder_2 = _1714;
            }
            _1857 = frontier_phi_53_54_ladder_1;
            _1859 = frontier_phi_53_54_ladder;
            _1861 = frontier_phi_53_54_ladder_2;
        }
        float _1866 = isnan(1.0) ? _721 : (isnan(_721) ? 1.0 : min(_721, 1.0));
        _1623 = ((_1857 * 0.039999999105930328369140625) * _1866) + _1504;
        _1625 = ((_1859 * 0.039999999105930328369140625) * _1866) + _1505;
        _1627 = ((_1861 * 0.039999999105930328369140625) * _1866) + _1506;
    }
    else
    {
        _1623 = _1504;
        _1625 = _1505;
        _1627 = _1506;
    }
    uint _1634 = (_1372 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1640 = (cbSceneParam._m0[72u].y * ((_660 * ((_651 - _613) - (_651 * _624))) + _613)) * cbInstanceData._m0[_1634].x;
    float _1641 = (cbSceneParam._m0[72u].y * ((_660 * ((_652 - _614) - (_652 * _624))) + _614)) * cbInstanceData._m0[_1634].y;
    float _1642 = (((_660 * ((_653 - _615) - (_653 * _624))) + _615) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_1634].z;
    float _1649 = _1640 + ((_1623 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _1116)) * cbPerFrame._m0[3u].x);
    float _1650 = _1641 + ((_1625 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _1116)) * cbPerFrame._m0[3u].x);
    float _1651 = _1642 + ((_1627 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _1116)) * cbPerFrame._m0[3u].x);
    float _2890 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1664 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    uint _1665 = _1372 + 6u;
    float _1673 = _708 / cbSceneParam._m0[86u].x;
    float _1674 = _709 / cbSceneParam._m0[86u].y;
    vec4 _1688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1673, _1674, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1690 = _1688.x;
    float _1691 = _1688.y;
    float _1692 = _1688.z;
    float _1693 = _1688.w;
    float _1767;
    float _1769;
    float _1771;
    float _1773;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _1729 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _1730 = _1729 / _695;
        float _1741 = _1730 * _269;
        float _1742 = _270 * _1730;
        float _1743 = (-0.0) - _1742;
        float _1744 = _1730 * _271;
        float _1746 = (cbSceneParam._m0[77u].w * _1743) / _1729;
        float _1747 = _1746 + cbSceneParam._m0[79u].w;
        float _1748 = cbSceneParam._m0[79u].w - _1742;
        float _1754 = sqrt(((_1741 * _1741) + (_1742 * _1742)) + (_1744 * _1744));
        float _1757 = (1.0 - (cbSceneParam._m0[77u].w / _1729)) * _1754;
        float _1763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1965;
        if (abs((_1743 - _1746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1965 = ((((_1747 > 0.0) ? exp2(_1763 * _1747) : (2.0 - exp2(_1765 * _1747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1757;
        }
        else
        {
            float _1903 = 1.0 / cbSceneParam._m0[80u].x;
            float _1904 = isnan(_1748) ? _1747 : (isnan(_1747) ? _1748 : max(_1747, _1748));
            float _1905 = isnan(_1748) ? _1747 : (isnan(_1747) ? _1748 : min(_1747, _1748));
            float _1914 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : min(_1904, 0.0));
            float _1915 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : min(_1905, 0.0));
            _1965 = ((abs(_1754 / _1743) * cbSceneParam._m0[80u].y) * ((((_1914 - _1915) * 2.0) - ((exp2(_1763 * (isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)))) - exp2(_1763 * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))))) * _1903)) - ((exp2(_1765 * _1914) - exp2(_1765 * _1915)) * _1903))) + (_1757 * cbSceneParam._m0[80u].z);
        }
        vec4 _1967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1673, _1674, 1.0), 0.0);
        float _1976 = exp2((_1965 * (-1.44269502162933349609375)) * (1.0 - _1967.w));
        float _1977 = log2(_1976);
        float _1993 = log2(_1693);
        _1767 = (exp2(_1993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1977 * cbSceneParam._m0[78u].x)) * _1967.x) / cbSceneParam._m0[78u].x)) + _1690;
        _1769 = (exp2(_1993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1977 * cbSceneParam._m0[78u].y)) * _1967.y) / cbSceneParam._m0[78u].y)) + _1691;
        _1771 = (exp2(_1993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1977 * cbSceneParam._m0[78u].z)) * _1967.z) / cbSceneParam._m0[78u].z)) + _1692;
        _1773 = _1976 * _1693;
    }
    else
    {
        _1767 = _1690;
        _1769 = _1691;
        _1771 = _1692;
        _1773 = _1693;
    }
    float _1784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1785 = _1784 == 3.0;
    float _1787 = log2(_1773);
    float _1791 = exp2(_1787 * cbSceneParam._m0[78u].x);
    float _1792 = exp2(_1787 * cbSceneParam._m0[78u].y);
    float _1793 = exp2(_1787 * cbSceneParam._m0[78u].z);
    float _1794 = _1791 * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    float _1795 = _1792 * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    float _1796 = _1793 * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    float _1805 = (_1784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1805 * (_1785 ? _1794 : (_1794 + (cbSceneParam._m0[72u].w * _1767)));
    SV_Target.y = _1805 * (_1785 ? _1795 : (_1795 + (cbSceneParam._m0[72u].w * _1769)));
    SV_Target.z = _1805 * (_1785 ? _1796 : (_1796 + (cbSceneParam._m0[72u].w * _1771)));
    SV_Target.w = cbInstanceData._m0[_1665].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1640) * _1664) * _1791) * _1805;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1641) * _1664) * _1792) * _1805;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1642) * _1664) * _1793) * _1805;
    SV_Target_1.w = cbInstanceData._m0[_1665].w;
}


