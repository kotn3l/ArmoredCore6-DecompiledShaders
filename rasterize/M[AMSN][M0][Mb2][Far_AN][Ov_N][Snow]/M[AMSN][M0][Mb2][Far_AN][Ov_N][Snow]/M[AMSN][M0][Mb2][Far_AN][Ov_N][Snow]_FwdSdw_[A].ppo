#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1124;
float _3774;
float _3775;
float _3776;
float _3777;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _256 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3786 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _257 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _270 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _273 = _270.x;
    float _274 = _270.y;
    float _275 = _270.z;
    vec4 _288 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _315 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _317 = _315.x;
    float _318 = _315.y;
    vec4 _331 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3797 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _335 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _338 = 3.0 - (_335 * 2.0);
    float _340 = _335 * _335;
    float _354 = (((_288.x - _273) * _257) + _273) + (((_317 + (-0.5)) + ((_340 * (_331.x - _317)) * _338)) * cbMtdParam._m0[12u].y);
    float _355 = (((_288.y - _274) * _257) + _274) + (((_318 + (-0.5)) + ((_340 * (_331.y - _318)) * _338)) * cbMtdParam._m0[12u].y);
    float _358 = (_354 * 2.0) + (-1.0);
    float _360 = (_355 * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3808 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    float _369 = fma(_366, _230, fma(_360, _223, _358 * _209));
    float _372 = fma(_366, _231, fma(_360, _224, _358 * _210));
    float _375 = fma(_366, _232, fma(_360, _225, _358 * _211));
    float _384 = exp2(log2(inversesqrt(dot(vec3(_369, _372, _375), vec3(_369, _372, _375))) * _372) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3819 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _387 = 1.0 - _385;
    float _391 = (cbMtdParam._m0[11u].w * ((_385 + 1.0) - _387)) + _387;
    float _392 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = (isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0))) + TEXCOORD.w;
    float _395 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _413 = ((1.0 - (isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _414 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _421 = (((1.0 - (isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3860 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    vec4 _440 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _442 = _440.x;
    float _443 = _440.y;
    float _444 = _440.z;
    vec4 _457 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _471 = (((_457.x - _442) * _257) + _442) * cbMtdParam._m0[10u].x;
    float _472 = (((_457.y - _443) * _257) + _443) * cbMtdParam._m0[10u].y;
    float _473 = (((_457.z - _444) * _257) + _444) * cbMtdParam._m0[10u].z;
    float _480 = ((cbMtdParam._m0[9u].x - _471) * _422) + _471;
    float _481 = ((cbMtdParam._m0[9u].y - _472) * _422) + _472;
    float _482 = ((cbMtdParam._m0[9u].z - _473) * _422) + _473;
    float _484 = cbMtdParam._m0[12u].z * (((_288.z - _275) * _257) + _275);
    vec4 _496 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    vec4 _512 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _521 = cbMtdParam._m0[11u].z * _422;
    float _528 = (_521 * ((_498 - _354) + ((_512.x - _498) * _257))) + _354;
    float _529 = (_521 * ((_499 - _355) + ((_512.y - _499) * _257))) + _355;
    float _542 = (((((_528 * cbMtdParam._m0[13u].y) - _528) * _257) + _528) * 2.0) + (-1.0);
    float _543 = (((((_529 * cbMtdParam._m0[13u].z) - _529) * _257) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3871 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))));
    float _552 = fma(_549, _230, fma(_543, _223, _542 * _209));
    float _555 = fma(_549, _231, fma(_543, _224, _542 * _210));
    float _558 = fma(_549, _232, fma(_543, _225, _542 * _211));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3882 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _566 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3904 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3915 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    vec4 _649 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _651 = _649.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _804 = sqrt(((_635 * _635) + (_636 * _636)) + (_637 * _637));
        float _810 = (cbMatDynParam._m0[5u].x * _804) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _815 = (cbMatDynParam._m0[5u].z * _804) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _811)) + _811) < ((_651 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _684 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _687 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _701 = _700 + 9u;
    uint _702 = _701 + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3948 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _725 = _722.x * TEXCOORD.z;
    float _726 = dot(vec3(_563, _564, _565), vec3(_642, _643, _644));
    float _729 = _726 * 2.0;
    float _733 = (_729 * _563) - _642;
    float _734 = (_729 * _564) - _643;
    float _735 = (_729 * _565) - _644;
    float _739 = abs(dot(vec3(_642, _643, _644), vec3(_563, _564, _565)));
    float _3981 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _741 = sqrt(_566);
    float _753 = exp2((_741 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_741 * 3.0));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_793, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785));
        float _853 = fma(_793, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785));
        float _857 = fma(_793, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785));
        float _881 = _785 + _563;
        float _882 = _789 + _564;
        float _883 = _793 + _565;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _849;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _853;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _857;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_563, _564, _565), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _4029 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_563, _564, _565), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _4062 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_563, _564, _565), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4095 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_793, cbModelParam._m0[30u].z, fma(_789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _785));
        float _1171 = fma(_793, cbModelParam._m0[31u].z, fma(_789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _785));
        float _1175 = fma(_793, cbModelParam._m0[32u].z, fma(_789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _785));
        float _1198 = _785 + _563;
        float _1199 = _789 + _564;
        float _1200 = _793 + _565;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_563, _564, _565), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4158 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_563, _564, _565), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4191 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_563, _564, _565), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4224 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = _1124;
        _1446 = _1124;
        _1447 = _1124;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1136)) + _1136;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1137)) + _1137;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1138)) + _1138;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _733 * 0.5;
    float _1505 = _734 * 0.5;
    float _1506 = _735 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_793, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_793, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_793, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_735, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733));
        float _1635 = fma(_735, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733));
        float _1638 = fma(_735, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1666 = frontier_phi_19_17_ladder;
        }
        float _1839;
        if (_1635 > 0.0)
        {
            _1839 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1839 = frontier_phi_28_24_ladder;
        }
        float _2134;
        if (_1638 > 0.0)
        {
            _2134 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2134 = frontier_phi_40_35_ladder;
        }
        float _2136 = isnan(_1839) ? _1666 : (isnan(_1666) ? _1839 : min(_1666, _1839));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1632) + _1621;
        float _2142 = (_2137 * _1635) + _1625;
        float _2143 = (_2137 * _1638) + _1629;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_18_40_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_18_40_ladder_2;
        _1656 = frontier_phi_18_40_ladder_1;
        _1658 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_733, _734, _735), _1573);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_793, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_793, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_793, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_735, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733));
        float _1734 = fma(_735, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733));
        float _1737 = fma(_735, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733));
        float _1844;
        if (_1731 > 0.0)
        {
            _1844 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1844 = frontier_phi_30_26_ladder;
        }
        float _2161;
        if (_1734 > 0.0)
        {
            _2161 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2161 = frontier_phi_42_37_ladder;
        }
        float _2488;
        if (_1737 > 0.0)
        {
            _2488 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2488 = frontier_phi_52_49_ladder;
        }
        float _2490 = isnan(_2161) ? _1844 : (isnan(_1844) ? _2161 : min(_1844, _2161));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1731) + _1720;
        float _2496 = (_2491 * _1734) + _1724;
        float _2497 = (_2491 * _1737) + _1728;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_27_52_ladder = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_27_52_ladder_2;
        _1758 = frontier_phi_27_52_ladder_1;
        _1760 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_733, _734, _735), _1663);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1772 = ((((1.0 - _753) * ((_741 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_753 * _741)) * _725;
    float _1773 = _1772 * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1774 = _1772 * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1775 = _1772 * ((cbModelParam._m0[1u].w * (_1760 - _1658)) + _1658);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1831 = _1818 / _1830;
    float _1832 = _1822 / _1830;
    float _1833 = _1826 / _1830;
    float _1980;
    float _1981;
    float _1982;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1860 = ((uint(_1833 > cbSceneParam._m0[59u].y) + uint(_1833 > cbSceneParam._m0[59u].x)) + uint(_1833 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1861 = _1860 + 43u;
        uint _1869 = _1860 + 44u;
        uint _1877 = _1860 + 45u;
        uint _1885 = _1860 + 46u;
        float _1896 = fma(_1830, cbSceneParam._m0[_1861].w, fma(_1826, cbSceneParam._m0[_1861].z, fma(_1822, cbSceneParam._m0[_1861].y, _1818 * cbSceneParam._m0[_1861].x)));
        float _1900 = fma(_1830, cbSceneParam._m0[_1869].w, fma(_1826, cbSceneParam._m0[_1869].z, fma(_1822, cbSceneParam._m0[_1869].y, _1818 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1830, cbSceneParam._m0[_1885].w, fma(_1826, cbSceneParam._m0[_1885].z, fma(_1822, cbSceneParam._m0[_1885].y, _1818 * cbSceneParam._m0[_1885].x)));
        float _1913 = cbSceneParam._m0[33u].z * _1908;
        float _1915 = cbSceneParam._m0[33u].w * _1908;
        float _1918 = fma(_1830, cbSceneParam._m0[_1877].w, fma(_1826, cbSceneParam._m0[_1877].z, fma(_1822, cbSceneParam._m0[_1877].y, _1818 * cbSceneParam._m0[_1877].x))) / _1908;
        float _1966 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
        float _4350 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1973 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 + _1896) / _1908, (_1915 + _1900) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1896) / _1908, (_1900 - _1913) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1913) / _1908, (_1900 - _1915) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1915) / _1908, (_1913 + _1900) / _1908), _1918), 0.0)).x), vec4(0.25)));
        _1980 = 1.0 - (_1973 * cbSceneParam._m0[34u].x);
        _1981 = 1.0 - (_1973 * cbSceneParam._m0[34u].y);
        _1982 = 1.0 - (_1973 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1980 = 1.0;
        _1981 = 1.0;
        _1982 = 1.0;
    }
    float _2046;
    float _2048;
    float _2050;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2034 = fma(_1830, cbSceneParam._m0[63u].w, fma(_1826, cbSceneParam._m0[63u].z, fma(_1822, cbSceneParam._m0[63u].y, _1818 * cbSceneParam._m0[63u].x)));
        float _2035 = fma(_1830, cbSceneParam._m0[60u].w, fma(_1826, cbSceneParam._m0[60u].z, fma(_1822, cbSceneParam._m0[60u].y, _1818 * cbSceneParam._m0[60u].x))) / _2034;
        float _2036 = fma(_1830, cbSceneParam._m0[61u].w, fma(_1826, cbSceneParam._m0[61u].z, fma(_1822, cbSceneParam._m0[61u].y, _1818 * cbSceneParam._m0[61u].x))) / _2034;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2035 >= cbSceneParam._m0[64u].x) && (_2036 >= cbSceneParam._m0[64u].y)) && (_2035 <= cbSceneParam._m0[64u].z)) && (_2036 <= cbSceneParam._m0[64u].w))
        {
            float _2174 = fma(_1830, cbSceneParam._m0[62u].w, fma(_1826, cbSceneParam._m0[62u].z, fma(_1822, cbSceneParam._m0[62u].y, _1818 * cbSceneParam._m0[62u].x))) / _2034;
            float _2178 = isnan(cbSceneParam._m0[41u].w) ? _2174 : (isnan(_2174) ? cbSceneParam._m0[41u].w : max(_2174, cbSceneParam._m0[41u].w));
            float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
            float _4366 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
            float _2228 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2035, cbSceneParam._m0[33u].w + _2036), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2035, _2036 - cbSceneParam._m0[33u].z), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].z, _2036 - cbSceneParam._m0[33u].w), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2036), _2178), 0.0)).x), vec4(0.25)));
            float _2232 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
            float _2233 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
            float _2234 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2233) ? _1981 : (isnan(_1981) ? _2233 : min(_1981, _2233));
            frontier_phi_39_38_ladder_1 = isnan(_2232) ? _1980 : (isnan(_1980) ? _2232 : min(_1980, _2232));
            frontier_phi_39_38_ladder_2 = isnan(_2234) ? _1982 : (isnan(_1982) ? _2234 : min(_1982, _2234));
        }
        else
        {
            frontier_phi_39_38_ladder = _1981;
            frontier_phi_39_38_ladder_1 = _1980;
            frontier_phi_39_38_ladder_2 = _1982;
        }
        _2046 = frontier_phi_39_38_ladder_1;
        _2048 = frontier_phi_39_38_ladder;
        _2050 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2046 = _1980;
        _2048 = _1981;
        _2050 = _1982;
    }
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _725 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2093 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2097 = _2057 | 1u;
    float _2108 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_563, _564, _565));
    float _2111 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_563, _564, _565));
    float _4402 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _4413 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2116 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2118 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2125 = ((cbLight._m0[_2074].x * _2080) * _2118) + (((cbLight._m0[_2084].x * _2046) * _2093) * _2116);
    float _2126 = ((_2080 * cbLight._m0[_2074].y) * _2118) + (((cbLight._m0[_2084].y * _2048) * _2093) * _2116);
    float _2127 = ((_2080 * cbLight._m0[_2074].z) * _2118) + (((cbLight._m0[_2084].z * _2050) * _2093) * _2116);
    uvec4 _2131 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2133 = _2131.x == 0u;
    float _2235;
    float _2237;
    float _2239;
    if (_2133)
    {
        _2235 = _2125;
        _2237 = _2126;
        _2239 = _2127;
    }
    else
    {
        uint _2243 = _2057 + 6u;
        float _2259 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4424 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2262 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2235 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2125;
        _2237 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2126;
        _2239 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2127;
    }
    bool _2242 = _2131.y == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2242)
    {
        _2297 = _2235;
        _2299 = _2237;
        _2301 = _2239;
    }
    else
    {
        uint _2459 = _2057 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_563, _564, _565)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4440 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2478 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2297 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2235;
        _2299 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2237;
        _2301 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2239;
    }
    uint _2304 = _2057 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _566) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2057].x + _642;
    float _2320 = cbLight._m0[_2057].y + _643;
    float _2321 = cbLight._m0[_2057].z + _644;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2057].xyz));
    float _4456 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2333 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2334 = dot(vec3(_563, _564, _565), vec3(_2326, _2327, _2328));
    float _4478 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2326, _2327, _2328));
    float _4489 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2358 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2333 * ((_2332 * _2358) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2358) + _2318) * _2332))) * _2332;
    float _4500 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2385 = _2057 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _566) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2097].x + _642;
    float _2399 = cbLight._m0[_2097].y + _643;
    float _2400 = cbLight._m0[_2097].z + _644;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2097].xyz));
    float _4511 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2412 = dot(vec3(_563, _564, _565), vec3(_2405, _2406, _2407));
    float _4522 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2405, _2406, _2407));
    float _4533 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2434 = 1.0 - _2397;
    float _2444 = (0.5 / (((_2333 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2434) + _2397) * _2411))) * _2411;
    float _4544 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2456 = (((_2433 * cbLight._m0[_2385].x) * _2446) * _2080) + ((((cbLight._m0[_2304].x * _2046) * _2357) * _2371) * _2093);
    float _2457 = (((_2433 * cbLight._m0[_2385].y) * _2446) * _2080) + ((((cbLight._m0[_2304].y * _2048) * _2357) * _2371) * _2093);
    float _2458 = (((_2433 * cbLight._m0[_2385].z) * _2446) * _2080) + ((((cbLight._m0[_2304].z * _2050) * _2357) * _2371) * _2093);
    float _2514;
    float _2516;
    float _2518;
    if (_2133)
    {
        _2514 = _2456;
        _2516 = _2457;
        _2518 = _2458;
    }
    else
    {
        uint _2520 = _2057 + 2u;
        uint _2524 = _2057 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _566) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _642;
        float _2541 = cbLight._m0[_2520].y + _643;
        float _2542 = cbLight._m0[_2520].z + _644;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2520].xyz));
        float _4555 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2554 = dot(vec3(_563, _564, _565), vec3(_2547, _2548, _2549));
        float _4566 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4577 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2333 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2576) + _2539) * _2553))) * _2553;
        float _4588 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2514 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2456;
        _2516 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2457;
        _2518 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2458;
    }
    float _2620;
    float _2622;
    float _2624;
    if (_2242)
    {
        _2620 = _2514;
        _2622 = _2516;
        _2624 = _2518;
    }
    else
    {
        uint _2631 = _2057 + 3u;
        uint _2635 = _2057 + 11u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _566) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _642;
        float _2652 = cbLight._m0[_2631].y + _643;
        float _2653 = cbLight._m0[_2631].z + _644;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2631].xyz));
        float _4604 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2665 = dot(vec3(_563, _564, _565), vec3(_2658, _2659, _2660));
        float _4615 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4626 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2686 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2687 = 1.0 - _2650;
        float _2697 = (0.5 / (((_2333 * ((_2664 * _2687) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2687) + _2650) * _2664))) * _2664;
        float _4637 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2699 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2700 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2620 = (((_2686 * cbLight._m0[_2635].x) * _2699) * _2700) + _2514;
        _2622 = (((_2686 * cbLight._m0[_2635].y) * _2699) * _2700) + _2516;
        _2624 = (((_2686 * cbLight._m0[_2635].z) * _2699) * _2700) + _2518;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2055.y == 0u)
    {
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2722)));
        float _2743 = (log2(_1833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3000)
                {
                    frontier_phi_73_pred = _2989;
                    frontier_phi_73_pred_1 = _2988;
                    frontier_phi_73_pred_2 = _2987;
                    frontier_phi_73_pred_3 = _2986;
                    frontier_phi_73_pred_4 = _2985;
                    frontier_phi_73_pred_5 = _2984;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _1831;
                        float _3196 = _3155.y - _1832;
                        float _3197 = _3155.z - _1833;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_681, _684, _687), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4663 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _1831;
                        float _3231 = (-0.0) - _1832;
                        float _3232 = (-0.0) - _1833;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _741;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_681, _684, _687), vec3(_3237, _3238, _3239));
                        float _4679 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3271 = dot(vec3(_681, _684, _687), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4690 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4701 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4712 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3306 * _3191.x) + _3129;
                        _3057 = (_3306 * _3191.y) + _3130;
                        _3058 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_73_pred = _3061;
                    frontier_phi_73_pred_1 = _3060;
                    frontier_phi_73_pred_2 = _3059;
                    frontier_phi_73_pred_3 = _3058;
                    frontier_phi_73_pred_4 = _3057;
                    frontier_phi_73_pred_5 = _3056;
                }
                _2843 = frontier_phi_73_pred;
                _2841 = frontier_phi_73_pred_1;
                _2839 = frontier_phi_73_pred_2;
                _2837 = frontier_phi_73_pred_3;
                _2835 = frontier_phi_73_pred_4;
                _2833 = frontier_phi_73_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2833;
                    _2985 = _2835;
                    _2986 = _2837;
                    _2987 = _2839;
                    _2988 = _2841;
                    _2989 = _2843;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2849) & _2753) == 0u)
        {
            _2952 = _2832;
            _2954 = _2834;
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
            float _2978 = _2977 * _1831;
            float _2979 = _2977 * _1832;
            float _2980 = _2977 * _1833;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2832;
                float _3113 = _2834;
                float _3114 = _2836;
                float _3115 = _2838;
                float _3116 = _2840;
                float _3117 = _2842;
                uint _3118 = _2849;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3128)
                    {
                        frontier_phi_84_pred = _3116;
                        frontier_phi_84_pred_1 = _3115;
                        frontier_phi_84_pred_2 = _3114;
                        frontier_phi_84_pred_3 = _3113;
                        frontier_phi_84_pred_4 = _3112;
                        frontier_phi_84_pred_5 = _3117;
                    }
                    else
                    {
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        uint _3339 = _3127;
                        uint _3340;
                        vec4 _3365;
                        float _3366;
                        vec4 _3381;
                        vec3 _3393;
                        vec4 _3409;
                        vec4 _3425;
                        float _3472;
                        bool _3473;
                        for (;;)
                        {
                            uint _3350 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3339));
                            _3340 = (_3339 + 4294967295u) & _3339;
                            uint _3352 = _3350 * 40u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3366 = _3365.w;
                            uint _3368 = (_3350 * 40u) + 4u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3350 * 40u) + 8u;
                            _3393 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x));
                            uint _3396 = (_3350 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3350 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3350 * 40u) + 24u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3447 = (_3350 * 40u) + 28u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3472 = fma(_1833, _3460.z, fma(_1832, _3460.y, _3460.x * _1831)) + _3460.w;
                            _3473 = !((fma(_1833, _3441.z, fma(_1832, _3441.y, _3441.x * _1831)) + _3441.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3473)
                            {
                                float _3500 = _3365.x - _1831;
                                float _3501 = _3365.y - _1832;
                                float _3502 = _3365.z - _1833;
                                float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                                float _3506 = inversesqrt(_3503);
                                float _3507 = _3506 * _3500;
                                float _3508 = _3506 * _3501;
                                float _3509 = _3506 * _3502;
                                float _3513 = 1.0 - (_3503 / (_3366 * _3366));
                                float _4723 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3518 = sqrt(_3503) * _3381.w;
                                float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                                float _3521 = _3520 * _3520;
                                float _3524 = ((1.0 - _3521) * dot(vec3(_3507, _3508, _3509), vec3(_681, _684, _687))) + _3521;
                                float _3527 = _3518 * _3518;
                                float _3531 = (fma(_1833, _3409.z, fma(_1832, _3409.y, _3409.x * _1831)) + _3409.w) / _3472;
                                float _3532 = (fma(_1833, _3425.z, fma(_1832, _3425.y, _3425.x * _1831)) + _3425.w) / _3472;
                                float _3536 = 1.0 - dot(vec2(_3531, _3532), vec2(_3531, _3532));
                                float _4739 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3538 = _3537 * (((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3514) / ((_3527 * 0.699999988079071044921875) + 1.0));
                                float _3550 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                                float _3551 = 1.0 - _741;
                                float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                                float _3559 = _3558 * _3558;
                                float _3560 = _3559 * _3559;
                                float _3561 = _3507 - _2978;
                                float _3562 = _3508 - _2979;
                                float _3563 = _3509 - _2980;
                                float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                                float _3571 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4750 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3575 = dot(vec3(_681, _684, _687), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                                float _4761 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                                float _3583 = _3520 * _3559;
                                float _3584 = _3583 * _3583;
                                float _3590 = ((1.0 - _3584) * dot(vec3(_681, _684, _687), vec3(_3507, _3508, _3509))) + _3584;
                                float _4772 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3592 = 1.0 - _3559;
                                float _3602 = (0.5 / (((_3591 * ((_3574 * _3592) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3559) * _3574))) * _3591;
                                float _4783 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3612 = (_3537 * _3514) * (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3582 * _3582) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3538 * _3381.y;
                                frontier_phi_90_pred_1 = _3538 * _3381.x;
                                frontier_phi_90_pred_2 = _3612 * _3393.z;
                                frontier_phi_90_pred_3 = _3612 * _3393.y;
                                frontier_phi_90_pred_4 = _3612 * _3393.x;
                                frontier_phi_90_pred_5 = _3538 * _3381.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3620 = frontier_phi_90_pred;
                            _3619 = frontier_phi_90_pred_1;
                            _3618 = frontier_phi_90_pred_2;
                            _3617 = frontier_phi_90_pred_3;
                            _3616 = frontier_phi_90_pred_4;
                            _3621 = frontier_phi_90_pred_5;
                            _3323 = _3619 + _3336;
                            _3324 = _3620 + _3337;
                            _3325 = _3621 + _3338;
                            _3320 = _3616 + _3333;
                            _3321 = _3617 + _3334;
                            _3322 = _3618 + _3335;
                            if (_3340 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3340;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3324;
                        frontier_phi_84_pred_1 = _3323;
                        frontier_phi_84_pred_2 = _3322;
                        frontier_phi_84_pred_3 = _3321;
                        frontier_phi_84_pred_4 = _3320;
                        frontier_phi_84_pred_5 = _3325;
                    }
                    _2961 = frontier_phi_84_pred;
                    _2959 = frontier_phi_84_pred_1;
                    _2957 = frontier_phi_84_pred_2;
                    _2955 = frontier_phi_84_pred_3;
                    _2953 = frontier_phi_84_pred_4;
                    _2963 = frontier_phi_84_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2963;
                frontier_phi_65_66_ladder_1 = _2959;
                frontier_phi_65_66_ladder_2 = _2961;
                frontier_phi_65_66_ladder_3 = _2955;
                frontier_phi_65_66_ladder_4 = _2953;
                frontier_phi_65_66_ladder_5 = _2957;
            }
            else
            {
                frontier_phi_65_66_ladder = _2842;
                frontier_phi_65_66_ladder_1 = _2838;
                frontier_phi_65_66_ladder_2 = _2840;
                frontier_phi_65_66_ladder_3 = _2834;
                frontier_phi_65_66_ladder_4 = _2832;
                frontier_phi_65_66_ladder_5 = _2836;
            }
            _2952 = frontier_phi_65_66_ladder_4;
            _2954 = frontier_phi_65_66_ladder_3;
            _2956 = frontier_phi_65_66_ladder_5;
            _2958 = frontier_phi_65_66_ladder_1;
            _2960 = frontier_phi_65_66_ladder_2;
            _2962 = frontier_phi_65_66_ladder;
        }
        float _2967 = isnan(1.0) ? _725 : (isnan(_725) ? 1.0 : min(_725, 1.0));
        _2765 = (_2967 * _2958) + _2297;
        _2767 = (_2967 * _2960) + _2299;
        _2769 = (_2967 * _2962) + _2301;
        _2771 = ((_2952 * 0.039999999105930328369140625) * _2967) + _2620;
        _2773 = ((_2954 * 0.039999999105930328369140625) * _2967) + _2622;
        _2775 = ((_2956 * 0.039999999105930328369140625) * _2967) + _2624;
    }
    else
    {
        _2765 = _2297;
        _2767 = _2299;
        _2769 = _2301;
        _2771 = _2620;
        _2773 = _2622;
        _2775 = _2624;
    }
    float _4799 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4810 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4821 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2792 = ((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2765 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _725))) + ((_2771 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2767 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _725))) + ((_2773 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2769 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _725))) + ((_2775 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    uint _2795 = _700 + 6u;
    float _2803 = _662 / cbSceneParam._m0[86u].x;
    float _2804 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2858 = _2857 / _585;
        float _2869 = _2858 * _635;
        float _2870 = _636 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2872 = _2858 * _637;
        float _2874 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2870;
        float _2882 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2871 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3015 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2882 / _2871) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2892 * _3024) - exp2(_2892 * _3025)) * _3013))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2823);
        _2894 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2896 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2898 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2900 = _3080 * _2823;
    }
    else
    {
        _2894 = _2820;
        _2896 = _2821;
        _2898 = _2822;
        _2900 = _2823;
    }
    bool _3107;
    vec4 _2910;
    vec4 _2932;
    float _2934;
    float _2938;
    float _2939;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2910 = cbMatDynParam._m0[0u];
        float _2912 = roundEven(_2910.y);
        bool _2913 = _2912 == 3.0;
        float _2914 = log2(_2900);
        float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * _2792;
        float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * _2793;
        float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * _2794;
        float _2930 = _651 + (-0.5);
        _2932 = cbMtdParam._m0[1u];
        _2934 = _2932.y * _2930;
        float _2937 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2938 = _2937 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = _2937 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
        _2940 = _2937 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
        _2941 = _2930 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_700 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _701 + uint(_2910.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2934 + 1.0) < _2932.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3311;
    if (_3107)
    {
        discard_state = true;
        _3311 = 0.0;
    }
    else
    {
        _3311 = cbInstanceData._m0[_2795].w;
    }
    SV_Target.x = _2938;
    SV_Target.y = _2939;
    SV_Target.z = _2940;
    SV_Target.w = _3311;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
    discard_exit();
}


