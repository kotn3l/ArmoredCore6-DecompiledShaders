#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1077;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    float _250 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3414 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _251 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    vec4 _264 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _267 = _264.x;
    float _268 = _264.y;
    float _269 = _264.z;
    vec4 _282 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _309 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _311 = _309.x;
    float _312 = _309.y;
    vec4 _325 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3425 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _329 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _332 = 3.0 - (_329 * 2.0);
    float _334 = _329 * _329;
    float _348 = (((_282.x - _267) * _251) + _267) + (((_311 + (-0.5)) + ((_334 * (_325.x - _311)) * _332)) * cbMtdParam._m0[12u].y);
    float _349 = (((_282.y - _268) * _251) + _268) + (((_312 + (-0.5)) + ((_334 * (_325.y - _312)) * _332)) * cbMtdParam._m0[12u].y);
    float _352 = (_348 * 2.0) + (-1.0);
    float _354 = (_349 * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3436 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _360 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    float _363 = fma(_360, _224, fma(_354, _217, _352 * _203));
    float _366 = fma(_360, _225, fma(_354, _218, _352 * _204));
    float _369 = fma(_360, _226, fma(_354, _219, _352 * _205));
    float _378 = exp2(log2(inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369))) * _366) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3447 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _381 = 1.0 - _379;
    float _385 = (cbMtdParam._m0[11u].w * ((_379 + 1.0) - _381)) + _381;
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = (isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0))) + TEXCOORD.w;
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _407 = ((1.0 - (isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _408 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _415 = (((1.0 - (isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3488 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _434 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    vec4 _451 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _465 = (((_451.x - _436) * _251) + _436) * cbMtdParam._m0[10u].x;
    float _466 = (((_451.y - _437) * _251) + _437) * cbMtdParam._m0[10u].y;
    float _467 = (((_451.z - _438) * _251) + _438) * cbMtdParam._m0[10u].z;
    float _474 = ((cbMtdParam._m0[9u].x - _465) * _416) + _465;
    float _475 = ((cbMtdParam._m0[9u].y - _466) * _416) + _466;
    float _476 = ((cbMtdParam._m0[9u].z - _467) * _416) + _467;
    float _478 = cbMtdParam._m0[12u].z * (((_282.z - _269) * _251) + _269);
    vec4 _490 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    vec4 _506 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _515 = cbMtdParam._m0[11u].z * _416;
    float _522 = (_515 * ((_492 - _348) + ((_506.x - _492) * _251))) + _348;
    float _523 = (_515 * ((_493 - _349) + ((_506.y - _493) * _251))) + _349;
    float _536 = (((((_522 * cbMtdParam._m0[13u].y) - _522) * _251) + _522) * 2.0) + (-1.0);
    float _537 = (((((_523 * cbMtdParam._m0[13u].z) - _523) * _251) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3499 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))));
    float _546 = fma(_543, _224, fma(_537, _217, _536 * _203));
    float _549 = fma(_543, _225, fma(_537, _218, _536 * _204));
    float _552 = fma(_543, _226, fma(_537, _219, _536 * _205));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _3510 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _560 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3532 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3543 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_559, cbSceneParam._m0[5u].z, fma(_558, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _557));
    float _666 = fma(_559, cbSceneParam._m0[6u].z, fma(_558, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _557));
    float _669 = fma(_559, cbSceneParam._m0[7u].z, fma(_558, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _557));
    uint _682 = uint(roundEven(NORMAL.w)) * 13u;
    uint _684 = (_682 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _690 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_684].x;
    float _691 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_684].y;
    float _692 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_684].z;
    float _3554 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _707 = _704.x * TEXCOORD.z;
    float _708 = dot(vec3(_557, _558, _559), vec3(_636, _637, _638));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _557) - _636;
    float _716 = (_711 * _558) - _637;
    float _717 = (_711 * _559) - _638;
    float _721 = abs(dot(vec3(_636, _637, _638), vec3(_557, _558, _559)));
    float _3587 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_560);
    float _735 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1076;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767));
        float _806 = fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767));
        float _810 = fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767));
        float _834 = _767 + _557;
        float _835 = _771 + _558;
        float _836 = _775 + _559;
        float _846 = fma(_836, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834)) - _802;
        float _847 = fma(_836, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834)) - _806;
        float _848 = fma(_836, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834)) - _810;
        float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
        float _865 = ((_852 * _846) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_852 * _847) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_852 * _848) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _904 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_870.x + (-0.5));
        float _906 = _904 * (_870.y + (-0.5));
        float _907 = _904 * (_870.z + (-0.5));
        float _914 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_877.x + (-0.5));
        float _916 = _914 * (_877.y + (-0.5));
        float _917 = _914 * (_877.z + (-0.5));
        float _924 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_884.x + (-0.5));
        float _926 = _924 * (_884.y + (-0.5));
        float _927 = _924 * (_884.z + (-0.5));
        float _934 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_891.x + (-0.5));
        float _936 = _934 * (_891.y + (-0.5));
        float _937 = _934 * (_891.z + (-0.5));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = _905 * 0.5;
        float _942 = _915 * 0.5;
        float _943 = _925 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _958 = (dot(vec3(_557, _558, _559), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _968 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3635 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_970 + 1.0))) + _975) * _938;
        float _985 = _906 * 0.5;
        float _986 = _916 * 0.5;
        float _987 = _926 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_557, _558, _559), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3668 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1012 + 1.0))) + _1017) * _939;
        float _1027 = _907 * 0.5;
        float _1028 = _917 * 0.5;
        float _1029 = _927 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_557, _558, _559), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3701 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1054 + 1.0))) + _1059) * _940;
        _1076 = _907;
        _1078 = _906;
        _1079 = _905;
        _1080 = _917;
        _1081 = _916;
        _1082 = _915;
        _1083 = _927;
        _1084 = _926;
        _1085 = _925;
        _1086 = _940;
        _1087 = _939;
        _1088 = _938;
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
    }
    else
    {
        _1076 = _1077;
        _1078 = _1077;
        _1079 = _1077;
        _1080 = _1077;
        _1081 = _1077;
        _1082 = _1077;
        _1083 = _1077;
        _1084 = _1077;
        _1085 = _1077;
        _1086 = _1077;
        _1087 = _1077;
        _1088 = _1077;
        _1089 = 0.0;
        _1090 = 0.0;
        _1091 = 0.0;
    }
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1117 = fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767));
        float _1121 = fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767));
        float _1125 = fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767));
        float _1148 = _767 + _557;
        float _1149 = _771 + _558;
        float _1150 = _775 + _559;
        float _1160 = fma(_1150, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148)) - _1117;
        float _1161 = fma(_1150, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148)) - _1121;
        float _1162 = fma(_1150, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148)) - _1125;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1117 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1121 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[35u].z) + ((((((_1125 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1216 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1183.x + (-0.5));
        float _1218 = _1216 * (_1183.y + (-0.5));
        float _1219 = _1216 * (_1183.z + (-0.5));
        float _1226 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1190.x + (-0.5));
        float _1228 = _1226 * (_1190.y + (-0.5));
        float _1229 = _1226 * (_1190.z + (-0.5));
        float _1236 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1197.x + (-0.5));
        float _1238 = _1236 * (_1197.y + (-0.5));
        float _1239 = _1236 * (_1197.z + (-0.5));
        float _1246 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1204.x + (-0.5));
        float _1248 = _1246 * (_1204.y + (-0.5));
        float _1249 = _1246 * (_1204.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_557, _558, _559), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3764 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1280 + 1.0))) + _1285) * _1250;
        float _1295 = _1218 * 0.5;
        float _1296 = _1228 * 0.5;
        float _1297 = _1238 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_557, _558, _559), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3797 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1322 + 1.0))) + _1327) * _1251;
        float _1337 = _1219 * 0.5;
        float _1338 = _1229 * 0.5;
        float _1339 = _1239 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_557, _558, _559), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3830 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1364 + 1.0))) + _1369) * _1252;
        _1386 = _1219;
        _1387 = _1218;
        _1388 = _1217;
        _1389 = _1229;
        _1390 = _1228;
        _1391 = _1227;
        _1392 = _1239;
        _1393 = _1238;
        _1394 = _1237;
        _1395 = _1252;
        _1396 = _1251;
        _1397 = _1250;
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1077;
        _1387 = _1077;
        _1388 = _1077;
        _1389 = _1077;
        _1390 = _1077;
        _1391 = _1077;
        _1392 = _1077;
        _1393 = _1077;
        _1394 = _1077;
        _1395 = _1077;
        _1396 = _1077;
        _1397 = _1077;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1089)) + _1089;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1090)) + _1090;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1091)) + _1091;
    float _1433 = fma(_1412, cbSceneParam._m0[89u].z, fma(_1411, cbSceneParam._m0[89u].y, _1410 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1412, cbSceneParam._m0[90u].z, fma(_1411, cbSceneParam._m0[90u].y, _1410 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1412, cbSceneParam._m0[91u].z, fma(_1411, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1410));
    float _1454 = _715 * 0.5;
    float _1455 = _716 * 0.5;
    float _1456 = _717 * 0.5;
    float _1457 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1460 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1463 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1497;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1470 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1076, _1080, _1083, _1086));
        float _1474 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1485 = dot(vec4(cbModelParam._m0[39u]), vec4(_1454, _1455, _1456, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1508;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1499 = dot(vec4(cbModelParam._m0[40u]), vec4(_1454, _1455, _1456, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1512 = (_1508 * cbModelParam._m0[1u].x) + (_1497 * (1.0 - cbModelParam._m0[1u].x));
    float _1522 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _560);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1522 : min(cbModelParam._m0[25u].z, _1522));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1585 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1588 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1616 = frontier_phi_16_14_ladder;
        }
        float _1841;
        if (_1585 > 0.0)
        {
            _1841 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1841 = frontier_phi_25_21_ladder;
        }
        float _2087;
        if (_1588 > 0.0)
        {
            _2087 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2087 = frontier_phi_37_32_ladder;
        }
        float _2089 = isnan(_1841) ? _1616 : (isnan(_1616) ? _1841 : min(_1616, _1841));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1582) + _1571;
        float _2095 = (_2090 * _1585) + _1575;
        float _2096 = (_2090 * _1588) + _1579;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2097;
        float _2101 = _2097 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 > _2101) || ((_2095 < _2099) || ((_2094 < _2099) || (_2094 > _2101))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2096, cbModelParam._m0[9u].z, fma(_2095, cbModelParam._m0[9u].y, _2094 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2096, cbModelParam._m0[10u].z, fma(_2095, cbModelParam._m0[10u].y, _2094 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2096, cbModelParam._m0[11u].z, fma(_2095, cbModelParam._m0[11u].y, _2094 * cbModelParam._m0[11u].x))), _1523);
            frontier_phi_15_37_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_15_37_ladder_2;
        _1606 = frontier_phi_15_37_ladder_1;
        _1608 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1523);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _560);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1670 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1674 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1678 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1681 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1684 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1687 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1846;
        if (_1681 > 0.0)
        {
            _1846 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1846 = frontier_phi_27_23_ladder;
        }
        float _2114;
        if (_1684 > 0.0)
        {
            _2114 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2114 = frontier_phi_39_34_ladder;
        }
        float _2319;
        if (_1687 > 0.0)
        {
            _2319 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2319 = frontier_phi_48_45_ladder;
        }
        float _2321 = isnan(_2114) ? _1846 : (isnan(_1846) ? _2114 : min(_1846, _2114));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1681) + _1670;
        float _2327 = (_2322 * _1684) + _1674;
        float _2328 = (_2322 * _1687) + _1678;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2328, cbModelParam._m0[17u].z, fma(_2327, cbModelParam._m0[17u].y, _2326 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2328, cbModelParam._m0[18u].z, fma(_2327, cbModelParam._m0[18u].y, _2326 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2328, cbModelParam._m0[19u].z, fma(_2327, cbModelParam._m0[19u].y, _2326 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_24_48_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1706 = frontier_phi_24_48_ladder_2;
        _1708 = frontier_phi_24_48_ladder_1;
        _1710 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1613);
        _1706 = _1690.x * cbModelParam._m0[1u].z;
        _1708 = _1690.y * cbModelParam._m0[1u].z;
        _1710 = _1690.z * cbModelParam._m0[1u].z;
    }
    float _1722 = ((((1.0 - _735) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_735 * _723)) * _707;
    float _1723 = _1722 * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1724 = _1722 * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1725 = _1722 * ((cbModelParam._m0[1u].w * (_1710 - _1608)) + _1608);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1723 * cbSceneParam._m0[91u].x));
    vec4 _1742 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_644, _645));
    float _1744 = _1742.w;
    float _1756 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1744);
    float _1757 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1744);
    float _1758 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1744);
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_682 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1772 = _707 + (-1.0);
    float _1777 = (cbLight._m0[_1765].x * _1772) + 1.0;
    float _1778 = (cbLight._m0[_1765].y * _1772) + 1.0;
    float _1779 = (cbLight._m0[_1765].z * _1772) + 1.0;
    float _1780 = (cbLight._m0[_1765].w * _1772) + 1.0;
    uint _1781 = _1764 + 5u;
    float _1787 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1791 = _1764 + 4u;
    float _1800 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1804 = _1764 | 1u;
    float _1815 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_557, _558, _559));
    float _1818 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_557, _558, _559));
    float _3966 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _3977 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1823 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1825 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1832 = ((cbLight._m0[_1781].x * _1787) * _1825) + (((cbLight._m0[_1791].x * _1756) * _1800) * _1823);
    float _1833 = ((_1787 * cbLight._m0[_1781].y) * _1825) + (((cbLight._m0[_1791].y * _1757) * _1800) * _1823);
    float _1834 = ((_1787 * cbLight._m0[_1781].z) * _1825) + (((cbLight._m0[_1791].z * _1758) * _1800) * _1823);
    uvec4 _1838 = floatBitsToUint(cbLight._m0[_1764 + 12u]);
    bool _1840 = _1838.x == 0u;
    float _1851;
    float _1853;
    float _1855;
    if (_1840)
    {
        _1851 = _1832;
        _1853 = _1833;
        _1855 = _1834;
    }
    else
    {
        uint _1859 = _1764 + 6u;
        float _1875 = (dot(vec3(cbLight._m0[_1764 + 2u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3988 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1878 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1851 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1832;
        _1853 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1833;
        _1855 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1834;
    }
    bool _1858 = _1838.y == 0u;
    float _1896;
    float _1898;
    float _1900;
    if (_1858)
    {
        _1896 = _1851;
        _1898 = _1853;
        _1900 = _1855;
    }
    else
    {
        uint _2058 = _1764 + 7u;
        float _2074 = (dot(vec3(cbLight._m0[_1764 + 3u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4004 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2077 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1896 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1851;
        _1898 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1853;
        _1900 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1855;
    }
    uint _1903 = _1764 + 8u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _560) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1764].x + _636;
    float _1919 = cbLight._m0[_1764].y + _637;
    float _1920 = cbLight._m0[_1764].z + _638;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1764].xyz));
    float _4020 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _1932 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1933 = dot(vec3(_557, _558, _559), vec3(_1925, _1926, _1927));
    float _4042 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1925, _1926, _1927));
    float _4053 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1917 * _1917;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1956 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1957 = 1.0 - _1917;
    float _1968 = (0.5 / (((_1932 * ((_1931 * _1957) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _1957) + _1917) * _1931))) * _1931;
    float _4064 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    uint _1984 = _1764 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1804].w)) * _560) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1804].x + _636;
    float _1998 = cbLight._m0[_1804].y + _637;
    float _1999 = cbLight._m0[_1804].z + _638;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1804].xyz));
    float _4075 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2011 = dot(vec3(_557, _558, _559), vec3(_2004, _2005, _2006));
    float _4086 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_2004, _2005, _2006));
    float _4097 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2032 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2033 = 1.0 - _1996;
    float _2043 = (0.5 / (((_1932 * ((_2010 * _2033) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2033) + _1996) * _2010))) * _2010;
    float _4108 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2055 = (((_2032 * cbLight._m0[_1984].x) * _2045) * _1787) + ((((cbLight._m0[_1903].x * _1756) * _1956) * _1970) * _1800);
    float _2056 = (((_2032 * cbLight._m0[_1984].y) * _2045) * _1787) + ((((cbLight._m0[_1903].y * _1757) * _1956) * _1970) * _1800);
    float _2057 = (((_2032 * cbLight._m0[_1984].z) * _2045) * _1787) + ((((cbLight._m0[_1903].z * _1758) * _1956) * _1970) * _1800);
    float _2119;
    float _2121;
    float _2123;
    if (_1840)
    {
        _2119 = _2055;
        _2121 = _2056;
        _2123 = _2057;
    }
    else
    {
        uint _2125 = _1764 + 2u;
        uint _2129 = _1764 + 10u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _560) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _636;
        float _2146 = cbLight._m0[_2125].y + _637;
        float _2147 = cbLight._m0[_2125].z + _638;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2125].xyz));
        float _4119 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2159 = dot(vec3(_557, _558, _559), vec3(_2152, _2153, _2154));
        float _4130 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4141 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2181 = 1.0 - _2144;
        float _2191 = (0.5 / (((_1932 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2181) + _2144) * _2158))) * _2158;
        float _4152 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2193 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2194 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2119 = (((_2180 * cbLight._m0[_2129].x) * _2193) * _2194) + _2055;
        _2121 = (((_2180 * cbLight._m0[_2129].y) * _2193) * _2194) + _2056;
        _2123 = (((_2180 * cbLight._m0[_2129].z) * _2193) * _2194) + _2057;
    }
    float _2229;
    float _2231;
    float _2233;
    if (_1858)
    {
        _2229 = _2119;
        _2231 = _2121;
        _2233 = _2123;
    }
    else
    {
        uint _2240 = _1764 + 3u;
        uint _2244 = _1764 + 11u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _560) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _636;
        float _2261 = cbLight._m0[_2240].y + _637;
        float _2262 = cbLight._m0[_2240].z + _638;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2240].xyz));
        float _4168 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2274 = dot(vec3(_557, _558, _559), vec3(_2267, _2268, _2269));
        float _4179 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4190 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2295 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2296 = 1.0 - _2259;
        float _2306 = (0.5 / (((_1932 * ((_2273 * _2296) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2296) + _2259) * _2273))) * _2273;
        float _4201 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2229 = (((_2295 * cbLight._m0[_2244].x) * _2308) * _2309) + _2119;
        _2231 = (((_2295 * cbLight._m0[_2244].y) * _2308) * _2309) + _2121;
        _2233 = (((_2295 * cbLight._m0[_2244].z) * _2308) * _2309) + _2123;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1762.y == 0u)
    {
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2384;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2384;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2384;
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.x;
        uint _2411 = uint((float(_2399.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2400))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2400)));
        float _2421 = (log2(_2387 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2422 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        uint _2425 = uint(isnan(14.0) ? _2422 : (isnan(_2422) ? 14.0 : min(_2422, 14.0)));
        uvec4 _2430 = texelFetch(g_lightClusterGridBuffer, int(((_2425 << 2u) + (_2411 << 6u)) >> 2u));
        uint _2431 = _2430.x;
        uint _2432 = _2399.z;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((((1u << ((_2432 >> 4u) & 15u)) + 4294967295u) & _2431) == 0u) || ((_2432 & 240u) == 0u))
        {
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
        }
        else
        {
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            uint _2681 = 0u;
            uint _2690;
            bool _2691;
            for (;;)
            {
                _2690 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                _2691 = _2690 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2691)
                {
                    frontier_phi_63_pred = _2680;
                    frontier_phi_63_pred_1 = _2679;
                    frontier_phi_63_pred_2 = _2678;
                    frontier_phi_63_pred_3 = _2677;
                    frontier_phi_63_pred_4 = _2676;
                    frontier_phi_63_pred_5 = _2675;
                }
                else
                {
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    uint _2805;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2690;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    for (;;)
                    {
                        uint _2809 = uint(findLSB(_2805)) + (_2681 << 5u);
                        uint _2806 = (_2805 + 4294967295u) & _2805;
                        uint _2811 = _2809 * 48u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2831 = (_2809 * 48u) + 4u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2850 = (_2809 * 48u) + 8u;
                        vec3 _2861 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x));
                        float _2865 = _2825.x - _2385;
                        float _2866 = _2825.y - _2386;
                        float _2867 = _2825.z - _2387;
                        float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                        float _2871 = inversesqrt(_2868);
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2875 = dot(vec3(_663, _666, _669), vec3(_2872, _2873, _2874));
                        float _2880 = 1.0 - (_2868 * _2825.w);
                        float _4227 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2882 = sqrt(_2868) * _2844.w;
                        float _2885 = 1.39999997615814208984375 / (_2882 + 1.39999997615814208984375);
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2875) + _2886;
                        float _2892 = _2882 * _2882;
                        float _2896 = ((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2881) / ((_2892 * 0.699999988079071044921875) + 1.0);
                        float _2900 = (-0.0) - _2385;
                        float _2901 = (-0.0) - _2386;
                        float _2902 = (-0.0) - _2387;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2917 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                        float _2918 = 1.0 - _723;
                        float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                        float _2926 = _2925 * _2925;
                        float _2927 = _2926 * _2926;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2938 = dot(vec3(_663, _666, _669), vec3(_2907, _2908, _2909));
                        float _4243 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2942 = dot(vec3(_663, _666, _669), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                        float _4254 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                        float _2950 = _2885 * _2926;
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2875) + _2951;
                        float _4265 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2956 = 1.0 - _2926;
                        float _2966 = (0.5 / (((_2955 * ((_2941 * _2956) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _2956) + _2926) * _2941))) * _2955;
                        float _4276 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2977 = (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_2949 * _2949) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125))) * _2881;
                        _2734 = (_2896 * _2844.x) + _2802;
                        _2735 = (_2896 * _2844.y) + _2803;
                        _2736 = (_2896 * _2844.z) + _2804;
                        _2731 = (_2977 * _2861.x) + _2799;
                        _2732 = (_2977 * _2861.y) + _2800;
                        _2733 = (_2977 * _2861.z) + _2801;
                        if (_2806 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2806;
                        }
                    }
                    frontier_phi_63_pred = _2736;
                    frontier_phi_63_pred_1 = _2735;
                    frontier_phi_63_pred_2 = _2734;
                    frontier_phi_63_pred_3 = _2733;
                    frontier_phi_63_pred_4 = _2732;
                    frontier_phi_63_pred_5 = _2731;
                }
                _2542 = frontier_phi_63_pred;
                _2540 = frontier_phi_63_pred_1;
                _2538 = frontier_phi_63_pred_2;
                _2536 = frontier_phi_63_pred_3;
                _2534 = frontier_phi_63_pred_4;
                _2532 = frontier_phi_63_pred_5;
                uint _2682 = _2681 + 1u;
                if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2675 = _2532;
                    _2676 = _2534;
                    _2677 = _2536;
                    _2678 = _2538;
                    _2679 = _2540;
                    _2680 = _2542;
                    _2681 = _2682;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
        }
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.z;
        uint _2548 = (_2546 >> 8u) & 15u;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((4294967295u << _2548) & _2431) == 0u)
        {
            _2643 = _2531;
            _2645 = _2533;
            _2647 = _2535;
            _2649 = _2537;
            _2651 = _2539;
            _2653 = _2541;
        }
        else
        {
            float _2668 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
            float _2669 = _2668 * _2385;
            float _2670 = _2668 * _2386;
            float _2671 = _2668 * _2387;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2548 < ((_2546 >> 12u) & 15u))
            {
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2782 = _2531;
                float _2783 = _2533;
                float _2784 = _2535;
                float _2785 = _2537;
                float _2786 = _2539;
                float _2787 = _2541;
                uint _2788 = _2548;
                uint _2797;
                bool _2798;
                for (;;)
                {
                    _2797 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                    _2798 = _2797 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2798)
                    {
                        frontier_phi_69_pred = _2787;
                        frontier_phi_69_pred_1 = _2786;
                        frontier_phi_69_pred_2 = _2785;
                        frontier_phi_69_pred_3 = _2784;
                        frontier_phi_69_pred_4 = _2783;
                        frontier_phi_69_pred_5 = _2782;
                    }
                    else
                    {
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        uint _3001 = _2797;
                        uint _3002;
                        vec4 _3027;
                        float _3028;
                        vec4 _3043;
                        vec3 _3055;
                        vec4 _3071;
                        vec4 _3087;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3012 = ((_2788 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3001));
                            _3002 = (_3001 + 4294967295u) & _3001;
                            uint _3014 = _3012 * 40u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3028 = _3027.w;
                            uint _3030 = (_3012 * 40u) + 4u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_3012 * 40u) + 8u;
                            _3055 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x));
                            uint _3058 = (_3012 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3074 = (_3012 * 40u) + 20u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3012 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3012 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2387, _3122.z, fma(_2386, _3122.y, _3122.x * _2385)) + _3122.w;
                            _3135 = !((fma(_2387, _3103.z, fma(_2386, _3103.y, _3103.x * _2385)) + _3103.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3027.x - _2385;
                                float _3163 = _3027.y - _2386;
                                float _3164 = _3027.z - _2387;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3028 * _3028));
                                float _4287 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3180 = sqrt(_3165) * _3043.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_663, _666, _669))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2387, _3071.z, fma(_2386, _3071.y, _3071.x * _2385)) + _3071.w) / _3134;
                                float _3194 = (fma(_2387, _3087.z, fma(_2386, _3087.y, _3087.x * _2385)) + _3087.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4303 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _723;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2669;
                                float _3224 = _3170 - _2670;
                                float _3225 = _3171 - _2671;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2669, (-0.0) - _2670, (-0.0) - _2671));
                                float _4314 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3237 = dot(vec3(_663, _666, _669), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4325 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_663, _666, _669), vec3(_3169, _3170, _3171))) + _3246;
                                float _4336 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4347 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3200 * _3043.z;
                                frontier_phi_75_pred_1 = _3200 * _3043.y;
                                frontier_phi_75_pred_2 = _3200 * _3043.x;
                                frontier_phi_75_pred_3 = _3274 * _3055.z;
                                frontier_phi_75_pred_4 = _3274 * _3055.y;
                                frontier_phi_75_pred_5 = _3274 * _3055.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_75_pred;
                            _3282 = frontier_phi_75_pred_1;
                            _3281 = frontier_phi_75_pred_2;
                            _3280 = frontier_phi_75_pred_3;
                            _3279 = frontier_phi_75_pred_4;
                            _3278 = frontier_phi_75_pred_5;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            _2982 = _3278 + _2995;
                            _2983 = _3279 + _2996;
                            _2984 = _3280 + _2997;
                            if (_3002 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _3002;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2987;
                        frontier_phi_69_pred_1 = _2986;
                        frontier_phi_69_pred_2 = _2985;
                        frontier_phi_69_pred_3 = _2984;
                        frontier_phi_69_pred_4 = _2983;
                        frontier_phi_69_pred_5 = _2982;
                    }
                    _2654 = frontier_phi_69_pred;
                    _2652 = frontier_phi_69_pred_1;
                    _2650 = frontier_phi_69_pred_2;
                    _2648 = frontier_phi_69_pred_3;
                    _2646 = frontier_phi_69_pred_4;
                    _2644 = frontier_phi_69_pred_5;
                    uint _2789 = _2788 + 1u;
                    if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2782 = _2644;
                        _2783 = _2646;
                        _2784 = _2648;
                        _2785 = _2650;
                        _2786 = _2652;
                        _2787 = _2654;
                        _2788 = _2789;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2654;
                frontier_phi_57_58_ladder_1 = _2652;
                frontier_phi_57_58_ladder_2 = _2650;
                frontier_phi_57_58_ladder_3 = _2648;
                frontier_phi_57_58_ladder_4 = _2646;
                frontier_phi_57_58_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_57_58_ladder = _2541;
                frontier_phi_57_58_ladder_1 = _2539;
                frontier_phi_57_58_ladder_2 = _2537;
                frontier_phi_57_58_ladder_3 = _2535;
                frontier_phi_57_58_ladder_4 = _2533;
                frontier_phi_57_58_ladder_5 = _2531;
            }
            _2643 = frontier_phi_57_58_ladder_5;
            _2645 = frontier_phi_57_58_ladder_4;
            _2647 = frontier_phi_57_58_ladder_3;
            _2649 = frontier_phi_57_58_ladder_2;
            _2651 = frontier_phi_57_58_ladder_1;
            _2653 = frontier_phi_57_58_ladder;
        }
        float _2658 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2443 = (_2658 * _2649) + _1896;
        _2445 = (_2658 * _2651) + _1898;
        _2447 = (_2658 * _2653) + _1900;
        _2449 = ((_2643 * 0.039999999105930328369140625) * _2658) + _2229;
        _2451 = ((_2645 * 0.039999999105930328369140625) * _2658) + _2231;
        _2453 = ((_2647 * 0.039999999105930328369140625) * _2658) + _2233;
    }
    else
    {
        _2443 = _1896;
        _2445 = _1898;
        _2447 = _1900;
        _2449 = _2229;
        _2451 = _2231;
        _2453 = _2233;
    }
    float _4363 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4374 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4385 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    uint _2473 = _682 + 6u;
    float _2481 = _644 / cbSceneParam._m0[86u].x;
    float _2482 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2556 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2557 = _2556 / _579;
        float _2568 = _2557 * _629;
        float _2569 = _630 * _2557;
        float _2570 = (-0.0) - _2569;
        float _2571 = _2557 * _631;
        float _2573 = (cbSceneParam._m0[77u].w * _2570) / _2556;
        float _2574 = _2573 + cbSceneParam._m0[79u].w;
        float _2575 = cbSceneParam._m0[79u].w - _2569;
        float _2581 = sqrt(((_2568 * _2568) + (_2569 * _2569)) + (_2571 * _2571));
        float _2584 = (1.0 - (cbSceneParam._m0[77u].w / _2556)) * _2581;
        float _2589 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2591 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2744;
        if (abs((_2570 - _2573) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2744 = ((((_2574 > 0.0) ? exp2(_2589 * _2574) : (2.0 - exp2(_2591 * _2574))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2584;
        }
        else
        {
            float _2704 = 1.0 / cbSceneParam._m0[80u].x;
            float _2705 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : max(_2574, _2575));
            float _2706 = isnan(_2575) ? _2574 : (isnan(_2574) ? _2575 : min(_2574, _2575));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            _2744 = ((abs(_2581 / _2570) * cbSceneParam._m0[80u].y) * ((((_2715 - _2716) * 2.0) - ((exp2(_2589 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0)))) - exp2(_2589 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))))) * _2704)) - ((exp2(_2591 * _2715) - exp2(_2591 * _2716)) * _2704))) + (_2584 * cbSceneParam._m0[80u].z);
        }
        vec4 _2746 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2755 = exp2((_2744 * (-1.44269502162933349609375)) * (1.0 - _2746.w));
        float _2756 = log2(_2755);
        float _2772 = log2(_2501);
        _2593 = (exp2(_2772 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].x)) * _2746.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2595 = (exp2(_2772 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].y)) * _2746.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2597 = (exp2(_2772 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].z)) * _2746.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2599 = _2755 * _2501;
    }
    else
    {
        _2593 = _2498;
        _2595 = _2499;
        _2597 = _2500;
        _2599 = _2501;
    }
    float _2611 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2612 = _2611 == 3.0;
    float _2613 = log2(_2599);
    float _2620 = exp2(_2613 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2443 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _707))) + ((_2449 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2621 = exp2(_2613 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2445 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _707))) + ((_2451 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2622 = exp2(_2613 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2447 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _707))) + ((_2453 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2631 = (_2611 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2631 * (_2612 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.y = _2631 * (_2612 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.z = _2631 * (_2612 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.w = cbInstanceData._m0[_2473].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
}


