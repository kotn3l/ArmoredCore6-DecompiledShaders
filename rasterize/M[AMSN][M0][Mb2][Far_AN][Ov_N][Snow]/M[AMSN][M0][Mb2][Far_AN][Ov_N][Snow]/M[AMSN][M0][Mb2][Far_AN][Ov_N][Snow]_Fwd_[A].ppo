#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1120;
float _3487;
float _3488;
float _3489;
float _3490;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _252 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3499 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _253 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    vec4 _266 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _269 = _266.x;
    float _270 = _266.y;
    float _271 = _266.z;
    vec4 _284 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _311 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = _311.x;
    float _314 = _311.y;
    vec4 _327 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3510 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _331 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _334 = 3.0 - (_331 * 2.0);
    float _336 = _331 * _331;
    float _350 = (((_284.x - _269) * _253) + _269) + (((_313 + (-0.5)) + ((_336 * (_327.x - _313)) * _334)) * cbMtdParam._m0[12u].y);
    float _351 = (((_284.y - _270) * _253) + _270) + (((_314 + (-0.5)) + ((_336 * (_327.y - _314)) * _334)) * cbMtdParam._m0[12u].y);
    float _354 = (_350 * 2.0) + (-1.0);
    float _356 = (_351 * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3521 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))));
    float _365 = fma(_362, _226, fma(_356, _219, _354 * _205));
    float _368 = fma(_362, _227, fma(_356, _220, _354 * _206));
    float _371 = fma(_362, _228, fma(_356, _221, _354 * _207));
    float _380 = exp2(log2(inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371))) * _368) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3532 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _383 = 1.0 - _381;
    float _387 = (cbMtdParam._m0[11u].w * ((_381 + 1.0) - _383)) + _383;
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = (isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0))) + TEXCOORD.w;
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _409 = ((1.0 - (isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _417 = (((1.0 - (isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3573 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    vec4 _436 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    vec4 _453 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _467 = (((_453.x - _438) * _253) + _438) * cbMtdParam._m0[10u].x;
    float _468 = (((_453.y - _439) * _253) + _439) * cbMtdParam._m0[10u].y;
    float _469 = (((_453.z - _440) * _253) + _440) * cbMtdParam._m0[10u].z;
    float _476 = ((cbMtdParam._m0[9u].x - _467) * _418) + _467;
    float _477 = ((cbMtdParam._m0[9u].y - _468) * _418) + _468;
    float _478 = ((cbMtdParam._m0[9u].z - _469) * _418) + _469;
    float _480 = cbMtdParam._m0[12u].z * (((_284.z - _271) * _253) + _271);
    vec4 _492 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    vec4 _508 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _517 = cbMtdParam._m0[11u].z * _418;
    float _524 = (_517 * ((_494 - _350) + ((_508.x - _494) * _253))) + _350;
    float _525 = (_517 * ((_495 - _351) + ((_508.y - _495) * _253))) + _351;
    float _538 = (((((_524 * cbMtdParam._m0[13u].y) - _524) * _253) + _524) * 2.0) + (-1.0);
    float _539 = (((((_525 * cbMtdParam._m0[13u].z) - _525) * _253) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3584 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _548 = fma(_545, _226, fma(_539, _219, _538 * _205));
    float _551 = fma(_545, _227, fma(_539, _220, _538 * _206));
    float _554 = fma(_545, _228, fma(_539, _221, _538 * _207));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3595 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _562 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3617 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3628 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    vec4 _645 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _647 = _645.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _800 = sqrt(((_631 * _631) + (_632 * _632)) + (_633 * _633));
        float _806 = (cbMatDynParam._m0[5u].x * _800) + cbMatDynParam._m0[5u].y;
        float _3639 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _811 = (cbMatDynParam._m0[5u].z * _800) + cbMatDynParam._m0[5u].w;
        float _3650 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) - _807)) + _807) < ((_647 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _677 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _680 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _683 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _696 = uint(roundEven(NORMAL.w)) * 13u;
    uint _697 = _696 + 9u;
    uint _698 = _697 + uint(cbMatDynParam._m0[0u].w);
    float _704 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_698].x;
    float _705 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_698].y;
    float _706 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_698].z;
    float _3661 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _721 = _718.x * TEXCOORD.z;
    float _722 = dot(vec3(_559, _560, _561), vec3(_638, _639, _640));
    float _725 = _722 * 2.0;
    float _729 = (_725 * _559) - _638;
    float _730 = (_725 * _560) - _639;
    float _731 = (_725 * _561) - _640;
    float _735 = abs(dot(vec3(_638, _639, _640), vec3(_559, _560, _561)));
    float _3694 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _737 = sqrt(_562);
    float _749 = exp2((_737 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_737 * 3.0));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _845 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _849 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _853 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _877 = _781 + _559;
        float _878 = _785 + _560;
        float _879 = _789 + _561;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _845;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _849;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _853;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_845 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_849 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_853 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_559, _560, _561), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3742 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_559, _560, _561), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3775 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_559, _560, _561), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3808 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1163 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1167 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1171 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1194 = _781 + _559;
        float _1195 = _785 + _560;
        float _1196 = _789 + _561;
        float _1206 = fma(_1196, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194)) - _1163;
        float _1207 = fma(_1196, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194)) - _1167;
        float _1208 = fma(_1196, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194)) - _1171;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1163 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1167 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[35u].z) + ((((((_1171 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1262 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1229.x + (-0.5));
        float _1264 = _1262 * (_1229.y + (-0.5));
        float _1265 = _1262 * (_1229.z + (-0.5));
        float _1272 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1236.x + (-0.5));
        float _1274 = _1272 * (_1236.y + (-0.5));
        float _1275 = _1272 * (_1236.z + (-0.5));
        float _1282 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1243.x + (-0.5));
        float _1284 = _1282 * (_1243.y + (-0.5));
        float _1285 = _1282 * (_1243.z + (-0.5));
        float _1292 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1250.x + (-0.5));
        float _1294 = _1292 * (_1250.y + (-0.5));
        float _1295 = _1292 * (_1250.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_559, _560, _561), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3871 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1326 + 1.0))) + _1331) * _1296;
        float _1341 = _1264 * 0.5;
        float _1342 = _1274 * 0.5;
        float _1343 = _1284 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_559, _560, _561), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3904 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1368 + 1.0))) + _1373) * _1297;
        float _1383 = _1265 * 0.5;
        float _1384 = _1275 * 0.5;
        float _1385 = _1285 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_559, _560, _561), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3937 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1410 + 1.0))) + _1415) * _1298;
        _1432 = _1265;
        _1433 = _1264;
        _1434 = _1263;
        _1435 = _1275;
        _1436 = _1274;
        _1437 = _1273;
        _1438 = _1285;
        _1439 = _1284;
        _1440 = _1283;
        _1441 = _1298;
        _1442 = _1297;
        _1443 = _1296;
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = _1120;
        _1440 = _1120;
        _1441 = _1120;
        _1442 = _1120;
        _1443 = _1120;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1132)) + _1132;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1133)) + _1133;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1134)) + _1134;
    float _1479 = fma(_1458, cbSceneParam._m0[89u].z, fma(_1457, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1482 = fma(_1458, cbSceneParam._m0[90u].z, fma(_1457, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1485 = fma(_1458, cbSceneParam._m0[91u].z, fma(_1457, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1456));
    float _1500 = _729 * 0.5;
    float _1501 = _730 * 0.5;
    float _1502 = _731 * 0.5;
    float _1503 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1506 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1509 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1543;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1516 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1520 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1524 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1531 = dot(vec4(cbModelParam._m0[39u]), vec4(_1500, _1501, _1502, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1554;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1545 = dot(vec4(cbModelParam._m0[40u]), vec4(_1500, _1501, _1502, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1558 = (_1554 * cbModelParam._m0[1u].x) + (_1543 * (1.0 - cbModelParam._m0[1u].x));
    float _1568 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1568 : min(cbModelParam._m0[25u].z, _1568));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_731, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729));
        float _1631 = fma(_731, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729));
        float _1634 = fma(_731, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1662 = frontier_phi_19_17_ladder;
        }
        float _1866;
        if (_1631 > 0.0)
        {
            _1866 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1866 = frontier_phi_28_24_ladder;
        }
        float _2109;
        if (_1634 > 0.0)
        {
            _2109 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2109 = frontier_phi_40_35_ladder;
        }
        float _2111 = isnan(_1866) ? _1662 : (isnan(_1662) ? _1866 : min(_1662, _1866));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1628) + _1617;
        float _2117 = (_2112 * _1631) + _1621;
        float _2118 = (_2112 * _1634) + _1625;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1569);
            frontier_phi_18_40_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_18_40_ladder_2;
        _1652 = frontier_phi_18_40_ladder_1;
        _1654 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_729, _730, _731), _1569);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_731, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729));
        float _1730 = fma(_731, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729));
        float _1733 = fma(_731, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729));
        float _1871;
        if (_1727 > 0.0)
        {
            _1871 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1871 = frontier_phi_30_26_ladder;
        }
        float _2136;
        if (_1730 > 0.0)
        {
            _2136 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2136 = frontier_phi_42_37_ladder;
        }
        float _2341;
        if (_1733 > 0.0)
        {
            _2341 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2341 = frontier_phi_51_48_ladder;
        }
        float _2343 = isnan(_2136) ? _1871 : (isnan(_1871) ? _2136 : min(_1871, _2136));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1727) + _1716;
        float _2349 = (_2344 * _1730) + _1720;
        float _2350 = (_2344 * _1733) + _1724;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2351;
        float _2354 = _2351 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2350 > _2354) || ((_2350 < _2352) || ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 < _2352) || (_2348 > _2354))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2350, cbModelParam._m0[17u].z, fma(_2349, cbModelParam._m0[17u].y, _2348 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2350, cbModelParam._m0[18u].z, fma(_2349, cbModelParam._m0[18u].y, _2348 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2350, cbModelParam._m0[19u].z, fma(_2349, cbModelParam._m0[19u].y, _2348 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_27_51_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_27_51_ladder_2;
        _1754 = frontier_phi_27_51_ladder_1;
        _1756 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_729, _730, _731), _1659);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1768 = ((((1.0 - _749) * ((_737 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_749 * _737)) * _721;
    float _1769 = _1768 * ((cbModelParam._m0[1u].w * (_1752 - _1650)) + _1650);
    float _1770 = _1768 * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1771 = _1768 * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_696 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _721 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1825 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1829 = _1792 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_559, _560, _561));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_559, _560, _561));
    float _4073 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _4084 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1809].x * _1815) * _1850) + ((cbLight._m0[_1819].x * _1825) * _1848);
    float _1858 = ((_1815 * cbLight._m0[_1809].y) * _1850) + ((_1825 * cbLight._m0[_1819].y) * _1848);
    float _1859 = ((_1815 * cbLight._m0[_1809].z) * _1850) + ((_1825 * cbLight._m0[_1819].z) * _1848);
    uvec4 _1863 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1865 = _1863.x == 0u;
    float _1876;
    float _1878;
    float _1880;
    if (_1865)
    {
        _1876 = _1857;
        _1878 = _1858;
        _1880 = _1859;
    }
    else
    {
        uint _1884 = _1792 + 6u;
        float _1900 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _1901 = _1900 * _1900;
        float _4095 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1903 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1876 = (((cbLight._m0[_1884].x * 0.3183098733425140380859375) * _1902) * _1903) + _1857;
        _1878 = (((cbLight._m0[_1884].y * 0.3183098733425140380859375) * _1902) * _1903) + _1858;
        _1880 = (((cbLight._m0[_1884].z * 0.3183098733425140380859375) * _1902) * _1903) + _1859;
    }
    bool _1883 = _1863.y == 0u;
    float _1921;
    float _1923;
    float _1925;
    if (_1883)
    {
        _1921 = _1876;
        _1923 = _1878;
        _1925 = _1880;
    }
    else
    {
        uint _2080 = _1792 + 7u;
        float _2096 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4111 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2099 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1921 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1876;
        _1923 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1878;
        _1925 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1880;
    }
    uint _1928 = _1792 + 8u;
    float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _562) * 0.949999988079071044921875);
    float _1942 = _1941 * _1941;
    float _1943 = cbLight._m0[_1792].x + _638;
    float _1944 = cbLight._m0[_1792].y + _639;
    float _1945 = cbLight._m0[_1792].z + _640;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1950 = _1949 * _1943;
    float _1951 = _1949 * _1944;
    float _1952 = _1949 * _1945;
    float _1953 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1792].xyz));
    float _4127 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _1957 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1958 = dot(vec3(_559, _560, _561), vec3(_1950, _1951, _1952));
    float _4149 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1962 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1950, _1951, _1952));
    float _4160 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = _1942 * _1942;
    float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
    float _1981 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1982 = 1.0 - _1942;
    float _1993 = (0.5 / (((_1957 * ((_1956 * _1982) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1957 * _1982) + _1942) * _1956))) * _1956;
    float _4171 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
    uint _2006 = _1792 + 9u;
    float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _562) * 0.949999988079071044921875);
    float _2018 = _2017 * _2017;
    float _2019 = cbLight._m0[_1829].x + _638;
    float _2020 = cbLight._m0[_1829].y + _639;
    float _2021 = cbLight._m0[_1829].z + _640;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2026 = _2025 * _2019;
    float _2027 = _2025 * _2020;
    float _2028 = _2025 * _2021;
    float _2029 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1829].xyz));
    float _4182 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2033 = dot(vec3(_559, _560, _561), vec3(_2026, _2027, _2028));
    float _4193 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2026, _2027, _2028));
    float _4204 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2018 * _2018;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2054 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2055 = 1.0 - _2018;
    float _2065 = (0.5 / (((_1957 * ((_2032 * _2055) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1957 * _2055) + _2018) * _2032))) * _2032;
    float _4215 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    float _2077 = (((_2054 * cbLight._m0[_2006].x) * _2067) * _1815) + (((_1981 * cbLight._m0[_1928].x) * _1995) * _1825);
    float _2078 = (((_2054 * cbLight._m0[_2006].y) * _2067) * _1815) + (((_1981 * cbLight._m0[_1928].y) * _1995) * _1825);
    float _2079 = (((_2054 * cbLight._m0[_2006].z) * _2067) * _1815) + (((_1981 * cbLight._m0[_1928].z) * _1995) * _1825);
    float _2141;
    float _2143;
    float _2145;
    if (_1865)
    {
        _2141 = _2077;
        _2143 = _2078;
        _2145 = _2079;
    }
    else
    {
        uint _2147 = _1792 + 2u;
        uint _2151 = _1792 + 10u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _562) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _638;
        float _2168 = cbLight._m0[_2147].y + _639;
        float _2169 = cbLight._m0[_2147].z + _640;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2147].xyz));
        float _4226 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2181 = dot(vec3(_559, _560, _561), vec3(_2174, _2175, _2176));
        float _4237 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4248 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2203 = 1.0 - _2166;
        float _2213 = (0.5 / (((_1957 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1957 * _2203) + _2166) * _2180))) * _2180;
        float _4259 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2141 = (((_2202 * cbLight._m0[_2151].x) * _2215) * _2216) + _2077;
        _2143 = (((_2202 * cbLight._m0[_2151].y) * _2215) * _2216) + _2078;
        _2145 = (((_2202 * cbLight._m0[_2151].z) * _2215) * _2216) + _2079;
    }
    float _2251;
    float _2253;
    float _2255;
    if (_1883)
    {
        _2251 = _2141;
        _2253 = _2143;
        _2255 = _2145;
    }
    else
    {
        uint _2262 = _1792 + 3u;
        uint _2266 = _1792 + 11u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _562) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _638;
        float _2283 = cbLight._m0[_2262].y + _639;
        float _2284 = cbLight._m0[_2262].z + _640;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2262].xyz));
        float _4275 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2296 = dot(vec3(_559, _560, _561), vec3(_2289, _2290, _2291));
        float _4286 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4297 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2317 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2318 = 1.0 - _2281;
        float _2328 = (0.5 / (((_1957 * ((_2295 * _2318) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_1957 * _2318) + _2281) * _2295))) * _2295;
        float _4308 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2251 = (((_2317 * cbLight._m0[_2266].x) * _2330) * _2331) + _2141;
        _2253 = (((_2317 * cbLight._m0[_2266].y) * _2330) * _2331) + _2143;
        _2255 = (((_2317 * cbLight._m0[_2266].z) * _2330) * _2331) + _2145;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1790.y == 0u)
    {
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2406;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2406;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2406;
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.x;
        uint _2433 = uint((float(_2421.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2422))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2422)));
        float _2443 = (log2(_2409 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2444 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        uint _2447 = uint(isnan(14.0) ? _2444 : (isnan(_2444) ? 14.0 : min(_2444, 14.0)));
        uvec4 _2452 = texelFetch(g_lightClusterGridBuffer, int(((_2447 << 2u) + (_2433 << 6u)) >> 2u));
        uint _2453 = _2452.x;
        uint _2454 = _2421.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2454 >> 4u) & 15u)) + 4294967295u) & _2453) == 0u) || ((_2454 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            uint _2711 = 0u;
            uint _2720;
            bool _2721;
            for (;;)
            {
                _2720 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                _2721 = _2720 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2721)
                {
                    frontier_phi_68_pred = _2707;
                    frontier_phi_68_pred_1 = _2710;
                    frontier_phi_68_pred_2 = _2709;
                    frontier_phi_68_pred_3 = _2708;
                    frontier_phi_68_pred_4 = _2706;
                    frontier_phi_68_pred_5 = _2705;
                }
                else
                {
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    uint _2856;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2720;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    for (;;)
                    {
                        uint _2860 = uint(findLSB(_2856)) + (_2711 << 5u);
                        uint _2857 = (_2856 + 4294967295u) & _2856;
                        uint _2862 = _2860 * 48u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2882 = (_2860 * 48u) + 4u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2901 = (_2860 * 48u) + 8u;
                        vec3 _2912 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x));
                        float _2916 = _2876.x - _2407;
                        float _2917 = _2876.y - _2408;
                        float _2918 = _2876.z - _2409;
                        float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                        float _2922 = inversesqrt(_2919);
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2926 = dot(vec3(_677, _680, _683), vec3(_2923, _2924, _2925));
                        float _2931 = 1.0 - (_2919 * _2876.w);
                        float _4334 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _2933 = sqrt(_2919) * _2895.w;
                        float _2936 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2926) + _2937;
                        float _2943 = _2933 * _2933;
                        float _2947 = ((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2932) / ((_2943 * 0.699999988079071044921875) + 1.0);
                        float _2951 = (-0.0) - _2407;
                        float _2952 = (-0.0) - _2408;
                        float _2953 = (-0.0) - _2409;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2968 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _737;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_677, _680, _683), vec3(_2958, _2959, _2960));
                        float _4350 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _2993 = dot(vec3(_677, _680, _683), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4361 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2936 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2926) + _3002;
                        float _4372 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4383 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3000 * _3000) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125))) * _2932;
                        _2780 = (_2947 * _2895.x) + _2853;
                        _2781 = (_2947 * _2895.y) + _2854;
                        _2782 = (_2947 * _2895.z) + _2855;
                        _2777 = (_3028 * _2912.x) + _2850;
                        _2778 = (_3028 * _2912.y) + _2851;
                        _2779 = (_3028 * _2912.z) + _2852;
                        if (_2857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2857;
                        }
                    }
                    frontier_phi_68_pred = _2779;
                    frontier_phi_68_pred_1 = _2782;
                    frontier_phi_68_pred_2 = _2781;
                    frontier_phi_68_pred_3 = _2780;
                    frontier_phi_68_pred_4 = _2778;
                    frontier_phi_68_pred_5 = _2777;
                }
                _2558 = frontier_phi_68_pred;
                _2564 = frontier_phi_68_pred_1;
                _2562 = frontier_phi_68_pred_2;
                _2560 = frontier_phi_68_pred_3;
                _2556 = frontier_phi_68_pred_4;
                _2554 = frontier_phi_68_pred_5;
                uint _2712 = _2711 + 1u;
                if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2705 = _2554;
                    _2706 = _2556;
                    _2707 = _2558;
                    _2708 = _2560;
                    _2709 = _2562;
                    _2710 = _2564;
                    _2711 = _2712;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((4294967295u << _2570) & _2453) == 0u)
        {
            _2673 = _2553;
            _2675 = _2555;
            _2677 = _2557;
            _2679 = _2559;
            _2681 = _2561;
            _2683 = _2563;
        }
        else
        {
            float _2698 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
            float _2699 = _2698 * _2407;
            float _2700 = _2698 * _2408;
            float _2701 = _2698 * _2409;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2833 = _2553;
                float _2834 = _2555;
                float _2835 = _2557;
                float _2836 = _2559;
                float _2837 = _2561;
                float _2838 = _2563;
                uint _2839 = _2570;
                uint _2848;
                bool _2849;
                for (;;)
                {
                    _2848 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                    _2849 = _2848 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2849)
                    {
                        frontier_phi_79_pred = _2838;
                        frontier_phi_79_pred_1 = _2837;
                        frontier_phi_79_pred_2 = _2836;
                        frontier_phi_79_pred_3 = _2835;
                        frontier_phi_79_pred_4 = _2834;
                        frontier_phi_79_pred_5 = _2833;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        uint _3061 = _2848;
                        uint _3062;
                        vec4 _3087;
                        float _3088;
                        vec4 _3103;
                        vec3 _3115;
                        vec4 _3131;
                        vec4 _3147;
                        float _3194;
                        bool _3195;
                        for (;;)
                        {
                            uint _3072 = ((_2839 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3061));
                            _3062 = (_3061 + 4294967295u) & _3061;
                            uint _3074 = _3072 * 40u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3088 = _3087.w;
                            uint _3090 = (_3072 * 40u) + 4u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3072 * 40u) + 8u;
                            _3115 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x));
                            uint _3118 = (_3072 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3134 = (_3072 * 40u) + 20u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3072 * 40u) + 24u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3169 = (_3072 * 40u) + 28u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3194 = fma(_2409, _3182.z, fma(_2408, _3182.y, _3182.x * _2407)) + _3182.w;
                            _3195 = !((fma(_2409, _3163.z, fma(_2408, _3163.y, _3163.x * _2407)) + _3163.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3195)
                            {
                                float _3222 = _3087.x - _2407;
                                float _3223 = _3087.y - _2408;
                                float _3224 = _3087.z - _2409;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3088 * _3088));
                                float _4394 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3240 = sqrt(_3225) * _3103.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3246 = ((1.0 - _3243) * dot(vec3(_3229, _3230, _3231), vec3(_677, _680, _683))) + _3243;
                                float _3249 = _3240 * _3240;
                                float _3253 = (fma(_2409, _3131.z, fma(_2408, _3131.y, _3131.x * _2407)) + _3131.w) / _3194;
                                float _3254 = (fma(_2409, _3147.z, fma(_2408, _3147.y, _3147.x * _2407)) + _3147.w) / _3194;
                                float _3258 = 1.0 - dot(vec2(_3253, _3254), vec2(_3253, _3254));
                                float _4410 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3260 = _3259 * (((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3236) / ((_3249 * 0.699999988079071044921875) + 1.0));
                                float _3272 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                                float _3273 = 1.0 - _737;
                                float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                                float _3281 = _3280 * _3280;
                                float _3282 = _3281 * _3281;
                                float _3283 = _3229 - _2699;
                                float _3284 = _3230 - _2700;
                                float _3285 = _3231 - _2701;
                                float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                                float _3293 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2699, (-0.0) - _2700, (-0.0) - _2701));
                                float _4421 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3297 = dot(vec3(_677, _680, _683), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                                float _4432 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                                float _3305 = _3242 * _3281;
                                float _3306 = _3305 * _3305;
                                float _3312 = ((1.0 - _3306) * dot(vec3(_677, _680, _683), vec3(_3229, _3230, _3231))) + _3306;
                                float _4443 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3314 = 1.0 - _3281;
                                float _3324 = (0.5 / (((_3313 * ((_3296 * _3314) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3281) * _3296))) * _3313;
                                float _4454 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3334 = (_3259 * _3236) * (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3304 * _3304) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3260 * _3103.z;
                                frontier_phi_85_pred_1 = _3260 * _3103.y;
                                frontier_phi_85_pred_2 = _3260 * _3103.x;
                                frontier_phi_85_pred_3 = _3334 * _3115.z;
                                frontier_phi_85_pred_4 = _3334 * _3115.y;
                                frontier_phi_85_pred_5 = _3334 * _3115.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_85_pred;
                            _3342 = frontier_phi_85_pred_1;
                            _3341 = frontier_phi_85_pred_2;
                            _3340 = frontier_phi_85_pred_3;
                            _3339 = frontier_phi_85_pred_4;
                            _3338 = frontier_phi_85_pred_5;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            _3047 = _3343 + _3060;
                            _3042 = _3338 + _3055;
                            _3043 = _3339 + _3056;
                            _3044 = _3340 + _3057;
                            if (_3062 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3062;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3047;
                        frontier_phi_79_pred_1 = _3046;
                        frontier_phi_79_pred_2 = _3045;
                        frontier_phi_79_pred_3 = _3044;
                        frontier_phi_79_pred_4 = _3043;
                        frontier_phi_79_pred_5 = _3042;
                    }
                    _2684 = frontier_phi_79_pred;
                    _2682 = frontier_phi_79_pred_1;
                    _2680 = frontier_phi_79_pred_2;
                    _2678 = frontier_phi_79_pred_3;
                    _2676 = frontier_phi_79_pred_4;
                    _2674 = frontier_phi_79_pred_5;
                    uint _2840 = _2839 + 1u;
                    if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2833 = _2674;
                        _2834 = _2676;
                        _2835 = _2678;
                        _2836 = _2680;
                        _2837 = _2682;
                        _2838 = _2684;
                        _2839 = _2840;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2680;
                frontier_phi_60_61_ladder_1 = _2684;
                frontier_phi_60_61_ladder_2 = _2682;
                frontier_phi_60_61_ladder_3 = _2678;
                frontier_phi_60_61_ladder_4 = _2676;
                frontier_phi_60_61_ladder_5 = _2674;
            }
            else
            {
                frontier_phi_60_61_ladder = _2559;
                frontier_phi_60_61_ladder_1 = _2563;
                frontier_phi_60_61_ladder_2 = _2561;
                frontier_phi_60_61_ladder_3 = _2557;
                frontier_phi_60_61_ladder_4 = _2555;
                frontier_phi_60_61_ladder_5 = _2553;
            }
            _2673 = frontier_phi_60_61_ladder_5;
            _2675 = frontier_phi_60_61_ladder_4;
            _2677 = frontier_phi_60_61_ladder_3;
            _2679 = frontier_phi_60_61_ladder;
            _2681 = frontier_phi_60_61_ladder_2;
            _2683 = frontier_phi_60_61_ladder_1;
        }
        float _2688 = isnan(1.0) ? _721 : (isnan(_721) ? 1.0 : min(_721, 1.0));
        _2465 = (_2688 * _2679) + _1921;
        _2467 = (_2688 * _2681) + _1923;
        _2469 = (_2688 * _2683) + _1925;
        _2471 = ((_2673 * 0.039999999105930328369140625) * _2688) + _2251;
        _2473 = ((_2675 * 0.039999999105930328369140625) * _2688) + _2253;
        _2475 = ((_2677 * 0.039999999105930328369140625) * _2688) + _2255;
    }
    else
    {
        _2465 = _1921;
        _2467 = _1923;
        _2469 = _1925;
        _2471 = _2251;
        _2473 = _2253;
        _2475 = _2255;
    }
    float _4470 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4481 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4492 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _2492 = ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2465 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _721))) + ((_2471 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    float _2493 = ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2467 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _721))) + ((_2473 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    float _2494 = ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2469 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _721))) + ((_2475 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    uint _2495 = _696 + 6u;
    float _2503 = _658 / cbSceneParam._m0[86u].x;
    float _2504 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2579 = _2578 / _581;
        float _2590 = _2579 * _631;
        float _2591 = _632 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2593 = _2579 * _633;
        float _2595 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2596 = _2595 + cbSceneParam._m0[79u].w;
        float _2597 = cbSceneParam._m0[79u].w - _2591;
        float _2603 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2593 * _2593));
        float _2606 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2603;
        float _2611 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2613 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2790;
        if (abs((_2592 - _2595) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2790 = ((((_2596 > 0.0) ? exp2(_2611 * _2596) : (2.0 - exp2(_2613 * _2596))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2606;
        }
        else
        {
            float _2734 = 1.0 / cbSceneParam._m0[80u].x;
            float _2735 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : max(_2596, _2597));
            float _2736 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : min(_2596, _2597));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            _2790 = ((abs(_2603 / _2592) * cbSceneParam._m0[80u].y) * ((((_2745 - _2746) * 2.0) - ((exp2(_2611 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0)))) - exp2(_2611 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))))) * _2734)) - ((exp2(_2613 * _2745) - exp2(_2613 * _2746)) * _2734))) + (_2606 * cbSceneParam._m0[80u].z);
        }
        vec4 _2792 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2801 = exp2((_2790 * (-1.44269502162933349609375)) * (1.0 - _2792.w));
        float _2802 = log2(_2801);
        float _2818 = log2(_2523);
        _2615 = (exp2(_2818 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].x)) * _2792.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2617 = (exp2(_2818 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].y)) * _2792.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2619 = (exp2(_2818 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].z)) * _2792.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2621 = _2801 * _2523;
    }
    else
    {
        _2615 = _2520;
        _2617 = _2521;
        _2619 = _2522;
        _2621 = _2523;
    }
    bool _2828;
    vec4 _2631;
    vec4 _2653;
    float _2655;
    float _2659;
    float _2660;
    float _2661;
    float _2662;
    bool _2672;
    for (;;)
    {
        _2631 = cbMatDynParam._m0[0u];
        float _2633 = roundEven(_2631.y);
        bool _2634 = _2633 == 3.0;
        float _2635 = log2(_2621);
        float _2642 = exp2(_2635 * cbSceneParam._m0[78u].x) * _2492;
        float _2643 = exp2(_2635 * cbSceneParam._m0[78u].y) * _2493;
        float _2644 = exp2(_2635 * cbSceneParam._m0[78u].z) * _2494;
        float _2651 = _647 + (-0.5);
        _2653 = cbMtdParam._m0[1u];
        _2655 = _2653.y * _2651;
        float _2658 = (_2633 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2659 = _2658 * (_2634 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2615)));
        _2660 = _2658 * (_2634 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2617)));
        _2661 = _2658 * (_2634 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2619)));
        _2662 = _2651 * 0.999000012874603271484375;
        _2672 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2672)
        {
            if ((cbInstanceData._m0[_696 + 7u].x + _2662) < 0.5)
            {
                _2828 = true;
                break;
            }
        }
        uint _2769 = _697 + uint(_2631.w);
        if ((cbInstanceData._m0[_2769].w < 1.0) && ((cbInstanceData._m0[_2769].w + _2662) < 0.5))
        {
            _2828 = true;
            break;
        }
        if ((_2655 + 1.0) < _2653.x)
        {
            _2828 = true;
            break;
        }
        _2828 = false;
        break;
    }
    float _3033;
    if (_2828)
    {
        discard_state = true;
        _3033 = 0.0;
    }
    else
    {
        _3033 = cbInstanceData._m0[_2495].w;
    }
    SV_Target.x = _2659;
    SV_Target.y = _2660;
    SV_Target.z = _2661;
    SV_Target.w = _3033;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
    discard_exit();
}


