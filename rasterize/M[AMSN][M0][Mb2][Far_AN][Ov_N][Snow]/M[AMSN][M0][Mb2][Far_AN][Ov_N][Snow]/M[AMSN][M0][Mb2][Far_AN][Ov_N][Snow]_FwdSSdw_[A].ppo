#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1122;
float _3513;
float _3514;
float _3515;
float _3516;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    float _254 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3525 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _255 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    vec4 _268 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _271 = _268.x;
    float _272 = _268.y;
    float _273 = _268.z;
    vec4 _286 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _313 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _315 = _313.x;
    float _316 = _313.y;
    vec4 _329 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3536 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _333 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _336 = 3.0 - (_333 * 2.0);
    float _338 = _333 * _333;
    float _352 = (((_286.x - _271) * _255) + _271) + (((_315 + (-0.5)) + ((_338 * (_329.x - _315)) * _336)) * cbMtdParam._m0[12u].y);
    float _353 = (((_286.y - _272) * _255) + _272) + (((_316 + (-0.5)) + ((_338 * (_329.y - _316)) * _336)) * cbMtdParam._m0[12u].y);
    float _356 = (_352 * 2.0) + (-1.0);
    float _358 = (_353 * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3547 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _364 = sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))));
    float _367 = fma(_364, _228, fma(_358, _221, _356 * _207));
    float _370 = fma(_364, _229, fma(_358, _222, _356 * _208));
    float _373 = fma(_364, _230, fma(_358, _223, _356 * _209));
    float _382 = exp2(log2(inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373))) * _370) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3558 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _385 = 1.0 - _383;
    float _389 = (cbMtdParam._m0[11u].w * ((_383 + 1.0) - _385)) + _385;
    float _390 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = (isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0))) + TEXCOORD.w;
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _411 = ((1.0 - (isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _412 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _419 = (((1.0 - (isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3599 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    vec4 _438 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    vec4 _455 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _469 = (((_455.x - _440) * _255) + _440) * cbMtdParam._m0[10u].x;
    float _470 = (((_455.y - _441) * _255) + _441) * cbMtdParam._m0[10u].y;
    float _471 = (((_455.z - _442) * _255) + _442) * cbMtdParam._m0[10u].z;
    float _478 = ((cbMtdParam._m0[9u].x - _469) * _420) + _469;
    float _479 = ((cbMtdParam._m0[9u].y - _470) * _420) + _470;
    float _480 = ((cbMtdParam._m0[9u].z - _471) * _420) + _471;
    float _482 = cbMtdParam._m0[12u].z * (((_286.z - _273) * _255) + _273);
    vec4 _494 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    vec4 _510 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _519 = cbMtdParam._m0[11u].z * _420;
    float _526 = (_519 * ((_496 - _352) + ((_510.x - _496) * _255))) + _352;
    float _527 = (_519 * ((_497 - _353) + ((_510.y - _497) * _255))) + _353;
    float _540 = (((((_526 * cbMtdParam._m0[13u].y) - _526) * _255) + _526) * 2.0) + (-1.0);
    float _541 = (((((_527 * cbMtdParam._m0[13u].z) - _527) * _255) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3610 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    float _550 = fma(_547, _228, fma(_541, _221, _540 * _207));
    float _553 = fma(_547, _229, fma(_541, _222, _540 * _208));
    float _556 = fma(_547, _230, fma(_541, _223, _540 * _209));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _3621 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _564 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3643 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3654 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _583 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _633 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _623);
    float _634 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _623);
    float _635 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _623);
    float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
    float _640 = _633 * _639;
    float _641 = _634 * _639;
    float _642 = _635 * _639;
    vec4 _647 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _649 = _647.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _802 = sqrt(((_633 * _633) + (_634 * _634)) + (_635 * _635));
        float _808 = (cbMatDynParam._m0[5u].x * _802) + cbMatDynParam._m0[5u].y;
        float _3665 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _813 = (cbMatDynParam._m0[5u].z * _802) + cbMatDynParam._m0[5u].w;
        float _3676 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) - _809)) + _809) < ((_649 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _682 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _685 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    uint _698 = uint(roundEven(NORMAL.w)) * 13u;
    uint _699 = _698 + 9u;
    uint _700 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3687 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _723 = _720.x * TEXCOORD.z;
    float _724 = dot(vec3(_561, _562, _563), vec3(_640, _641, _642));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _561) - _640;
    float _732 = (_727 * _562) - _641;
    float _733 = (_727 * _563) - _642;
    float _737 = abs(dot(vec3(_640, _641, _642), vec3(_561, _562, _563)));
    float _3720 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_564);
    float _751 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1121;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = fma(_791, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783));
        float _851 = fma(_791, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783));
        float _855 = fma(_791, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783));
        float _879 = _783 + _561;
        float _880 = _787 + _562;
        float _881 = _791 + _563;
        float _891 = fma(_881, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879)) - _847;
        float _892 = fma(_881, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879)) - _851;
        float _893 = fma(_881, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879)) - _855;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_847 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_851 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[34u].z) + ((((((_855 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _949 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_915.x + (-0.5));
        float _951 = _949 * (_915.y + (-0.5));
        float _952 = _949 * (_915.z + (-0.5));
        float _959 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_922.x + (-0.5));
        float _961 = _959 * (_922.y + (-0.5));
        float _962 = _959 * (_922.z + (-0.5));
        float _969 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_929.x + (-0.5));
        float _971 = _969 * (_929.y + (-0.5));
        float _972 = _969 * (_929.z + (-0.5));
        float _979 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_936.x + (-0.5));
        float _981 = _979 * (_936.y + (-0.5));
        float _982 = _979 * (_936.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1003 = (dot(vec3(_561, _562, _563), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1013 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3768 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1015 + 1.0))) + _1020) * _983;
        float _1030 = _951 * 0.5;
        float _1031 = _961 * 0.5;
        float _1032 = _971 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_561, _562, _563), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3801 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1057 + 1.0))) + _1062) * _984;
        float _1072 = _952 * 0.5;
        float _1073 = _962 * 0.5;
        float _1074 = _972 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_561, _562, _563), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3834 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1099 + 1.0))) + _1104) * _985;
        _1121 = _952;
        _1123 = _951;
        _1124 = _950;
        _1125 = _962;
        _1126 = _961;
        _1127 = _960;
        _1128 = _972;
        _1129 = _971;
        _1130 = _970;
        _1131 = _985;
        _1132 = _984;
        _1133 = _983;
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _1122;
        _1123 = _1122;
        _1124 = _1122;
        _1125 = _1122;
        _1126 = _1122;
        _1127 = _1122;
        _1128 = _1122;
        _1129 = _1122;
        _1130 = _1122;
        _1131 = _1122;
        _1132 = _1122;
        _1133 = _1122;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = fma(_791, cbModelParam._m0[30u].z, fma(_787, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _783));
        float _1169 = fma(_791, cbModelParam._m0[31u].z, fma(_787, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _783));
        float _1173 = fma(_791, cbModelParam._m0[32u].z, fma(_787, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _783));
        float _1196 = _783 + _561;
        float _1197 = _787 + _562;
        float _1198 = _791 + _563;
        float _1208 = fma(_1198, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196)) - _1165;
        float _1209 = fma(_1198, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196)) - _1169;
        float _1210 = fma(_1198, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196)) - _1173;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1165 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1169 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[35u].z) + ((((((_1173 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1264 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1231.x + (-0.5));
        float _1266 = _1264 * (_1231.y + (-0.5));
        float _1267 = _1264 * (_1231.z + (-0.5));
        float _1274 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1238.x + (-0.5));
        float _1276 = _1274 * (_1238.y + (-0.5));
        float _1277 = _1274 * (_1238.z + (-0.5));
        float _1284 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1245.x + (-0.5));
        float _1286 = _1284 * (_1245.y + (-0.5));
        float _1287 = _1284 * (_1245.z + (-0.5));
        float _1294 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1252.x + (-0.5));
        float _1296 = _1294 * (_1252.y + (-0.5));
        float _1297 = _1294 * (_1252.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_561, _562, _563), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3897 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1328 + 1.0))) + _1333) * _1298;
        float _1343 = _1266 * 0.5;
        float _1344 = _1276 * 0.5;
        float _1345 = _1286 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_561, _562, _563), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3930 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1370 + 1.0))) + _1375) * _1299;
        float _1385 = _1267 * 0.5;
        float _1386 = _1277 * 0.5;
        float _1387 = _1287 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_561, _562, _563), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3963 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1412 + 1.0))) + _1417) * _1300;
        _1434 = _1267;
        _1435 = _1266;
        _1436 = _1265;
        _1437 = _1277;
        _1438 = _1276;
        _1439 = _1275;
        _1440 = _1287;
        _1441 = _1286;
        _1442 = _1285;
        _1443 = _1300;
        _1444 = _1299;
        _1445 = _1298;
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1122;
        _1435 = _1122;
        _1436 = _1122;
        _1437 = _1122;
        _1438 = _1122;
        _1439 = _1122;
        _1440 = _1122;
        _1441 = _1122;
        _1442 = _1122;
        _1443 = _1122;
        _1444 = _1122;
        _1445 = _1122;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1134)) + _1134;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1135)) + _1135;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1136)) + _1136;
    float _1481 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1458));
    float _1502 = _731 * 0.5;
    float _1503 = _732 * 0.5;
    float _1504 = _733 * 0.5;
    float _1505 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1508 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1511 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1545;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1518 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1121, _1125, _1128, _1131));
        float _1522 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1526 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1533 = dot(vec4(cbModelParam._m0[39u]), vec4(_1502, _1503, _1504, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1556;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1547 = dot(vec4(cbModelParam._m0[40u]), vec4(_1502, _1503, _1504, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1560 = (_1556 * cbModelParam._m0[1u].x) + (_1545 * (1.0 - cbModelParam._m0[1u].x));
    float _1570 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _564);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1570 : min(cbModelParam._m0[25u].z, _1570));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_791, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_791, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_791, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1633 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1636 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1664 = frontier_phi_19_17_ladder;
        }
        float _1889;
        if (_1633 > 0.0)
        {
            _1889 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1889 = frontier_phi_28_24_ladder;
        }
        float _2135;
        if (_1636 > 0.0)
        {
            _2135 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2135 = frontier_phi_40_35_ladder;
        }
        float _2137 = isnan(_1889) ? _1664 : (isnan(_1664) ? _1889 : min(_1664, _1889));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1630) + _1619;
        float _2143 = (_2138 * _1633) + _1623;
        float _2144 = (_2138 * _1636) + _1627;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1571);
            frontier_phi_18_40_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_18_40_ladder_2;
        _1654 = frontier_phi_18_40_ladder_1;
        _1656 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1571);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _564);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_791, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_791, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_791, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1732 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1735 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1894;
        if (_1729 > 0.0)
        {
            _1894 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1894 = frontier_phi_30_26_ladder;
        }
        float _2162;
        if (_1732 > 0.0)
        {
            _2162 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2162 = frontier_phi_42_37_ladder;
        }
        float _2367;
        if (_1735 > 0.0)
        {
            _2367 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2367 = frontier_phi_51_48_ladder;
        }
        float _2369 = isnan(_2162) ? _1894 : (isnan(_1894) ? _2162 : min(_1894, _2162));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1729) + _1718;
        float _2375 = (_2370 * _1732) + _1722;
        float _2376 = (_2370 * _1735) + _1726;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2377;
        float _2380 = _2377 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2376 > _2380) || ((_2376 < _2378) || ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 < _2378) || (_2374 > _2380))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2376, cbModelParam._m0[17u].z, fma(_2375, cbModelParam._m0[17u].y, _2374 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2376, cbModelParam._m0[18u].z, fma(_2375, cbModelParam._m0[18u].y, _2374 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2376, cbModelParam._m0[19u].z, fma(_2375, cbModelParam._m0[19u].y, _2374 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_27_51_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_27_51_ladder_2;
        _1756 = frontier_phi_27_51_ladder_1;
        _1758 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1661);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1770 = ((((1.0 - _751) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_751 * _739)) * _723;
    float _1771 = _1770 * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1772 = _1770 * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1773 = _1770 * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_698 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _723 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1848 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1852 = _1812 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_561, _562, _563));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_561, _562, _563));
    float _4099 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _4110 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1829].x * _1835) * _1873) + (((cbLight._m0[_1839].x * _1804) * _1848) * _1871);
    float _1881 = ((_1835 * cbLight._m0[_1829].y) * _1873) + (((cbLight._m0[_1839].y * _1805) * _1848) * _1871);
    float _1882 = ((_1835 * cbLight._m0[_1829].z) * _1873) + (((cbLight._m0[_1839].z * _1806) * _1848) * _1871);
    uvec4 _1886 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1888 = _1886.x == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1888)
    {
        _1899 = _1880;
        _1901 = _1881;
        _1903 = _1882;
    }
    else
    {
        uint _1907 = _1812 + 6u;
        float _1923 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _4121 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1926 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1899 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1880;
        _1901 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1881;
        _1903 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1882;
    }
    bool _1906 = _1886.y == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1906)
    {
        _1944 = _1899;
        _1946 = _1901;
        _1948 = _1903;
    }
    else
    {
        uint _2106 = _1812 + 7u;
        float _2122 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4137 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2125 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1944 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1899;
        _1946 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1901;
        _1948 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1903;
    }
    uint _1951 = _1812 + 8u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _564) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1812].x + _640;
    float _1967 = cbLight._m0[_1812].y + _641;
    float _1968 = cbLight._m0[_1812].z + _642;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1812].xyz));
    float _4153 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _1980 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1981 = dot(vec3(_561, _562, _563), vec3(_1973, _1974, _1975));
    float _4175 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1973, _1974, _1975));
    float _4186 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1965 * _1965;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2005 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1980 * ((_1979 * _2005) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2005) + _1965) * _1979))) * _1979;
    float _4197 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    uint _2032 = _1812 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _564) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1852].x + _640;
    float _2046 = cbLight._m0[_1852].y + _641;
    float _2047 = cbLight._m0[_1852].z + _642;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1852].xyz));
    float _4208 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2059 = dot(vec3(_561, _562, _563), vec3(_2052, _2053, _2054));
    float _4219 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2052, _2053, _2054));
    float _4230 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2044;
    float _2091 = (0.5 / (((_1980 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2081) + _2044) * _2058))) * _2058;
    float _4241 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2103 = (((_2080 * cbLight._m0[_2032].x) * _2093) * _1835) + ((((cbLight._m0[_1951].x * _1804) * _2004) * _2018) * _1848);
    float _2104 = (((_2080 * cbLight._m0[_2032].y) * _2093) * _1835) + ((((cbLight._m0[_1951].y * _1805) * _2004) * _2018) * _1848);
    float _2105 = (((_2080 * cbLight._m0[_2032].z) * _2093) * _1835) + ((((cbLight._m0[_1951].z * _1806) * _2004) * _2018) * _1848);
    float _2167;
    float _2169;
    float _2171;
    if (_1888)
    {
        _2167 = _2103;
        _2169 = _2104;
        _2171 = _2105;
    }
    else
    {
        uint _2173 = _1812 + 2u;
        uint _2177 = _1812 + 10u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _564) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _640;
        float _2194 = cbLight._m0[_2173].y + _641;
        float _2195 = cbLight._m0[_2173].z + _642;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2173].xyz));
        float _4252 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2207 = dot(vec3(_561, _562, _563), vec3(_2200, _2201, _2202));
        float _4263 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4274 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2229 = 1.0 - _2192;
        float _2239 = (0.5 / (((_1980 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2229) + _2192) * _2206))) * _2206;
        float _4285 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2167 = (((_2228 * cbLight._m0[_2177].x) * _2241) * _2242) + _2103;
        _2169 = (((_2228 * cbLight._m0[_2177].y) * _2241) * _2242) + _2104;
        _2171 = (((_2228 * cbLight._m0[_2177].z) * _2241) * _2242) + _2105;
    }
    float _2277;
    float _2279;
    float _2281;
    if (_1906)
    {
        _2277 = _2167;
        _2279 = _2169;
        _2281 = _2171;
    }
    else
    {
        uint _2288 = _1812 + 3u;
        uint _2292 = _1812 + 11u;
        float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _564) * 0.949999988079071044921875);
        float _2307 = _2306 * _2306;
        float _2308 = cbLight._m0[_2288].x + _640;
        float _2309 = cbLight._m0[_2288].y + _641;
        float _2310 = cbLight._m0[_2288].z + _642;
        float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
        float _2315 = _2314 * _2308;
        float _2316 = _2314 * _2309;
        float _2317 = _2314 * _2310;
        float _2318 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2288].xyz));
        float _4301 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2322 = dot(vec3(_561, _562, _563), vec3(_2315, _2316, _2317));
        float _4312 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2326 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2315, _2316, _2317));
        float _4323 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2330 = _2307 * _2307;
        float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
        float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2344 = 1.0 - _2307;
        float _2354 = (0.5 / (((_1980 * ((_2321 * _2344) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2344) + _2307) * _2321))) * _2321;
        float _4334 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2277 = (((_2343 * cbLight._m0[_2292].x) * _2356) * _2357) + _2167;
        _2279 = (((_2343 * cbLight._m0[_2292].y) * _2356) * _2357) + _2169;
        _2281 = (((_2343 * cbLight._m0[_2292].z) * _2356) * _2357) + _2171;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1810.y == 0u)
    {
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2432;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2432;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2432;
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.x;
        uint _2459 = uint((float(_2447.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2448))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2448)));
        float _2469 = (log2(_2435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2470 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        uint _2473 = uint(isnan(14.0) ? _2470 : (isnan(_2470) ? 14.0 : min(_2470, 14.0)));
        uvec4 _2478 = texelFetch(g_lightClusterGridBuffer, int(((_2473 << 2u) + (_2459 << 6u)) >> 2u));
        uint _2479 = _2478.x;
        uint _2480 = _2447.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2480 >> 4u) & 15u)) + 4294967295u) & _2479) == 0u) || ((_2480 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2747)
                {
                    frontier_phi_68_pred = _2733;
                    frontier_phi_68_pred_1 = _2736;
                    frontier_phi_68_pred_2 = _2735;
                    frontier_phi_68_pred_3 = _2734;
                    frontier_phi_68_pred_4 = _2732;
                    frontier_phi_68_pred_5 = _2731;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2746;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2737 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _2433;
                        float _2943 = _2902.y - _2434;
                        float _2944 = _2902.z - _2435;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_679, _682, _685), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4360 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _2433;
                        float _2978 = (-0.0) - _2434;
                        float _2979 = (-0.0) - _2435;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2994 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2995 = 1.0 - _739;
                        float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                        float _3003 = _3002 * _3002;
                        float _3004 = _3003 * _3003;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3015 = dot(vec3(_679, _682, _685), vec3(_2984, _2985, _2986));
                        float _4376 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3019 = dot(vec3(_679, _682, _685), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                        float _4387 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                        float _3027 = _2962 * _3003;
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _2952) + _3028;
                        float _4398 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3033 = 1.0 - _3003;
                        float _3043 = (0.5 / (((_3032 * ((_3018 * _3033) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3003) * _3018))) * _3032;
                        float _4409 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3054 = (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3026 * _3026) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2806 = (_2973 * _2921.x) + _2879;
                        _2807 = (_2973 * _2921.y) + _2880;
                        _2808 = (_2973 * _2921.z) + _2881;
                        _2803 = (_3054 * _2938.x) + _2876;
                        _2804 = (_3054 * _2938.y) + _2877;
                        _2805 = (_3054 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_68_pred = _2805;
                    frontier_phi_68_pred_1 = _2808;
                    frontier_phi_68_pred_2 = _2807;
                    frontier_phi_68_pred_3 = _2806;
                    frontier_phi_68_pred_4 = _2804;
                    frontier_phi_68_pred_5 = _2803;
                }
                _2584 = frontier_phi_68_pred;
                _2590 = frontier_phi_68_pred_1;
                _2588 = frontier_phi_68_pred_2;
                _2586 = frontier_phi_68_pred_3;
                _2582 = frontier_phi_68_pred_4;
                _2580 = frontier_phi_68_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2580;
                    _2732 = _2582;
                    _2733 = _2584;
                    _2734 = _2586;
                    _2735 = _2588;
                    _2736 = _2590;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2596) & _2479) == 0u)
        {
            _2699 = _2579;
            _2701 = _2581;
            _2703 = _2583;
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
            float _2725 = _2724 * _2433;
            float _2726 = _2724 * _2434;
            float _2727 = _2724 * _2435;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2859 = _2579;
                float _2860 = _2581;
                float _2861 = _2583;
                float _2862 = _2585;
                float _2863 = _2587;
                float _2864 = _2589;
                uint _2865 = _2596;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2473 << 5u) + (_2459 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2875)
                    {
                        frontier_phi_79_pred = _2864;
                        frontier_phi_79_pred_1 = _2863;
                        frontier_phi_79_pred_2 = _2862;
                        frontier_phi_79_pred_3 = _2861;
                        frontier_phi_79_pred_4 = _2860;
                        frontier_phi_79_pred_5 = _2859;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        uint _3087 = _2874;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3157;
                        vec4 _3173;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3098 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3144 = (_3098 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3098 * 40u) + 20u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3098 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3098 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2435, _3208.z, fma(_2434, _3208.y, _3208.x * _2433)) + _3208.w;
                            _3221 = !((fma(_2435, _3189.z, fma(_2434, _3189.y, _3189.x * _2433)) + _3189.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3113.x - _2433;
                                float _3249 = _3113.y - _2434;
                                float _3250 = _3113.z - _2435;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3114 * _3114));
                                float _4420 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3266 = sqrt(_3251) * _3129.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_679, _682, _685))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2435, _3157.z, fma(_2434, _3157.y, _3157.x * _2433)) + _3157.w) / _3220;
                                float _3280 = (fma(_2435, _3173.z, fma(_2434, _3173.y, _3173.x * _2433)) + _3173.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4436 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _739;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2725;
                                float _3310 = _3256 - _2726;
                                float _3311 = _3257 - _2727;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4447 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3323 = dot(vec3(_679, _682, _685), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4458 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_679, _682, _685), vec3(_3255, _3256, _3257))) + _3332;
                                float _4469 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4480 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3286 * _3129.z;
                                frontier_phi_85_pred_1 = _3286 * _3129.y;
                                frontier_phi_85_pred_2 = _3286 * _3129.x;
                                frontier_phi_85_pred_3 = _3360 * _3141.z;
                                frontier_phi_85_pred_4 = _3360 * _3141.y;
                                frontier_phi_85_pred_5 = _3360 * _3141.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_85_pred;
                            _3368 = frontier_phi_85_pred_1;
                            _3367 = frontier_phi_85_pred_2;
                            _3366 = frontier_phi_85_pred_3;
                            _3365 = frontier_phi_85_pred_4;
                            _3364 = frontier_phi_85_pred_5;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            _3070 = _3366 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3073;
                        frontier_phi_79_pred_1 = _3072;
                        frontier_phi_79_pred_2 = _3071;
                        frontier_phi_79_pred_3 = _3070;
                        frontier_phi_79_pred_4 = _3069;
                        frontier_phi_79_pred_5 = _3068;
                    }
                    _2710 = frontier_phi_79_pred;
                    _2708 = frontier_phi_79_pred_1;
                    _2706 = frontier_phi_79_pred_2;
                    _2704 = frontier_phi_79_pred_3;
                    _2702 = frontier_phi_79_pred_4;
                    _2700 = frontier_phi_79_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2700;
                        _2860 = _2702;
                        _2861 = _2704;
                        _2862 = _2706;
                        _2863 = _2708;
                        _2864 = _2710;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2706;
                frontier_phi_60_61_ladder_1 = _2710;
                frontier_phi_60_61_ladder_2 = _2708;
                frontier_phi_60_61_ladder_3 = _2704;
                frontier_phi_60_61_ladder_4 = _2702;
                frontier_phi_60_61_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_60_61_ladder = _2585;
                frontier_phi_60_61_ladder_1 = _2589;
                frontier_phi_60_61_ladder_2 = _2587;
                frontier_phi_60_61_ladder_3 = _2583;
                frontier_phi_60_61_ladder_4 = _2581;
                frontier_phi_60_61_ladder_5 = _2579;
            }
            _2699 = frontier_phi_60_61_ladder_5;
            _2701 = frontier_phi_60_61_ladder_4;
            _2703 = frontier_phi_60_61_ladder_3;
            _2705 = frontier_phi_60_61_ladder;
            _2707 = frontier_phi_60_61_ladder_2;
            _2709 = frontier_phi_60_61_ladder_1;
        }
        float _2714 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2491 = (_2714 * _2705) + _1944;
        _2493 = (_2714 * _2707) + _1946;
        _2495 = (_2714 * _2709) + _1948;
        _2497 = ((_2699 * 0.039999999105930328369140625) * _2714) + _2277;
        _2499 = ((_2701 * 0.039999999105930328369140625) * _2714) + _2279;
        _2501 = ((_2703 * 0.039999999105930328369140625) * _2714) + _2281;
    }
    else
    {
        _2491 = _1944;
        _2493 = _1946;
        _2495 = _1948;
        _2497 = _2277;
        _2499 = _2279;
        _2501 = _2281;
    }
    float _4496 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4507 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4518 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _2518 = ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2491 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _723))) + ((_2497 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    float _2519 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2493 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _723))) + ((_2499 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2495 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _723))) + ((_2501 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1560)) * cbPerFrame._m0[3u].x);
    uint _2521 = _698 + 6u;
    float _2529 = _660 / cbSceneParam._m0[86u].x;
    float _2530 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _583 : (isnan(_583) ? cbSceneParam._m0[77u].w : min(_583, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_583 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_583) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _583 : min(cbSceneParam._m0[80u].w, _583));
        float _2605 = _2604 / _583;
        float _2616 = _2605 * _633;
        float _2617 = _634 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _635;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2816;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2816 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2762 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2816 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2639 * _2771) - exp2(_2639 * _2772)) * _2760))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2818 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2827 = exp2((_2816 * (-1.44269502162933349609375)) * (1.0 - _2818.w));
        float _2828 = log2(_2827);
        float _2844 = log2(_2549);
        _2641 = (exp2(_2844 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].x)) * _2818.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2643 = (exp2(_2844 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].y)) * _2818.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2645 = (exp2(_2844 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].z)) * _2818.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2647 = _2827 * _2549;
    }
    else
    {
        _2641 = _2546;
        _2643 = _2547;
        _2645 = _2548;
        _2647 = _2549;
    }
    bool _2854;
    vec4 _2657;
    vec4 _2679;
    float _2681;
    float _2685;
    float _2686;
    float _2687;
    float _2688;
    bool _2698;
    for (;;)
    {
        _2657 = cbMatDynParam._m0[0u];
        float _2659 = roundEven(_2657.y);
        bool _2660 = _2659 == 3.0;
        float _2661 = log2(_2647);
        float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * _2518;
        float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * _2519;
        float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * _2520;
        float _2677 = _649 + (-0.5);
        _2679 = cbMtdParam._m0[1u];
        _2681 = _2679.y * _2677;
        float _2684 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2685 = _2684 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
        _2686 = _2684 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
        _2687 = _2684 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
        _2688 = _2677 * 0.999000012874603271484375;
        _2698 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2698)
        {
            if ((cbInstanceData._m0[_698 + 7u].x + _2688) < 0.5)
            {
                _2854 = true;
                break;
            }
        }
        uint _2795 = _699 + uint(_2657.w);
        if ((cbInstanceData._m0[_2795].w < 1.0) && ((cbInstanceData._m0[_2795].w + _2688) < 0.5))
        {
            _2854 = true;
            break;
        }
        if ((_2681 + 1.0) < _2679.x)
        {
            _2854 = true;
            break;
        }
        _2854 = false;
        break;
    }
    float _3059;
    if (_2854)
    {
        discard_state = true;
        _3059 = 0.0;
    }
    else
    {
        _3059 = cbInstanceData._m0[_2521].w;
    }
    SV_Target.x = _2685;
    SV_Target.y = _2686;
    SV_Target.z = _2687;
    SV_Target.w = _3059;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
    discard_exit();
}


