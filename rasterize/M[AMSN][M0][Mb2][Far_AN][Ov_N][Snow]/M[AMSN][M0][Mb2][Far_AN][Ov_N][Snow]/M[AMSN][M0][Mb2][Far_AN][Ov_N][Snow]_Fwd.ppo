#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1075;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _248 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3388 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _249 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    vec4 _262 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _265 = _262.x;
    float _266 = _262.y;
    float _267 = _262.z;
    vec4 _280 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    vec4 _323 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3399 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _327 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _330 = 3.0 - (_327 * 2.0);
    float _332 = _327 * _327;
    float _346 = (((_280.x - _265) * _249) + _265) + (((_309 + (-0.5)) + ((_332 * (_323.x - _309)) * _330)) * cbMtdParam._m0[12u].y);
    float _347 = (((_280.y - _266) * _249) + _266) + (((_310 + (-0.5)) + ((_332 * (_323.y - _310)) * _330)) * cbMtdParam._m0[12u].y);
    float _350 = (_346 * 2.0) + (-1.0);
    float _352 = (_347 * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3410 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    float _361 = fma(_358, _222, fma(_352, _215, _350 * _201));
    float _364 = fma(_358, _223, fma(_352, _216, _350 * _202));
    float _367 = fma(_358, _224, fma(_352, _217, _350 * _203));
    float _376 = exp2(log2(inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367))) * _364) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3421 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _379 = 1.0 - _377;
    float _383 = (cbMtdParam._m0[11u].w * ((_377 + 1.0) - _379)) + _379;
    float _384 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = (isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0))) + TEXCOORD.w;
    float _387 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _405 = ((1.0 - (isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _413 = (((1.0 - (isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3462 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _432 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    vec4 _449 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _463 = (((_449.x - _434) * _249) + _434) * cbMtdParam._m0[10u].x;
    float _464 = (((_449.y - _435) * _249) + _435) * cbMtdParam._m0[10u].y;
    float _465 = (((_449.z - _436) * _249) + _436) * cbMtdParam._m0[10u].z;
    float _472 = ((cbMtdParam._m0[9u].x - _463) * _414) + _463;
    float _473 = ((cbMtdParam._m0[9u].y - _464) * _414) + _464;
    float _474 = ((cbMtdParam._m0[9u].z - _465) * _414) + _465;
    float _476 = cbMtdParam._m0[12u].z * (((_280.z - _267) * _249) + _267);
    vec4 _488 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    vec4 _504 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _513 = cbMtdParam._m0[11u].z * _414;
    float _520 = (_513 * ((_490 - _346) + ((_504.x - _490) * _249))) + _346;
    float _521 = (_513 * ((_491 - _347) + ((_504.y - _491) * _249))) + _347;
    float _534 = (((((_520 * cbMtdParam._m0[13u].y) - _520) * _249) + _520) * 2.0) + (-1.0);
    float _535 = (((((_521 * cbMtdParam._m0[13u].z) - _521) * _249) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3473 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))));
    float _544 = fma(_541, _222, fma(_535, _215, _534 * _201));
    float _547 = fma(_541, _223, fma(_535, _216, _534 * _202));
    float _550 = fma(_541, _224, fma(_535, _217, _534 * _203));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3484 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _558 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3506 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3517 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _664 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _667 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _680 = uint(roundEven(NORMAL.w)) * 13u;
    uint _682 = (_680 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _688 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_682].x;
    float _689 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_682].y;
    float _690 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_682].z;
    float _3528 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _705 = _702.x * TEXCOORD.z;
    float _706 = dot(vec3(_555, _556, _557), vec3(_634, _635, _636));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _555) - _634;
    float _714 = (_709 * _556) - _635;
    float _715 = (_709 * _557) - _636;
    float _719 = abs(dot(vec3(_634, _635, _636), vec3(_555, _556, _557)));
    float _3561 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_558);
    float _733 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1074;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_773, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765));
        float _804 = fma(_773, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765));
        float _808 = fma(_773, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765));
        float _832 = _765 + _555;
        float _833 = _769 + _556;
        float _834 = _773 + _557;
        float _844 = fma(_834, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832)) - _800;
        float _845 = fma(_834, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832)) - _804;
        float _846 = fma(_834, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832)) - _808;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_868.x + (-0.5));
        float _904 = _902 * (_868.y + (-0.5));
        float _905 = _902 * (_868.z + (-0.5));
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_875.x + (-0.5));
        float _914 = _912 * (_875.y + (-0.5));
        float _915 = _912 * (_875.z + (-0.5));
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_882.x + (-0.5));
        float _924 = _922 * (_882.y + (-0.5));
        float _925 = _922 * (_882.z + (-0.5));
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _956 = (dot(vec3(_555, _556, _557), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _966 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3609 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_968 + 1.0))) + _973) * _936;
        float _983 = _904 * 0.5;
        float _984 = _914 * 0.5;
        float _985 = _924 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_555, _556, _557), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3642 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1010 + 1.0))) + _1015) * _937;
        float _1025 = _905 * 0.5;
        float _1026 = _915 * 0.5;
        float _1027 = _925 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_555, _556, _557), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3675 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1052 + 1.0))) + _1057) * _938;
        _1074 = _905;
        _1076 = _904;
        _1077 = _903;
        _1078 = _915;
        _1079 = _914;
        _1080 = _913;
        _1081 = _925;
        _1082 = _924;
        _1083 = _923;
        _1084 = _938;
        _1085 = _937;
        _1086 = _936;
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _1075;
        _1076 = _1075;
        _1077 = _1075;
        _1078 = _1075;
        _1079 = _1075;
        _1080 = _1075;
        _1081 = _1075;
        _1082 = _1075;
        _1083 = _1075;
        _1084 = _1075;
        _1085 = _1075;
        _1086 = _1075;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_773, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _765));
        float _1119 = fma(_773, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _765));
        float _1123 = fma(_773, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _765));
        float _1146 = _765 + _555;
        float _1147 = _769 + _556;
        float _1148 = _773 + _557;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_555, _556, _557), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3738 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_555, _556, _557), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3771 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_555, _556, _557), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3804 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1075;
        _1385 = _1075;
        _1386 = _1075;
        _1387 = _1075;
        _1388 = _1075;
        _1389 = _1075;
        _1390 = _1075;
        _1391 = _1075;
        _1392 = _1075;
        _1393 = _1075;
        _1394 = _1075;
        _1395 = _1075;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1087)) + _1087;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1088)) + _1088;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1089)) + _1089;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _713 * 0.5;
    float _1453 = _714 * 0.5;
    float _1454 = _715 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1074, _1078, _1081, _1084));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_773, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_773, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_773, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1583 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1586 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1614 = frontier_phi_16_14_ladder;
        }
        float _1818;
        if (_1583 > 0.0)
        {
            _1818 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1818 = frontier_phi_25_21_ladder;
        }
        float _2061;
        if (_1586 > 0.0)
        {
            _2061 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2061 = frontier_phi_37_32_ladder;
        }
        float _2063 = isnan(_1818) ? _1614 : (isnan(_1614) ? _1818 : min(_1614, _1818));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1580) + _1569;
        float _2069 = (_2064 * _1583) + _1573;
        float _2070 = (_2064 * _1586) + _1577;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2071;
        float _2075 = _2071 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 > _2075) || ((_2069 < _2073) || ((_2068 < _2073) || (_2068 > _2075))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_15_37_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_15_37_ladder_2;
        _1604 = frontier_phi_15_37_ladder_1;
        _1606 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1521);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_773, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_773, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_773, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1682 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1685 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1823;
        if (_1679 > 0.0)
        {
            _1823 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1823 = frontier_phi_27_23_ladder;
        }
        float _2088;
        if (_1682 > 0.0)
        {
            _2088 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2088 = frontier_phi_39_34_ladder;
        }
        float _2293;
        if (_1685 > 0.0)
        {
            _2293 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2293 = frontier_phi_48_45_ladder;
        }
        float _2295 = isnan(_2088) ? _1823 : (isnan(_1823) ? _2088 : min(_1823, _2088));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1679) + _1668;
        float _2301 = (_2296 * _1682) + _1672;
        float _2302 = (_2296 * _1685) + _1676;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2303;
        float _2306 = _2303 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2302 > _2306) || ((_2302 < _2304) || ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 < _2304) || (_2300 > _2306))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2302, cbModelParam._m0[17u].z, fma(_2301, cbModelParam._m0[17u].y, _2300 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2302, cbModelParam._m0[18u].z, fma(_2301, cbModelParam._m0[18u].y, _2300 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2302, cbModelParam._m0[19u].z, fma(_2301, cbModelParam._m0[19u].y, _2300 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_24_48_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_24_48_ladder_2;
        _1706 = frontier_phi_24_48_ladder_1;
        _1708 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1611);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1720 = ((((1.0 - _733) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_733 * _721)) * _705;
    float _1721 = _1720 * ((cbModelParam._m0[1u].w * (_1704 - _1602)) + _1602);
    float _1722 = _1720 * ((cbModelParam._m0[1u].w * (_1706 - _1604)) + _1604);
    float _1723 = _1720 * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_680 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _705 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1777 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1781 = _1744 | 1u;
    float _1792 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_555, _556, _557));
    float _1795 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_555, _556, _557));
    float _3940 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _3951 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1800 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1802 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.3183098733425140380859375;
    float _1809 = ((cbLight._m0[_1761].x * _1767) * _1802) + ((cbLight._m0[_1771].x * _1777) * _1800);
    float _1810 = ((_1767 * cbLight._m0[_1761].y) * _1802) + ((_1777 * cbLight._m0[_1771].y) * _1800);
    float _1811 = ((_1767 * cbLight._m0[_1761].z) * _1802) + ((_1777 * cbLight._m0[_1771].z) * _1800);
    uvec4 _1815 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1817 = _1815.x == 0u;
    float _1828;
    float _1830;
    float _1832;
    if (_1817)
    {
        _1828 = _1809;
        _1830 = _1810;
        _1832 = _1811;
    }
    else
    {
        uint _1836 = _1744 + 6u;
        float _1852 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _1853 = _1852 * _1852;
        float _3962 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1855 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1828 = (((cbLight._m0[_1836].x * 0.3183098733425140380859375) * _1854) * _1855) + _1809;
        _1830 = (((cbLight._m0[_1836].y * 0.3183098733425140380859375) * _1854) * _1855) + _1810;
        _1832 = (((cbLight._m0[_1836].z * 0.3183098733425140380859375) * _1854) * _1855) + _1811;
    }
    bool _1835 = _1815.y == 0u;
    float _1873;
    float _1875;
    float _1877;
    if (_1835)
    {
        _1873 = _1828;
        _1875 = _1830;
        _1877 = _1832;
    }
    else
    {
        uint _2032 = _1744 + 7u;
        float _2048 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _3978 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2051 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1873 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1828;
        _1875 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1830;
        _1877 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1832;
    }
    uint _1880 = _1744 + 8u;
    float _1893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _558) * 0.949999988079071044921875);
    float _1894 = _1893 * _1893;
    float _1895 = cbLight._m0[_1744].x + _634;
    float _1896 = cbLight._m0[_1744].y + _635;
    float _1897 = cbLight._m0[_1744].z + _636;
    float _1901 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
    float _1902 = _1901 * _1895;
    float _1903 = _1901 * _1896;
    float _1904 = _1901 * _1897;
    float _1905 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1744].xyz));
    float _3994 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1909 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1910 = dot(vec3(_555, _556, _557), vec3(_1902, _1903, _1904));
    float _4016 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1914 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1902, _1903, _1904));
    float _4027 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1918 = _1894 * _1894;
    float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
    float _1933 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1934 = 1.0 - _1894;
    float _1945 = (0.5 / (((_1909 * ((_1908 * _1934) + _1894)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _1934) + _1894) * _1908))) * _1908;
    float _4038 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
    uint _1958 = _1744 + 9u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _558) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1781].x + _634;
    float _1972 = cbLight._m0[_1781].y + _635;
    float _1973 = cbLight._m0[_1781].z + _636;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1781].xyz));
    float _4049 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1985 = dot(vec3(_555, _556, _557), vec3(_1978, _1979, _1980));
    float _4060 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1978, _1979, _1980));
    float _4071 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1970 * _1970;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2006 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = 1.0 - _1970;
    float _2017 = (0.5 / (((_1909 * ((_1984 * _2007) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2007) + _1970) * _1984))) * _1984;
    float _4082 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    float _2029 = (((_2006 * cbLight._m0[_1958].x) * _2019) * _1767) + (((_1933 * cbLight._m0[_1880].x) * _1947) * _1777);
    float _2030 = (((_2006 * cbLight._m0[_1958].y) * _2019) * _1767) + (((_1933 * cbLight._m0[_1880].y) * _1947) * _1777);
    float _2031 = (((_2006 * cbLight._m0[_1958].z) * _2019) * _1767) + (((_1933 * cbLight._m0[_1880].z) * _1947) * _1777);
    float _2093;
    float _2095;
    float _2097;
    if (_1817)
    {
        _2093 = _2029;
        _2095 = _2030;
        _2097 = _2031;
    }
    else
    {
        uint _2099 = _1744 + 2u;
        uint _2103 = _1744 + 10u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _558) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _634;
        float _2120 = cbLight._m0[_2099].y + _635;
        float _2121 = cbLight._m0[_2099].z + _636;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2099].xyz));
        float _4093 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2133 = dot(vec3(_555, _556, _557), vec3(_2126, _2127, _2128));
        float _4104 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4115 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1909 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2155) + _2118) * _2132))) * _2132;
        float _4126 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2093 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _2029;
        _2095 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _2030;
        _2097 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _2031;
    }
    float _2203;
    float _2205;
    float _2207;
    if (_1835)
    {
        _2203 = _2093;
        _2205 = _2095;
        _2207 = _2097;
    }
    else
    {
        uint _2214 = _1744 + 3u;
        uint _2218 = _1744 + 11u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _558) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _634;
        float _2235 = cbLight._m0[_2214].y + _635;
        float _2236 = cbLight._m0[_2214].z + _636;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2214].xyz));
        float _4142 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2248 = dot(vec3(_555, _556, _557), vec3(_2241, _2242, _2243));
        float _4153 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4164 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = 1.0 - _2233;
        float _2280 = (0.5 / (((_1909 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_1909 * _2270) + _2233) * _2247))) * _2247;
        float _4175 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2203 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + _2093;
        _2205 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + _2095;
        _2207 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + _2097;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1742.y == 0u)
    {
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2358;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2358;
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2358;
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.x;
        uint _2385 = uint((float(_2373.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2374))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2374)));
        float _2395 = (log2(_2361 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2396 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        uint _2399 = uint(isnan(14.0) ? _2396 : (isnan(_2396) ? 14.0 : min(_2396, 14.0)));
        uvec4 _2404 = texelFetch(g_lightClusterGridBuffer, int(((_2399 << 2u) + (_2385 << 6u)) >> 2u));
        uint _2405 = _2404.x;
        uint _2406 = _2373.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2406 >> 4u) & 15u)) + 4294967295u) & _2405) == 0u) || ((_2406 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            uint _2655 = 0u;
            uint _2664;
            bool _2665;
            for (;;)
            {
                _2664 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2655 << 2u)) >> 2u)).x;
                _2665 = _2664 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2665)
                {
                    frontier_phi_63_pred = _2654;
                    frontier_phi_63_pred_1 = _2653;
                    frontier_phi_63_pred_2 = _2652;
                    frontier_phi_63_pred_3 = _2651;
                    frontier_phi_63_pred_4 = _2650;
                    frontier_phi_63_pred_5 = _2649;
                }
                else
                {
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    uint _2779;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2664;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    for (;;)
                    {
                        uint _2783 = uint(findLSB(_2779)) + (_2655 << 5u);
                        uint _2780 = (_2779 + 4294967295u) & _2779;
                        uint _2785 = _2783 * 48u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2805 = (_2783 * 48u) + 4u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2824 = (_2783 * 48u) + 8u;
                        vec3 _2835 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x));
                        float _2839 = _2799.x - _2359;
                        float _2840 = _2799.y - _2360;
                        float _2841 = _2799.z - _2361;
                        float _2842 = dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841));
                        float _2845 = inversesqrt(_2842);
                        float _2846 = _2845 * _2839;
                        float _2847 = _2845 * _2840;
                        float _2848 = _2845 * _2841;
                        float _2849 = dot(vec3(_661, _664, _667), vec3(_2846, _2847, _2848));
                        float _2854 = 1.0 - (_2842 * _2799.w);
                        float _4201 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2855 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2856 = sqrt(_2842) * _2818.w;
                        float _2859 = 1.39999997615814208984375 / (_2856 + 1.39999997615814208984375);
                        float _2860 = _2859 * _2859;
                        float _2863 = ((1.0 - _2860) * _2849) + _2860;
                        float _2866 = _2856 * _2856;
                        float _2870 = ((isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))) * _2855) / ((_2866 * 0.699999988079071044921875) + 1.0);
                        float _2874 = (-0.0) - _2359;
                        float _2875 = (-0.0) - _2360;
                        float _2876 = (-0.0) - _2361;
                        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2891 = exp2(log2(1.0 / ((_2866 * 3.5) + 5.0)) * 0.25);
                        float _2892 = 1.0 - _721;
                        float _2899 = sqrt(1.0 - ((1.0 - (_2892 * _2892)) * (1.0 - (_2891 * _2891))));
                        float _2900 = _2899 * _2899;
                        float _2901 = _2900 * _2900;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2912 = dot(vec3(_661, _664, _667), vec3(_2881, _2882, _2883));
                        float _4217 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2916 = dot(vec3(_661, _664, _667), vec3(_2908 * _2902, _2908 * _2903, _2908 * _2904));
                        float _4228 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2923 = ((_2919 * _2919) * (_2901 + (-1.0))) + 1.0;
                        float _2924 = _2859 * _2900;
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2849) + _2925;
                        float _4239 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2930 = 1.0 - _2900;
                        float _2940 = (0.5 / (((_2929 * ((_2915 * _2930) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2929 * _2930) + _2900) * _2915))) * _2929;
                        float _4250 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2951 = (((_2901 * 3.1415927410125732421875) * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) / ((_2923 * _2923) * ((_2866 * 2.1991131305694580078125) + 3.141590118408203125))) * _2855;
                        _2708 = (_2870 * _2818.x) + _2776;
                        _2709 = (_2870 * _2818.y) + _2777;
                        _2710 = (_2870 * _2818.z) + _2778;
                        _2705 = (_2951 * _2835.x) + _2773;
                        _2706 = (_2951 * _2835.y) + _2774;
                        _2707 = (_2951 * _2835.z) + _2775;
                        if (_2780 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2780;
                        }
                    }
                    frontier_phi_63_pred = _2710;
                    frontier_phi_63_pred_1 = _2709;
                    frontier_phi_63_pred_2 = _2708;
                    frontier_phi_63_pred_3 = _2707;
                    frontier_phi_63_pred_4 = _2706;
                    frontier_phi_63_pred_5 = _2705;
                }
                _2516 = frontier_phi_63_pred;
                _2514 = frontier_phi_63_pred_1;
                _2512 = frontier_phi_63_pred_2;
                _2510 = frontier_phi_63_pred_3;
                _2508 = frontier_phi_63_pred_4;
                _2506 = frontier_phi_63_pred_5;
                uint _2656 = _2655 + 1u;
                if (_2656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2649 = _2506;
                    _2650 = _2508;
                    _2651 = _2510;
                    _2652 = _2512;
                    _2653 = _2514;
                    _2654 = _2516;
                    _2655 = _2656;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((4294967295u << _2522) & _2405) == 0u)
        {
            _2617 = _2505;
            _2619 = _2507;
            _2621 = _2509;
            _2623 = _2511;
            _2625 = _2513;
            _2627 = _2515;
        }
        else
        {
            float _2642 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
            float _2643 = _2642 * _2359;
            float _2644 = _2642 * _2360;
            float _2645 = _2642 * _2361;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2756 = _2505;
                float _2757 = _2507;
                float _2758 = _2509;
                float _2759 = _2511;
                float _2760 = _2513;
                float _2761 = _2515;
                uint _2762 = _2522;
                uint _2771;
                bool _2772;
                for (;;)
                {
                    _2771 = texelFetch(g_lightClassification, int((((_2399 << 5u) + (_2385 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                    _2772 = _2771 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2772)
                    {
                        frontier_phi_69_pred = _2761;
                        frontier_phi_69_pred_1 = _2760;
                        frontier_phi_69_pred_2 = _2759;
                        frontier_phi_69_pred_3 = _2758;
                        frontier_phi_69_pred_4 = _2757;
                        frontier_phi_69_pred_5 = _2756;
                    }
                    else
                    {
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        uint _2975 = _2771;
                        uint _2976;
                        vec4 _3001;
                        float _3002;
                        vec4 _3017;
                        vec3 _3029;
                        vec4 _3045;
                        vec4 _3061;
                        float _3108;
                        bool _3109;
                        for (;;)
                        {
                            uint _2986 = ((_2762 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2975));
                            _2976 = (_2975 + 4294967295u) & _2975;
                            uint _2988 = _2986 * 40u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            _3002 = _3001.w;
                            uint _3004 = (_2986 * 40u) + 4u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3019 = (_2986 * 40u) + 8u;
                            _3029 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x));
                            uint _3032 = (_2986 * 40u) + 16u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2986 * 40u) + 20u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_2986 * 40u) + 24u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3083 = (_2986 * 40u) + 28u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3108 = fma(_2361, _3096.z, fma(_2360, _3096.y, _3096.x * _2359)) + _3096.w;
                            _3109 = !((fma(_2361, _3077.z, fma(_2360, _3077.y, _3077.x * _2359)) + _3077.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3109)
                            {
                                float _3136 = _3001.x - _2359;
                                float _3137 = _3001.y - _2360;
                                float _3138 = _3001.z - _2361;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_3002 * _3002));
                                float _4261 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3154 = sqrt(_3139) * _3017.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3160 = ((1.0 - _3157) * dot(vec3(_3143, _3144, _3145), vec3(_661, _664, _667))) + _3157;
                                float _3163 = _3154 * _3154;
                                float _3167 = (fma(_2361, _3045.z, fma(_2360, _3045.y, _3045.x * _2359)) + _3045.w) / _3108;
                                float _3168 = (fma(_2361, _3061.z, fma(_2360, _3061.y, _3061.x * _2359)) + _3061.w) / _3108;
                                float _3172 = 1.0 - dot(vec2(_3167, _3168), vec2(_3167, _3168));
                                float _4277 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3174 = _3173 * (((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3150) / ((_3163 * 0.699999988079071044921875) + 1.0));
                                float _3186 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                                float _3187 = 1.0 - _721;
                                float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                                float _3195 = _3194 * _3194;
                                float _3196 = _3195 * _3195;
                                float _3197 = _3143 - _2643;
                                float _3198 = _3144 - _2644;
                                float _3199 = _3145 - _2645;
                                float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                                float _3207 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2643, (-0.0) - _2644, (-0.0) - _2645));
                                float _4288 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3211 = dot(vec3(_661, _664, _667), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                                float _4299 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                                float _3219 = _3156 * _3195;
                                float _3220 = _3219 * _3219;
                                float _3226 = ((1.0 - _3220) * dot(vec3(_661, _664, _667), vec3(_3143, _3144, _3145))) + _3220;
                                float _4310 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3228 = 1.0 - _3195;
                                float _3238 = (0.5 / (((_3227 * ((_3210 * _3228) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3195) * _3210))) * _3227;
                                float _4321 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3248 = (_3173 * _3150) * (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_3218 * _3218) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3174 * _3017.z;
                                frontier_phi_75_pred_1 = _3174 * _3017.y;
                                frontier_phi_75_pred_2 = _3174 * _3017.x;
                                frontier_phi_75_pred_3 = _3248 * _3029.z;
                                frontier_phi_75_pred_4 = _3248 * _3029.y;
                                frontier_phi_75_pred_5 = _3248 * _3029.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_75_pred;
                            _3256 = frontier_phi_75_pred_1;
                            _3255 = frontier_phi_75_pred_2;
                            _3254 = frontier_phi_75_pred_3;
                            _3253 = frontier_phi_75_pred_4;
                            _3252 = frontier_phi_75_pred_5;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            _2956 = _3252 + _2969;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            if (_2976 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2976;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2961;
                        frontier_phi_69_pred_1 = _2960;
                        frontier_phi_69_pred_2 = _2959;
                        frontier_phi_69_pred_3 = _2958;
                        frontier_phi_69_pred_4 = _2957;
                        frontier_phi_69_pred_5 = _2956;
                    }
                    _2628 = frontier_phi_69_pred;
                    _2626 = frontier_phi_69_pred_1;
                    _2624 = frontier_phi_69_pred_2;
                    _2622 = frontier_phi_69_pred_3;
                    _2620 = frontier_phi_69_pred_4;
                    _2618 = frontier_phi_69_pred_5;
                    uint _2763 = _2762 + 1u;
                    if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2756 = _2618;
                        _2757 = _2620;
                        _2758 = _2622;
                        _2759 = _2624;
                        _2760 = _2626;
                        _2761 = _2628;
                        _2762 = _2763;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2628;
                frontier_phi_57_58_ladder_1 = _2626;
                frontier_phi_57_58_ladder_2 = _2624;
                frontier_phi_57_58_ladder_3 = _2622;
                frontier_phi_57_58_ladder_4 = _2620;
                frontier_phi_57_58_ladder_5 = _2618;
            }
            else
            {
                frontier_phi_57_58_ladder = _2515;
                frontier_phi_57_58_ladder_1 = _2513;
                frontier_phi_57_58_ladder_2 = _2511;
                frontier_phi_57_58_ladder_3 = _2509;
                frontier_phi_57_58_ladder_4 = _2507;
                frontier_phi_57_58_ladder_5 = _2505;
            }
            _2617 = frontier_phi_57_58_ladder_5;
            _2619 = frontier_phi_57_58_ladder_4;
            _2621 = frontier_phi_57_58_ladder_3;
            _2623 = frontier_phi_57_58_ladder_2;
            _2625 = frontier_phi_57_58_ladder_1;
            _2627 = frontier_phi_57_58_ladder;
        }
        float _2632 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2417 = (_2632 * _2623) + _1873;
        _2419 = (_2632 * _2625) + _1875;
        _2421 = (_2632 * _2627) + _1877;
        _2423 = ((_2617 * 0.039999999105930328369140625) * _2632) + _2203;
        _2425 = ((_2619 * 0.039999999105930328369140625) * _2632) + _2205;
        _2427 = ((_2621 * 0.039999999105930328369140625) * _2632) + _2207;
    }
    else
    {
        _2417 = _1873;
        _2419 = _1875;
        _2421 = _1877;
        _2423 = _2203;
        _2425 = _2205;
        _2427 = _2207;
    }
    float _4337 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4348 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4359 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    uint _2447 = _680 + 6u;
    float _2455 = _642 / cbSceneParam._m0[86u].x;
    float _2456 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2470 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2472 = _2470.x;
    float _2473 = _2470.y;
    float _2474 = _2470.z;
    float _2475 = _2470.w;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2531 = _2530 / _577;
        float _2542 = _2531 * _627;
        float _2543 = _628 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2545 = _2531 * _629;
        float _2547 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2548 = _2547 + cbSceneParam._m0[79u].w;
        float _2549 = cbSceneParam._m0[79u].w - _2543;
        float _2555 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2545 * _2545));
        float _2558 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2555;
        float _2563 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2565 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2718;
        if (abs((_2544 - _2547) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2718 = ((((_2548 > 0.0) ? exp2(_2563 * _2548) : (2.0 - exp2(_2565 * _2548))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2558;
        }
        else
        {
            float _2678 = 1.0 / cbSceneParam._m0[80u].x;
            float _2679 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : max(_2548, _2549));
            float _2680 = isnan(_2549) ? _2548 : (isnan(_2548) ? _2549 : min(_2548, _2549));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            _2718 = ((abs(_2555 / _2544) * cbSceneParam._m0[80u].y) * ((((_2689 - _2690) * 2.0) - ((exp2(_2563 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0)))) - exp2(_2563 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))))) * _2678)) - ((exp2(_2565 * _2689) - exp2(_2565 * _2690)) * _2678))) + (_2558 * cbSceneParam._m0[80u].z);
        }
        vec4 _2720 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, 1.0), 0.0);
        float _2729 = exp2((_2718 * (-1.44269502162933349609375)) * (1.0 - _2720.w));
        float _2730 = log2(_2729);
        float _2746 = log2(_2475);
        _2567 = (exp2(_2746 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].x)) * _2720.x) / cbSceneParam._m0[78u].x)) + _2472;
        _2569 = (exp2(_2746 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].y)) * _2720.y) / cbSceneParam._m0[78u].y)) + _2473;
        _2571 = (exp2(_2746 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2730 * cbSceneParam._m0[78u].z)) * _2720.z) / cbSceneParam._m0[78u].z)) + _2474;
        _2573 = _2729 * _2475;
    }
    else
    {
        _2567 = _2472;
        _2569 = _2473;
        _2571 = _2474;
        _2573 = _2475;
    }
    float _2585 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2586 = _2585 == 3.0;
    float _2587 = log2(_2573);
    float _2594 = exp2(_2587 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2417 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _705))) + ((_2423 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2595 = exp2(_2587 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2419 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _705))) + ((_2425 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2596 = exp2(_2587 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2421 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _705))) + ((_2427 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2605 = (_2585 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2605 * (_2586 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.y = _2605 * (_2586 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.z = _2605 * (_2586 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.w = cbInstanceData._m0[_2447].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2447].w;
}


