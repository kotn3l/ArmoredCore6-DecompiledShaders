#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1079;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _252 = (POSITION_1.w - cbMtdParam._m0[12u].x) * (1.0 / cbMtdParam._m0[12u].w);
    float _3675 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _253 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    vec4 _266 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _269 = _266.x;
    float _270 = _266.y;
    float _271 = _266.z;
    vec4 _284 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _311 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = _311.x;
    float _314 = _311.y;
    vec4 _327 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _3686 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _331 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _334 = 3.0 - (_331 * 2.0);
    float _336 = _331 * _331;
    float _350 = (((_284.x - _269) * _253) + _269) + (((_313 + (-0.5)) + ((_336 * (_327.x - _313)) * _334)) * cbMtdParam._m0[12u].y);
    float _351 = (((_284.y - _270) * _253) + _270) + (((_314 + (-0.5)) + ((_336 * (_327.y - _314)) * _334)) * cbMtdParam._m0[12u].y);
    float _354 = (_350 * 2.0) + (-1.0);
    float _356 = (_351 * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3697 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _365 = fma(_362, _226, fma(_356, _219, _354 * _205));
    float _368 = fma(_362, _227, fma(_356, _220, _354 * _206));
    float _371 = fma(_362, _228, fma(_356, _221, _354 * _207));
    float _380 = exp2(log2(inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371))) * _368) * cbMtdParam._m0[11u].y) * cbMtdParam._m0[13u].x;
    float _3708 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _383 = 1.0 - _381;
    float _387 = (cbMtdParam._m0[11u].w * ((_381 + 1.0) - _383)) + _383;
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = (isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0))) + TEXCOORD.w;
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _409 = ((1.0 - (isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0)))) * 2.0) - texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x;
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _417 = (((1.0 - (isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0)))) * (-1.39999997615814208984375)) * cbMtdParam._m0[11u].x) + 1.0;
    float _3749 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    vec4 _436 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    vec4 _453 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _467 = (((_453.x - _438) * _253) + _438) * cbMtdParam._m0[10u].x;
    float _468 = (((_453.y - _439) * _253) + _439) * cbMtdParam._m0[10u].y;
    float _469 = (((_453.z - _440) * _253) + _440) * cbMtdParam._m0[10u].z;
    float _476 = ((cbMtdParam._m0[9u].x - _467) * _418) + _467;
    float _477 = ((cbMtdParam._m0[9u].y - _468) * _418) + _468;
    float _478 = ((cbMtdParam._m0[9u].z - _469) * _418) + _469;
    float _480 = cbMtdParam._m0[12u].z * (((_284.z - _271) * _253) + _271);
    vec4 _492 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    vec4 _508 = texture(sampler2D(M_AMSN_M0_Mb2_Far_AN_Ov_N_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _517 = cbMtdParam._m0[11u].z * _418;
    float _524 = (_517 * ((_494 - _350) + ((_508.x - _494) * _253))) + _350;
    float _525 = (_517 * ((_495 - _351) + ((_508.y - _495) * _253))) + _351;
    float _538 = (((((_524 * cbMtdParam._m0[13u].y) - _524) * _253) + _524) * 2.0) + (-1.0);
    float _539 = (((((_525 * cbMtdParam._m0[13u].z) - _525) * _253) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3760 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))));
    float _548 = fma(_545, _226, fma(_539, _219, _538 * _205));
    float _551 = fma(_545, _227, fma(_539, _220, _538 * _206));
    float _554 = fma(_545, _228, fma(_539, _221, _538 * _207));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3771 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _562 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3793 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3804 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    float _646 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _647 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _665 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _668 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _671 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _684 = uint(roundEven(NORMAL.w)) * 13u;
    uint _686 = (_684 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _692 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_686].x;
    float _693 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_686].y;
    float _694 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_686].z;
    float _3815 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _646, cbSceneParam._m0[86u].y * _647));
    float _709 = _706.x * TEXCOORD.z;
    float _710 = dot(vec3(_559, _560, _561), vec3(_638, _639, _640));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _559) - _638;
    float _718 = (_713 * _560) - _639;
    float _719 = (_713 * _561) - _640;
    float _723 = abs(dot(vec3(_638, _639, _640), vec3(_559, _560, _561)));
    float _3848 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_562);
    float _737 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1078;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769));
        float _808 = fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769));
        float _812 = fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769));
        float _836 = _769 + _559;
        float _837 = _773 + _560;
        float _838 = _777 + _561;
        float _848 = fma(_838, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836)) - _804;
        float _849 = fma(_838, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836)) - _808;
        float _850 = fma(_838, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836)) - _812;
        float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
        float _867 = ((_854 * _848) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_854 * _849) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_854 * _850) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _906 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_872.x + (-0.5));
        float _908 = _906 * (_872.y + (-0.5));
        float _909 = _906 * (_872.z + (-0.5));
        float _916 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_879.x + (-0.5));
        float _918 = _916 * (_879.y + (-0.5));
        float _919 = _916 * (_879.z + (-0.5));
        float _926 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_886.x + (-0.5));
        float _928 = _926 * (_886.y + (-0.5));
        float _929 = _926 * (_886.z + (-0.5));
        float _936 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_893.x + (-0.5));
        float _938 = _936 * (_893.y + (-0.5));
        float _939 = _936 * (_893.z + (-0.5));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = _907 * 0.5;
        float _944 = _917 * 0.5;
        float _945 = _927 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _960 = (dot(vec3(_559, _560, _561), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _970 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3896 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_972 + 1.0))) + _977) * _940;
        float _987 = _908 * 0.5;
        float _988 = _918 * 0.5;
        float _989 = _928 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_559, _560, _561), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3929 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1014 + 1.0))) + _1019) * _941;
        float _1029 = _909 * 0.5;
        float _1030 = _919 * 0.5;
        float _1031 = _929 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_559, _560, _561), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3962 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1056 + 1.0))) + _1061) * _942;
        _1078 = _909;
        _1080 = _908;
        _1081 = _907;
        _1082 = _919;
        _1083 = _918;
        _1084 = _917;
        _1085 = _929;
        _1086 = _928;
        _1087 = _927;
        _1088 = _942;
        _1089 = _941;
        _1090 = _940;
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _1079;
        _1080 = _1079;
        _1081 = _1079;
        _1082 = _1079;
        _1083 = _1079;
        _1084 = _1079;
        _1085 = _1079;
        _1086 = _1079;
        _1087 = _1079;
        _1088 = _1079;
        _1089 = _1079;
        _1090 = _1079;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769));
        float _1123 = fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769));
        float _1127 = fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769));
        float _1150 = _769 + _559;
        float _1151 = _773 + _560;
        float _1152 = _777 + _561;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_559, _560, _561), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4025 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_559, _560, _561), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4058 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_559, _560, _561), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4091 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1079;
        _1389 = _1079;
        _1390 = _1079;
        _1391 = _1079;
        _1392 = _1079;
        _1393 = _1079;
        _1394 = _1079;
        _1395 = _1079;
        _1396 = _1079;
        _1397 = _1079;
        _1398 = _1079;
        _1399 = _1079;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1091)) + _1091;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1092)) + _1092;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1093)) + _1093;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _717 * 0.5;
    float _1457 = _718 * 0.5;
    float _1458 = _719 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1078, _1082, _1085, _1088));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1587 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1590 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1618 = frontier_phi_16_14_ladder;
        }
        float _1791;
        if (_1587 > 0.0)
        {
            _1791 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1791 = frontier_phi_25_21_ladder;
        }
        float _2086;
        if (_1590 > 0.0)
        {
            _2086 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2086 = frontier_phi_37_32_ladder;
        }
        float _2088 = isnan(_1791) ? _1618 : (isnan(_1618) ? _1791 : min(_1618, _1791));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1584) + _1573;
        float _2094 = (_2089 * _1587) + _1577;
        float _2095 = (_2089 * _1590) + _1581;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2096;
        float _2100 = _2096 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 > _2100) || ((_2094 < _2098) || ((_2093 < _2098) || (_2093 > _2100))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2095, cbModelParam._m0[9u].z, fma(_2094, cbModelParam._m0[9u].y, _2093 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2095, cbModelParam._m0[10u].z, fma(_2094, cbModelParam._m0[10u].y, _2093 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2095, cbModelParam._m0[11u].z, fma(_2094, cbModelParam._m0[11u].y, _2093 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_15_37_ladder = _2240.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2240.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2240.z * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_15_37_ladder_1;
        _1608 = frontier_phi_15_37_ladder;
        _1610 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1525);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1672 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1676 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1680 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1683 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1686 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1689 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1796;
        if (_1683 > 0.0)
        {
            _1796 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1796 = frontier_phi_27_23_ladder;
        }
        float _2113;
        if (_1686 > 0.0)
        {
            _2113 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2113 = frontier_phi_39_34_ladder;
        }
        float _2440;
        if (_1689 > 0.0)
        {
            _2440 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2440 = frontier_phi_49_46_ladder;
        }
        float _2442 = isnan(_2113) ? _1796 : (isnan(_1796) ? _2113 : min(_1796, _2113));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1683) + _1672;
        float _2448 = (_2443 * _1686) + _1676;
        float _2449 = (_2443 * _1689) + _1680;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2449, cbModelParam._m0[17u].z, fma(_2448, cbModelParam._m0[17u].y, _2447 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2449, cbModelParam._m0[18u].z, fma(_2448, cbModelParam._m0[18u].y, _2447 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2449, cbModelParam._m0[19u].z, fma(_2448, cbModelParam._m0[19u].y, _2447 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_24_49_ladder = _2567.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2567.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2567.x * cbModelParam._m0[1u].z;
        }
        _1708 = frontier_phi_24_49_ladder_2;
        _1710 = frontier_phi_24_49_ladder_1;
        _1712 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1615);
        _1708 = _1692.x * cbModelParam._m0[1u].z;
        _1710 = _1692.y * cbModelParam._m0[1u].z;
        _1712 = _1692.z * cbModelParam._m0[1u].z;
    }
    float _1724 = ((((1.0 - _737) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_737 * _725)) * _709;
    float _1725 = _1724 * ((cbModelParam._m0[1u].w * (_1708 - _1606)) + _1606);
    float _1726 = _1724 * ((cbModelParam._m0[1u].w * (_1710 - _1608)) + _1608);
    float _1727 = _1724 * ((cbModelParam._m0[1u].w * (_1712 - _1610)) + _1610);
    float _1730 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, _1725 * cbSceneParam._m0[91u].x));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1783 = _1770 / _1782;
    float _1784 = _1774 / _1782;
    float _1785 = _1778 / _1782;
    float _1932;
    float _1933;
    float _1934;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1812 = ((uint(_1785 > cbSceneParam._m0[59u].y) + uint(_1785 > cbSceneParam._m0[59u].x)) + uint(_1785 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1813 = _1812 + 43u;
        uint _1821 = _1812 + 44u;
        uint _1829 = _1812 + 45u;
        uint _1837 = _1812 + 46u;
        float _1848 = fma(_1782, cbSceneParam._m0[_1813].w, fma(_1778, cbSceneParam._m0[_1813].z, fma(_1774, cbSceneParam._m0[_1813].y, _1770 * cbSceneParam._m0[_1813].x)));
        float _1852 = fma(_1782, cbSceneParam._m0[_1821].w, fma(_1778, cbSceneParam._m0[_1821].z, fma(_1774, cbSceneParam._m0[_1821].y, _1770 * cbSceneParam._m0[_1821].x)));
        float _1860 = fma(_1782, cbSceneParam._m0[_1837].w, fma(_1778, cbSceneParam._m0[_1837].z, fma(_1774, cbSceneParam._m0[_1837].y, _1770 * cbSceneParam._m0[_1837].x)));
        float _1865 = cbSceneParam._m0[33u].z * _1860;
        float _1867 = cbSceneParam._m0[33u].w * _1860;
        float _1870 = fma(_1782, cbSceneParam._m0[_1829].w, fma(_1778, cbSceneParam._m0[_1829].z, fma(_1774, cbSceneParam._m0[_1829].y, _1770 * cbSceneParam._m0[_1829].x))) / _1860;
        float _1918 = (cbSceneParam._m0[33u].x - sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785))) * cbSceneParam._m0[33u].y;
        float _4217 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1925 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 + _1848) / _1860, (_1867 + _1852) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 + _1848) / _1860, (_1852 - _1865) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 - _1865) / _1860, (_1852 - _1867) / _1860), _1870), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 - _1867) / _1860, (_1865 + _1852) / _1860), _1870), 0.0)).x), vec4(0.25)));
        _1932 = 1.0 - (_1925 * cbSceneParam._m0[34u].x);
        _1933 = 1.0 - (_1925 * cbSceneParam._m0[34u].y);
        _1934 = 1.0 - (_1925 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1932 = 1.0;
        _1933 = 1.0;
        _1934 = 1.0;
    }
    float _1998;
    float _2000;
    float _2002;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1986 = fma(_1782, cbSceneParam._m0[63u].w, fma(_1778, cbSceneParam._m0[63u].z, fma(_1774, cbSceneParam._m0[63u].y, _1770 * cbSceneParam._m0[63u].x)));
        float _1987 = fma(_1782, cbSceneParam._m0[60u].w, fma(_1778, cbSceneParam._m0[60u].z, fma(_1774, cbSceneParam._m0[60u].y, _1770 * cbSceneParam._m0[60u].x))) / _1986;
        float _1988 = fma(_1782, cbSceneParam._m0[61u].w, fma(_1778, cbSceneParam._m0[61u].z, fma(_1774, cbSceneParam._m0[61u].y, _1770 * cbSceneParam._m0[61u].x))) / _1986;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1987 >= cbSceneParam._m0[64u].x) && (_1988 >= cbSceneParam._m0[64u].y)) && (_1987 <= cbSceneParam._m0[64u].z)) && (_1988 <= cbSceneParam._m0[64u].w))
        {
            float _2126 = fma(_1782, cbSceneParam._m0[62u].w, fma(_1778, cbSceneParam._m0[62u].z, fma(_1774, cbSceneParam._m0[62u].y, _1770 * cbSceneParam._m0[62u].x))) / _1986;
            float _2130 = isnan(cbSceneParam._m0[41u].w) ? _2126 : (isnan(_2126) ? cbSceneParam._m0[41u].w : max(_2126, cbSceneParam._m0[41u].w));
            float _2173 = (cbSceneParam._m0[33u].x - sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785))) * cbSceneParam._m0[33u].y;
            float _4233 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
            float _2180 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1987, cbSceneParam._m0[33u].w + _1988), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1987, _1988 - cbSceneParam._m0[33u].z), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1987 - cbSceneParam._m0[33u].z, _1988 - cbSceneParam._m0[33u].w), _2130), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1987 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1988), _2130), 0.0)).x), vec4(0.25)));
            float _2184 = 1.0 - (_2180 * cbSceneParam._m0[34u].x);
            float _2185 = 1.0 - (_2180 * cbSceneParam._m0[34u].y);
            float _2186 = 1.0 - (_2180 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2185) ? _1933 : (isnan(_1933) ? _2185 : min(_1933, _2185));
            frontier_phi_36_35_ladder_1 = isnan(_2186) ? _1934 : (isnan(_1934) ? _2186 : min(_1934, _2186));
            frontier_phi_36_35_ladder_2 = isnan(_2184) ? _1932 : (isnan(_1932) ? _2184 : min(_1932, _2184));
        }
        else
        {
            frontier_phi_36_35_ladder = _1933;
            frontier_phi_36_35_ladder_1 = _1934;
            frontier_phi_36_35_ladder_2 = _1932;
        }
        _1998 = frontier_phi_36_35_ladder_2;
        _2000 = frontier_phi_36_35_ladder;
        _2002 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1998 = _1932;
        _2000 = _1933;
        _2002 = _1934;
    }
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_684 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _709 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2045 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2049 = _2009 | 1u;
    float _2060 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_559, _560, _561));
    float _2063 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_559, _560, _561));
    float _4269 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _4280 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2070 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2077 = ((cbLight._m0[_2026].x * _2032) * _2070) + (((cbLight._m0[_2036].x * _1998) * _2045) * _2068);
    float _2078 = ((_2032 * cbLight._m0[_2026].y) * _2070) + (((cbLight._m0[_2036].y * _2000) * _2045) * _2068);
    float _2079 = ((_2032 * cbLight._m0[_2026].z) * _2070) + (((cbLight._m0[_2036].z * _2002) * _2045) * _2068);
    uvec4 _2083 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2085 = _2083.x == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2085)
    {
        _2187 = _2077;
        _2189 = _2078;
        _2191 = _2079;
    }
    else
    {
        uint _2195 = _2009 + 6u;
        float _2211 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4291 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2214 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2187 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _2077;
        _2189 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _2078;
        _2191 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _2079;
    }
    bool _2194 = _2083.y == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2194)
    {
        _2249 = _2187;
        _2251 = _2189;
        _2253 = _2191;
    }
    else
    {
        uint _2411 = _2009 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4307 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2430 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2249 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2187;
        _2251 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2189;
        _2253 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2191;
    }
    uint _2256 = _2009 + 8u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _562) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2009].x + _638;
    float _2272 = cbLight._m0[_2009].y + _639;
    float _2273 = cbLight._m0[_2009].z + _640;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2009].xyz));
    float _4323 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2285 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2286 = dot(vec3(_559, _560, _561), vec3(_2278, _2279, _2280));
    float _4345 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2278, _2279, _2280));
    float _4356 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2270 * _2270;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2310 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2285 * ((_2284 * _2310) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2310) + _2270) * _2284))) * _2284;
    float _4367 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    uint _2337 = _2009 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _562) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2049].x + _638;
    float _2351 = cbLight._m0[_2049].y + _639;
    float _2352 = cbLight._m0[_2049].z + _640;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2049].xyz));
    float _4378 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2364 = dot(vec3(_559, _560, _561), vec3(_2357, _2358, _2359));
    float _4389 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2357, _2358, _2359));
    float _4400 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2386 = 1.0 - _2349;
    float _2396 = (0.5 / (((_2285 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2386) + _2349) * _2363))) * _2363;
    float _4411 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2408 = (((_2385 * cbLight._m0[_2337].x) * _2398) * _2032) + ((((cbLight._m0[_2256].x * _1998) * _2309) * _2323) * _2045);
    float _2409 = (((_2385 * cbLight._m0[_2337].y) * _2398) * _2032) + ((((cbLight._m0[_2256].y * _2000) * _2309) * _2323) * _2045);
    float _2410 = (((_2385 * cbLight._m0[_2337].z) * _2398) * _2032) + ((((cbLight._m0[_2256].z * _2002) * _2309) * _2323) * _2045);
    float _2466;
    float _2468;
    float _2470;
    if (_2085)
    {
        _2466 = _2408;
        _2468 = _2409;
        _2470 = _2410;
    }
    else
    {
        uint _2472 = _2009 + 2u;
        uint _2476 = _2009 + 10u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _562) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _638;
        float _2493 = cbLight._m0[_2472].y + _639;
        float _2494 = cbLight._m0[_2472].z + _640;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2472].xyz));
        float _4422 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2506 = dot(vec3(_559, _560, _561), vec3(_2499, _2500, _2501));
        float _4433 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4444 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2285 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2528) + _2491) * _2505))) * _2505;
        float _4455 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2466 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2408;
        _2468 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2409;
        _2470 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2410;
    }
    float _2572;
    float _2574;
    float _2576;
    if (_2194)
    {
        _2572 = _2466;
        _2574 = _2468;
        _2576 = _2470;
    }
    else
    {
        uint _2583 = _2009 + 3u;
        uint _2587 = _2009 + 11u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _562) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _638;
        float _2604 = cbLight._m0[_2583].y + _639;
        float _2605 = cbLight._m0[_2583].z + _640;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2583].xyz));
        float _4471 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2617 = dot(vec3(_559, _560, _561), vec3(_2610, _2611, _2612));
        float _4482 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4493 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2639 = 1.0 - _2602;
        float _2649 = (0.5 / (((_2285 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2639) + _2602) * _2616))) * _2616;
        float _4504 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2572 = (((_2638 * cbLight._m0[_2587].x) * _2651) * _2652) + _2466;
        _2574 = (((_2638 * cbLight._m0[_2587].y) * _2651) * _2652) + _2468;
        _2576 = (((_2638 * cbLight._m0[_2587].z) * _2651) * _2652) + _2470;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2007.y == 0u)
    {
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _647) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _646) / _2674)));
        float _2695 = (log2(_1785 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2944)
                {
                    frontier_phi_68_pred = _2933;
                    frontier_phi_68_pred_1 = _2932;
                    frontier_phi_68_pred_2 = _2931;
                    frontier_phi_68_pred_3 = _2929;
                    frontier_phi_68_pred_4 = _2928;
                    frontier_phi_68_pred_5 = _2930;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2943;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2934 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _1783;
                        float _3119 = _3078.y - _1784;
                        float _3120 = _3078.z - _1785;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_665, _668, _671), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4530 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _1783;
                        float _3154 = (-0.0) - _1784;
                        float _3155 = (-0.0) - _1785;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3169 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _725;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3160 + _3125;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_665, _668, _671), vec3(_3160, _3161, _3162));
                        float _4546 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3194 = dot(vec3(_665, _668, _671), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4557 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3138 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3128) + _3203;
                        float _4568 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4579 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3201 * _3201) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2987 = (_3149 * _3097.x) + _3055;
                        _2988 = (_3149 * _3097.y) + _3056;
                        _2989 = (_3149 * _3097.z) + _3057;
                        _2984 = (_3229 * _3114.x) + _3052;
                        _2985 = (_3229 * _3114.y) + _3053;
                        _2986 = (_3229 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_68_pred = _2989;
                    frontier_phi_68_pred_1 = _2988;
                    frontier_phi_68_pred_2 = _2987;
                    frontier_phi_68_pred_3 = _2985;
                    frontier_phi_68_pred_4 = _2984;
                    frontier_phi_68_pred_5 = _2986;
                }
                _2795 = frontier_phi_68_pred;
                _2793 = frontier_phi_68_pred_1;
                _2791 = frontier_phi_68_pred_2;
                _2787 = frontier_phi_68_pred_3;
                _2785 = frontier_phi_68_pred_4;
                _2789 = frontier_phi_68_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2785;
                    _2929 = _2787;
                    _2930 = _2789;
                    _2931 = _2791;
                    _2932 = _2793;
                    _2933 = _2795;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2801) & _2705) == 0u)
        {
            _2896 = _2784;
            _2898 = _2786;
            _2900 = _2788;
            _2902 = _2790;
            _2904 = _2792;
            _2906 = _2794;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
            float _2922 = _2921 * _1783;
            float _2923 = _2921 * _1784;
            float _2924 = _2921 * _1785;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3035 = _2784;
                float _3036 = _2786;
                float _3037 = _2788;
                float _3038 = _2790;
                float _3039 = _2792;
                float _3040 = _2794;
                uint _3041 = _2801;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3051)
                    {
                        frontier_phi_74_pred = _3037;
                        frontier_phi_74_pred_1 = _3036;
                        frontier_phi_74_pred_2 = _3035;
                        frontier_phi_74_pred_3 = _3040;
                        frontier_phi_74_pred_4 = _3039;
                        frontier_phi_74_pred_5 = _3038;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        uint _3253 = _3050;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3323;
                        vec4 _3339;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3264 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3310 = (_3264 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3264 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3264 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3264 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_1785, _3374.z, fma(_1784, _3374.y, _3374.x * _1783)) + _3374.w;
                            _3387 = !((fma(_1785, _3355.z, fma(_1784, _3355.y, _3355.x * _1783)) + _3355.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3279.x - _1783;
                                float _3415 = _3279.y - _1784;
                                float _3416 = _3279.z - _1785;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3280 * _3280));
                                float _4590 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3432 = sqrt(_3417) * _3295.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_665, _668, _671))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_1785, _3323.z, fma(_1784, _3323.y, _3323.x * _1783)) + _3323.w) / _3386;
                                float _3446 = (fma(_1785, _3339.z, fma(_1784, _3339.y, _3339.x * _1783)) + _3339.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4606 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _725;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2922;
                                float _3476 = _3422 - _2923;
                                float _3477 = _3423 - _2924;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_665, _668, _671), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4617 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3489 = dot(vec3(_665, _668, _671), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4628 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_665, _668, _671), vec3(_3421, _3422, _3423))) + _3498;
                                float _4639 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4650 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3526 * _3307.z;
                                frontier_phi_80_pred_1 = _3526 * _3307.y;
                                frontier_phi_80_pred_2 = _3526 * _3307.x;
                                frontier_phi_80_pred_3 = _3452 * _3295.z;
                                frontier_phi_80_pred_4 = _3452 * _3295.y;
                                frontier_phi_80_pred_5 = _3452 * _3295.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_80_pred;
                            _3531 = frontier_phi_80_pred_1;
                            _3530 = frontier_phi_80_pred_2;
                            _3535 = frontier_phi_80_pred_3;
                            _3534 = frontier_phi_80_pred_4;
                            _3533 = frontier_phi_80_pred_5;
                            _3237 = _3533 + _3250;
                            _3238 = _3534 + _3251;
                            _3239 = _3535 + _3252;
                            _3234 = _3530 + _3247;
                            _3235 = _3531 + _3248;
                            _3236 = _3532 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3236;
                        frontier_phi_74_pred_1 = _3235;
                        frontier_phi_74_pred_2 = _3234;
                        frontier_phi_74_pred_3 = _3239;
                        frontier_phi_74_pred_4 = _3238;
                        frontier_phi_74_pred_5 = _3237;
                    }
                    _2901 = frontier_phi_74_pred;
                    _2899 = frontier_phi_74_pred_1;
                    _2897 = frontier_phi_74_pred_2;
                    _2907 = frontier_phi_74_pred_3;
                    _2905 = frontier_phi_74_pred_4;
                    _2903 = frontier_phi_74_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2897;
                        _3036 = _2899;
                        _3037 = _2901;
                        _3038 = _2903;
                        _3039 = _2905;
                        _3040 = _2907;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2905;
                frontier_phi_62_63_ladder_1 = _2903;
                frontier_phi_62_63_ladder_2 = _2901;
                frontier_phi_62_63_ladder_3 = _2907;
                frontier_phi_62_63_ladder_4 = _2899;
                frontier_phi_62_63_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_62_63_ladder = _2792;
                frontier_phi_62_63_ladder_1 = _2790;
                frontier_phi_62_63_ladder_2 = _2788;
                frontier_phi_62_63_ladder_3 = _2794;
                frontier_phi_62_63_ladder_4 = _2786;
                frontier_phi_62_63_ladder_5 = _2784;
            }
            _2896 = frontier_phi_62_63_ladder_5;
            _2898 = frontier_phi_62_63_ladder_4;
            _2900 = frontier_phi_62_63_ladder_2;
            _2902 = frontier_phi_62_63_ladder_1;
            _2904 = frontier_phi_62_63_ladder;
            _2906 = frontier_phi_62_63_ladder_3;
        }
        float _2911 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2717 = (_2911 * _2902) + _2249;
        _2719 = (_2911 * _2904) + _2251;
        _2721 = (_2911 * _2906) + _2253;
        _2723 = ((_2896 * 0.039999999105930328369140625) * _2911) + _2572;
        _2725 = ((_2898 * 0.039999999105930328369140625) * _2911) + _2574;
        _2727 = ((_2900 * 0.039999999105930328369140625) * _2911) + _2576;
    }
    else
    {
        _2717 = _2249;
        _2719 = _2251;
        _2721 = _2253;
        _2723 = _2572;
        _2725 = _2574;
        _2727 = _2576;
    }
    float _4666 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4677 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4688 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    uint _2747 = _684 + 6u;
    float _2755 = _646 / cbSceneParam._m0[86u].x;
    float _2756 = _647 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2810 = _2809 / _581;
        float _2821 = _2810 * _631;
        float _2822 = _632 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2824 = _2810 * _633;
        float _2826 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2827 = _2826 + cbSceneParam._m0[79u].w;
        float _2828 = cbSceneParam._m0[79u].w - _2822;
        float _2834 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2824 * _2824));
        float _2837 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2834;
        float _2842 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2844 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2823 - _2826) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2827 > 0.0) ? exp2(_2842 * _2827) : (2.0 - exp2(_2844 * _2827))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2837;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : max(_2827, _2828));
            float _2959 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : min(_2827, _2828));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _2997 = ((abs(_2834 / _2823) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2842 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2842 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2844 * _2968) - exp2(_2844 * _2969)) * _2957))) + (_2837 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2775);
        _2846 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2848 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2850 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2852 = _3008 * _2775;
    }
    else
    {
        _2846 = _2772;
        _2848 = _2773;
        _2850 = _2774;
        _2852 = _2775;
    }
    float _2864 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2865 = _2864 == 3.0;
    float _2866 = log2(_2852);
    float _2873 = exp2(_2866 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2717 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _709))) + ((_2723 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2866 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2719 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _709))) + ((_2725 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2866 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2721 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _709))) + ((_2727 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2884 = (_2864 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2884 * (_2865 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.y = _2884 * (_2865 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.z = _2884 * (_2865 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.w = cbInstanceData._m0[_2747].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
}


