#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_A_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _720;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _187 = texture(sampler2D(M_A_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _187.x;
    float _191 = _187.y;
    float _192 = _187.z;
    vec4 _208 = texture(sampler2D(M_A_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _219 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _220 = _219 * _171;
    float _221 = _219 * _172;
    float _222 = _219 * _173;
    float _2868 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2879 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2890 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _242 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _294 * _300;
    float _302 = _295 * _300;
    float _303 = _296 * _300;
    float _309 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _310 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_222, cbSceneParam._m0[5u].z, fma(_221, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _220));
    float _334 = fma(_222, cbSceneParam._m0[6u].z, fma(_221, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _220));
    float _337 = fma(_222, cbSceneParam._m0[7u].z, fma(_221, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _220));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2901 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    float _2912 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
    float _2923 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _309, cbSceneParam._m0[86u].y * _310));
    float _376 = _373.x * TEXCOORD.z;
    float _377 = dot(vec3(_220, _221, _222), vec3(_301, _302, _303));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _220) - _301;
    float _386 = (_380 * _221) - _302;
    float _387 = (_380 * _222) - _303;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _719;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _444 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _448 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _452 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _477 = _409 + _220;
        float _478 = _413 + _221;
        float _479 = _417 + _222;
        float _489 = fma(_479, cbModelParam._m0[26u].z, fma(_478, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) - _444;
        float _490 = fma(_479, cbModelParam._m0[27u].z, fma(_478, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) - _448;
        float _491 = fma(_479, cbModelParam._m0[28u].z, fma(_478, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) - _452;
        float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
        float _508 = ((_495 * _489) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_444 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _509 = ((_495 * _490) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_448 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _510 = ((_495 * _491) / cbModelParam._m0[34u].z) + ((((((_452 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        float _547 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_513.x + (-0.5));
        float _549 = _547 * (_513.y + (-0.5));
        float _550 = _547 * (_513.z + (-0.5));
        float _557 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_520.x + (-0.5));
        float _559 = _557 * (_520.y + (-0.5));
        float _560 = _557 * (_520.z + (-0.5));
        float _567 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_527.x + (-0.5));
        float _569 = _567 * (_527.y + (-0.5));
        float _570 = _567 * (_527.z + (-0.5));
        float _577 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_534.x + (-0.5));
        float _579 = _577 * (_534.y + (-0.5));
        float _580 = _577 * (_534.z + (-0.5));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = _548 * 0.5;
        float _585 = _558 * 0.5;
        float _586 = _568 * 0.5;
        float _587 = dot(vec3(_584, _585, _586), vec3(_584, _585, _586));
        float _592 = (_587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_587);
        float _601 = (dot(vec3(_220, _221, _222), vec3(_592 * _584, _592 * _585, _592 * _586)) + 1.0) * 0.5;
        float _2949 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _611 = sqrt(((_585 * _585) + (_584 * _584)) + (_586 * _586)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _2960 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _2971 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0))) * (_613 + 1.0))) + _618) * _581;
        float _628 = _549 * 0.5;
        float _629 = _559 * 0.5;
        float _630 = _569 * 0.5;
        float _631 = dot(vec3(_628, _629, _630), vec3(_628, _629, _630));
        float _636 = (_631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_631);
        float _644 = (dot(vec3(_220, _221, _222), vec3(_636 * _628, _636 * _629, _636 * _630)) + 1.0) * 0.5;
        float _2982 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _653 = sqrt(((_629 * _629) + (_628 * _628)) + (_630 * _630)) / (_582 + 9.9999997473787516355514526367188e-06);
        float _2993 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
        float _655 = _654 * 2.0;
        float _659 = (1.0 - _654) / (_654 + 1.0);
        float _3004 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _669 = ((((1.0 - _660) * (_655 + 2.0)) * exp2(log2(isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) * (_655 + 1.0))) + _660) * _582;
        float _670 = _550 * 0.5;
        float _671 = _560 * 0.5;
        float _672 = _570 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _686 = (dot(vec3(_220, _221, _222), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3015 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _695 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _3026 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3037 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0))) * (_697 + 1.0))) + _702) * _583;
        _719 = _550;
        _721 = _549;
        _722 = _548;
        _723 = _560;
        _724 = _559;
        _725 = _558;
        _726 = _570;
        _727 = _569;
        _728 = _568;
        _729 = _583;
        _730 = _582;
        _731 = _581;
        _732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0)));
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
    }
    else
    {
        _719 = _720;
        _721 = _720;
        _722 = _720;
        _723 = _720;
        _724 = _720;
        _725 = _720;
        _726 = _720;
        _727 = _720;
        _728 = _720;
        _729 = _720;
        _730 = _720;
        _731 = _720;
        _732 = 0.0;
        _733 = 0.0;
        _734 = 0.0;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _760 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _764 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _768 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _791 = _409 + _220;
        float _792 = _413 + _221;
        float _793 = _417 + _222;
        float _803 = fma(_793, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[35u].z) + ((((((_768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _859 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_826.x + (-0.5));
        float _861 = _859 * (_826.y + (-0.5));
        float _862 = _859 * (_826.z + (-0.5));
        float _869 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_833.x + (-0.5));
        float _871 = _869 * (_833.y + (-0.5));
        float _872 = _869 * (_833.z + (-0.5));
        float _879 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_840.x + (-0.5));
        float _881 = _879 * (_840.y + (-0.5));
        float _882 = _879 * (_840.z + (-0.5));
        float _889 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_847.x + (-0.5));
        float _891 = _889 * (_847.y + (-0.5));
        float _892 = _889 * (_847.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_220, _221, _222), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3100 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_923 + 1.0))) + _928) * _893;
        float _938 = _861 * 0.5;
        float _939 = _871 * 0.5;
        float _940 = _881 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_220, _221, _222), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3133 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_965 + 1.0))) + _970) * _894;
        float _980 = _862 * 0.5;
        float _981 = _872 * 0.5;
        float _982 = _882 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_220, _221, _222), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3144 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3155 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3166 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))) * (_1007 + 1.0))) + _1012) * _895;
        _1029 = _862;
        _1030 = _861;
        _1031 = _860;
        _1032 = _872;
        _1033 = _871;
        _1034 = _870;
        _1035 = _882;
        _1036 = _881;
        _1037 = _880;
        _1038 = _895;
        _1039 = _894;
        _1040 = _893;
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _720;
        _1030 = _720;
        _1031 = _720;
        _1032 = _720;
        _1033 = _720;
        _1034 = _720;
        _1035 = _720;
        _1036 = _720;
        _1037 = _720;
        _1038 = _720;
        _1039 = _720;
        _1040 = _720;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _732)) + _732;
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _733)) + _733;
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1076 = fma(_1055, cbSceneParam._m0[89u].z, fma(_1054, cbSceneParam._m0[89u].y, _1053 * cbSceneParam._m0[89u].x));
    float _1079 = fma(_1055, cbSceneParam._m0[90u].z, fma(_1054, cbSceneParam._m0[90u].y, _1053 * cbSceneParam._m0[90u].x));
    float _1082 = fma(_1055, cbSceneParam._m0[91u].z, fma(_1054, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1053));
    float _1097 = _385 * 0.5;
    float _1098 = _386 * 0.5;
    float _1099 = _387 * 0.5;
    float _1100 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1103 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1106 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1140;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1113 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_719, _723, _726, _729));
        float _1117 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_721, _724, _727, _730));
        float _1121 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_722, _725, _728, _731));
        float _1128 = dot(vec4(cbModelParam._m0[39u]), vec4(_1097, _1098, _1099, 1.0));
        _1140 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1140 = 1.0;
    }
    float _1151;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1142 = dot(vec4(cbModelParam._m0[40u]), vec4(_1097, _1098, _1099, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1155 = (_1151 * cbModelParam._m0[1u].x) + (_1140 * (1.0 - cbModelParam._m0[1u].x));
    float _1164 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1213 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1217 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1221 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1224 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1227 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1230 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1256;
        if (_1224 > 0.0)
        {
            _1256 = abs((1.0 - _1213) / _1224);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1213 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1256 = frontier_phi_16_14_ladder;
        }
        float _1464;
        if (_1227 > 0.0)
        {
            _1464 = abs((1.0 - _1217) / _1227);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1217 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1464 = frontier_phi_25_21_ladder;
        }
        float _1653;
        if (_1230 > 0.0)
        {
            _1653 = abs((1.0 - _1221) / _1230);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1221 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1653 = frontier_phi_37_32_ladder;
        }
        float _1655 = isnan(_1464) ? _1256 : (isnan(_1256) ? _1464 : min(_1256, _1464));
        float _1656 = isnan(_1653) ? _1655 : (isnan(_1655) ? _1653 : min(_1655, _1653));
        float _1660 = (_1656 * _1224) + _1213;
        float _1661 = (_1656 * _1227) + _1217;
        float _1662 = (_1656 * _1230) + _1221;
        float _1663 = _1656 * 9.9999997473787516355514526367188e-05;
        float _1665 = (-1.0) - _1663;
        float _1667 = _1663 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1662 > _1667) || ((_1662 < _1665) || ((_1661 > _1667) || ((_1661 < _1665) || ((_1660 < _1665) || (_1660 > _1667))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1662, cbModelParam._m0[9u].z, fma(_1661, cbModelParam._m0[9u].y, _1660 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1662, cbModelParam._m0[10u].z, fma(_1661, cbModelParam._m0[10u].y, _1660 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1662, cbModelParam._m0[11u].z, fma(_1661, cbModelParam._m0[11u].y, _1660 * cbModelParam._m0[11u].x))), _1164);
            frontier_phi_15_37_ladder = _1759.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1759.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1759.x * cbModelParam._m0[1u].y;
        }
        _1246 = frontier_phi_15_37_ladder_2;
        _1248 = frontier_phi_15_37_ladder_1;
        _1250 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1164);
        _1246 = _1234.x * cbModelParam._m0[1u].y;
        _1248 = _1234.y * cbModelParam._m0[1u].y;
        _1250 = _1234.z * cbModelParam._m0[1u].y;
    }
    float _1253 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1310 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1314 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1318 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1321 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1324 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1327 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1469;
        if (_1321 > 0.0)
        {
            _1469 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1469 = frontier_phi_27_23_ladder;
        }
        float _1680;
        if (_1324 > 0.0)
        {
            _1680 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1680 = frontier_phi_39_34_ladder;
        }
        float _1831;
        if (_1327 > 0.0)
        {
            _1831 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1831 = frontier_phi_48_45_ladder;
        }
        float _1833 = isnan(_1680) ? _1469 : (isnan(_1469) ? _1680 : min(_1469, _1680));
        float _1834 = isnan(_1831) ? _1833 : (isnan(_1833) ? _1831 : min(_1833, _1831));
        float _1838 = (_1834 * _1321) + _1310;
        float _1839 = (_1834 * _1324) + _1314;
        float _1840 = (_1834 * _1327) + _1318;
        float _1841 = _1834 * 9.9999997473787516355514526367188e-05;
        float _1842 = (-1.0) - _1841;
        float _1844 = _1841 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1840 > _1844) || ((_1840 < _1842) || ((_1839 > _1844) || ((_1839 < _1842) || ((_1838 < _1842) || (_1838 > _1844))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1840, cbModelParam._m0[17u].z, fma(_1839, cbModelParam._m0[17u].y, _1838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1840, cbModelParam._m0[18u].z, fma(_1839, cbModelParam._m0[18u].y, _1838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1840, cbModelParam._m0[19u].z, fma(_1839, cbModelParam._m0[19u].y, _1838 * cbModelParam._m0[19u].x))), _1253);
            frontier_phi_24_48_ladder = _2067.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2067.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2067.x * cbModelParam._m0[1u].z;
        }
        _1346 = frontier_phi_24_48_ladder_2;
        _1348 = frontier_phi_24_48_ladder_1;
        _1350 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1253);
        _1346 = _1330.x * cbModelParam._m0[1u].z;
        _1348 = _1330.y * cbModelParam._m0[1u].z;
        _1350 = _1330.z * cbModelParam._m0[1u].z;
    }
    float _1362 = _376 * 0.01200000010430812835693359375;
    float _1364 = _1362 * ((cbModelParam._m0[1u].w * (_1346 - _1246)) + _1246);
    float _1365 = _1362 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1366 = _1362 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, _1364 * cbSceneParam._m0[91u].x));
    uvec4 _1385 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1387 = _1385.x * 14u;
    uint _1388 = _1387 + 13u;
    float _1395 = _376 + (-1.0);
    float _1401 = (cbLight._m0[_1388].x * _1395) + 1.0;
    float _1402 = (cbLight._m0[_1388].y * _1395) + 1.0;
    float _1403 = (cbLight._m0[_1388].z * _1395) + 1.0;
    float _1404 = (cbLight._m0[_1388].w * _1395) + 1.0;
    uint _1405 = _1387 + 5u;
    float _1411 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
    uint _1415 = _1387 + 4u;
    float _1422 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
    uint _1426 = _1387 | 1u;
    float _1437 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_220, _221, _222));
    float _1440 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_220, _221, _222));
    float _3302 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _3313 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1445 = (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * 0.3183098733425140380859375;
    float _1447 = (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.3183098733425140380859375;
    float _1454 = ((cbLight._m0[_1405].x * _1411) * _1447) + ((cbLight._m0[_1415].x * _1422) * _1445);
    float _1455 = ((_1411 * cbLight._m0[_1405].y) * _1447) + ((_1422 * cbLight._m0[_1415].y) * _1445);
    float _1456 = ((_1411 * cbLight._m0[_1405].z) * _1447) + ((_1422 * cbLight._m0[_1415].z) * _1445);
    uvec4 _1461 = floatBitsToUint(cbLight._m0[_1387 + 12u]);
    bool _1463 = _1461.x == 0u;
    float _1474;
    float _1476;
    float _1478;
    if (_1463)
    {
        _1474 = _1454;
        _1476 = _1455;
        _1478 = _1456;
    }
    else
    {
        uint _1482 = _1387 + 6u;
        float _1498 = (dot(vec3(cbLight._m0[_1387 + 2u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1499 = _1498 * _1498;
        float _3324 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _1501 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1474 = (((cbLight._m0[_1482].x * 0.3183098733425140380859375) * _1500) * _1501) + _1454;
        _1476 = (((cbLight._m0[_1482].y * 0.3183098733425140380859375) * _1500) * _1501) + _1455;
        _1478 = (((cbLight._m0[_1482].z * 0.3183098733425140380859375) * _1500) * _1501) + _1456;
    }
    bool _1481 = _1461.y == 0u;
    float _1519;
    float _1521;
    float _1523;
    if (_1481)
    {
        _1519 = _1474;
        _1521 = _1476;
        _1523 = _1478;
    }
    else
    {
        uint _1624 = _1387 + 7u;
        float _1640 = (dot(vec3(cbLight._m0[_1387 + 3u].xyz), vec3(_220, _221, _222)) * 0.5) + 0.5;
        float _1641 = _1640 * _1640;
        float _3340 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1643 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1519 = (((cbLight._m0[_1624].x * 0.3183098733425140380859375) * _1642) * _1643) + _1474;
        _1521 = (((cbLight._m0[_1624].y * 0.3183098733425140380859375) * _1642) * _1643) + _1476;
        _1523 = (((cbLight._m0[_1624].z * 0.3183098733425140380859375) * _1642) * _1643) + _1478;
    }
    uint _1525 = _1387 + 8u;
    float _1531 = cbLight._m0[_1387].x + _301;
    float _1532 = cbLight._m0[_1387].y + _302;
    float _1533 = cbLight._m0[_1387].z + _303;
    float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
    float _1541 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1387].xyz));
    float _3356 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1544 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1545 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _1546 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_1531 * _1537, _1532 * _1537, _1533 * _1537));
    float _3378 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1557 = (exp2(log2(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1563 = (0.5 / ((_1544 + 9.9999999392252902907785028219223e-09) + _1545)) * _1544;
    float _3389 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1565 = (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.31831014156341552734375;
    uint _1576 = _1387 + 9u;
    float _1582 = cbLight._m0[_1426].x + _301;
    float _1583 = cbLight._m0[_1426].y + _302;
    float _1584 = cbLight._m0[_1426].z + _303;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1592 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1426].xyz));
    float _3400 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _1596 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_1582 * _1588, _1583 * _1588, _1584 * _1588));
    float _3411 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1605 = (exp2(log2(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1609 = (0.5 / ((_1595 + 9.9999999392252902907785028219223e-09) + _1545)) * _1595;
    float _3422 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1611 = (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * 0.31831014156341552734375;
    float _1621 = (((_1605 * cbLight._m0[_1576].x) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].x) * _1565) * _1422);
    float _1622 = (((_1605 * cbLight._m0[_1576].y) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].y) * _1565) * _1422);
    float _1623 = (((_1605 * cbLight._m0[_1576].z) * _1611) * _1411) + (((_1557 * cbLight._m0[_1525].z) * _1565) * _1422);
    float _1685;
    float _1687;
    float _1689;
    if (_1463)
    {
        _1685 = _1621;
        _1687 = _1622;
        _1689 = _1623;
    }
    else
    {
        uint _1691 = _1387 + 10u;
        uint _1697 = _1387 + 2u;
        float _1703 = cbLight._m0[_1697].x + _301;
        float _1704 = cbLight._m0[_1697].y + _302;
        float _1705 = cbLight._m0[_1697].z + _303;
        float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
        float _1713 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1697].xyz));
        float _3433 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1716 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1717 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1703 * _1709, _1704 * _1709, _1705 * _1709));
        float _3444 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = (exp2(log2(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1730 = (0.5 / ((_1716 + 9.9999999392252902907785028219223e-09) + _1545)) * _1716;
        float _3455 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1732 = (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * 0.31831014156341552734375;
        float _1733 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1685 = (((_1726 * cbLight._m0[_1691].x) * _1732) * _1733) + _1621;
        _1687 = (((_1726 * cbLight._m0[_1691].y) * _1732) * _1733) + _1622;
        _1689 = (((_1726 * cbLight._m0[_1691].z) * _1732) * _1733) + _1623;
    }
    float _1768;
    float _1770;
    float _1772;
    if (_1481)
    {
        _1768 = _1685;
        _1770 = _1687;
        _1772 = _1689;
    }
    else
    {
        uint _1779 = _1387 + 11u;
        uint _1785 = _1387 + 3u;
        float _1791 = cbLight._m0[_1785].x + _301;
        float _1792 = cbLight._m0[_1785].y + _302;
        float _1793 = cbLight._m0[_1785].z + _303;
        float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
        float _1801 = dot(vec3(_220, _221, _222), vec3(cbLight._m0[_1785].xyz));
        float _3471 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1804 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1805 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1791 * _1797, _1792 * _1797, _1793 * _1797));
        float _3482 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = (exp2(log2(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1818 = (0.5 / ((_1804 + 9.9999999392252902907785028219223e-09) + _1545)) * _1804;
        float _3493 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1820 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.31831014156341552734375;
        float _1821 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1768 = (((_1814 * cbLight._m0[_1779].x) * _1820) * _1821) + _1685;
        _1770 = (((_1814 * cbLight._m0[_1779].y) * _1820) * _1821) + _1687;
        _1772 = (((_1814 * cbLight._m0[_1779].z) * _1820) * _1821) + _1689;
    }
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    if (_1385.y == 0u)
    {
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1896;
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1896;
        float _1899 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1896;
        uvec4 _1911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1912 = _1911.x;
        uint _1923 = uint((float(_1911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _310) / _1912))) + floor(float(uint(cbSceneParam._m0[85u].x * _309) / _1912)));
        float _1933 = (log2(_1899 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1934 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        uint _1937 = uint(isnan(14.0) ? _1934 : (isnan(_1934) ? 14.0 : min(_1934, 14.0)));
        uvec4 _1942 = texelFetch(g_lightClusterGridBuffer, int(((_1937 << 2u) + (_1923 << 6u)) >> 2u));
        uint _1943 = _1942.x;
        uint _1944 = _1911.z;
        float _2072;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        if (((((1u << ((_1944 >> 4u) & 15u)) + 4294967295u) & _1943) == 0u) || ((_1944 & 240u) == 0u))
        {
            _2072 = 0.0;
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
        }
        else
        {
            float _2073;
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2223 = 0.0;
            float _2224 = 0.0;
            float _2225 = 0.0;
            float _2226 = 0.0;
            float _2227 = 0.0;
            float _2228 = 0.0;
            uint _2229 = 0u;
            uint _2238;
            bool _2239;
            for (;;)
            {
                _2238 = texelFetch(g_lightClassification, int((((_1937 << 5u) + (_1923 << 9u)) + (_2229 << 2u)) >> 2u)).x;
                _2239 = _2238 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2239)
                {
                    frontier_phi_63_pred = _2228;
                    frontier_phi_63_pred_1 = _2227;
                    frontier_phi_63_pred_2 = _2226;
                    frontier_phi_63_pred_3 = _2225;
                    frontier_phi_63_pred_4 = _2224;
                    frontier_phi_63_pred_5 = _2223;
                }
                else
                {
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    uint _2353;
                    _2347 = _2223;
                    _2348 = _2224;
                    _2349 = _2225;
                    _2350 = _2226;
                    _2351 = _2227;
                    _2352 = _2228;
                    _2353 = _2238;
                    float _2279;
                    float _2280;
                    float _2281;
                    float _2282;
                    float _2283;
                    float _2284;
                    for (;;)
                    {
                        uint _2357 = uint(findLSB(_2353)) + (_2229 << 5u);
                        uint _2354 = (_2353 + 4294967295u) & _2353;
                        uint _2359 = _2357 * 48u;
                        vec4 _2373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2359)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2359 + 3u)).x));
                        uint _2379 = (_2357 * 48u) + 4u;
                        vec4 _2392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2379)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2379 + 3u)).x));
                        uint _2398 = (_2357 * 48u) + 8u;
                        vec3 _2409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2398)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2398 + 2u)).x));
                        float _2413 = _2373.x - _1897;
                        float _2414 = _2373.y - _1898;
                        float _2415 = _2373.z - _1899;
                        float _2416 = dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415));
                        float _2419 = inversesqrt(_2416);
                        float _2428 = 1.0 - (_2416 * _2373.w);
                        float _3519 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _2429 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
                        float _2430 = sqrt(_2416) * _2392.w;
                        float _2433 = 1.39999997615814208984375 / (_2430 + 1.39999997615814208984375);
                        float _2434 = _2433 * _2433;
                        float _2437 = ((1.0 - _2434) * dot(vec3(_331, _334, _337), vec3(_2419 * _2413, _2419 * _2414, _2419 * _2415))) + _2434;
                        float _2440 = _2430 * _2430;
                        float _2444 = ((isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0))) * _2429) / ((_2440 * 0.699999988079071044921875) + 1.0);
                        float _2448 = (-0.0) - _1897;
                        float _2449 = (-0.0) - _1898;
                        float _2450 = (-0.0) - _1899;
                        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
                        float _2458 = dot(vec3(_331, _334, _337), vec3(_2454 * _2448, _2454 * _2449, _2454 * _2450));
                        float _3535 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _3546 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                        float _2462 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                        float _2466 = (0.5 / (((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) + 9.9999999392252902907785028219223e-09) + _2462)) * _2462;
                        float _3557 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                        float _2475 = (((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 3.1415927410125732421875) / ((_2440 * 2.1991131305694580078125) + 3.141590118408203125)) * _2429;
                        _2282 = (_2444 * _2392.x) + _2350;
                        _2283 = (_2444 * _2392.y) + _2351;
                        _2284 = (_2444 * _2392.z) + _2352;
                        _2279 = (_2475 * _2409.x) + _2347;
                        _2280 = (_2475 * _2409.y) + _2348;
                        _2281 = (_2475 * _2409.z) + _2349;
                        if (_2354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2347 = _2279;
                            _2348 = _2280;
                            _2349 = _2281;
                            _2350 = _2282;
                            _2351 = _2283;
                            _2352 = _2284;
                            _2353 = _2354;
                        }
                    }
                    frontier_phi_63_pred = _2284;
                    frontier_phi_63_pred_1 = _2283;
                    frontier_phi_63_pred_2 = _2282;
                    frontier_phi_63_pred_3 = _2281;
                    frontier_phi_63_pred_4 = _2280;
                    frontier_phi_63_pred_5 = _2279;
                }
                _2083 = frontier_phi_63_pred;
                _2081 = frontier_phi_63_pred_1;
                _2079 = frontier_phi_63_pred_2;
                _2077 = frontier_phi_63_pred_3;
                _2075 = frontier_phi_63_pred_4;
                _2073 = frontier_phi_63_pred_5;
                uint _2230 = _2229 + 1u;
                if (_2230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2223 = _2073;
                    _2224 = _2075;
                    _2225 = _2077;
                    _2226 = _2079;
                    _2227 = _2081;
                    _2228 = _2083;
                    _2229 = _2230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2072 = _2073;
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
        }
        uvec4 _2086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2087 = _2086.z;
        uint _2089 = (_2087 >> 8u) & 15u;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((4294967295u << _2089) & _1943) == 0u)
        {
            _2194 = _2072;
            _2196 = _2074;
            _2198 = _2076;
            _2200 = _2078;
            _2202 = _2080;
            _2204 = _2082;
        }
        else
        {
            float _2219 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2089 < ((_2087 >> 12u) & 15u))
            {
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2203;
                float _2205;
                float _2330 = _2072;
                float _2331 = _2074;
                float _2332 = _2076;
                float _2333 = _2078;
                float _2334 = _2080;
                float _2335 = _2082;
                uint _2336 = _2089;
                uint _2345;
                bool _2346;
                for (;;)
                {
                    _2345 = texelFetch(g_lightClassification, int((((_1937 << 5u) + (_1923 << 9u)) + (_2336 << 2u)) >> 2u)).x;
                    _2346 = _2345 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2346)
                    {
                        frontier_phi_69_pred = _2335;
                        frontier_phi_69_pred_1 = _2334;
                        frontier_phi_69_pred_2 = _2333;
                        frontier_phi_69_pred_3 = _2332;
                        frontier_phi_69_pred_4 = _2331;
                        frontier_phi_69_pred_5 = _2330;
                    }
                    else
                    {
                        float _2480;
                        float _2481;
                        float _2482;
                        float _2483;
                        float _2484;
                        float _2485;
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2493 = _2330;
                        float _2494 = _2331;
                        float _2495 = _2332;
                        float _2496 = _2333;
                        float _2497 = _2334;
                        float _2498 = _2335;
                        uint _2499 = _2345;
                        uint _2500;
                        vec4 _2525;
                        float _2526;
                        vec4 _2541;
                        vec3 _2553;
                        vec4 _2569;
                        vec4 _2585;
                        float _2632;
                        bool _2633;
                        for (;;)
                        {
                            uint _2510 = ((_2336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2499));
                            _2500 = (_2499 + 4294967295u) & _2499;
                            uint _2512 = _2510 * 40u;
                            _2525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2512 + 3u)).x));
                            _2526 = _2525.w;
                            uint _2528 = (_2510 * 40u) + 4u;
                            _2541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 3u)).x));
                            uint _2543 = (_2510 * 40u) + 8u;
                            _2553 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x));
                            uint _2556 = (_2510 * 40u) + 16u;
                            _2569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 3u)).x));
                            uint _2572 = (_2510 * 40u) + 20u;
                            _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            uint _2588 = (_2510 * 40u) + 24u;
                            vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2607 = (_2510 * 40u) + 28u;
                            vec4 _2620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 3u)).x));
                            _2632 = fma(_1899, _2620.z, fma(_1898, _2620.y, _2620.x * _1897)) + _2620.w;
                            _2633 = !((fma(_1899, _2601.z, fma(_1898, _2601.y, _2601.x * _1897)) + _2601.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2633)
                            {
                                float _2660 = _2525.x - _1897;
                                float _2661 = _2525.y - _1898;
                                float _2662 = _2525.z - _1899;
                                float _2663 = dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662));
                                float _2666 = inversesqrt(_2663);
                                float _2667 = _2666 * _2660;
                                float _2668 = _2666 * _2661;
                                float _2669 = _2666 * _2662;
                                float _2673 = 1.0 - (_2663 / (_2526 * _2526));
                                float _3568 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                                float _2674 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
                                float _2678 = sqrt(_2663) * _2541.w;
                                float _2680 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                                float _2681 = _2680 * _2680;
                                float _2682 = 1.0 - _2681;
                                float _2684 = (_2682 * dot(vec3(_2667, _2668, _2669), vec3(_331, _334, _337))) + _2681;
                                float _2687 = _2678 * _2678;
                                float _2691 = (fma(_1899, _2569.z, fma(_1898, _2569.y, _2569.x * _1897)) + _2569.w) / _2632;
                                float _2692 = (fma(_1899, _2585.z, fma(_1898, _2585.y, _2585.x * _1897)) + _2585.w) / _2632;
                                float _2696 = 1.0 - dot(vec2(_2691, _2692), vec2(_2691, _2692));
                                float _3584 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                                float _2698 = _2697 * (((isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))) * _2674) / ((_2687 * 0.699999988079071044921875) + 1.0));
                                float _2708 = dot(vec3(_331, _334, _337), vec3((-0.0) - (_1897 * _2219), (-0.0) - (_1898 * _2219), (-0.0) - (_1899 * _2219)));
                                float _3595 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                                float _2716 = (_2682 * dot(vec3(_331, _334, _337), vec3(_2667, _2668, _2669))) + _2681;
                                float _3606 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                                float _2717 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
                                float _2721 = (0.5 / (((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) + 9.9999999392252902907785028219223e-09) + _2717)) * _2717;
                                float _3617 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2728 = (_2697 * _2674) * (((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 3.1415927410125732421875) / ((_2687 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2698 * _2541.z;
                                frontier_phi_75_pred_1 = _2698 * _2541.y;
                                frontier_phi_75_pred_2 = _2698 * _2541.x;
                                frontier_phi_75_pred_3 = _2728 * _2553.z;
                                frontier_phi_75_pred_4 = _2728 * _2553.y;
                                frontier_phi_75_pred_5 = _2728 * _2553.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2737 = frontier_phi_75_pred;
                            _2736 = frontier_phi_75_pred_1;
                            _2735 = frontier_phi_75_pred_2;
                            _2734 = frontier_phi_75_pred_3;
                            _2733 = frontier_phi_75_pred_4;
                            _2732 = frontier_phi_75_pred_5;
                            _2483 = _2735 + _2496;
                            _2484 = _2736 + _2497;
                            _2485 = _2737 + _2498;
                            _2480 = _2732 + _2493;
                            _2481 = _2733 + _2494;
                            _2482 = _2734 + _2495;
                            if (_2500 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2493 = _2480;
                                _2494 = _2481;
                                _2495 = _2482;
                                _2496 = _2483;
                                _2497 = _2484;
                                _2498 = _2485;
                                _2499 = _2500;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2485;
                        frontier_phi_69_pred_1 = _2484;
                        frontier_phi_69_pred_2 = _2483;
                        frontier_phi_69_pred_3 = _2482;
                        frontier_phi_69_pred_4 = _2481;
                        frontier_phi_69_pred_5 = _2480;
                    }
                    _2205 = frontier_phi_69_pred;
                    _2203 = frontier_phi_69_pred_1;
                    _2201 = frontier_phi_69_pred_2;
                    _2199 = frontier_phi_69_pred_3;
                    _2197 = frontier_phi_69_pred_4;
                    _2195 = frontier_phi_69_pred_5;
                    uint _2337 = _2336 + 1u;
                    if (_2337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2330 = _2195;
                        _2331 = _2197;
                        _2332 = _2199;
                        _2333 = _2201;
                        _2334 = _2203;
                        _2335 = _2205;
                        _2336 = _2337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2205;
                frontier_phi_57_58_ladder_1 = _2203;
                frontier_phi_57_58_ladder_2 = _2201;
                frontier_phi_57_58_ladder_3 = _2199;
                frontier_phi_57_58_ladder_4 = _2197;
                frontier_phi_57_58_ladder_5 = _2195;
            }
            else
            {
                frontier_phi_57_58_ladder = _2082;
                frontier_phi_57_58_ladder_1 = _2080;
                frontier_phi_57_58_ladder_2 = _2078;
                frontier_phi_57_58_ladder_3 = _2076;
                frontier_phi_57_58_ladder_4 = _2074;
                frontier_phi_57_58_ladder_5 = _2072;
            }
            _2194 = frontier_phi_57_58_ladder_5;
            _2196 = frontier_phi_57_58_ladder_4;
            _2198 = frontier_phi_57_58_ladder_3;
            _2200 = frontier_phi_57_58_ladder_2;
            _2202 = frontier_phi_57_58_ladder_1;
            _2204 = frontier_phi_57_58_ladder;
        }
        float _2209 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1955 = (_2209 * _2200) + _1519;
        _1957 = (_2209 * _2202) + _1521;
        _1959 = (_2209 * _2204) + _1523;
        _1961 = ((_2194 * 0.039999999105930328369140625) * _2209) + _1768;
        _1963 = ((_2196 * 0.039999999105930328369140625) * _2209) + _1770;
        _1965 = ((_2198 * 0.039999999105930328369140625) * _2209) + _1772;
    }
    else
    {
        _1955 = _1519;
        _1957 = _1521;
        _1959 = _1523;
        _1961 = _1768;
        _1963 = _1770;
        _1965 = _1772;
    }
    uint _1971 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _1977 = (_208.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].x;
    float _1978 = (_208.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].y;
    float _1979 = (_208.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1971].z;
    float _3633 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3644 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3655 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _1996 = (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1955 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _376))) + ((_1961 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + _1977;
    float _1998 = (_1978 + ((_1963 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1957 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _376)));
    float _2000 = (_1979 + ((_1965 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1959 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _376)));
    float _3681 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2013 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    uint _2014 = _350 + 6u;
    float _2022 = _309 / cbSceneParam._m0[86u].x;
    float _2023 = _310 / cbSceneParam._m0[86u].y;
    vec4 _2037 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2022, _2023, (log2((isnan(cbSceneParam._m0[77u].w) ? _242 : (isnan(_242) ? cbSceneParam._m0[77u].w : min(_242, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2039 = _2037.x;
    float _2040 = _2037.y;
    float _2041 = _2037.z;
    float _2042 = _2037.w;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    if (_242 > cbSceneParam._m0[78u].w)
    {
        float _2097 = isnan(_242) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _242 : min(cbSceneParam._m0[80u].w, _242));
        float _2098 = _2097 / _242;
        float _2109 = _2098 * _294;
        float _2110 = _295 * _2098;
        float _2111 = (-0.0) - _2110;
        float _2112 = _2098 * _296;
        float _2114 = (cbSceneParam._m0[77u].w * _2111) / _2097;
        float _2115 = _2114 + cbSceneParam._m0[79u].w;
        float _2116 = cbSceneParam._m0[79u].w - _2110;
        float _2122 = sqrt(((_2109 * _2109) + (_2110 * _2110)) + (_2112 * _2112));
        float _2125 = (1.0 - (cbSceneParam._m0[77u].w / _2097)) * _2122;
        float _2130 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2132 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2292;
        if (abs((_2111 - _2114) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2292 = ((((_2115 > 0.0) ? exp2(_2130 * _2115) : (2.0 - exp2(_2132 * _2115))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2125;
        }
        else
        {
            float _2252 = 1.0 / cbSceneParam._m0[80u].x;
            float _2253 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : max(_2115, _2116));
            float _2254 = isnan(_2116) ? _2115 : (isnan(_2115) ? _2116 : min(_2115, _2116));
            float _2263 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : min(_2253, 0.0));
            float _2264 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : min(_2254, 0.0));
            _2292 = ((abs(_2122 / _2111) * cbSceneParam._m0[80u].y) * ((((_2263 - _2264) * 2.0) - ((exp2(_2130 * (isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)))) - exp2(_2130 * (isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))))) * _2252)) - ((exp2(_2132 * _2263) - exp2(_2132 * _2264)) * _2252))) + (_2125 * cbSceneParam._m0[80u].z);
        }
        vec4 _2294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2022, _2023, 1.0), 0.0);
        float _2303 = exp2((_2292 * (-1.44269502162933349609375)) * (1.0 - _2294.w));
        float _2304 = log2(_2303);
        float _2320 = log2(_2042);
        _2134 = (exp2(_2320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].x)) * _2294.x) / cbSceneParam._m0[78u].x)) + _2039;
        _2136 = (exp2(_2320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].y)) * _2294.y) / cbSceneParam._m0[78u].y)) + _2040;
        _2138 = (exp2(_2320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2304 * cbSceneParam._m0[78u].z)) * _2294.z) / cbSceneParam._m0[78u].z)) + _2041;
        _2140 = _2303 * _2042;
    }
    else
    {
        _2134 = _2039;
        _2136 = _2040;
        _2138 = _2041;
        _2140 = _2042;
    }
    float _2152 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2153 = _2152 == 3.0;
    float _2155 = log2(_2140);
    float _2159 = exp2(_2155 * cbSceneParam._m0[78u].x);
    float _2160 = exp2(_2155 * cbSceneParam._m0[78u].y);
    float _2161 = exp2(_2155 * cbSceneParam._m0[78u].z);
    float _2162 = _2159 * (isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)));
    float _2163 = _2160 * (isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)));
    float _2164 = _2161 * (isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)));
    float _2173 = (_2152 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2173 * (_2153 ? _2162 : (_2162 + (cbSceneParam._m0[72u].w * _2134)));
    SV_Target.y = _2173 * (_2153 ? _2163 : (_2163 + (cbSceneParam._m0[72u].w * _2136)));
    SV_Target.z = _2173 * (_2153 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2138)));
    SV_Target.w = cbInstanceData._m0[_2014].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1977) * _2013) * _2159) * _2173;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1978) * _2013) * _2160) * _2173;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1979) * _2013) * _2161) * _2173;
    SV_Target_1.w = cbInstanceData._m0[_2014].w;
}


