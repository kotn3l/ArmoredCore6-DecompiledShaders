#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D M_A_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _767;
float _2994;
float _2995;
float _2996;
float _2997;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(M_A_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    vec4 _214 = texture(sampler2D(M_A_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _226 = _225 * _177;
    float _227 = _225 * _178;
    float _228 = _225 * _179;
    float _3006 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3017 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3028 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    vec4 _314 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _316 = _314.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _446 = sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302));
        float _452 = (cbMatDynParam._m0[5u].x * _446) + cbMatDynParam._m0[5u].y;
        float _3039 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
        float _453 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
        float _457 = (cbMatDynParam._m0[5u].z * _446) + cbMatDynParam._m0[5u].w;
        float _3050 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) - _453)) + _453) < ((_316 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _349 = fma(_228, cbSceneParam._m0[5u].z, fma(_227, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _226));
    float _352 = fma(_228, cbSceneParam._m0[6u].z, fma(_227, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _226));
    float _355 = fma(_228, cbSceneParam._m0[7u].z, fma(_227, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _226));
    uint _368 = uint(roundEven(NORMAL.w)) * 13u;
    uint _370 = _368 + 9u;
    uint _371 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _377 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0)))) * cbInstanceData._m0[_371].x;
    float _378 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0)))) * cbInstanceData._m0[_371].y;
    float _379 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0)))) * cbInstanceData._m0[_371].z;
    float _3061 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
    float _3072 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
    float _3083 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _394 = _391.x * TEXCOORD.z;
    float _395 = dot(vec3(_226, _227, _228), vec3(_307, _308, _309));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _226) - _307;
    float _404 = (_398 * _227) - _308;
    float _405 = (_398 * _228) - _309;
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _766;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _491 = fma(_435, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _427));
        float _495 = fma(_435, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _427));
        float _499 = fma(_435, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _427));
        float _524 = _427 + _226;
        float _525 = _431 + _227;
        float _526 = _435 + _228;
        float _536 = fma(_526, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524)) - _491;
        float _537 = fma(_526, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524)) - _495;
        float _538 = fma(_526, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524)) - _499;
        float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
        float _555 = ((_542 * _536) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_491 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _556 = ((_542 * _537) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_495 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _557 = ((_542 * _538) / cbModelParam._m0[34u].z) + ((((((_499 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _567 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_555, _556, _557), 0.0);
        float _594 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_560.x + (-0.5));
        float _596 = _594 * (_560.y + (-0.5));
        float _597 = _594 * (_560.z + (-0.5));
        float _604 = exp2((_567.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_567.x + (-0.5));
        float _606 = _604 * (_567.y + (-0.5));
        float _607 = _604 * (_567.z + (-0.5));
        float _614 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_574.x + (-0.5));
        float _616 = _614 * (_574.y + (-0.5));
        float _617 = _614 * (_574.z + (-0.5));
        float _624 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_581.x + (-0.5));
        float _626 = _624 * (_581.y + (-0.5));
        float _627 = _624 * (_581.z + (-0.5));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = _595 * 0.5;
        float _632 = _605 * 0.5;
        float _633 = _615 * 0.5;
        float _634 = dot(vec3(_631, _632, _633), vec3(_631, _632, _633));
        float _639 = (_634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_634);
        float _648 = (dot(vec3(_226, _227, _228), vec3(_639 * _631, _639 * _632, _639 * _633)) + 1.0) * 0.5;
        float _3109 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _658 = sqrt(((_632 * _632) + (_631 * _631)) + (_633 * _633)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3120 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _3131 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (_660 + 1.0))) + _665) * _628;
        float _675 = _596 * 0.5;
        float _676 = _606 * 0.5;
        float _677 = _616 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _691 = (dot(vec3(_226, _227, _228), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3142 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _700 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3153 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3164 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0))) * (_702 + 1.0))) + _707) * _629;
        float _717 = _597 * 0.5;
        float _718 = _607 * 0.5;
        float _719 = _617 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _733 = (dot(vec3(_226, _227, _228), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3175 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _742 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3186 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3197 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * (_744 + 1.0))) + _749) * _630;
        _766 = _597;
        _768 = _596;
        _769 = _595;
        _770 = _607;
        _771 = _606;
        _772 = _605;
        _773 = _617;
        _774 = _616;
        _775 = _615;
        _776 = _630;
        _777 = _629;
        _778 = _628;
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
    }
    else
    {
        _766 = _767;
        _768 = _767;
        _769 = _767;
        _770 = _767;
        _771 = _767;
        _772 = _767;
        _773 = _767;
        _774 = _767;
        _775 = _767;
        _776 = _767;
        _777 = _767;
        _778 = _767;
        _779 = 0.0;
        _780 = 0.0;
        _781 = 0.0;
    }
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _810 = fma(_435, cbModelParam._m0[30u].z, fma(_431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _427));
        float _814 = fma(_435, cbModelParam._m0[31u].z, fma(_431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _427));
        float _818 = fma(_435, cbModelParam._m0[32u].z, fma(_431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _427));
        float _841 = _427 + _226;
        float _842 = _431 + _227;
        float _843 = _435 + _228;
        float _853 = fma(_843, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841)) - _810;
        float _854 = fma(_843, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841)) - _814;
        float _855 = fma(_843, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841)) - _818;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_810 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_814 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[35u].z) + ((((((_818 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _909 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_876.x + (-0.5));
        float _911 = _909 * (_876.y + (-0.5));
        float _912 = _909 * (_876.z + (-0.5));
        float _919 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_883.x + (-0.5));
        float _921 = _919 * (_883.y + (-0.5));
        float _922 = _919 * (_883.z + (-0.5));
        float _929 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_890.x + (-0.5));
        float _931 = _929 * (_890.y + (-0.5));
        float _932 = _929 * (_890.z + (-0.5));
        float _939 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_897.x + (-0.5));
        float _941 = _939 * (_897.y + (-0.5));
        float _942 = _939 * (_897.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_226, _227, _228), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3260 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_973 + 1.0))) + _978) * _943;
        float _988 = _911 * 0.5;
        float _989 = _921 * 0.5;
        float _990 = _931 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_226, _227, _228), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3293 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_1015 + 1.0))) + _1020) * _944;
        float _1030 = _912 * 0.5;
        float _1031 = _922 * 0.5;
        float _1032 = _932 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_226, _227, _228), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3304 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3315 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3326 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_1057 + 1.0))) + _1062) * _945;
        _1079 = _912;
        _1080 = _911;
        _1081 = _910;
        _1082 = _922;
        _1083 = _921;
        _1084 = _920;
        _1085 = _932;
        _1086 = _931;
        _1087 = _930;
        _1088 = _945;
        _1089 = _944;
        _1090 = _943;
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _767;
        _1080 = _767;
        _1081 = _767;
        _1082 = _767;
        _1083 = _767;
        _1084 = _767;
        _1085 = _767;
        _1086 = _767;
        _1087 = _767;
        _1088 = _767;
        _1089 = _767;
        _1090 = _767;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _779)) + _779;
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _780)) + _780;
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1126 = fma(_1105, cbSceneParam._m0[89u].z, fma(_1104, cbSceneParam._m0[89u].y, _1103 * cbSceneParam._m0[89u].x));
    float _1129 = fma(_1105, cbSceneParam._m0[90u].z, fma(_1104, cbSceneParam._m0[90u].y, _1103 * cbSceneParam._m0[90u].x));
    float _1132 = fma(_1105, cbSceneParam._m0[91u].z, fma(_1104, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1103));
    float _1147 = _403 * 0.5;
    float _1148 = _404 * 0.5;
    float _1149 = _405 * 0.5;
    float _1150 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1153 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1156 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1190;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1163 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_766, _770, _773, _776));
        float _1167 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_768, _771, _774, _777));
        float _1171 = dot(vec4(_1147, _1148, _1149, 1.0), vec4(_769, _772, _775, _778));
        float _1178 = dot(vec4(cbModelParam._m0[39u]), vec4(_1147, _1148, _1149, 1.0));
        _1190 = dot(vec3(isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1178) ? 0.0 : (isnan(0.0) ? _1178 : max(0.0, _1178))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1190 = 1.0;
    }
    float _1201;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1192 = dot(vec4(cbModelParam._m0[40u]), vec4(_1147, _1148, _1149, 1.0));
        _1201 = dot(vec3(isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1201 = 1.0;
    }
    float _1205 = (_1201 * cbModelParam._m0[1u].x) + (_1190 * (1.0 - cbModelParam._m0[1u].x));
    float _1214 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1296;
    float _1298;
    float _1300;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1263 = fma(_435, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427)) + cbModelParam._m0[13u].w;
        float _1267 = fma(_435, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427)) + cbModelParam._m0[14u].w;
        float _1271 = fma(_435, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427)) + cbModelParam._m0[15u].w;
        float _1274 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _1277 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _1280 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _1306;
        if (_1274 > 0.0)
        {
            _1306 = abs((1.0 - _1263) / _1274);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1263 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1306 = frontier_phi_19_17_ladder;
        }
        float _1535;
        if (_1277 > 0.0)
        {
            _1535 = abs((1.0 - _1267) / _1277);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1267 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1535 = frontier_phi_28_24_ladder;
        }
        float _1727;
        if (_1280 > 0.0)
        {
            _1727 = abs((1.0 - _1271) / _1280);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1271 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1727 = frontier_phi_40_35_ladder;
        }
        float _1729 = isnan(_1535) ? _1306 : (isnan(_1306) ? _1535 : min(_1306, _1535));
        float _1730 = isnan(_1727) ? _1729 : (isnan(_1729) ? _1727 : min(_1729, _1727));
        float _1734 = (_1730 * _1274) + _1263;
        float _1735 = (_1730 * _1277) + _1267;
        float _1736 = (_1730 * _1280) + _1271;
        float _1737 = _1730 * 9.9999997473787516355514526367188e-05;
        float _1739 = (-1.0) - _1737;
        float _1741 = _1737 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1736 > _1741) || ((_1736 < _1739) || ((_1735 > _1741) || ((_1735 < _1739) || ((_1734 < _1739) || (_1734 > _1741))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1736, cbModelParam._m0[9u].z, fma(_1735, cbModelParam._m0[9u].y, _1734 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1736, cbModelParam._m0[10u].z, fma(_1735, cbModelParam._m0[10u].y, _1734 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1736, cbModelParam._m0[11u].z, fma(_1735, cbModelParam._m0[11u].y, _1734 * cbModelParam._m0[11u].x))), _1214);
            frontier_phi_18_40_ladder = _1833.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1833.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1833.x * cbModelParam._m0[1u].y;
        }
        _1296 = frontier_phi_18_40_ladder_2;
        _1298 = frontier_phi_18_40_ladder_1;
        _1300 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _1214);
        _1296 = _1284.x * cbModelParam._m0[1u].y;
        _1298 = _1284.y * cbModelParam._m0[1u].y;
        _1300 = _1284.z * cbModelParam._m0[1u].y;
    }
    float _1303 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1360 = fma(_435, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427)) + cbModelParam._m0[21u].w;
        float _1364 = fma(_435, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427)) + cbModelParam._m0[22u].w;
        float _1368 = fma(_435, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427)) + cbModelParam._m0[23u].w;
        float _1371 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1374 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1377 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1540;
        if (_1371 > 0.0)
        {
            _1540 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1540 = frontier_phi_30_26_ladder;
        }
        float _1754;
        if (_1374 > 0.0)
        {
            _1754 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1754 = frontier_phi_42_37_ladder;
        }
        float _1905;
        if (_1377 > 0.0)
        {
            _1905 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1905 = frontier_phi_51_48_ladder;
        }
        float _1907 = isnan(_1754) ? _1540 : (isnan(_1540) ? _1754 : min(_1540, _1754));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1371) + _1360;
        float _1913 = (_1908 * _1374) + _1364;
        float _1914 = (_1908 * _1377) + _1368;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1915;
        float _1918 = _1915 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1914 > _1918) || ((_1914 < _1916) || ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 < _1916) || (_1912 > _1918))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1914, cbModelParam._m0[17u].z, fma(_1913, cbModelParam._m0[17u].y, _1912 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1914, cbModelParam._m0[18u].z, fma(_1913, cbModelParam._m0[18u].y, _1912 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1914, cbModelParam._m0[19u].z, fma(_1913, cbModelParam._m0[19u].y, _1912 * cbModelParam._m0[19u].x))), _1303);
            frontier_phi_27_51_ladder = _2141.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2141.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2141.x * cbModelParam._m0[1u].z;
        }
        _1396 = frontier_phi_27_51_ladder_2;
        _1398 = frontier_phi_27_51_ladder_1;
        _1400 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _1303);
        _1396 = _1380.x * cbModelParam._m0[1u].z;
        _1398 = _1380.y * cbModelParam._m0[1u].z;
        _1400 = _1380.z * cbModelParam._m0[1u].z;
    }
    float _1412 = _394 * 0.01200000010430812835693359375;
    float _1414 = _1412 * ((cbModelParam._m0[1u].w * (_1396 - _1296)) + _1296);
    float _1415 = _1412 * ((cbModelParam._m0[1u].w * (_1398 - _1298)) + _1298);
    float _1416 = _1412 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, _1414 * cbSceneParam._m0[91u].x));
    vec4 _1433 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_328, _329));
    float _1435 = _1433.w;
    float _1447 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1435);
    float _1448 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1435);
    float _1449 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1435);
    uvec4 _1453 = floatBitsToUint(cbInstanceData._m0[_368 + 5u]);
    uint _1455 = _1453.x * 14u;
    uint _1456 = _1455 + 13u;
    float _1463 = _394 + (-1.0);
    float _1469 = (cbLight._m0[_1456].x * _1463) + 1.0;
    float _1470 = (cbLight._m0[_1456].y * _1463) + 1.0;
    float _1471 = (cbLight._m0[_1456].z * _1463) + 1.0;
    float _1472 = (cbLight._m0[_1456].w * _1463) + 1.0;
    uint _1473 = _1455 + 5u;
    float _1479 = isnan(1.0) ? _1470 : (isnan(_1470) ? 1.0 : min(_1470, 1.0));
    uint _1483 = _1455 + 4u;
    float _1493 = isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0));
    uint _1497 = _1455 | 1u;
    float _1508 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_226, _227, _228));
    float _1511 = dot(vec3(cbLight._m0[_1497].xyz), vec3(_226, _227, _228));
    float _3462 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _3473 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _1516 = (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.3183098733425140380859375;
    float _1518 = (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.3183098733425140380859375;
    float _1525 = ((cbLight._m0[_1473].x * _1479) * _1518) + (((cbLight._m0[_1483].x * _1447) * _1493) * _1516);
    float _1526 = ((_1479 * cbLight._m0[_1473].y) * _1518) + (((cbLight._m0[_1483].y * _1448) * _1493) * _1516);
    float _1527 = ((_1479 * cbLight._m0[_1473].z) * _1518) + (((cbLight._m0[_1483].z * _1449) * _1493) * _1516);
    uvec4 _1532 = floatBitsToUint(cbLight._m0[_1455 + 12u]);
    bool _1534 = _1532.x == 0u;
    float _1545;
    float _1547;
    float _1549;
    if (_1534)
    {
        _1545 = _1525;
        _1547 = _1526;
        _1549 = _1527;
    }
    else
    {
        uint _1553 = _1455 + 6u;
        float _1569 = (dot(vec3(cbLight._m0[_1455 + 2u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1570 = _1569 * _1569;
        float _3484 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1572 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
        _1545 = (((cbLight._m0[_1553].x * 0.3183098733425140380859375) * _1571) * _1572) + _1525;
        _1547 = (((cbLight._m0[_1553].y * 0.3183098733425140380859375) * _1571) * _1572) + _1526;
        _1549 = (((cbLight._m0[_1553].z * 0.3183098733425140380859375) * _1571) * _1572) + _1527;
    }
    bool _1552 = _1532.y == 0u;
    float _1590;
    float _1592;
    float _1594;
    if (_1552)
    {
        _1590 = _1545;
        _1592 = _1547;
        _1594 = _1549;
    }
    else
    {
        uint _1698 = _1455 + 7u;
        float _1714 = (dot(vec3(cbLight._m0[_1455 + 3u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1715 = _1714 * _1714;
        float _3500 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1717 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1590 = (((cbLight._m0[_1698].x * 0.3183098733425140380859375) * _1716) * _1717) + _1545;
        _1592 = (((cbLight._m0[_1698].y * 0.3183098733425140380859375) * _1716) * _1717) + _1547;
        _1594 = (((cbLight._m0[_1698].z * 0.3183098733425140380859375) * _1716) * _1717) + _1549;
    }
    uint _1596 = _1455 + 8u;
    float _1602 = cbLight._m0[_1455].x + _307;
    float _1603 = cbLight._m0[_1455].y + _308;
    float _1604 = cbLight._m0[_1455].z + _309;
    float _1608 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
    float _1612 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1455].xyz));
    float _3516 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1615 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _1616 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _1617 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_1602 * _1608, _1603 * _1608, _1604 * _1608));
    float _3538 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1628 = (exp2(log2(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1634 = (0.5 / ((_1615 + 9.9999999392252902907785028219223e-09) + _1616)) * _1615;
    float _3549 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1636 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.31831014156341552734375;
    uint _1650 = _1455 + 9u;
    float _1656 = cbLight._m0[_1497].x + _307;
    float _1657 = cbLight._m0[_1497].y + _308;
    float _1658 = cbLight._m0[_1497].z + _309;
    float _1662 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
    float _1666 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1497].xyz));
    float _3560 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1669 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _1670 = dot(vec3(cbLight._m0[_1497].xyz), vec3(_1656 * _1662, _1657 * _1662, _1658 * _1662));
    float _3571 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1679 = (exp2(log2(1.0 - (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1683 = (0.5 / ((_1669 + 9.9999999392252902907785028219223e-09) + _1616)) * _1669;
    float _3582 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1685 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.31831014156341552734375;
    float _1695 = (((_1679 * cbLight._m0[_1650].x) * _1685) * _1479) + ((((cbLight._m0[_1596].x * _1447) * _1628) * _1636) * _1493);
    float _1696 = (((_1679 * cbLight._m0[_1650].y) * _1685) * _1479) + ((((cbLight._m0[_1596].y * _1448) * _1628) * _1636) * _1493);
    float _1697 = (((_1679 * cbLight._m0[_1650].z) * _1685) * _1479) + ((((cbLight._m0[_1596].z * _1449) * _1628) * _1636) * _1493);
    float _1759;
    float _1761;
    float _1763;
    if (_1534)
    {
        _1759 = _1695;
        _1761 = _1696;
        _1763 = _1697;
    }
    else
    {
        uint _1765 = _1455 + 10u;
        uint _1771 = _1455 + 2u;
        float _1777 = cbLight._m0[_1771].x + _307;
        float _1778 = cbLight._m0[_1771].y + _308;
        float _1779 = cbLight._m0[_1771].z + _309;
        float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
        float _1787 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1771].xyz));
        float _3593 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1790 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1791 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1777 * _1783, _1778 * _1783, _1779 * _1783));
        float _3604 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1804 = (0.5 / ((_1790 + 9.9999999392252902907785028219223e-09) + _1616)) * _1790;
        float _3615 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1806 = (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.31831014156341552734375;
        float _1807 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
        _1759 = (((_1800 * cbLight._m0[_1765].x) * _1806) * _1807) + _1695;
        _1761 = (((_1800 * cbLight._m0[_1765].y) * _1806) * _1807) + _1696;
        _1763 = (((_1800 * cbLight._m0[_1765].z) * _1806) * _1807) + _1697;
    }
    float _1842;
    float _1844;
    float _1846;
    if (_1552)
    {
        _1842 = _1759;
        _1844 = _1761;
        _1846 = _1763;
    }
    else
    {
        uint _1853 = _1455 + 11u;
        uint _1859 = _1455 + 3u;
        float _1865 = cbLight._m0[_1859].x + _307;
        float _1866 = cbLight._m0[_1859].y + _308;
        float _1867 = cbLight._m0[_1859].z + _309;
        float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
        float _1875 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1859].xyz));
        float _3631 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1878 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1879 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_1865 * _1871, _1866 * _1871, _1867 * _1871));
        float _3642 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1892 = (0.5 / ((_1878 + 9.9999999392252902907785028219223e-09) + _1616)) * _1878;
        float _3653 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1894 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.31831014156341552734375;
        float _1895 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1842 = (((_1888 * cbLight._m0[_1853].x) * _1894) * _1895) + _1759;
        _1844 = (((_1888 * cbLight._m0[_1853].y) * _1894) * _1895) + _1761;
        _1846 = (((_1888 * cbLight._m0[_1853].z) * _1894) * _1895) + _1763;
    }
    float _2029;
    float _2031;
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    if (_1453.y == 0u)
    {
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1970;
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1970;
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1970;
        uvec4 _1985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1986 = _1985.x;
        uint _1997 = uint((float(_1985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _1986))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _1986)));
        float _2007 = (log2(_1973 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2008 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        uint _2011 = uint(isnan(14.0) ? _2008 : (isnan(_2008) ? 14.0 : min(_2008, 14.0)));
        uvec4 _2016 = texelFetch(g_lightClusterGridBuffer, int(((_2011 << 2u) + (_1997 << 6u)) >> 2u));
        uint _2017 = _2016.x;
        uint _2018 = _1985.z;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        if (((((1u << ((_2018 >> 4u) & 15u)) + 4294967295u) & _2017) == 0u) || ((_2018 & 240u) == 0u))
        {
            _2146 = 0.0;
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
        }
        else
        {
            float _2147;
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            uint _2312 = 0u;
            uint _2321;
            bool _2322;
            for (;;)
            {
                _2321 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2312 << 2u)) >> 2u)).x;
                _2322 = _2321 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2322)
                {
                    frontier_phi_68_pred = _2308;
                    frontier_phi_68_pred_1 = _2311;
                    frontier_phi_68_pred_2 = _2310;
                    frontier_phi_68_pred_3 = _2309;
                    frontier_phi_68_pred_4 = _2307;
                    frontier_phi_68_pred_5 = _2306;
                }
                else
                {
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    uint _2457;
                    _2451 = _2306;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2309;
                    _2455 = _2310;
                    _2456 = _2311;
                    _2457 = _2321;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    for (;;)
                    {
                        uint _2461 = uint(findLSB(_2457)) + (_2312 << 5u);
                        uint _2458 = (_2457 + 4294967295u) & _2457;
                        uint _2463 = _2461 * 48u;
                        vec4 _2477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2463)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 3u)).x));
                        uint _2483 = (_2461 * 48u) + 4u;
                        vec4 _2496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2483)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 3u)).x));
                        uint _2502 = (_2461 * 48u) + 8u;
                        vec3 _2513 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2502)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 2u)).x));
                        float _2517 = _2477.x - _1971;
                        float _2518 = _2477.y - _1972;
                        float _2519 = _2477.z - _1973;
                        float _2520 = dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519));
                        float _2523 = inversesqrt(_2520);
                        float _2532 = 1.0 - (_2520 * _2477.w);
                        float _3679 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
                        float _2533 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
                        float _2534 = sqrt(_2520) * _2496.w;
                        float _2537 = 1.39999997615814208984375 / (_2534 + 1.39999997615814208984375);
                        float _2538 = _2537 * _2537;
                        float _2541 = ((1.0 - _2538) * dot(vec3(_349, _352, _355), vec3(_2523 * _2517, _2523 * _2518, _2523 * _2519))) + _2538;
                        float _2544 = _2534 * _2534;
                        float _2548 = ((isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))) * _2533) / ((_2544 * 0.699999988079071044921875) + 1.0);
                        float _2552 = (-0.0) - _1971;
                        float _2553 = (-0.0) - _1972;
                        float _2554 = (-0.0) - _1973;
                        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
                        float _2562 = dot(vec3(_349, _352, _355), vec3(_2558 * _2552, _2558 * _2553, _2558 * _2554));
                        float _3695 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _3706 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _2566 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                        float _2570 = (0.5 / (((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) + 9.9999999392252902907785028219223e-09) + _2566)) * _2566;
                        float _3717 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2579 = (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 3.1415927410125732421875) / ((_2544 * 2.1991131305694580078125) + 3.141590118408203125)) * _2533;
                        _2381 = (_2548 * _2496.x) + _2454;
                        _2382 = (_2548 * _2496.y) + _2455;
                        _2383 = (_2548 * _2496.z) + _2456;
                        _2378 = (_2579 * _2513.x) + _2451;
                        _2379 = (_2579 * _2513.y) + _2452;
                        _2380 = (_2579 * _2513.z) + _2453;
                        if (_2458 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2451 = _2378;
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2381;
                            _2455 = _2382;
                            _2456 = _2383;
                            _2457 = _2458;
                        }
                    }
                    frontier_phi_68_pred = _2380;
                    frontier_phi_68_pred_1 = _2383;
                    frontier_phi_68_pred_2 = _2382;
                    frontier_phi_68_pred_3 = _2381;
                    frontier_phi_68_pred_4 = _2379;
                    frontier_phi_68_pred_5 = _2378;
                }
                _2151 = frontier_phi_68_pred;
                _2157 = frontier_phi_68_pred_1;
                _2155 = frontier_phi_68_pred_2;
                _2153 = frontier_phi_68_pred_3;
                _2149 = frontier_phi_68_pred_4;
                _2147 = frontier_phi_68_pred_5;
                uint _2313 = _2312 + 1u;
                if (_2313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2306 = _2147;
                    _2307 = _2149;
                    _2308 = _2151;
                    _2309 = _2153;
                    _2310 = _2155;
                    _2311 = _2157;
                    _2312 = _2313;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2146 = _2147;
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
        }
        uvec4 _2160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2161 = _2160.z;
        uint _2163 = (_2161 >> 8u) & 15u;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        if (((4294967295u << _2163) & _2017) == 0u)
        {
            _2277 = _2146;
            _2279 = _2148;
            _2281 = _2150;
            _2283 = _2152;
            _2285 = _2154;
            _2287 = _2156;
        }
        else
        {
            float _2302 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2163 < ((_2161 >> 12u) & 15u))
            {
                float _2278;
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2434 = _2146;
                float _2435 = _2148;
                float _2436 = _2150;
                float _2437 = _2152;
                float _2438 = _2154;
                float _2439 = _2156;
                uint _2440 = _2163;
                uint _2449;
                bool _2450;
                for (;;)
                {
                    _2449 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2440 << 2u)) >> 2u)).x;
                    _2450 = _2449 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2450)
                    {
                        frontier_phi_79_pred = _2439;
                        frontier_phi_79_pred_1 = _2438;
                        frontier_phi_79_pred_2 = _2437;
                        frontier_phi_79_pred_3 = _2436;
                        frontier_phi_79_pred_4 = _2435;
                        frontier_phi_79_pred_5 = _2434;
                    }
                    else
                    {
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2606 = _2434;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        float _2609 = _2437;
                        float _2610 = _2438;
                        float _2611 = _2439;
                        uint _2612 = _2449;
                        uint _2613;
                        vec4 _2638;
                        float _2639;
                        vec4 _2654;
                        vec3 _2666;
                        vec4 _2682;
                        vec4 _2698;
                        float _2745;
                        bool _2746;
                        for (;;)
                        {
                            uint _2623 = ((_2440 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2612));
                            _2613 = (_2612 + 4294967295u) & _2612;
                            uint _2625 = _2623 * 40u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            _2639 = _2638.w;
                            uint _2641 = (_2623 * 40u) + 4u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2656 = (_2623 * 40u) + 8u;
                            _2666 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x));
                            uint _2669 = (_2623 * 40u) + 16u;
                            _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            uint _2685 = (_2623 * 40u) + 20u;
                            _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            uint _2701 = (_2623 * 40u) + 24u;
                            vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2720 = (_2623 * 40u) + 28u;
                            vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            _2745 = fma(_1973, _2733.z, fma(_1972, _2733.y, _2733.x * _1971)) + _2733.w;
                            _2746 = !((fma(_1973, _2714.z, fma(_1972, _2714.y, _2714.x * _1971)) + _2714.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2746)
                            {
                                float _2773 = _2638.x - _1971;
                                float _2774 = _2638.y - _1972;
                                float _2775 = _2638.z - _1973;
                                float _2776 = dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775));
                                float _2779 = inversesqrt(_2776);
                                float _2780 = _2779 * _2773;
                                float _2781 = _2779 * _2774;
                                float _2782 = _2779 * _2775;
                                float _2786 = 1.0 - (_2776 / (_2639 * _2639));
                                float _3728 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                                float _2787 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                                float _2791 = sqrt(_2776) * _2654.w;
                                float _2793 = 1.39999997615814208984375 / (_2791 + 1.39999997615814208984375);
                                float _2794 = _2793 * _2793;
                                float _2795 = 1.0 - _2794;
                                float _2797 = (_2795 * dot(vec3(_2780, _2781, _2782), vec3(_349, _352, _355))) + _2794;
                                float _2800 = _2791 * _2791;
                                float _2804 = (fma(_1973, _2682.z, fma(_1972, _2682.y, _2682.x * _1971)) + _2682.w) / _2745;
                                float _2805 = (fma(_1973, _2698.z, fma(_1972, _2698.y, _2698.x * _1971)) + _2698.w) / _2745;
                                float _2809 = 1.0 - dot(vec2(_2804, _2805), vec2(_2804, _2805));
                                float _3744 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                                float _2810 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                                float _2811 = _2810 * (((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2787) / ((_2800 * 0.699999988079071044921875) + 1.0));
                                float _2821 = dot(vec3(_349, _352, _355), vec3((-0.0) - (_1971 * _2302), (-0.0) - (_1972 * _2302), (-0.0) - (_1973 * _2302)));
                                float _3755 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                                float _2829 = (_2795 * dot(vec3(_349, _352, _355), vec3(_2780, _2781, _2782))) + _2794;
                                float _3766 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                                float _2830 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                                float _2834 = (0.5 / (((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) + 9.9999999392252902907785028219223e-09) + _2830)) * _2830;
                                float _3777 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                                float _2841 = (_2810 * _2787) * (((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 3.1415927410125732421875) / ((_2800 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2811 * _2654.z;
                                frontier_phi_85_pred_1 = _2811 * _2654.y;
                                frontier_phi_85_pred_2 = _2811 * _2654.x;
                                frontier_phi_85_pred_3 = _2841 * _2666.z;
                                frontier_phi_85_pred_4 = _2841 * _2666.y;
                                frontier_phi_85_pred_5 = _2841 * _2666.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2850 = frontier_phi_85_pred;
                            _2849 = frontier_phi_85_pred_1;
                            _2848 = frontier_phi_85_pred_2;
                            _2847 = frontier_phi_85_pred_3;
                            _2846 = frontier_phi_85_pred_4;
                            _2845 = frontier_phi_85_pred_5;
                            _2596 = _2848 + _2609;
                            _2597 = _2849 + _2610;
                            _2598 = _2850 + _2611;
                            _2593 = _2845 + _2606;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            if (_2613 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2613;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2598;
                        frontier_phi_79_pred_1 = _2597;
                        frontier_phi_79_pred_2 = _2596;
                        frontier_phi_79_pred_3 = _2595;
                        frontier_phi_79_pred_4 = _2594;
                        frontier_phi_79_pred_5 = _2593;
                    }
                    _2288 = frontier_phi_79_pred;
                    _2286 = frontier_phi_79_pred_1;
                    _2284 = frontier_phi_79_pred_2;
                    _2282 = frontier_phi_79_pred_3;
                    _2280 = frontier_phi_79_pred_4;
                    _2278 = frontier_phi_79_pred_5;
                    uint _2441 = _2440 + 1u;
                    if (_2441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2434 = _2278;
                        _2435 = _2280;
                        _2436 = _2282;
                        _2437 = _2284;
                        _2438 = _2286;
                        _2439 = _2288;
                        _2440 = _2441;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2284;
                frontier_phi_60_61_ladder_1 = _2288;
                frontier_phi_60_61_ladder_2 = _2286;
                frontier_phi_60_61_ladder_3 = _2282;
                frontier_phi_60_61_ladder_4 = _2280;
                frontier_phi_60_61_ladder_5 = _2278;
            }
            else
            {
                frontier_phi_60_61_ladder = _2152;
                frontier_phi_60_61_ladder_1 = _2156;
                frontier_phi_60_61_ladder_2 = _2154;
                frontier_phi_60_61_ladder_3 = _2150;
                frontier_phi_60_61_ladder_4 = _2148;
                frontier_phi_60_61_ladder_5 = _2146;
            }
            _2277 = frontier_phi_60_61_ladder_5;
            _2279 = frontier_phi_60_61_ladder_4;
            _2281 = frontier_phi_60_61_ladder_3;
            _2283 = frontier_phi_60_61_ladder;
            _2285 = frontier_phi_60_61_ladder_2;
            _2287 = frontier_phi_60_61_ladder_1;
        }
        float _2292 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _2029 = (_2292 * _2283) + _1590;
        _2031 = (_2292 * _2285) + _1592;
        _2033 = (_2292 * _2287) + _1594;
        _2035 = ((_2277 * 0.039999999105930328369140625) * _2292) + _1842;
        _2037 = ((_2279 * 0.039999999105930328369140625) * _2292) + _1844;
        _2039 = ((_2281 * 0.039999999105930328369140625) * _2292) + _1846;
    }
    else
    {
        _2029 = _1590;
        _2031 = _1592;
        _2033 = _1594;
        _2035 = _1842;
        _2037 = _1844;
        _2039 = _1846;
    }
    uint _2045 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _2051 = (_214.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2045].x;
    float _2052 = (_214.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2045].y;
    float _2053 = (_214.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2045].z;
    float _3793 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3804 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3815 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2070 = (((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_2029 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _394))) + ((_2035 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + _2051;
    float _2072 = (_2052 + ((_2037 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_2031 + ((isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))) * _394)));
    float _2074 = (_2053 + ((_2039 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1205)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_2033 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _394)));
    float _2075 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2076 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2083 = cbMtdParam._m0[2u].x * _2051;
    float _2084 = cbMtdParam._m0[2u].y * _2052;
    float _2085 = cbMtdParam._m0[2u].z * _2053;
    float _3841 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2087 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    uint _2088 = _368 + 6u;
    float _2096 = _328 / cbSceneParam._m0[86u].x;
    float _2097 = _329 / cbSceneParam._m0[86u].y;
    vec4 _2111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2113 = _2111.x;
    float _2114 = _2111.y;
    float _2115 = _2111.z;
    float _2116 = _2111.w;
    float _2208;
    float _2210;
    float _2212;
    float _2214;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _2171 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _2172 = _2171 / _248;
        float _2183 = _2172 * _300;
        float _2184 = _301 * _2172;
        float _2185 = (-0.0) - _2184;
        float _2186 = _2172 * _302;
        float _2188 = (cbSceneParam._m0[77u].w * _2185) / _2171;
        float _2189 = _2188 + cbSceneParam._m0[79u].w;
        float _2190 = cbSceneParam._m0[79u].w - _2184;
        float _2196 = sqrt(((_2183 * _2183) + (_2184 * _2184)) + (_2186 * _2186));
        float _2199 = (1.0 - (cbSceneParam._m0[77u].w / _2171)) * _2196;
        float _2204 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2206 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2391;
        if (abs((_2185 - _2188) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2391 = ((((_2189 > 0.0) ? exp2(_2204 * _2189) : (2.0 - exp2(_2206 * _2189))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2199;
        }
        else
        {
            float _2335 = 1.0 / cbSceneParam._m0[80u].x;
            float _2336 = isnan(_2190) ? _2189 : (isnan(_2189) ? _2190 : max(_2189, _2190));
            float _2337 = isnan(_2190) ? _2189 : (isnan(_2189) ? _2190 : min(_2189, _2190));
            float _2346 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : min(_2336, 0.0));
            float _2347 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : min(_2337, 0.0));
            _2391 = ((abs(_2196 / _2185) * cbSceneParam._m0[80u].y) * ((((_2346 - _2347) * 2.0) - ((exp2(_2204 * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0)))) - exp2(_2204 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0))))) * _2335)) - ((exp2(_2206 * _2346) - exp2(_2206 * _2347)) * _2335))) + (_2199 * cbSceneParam._m0[80u].z);
        }
        vec4 _2393 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, 1.0), 0.0);
        float _2402 = exp2((_2391 * (-1.44269502162933349609375)) * (1.0 - _2393.w));
        float _2403 = log2(_2402);
        float _2419 = log2(_2116);
        _2208 = (exp2(_2419 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].x)) * _2393.x) / cbSceneParam._m0[78u].x)) + _2113;
        _2210 = (exp2(_2419 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].y)) * _2393.y) / cbSceneParam._m0[78u].y)) + _2114;
        _2212 = (exp2(_2419 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].z)) * _2393.z) / cbSceneParam._m0[78u].z)) + _2115;
        _2214 = _2402 * _2116;
    }
    else
    {
        _2208 = _2113;
        _2210 = _2114;
        _2212 = _2115;
        _2214 = _2116;
    }
    bool _2429;
    vec4 _2224;
    vec4 _2247;
    float _2249;
    float _2253;
    float _2254;
    float _2255;
    float _2258;
    float _2261;
    float _2264;
    float _2265;
    bool _2276;
    for (;;)
    {
        _2224 = cbMatDynParam._m0[0u];
        float _2226 = roundEven(_2224.y);
        bool _2227 = _2226 == 3.0;
        float _2229 = log2(_2214);
        float _2233 = exp2(_2229 * cbSceneParam._m0[78u].x);
        float _2234 = exp2(_2229 * cbSceneParam._m0[78u].y);
        float _2235 = exp2(_2229 * cbSceneParam._m0[78u].z);
        float _2236 = _2233 * _2075;
        float _2237 = _2234 * _2076;
        float _2238 = _2235 * _2077;
        float _2245 = _316 + (-0.5);
        _2247 = cbMtdParam._m0[1u];
        _2249 = _2247.y * _2245;
        float _2252 = (_2226 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2253 = _2252 * (_2227 ? _2236 : (_2236 + (cbSceneParam._m0[72u].w * _2208)));
        _2254 = _2252 * (_2227 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2210)));
        _2255 = _2252 * (_2227 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2212)));
        _2258 = ((_2083 * _2087) * _2233) * _2252;
        _2261 = ((_2084 * _2087) * _2234) * _2252;
        _2264 = ((_2085 * _2087) * _2235) * _2252;
        _2265 = _2245 * 0.999000012874603271484375;
        _2276 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2276)
        {
            if ((cbInstanceData._m0[_368 + 7u].x + _2265) < 0.5)
            {
                _2429 = true;
                break;
            }
        }
        uint _2370 = _370 + uint(_2224.w);
        if ((cbInstanceData._m0[_2370].w < 1.0) && ((cbInstanceData._m0[_2370].w + _2265) < 0.5))
        {
            _2429 = true;
            break;
        }
        if ((_2249 + 1.0) < _2247.x)
        {
            _2429 = true;
            break;
        }
        _2429 = false;
        break;
    }
    float _2584;
    if (_2429)
    {
        discard_state = true;
        _2584 = 0.0;
    }
    else
    {
        _2584 = cbInstanceData._m0[_2088].w;
    }
    SV_Target.x = _2253;
    SV_Target.y = _2254;
    SV_Target.z = _2255;
    SV_Target.w = _2584;
    SV_Target_1.x = _2258;
    SV_Target_1.y = _2261;
    SV_Target_1.z = _2264;
    SV_Target_1.w = cbInstanceData._m0[_2088].w;
    discard_exit();
}


