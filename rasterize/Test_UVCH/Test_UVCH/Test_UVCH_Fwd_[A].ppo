#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _991;
float _3359;
float _3360;
float _3361;
float _3362;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    vec4 _258 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _315 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3371 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _323 = (_316 * ((_285.x * cbMtdParam._m0[10u].x) - _264)) + _264;
    float _324 = (_316 * ((_285.y * cbMtdParam._m0[10u].y) - _265)) + _265;
    float _325 = (_316 * ((_285.z * cbMtdParam._m0[10u].z) - _266)) + _266;
    vec4 _338 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    vec4 _376 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _389 = ((_376.z - _364) * _316) + _364;
    float _392 = ((((_376.x - _362) * _316) + _362) * 2.0) + (-1.0);
    float _393 = ((((_376.y - _363) * _316) + _363) * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3382 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))));
    float _404 = (((_338.z - _389) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _389;
    float _410 = ((((_338.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _392;
    float _411 = ((((_338.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _393;
    float _414 = fma(_399, _231, fma(_411, _223 * TANGENT.x, (_209 * _201) * _410));
    float _417 = fma(_399, _232, fma(_411, _223 * TANGENT.y, (_209 * _202) * _410));
    float _420 = fma(_399, _233, fma(_411, _223 * TANGENT.z, (_209 * _203) * _410));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _3393 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _428 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3415 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3426 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _447 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    vec4 _512 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _514 = _512.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _671 = sqrt(((_498 * _498) + (_499 * _499)) + (_500 * _500));
        float _677 = (cbMatDynParam._m0[5u].x * _671) + cbMatDynParam._m0[5u].y;
        float _3437 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _682 = (cbMatDynParam._m0[5u].z * _671) + cbMatDynParam._m0[5u].w;
        float _3448 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) - _678)) + _678) < ((_514 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _526 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _527 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _546 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _549 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _552 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _565 = uint(roundEven(NORMAL.w)) * 13u;
    uint _567 = _565 + 9u;
    uint _568 = _567 + uint(cbMatDynParam._m0[0u].w);
    float _574 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) * cbInstanceData._m0[_568].x;
    float _575 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_568].y;
    float _576 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_568].z;
    float _3459 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _588 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _526, cbSceneParam._m0[86u].y * _527));
    float _591 = _588.x * TEXCOORD_5.w;
    float _592 = dot(vec3(_425, _426, _427), vec3(_505, _506, _507));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _425) - _505;
    float _600 = (_595 * _426) - _506;
    float _601 = (_595 * _427) - _507;
    float _605 = abs(dot(vec3(_505, _506, _507), vec3(_425, _426, _427)));
    float _3492 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_428);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _715 = fma(_660, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652));
        float _719 = fma(_660, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652));
        float _723 = fma(_660, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652));
        float _748 = _652 + _425;
        float _749 = _656 + _426;
        float _750 = _660 + _427;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _715;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _719;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _723;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_715 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_719 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_723 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_425, _426, _427), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3540 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_425, _426, _427), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3573 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_425, _426, _427), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3606 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _992 = _820;
        _993 = _819;
        _994 = _831;
        _995 = _830;
        _996 = _829;
        _997 = _841;
        _998 = _840;
        _999 = _839;
        _1000 = _854;
        _1001 = _853;
        _1002 = _852;
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_660, cbModelParam._m0[30u].z, fma(_656, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _652));
        float _1038 = fma(_660, cbModelParam._m0[31u].z, fma(_656, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _652));
        float _1042 = fma(_660, cbModelParam._m0[32u].z, fma(_656, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _652));
        float _1065 = _652 + _425;
        float _1066 = _656 + _426;
        float _1067 = _660 + _427;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_425, _426, _427), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3669 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_425, _426, _427), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3702 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_425, _426, _427), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3735 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _991;
        _1304 = _991;
        _1305 = _991;
        _1306 = _991;
        _1307 = _991;
        _1308 = _991;
        _1309 = _991;
        _1310 = _991;
        _1311 = _991;
        _1312 = _991;
        _1313 = _991;
        _1314 = _991;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1003)) + _1003;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _599 * 0.5;
    float _1372 = _600 * 0.5;
    float _1373 = _601 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_990, _994, _997, _1000));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_992, _995, _998, _1001));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _996, _999, _1002));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _428);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1489 = fma(_660, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652)) + cbModelParam._m0[13u].w;
        float _1493 = fma(_660, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652)) + cbModelParam._m0[14u].w;
        float _1497 = fma(_660, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652)) + cbModelParam._m0[15u].w;
        float _1500 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1503 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1506 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1534;
        if (_1500 > 0.0)
        {
            _1534 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1534 = frontier_phi_19_17_ladder;
        }
        float _1738;
        if (_1503 > 0.0)
        {
            _1738 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1738 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1506 > 0.0)
        {
            _1981 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _1983 = isnan(_1738) ? _1534 : (isnan(_1534) ? _1738 : min(_1534, _1738));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1500) + _1489;
        float _1989 = (_1984 * _1503) + _1493;
        float _1990 = (_1984 * _1506) + _1497;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_18_40_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1522 = frontier_phi_18_40_ladder_2;
        _1524 = frontier_phi_18_40_ladder_1;
        _1526 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1440);
        _1522 = _1510.x * cbModelParam._m0[1u].y;
        _1524 = _1510.y * cbModelParam._m0[1u].y;
        _1526 = _1510.z * cbModelParam._m0[1u].y;
    }
    float _1530 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _428);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1530 : min(cbModelParam._m0[25u].w, _1530));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_660, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_660, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_660, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1602 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1605 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1743;
        if (_1599 > 0.0)
        {
            _1743 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1743 = frontier_phi_30_26_ladder;
        }
        float _2008;
        if (_1602 > 0.0)
        {
            _2008 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2008 = frontier_phi_42_37_ladder;
        }
        float _2213;
        if (_1605 > 0.0)
        {
            _2213 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2213 = frontier_phi_51_48_ladder;
        }
        float _2215 = isnan(_2008) ? _1743 : (isnan(_1743) ? _2008 : min(_1743, _2008));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1599) + _1588;
        float _2221 = (_2216 * _1602) + _1592;
        float _2222 = (_2216 * _1605) + _1596;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2222, cbModelParam._m0[17u].z, fma(_2221, cbModelParam._m0[17u].y, _2220 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2222, cbModelParam._m0[18u].z, fma(_2221, cbModelParam._m0[18u].y, _2220 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2222, cbModelParam._m0[19u].z, fma(_2221, cbModelParam._m0[19u].y, _2220 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_27_51_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_27_51_ladder_2;
        _1626 = frontier_phi_27_51_ladder_1;
        _1628 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1531);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_620 * _607)) * _591;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1522)) + _1522);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    uvec4 _1662 = floatBitsToUint(cbInstanceData._m0[_565 + 5u]);
    uint _1664 = _1662.x * 14u;
    uint _1665 = _1664 + 13u;
    float _1672 = _591 + (-1.0);
    float _1677 = (cbLight._m0[_1665].x * _1672) + 1.0;
    float _1678 = (cbLight._m0[_1665].y * _1672) + 1.0;
    float _1679 = (cbLight._m0[_1665].z * _1672) + 1.0;
    float _1680 = (cbLight._m0[_1665].w * _1672) + 1.0;
    uint _1681 = _1664 + 5u;
    float _1687 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1691 = _1664 + 4u;
    float _1697 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1701 = _1664 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_425, _426, _427));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_425, _426, _427));
    float _3871 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3882 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1681].x * _1687) * _1722) + ((cbLight._m0[_1691].x * _1697) * _1720);
    float _1730 = ((_1687 * cbLight._m0[_1681].y) * _1722) + ((_1697 * cbLight._m0[_1691].y) * _1720);
    float _1731 = ((_1687 * cbLight._m0[_1681].z) * _1722) + ((_1697 * cbLight._m0[_1691].z) * _1720);
    uvec4 _1735 = floatBitsToUint(cbLight._m0[_1664 + 12u]);
    bool _1737 = _1735.x == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1737)
    {
        _1748 = _1729;
        _1750 = _1730;
        _1752 = _1731;
    }
    else
    {
        uint _1756 = _1664 + 6u;
        float _1772 = (dot(vec3(cbLight._m0[_1664 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _1773 = _1772 * _1772;
        float _3893 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1775 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1748 = (((cbLight._m0[_1756].x * 0.3183098733425140380859375) * _1774) * _1775) + _1729;
        _1750 = (((cbLight._m0[_1756].y * 0.3183098733425140380859375) * _1774) * _1775) + _1730;
        _1752 = (((cbLight._m0[_1756].z * 0.3183098733425140380859375) * _1774) * _1775) + _1731;
    }
    bool _1755 = _1735.y == 0u;
    float _1793;
    float _1795;
    float _1797;
    if (_1755)
    {
        _1793 = _1748;
        _1795 = _1750;
        _1797 = _1752;
    }
    else
    {
        uint _1952 = _1664 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1664 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3909 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1971 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _1793 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1748;
        _1795 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1750;
        _1797 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1752;
    }
    uint _1800 = _1664 + 8u;
    float _1813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _428) * 0.949999988079071044921875);
    float _1814 = _1813 * _1813;
    float _1815 = cbLight._m0[_1664].x + _505;
    float _1816 = cbLight._m0[_1664].y + _506;
    float _1817 = cbLight._m0[_1664].z + _507;
    float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
    float _1822 = _1821 * _1815;
    float _1823 = _1821 * _1816;
    float _1824 = _1821 * _1817;
    float _1825 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1664].xyz));
    float _3925 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _1829 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1830 = dot(vec3(_425, _426, _427), vec3(_1822, _1823, _1824));
    float _3947 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1822, _1823, _1824));
    float _3958 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1814 * _1814;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1854 = 1.0 - _1814;
    float _1865 = (0.5 / (((_1829 * ((_1828 * _1854) + _1814)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1854) + _1814) * _1828))) * _1828;
    float _3969 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1867 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    uint _1878 = _1664 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _428) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1701].x + _505;
    float _1892 = cbLight._m0[_1701].y + _506;
    float _1893 = cbLight._m0[_1701].z + _507;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1701].xyz));
    float _3980 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1905 = dot(vec3(_425, _426, _427), vec3(_1898, _1899, _1900));
    float _3991 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1898, _1899, _1900));
    float _4002 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1890;
    float _1937 = (0.5 / (((_1829 * ((_1904 * _1927) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _1927) + _1890) * _1904))) * _1904;
    float _4013 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1949 = (((_1926 * cbLight._m0[_1878].x) * _1939) * _1687) + (((_1853 * cbLight._m0[_1800].x) * _1867) * _1697);
    float _1950 = (((_1926 * cbLight._m0[_1878].y) * _1939) * _1687) + (((_1853 * cbLight._m0[_1800].y) * _1867) * _1697);
    float _1951 = (((_1926 * cbLight._m0[_1878].z) * _1939) * _1687) + (((_1853 * cbLight._m0[_1800].z) * _1867) * _1697);
    float _2013;
    float _2015;
    float _2017;
    if (_1737)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1664 + 2u;
        uint _2023 = _1664 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _428) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _505;
        float _2040 = cbLight._m0[_2019].y + _506;
        float _2041 = cbLight._m0[_2019].z + _507;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2019].xyz));
        float _4024 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2053 = dot(vec3(_425, _426, _427), vec3(_2046, _2047, _2048));
        float _4035 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _4046 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2075 = 1.0 - _2038;
        float _2085 = (0.5 / (((_1829 * ((_2052 * _2075) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2075) + _2038) * _2052))) * _2052;
        float _4057 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2013 = (((_2074 * cbLight._m0[_2023].x) * _2087) * _2088) + _1949;
        _2015 = (((_2074 * cbLight._m0[_2023].y) * _2087) * _2088) + _1950;
        _2017 = (((_2074 * cbLight._m0[_2023].z) * _2087) * _2088) + _1951;
    }
    float _2123;
    float _2125;
    float _2127;
    if (_1755)
    {
        _2123 = _2013;
        _2125 = _2015;
        _2127 = _2017;
    }
    else
    {
        uint _2134 = _1664 + 3u;
        uint _2138 = _1664 + 11u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _428) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _505;
        float _2155 = cbLight._m0[_2134].y + _506;
        float _2156 = cbLight._m0[_2134].z + _507;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2134].xyz));
        float _4073 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2168 = dot(vec3(_425, _426, _427), vec3(_2161, _2162, _2163));
        float _4084 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4095 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = 1.0 - _2153;
        float _2200 = (0.5 / (((_1829 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1829 * _2190) + _2153) * _2167))) * _2167;
        float _4106 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _2123 = (((_2189 * cbLight._m0[_2138].x) * _2202) * _2203) + _2013;
        _2125 = (((_2189 * cbLight._m0[_2138].y) * _2202) * _2203) + _2015;
        _2127 = (((_2189 * cbLight._m0[_2138].z) * _2202) * _2203) + _2017;
    }
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1662.y == 0u)
    {
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2278;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2278;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2278;
        uvec4 _2293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2294 = _2293.x;
        uint _2305 = uint((float(_2293.y) * floor(float(uint(cbSceneParam._m0[85u].y * _527) / _2294))) + floor(float(uint(cbSceneParam._m0[85u].x * _526) / _2294)));
        float _2315 = (log2(_2281 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2316 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        uint _2319 = uint(isnan(14.0) ? _2316 : (isnan(_2316) ? 14.0 : min(_2316, 14.0)));
        uvec4 _2324 = texelFetch(g_lightClusterGridBuffer, int(((_2319 << 2u) + (_2305 << 6u)) >> 2u));
        uint _2325 = _2324.x;
        uint _2326 = _2293.z;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((((1u << ((_2326 >> 4u) & 15u)) + 4294967295u) & _2325) == 0u) || ((_2326 & 240u) == 0u))
        {
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
        }
        else
        {
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2593)
                {
                    frontier_phi_68_pred = _2579;
                    frontier_phi_68_pred_1 = _2582;
                    frontier_phi_68_pred_2 = _2581;
                    frontier_phi_68_pred_3 = _2580;
                    frontier_phi_68_pred_4 = _2578;
                    frontier_phi_68_pred_5 = _2577;
                }
                else
                {
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    uint _2728;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2592;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2732 = uint(findLSB(_2728)) + (_2583 << 5u);
                        uint _2729 = (_2728 + 4294967295u) & _2728;
                        uint _2734 = _2732 * 48u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2754 = (_2732 * 48u) + 4u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2773 = (_2732 * 48u) + 8u;
                        vec3 _2784 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x));
                        float _2788 = _2748.x - _2279;
                        float _2789 = _2748.y - _2280;
                        float _2790 = _2748.z - _2281;
                        float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                        float _2794 = inversesqrt(_2791);
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2798 = dot(vec3(_546, _549, _552), vec3(_2795, _2796, _2797));
                        float _2803 = 1.0 - (_2791 * _2748.w);
                        float _4132 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2805 = sqrt(_2791) * _2767.w;
                        float _2808 = 1.39999997615814208984375 / (_2805 + 1.39999997615814208984375);
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2798) + _2809;
                        float _2815 = _2805 * _2805;
                        float _2819 = ((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2804) / ((_2815 * 0.699999988079071044921875) + 1.0);
                        float _2823 = (-0.0) - _2279;
                        float _2824 = (-0.0) - _2280;
                        float _2825 = (-0.0) - _2281;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2840 = exp2(log2(1.0 / ((_2815 * 3.5) + 5.0)) * 0.25);
                        float _2841 = 1.0 - _607;
                        float _2848 = sqrt(1.0 - ((1.0 - (_2841 * _2841)) * (1.0 - (_2840 * _2840))));
                        float _2849 = _2848 * _2848;
                        float _2850 = _2849 * _2849;
                        float _2851 = _2830 + _2795;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
                        float _2861 = dot(vec3(_546, _549, _552), vec3(_2830, _2831, _2832));
                        float _4148 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2865 = dot(vec3(_546, _549, _552), vec3(_2857 * _2851, _2857 * _2852, _2857 * _2853));
                        float _4159 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2872 = ((_2868 * _2868) * (_2850 + (-1.0))) + 1.0;
                        float _2873 = _2808 * _2849;
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2798) + _2874;
                        float _4170 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2879 = 1.0 - _2849;
                        float _2889 = (0.5 / (((_2878 * ((_2864 * _2879) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2878 * _2879) + _2849) * _2864))) * _2878;
                        float _4181 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2900 = (((_2850 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2872 * _2872) * ((_2815 * 2.1991131305694580078125) + 3.141590118408203125))) * _2804;
                        _2652 = (_2819 * _2767.x) + _2725;
                        _2653 = (_2819 * _2767.y) + _2726;
                        _2654 = (_2819 * _2767.z) + _2727;
                        _2649 = (_2900 * _2784.x) + _2722;
                        _2650 = (_2900 * _2784.y) + _2723;
                        _2651 = (_2900 * _2784.z) + _2724;
                        if (_2729 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2729;
                        }
                    }
                    frontier_phi_68_pred = _2651;
                    frontier_phi_68_pred_1 = _2654;
                    frontier_phi_68_pred_2 = _2653;
                    frontier_phi_68_pred_3 = _2652;
                    frontier_phi_68_pred_4 = _2650;
                    frontier_phi_68_pred_5 = _2649;
                }
                _2430 = frontier_phi_68_pred;
                _2436 = frontier_phi_68_pred_1;
                _2434 = frontier_phi_68_pred_2;
                _2432 = frontier_phi_68_pred_3;
                _2428 = frontier_phi_68_pred_4;
                _2426 = frontier_phi_68_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2426;
                    _2578 = _2428;
                    _2579 = _2430;
                    _2580 = _2432;
                    _2581 = _2434;
                    _2582 = _2436;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
        }
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.z;
        uint _2442 = (_2440 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2442) & _2325) == 0u)
        {
            _2545 = _2425;
            _2547 = _2427;
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
            float _2571 = _2570 * _2279;
            float _2572 = _2570 * _2280;
            float _2573 = _2570 * _2281;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2442 < ((_2440 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2705 = _2425;
                float _2706 = _2427;
                float _2707 = _2429;
                float _2708 = _2431;
                float _2709 = _2433;
                float _2710 = _2435;
                uint _2711 = _2442;
                uint _2720;
                bool _2721;
                for (;;)
                {
                    _2720 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                    _2721 = _2720 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2721)
                    {
                        frontier_phi_79_pred = _2710;
                        frontier_phi_79_pred_1 = _2709;
                        frontier_phi_79_pred_2 = _2708;
                        frontier_phi_79_pred_3 = _2707;
                        frontier_phi_79_pred_4 = _2706;
                        frontier_phi_79_pred_5 = _2705;
                    }
                    else
                    {
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        uint _2933 = _2720;
                        uint _2934;
                        vec4 _2959;
                        float _2960;
                        vec4 _2975;
                        vec3 _2987;
                        vec4 _3003;
                        vec4 _3019;
                        float _3066;
                        bool _3067;
                        for (;;)
                        {
                            uint _2944 = ((_2711 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2933));
                            _2934 = (_2933 + 4294967295u) & _2933;
                            uint _2946 = _2944 * 40u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2960 = _2959.w;
                            uint _2962 = (_2944 * 40u) + 4u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2977 = (_2944 * 40u) + 8u;
                            _2987 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x));
                            uint _2990 = (_2944 * 40u) + 16u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3006 = (_2944 * 40u) + 20u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2944 * 40u) + 24u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3041 = (_2944 * 40u) + 28u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3066 = fma(_2281, _3054.z, fma(_2280, _3054.y, _3054.x * _2279)) + _3054.w;
                            _3067 = !((fma(_2281, _3035.z, fma(_2280, _3035.y, _3035.x * _2279)) + _3035.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3067)
                            {
                                float _3094 = _2959.x - _2279;
                                float _3095 = _2959.y - _2280;
                                float _3096 = _2959.z - _2281;
                                float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                                float _3100 = inversesqrt(_3097);
                                float _3101 = _3100 * _3094;
                                float _3102 = _3100 * _3095;
                                float _3103 = _3100 * _3096;
                                float _3107 = 1.0 - (_3097 / (_2960 * _2960));
                                float _4192 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3112 = sqrt(_3097) * _2975.w;
                                float _3114 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                                float _3115 = _3114 * _3114;
                                float _3118 = ((1.0 - _3115) * dot(vec3(_3101, _3102, _3103), vec3(_546, _549, _552))) + _3115;
                                float _3121 = _3112 * _3112;
                                float _3125 = (fma(_2281, _3003.z, fma(_2280, _3003.y, _3003.x * _2279)) + _3003.w) / _3066;
                                float _3126 = (fma(_2281, _3019.z, fma(_2280, _3019.y, _3019.x * _2279)) + _3019.w) / _3066;
                                float _3130 = 1.0 - dot(vec2(_3125, _3126), vec2(_3125, _3126));
                                float _4208 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3132 = _3131 * (((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3108) / ((_3121 * 0.699999988079071044921875) + 1.0));
                                float _3144 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                                float _3145 = 1.0 - _607;
                                float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                                float _3153 = _3152 * _3152;
                                float _3154 = _3153 * _3153;
                                float _3155 = _3101 - _2571;
                                float _3156 = _3102 - _2572;
                                float _3157 = _3103 - _2573;
                                float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                                float _3165 = dot(vec3(_546, _549, _552), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4219 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3169 = dot(vec3(_546, _549, _552), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                                float _4230 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                                float _3177 = _3114 * _3153;
                                float _3178 = _3177 * _3177;
                                float _3184 = ((1.0 - _3178) * dot(vec3(_546, _549, _552), vec3(_3101, _3102, _3103))) + _3178;
                                float _4241 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3186 = 1.0 - _3153;
                                float _3196 = (0.5 / (((_3185 * ((_3168 * _3186) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3153) * _3168))) * _3185;
                                float _4252 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3206 = (_3131 * _3108) * (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3176 * _3176) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3132 * _2975.z;
                                frontier_phi_85_pred_1 = _3132 * _2975.y;
                                frontier_phi_85_pred_2 = _3132 * _2975.x;
                                frontier_phi_85_pred_3 = _3206 * _2987.z;
                                frontier_phi_85_pred_4 = _3206 * _2987.y;
                                frontier_phi_85_pred_5 = _3206 * _2987.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3215 = frontier_phi_85_pred;
                            _3214 = frontier_phi_85_pred_1;
                            _3213 = frontier_phi_85_pred_2;
                            _3212 = frontier_phi_85_pred_3;
                            _3211 = frontier_phi_85_pred_4;
                            _3210 = frontier_phi_85_pred_5;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            if (_2934 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2934;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2919;
                        frontier_phi_79_pred_1 = _2918;
                        frontier_phi_79_pred_2 = _2917;
                        frontier_phi_79_pred_3 = _2916;
                        frontier_phi_79_pred_4 = _2915;
                        frontier_phi_79_pred_5 = _2914;
                    }
                    _2556 = frontier_phi_79_pred;
                    _2554 = frontier_phi_79_pred_1;
                    _2552 = frontier_phi_79_pred_2;
                    _2550 = frontier_phi_79_pred_3;
                    _2548 = frontier_phi_79_pred_4;
                    _2546 = frontier_phi_79_pred_5;
                    uint _2712 = _2711 + 1u;
                    if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2705 = _2546;
                        _2706 = _2548;
                        _2707 = _2550;
                        _2708 = _2552;
                        _2709 = _2554;
                        _2710 = _2556;
                        _2711 = _2712;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2552;
                frontier_phi_60_61_ladder_1 = _2556;
                frontier_phi_60_61_ladder_2 = _2554;
                frontier_phi_60_61_ladder_3 = _2550;
                frontier_phi_60_61_ladder_4 = _2548;
                frontier_phi_60_61_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_60_61_ladder = _2431;
                frontier_phi_60_61_ladder_1 = _2435;
                frontier_phi_60_61_ladder_2 = _2433;
                frontier_phi_60_61_ladder_3 = _2429;
                frontier_phi_60_61_ladder_4 = _2427;
                frontier_phi_60_61_ladder_5 = _2425;
            }
            _2545 = frontier_phi_60_61_ladder_5;
            _2547 = frontier_phi_60_61_ladder_4;
            _2549 = frontier_phi_60_61_ladder_3;
            _2551 = frontier_phi_60_61_ladder;
            _2553 = frontier_phi_60_61_ladder_2;
            _2555 = frontier_phi_60_61_ladder_1;
        }
        float _2560 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2337 = (_2560 * _2551) + _1793;
        _2339 = (_2560 * _2553) + _1795;
        _2341 = (_2560 * _2555) + _1797;
        _2343 = ((_2545 * 0.039999999105930328369140625) * _2560) + _2123;
        _2345 = ((_2547 * 0.039999999105930328369140625) * _2560) + _2125;
        _2347 = ((_2549 * 0.039999999105930328369140625) * _2560) + _2127;
    }
    else
    {
        _2337 = _1793;
        _2339 = _1795;
        _2341 = _1797;
        _2343 = _2123;
        _2345 = _2125;
        _2347 = _2127;
    }
    float _4268 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4279 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4290 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _2364 = ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2337 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _591))) + ((_2343 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    float _2365 = ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2339 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _591))) + ((_2345 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    float _2366 = ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2341 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _591))) + ((_2347 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    uint _2367 = _565 + 6u;
    float _2375 = _526 / cbSceneParam._m0[86u].x;
    float _2376 = _527 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _447 : (isnan(_447) ? cbSceneParam._m0[77u].w : min(_447, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_447 > cbSceneParam._m0[78u].w)
    {
        float _2450 = isnan(_447) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _447 : min(cbSceneParam._m0[80u].w, _447));
        float _2451 = _2450 / _447;
        float _2462 = _2451 * _498;
        float _2463 = _499 * _2451;
        float _2464 = (-0.0) - _2463;
        float _2465 = _2451 * _500;
        float _2467 = (cbSceneParam._m0[77u].w * _2464) / _2450;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2463;
        float _2475 = sqrt(((_2462 * _2462) + (_2463 * _2463)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2450)) * _2475;
        float _2483 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2485 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2464 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2468 > 0.0) ? exp2(_2483 * _2468) : (2.0 - exp2(_2485 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2608 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2662 = ((abs(_2475 / _2464) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2483 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2483 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2485 * _2617) - exp2(_2485 * _2618)) * _2606))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2395);
        _2487 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2489 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2491 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2493 = _2673 * _2395;
    }
    else
    {
        _2487 = _2392;
        _2489 = _2393;
        _2491 = _2394;
        _2493 = _2395;
    }
    bool _2700;
    vec4 _2503;
    vec4 _2525;
    float _2527;
    float _2531;
    float _2532;
    float _2533;
    float _2534;
    bool _2544;
    for (;;)
    {
        _2503 = cbMatDynParam._m0[0u];
        float _2505 = roundEven(_2503.y);
        bool _2506 = _2505 == 3.0;
        float _2507 = log2(_2493);
        float _2514 = exp2(_2507 * cbSceneParam._m0[78u].x) * _2364;
        float _2515 = exp2(_2507 * cbSceneParam._m0[78u].y) * _2365;
        float _2516 = exp2(_2507 * cbSceneParam._m0[78u].z) * _2366;
        float _2523 = _514 + (-0.5);
        _2525 = cbMtdParam._m0[1u];
        _2527 = _2525.y * _2523;
        float _2530 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2531 = _2530 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2487)));
        _2532 = _2530 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2489)));
        _2533 = _2530 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2491)));
        _2534 = _2523 * 0.999000012874603271484375;
        _2544 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2544)
        {
            if ((cbInstanceData._m0[_565 + 7u].x + _2534) < 0.5)
            {
                _2700 = true;
                break;
            }
        }
        uint _2641 = _567 + uint(_2503.w);
        if ((cbInstanceData._m0[_2641].w < 1.0) && ((cbInstanceData._m0[_2641].w + _2534) < 0.5))
        {
            _2700 = true;
            break;
        }
        if ((_2527 + 1.0) < _2525.x)
        {
            _2700 = true;
            break;
        }
        _2700 = false;
        break;
    }
    float _2905;
    if (_2700)
    {
        discard_state = true;
        _2905 = 0.0;
    }
    else
    {
        _2905 = cbInstanceData._m0[_2367].w;
    }
    SV_Target.x = _2531;
    SV_Target.y = _2532;
    SV_Target.z = _2533;
    SV_Target.w = _2905;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
    discard_exit();
}


