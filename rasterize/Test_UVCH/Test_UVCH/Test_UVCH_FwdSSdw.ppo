#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _949;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    vec4 _256 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _256.x * cbMtdParam._m0[9u].x;
    float _263 = _256.y * cbMtdParam._m0[9u].y;
    float _264 = _256.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _313 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3287 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _321 = (_314 * ((_283.x * cbMtdParam._m0[10u].x) - _262)) + _262;
    float _322 = (_314 * ((_283.y * cbMtdParam._m0[10u].y) - _263)) + _263;
    float _323 = (_314 * ((_283.z * cbMtdParam._m0[10u].z) - _264)) + _264;
    vec4 _336 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _360 = _358.x;
    float _361 = _358.y;
    float _362 = _358.z;
    vec4 _374 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _387 = ((_374.z - _362) * _314) + _362;
    float _390 = ((((_374.x - _360) * _314) + _360) * 2.0) + (-1.0);
    float _391 = ((((_374.y - _361) * _314) + _361) * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3298 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    float _402 = (((_336.z - _387) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _387;
    float _408 = ((((_336.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _390;
    float _409 = ((((_336.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _391;
    float _412 = fma(_397, _229, fma(_409, _221 * TANGENT.x, (_207 * _199) * _408));
    float _415 = fma(_397, _230, fma(_409, _221 * TANGENT.y, (_207 * _200) * _408));
    float _418 = fma(_397, _231, fma(_409, _221 * TANGENT.z, (_207 * _201) * _408));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _3309 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _426 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3331 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3342 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _445 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _496 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _486);
    float _497 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _486);
    float _498 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _486);
    float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
    float _503 = _496 * _502;
    float _504 = _497 * _502;
    float _505 = _498 * _502;
    float _511 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _512 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _535 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _538 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _554 = (_551 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _560 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_554].x;
    float _561 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_554].y;
    float _562 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_554].z;
    float _3353 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    vec4 _574 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _511, cbSceneParam._m0[86u].y * _512));
    float _577 = _574.x * TEXCOORD_5.w;
    float _578 = dot(vec3(_423, _424, _425), vec3(_503, _504, _505));
    float _581 = _578 * 2.0;
    float _585 = (_581 * _423) - _503;
    float _586 = (_581 * _424) - _504;
    float _587 = (_581 * _425) - _505;
    float _591 = abs(dot(vec3(_503, _504, _505), vec3(_423, _424, _425)));
    float _3386 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _593 = sqrt(_426);
    float _606 = exp2((_593 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_593 * 3.0));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _948;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _673 = fma(_646, cbModelParam._m0[26u].z, fma(_642, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _638));
        float _677 = fma(_646, cbModelParam._m0[27u].z, fma(_642, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _638));
        float _681 = fma(_646, cbModelParam._m0[28u].z, fma(_642, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _638));
        float _706 = _638 + _423;
        float _707 = _642 + _424;
        float _708 = _646 + _425;
        float _718 = fma(_708, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706)) - _673;
        float _719 = fma(_708, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706)) - _677;
        float _720 = fma(_708, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706)) - _681;
        float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
        float _737 = ((_724 * _718) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_673 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_724 * _719) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_677 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_724 * _720) / cbModelParam._m0[34u].z) + ((((((_681 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        float _776 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_742.x + (-0.5));
        float _778 = _776 * (_742.y + (-0.5));
        float _779 = _776 * (_742.z + (-0.5));
        float _786 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_749.x + (-0.5));
        float _788 = _786 * (_749.y + (-0.5));
        float _789 = _786 * (_749.z + (-0.5));
        float _796 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_756.x + (-0.5));
        float _798 = _796 * (_756.y + (-0.5));
        float _799 = _796 * (_756.z + (-0.5));
        float _806 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_763.x + (-0.5));
        float _808 = _806 * (_763.y + (-0.5));
        float _809 = _806 * (_763.z + (-0.5));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = _777 * 0.5;
        float _814 = _787 * 0.5;
        float _815 = _797 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _830 = (dot(vec3(_423, _424, _425), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _840 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3434 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_842 + 1.0))) + _847) * _810;
        float _857 = _778 * 0.5;
        float _858 = _788 * 0.5;
        float _859 = _798 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_423, _424, _425), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3467 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_884 + 1.0))) + _889) * _811;
        float _899 = _779 * 0.5;
        float _900 = _789 * 0.5;
        float _901 = _799 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_423, _424, _425), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3500 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_926 + 1.0))) + _931) * _812;
        _948 = _779;
        _950 = _778;
        _951 = _777;
        _952 = _789;
        _953 = _788;
        _954 = _787;
        _955 = _799;
        _956 = _798;
        _957 = _797;
        _958 = _812;
        _959 = _811;
        _960 = _810;
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
    }
    else
    {
        _948 = _949;
        _950 = _949;
        _951 = _949;
        _952 = _949;
        _953 = _949;
        _954 = _949;
        _955 = _949;
        _956 = _949;
        _957 = _949;
        _958 = _949;
        _959 = _949;
        _960 = _949;
        _961 = 0.0;
        _962 = 0.0;
        _963 = 0.0;
    }
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _989 = fma(_646, cbModelParam._m0[30u].z, fma(_642, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _638));
        float _993 = fma(_646, cbModelParam._m0[31u].z, fma(_642, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _638));
        float _997 = fma(_646, cbModelParam._m0[32u].z, fma(_642, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _638));
        float _1020 = _638 + _423;
        float _1021 = _642 + _424;
        float _1022 = _646 + _425;
        float _1032 = fma(_1022, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020)) - _989;
        float _1033 = fma(_1022, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020)) - _993;
        float _1034 = fma(_1022, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020)) - _997;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_989 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_993 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[35u].z) + ((((((_997 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1088 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1055.x + (-0.5));
        float _1090 = _1088 * (_1055.y + (-0.5));
        float _1091 = _1088 * (_1055.z + (-0.5));
        float _1098 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1062.x + (-0.5));
        float _1100 = _1098 * (_1062.y + (-0.5));
        float _1101 = _1098 * (_1062.z + (-0.5));
        float _1108 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1069.x + (-0.5));
        float _1110 = _1108 * (_1069.y + (-0.5));
        float _1111 = _1108 * (_1069.z + (-0.5));
        float _1118 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1076.x + (-0.5));
        float _1120 = _1118 * (_1076.y + (-0.5));
        float _1121 = _1118 * (_1076.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_423, _424, _425), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3563 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1152 + 1.0))) + _1157) * _1122;
        float _1167 = _1090 * 0.5;
        float _1168 = _1100 * 0.5;
        float _1169 = _1110 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_423, _424, _425), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3596 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1194 + 1.0))) + _1199) * _1123;
        float _1209 = _1091 * 0.5;
        float _1210 = _1101 * 0.5;
        float _1211 = _1111 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_423, _424, _425), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3629 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1236 + 1.0))) + _1241) * _1124;
        _1258 = _1091;
        _1259 = _1090;
        _1260 = _1089;
        _1261 = _1101;
        _1262 = _1100;
        _1263 = _1099;
        _1264 = _1111;
        _1265 = _1110;
        _1266 = _1109;
        _1267 = _1124;
        _1268 = _1123;
        _1269 = _1122;
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _949;
        _1259 = _949;
        _1260 = _949;
        _1261 = _949;
        _1262 = _949;
        _1263 = _949;
        _1264 = _949;
        _1265 = _949;
        _1266 = _949;
        _1267 = _949;
        _1268 = _949;
        _1269 = _949;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1305 = fma(_1284, cbSceneParam._m0[89u].z, fma(_1283, cbSceneParam._m0[89u].y, _1282 * cbSceneParam._m0[89u].x));
    float _1308 = fma(_1284, cbSceneParam._m0[90u].z, fma(_1283, cbSceneParam._m0[90u].y, _1282 * cbSceneParam._m0[90u].x));
    float _1311 = fma(_1284, cbSceneParam._m0[91u].z, fma(_1283, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1282));
    float _1326 = _585 * 0.5;
    float _1327 = _586 * 0.5;
    float _1328 = _587 * 0.5;
    float _1329 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1332 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1335 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1369;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1342 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_948, _952, _955, _958));
        float _1346 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_950, _953, _956, _959));
        float _1350 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_951, _954, _957, _960));
        float _1357 = dot(vec4(cbModelParam._m0[39u]), vec4(_1326, _1327, _1328, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1380;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1371 = dot(vec4(cbModelParam._m0[40u]), vec4(_1326, _1327, _1328, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1384 = (_1380 * cbModelParam._m0[1u].x) + (_1369 * (1.0 - cbModelParam._m0[1u].x));
    float _1394 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _426);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1394 : min(cbModelParam._m0[25u].z, _1394));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1444 = fma(_646, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638)) + cbModelParam._m0[13u].w;
        float _1448 = fma(_646, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638)) + cbModelParam._m0[14u].w;
        float _1452 = fma(_646, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638)) + cbModelParam._m0[15u].w;
        float _1455 = fma(_587, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585));
        float _1458 = fma(_587, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585));
        float _1461 = fma(_587, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585));
        float _1489;
        if (_1455 > 0.0)
        {
            _1489 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1489 = frontier_phi_16_14_ladder;
        }
        float _1714;
        if (_1458 > 0.0)
        {
            _1714 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1714 = frontier_phi_25_21_ladder;
        }
        float _1960;
        if (_1461 > 0.0)
        {
            _1960 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1960 = frontier_phi_37_32_ladder;
        }
        float _1962 = isnan(_1714) ? _1489 : (isnan(_1489) ? _1714 : min(_1489, _1714));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1455) + _1444;
        float _1968 = (_1963 * _1458) + _1448;
        float _1969 = (_1963 * _1461) + _1452;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1395);
            frontier_phi_15_37_ladder = _2093.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2093.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2093.x * cbModelParam._m0[1u].y;
        }
        _1477 = frontier_phi_15_37_ladder_2;
        _1479 = frontier_phi_15_37_ladder_1;
        _1481 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_585, _586, _587), _1395);
        _1477 = _1465.x * cbModelParam._m0[1u].y;
        _1479 = _1465.y * cbModelParam._m0[1u].y;
        _1481 = _1465.z * cbModelParam._m0[1u].y;
    }
    float _1485 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _426);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1485 : min(cbModelParam._m0[25u].w, _1485));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1543 = fma(_646, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638)) + cbModelParam._m0[21u].w;
        float _1547 = fma(_646, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638)) + cbModelParam._m0[22u].w;
        float _1551 = fma(_646, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638)) + cbModelParam._m0[23u].w;
        float _1554 = fma(_587, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585));
        float _1557 = fma(_587, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585));
        float _1560 = fma(_587, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585));
        float _1719;
        if (_1554 > 0.0)
        {
            _1719 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1719 = frontier_phi_27_23_ladder;
        }
        float _1987;
        if (_1557 > 0.0)
        {
            _1987 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1987 = frontier_phi_39_34_ladder;
        }
        float _2192;
        if (_1560 > 0.0)
        {
            _2192 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2192 = frontier_phi_48_45_ladder;
        }
        float _2194 = isnan(_1987) ? _1719 : (isnan(_1719) ? _1987 : min(_1719, _1987));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1554) + _1543;
        float _2200 = (_2195 * _1557) + _1547;
        float _2201 = (_2195 * _1560) + _1551;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2202;
        float _2205 = _2202 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2201 > _2205) || ((_2201 < _2203) || ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 < _2203) || (_2199 > _2205))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2201, cbModelParam._m0[17u].z, fma(_2200, cbModelParam._m0[17u].y, _2199 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2201, cbModelParam._m0[18u].z, fma(_2200, cbModelParam._m0[18u].y, _2199 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2201, cbModelParam._m0[19u].z, fma(_2200, cbModelParam._m0[19u].y, _2199 * cbModelParam._m0[19u].x))), _1486);
            frontier_phi_24_48_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1579 = frontier_phi_24_48_ladder_2;
        _1581 = frontier_phi_24_48_ladder_1;
        _1583 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_585, _586, _587), _1486);
        _1579 = _1563.x * cbModelParam._m0[1u].z;
        _1581 = _1563.y * cbModelParam._m0[1u].z;
        _1583 = _1563.z * cbModelParam._m0[1u].z;
    }
    float _1595 = ((((1.0 - _606) * ((_593 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_606 * _593)) * _577;
    float _1596 = _1595 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1597 = _1595 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1598 = _1595 * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1601 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, _1596 * cbSceneParam._m0[91u].x));
    vec4 _1615 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_511, _512));
    float _1617 = _1615.w;
    float _1629 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1617);
    float _1630 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1617);
    float _1631 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1617);
    uvec4 _1635 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1637 = _1635.x * 14u;
    uint _1638 = _1637 + 13u;
    float _1645 = _577 + (-1.0);
    float _1650 = (cbLight._m0[_1638].x * _1645) + 1.0;
    float _1651 = (cbLight._m0[_1638].y * _1645) + 1.0;
    float _1652 = (cbLight._m0[_1638].z * _1645) + 1.0;
    float _1653 = (cbLight._m0[_1638].w * _1645) + 1.0;
    uint _1654 = _1637 + 5u;
    float _1660 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1664 = _1637 + 4u;
    float _1673 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1677 = _1637 | 1u;
    float _1688 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_423, _424, _425));
    float _1691 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_423, _424, _425));
    float _3765 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _3776 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1696 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1698 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.3183098733425140380859375;
    float _1705 = ((cbLight._m0[_1654].x * _1660) * _1698) + (((cbLight._m0[_1664].x * _1629) * _1673) * _1696);
    float _1706 = ((_1660 * cbLight._m0[_1654].y) * _1698) + (((cbLight._m0[_1664].y * _1630) * _1673) * _1696);
    float _1707 = ((_1660 * cbLight._m0[_1654].z) * _1698) + (((cbLight._m0[_1664].z * _1631) * _1673) * _1696);
    uvec4 _1711 = floatBitsToUint(cbLight._m0[_1637 + 12u]);
    bool _1713 = _1711.x == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1713)
    {
        _1724 = _1705;
        _1726 = _1706;
        _1728 = _1707;
    }
    else
    {
        uint _1732 = _1637 + 6u;
        float _1748 = (dot(vec3(cbLight._m0[_1637 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1749 = _1748 * _1748;
        float _3787 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1751 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1724 = (((cbLight._m0[_1732].x * 0.3183098733425140380859375) * _1750) * _1751) + _1705;
        _1726 = (((cbLight._m0[_1732].y * 0.3183098733425140380859375) * _1750) * _1751) + _1706;
        _1728 = (((cbLight._m0[_1732].z * 0.3183098733425140380859375) * _1750) * _1751) + _1707;
    }
    bool _1731 = _1711.y == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1731)
    {
        _1769 = _1724;
        _1771 = _1726;
        _1773 = _1728;
    }
    else
    {
        uint _1931 = _1637 + 7u;
        float _1947 = (dot(vec3(cbLight._m0[_1637 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3803 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1950 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1769 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1724;
        _1771 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1726;
        _1773 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1728;
    }
    uint _1776 = _1637 + 8u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _426) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1637].x + _503;
    float _1792 = cbLight._m0[_1637].y + _504;
    float _1793 = cbLight._m0[_1637].z + _505;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1637].xyz));
    float _3819 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _1805 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1806 = dot(vec3(_423, _424, _425), vec3(_1798, _1799, _1800));
    float _3841 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1798, _1799, _1800));
    float _3852 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1790 * _1790;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1829 = (exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1830 = 1.0 - _1790;
    float _1841 = (0.5 / (((_1805 * ((_1804 * _1830) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1830) + _1790) * _1804))) * _1804;
    float _3863 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1843 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    uint _1857 = _1637 + 9u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _426) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1677].x + _503;
    float _1871 = cbLight._m0[_1677].y + _504;
    float _1872 = cbLight._m0[_1677].z + _505;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1677].xyz));
    float _3874 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1884 = dot(vec3(_423, _424, _425), vec3(_1877, _1878, _1879));
    float _3885 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1877, _1878, _1879));
    float _3896 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1869 * _1869;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1906 = 1.0 - _1869;
    float _1916 = (0.5 / (((_1805 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _1906) + _1869) * _1883))) * _1883;
    float _3907 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    float _1928 = (((_1905 * cbLight._m0[_1857].x) * _1918) * _1660) + ((((cbLight._m0[_1776].x * _1629) * _1829) * _1843) * _1673);
    float _1929 = (((_1905 * cbLight._m0[_1857].y) * _1918) * _1660) + ((((cbLight._m0[_1776].y * _1630) * _1829) * _1843) * _1673);
    float _1930 = (((_1905 * cbLight._m0[_1857].z) * _1918) * _1660) + ((((cbLight._m0[_1776].z * _1631) * _1829) * _1843) * _1673);
    float _1992;
    float _1994;
    float _1996;
    if (_1713)
    {
        _1992 = _1928;
        _1994 = _1929;
        _1996 = _1930;
    }
    else
    {
        uint _1998 = _1637 + 2u;
        uint _2002 = _1637 + 10u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _426) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _503;
        float _2019 = cbLight._m0[_1998].y + _504;
        float _2020 = cbLight._m0[_1998].z + _505;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1998].xyz));
        float _3918 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2032 = dot(vec3(_423, _424, _425), vec3(_2025, _2026, _2027));
        float _3929 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _3940 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2054 = 1.0 - _2017;
        float _2064 = (0.5 / (((_1805 * ((_2031 * _2054) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2054) + _2017) * _2031))) * _2031;
        float _3951 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1992 = (((_2053 * cbLight._m0[_2002].x) * _2066) * _2067) + _1928;
        _1994 = (((_2053 * cbLight._m0[_2002].y) * _2066) * _2067) + _1929;
        _1996 = (((_2053 * cbLight._m0[_2002].z) * _2066) * _2067) + _1930;
    }
    float _2102;
    float _2104;
    float _2106;
    if (_1731)
    {
        _2102 = _1992;
        _2104 = _1994;
        _2106 = _1996;
    }
    else
    {
        uint _2113 = _1637 + 3u;
        uint _2117 = _1637 + 11u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _426) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _503;
        float _2134 = cbLight._m0[_2113].y + _504;
        float _2135 = cbLight._m0[_2113].z + _505;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2113].xyz));
        float _3967 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2147 = dot(vec3(_423, _424, _425), vec3(_2140, _2141, _2142));
        float _3978 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _3989 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2169 = 1.0 - _2132;
        float _2179 = (0.5 / (((_1805 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1805 * _2169) + _2132) * _2146))) * _2146;
        float _4000 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _2102 = (((_2168 * cbLight._m0[_2117].x) * _2181) * _2182) + _1992;
        _2104 = (((_2168 * cbLight._m0[_2117].y) * _2181) * _2182) + _1994;
        _2106 = (((_2168 * cbLight._m0[_2117].z) * _2181) * _2182) + _1996;
    }
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1635.y == 0u)
    {
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2257;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2257;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2257;
        uvec4 _2272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2273 = _2272.x;
        uint _2284 = uint((float(_2272.y) * floor(float(uint(cbSceneParam._m0[85u].y * _512) / _2273))) + floor(float(uint(cbSceneParam._m0[85u].x * _511) / _2273)));
        float _2294 = (log2(_2260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2295 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        uint _2298 = uint(isnan(14.0) ? _2295 : (isnan(_2295) ? 14.0 : min(_2295, 14.0)));
        uvec4 _2303 = texelFetch(g_lightClusterGridBuffer, int(((_2298 << 2u) + (_2284 << 6u)) >> 2u));
        uint _2304 = _2303.x;
        uint _2305 = _2272.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2305 >> 4u) & 15u)) + 4294967295u) & _2304) == 0u) || ((_2305 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            uint _2554 = 0u;
            uint _2563;
            bool _2564;
            for (;;)
            {
                _2563 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2554 << 2u)) >> 2u)).x;
                _2564 = _2563 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2564)
                {
                    frontier_phi_63_pred = _2553;
                    frontier_phi_63_pred_1 = _2552;
                    frontier_phi_63_pred_2 = _2551;
                    frontier_phi_63_pred_3 = _2550;
                    frontier_phi_63_pred_4 = _2549;
                    frontier_phi_63_pred_5 = _2548;
                }
                else
                {
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    uint _2678;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2563;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    for (;;)
                    {
                        uint _2682 = uint(findLSB(_2678)) + (_2554 << 5u);
                        uint _2679 = (_2678 + 4294967295u) & _2678;
                        uint _2684 = _2682 * 48u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 3u)).x));
                        uint _2704 = (_2682 * 48u) + 4u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2723 = (_2682 * 48u) + 8u;
                        vec3 _2734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x));
                        float _2738 = _2698.x - _2258;
                        float _2739 = _2698.y - _2259;
                        float _2740 = _2698.z - _2260;
                        float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                        float _2744 = inversesqrt(_2741);
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2748 = dot(vec3(_532, _535, _538), vec3(_2745, _2746, _2747));
                        float _2753 = 1.0 - (_2741 * _2698.w);
                        float _4026 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2755 = sqrt(_2741) * _2717.w;
                        float _2758 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                        float _2759 = _2758 * _2758;
                        float _2762 = ((1.0 - _2759) * _2748) + _2759;
                        float _2765 = _2755 * _2755;
                        float _2769 = ((isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * _2754) / ((_2765 * 0.699999988079071044921875) + 1.0);
                        float _2773 = (-0.0) - _2258;
                        float _2774 = (-0.0) - _2259;
                        float _2775 = (-0.0) - _2260;
                        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2790 = exp2(log2(1.0 / ((_2765 * 3.5) + 5.0)) * 0.25);
                        float _2791 = 1.0 - _593;
                        float _2798 = sqrt(1.0 - ((1.0 - (_2791 * _2791)) * (1.0 - (_2790 * _2790))));
                        float _2799 = _2798 * _2798;
                        float _2800 = _2799 * _2799;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
                        float _2811 = dot(vec3(_532, _535, _538), vec3(_2780, _2781, _2782));
                        float _4042 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2815 = dot(vec3(_532, _535, _538), vec3(_2807 * _2801, _2807 * _2802, _2807 * _2803));
                        float _4053 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2818 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2822 = ((_2818 * _2818) * (_2800 + (-1.0))) + 1.0;
                        float _2823 = _2758 * _2799;
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2748) + _2824;
                        float _4064 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2828 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2829 = 1.0 - _2799;
                        float _2839 = (0.5 / (((_2828 * ((_2814 * _2829) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _2829) + _2799) * _2814))) * _2828;
                        float _4075 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2850 = (((_2800 * 3.1415927410125732421875) * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) / ((_2822 * _2822) * ((_2765 * 2.1991131305694580078125) + 3.141590118408203125))) * _2754;
                        _2607 = (_2769 * _2717.x) + _2675;
                        _2608 = (_2769 * _2717.y) + _2676;
                        _2609 = (_2769 * _2717.z) + _2677;
                        _2604 = (_2850 * _2734.x) + _2672;
                        _2605 = (_2850 * _2734.y) + _2673;
                        _2606 = (_2850 * _2734.z) + _2674;
                        if (_2679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2679;
                        }
                    }
                    frontier_phi_63_pred = _2609;
                    frontier_phi_63_pred_1 = _2608;
                    frontier_phi_63_pred_2 = _2607;
                    frontier_phi_63_pred_3 = _2606;
                    frontier_phi_63_pred_4 = _2605;
                    frontier_phi_63_pred_5 = _2604;
                }
                _2415 = frontier_phi_63_pred;
                _2413 = frontier_phi_63_pred_1;
                _2411 = frontier_phi_63_pred_2;
                _2409 = frontier_phi_63_pred_3;
                _2407 = frontier_phi_63_pred_4;
                _2405 = frontier_phi_63_pred_5;
                uint _2555 = _2554 + 1u;
                if (_2555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2548 = _2405;
                    _2549 = _2407;
                    _2550 = _2409;
                    _2551 = _2411;
                    _2552 = _2413;
                    _2553 = _2415;
                    _2554 = _2555;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((4294967295u << _2421) & _2304) == 0u)
        {
            _2516 = _2404;
            _2518 = _2406;
            _2520 = _2408;
            _2522 = _2410;
            _2524 = _2412;
            _2526 = _2414;
        }
        else
        {
            float _2541 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
            float _2542 = _2541 * _2258;
            float _2543 = _2541 * _2259;
            float _2544 = _2541 * _2260;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2655 = _2404;
                float _2656 = _2406;
                float _2657 = _2408;
                float _2658 = _2410;
                float _2659 = _2412;
                float _2660 = _2414;
                uint _2661 = _2421;
                uint _2670;
                bool _2671;
                for (;;)
                {
                    _2670 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                    _2671 = _2670 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2671)
                    {
                        frontier_phi_69_pred = _2660;
                        frontier_phi_69_pred_1 = _2659;
                        frontier_phi_69_pred_2 = _2658;
                        frontier_phi_69_pred_3 = _2657;
                        frontier_phi_69_pred_4 = _2656;
                        frontier_phi_69_pred_5 = _2655;
                    }
                    else
                    {
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        uint _2874 = _2670;
                        uint _2875;
                        vec4 _2900;
                        float _2901;
                        vec4 _2916;
                        vec3 _2928;
                        vec4 _2944;
                        vec4 _2960;
                        float _3007;
                        bool _3008;
                        for (;;)
                        {
                            uint _2885 = ((_2661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2874));
                            _2875 = (_2874 + 4294967295u) & _2874;
                            uint _2887 = _2885 * 40u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2901 = _2900.w;
                            uint _2903 = (_2885 * 40u) + 4u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2918 = (_2885 * 40u) + 8u;
                            _2928 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x));
                            uint _2931 = (_2885 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2885 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2885 * 40u) + 24u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2982 = (_2885 * 40u) + 28u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _3007 = fma(_2260, _2995.z, fma(_2259, _2995.y, _2995.x * _2258)) + _2995.w;
                            _3008 = !((fma(_2260, _2976.z, fma(_2259, _2976.y, _2976.x * _2258)) + _2976.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3008)
                            {
                                float _3035 = _2900.x - _2258;
                                float _3036 = _2900.y - _2259;
                                float _3037 = _2900.z - _2260;
                                float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                                float _3041 = inversesqrt(_3038);
                                float _3042 = _3041 * _3035;
                                float _3043 = _3041 * _3036;
                                float _3044 = _3041 * _3037;
                                float _3048 = 1.0 - (_3038 / (_2901 * _2901));
                                float _4086 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3053 = sqrt(_3038) * _2916.w;
                                float _3055 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                                float _3056 = _3055 * _3055;
                                float _3059 = ((1.0 - _3056) * dot(vec3(_3042, _3043, _3044), vec3(_532, _535, _538))) + _3056;
                                float _3062 = _3053 * _3053;
                                float _3066 = (fma(_2260, _2944.z, fma(_2259, _2944.y, _2944.x * _2258)) + _2944.w) / _3007;
                                float _3067 = (fma(_2260, _2960.z, fma(_2259, _2960.y, _2960.x * _2258)) + _2960.w) / _3007;
                                float _3071 = 1.0 - dot(vec2(_3066, _3067), vec2(_3066, _3067));
                                float _4102 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3073 = _3072 * (((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3049) / ((_3062 * 0.699999988079071044921875) + 1.0));
                                float _3085 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                                float _3086 = 1.0 - _593;
                                float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                                float _3094 = _3093 * _3093;
                                float _3095 = _3094 * _3094;
                                float _3096 = _3042 - _2542;
                                float _3097 = _3043 - _2543;
                                float _3098 = _3044 - _2544;
                                float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                                float _3106 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2542, (-0.0) - _2543, (-0.0) - _2544));
                                float _4113 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3110 = dot(vec3(_532, _535, _538), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                                float _4124 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                                float _3118 = _3055 * _3094;
                                float _3119 = _3118 * _3118;
                                float _3125 = ((1.0 - _3119) * dot(vec3(_532, _535, _538), vec3(_3042, _3043, _3044))) + _3119;
                                float _4135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3127 = 1.0 - _3094;
                                float _3137 = (0.5 / (((_3126 * ((_3109 * _3127) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3094) * _3109))) * _3126;
                                float _4146 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3147 = (_3072 * _3049) * (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) / ((_3117 * _3117) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3073 * _2916.z;
                                frontier_phi_75_pred_1 = _3073 * _2916.y;
                                frontier_phi_75_pred_2 = _3073 * _2916.x;
                                frontier_phi_75_pred_3 = _3147 * _2928.z;
                                frontier_phi_75_pred_4 = _3147 * _2928.y;
                                frontier_phi_75_pred_5 = _3147 * _2928.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3156 = frontier_phi_75_pred;
                            _3155 = frontier_phi_75_pred_1;
                            _3154 = frontier_phi_75_pred_2;
                            _3153 = frontier_phi_75_pred_3;
                            _3152 = frontier_phi_75_pred_4;
                            _3151 = frontier_phi_75_pred_5;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            if (_2875 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2875;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2860;
                        frontier_phi_69_pred_1 = _2859;
                        frontier_phi_69_pred_2 = _2858;
                        frontier_phi_69_pred_3 = _2857;
                        frontier_phi_69_pred_4 = _2856;
                        frontier_phi_69_pred_5 = _2855;
                    }
                    _2527 = frontier_phi_69_pred;
                    _2525 = frontier_phi_69_pred_1;
                    _2523 = frontier_phi_69_pred_2;
                    _2521 = frontier_phi_69_pred_3;
                    _2519 = frontier_phi_69_pred_4;
                    _2517 = frontier_phi_69_pred_5;
                    uint _2662 = _2661 + 1u;
                    if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2655 = _2517;
                        _2656 = _2519;
                        _2657 = _2521;
                        _2658 = _2523;
                        _2659 = _2525;
                        _2660 = _2527;
                        _2661 = _2662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2527;
                frontier_phi_57_58_ladder_1 = _2525;
                frontier_phi_57_58_ladder_2 = _2523;
                frontier_phi_57_58_ladder_3 = _2521;
                frontier_phi_57_58_ladder_4 = _2519;
                frontier_phi_57_58_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_57_58_ladder = _2414;
                frontier_phi_57_58_ladder_1 = _2412;
                frontier_phi_57_58_ladder_2 = _2410;
                frontier_phi_57_58_ladder_3 = _2408;
                frontier_phi_57_58_ladder_4 = _2406;
                frontier_phi_57_58_ladder_5 = _2404;
            }
            _2516 = frontier_phi_57_58_ladder_5;
            _2518 = frontier_phi_57_58_ladder_4;
            _2520 = frontier_phi_57_58_ladder_3;
            _2522 = frontier_phi_57_58_ladder_2;
            _2524 = frontier_phi_57_58_ladder_1;
            _2526 = frontier_phi_57_58_ladder;
        }
        float _2531 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
        _2316 = (_2531 * _2522) + _1769;
        _2318 = (_2531 * _2524) + _1771;
        _2320 = (_2531 * _2526) + _1773;
        _2322 = ((_2516 * 0.039999999105930328369140625) * _2531) + _2102;
        _2324 = ((_2518 * 0.039999999105930328369140625) * _2531) + _2104;
        _2326 = ((_2520 * 0.039999999105930328369140625) * _2531) + _2106;
    }
    else
    {
        _2316 = _1769;
        _2318 = _1771;
        _2320 = _1773;
        _2322 = _2102;
        _2324 = _2104;
        _2326 = _2106;
    }
    float _4162 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4173 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4184 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    uint _2346 = _551 + 6u;
    float _2354 = _511 / cbSceneParam._m0[86u].x;
    float _2355 = _512 / cbSceneParam._m0[86u].y;
    vec4 _2369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, (log2((isnan(cbSceneParam._m0[77u].w) ? _445 : (isnan(_445) ? cbSceneParam._m0[77u].w : min(_445, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2371 = _2369.x;
    float _2372 = _2369.y;
    float _2373 = _2369.z;
    float _2374 = _2369.w;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_445 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_445) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _445 : min(cbSceneParam._m0[80u].w, _445));
        float _2430 = _2429 / _445;
        float _2441 = _2430 * _496;
        float _2442 = _497 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2444 = _2430 * _498;
        float _2446 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2447 = _2446 + cbSceneParam._m0[79u].w;
        float _2448 = cbSceneParam._m0[79u].w - _2442;
        float _2454 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2444 * _2444));
        float _2457 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2454;
        float _2462 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2464 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2617;
        if (abs((_2443 - _2446) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2617 = ((((_2447 > 0.0) ? exp2(_2462 * _2447) : (2.0 - exp2(_2464 * _2447))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2457;
        }
        else
        {
            float _2577 = 1.0 / cbSceneParam._m0[80u].x;
            float _2578 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : max(_2447, _2448));
            float _2579 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : min(_2447, _2448));
            float _2588 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : min(_2578, 0.0));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            _2617 = ((abs(_2454 / _2443) * cbSceneParam._m0[80u].y) * ((((_2588 - _2589) * 2.0) - ((exp2(_2462 * (isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0)))) - exp2(_2462 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))))) * _2577)) - ((exp2(_2464 * _2588) - exp2(_2464 * _2589)) * _2577))) + (_2457 * cbSceneParam._m0[80u].z);
        }
        vec4 _2619 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, 1.0), 0.0);
        float _2628 = exp2((_2617 * (-1.44269502162933349609375)) * (1.0 - _2619.w));
        float _2629 = log2(_2628);
        float _2645 = log2(_2374);
        _2466 = (exp2(_2645 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].x)) * _2619.x) / cbSceneParam._m0[78u].x)) + _2371;
        _2468 = (exp2(_2645 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].y)) * _2619.y) / cbSceneParam._m0[78u].y)) + _2372;
        _2470 = (exp2(_2645 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2629 * cbSceneParam._m0[78u].z)) * _2619.z) / cbSceneParam._m0[78u].z)) + _2373;
        _2472 = _2628 * _2374;
    }
    else
    {
        _2466 = _2371;
        _2468 = _2372;
        _2470 = _2373;
        _2472 = _2374;
    }
    float _2484 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2485 = _2484 == 3.0;
    float _2486 = log2(_2472);
    float _2493 = exp2(_2486 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2316 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _577))) + ((_2322 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1384)) * cbPerFrame._m0[3u].x));
    float _2494 = exp2(_2486 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2318 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _577))) + ((_2324 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1384)) * cbPerFrame._m0[3u].x));
    float _2495 = exp2(_2486 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2320 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _577))) + ((_2326 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1384)) * cbPerFrame._m0[3u].x));
    float _2504 = (_2484 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2504 * (_2485 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2466)));
    SV_Target.y = _2504 * (_2485 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2468)));
    SV_Target.z = _2504 * (_2485 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2470)));
    SV_Target.w = cbInstanceData._m0[_2346].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2346].w;
}


