#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _951;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    vec4 _258 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _315 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3548 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _323 = (_316 * ((_285.x * cbMtdParam._m0[10u].x) - _264)) + _264;
    float _324 = (_316 * ((_285.y * cbMtdParam._m0[10u].y) - _265)) + _265;
    float _325 = (_316 * ((_285.z * cbMtdParam._m0[10u].z) - _266)) + _266;
    vec4 _338 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    vec4 _376 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _389 = ((_376.z - _364) * _316) + _364;
    float _392 = ((((_376.x - _362) * _316) + _362) * 2.0) + (-1.0);
    float _393 = ((((_376.y - _363) * _316) + _363) * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3559 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    float _404 = (((_338.z - _389) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _389;
    float _410 = ((((_338.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _392;
    float _411 = ((((_338.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _393;
    float _414 = fma(_399, _231, fma(_411, _223 * TANGENT.x, (_209 * _201) * _410));
    float _417 = fma(_399, _232, fma(_411, _223 * TANGENT.y, (_209 * _202) * _410));
    float _420 = fma(_399, _233, fma(_411, _223 * TANGENT.z, (_209 * _203) * _410));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _3570 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _428 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3592 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3603 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _447 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _534 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _537 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _540 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _556 = (_553 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _562 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_556].x;
    float _563 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_556].y;
    float _564 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_556].z;
    float _3614 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    vec4 _576 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _579 = _576.x * TEXCOORD_5.w;
    float _580 = dot(vec3(_425, _426, _427), vec3(_505, _506, _507));
    float _583 = _580 * 2.0;
    float _587 = (_583 * _425) - _505;
    float _588 = (_583 * _426) - _506;
    float _589 = (_583 * _427) - _507;
    float _593 = abs(dot(vec3(_505, _506, _507), vec3(_425, _426, _427)));
    float _3647 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _595 = sqrt(_428);
    float _608 = exp2((_595 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_595 * 3.0));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _950;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = fma(_648, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640));
        float _679 = fma(_648, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640));
        float _683 = fma(_648, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640));
        float _708 = _640 + _425;
        float _709 = _644 + _426;
        float _710 = _648 + _427;
        float _720 = fma(_710, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708)) - _675;
        float _721 = fma(_710, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708)) - _679;
        float _722 = fma(_710, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708)) - _683;
        float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
        float _739 = ((_726 * _720) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_675 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_726 * _721) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_679 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_726 * _722) / cbModelParam._m0[34u].z) + ((((((_683 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        float _778 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_744.x + (-0.5));
        float _780 = _778 * (_744.y + (-0.5));
        float _781 = _778 * (_744.z + (-0.5));
        float _788 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_751.x + (-0.5));
        float _790 = _788 * (_751.y + (-0.5));
        float _791 = _788 * (_751.z + (-0.5));
        float _798 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_758.x + (-0.5));
        float _800 = _798 * (_758.y + (-0.5));
        float _801 = _798 * (_758.z + (-0.5));
        float _808 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_765.x + (-0.5));
        float _810 = _808 * (_765.y + (-0.5));
        float _811 = _808 * (_765.z + (-0.5));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = _779 * 0.5;
        float _816 = _789 * 0.5;
        float _817 = _799 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _832 = (dot(vec3(_425, _426, _427), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _842 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3695 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_844 + 1.0))) + _849) * _812;
        float _859 = _780 * 0.5;
        float _860 = _790 * 0.5;
        float _861 = _800 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_425, _426, _427), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3728 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_886 + 1.0))) + _891) * _813;
        float _901 = _781 * 0.5;
        float _902 = _791 * 0.5;
        float _903 = _801 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_425, _426, _427), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3761 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_928 + 1.0))) + _933) * _814;
        _950 = _781;
        _952 = _780;
        _953 = _779;
        _954 = _791;
        _955 = _790;
        _956 = _789;
        _957 = _801;
        _958 = _800;
        _959 = _799;
        _960 = _814;
        _961 = _813;
        _962 = _812;
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
    }
    else
    {
        _950 = _951;
        _952 = _951;
        _953 = _951;
        _954 = _951;
        _955 = _951;
        _956 = _951;
        _957 = _951;
        _958 = _951;
        _959 = _951;
        _960 = _951;
        _961 = _951;
        _962 = _951;
        _963 = 0.0;
        _964 = 0.0;
        _965 = 0.0;
    }
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _991 = fma(_648, cbModelParam._m0[30u].z, fma(_644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _640));
        float _995 = fma(_648, cbModelParam._m0[31u].z, fma(_644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _640));
        float _999 = fma(_648, cbModelParam._m0[32u].z, fma(_644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _640));
        float _1022 = _640 + _425;
        float _1023 = _644 + _426;
        float _1024 = _648 + _427;
        float _1034 = fma(_1024, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022)) - _991;
        float _1035 = fma(_1024, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022)) - _995;
        float _1036 = fma(_1024, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022)) - _999;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_991 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_995 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[35u].z) + ((((((_999 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1090 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1057.x + (-0.5));
        float _1092 = _1090 * (_1057.y + (-0.5));
        float _1093 = _1090 * (_1057.z + (-0.5));
        float _1100 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1064.x + (-0.5));
        float _1102 = _1100 * (_1064.y + (-0.5));
        float _1103 = _1100 * (_1064.z + (-0.5));
        float _1110 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1071.x + (-0.5));
        float _1112 = _1110 * (_1071.y + (-0.5));
        float _1113 = _1110 * (_1071.z + (-0.5));
        float _1120 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1078.x + (-0.5));
        float _1122 = _1120 * (_1078.y + (-0.5));
        float _1123 = _1120 * (_1078.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_425, _426, _427), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3824 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1154 + 1.0))) + _1159) * _1124;
        float _1169 = _1092 * 0.5;
        float _1170 = _1102 * 0.5;
        float _1171 = _1112 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_425, _426, _427), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3857 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1196 + 1.0))) + _1201) * _1125;
        float _1211 = _1093 * 0.5;
        float _1212 = _1103 * 0.5;
        float _1213 = _1113 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_425, _426, _427), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3890 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1238 + 1.0))) + _1243) * _1126;
        _1260 = _1093;
        _1261 = _1092;
        _1262 = _1091;
        _1263 = _1103;
        _1264 = _1102;
        _1265 = _1101;
        _1266 = _1113;
        _1267 = _1112;
        _1268 = _1111;
        _1269 = _1126;
        _1270 = _1125;
        _1271 = _1124;
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _951;
        _1261 = _951;
        _1262 = _951;
        _1263 = _951;
        _1264 = _951;
        _1265 = _951;
        _1266 = _951;
        _1267 = _951;
        _1268 = _951;
        _1269 = _951;
        _1270 = _951;
        _1271 = _951;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _965)) + _965;
    float _1307 = fma(_1286, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1284 * cbSceneParam._m0[89u].x));
    float _1310 = fma(_1286, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1284 * cbSceneParam._m0[90u].x));
    float _1313 = fma(_1286, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1284));
    float _1328 = _587 * 0.5;
    float _1329 = _588 * 0.5;
    float _1330 = _589 * 0.5;
    float _1331 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1334 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1337 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1371;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1344 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_950, _954, _957, _960));
        float _1348 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_952, _955, _958, _961));
        float _1352 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_953, _956, _959, _962));
        float _1359 = dot(vec4(cbModelParam._m0[39u]), vec4(_1328, _1329, _1330, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1382;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1373 = dot(vec4(cbModelParam._m0[40u]), vec4(_1328, _1329, _1330, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1386 = (_1382 * cbModelParam._m0[1u].x) + (_1371 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _428);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1396 : min(cbModelParam._m0[25u].z, _1396));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1446 = fma(_648, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640)) + cbModelParam._m0[13u].w;
        float _1450 = fma(_648, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640)) + cbModelParam._m0[14u].w;
        float _1454 = fma(_648, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640)) + cbModelParam._m0[15u].w;
        float _1457 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1460 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1463 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1491;
        if (_1457 > 0.0)
        {
            _1491 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1491 = frontier_phi_16_14_ladder;
        }
        float _1664;
        if (_1460 > 0.0)
        {
            _1664 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1664 = frontier_phi_25_21_ladder;
        }
        float _1959;
        if (_1463 > 0.0)
        {
            _1959 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1959 = frontier_phi_37_32_ladder;
        }
        float _1961 = isnan(_1664) ? _1491 : (isnan(_1491) ? _1664 : min(_1491, _1664));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1457) + _1446;
        float _1967 = (_1962 * _1460) + _1450;
        float _1968 = (_1962 * _1463) + _1454;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_15_37_ladder = _2113.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2113.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2113.z * cbModelParam._m0[1u].y;
        }
        _1479 = frontier_phi_15_37_ladder_1;
        _1481 = frontier_phi_15_37_ladder;
        _1483 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _1397);
        _1479 = _1467.x * cbModelParam._m0[1u].y;
        _1481 = _1467.y * cbModelParam._m0[1u].y;
        _1483 = _1467.z * cbModelParam._m0[1u].y;
    }
    float _1487 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _428);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1487 : min(cbModelParam._m0[25u].w, _1487));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1545 = fma(_648, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640)) + cbModelParam._m0[21u].w;
        float _1549 = fma(_648, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640)) + cbModelParam._m0[22u].w;
        float _1553 = fma(_648, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640)) + cbModelParam._m0[23u].w;
        float _1556 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1559 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1562 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1669;
        if (_1556 > 0.0)
        {
            _1669 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1669 = frontier_phi_27_23_ladder;
        }
        float _1986;
        if (_1559 > 0.0)
        {
            _1986 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1986 = frontier_phi_39_34_ladder;
        }
        float _2313;
        if (_1562 > 0.0)
        {
            _2313 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2313 = frontier_phi_49_46_ladder;
        }
        float _2315 = isnan(_1986) ? _1669 : (isnan(_1669) ? _1986 : min(_1669, _1986));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1556) + _1545;
        float _2321 = (_2316 * _1559) + _1549;
        float _2322 = (_2316 * _1562) + _1553;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1488);
            frontier_phi_24_49_ladder = _2440.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2440.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2440.x * cbModelParam._m0[1u].z;
        }
        _1581 = frontier_phi_24_49_ladder_2;
        _1583 = frontier_phi_24_49_ladder_1;
        _1585 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1488);
        _1581 = _1565.x * cbModelParam._m0[1u].z;
        _1583 = _1565.y * cbModelParam._m0[1u].z;
        _1585 = _1565.z * cbModelParam._m0[1u].z;
    }
    float _1597 = ((((1.0 - _608) * ((_595 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_608 * _595)) * _579;
    float _1598 = _1597 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1599 = _1597 * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1600 = _1597 * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1603 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1598 * cbSceneParam._m0[91u].x));
    float _1643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1647 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1651 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1655 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1656 = _1643 / _1655;
    float _1657 = _1647 / _1655;
    float _1658 = _1651 / _1655;
    float _1805;
    float _1806;
    float _1807;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1685 = ((uint(_1658 > cbSceneParam._m0[59u].y) + uint(_1658 > cbSceneParam._m0[59u].x)) + uint(_1658 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1686 = _1685 + 43u;
        uint _1694 = _1685 + 44u;
        uint _1702 = _1685 + 45u;
        uint _1710 = _1685 + 46u;
        float _1721 = fma(_1655, cbSceneParam._m0[_1686].w, fma(_1651, cbSceneParam._m0[_1686].z, fma(_1647, cbSceneParam._m0[_1686].y, _1643 * cbSceneParam._m0[_1686].x)));
        float _1725 = fma(_1655, cbSceneParam._m0[_1694].w, fma(_1651, cbSceneParam._m0[_1694].z, fma(_1647, cbSceneParam._m0[_1694].y, _1643 * cbSceneParam._m0[_1694].x)));
        float _1733 = fma(_1655, cbSceneParam._m0[_1710].w, fma(_1651, cbSceneParam._m0[_1710].z, fma(_1647, cbSceneParam._m0[_1710].y, _1643 * cbSceneParam._m0[_1710].x)));
        float _1738 = cbSceneParam._m0[33u].z * _1733;
        float _1740 = cbSceneParam._m0[33u].w * _1733;
        float _1743 = fma(_1655, cbSceneParam._m0[_1702].w, fma(_1651, cbSceneParam._m0[_1702].z, fma(_1647, cbSceneParam._m0[_1702].y, _1643 * cbSceneParam._m0[_1702].x))) / _1733;
        float _1791 = (cbSceneParam._m0[33u].x - sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658))) * cbSceneParam._m0[33u].y;
        float _4016 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1798 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1738 + _1721) / _1733, (_1740 + _1725) / _1733), _1743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1740 + _1721) / _1733, (_1725 - _1738) / _1733), _1743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 - _1738) / _1733, (_1725 - _1740) / _1733), _1743), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 - _1740) / _1733, (_1738 + _1725) / _1733), _1743), 0.0)).x), vec4(0.25)));
        _1805 = 1.0 - (_1798 * cbSceneParam._m0[34u].x);
        _1806 = 1.0 - (_1798 * cbSceneParam._m0[34u].y);
        _1807 = 1.0 - (_1798 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1805 = 1.0;
        _1806 = 1.0;
        _1807 = 1.0;
    }
    float _1871;
    float _1873;
    float _1875;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1859 = fma(_1655, cbSceneParam._m0[63u].w, fma(_1651, cbSceneParam._m0[63u].z, fma(_1647, cbSceneParam._m0[63u].y, _1643 * cbSceneParam._m0[63u].x)));
        float _1860 = fma(_1655, cbSceneParam._m0[60u].w, fma(_1651, cbSceneParam._m0[60u].z, fma(_1647, cbSceneParam._m0[60u].y, _1643 * cbSceneParam._m0[60u].x))) / _1859;
        float _1861 = fma(_1655, cbSceneParam._m0[61u].w, fma(_1651, cbSceneParam._m0[61u].z, fma(_1647, cbSceneParam._m0[61u].y, _1643 * cbSceneParam._m0[61u].x))) / _1859;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1860 >= cbSceneParam._m0[64u].x) && (_1861 >= cbSceneParam._m0[64u].y)) && (_1860 <= cbSceneParam._m0[64u].z)) && (_1861 <= cbSceneParam._m0[64u].w))
        {
            float _1999 = fma(_1655, cbSceneParam._m0[62u].w, fma(_1651, cbSceneParam._m0[62u].z, fma(_1647, cbSceneParam._m0[62u].y, _1643 * cbSceneParam._m0[62u].x))) / _1859;
            float _2003 = isnan(cbSceneParam._m0[41u].w) ? _1999 : (isnan(_1999) ? cbSceneParam._m0[41u].w : max(_1999, cbSceneParam._m0[41u].w));
            float _2046 = (cbSceneParam._m0[33u].x - sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658))) * cbSceneParam._m0[33u].y;
            float _4032 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
            float _2053 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1860, cbSceneParam._m0[33u].w + _1861), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1860, _1861 - cbSceneParam._m0[33u].z), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1860 - cbSceneParam._m0[33u].z, _1861 - cbSceneParam._m0[33u].w), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1860 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1861), _2003), 0.0)).x), vec4(0.25)));
            float _2057 = 1.0 - (_2053 * cbSceneParam._m0[34u].x);
            float _2058 = 1.0 - (_2053 * cbSceneParam._m0[34u].y);
            float _2059 = 1.0 - (_2053 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2058) ? _1806 : (isnan(_1806) ? _2058 : min(_1806, _2058));
            frontier_phi_36_35_ladder_1 = isnan(_2059) ? _1807 : (isnan(_1807) ? _2059 : min(_1807, _2059));
            frontier_phi_36_35_ladder_2 = isnan(_2057) ? _1805 : (isnan(_1805) ? _2057 : min(_1805, _2057));
        }
        else
        {
            frontier_phi_36_35_ladder = _1806;
            frontier_phi_36_35_ladder_1 = _1807;
            frontier_phi_36_35_ladder_2 = _1805;
        }
        _1871 = frontier_phi_36_35_ladder_2;
        _1873 = frontier_phi_36_35_ladder;
        _1875 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1871 = _1805;
        _1873 = _1806;
        _1875 = _1807;
    }
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _579 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1918 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1922 = _1882 | 1u;
    float _1933 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_425, _426, _427));
    float _1936 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_425, _426, _427));
    float _4068 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _4079 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1941 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1943 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1950 = ((cbLight._m0[_1899].x * _1905) * _1943) + (((cbLight._m0[_1909].x * _1871) * _1918) * _1941);
    float _1951 = ((_1905 * cbLight._m0[_1899].y) * _1943) + (((cbLight._m0[_1909].y * _1873) * _1918) * _1941);
    float _1952 = ((_1905 * cbLight._m0[_1899].z) * _1943) + (((cbLight._m0[_1909].z * _1875) * _1918) * _1941);
    uvec4 _1956 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1958 = _1956.x == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_1958)
    {
        _2060 = _1950;
        _2062 = _1951;
        _2064 = _1952;
    }
    else
    {
        uint _2068 = _1882 + 6u;
        float _2084 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _4090 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2087 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2060 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _1950;
        _2062 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _1951;
        _2064 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _1952;
    }
    bool _2067 = _1956.y == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2067)
    {
        _2122 = _2060;
        _2124 = _2062;
        _2126 = _2064;
    }
    else
    {
        uint _2284 = _1882 + 7u;
        float _2300 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4106 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2303 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2122 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2060;
        _2124 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2062;
        _2126 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2064;
    }
    uint _2129 = _1882 + 8u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _428) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1882].x + _505;
    float _2145 = cbLight._m0[_1882].y + _506;
    float _2146 = cbLight._m0[_1882].z + _507;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1882].xyz));
    float _4122 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2158 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2159 = dot(vec3(_425, _426, _427), vec3(_2151, _2152, _2153));
    float _4144 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2151, _2152, _2153));
    float _4155 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2143 * _2143;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2183 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2158 * ((_2157 * _2183) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2183) + _2143) * _2157))) * _2157;
    float _4166 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    uint _2210 = _1882 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _428) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_1922].x + _505;
    float _2224 = cbLight._m0[_1922].y + _506;
    float _2225 = cbLight._m0[_1922].z + _507;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1922].xyz));
    float _4177 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2237 = dot(vec3(_425, _426, _427), vec3(_2230, _2231, _2232));
    float _4188 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2230, _2231, _2232));
    float _4199 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2258 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2259 = 1.0 - _2222;
    float _2269 = (0.5 / (((_2158 * ((_2236 * _2259) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2259) + _2222) * _2236))) * _2236;
    float _4210 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2281 = (((_2258 * cbLight._m0[_2210].x) * _2271) * _1905) + ((((cbLight._m0[_2129].x * _1871) * _2182) * _2196) * _1918);
    float _2282 = (((_2258 * cbLight._m0[_2210].y) * _2271) * _1905) + ((((cbLight._m0[_2129].y * _1873) * _2182) * _2196) * _1918);
    float _2283 = (((_2258 * cbLight._m0[_2210].z) * _2271) * _1905) + ((((cbLight._m0[_2129].z * _1875) * _2182) * _2196) * _1918);
    float _2339;
    float _2341;
    float _2343;
    if (_1958)
    {
        _2339 = _2281;
        _2341 = _2282;
        _2343 = _2283;
    }
    else
    {
        uint _2345 = _1882 + 2u;
        uint _2349 = _1882 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _428) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _505;
        float _2366 = cbLight._m0[_2345].y + _506;
        float _2367 = cbLight._m0[_2345].z + _507;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2345].xyz));
        float _4221 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2379 = dot(vec3(_425, _426, _427), vec3(_2372, _2373, _2374));
        float _4232 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4243 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2401 = 1.0 - _2364;
        float _2411 = (0.5 / (((_2158 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2401) + _2364) * _2378))) * _2378;
        float _4254 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2339 = (((_2400 * cbLight._m0[_2349].x) * _2413) * _2414) + _2281;
        _2341 = (((_2400 * cbLight._m0[_2349].y) * _2413) * _2414) + _2282;
        _2343 = (((_2400 * cbLight._m0[_2349].z) * _2413) * _2414) + _2283;
    }
    float _2445;
    float _2447;
    float _2449;
    if (_2067)
    {
        _2445 = _2339;
        _2447 = _2341;
        _2449 = _2343;
    }
    else
    {
        uint _2456 = _1882 + 3u;
        uint _2460 = _1882 + 11u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _428) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _505;
        float _2477 = cbLight._m0[_2456].y + _506;
        float _2478 = cbLight._m0[_2456].z + _507;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2456].xyz));
        float _4270 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2490 = dot(vec3(_425, _426, _427), vec3(_2483, _2484, _2485));
        float _4281 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4292 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2511 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2512 = 1.0 - _2475;
        float _2522 = (0.5 / (((_2158 * ((_2489 * _2512) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2512) + _2475) * _2489))) * _2489;
        float _4303 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2445 = (((_2511 * cbLight._m0[_2460].x) * _2524) * _2525) + _2339;
        _2447 = (((_2511 * cbLight._m0[_2460].y) * _2524) * _2525) + _2341;
        _2449 = (((_2511 * cbLight._m0[_2460].z) * _2524) * _2525) + _2343;
    }
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_1880.y == 0u)
    {
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.x;
        uint _2558 = uint((float(_2546.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2547))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2547)));
        float _2568 = (log2(_1658 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2569 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        uint _2572 = uint(isnan(14.0) ? _2569 : (isnan(_2569) ? 14.0 : min(_2569, 14.0)));
        uvec4 _2577 = texelFetch(g_lightClusterGridBuffer, int(((_2572 << 2u) + (_2558 << 6u)) >> 2u));
        uint _2578 = _2577.x;
        uint _2579 = _2546.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2579 >> 4u) & 15u)) + 4294967295u) & _2578) == 0u) || ((_2579 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2817)
                {
                    frontier_phi_68_pred = _2806;
                    frontier_phi_68_pred_1 = _2805;
                    frontier_phi_68_pred_2 = _2804;
                    frontier_phi_68_pred_3 = _2802;
                    frontier_phi_68_pred_4 = _2801;
                    frontier_phi_68_pred_5 = _2803;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2816;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2807 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _1656;
                        float _2992 = _2951.y - _1657;
                        float _2993 = _2951.z - _1658;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_534, _537, _540), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4329 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _1656;
                        float _3027 = (-0.0) - _1657;
                        float _3028 = (-0.0) - _1658;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3042 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3043 = 1.0 - _595;
                        float _3050 = sqrt(1.0 - ((1.0 - (_3043 * _3043)) * (1.0 - (_3042 * _3042))));
                        float _3051 = _3050 * _3050;
                        float _3052 = _3051 * _3051;
                        float _3053 = _3033 + _2998;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3063 = dot(vec3(_534, _537, _540), vec3(_3033, _3034, _3035));
                        float _4345 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3067 = dot(vec3(_534, _537, _540), vec3(_3059 * _3053, _3059 * _3054, _3059 * _3055));
                        float _4356 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3070 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3074 = ((_3070 * _3070) * (_3052 + (-1.0))) + 1.0;
                        float _3075 = _3011 * _3051;
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3001) + _3076;
                        float _4367 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3081 = 1.0 - _3051;
                        float _3091 = (0.5 / (((_3080 * ((_3066 * _3081) + _3051)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3051) * _3066))) * _3080;
                        float _4378 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3102 = (((_3052 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3074 * _3074) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2860 = (_3022 * _2970.x) + _2928;
                        _2861 = (_3022 * _2970.y) + _2929;
                        _2862 = (_3022 * _2970.z) + _2930;
                        _2857 = (_3102 * _2987.x) + _2925;
                        _2858 = (_3102 * _2987.y) + _2926;
                        _2859 = (_3102 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_68_pred = _2862;
                    frontier_phi_68_pred_1 = _2861;
                    frontier_phi_68_pred_2 = _2860;
                    frontier_phi_68_pred_3 = _2858;
                    frontier_phi_68_pred_4 = _2857;
                    frontier_phi_68_pred_5 = _2859;
                }
                _2668 = frontier_phi_68_pred;
                _2666 = frontier_phi_68_pred_1;
                _2664 = frontier_phi_68_pred_2;
                _2660 = frontier_phi_68_pred_3;
                _2658 = frontier_phi_68_pred_4;
                _2662 = frontier_phi_68_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2658;
                    _2802 = _2660;
                    _2803 = _2662;
                    _2804 = _2664;
                    _2805 = _2666;
                    _2806 = _2668;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2674) & _2578) == 0u)
        {
            _2769 = _2657;
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
            float _2795 = _2794 * _1656;
            float _2796 = _2794 * _1657;
            float _2797 = _2794 * _1658;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2908 = _2657;
                float _2909 = _2659;
                float _2910 = _2661;
                float _2911 = _2663;
                float _2912 = _2665;
                float _2913 = _2667;
                uint _2914 = _2674;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2924)
                    {
                        frontier_phi_74_pred = _2910;
                        frontier_phi_74_pred_1 = _2909;
                        frontier_phi_74_pred_2 = _2908;
                        frontier_phi_74_pred_3 = _2913;
                        frontier_phi_74_pred_4 = _2912;
                        frontier_phi_74_pred_5 = _2911;
                    }
                    else
                    {
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3120 = _2908;
                        float _3121 = _2909;
                        float _3122 = _2910;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        uint _3126 = _2923;
                        uint _3127;
                        vec4 _3152;
                        float _3153;
                        vec4 _3168;
                        vec3 _3180;
                        vec4 _3196;
                        vec4 _3212;
                        float _3259;
                        bool _3260;
                        for (;;)
                        {
                            uint _3137 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3126));
                            _3127 = (_3126 + 4294967295u) & _3126;
                            uint _3139 = _3137 * 40u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3153 = _3152.w;
                            uint _3155 = (_3137 * 40u) + 4u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3137 * 40u) + 8u;
                            _3180 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x));
                            uint _3183 = (_3137 * 40u) + 16u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3137 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3137 * 40u) + 24u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3234 = (_3137 * 40u) + 28u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3259 = fma(_1658, _3247.z, fma(_1657, _3247.y, _3247.x * _1656)) + _3247.w;
                            _3260 = !((fma(_1658, _3228.z, fma(_1657, _3228.y, _3228.x * _1656)) + _3228.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3260)
                            {
                                float _3287 = _3152.x - _1656;
                                float _3288 = _3152.y - _1657;
                                float _3289 = _3152.z - _1658;
                                float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                                float _3293 = inversesqrt(_3290);
                                float _3294 = _3293 * _3287;
                                float _3295 = _3293 * _3288;
                                float _3296 = _3293 * _3289;
                                float _3300 = 1.0 - (_3290 / (_3153 * _3153));
                                float _4389 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3305 = sqrt(_3290) * _3168.w;
                                float _3307 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                                float _3308 = _3307 * _3307;
                                float _3311 = ((1.0 - _3308) * dot(vec3(_3294, _3295, _3296), vec3(_534, _537, _540))) + _3308;
                                float _3314 = _3305 * _3305;
                                float _3318 = (fma(_1658, _3196.z, fma(_1657, _3196.y, _3196.x * _1656)) + _3196.w) / _3259;
                                float _3319 = (fma(_1658, _3212.z, fma(_1657, _3212.y, _3212.x * _1656)) + _3212.w) / _3259;
                                float _3323 = 1.0 - dot(vec2(_3318, _3319), vec2(_3318, _3319));
                                float _4405 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3325 = _3324 * (((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3301) / ((_3314 * 0.699999988079071044921875) + 1.0));
                                float _3337 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                                float _3338 = 1.0 - _595;
                                float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                                float _3346 = _3345 * _3345;
                                float _3347 = _3346 * _3346;
                                float _3348 = _3294 - _2795;
                                float _3349 = _3295 - _2796;
                                float _3350 = _3296 - _2797;
                                float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                                float _3358 = dot(vec3(_534, _537, _540), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4416 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3362 = dot(vec3(_534, _537, _540), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                                float _4427 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                                float _3370 = _3307 * _3346;
                                float _3371 = _3370 * _3370;
                                float _3377 = ((1.0 - _3371) * dot(vec3(_534, _537, _540), vec3(_3294, _3295, _3296))) + _3371;
                                float _4438 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3379 = 1.0 - _3346;
                                float _3389 = (0.5 / (((_3378 * ((_3361 * _3379) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3346) * _3361))) * _3378;
                                float _4449 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3399 = (_3324 * _3301) * (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3369 * _3369) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3399 * _3180.z;
                                frontier_phi_80_pred_1 = _3399 * _3180.y;
                                frontier_phi_80_pred_2 = _3399 * _3180.x;
                                frontier_phi_80_pred_3 = _3325 * _3168.z;
                                frontier_phi_80_pred_4 = _3325 * _3168.y;
                                frontier_phi_80_pred_5 = _3325 * _3168.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3405 = frontier_phi_80_pred;
                            _3404 = frontier_phi_80_pred_1;
                            _3403 = frontier_phi_80_pred_2;
                            _3408 = frontier_phi_80_pred_3;
                            _3407 = frontier_phi_80_pred_4;
                            _3406 = frontier_phi_80_pred_5;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            _3107 = _3403 + _3120;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            if (_3127 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3127;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3109;
                        frontier_phi_74_pred_1 = _3108;
                        frontier_phi_74_pred_2 = _3107;
                        frontier_phi_74_pred_3 = _3112;
                        frontier_phi_74_pred_4 = _3111;
                        frontier_phi_74_pred_5 = _3110;
                    }
                    _2774 = frontier_phi_74_pred;
                    _2772 = frontier_phi_74_pred_1;
                    _2770 = frontier_phi_74_pred_2;
                    _2780 = frontier_phi_74_pred_3;
                    _2778 = frontier_phi_74_pred_4;
                    _2776 = frontier_phi_74_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2770;
                        _2909 = _2772;
                        _2910 = _2774;
                        _2911 = _2776;
                        _2912 = _2778;
                        _2913 = _2780;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2778;
                frontier_phi_62_63_ladder_1 = _2776;
                frontier_phi_62_63_ladder_2 = _2774;
                frontier_phi_62_63_ladder_3 = _2780;
                frontier_phi_62_63_ladder_4 = _2772;
                frontier_phi_62_63_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_62_63_ladder = _2665;
                frontier_phi_62_63_ladder_1 = _2663;
                frontier_phi_62_63_ladder_2 = _2661;
                frontier_phi_62_63_ladder_3 = _2667;
                frontier_phi_62_63_ladder_4 = _2659;
                frontier_phi_62_63_ladder_5 = _2657;
            }
            _2769 = frontier_phi_62_63_ladder_5;
            _2771 = frontier_phi_62_63_ladder_4;
            _2773 = frontier_phi_62_63_ladder_2;
            _2775 = frontier_phi_62_63_ladder_1;
            _2777 = frontier_phi_62_63_ladder;
            _2779 = frontier_phi_62_63_ladder_3;
        }
        float _2784 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
        _2590 = (_2784 * _2775) + _2122;
        _2592 = (_2784 * _2777) + _2124;
        _2594 = (_2784 * _2779) + _2126;
        _2596 = ((_2769 * 0.039999999105930328369140625) * _2784) + _2445;
        _2598 = ((_2771 * 0.039999999105930328369140625) * _2784) + _2447;
        _2600 = ((_2773 * 0.039999999105930328369140625) * _2784) + _2449;
    }
    else
    {
        _2590 = _2122;
        _2592 = _2124;
        _2594 = _2126;
        _2596 = _2445;
        _2598 = _2447;
        _2600 = _2449;
    }
    float _4465 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4476 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4487 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    uint _2620 = _553 + 6u;
    float _2628 = _513 / cbSceneParam._m0[86u].x;
    float _2629 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2643 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, (log2((isnan(cbSceneParam._m0[77u].w) ? _447 : (isnan(_447) ? cbSceneParam._m0[77u].w : min(_447, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2645 = _2643.x;
    float _2646 = _2643.y;
    float _2647 = _2643.z;
    float _2648 = _2643.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_447 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_447) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _447 : min(cbSceneParam._m0[80u].w, _447));
        float _2683 = _2682 / _447;
        float _2694 = _2683 * _498;
        float _2695 = _499 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2697 = _2683 * _500;
        float _2699 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2695;
        float _2707 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2696 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2832 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2870 = ((abs(_2707 / _2696) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2717 * _2841) - exp2(_2717 * _2842)) * _2830))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2648);
        _2719 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2645;
        _2721 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2646;
        _2723 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2647;
        _2725 = _2881 * _2648;
    }
    else
    {
        _2719 = _2645;
        _2721 = _2646;
        _2723 = _2647;
        _2725 = _2648;
    }
    float _2737 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2738 = _2737 == 3.0;
    float _2739 = log2(_2725);
    float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2590 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _579))) + ((_2596 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2592 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _579))) + ((_2598 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2594 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _579))) + ((_2600 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2757 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2757 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.y = _2757 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.z = _2757 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.w = cbInstanceData._m0[_2620].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2620].w;
}


