#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _947;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    vec4 _254 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _254.x * cbMtdParam._m0[9u].x;
    float _261 = _254.y * cbMtdParam._m0[9u].y;
    float _262 = _254.z * cbMtdParam._m0[9u].z;
    vec4 _281 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3261 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _319 = (_312 * ((_281.x * cbMtdParam._m0[10u].x) - _260)) + _260;
    float _320 = (_312 * ((_281.y * cbMtdParam._m0[10u].y) - _261)) + _261;
    float _321 = (_312 * ((_281.z * cbMtdParam._m0[10u].z) - _262)) + _262;
    vec4 _334 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _358 = _356.x;
    float _359 = _356.y;
    float _360 = _356.z;
    vec4 _372 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _385 = ((_372.z - _360) * _312) + _360;
    float _388 = ((((_372.x - _358) * _312) + _358) * 2.0) + (-1.0);
    float _389 = ((((_372.y - _359) * _312) + _359) * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3272 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))));
    float _400 = (((_334.z - _385) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _385;
    float _406 = ((((_334.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _388;
    float _407 = ((((_334.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _389;
    float _410 = fma(_395, _227, fma(_407, _219 * TANGENT.x, (_205 * _197) * _406));
    float _413 = fma(_395, _228, fma(_407, _219 * TANGENT.y, (_205 * _198) * _406));
    float _416 = fma(_395, _229, fma(_407, _219 * TANGENT.z, (_205 * _199) * _406));
    float _420 = inversesqrt(dot(vec3(_410, _413, _416), vec3(_410, _413, _416)));
    float _421 = _420 * _410;
    float _422 = _420 * _413;
    float _423 = _420 * _416;
    float _3283 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _424 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3305 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3316 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _443 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _494 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _484);
    float _495 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _484);
    float _496 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _484);
    float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
    float _501 = _494 * _500;
    float _502 = _495 * _500;
    float _503 = _496 * _500;
    float _509 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _510 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_423, cbSceneParam._m0[5u].z, fma(_422, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _421));
    float _533 = fma(_423, cbSceneParam._m0[6u].z, fma(_422, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _421));
    float _536 = fma(_423, cbSceneParam._m0[7u].z, fma(_422, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _421));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _552 = (_549 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _558 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_552].x;
    float _559 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_552].y;
    float _560 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_552].z;
    float _3327 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    vec4 _572 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _509, cbSceneParam._m0[86u].y * _510));
    float _575 = _572.x * TEXCOORD_5.w;
    float _576 = dot(vec3(_421, _422, _423), vec3(_501, _502, _503));
    float _579 = _576 * 2.0;
    float _583 = (_579 * _421) - _501;
    float _584 = (_579 * _422) - _502;
    float _585 = (_579 * _423) - _503;
    float _589 = abs(dot(vec3(_501, _502, _503), vec3(_421, _422, _423)));
    float _3360 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _591 = sqrt(_424);
    float _604 = exp2((_591 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_591 * 3.0));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _946;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _671 = fma(_644, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636));
        float _675 = fma(_644, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636));
        float _679 = fma(_644, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636));
        float _704 = _636 + _421;
        float _705 = _640 + _422;
        float _706 = _644 + _423;
        float _716 = fma(_706, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704)) - _671;
        float _717 = fma(_706, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704)) - _675;
        float _718 = fma(_706, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704)) - _679;
        float _722 = inversesqrt(dot(vec3(_716, _717, _718), vec3(_716, _717, _718)));
        float _735 = ((_722 * _716) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_671 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_722 * _717) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_675 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_722 * _718) / cbModelParam._m0[34u].z) + ((((((_679 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        float _774 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_740.x + (-0.5));
        float _776 = _774 * (_740.y + (-0.5));
        float _777 = _774 * (_740.z + (-0.5));
        float _784 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_747.x + (-0.5));
        float _786 = _784 * (_747.y + (-0.5));
        float _787 = _784 * (_747.z + (-0.5));
        float _794 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_754.x + (-0.5));
        float _796 = _794 * (_754.y + (-0.5));
        float _797 = _794 * (_754.z + (-0.5));
        float _804 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_761.x + (-0.5));
        float _806 = _804 * (_761.y + (-0.5));
        float _807 = _804 * (_761.z + (-0.5));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = _775 * 0.5;
        float _812 = _785 * 0.5;
        float _813 = _795 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _828 = (dot(vec3(_421, _422, _423), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _838 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3408 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_840 + 1.0))) + _845) * _808;
        float _855 = _776 * 0.5;
        float _856 = _786 * 0.5;
        float _857 = _796 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_421, _422, _423), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3441 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_882 + 1.0))) + _887) * _809;
        float _897 = _777 * 0.5;
        float _898 = _787 * 0.5;
        float _899 = _797 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_421, _422, _423), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3474 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_924 + 1.0))) + _929) * _810;
        _946 = _777;
        _948 = _776;
        _949 = _775;
        _950 = _787;
        _951 = _786;
        _952 = _785;
        _953 = _797;
        _954 = _796;
        _955 = _795;
        _956 = _810;
        _957 = _809;
        _958 = _808;
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
    }
    else
    {
        _946 = _947;
        _948 = _947;
        _949 = _947;
        _950 = _947;
        _951 = _947;
        _952 = _947;
        _953 = _947;
        _954 = _947;
        _955 = _947;
        _956 = _947;
        _957 = _947;
        _958 = _947;
        _959 = 0.0;
        _960 = 0.0;
        _961 = 0.0;
    }
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _987 = fma(_644, cbModelParam._m0[30u].z, fma(_640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _636));
        float _991 = fma(_644, cbModelParam._m0[31u].z, fma(_640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _636));
        float _995 = fma(_644, cbModelParam._m0[32u].z, fma(_640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _636));
        float _1018 = _636 + _421;
        float _1019 = _640 + _422;
        float _1020 = _644 + _423;
        float _1030 = fma(_1020, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018)) - _987;
        float _1031 = fma(_1020, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018)) - _991;
        float _1032 = fma(_1020, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018)) - _995;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_987 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_991 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[35u].z) + ((((((_995 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1086 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1053.x + (-0.5));
        float _1088 = _1086 * (_1053.y + (-0.5));
        float _1089 = _1086 * (_1053.z + (-0.5));
        float _1096 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1060.x + (-0.5));
        float _1098 = _1096 * (_1060.y + (-0.5));
        float _1099 = _1096 * (_1060.z + (-0.5));
        float _1106 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1067.x + (-0.5));
        float _1108 = _1106 * (_1067.y + (-0.5));
        float _1109 = _1106 * (_1067.z + (-0.5));
        float _1116 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1074.x + (-0.5));
        float _1118 = _1116 * (_1074.y + (-0.5));
        float _1119 = _1116 * (_1074.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_421, _422, _423), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3537 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1150 + 1.0))) + _1155) * _1120;
        float _1165 = _1088 * 0.5;
        float _1166 = _1098 * 0.5;
        float _1167 = _1108 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_421, _422, _423), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3570 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1192 + 1.0))) + _1197) * _1121;
        float _1207 = _1089 * 0.5;
        float _1208 = _1099 * 0.5;
        float _1209 = _1109 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_421, _422, _423), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3603 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1234 + 1.0))) + _1239) * _1122;
        _1256 = _1089;
        _1257 = _1088;
        _1258 = _1087;
        _1259 = _1099;
        _1260 = _1098;
        _1261 = _1097;
        _1262 = _1109;
        _1263 = _1108;
        _1264 = _1107;
        _1265 = _1122;
        _1266 = _1121;
        _1267 = _1120;
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _947;
        _1257 = _947;
        _1258 = _947;
        _1259 = _947;
        _1260 = _947;
        _1261 = _947;
        _1262 = _947;
        _1263 = _947;
        _1264 = _947;
        _1265 = _947;
        _1266 = _947;
        _1267 = _947;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _959)) + _959;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1303 = fma(_1282, cbSceneParam._m0[89u].z, fma(_1281, cbSceneParam._m0[89u].y, _1280 * cbSceneParam._m0[89u].x));
    float _1306 = fma(_1282, cbSceneParam._m0[90u].z, fma(_1281, cbSceneParam._m0[90u].y, _1280 * cbSceneParam._m0[90u].x));
    float _1309 = fma(_1282, cbSceneParam._m0[91u].z, fma(_1281, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1280));
    float _1324 = _583 * 0.5;
    float _1325 = _584 * 0.5;
    float _1326 = _585 * 0.5;
    float _1327 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1330 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1333 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1367;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1340 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_946, _950, _953, _956));
        float _1344 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_948, _951, _954, _957));
        float _1348 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_949, _952, _955, _958));
        float _1355 = dot(vec4(cbModelParam._m0[39u]), vec4(_1324, _1325, _1326, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1378;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1369 = dot(vec4(cbModelParam._m0[40u]), vec4(_1324, _1325, _1326, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1382 = (_1378 * cbModelParam._m0[1u].x) + (_1367 * (1.0 - cbModelParam._m0[1u].x));
    float _1392 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _424);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1392 : min(cbModelParam._m0[25u].z, _1392));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1442 = fma(_644, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636)) + cbModelParam._m0[13u].w;
        float _1446 = fma(_644, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636)) + cbModelParam._m0[14u].w;
        float _1450 = fma(_644, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636)) + cbModelParam._m0[15u].w;
        float _1453 = fma(_585, cbModelParam._m0[13u].z, fma(_584, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _583));
        float _1456 = fma(_585, cbModelParam._m0[14u].z, fma(_584, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _583));
        float _1459 = fma(_585, cbModelParam._m0[15u].z, fma(_584, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _583));
        float _1487;
        if (_1453 > 0.0)
        {
            _1487 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1487 = frontier_phi_16_14_ladder;
        }
        float _1691;
        if (_1456 > 0.0)
        {
            _1691 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1691 = frontier_phi_25_21_ladder;
        }
        float _1934;
        if (_1459 > 0.0)
        {
            _1934 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1934 = frontier_phi_37_32_ladder;
        }
        float _1936 = isnan(_1691) ? _1487 : (isnan(_1487) ? _1691 : min(_1487, _1691));
        float _1937 = isnan(_1934) ? _1936 : (isnan(_1936) ? _1934 : min(_1936, _1934));
        float _1941 = (_1937 * _1453) + _1442;
        float _1942 = (_1937 * _1456) + _1446;
        float _1943 = (_1937 * _1459) + _1450;
        float _1944 = _1937 * 9.9999997473787516355514526367188e-05;
        float _1946 = (-1.0) - _1944;
        float _1948 = _1944 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1943 > _1948) || ((_1943 < _1946) || ((_1942 > _1948) || ((_1942 < _1946) || ((_1941 < _1946) || (_1941 > _1948))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1943, cbModelParam._m0[9u].z, fma(_1942, cbModelParam._m0[9u].y, _1941 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1943, cbModelParam._m0[10u].z, fma(_1942, cbModelParam._m0[10u].y, _1941 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1943, cbModelParam._m0[11u].z, fma(_1942, cbModelParam._m0[11u].y, _1941 * cbModelParam._m0[11u].x))), _1393);
            frontier_phi_15_37_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1475 = frontier_phi_15_37_ladder_2;
        _1477 = frontier_phi_15_37_ladder_1;
        _1479 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_583, _584, _585), _1393);
        _1475 = _1463.x * cbModelParam._m0[1u].y;
        _1477 = _1463.y * cbModelParam._m0[1u].y;
        _1479 = _1463.z * cbModelParam._m0[1u].y;
    }
    float _1483 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _424);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1483 : min(cbModelParam._m0[25u].w, _1483));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1541 = fma(_644, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636)) + cbModelParam._m0[21u].w;
        float _1545 = fma(_644, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636)) + cbModelParam._m0[22u].w;
        float _1549 = fma(_644, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636)) + cbModelParam._m0[23u].w;
        float _1552 = fma(_585, cbModelParam._m0[21u].z, fma(_584, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _583));
        float _1555 = fma(_585, cbModelParam._m0[22u].z, fma(_584, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _583));
        float _1558 = fma(_585, cbModelParam._m0[23u].z, fma(_584, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _583));
        float _1696;
        if (_1552 > 0.0)
        {
            _1696 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1696 = frontier_phi_27_23_ladder;
        }
        float _1961;
        if (_1555 > 0.0)
        {
            _1961 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1961 = frontier_phi_39_34_ladder;
        }
        float _2166;
        if (_1558 > 0.0)
        {
            _2166 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2166 = frontier_phi_48_45_ladder;
        }
        float _2168 = isnan(_1961) ? _1696 : (isnan(_1696) ? _1961 : min(_1696, _1961));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1552) + _1541;
        float _2174 = (_2169 * _1555) + _1545;
        float _2175 = (_2169 * _1558) + _1549;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2176;
        float _2179 = _2176 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2175 > _2179) || ((_2175 < _2177) || ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 < _2177) || (_2173 > _2179))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2175, cbModelParam._m0[17u].z, fma(_2174, cbModelParam._m0[17u].y, _2173 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2175, cbModelParam._m0[18u].z, fma(_2174, cbModelParam._m0[18u].y, _2173 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2175, cbModelParam._m0[19u].z, fma(_2174, cbModelParam._m0[19u].y, _2173 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_24_48_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1577 = frontier_phi_24_48_ladder_2;
        _1579 = frontier_phi_24_48_ladder_1;
        _1581 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_583, _584, _585), _1484);
        _1577 = _1561.x * cbModelParam._m0[1u].z;
        _1579 = _1561.y * cbModelParam._m0[1u].z;
        _1581 = _1561.z * cbModelParam._m0[1u].z;
    }
    float _1593 = ((((1.0 - _604) * ((_591 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_604 * _591)) * _575;
    float _1594 = _1593 * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1595 = _1593 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1596 = _1593 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1599 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, _1594 * cbSceneParam._m0[91u].x));
    uvec4 _1615 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1617 = _1615.x * 14u;
    uint _1618 = _1617 + 13u;
    float _1625 = _575 + (-1.0);
    float _1630 = (cbLight._m0[_1618].x * _1625) + 1.0;
    float _1631 = (cbLight._m0[_1618].y * _1625) + 1.0;
    float _1632 = (cbLight._m0[_1618].z * _1625) + 1.0;
    float _1633 = (cbLight._m0[_1618].w * _1625) + 1.0;
    uint _1634 = _1617 + 5u;
    float _1640 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1644 = _1617 + 4u;
    float _1650 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
    uint _1654 = _1617 | 1u;
    float _1665 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_421, _422, _423));
    float _1668 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_421, _422, _423));
    float _3739 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _3750 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1673 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1675 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.3183098733425140380859375;
    float _1682 = ((cbLight._m0[_1634].x * _1640) * _1675) + ((cbLight._m0[_1644].x * _1650) * _1673);
    float _1683 = ((_1640 * cbLight._m0[_1634].y) * _1675) + ((_1650 * cbLight._m0[_1644].y) * _1673);
    float _1684 = ((_1640 * cbLight._m0[_1634].z) * _1675) + ((_1650 * cbLight._m0[_1644].z) * _1673);
    uvec4 _1688 = floatBitsToUint(cbLight._m0[_1617 + 12u]);
    bool _1690 = _1688.x == 0u;
    float _1701;
    float _1703;
    float _1705;
    if (_1690)
    {
        _1701 = _1682;
        _1703 = _1683;
        _1705 = _1684;
    }
    else
    {
        uint _1709 = _1617 + 6u;
        float _1725 = (dot(vec3(cbLight._m0[_1617 + 2u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1726 = _1725 * _1725;
        float _3761 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1728 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1701 = (((cbLight._m0[_1709].x * 0.3183098733425140380859375) * _1727) * _1728) + _1682;
        _1703 = (((cbLight._m0[_1709].y * 0.3183098733425140380859375) * _1727) * _1728) + _1683;
        _1705 = (((cbLight._m0[_1709].z * 0.3183098733425140380859375) * _1727) * _1728) + _1684;
    }
    bool _1708 = _1688.y == 0u;
    float _1746;
    float _1748;
    float _1750;
    if (_1708)
    {
        _1746 = _1701;
        _1748 = _1703;
        _1750 = _1705;
    }
    else
    {
        uint _1905 = _1617 + 7u;
        float _1921 = (dot(vec3(cbLight._m0[_1617 + 3u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _3777 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1924 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1746 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1701;
        _1748 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1703;
        _1750 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1705;
    }
    uint _1753 = _1617 + 8u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _424) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1617].x + _501;
    float _1769 = cbLight._m0[_1617].y + _502;
    float _1770 = cbLight._m0[_1617].z + _503;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1617].xyz));
    float _3793 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _1782 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1783 = dot(vec3(_421, _422, _423), vec3(_1775, _1776, _1777));
    float _3815 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1787 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1775, _1776, _1777));
    float _3826 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1791 = _1767 * _1767;
    float _1795 = ((_1786 * _1786) * (_1791 + (-1.0))) + 1.0;
    float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1807 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1782 * ((_1781 * _1807) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _1807) + _1767) * _1781))) * _1781;
    float _3837 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1791 / ((_1795 * _1795) * 3.141590118408203125));
    uint _1831 = _1617 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _424) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1654].x + _501;
    float _1845 = cbLight._m0[_1654].y + _502;
    float _1846 = cbLight._m0[_1654].z + _503;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1654].xyz));
    float _3848 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1858 = dot(vec3(_421, _422, _423), vec3(_1851, _1852, _1853));
    float _3859 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1851, _1852, _1853));
    float _3870 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1843;
    float _1890 = (0.5 / (((_1782 * ((_1857 * _1880) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _1880) + _1843) * _1857))) * _1857;
    float _3881 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1902 = (((_1879 * cbLight._m0[_1831].x) * _1892) * _1640) + (((_1806 * cbLight._m0[_1753].x) * _1820) * _1650);
    float _1903 = (((_1879 * cbLight._m0[_1831].y) * _1892) * _1640) + (((_1806 * cbLight._m0[_1753].y) * _1820) * _1650);
    float _1904 = (((_1879 * cbLight._m0[_1831].z) * _1892) * _1640) + (((_1806 * cbLight._m0[_1753].z) * _1820) * _1650);
    float _1966;
    float _1968;
    float _1970;
    if (_1690)
    {
        _1966 = _1902;
        _1968 = _1903;
        _1970 = _1904;
    }
    else
    {
        uint _1972 = _1617 + 2u;
        uint _1976 = _1617 + 10u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _424) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _501;
        float _1993 = cbLight._m0[_1972].y + _502;
        float _1994 = cbLight._m0[_1972].z + _503;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1972].xyz));
        float _3892 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _2006 = dot(vec3(_421, _422, _423), vec3(_1999, _2000, _2001));
        float _3903 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3914 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2028 = 1.0 - _1991;
        float _2038 = (0.5 / (((_1782 * ((_2005 * _2028) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _2028) + _1991) * _2005))) * _2005;
        float _3925 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1966 = (((_2027 * cbLight._m0[_1976].x) * _2040) * _2041) + _1902;
        _1968 = (((_2027 * cbLight._m0[_1976].y) * _2040) * _2041) + _1903;
        _1970 = (((_2027 * cbLight._m0[_1976].z) * _2040) * _2041) + _1904;
    }
    float _2076;
    float _2078;
    float _2080;
    if (_1708)
    {
        _2076 = _1966;
        _2078 = _1968;
        _2080 = _1970;
    }
    else
    {
        uint _2087 = _1617 + 3u;
        uint _2091 = _1617 + 11u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _424) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _501;
        float _2108 = cbLight._m0[_2087].y + _502;
        float _2109 = cbLight._m0[_2087].z + _503;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2087].xyz));
        float _3941 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2121 = dot(vec3(_421, _422, _423), vec3(_2114, _2115, _2116));
        float _3952 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _3963 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1782 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _2143) + _2106) * _2120))) * _2120;
        float _3974 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _2076 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _1966;
        _2078 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _1968;
        _2080 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _1970;
    }
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_1615.y == 0u)
    {
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2231;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2231;
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2231;
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.x;
        uint _2258 = uint((float(_2246.y) * floor(float(uint(cbSceneParam._m0[85u].y * _510) / _2247))) + floor(float(uint(cbSceneParam._m0[85u].x * _509) / _2247)));
        float _2268 = (log2(_2234 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2269 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        uint _2272 = uint(isnan(14.0) ? _2269 : (isnan(_2269) ? 14.0 : min(_2269, 14.0)));
        uvec4 _2277 = texelFetch(g_lightClusterGridBuffer, int(((_2272 << 2u) + (_2258 << 6u)) >> 2u));
        uint _2278 = _2277.x;
        uint _2279 = _2246.z;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((((1u << ((_2279 >> 4u) & 15u)) + 4294967295u) & _2278) == 0u) || ((_2279 & 240u) == 0u))
        {
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
        }
        else
        {
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            uint _2528 = 0u;
            uint _2537;
            bool _2538;
            for (;;)
            {
                _2537 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2528 << 2u)) >> 2u)).x;
                _2538 = _2537 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2538)
                {
                    frontier_phi_63_pred = _2527;
                    frontier_phi_63_pred_1 = _2526;
                    frontier_phi_63_pred_2 = _2525;
                    frontier_phi_63_pred_3 = _2524;
                    frontier_phi_63_pred_4 = _2523;
                    frontier_phi_63_pred_5 = _2522;
                }
                else
                {
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    uint _2652;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2537;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    for (;;)
                    {
                        uint _2656 = uint(findLSB(_2652)) + (_2528 << 5u);
                        uint _2653 = (_2652 + 4294967295u) & _2652;
                        uint _2658 = _2656 * 48u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2678 = (_2656 * 48u) + 4u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2697 = (_2656 * 48u) + 8u;
                        vec3 _2708 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x));
                        float _2712 = _2672.x - _2232;
                        float _2713 = _2672.y - _2233;
                        float _2714 = _2672.z - _2234;
                        float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                        float _2718 = inversesqrt(_2715);
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2722 = dot(vec3(_530, _533, _536), vec3(_2719, _2720, _2721));
                        float _2727 = 1.0 - (_2715 * _2672.w);
                        float _4000 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2729 = sqrt(_2715) * _2691.w;
                        float _2732 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2722) + _2733;
                        float _2739 = _2729 * _2729;
                        float _2743 = ((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2728) / ((_2739 * 0.699999988079071044921875) + 1.0);
                        float _2747 = (-0.0) - _2232;
                        float _2748 = (-0.0) - _2233;
                        float _2749 = (-0.0) - _2234;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2764 = exp2(log2(1.0 / ((_2739 * 3.5) + 5.0)) * 0.25);
                        float _2765 = 1.0 - _591;
                        float _2772 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * (1.0 - (_2764 * _2764))));
                        float _2773 = _2772 * _2772;
                        float _2774 = _2773 * _2773;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_530, _533, _536), vec3(_2754, _2755, _2756));
                        float _4016 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2789 = dot(vec3(_530, _533, _536), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _4027 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2796 = ((_2792 * _2792) * (_2774 + (-1.0))) + 1.0;
                        float _2797 = _2732 * _2773;
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2722) + _2798;
                        float _4038 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2803 = 1.0 - _2773;
                        float _2813 = (0.5 / (((_2802 * ((_2788 * _2803) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2803) + _2773) * _2788))) * _2802;
                        float _4049 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2824 = (((_2774 * 3.1415927410125732421875) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) / ((_2796 * _2796) * ((_2739 * 2.1991131305694580078125) + 3.141590118408203125))) * _2728;
                        _2581 = (_2743 * _2691.x) + _2649;
                        _2582 = (_2743 * _2691.y) + _2650;
                        _2583 = (_2743 * _2691.z) + _2651;
                        _2578 = (_2824 * _2708.x) + _2646;
                        _2579 = (_2824 * _2708.y) + _2647;
                        _2580 = (_2824 * _2708.z) + _2648;
                        if (_2653 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2653;
                        }
                    }
                    frontier_phi_63_pred = _2583;
                    frontier_phi_63_pred_1 = _2582;
                    frontier_phi_63_pred_2 = _2581;
                    frontier_phi_63_pred_3 = _2580;
                    frontier_phi_63_pred_4 = _2579;
                    frontier_phi_63_pred_5 = _2578;
                }
                _2389 = frontier_phi_63_pred;
                _2387 = frontier_phi_63_pred_1;
                _2385 = frontier_phi_63_pred_2;
                _2383 = frontier_phi_63_pred_3;
                _2381 = frontier_phi_63_pred_4;
                _2379 = frontier_phi_63_pred_5;
                uint _2529 = _2528 + 1u;
                if (_2529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2522 = _2379;
                    _2523 = _2381;
                    _2524 = _2383;
                    _2525 = _2385;
                    _2526 = _2387;
                    _2527 = _2389;
                    _2528 = _2529;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
        }
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.z;
        uint _2395 = (_2393 >> 8u) & 15u;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((4294967295u << _2395) & _2278) == 0u)
        {
            _2490 = _2378;
            _2492 = _2380;
            _2494 = _2382;
            _2496 = _2384;
            _2498 = _2386;
            _2500 = _2388;
        }
        else
        {
            float _2515 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
            float _2516 = _2515 * _2232;
            float _2517 = _2515 * _2233;
            float _2518 = _2515 * _2234;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2395 < ((_2393 >> 12u) & 15u))
            {
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2629 = _2378;
                float _2630 = _2380;
                float _2631 = _2382;
                float _2632 = _2384;
                float _2633 = _2386;
                float _2634 = _2388;
                uint _2635 = _2395;
                uint _2644;
                bool _2645;
                for (;;)
                {
                    _2644 = texelFetch(g_lightClassification, int((((_2272 << 5u) + (_2258 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                    _2645 = _2644 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2645)
                    {
                        frontier_phi_69_pred = _2634;
                        frontier_phi_69_pred_1 = _2633;
                        frontier_phi_69_pred_2 = _2632;
                        frontier_phi_69_pred_3 = _2631;
                        frontier_phi_69_pred_4 = _2630;
                        frontier_phi_69_pred_5 = _2629;
                    }
                    else
                    {
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        uint _2848 = _2644;
                        uint _2849;
                        vec4 _2874;
                        float _2875;
                        vec4 _2890;
                        vec3 _2902;
                        vec4 _2918;
                        vec4 _2934;
                        float _2981;
                        bool _2982;
                        for (;;)
                        {
                            uint _2859 = ((_2635 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2848));
                            _2849 = (_2848 + 4294967295u) & _2848;
                            uint _2861 = _2859 * 40u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2875 = _2874.w;
                            uint _2877 = (_2859 * 40u) + 4u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2859 * 40u) + 8u;
                            _2902 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x));
                            uint _2905 = (_2859 * 40u) + 16u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2859 * 40u) + 20u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2859 * 40u) + 24u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2956 = (_2859 * 40u) + 28u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2981 = fma(_2234, _2969.z, fma(_2233, _2969.y, _2969.x * _2232)) + _2969.w;
                            _2982 = !((fma(_2234, _2950.z, fma(_2233, _2950.y, _2950.x * _2232)) + _2950.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2982)
                            {
                                float _3009 = _2874.x - _2232;
                                float _3010 = _2874.y - _2233;
                                float _3011 = _2874.z - _2234;
                                float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                                float _3015 = inversesqrt(_3012);
                                float _3016 = _3015 * _3009;
                                float _3017 = _3015 * _3010;
                                float _3018 = _3015 * _3011;
                                float _3022 = 1.0 - (_3012 / (_2875 * _2875));
                                float _4060 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3027 = sqrt(_3012) * _2890.w;
                                float _3029 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                                float _3030 = _3029 * _3029;
                                float _3033 = ((1.0 - _3030) * dot(vec3(_3016, _3017, _3018), vec3(_530, _533, _536))) + _3030;
                                float _3036 = _3027 * _3027;
                                float _3040 = (fma(_2234, _2918.z, fma(_2233, _2918.y, _2918.x * _2232)) + _2918.w) / _2981;
                                float _3041 = (fma(_2234, _2934.z, fma(_2233, _2934.y, _2934.x * _2232)) + _2934.w) / _2981;
                                float _3045 = 1.0 - dot(vec2(_3040, _3041), vec2(_3040, _3041));
                                float _4076 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3047 = _3046 * (((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3023) / ((_3036 * 0.699999988079071044921875) + 1.0));
                                float _3059 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                                float _3060 = 1.0 - _591;
                                float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                                float _3068 = _3067 * _3067;
                                float _3069 = _3068 * _3068;
                                float _3070 = _3016 - _2516;
                                float _3071 = _3017 - _2517;
                                float _3072 = _3018 - _2518;
                                float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                                float _3080 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2516, (-0.0) - _2517, (-0.0) - _2518));
                                float _4087 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3084 = dot(vec3(_530, _533, _536), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                                float _4098 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3087 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                                float _3092 = _3029 * _3068;
                                float _3093 = _3092 * _3092;
                                float _3099 = ((1.0 - _3093) * dot(vec3(_530, _533, _536), vec3(_3016, _3017, _3018))) + _3093;
                                float _4109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3101 = 1.0 - _3068;
                                float _3111 = (0.5 / (((_3100 * ((_3083 * _3101) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3068) * _3083))) * _3100;
                                float _4120 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3121 = (_3046 * _3023) * (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_3091 * _3091) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3047 * _2890.z;
                                frontier_phi_75_pred_1 = _3047 * _2890.y;
                                frontier_phi_75_pred_2 = _3047 * _2890.x;
                                frontier_phi_75_pred_3 = _3121 * _2902.z;
                                frontier_phi_75_pred_4 = _3121 * _2902.y;
                                frontier_phi_75_pred_5 = _3121 * _2902.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3130 = frontier_phi_75_pred;
                            _3129 = frontier_phi_75_pred_1;
                            _3128 = frontier_phi_75_pred_2;
                            _3127 = frontier_phi_75_pred_3;
                            _3126 = frontier_phi_75_pred_4;
                            _3125 = frontier_phi_75_pred_5;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            if (_2849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2849;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2834;
                        frontier_phi_69_pred_1 = _2833;
                        frontier_phi_69_pred_2 = _2832;
                        frontier_phi_69_pred_3 = _2831;
                        frontier_phi_69_pred_4 = _2830;
                        frontier_phi_69_pred_5 = _2829;
                    }
                    _2501 = frontier_phi_69_pred;
                    _2499 = frontier_phi_69_pred_1;
                    _2497 = frontier_phi_69_pred_2;
                    _2495 = frontier_phi_69_pred_3;
                    _2493 = frontier_phi_69_pred_4;
                    _2491 = frontier_phi_69_pred_5;
                    uint _2636 = _2635 + 1u;
                    if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2629 = _2491;
                        _2630 = _2493;
                        _2631 = _2495;
                        _2632 = _2497;
                        _2633 = _2499;
                        _2634 = _2501;
                        _2635 = _2636;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2501;
                frontier_phi_57_58_ladder_1 = _2499;
                frontier_phi_57_58_ladder_2 = _2497;
                frontier_phi_57_58_ladder_3 = _2495;
                frontier_phi_57_58_ladder_4 = _2493;
                frontier_phi_57_58_ladder_5 = _2491;
            }
            else
            {
                frontier_phi_57_58_ladder = _2388;
                frontier_phi_57_58_ladder_1 = _2386;
                frontier_phi_57_58_ladder_2 = _2384;
                frontier_phi_57_58_ladder_3 = _2382;
                frontier_phi_57_58_ladder_4 = _2380;
                frontier_phi_57_58_ladder_5 = _2378;
            }
            _2490 = frontier_phi_57_58_ladder_5;
            _2492 = frontier_phi_57_58_ladder_4;
            _2494 = frontier_phi_57_58_ladder_3;
            _2496 = frontier_phi_57_58_ladder_2;
            _2498 = frontier_phi_57_58_ladder_1;
            _2500 = frontier_phi_57_58_ladder;
        }
        float _2505 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
        _2290 = (_2505 * _2496) + _1746;
        _2292 = (_2505 * _2498) + _1748;
        _2294 = (_2505 * _2500) + _1750;
        _2296 = ((_2490 * 0.039999999105930328369140625) * _2505) + _2076;
        _2298 = ((_2492 * 0.039999999105930328369140625) * _2505) + _2078;
        _2300 = ((_2494 * 0.039999999105930328369140625) * _2505) + _2080;
    }
    else
    {
        _2290 = _1746;
        _2292 = _1748;
        _2294 = _1750;
        _2296 = _2076;
        _2298 = _2078;
        _2300 = _2080;
    }
    float _4136 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4147 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4158 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    uint _2320 = _549 + 6u;
    float _2328 = _509 / cbSceneParam._m0[86u].x;
    float _2329 = _510 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _443 : (isnan(_443) ? cbSceneParam._m0[77u].w : min(_443, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_443 > cbSceneParam._m0[78u].w)
    {
        float _2403 = isnan(_443) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _443 : min(cbSceneParam._m0[80u].w, _443));
        float _2404 = _2403 / _443;
        float _2415 = _2404 * _494;
        float _2416 = _495 * _2404;
        float _2417 = (-0.0) - _2416;
        float _2418 = _2404 * _496;
        float _2420 = (cbSceneParam._m0[77u].w * _2417) / _2403;
        float _2421 = _2420 + cbSceneParam._m0[79u].w;
        float _2422 = cbSceneParam._m0[79u].w - _2416;
        float _2428 = sqrt(((_2415 * _2415) + (_2416 * _2416)) + (_2418 * _2418));
        float _2431 = (1.0 - (cbSceneParam._m0[77u].w / _2403)) * _2428;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2591;
        if (abs((_2417 - _2420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2591 = ((((_2421 > 0.0) ? exp2(_2436 * _2421) : (2.0 - exp2(_2438 * _2421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2431;
        }
        else
        {
            float _2551 = 1.0 / cbSceneParam._m0[80u].x;
            float _2552 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : max(_2421, _2422));
            float _2553 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : min(_2421, _2422));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            _2591 = ((abs(_2428 / _2417) * cbSceneParam._m0[80u].y) * ((((_2562 - _2563) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))))) * _2551)) - ((exp2(_2438 * _2562) - exp2(_2438 * _2563)) * _2551))) + (_2431 * cbSceneParam._m0[80u].z);
        }
        vec4 _2593 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2602 = exp2((_2591 * (-1.44269502162933349609375)) * (1.0 - _2593.w));
        float _2603 = log2(_2602);
        float _2619 = log2(_2348);
        _2440 = (exp2(_2619 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].x)) * _2593.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2442 = (exp2(_2619 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].y)) * _2593.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2444 = (exp2(_2619 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].z)) * _2593.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2446 = _2602 * _2348;
    }
    else
    {
        _2440 = _2345;
        _2442 = _2346;
        _2444 = _2347;
        _2446 = _2348;
    }
    float _2458 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2459 = _2458 == 3.0;
    float _2460 = log2(_2446);
    float _2467 = exp2(_2460 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2290 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _575))) + ((_2296 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2468 = exp2(_2460 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2292 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _575))) + ((_2298 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2469 = exp2(_2460 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2294 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _575))) + ((_2300 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1382)) * cbPerFrame._m0[3u].x));
    float _2478 = (_2458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2478 * (_2459 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2440)));
    SV_Target.y = _2478 * (_2459 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2442)));
    SV_Target.z = _2478 * (_2459 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.w = cbInstanceData._m0[_2320].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2320].w;
}


