#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _993;
float _3385;
float _3386;
float _3387;
float _3388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _260 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _317 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3397 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _325 = (_318 * ((_287.x * cbMtdParam._m0[10u].x) - _266)) + _266;
    float _326 = (_318 * ((_287.y * cbMtdParam._m0[10u].y) - _267)) + _267;
    float _327 = (_318 * ((_287.z * cbMtdParam._m0[10u].z) - _268)) + _268;
    vec4 _340 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _364 = _362.x;
    float _365 = _362.y;
    float _366 = _362.z;
    vec4 _378 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _391 = ((_378.z - _366) * _318) + _366;
    float _394 = ((((_378.x - _364) * _318) + _364) * 2.0) + (-1.0);
    float _395 = ((((_378.y - _365) * _318) + _365) * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3408 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))));
    float _406 = (((_340.z - _391) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _391;
    float _412 = ((((_340.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _394;
    float _413 = ((((_340.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _395;
    float _416 = fma(_401, _233, fma(_413, _225 * TANGENT.x, (_211 * _203) * _412));
    float _419 = fma(_401, _234, fma(_413, _225 * TANGENT.y, (_211 * _204) * _412));
    float _422 = fma(_401, _235, fma(_413, _225 * TANGENT.z, (_211 * _205) * _412));
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    float _427 = _426 * _416;
    float _428 = _426 * _419;
    float _429 = _426 * _422;
    float _3419 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _430 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3441 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3452 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _449 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    vec4 _514 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _516 = _514.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _673 = sqrt(((_500 * _500) + (_501 * _501)) + (_502 * _502));
        float _679 = (cbMatDynParam._m0[5u].x * _673) + cbMatDynParam._m0[5u].y;
        float _3463 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _684 = (cbMatDynParam._m0[5u].z * _673) + cbMatDynParam._m0[5u].w;
        float _3474 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) - _680)) + _680) < ((_516 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _548 = fma(_429, cbSceneParam._m0[5u].z, fma(_428, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _427));
    float _551 = fma(_429, cbSceneParam._m0[6u].z, fma(_428, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _427));
    float _554 = fma(_429, cbSceneParam._m0[7u].z, fma(_428, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _427));
    uint _567 = uint(roundEven(NORMAL.w)) * 13u;
    uint _569 = _567 + 9u;
    uint _570 = _569 + uint(cbMatDynParam._m0[0u].w);
    float _576 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_570].x;
    float _577 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_570].y;
    float _578 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_570].z;
    float _3485 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    vec4 _590 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _593 = _590.x * TEXCOORD_5.w;
    float _594 = dot(vec3(_427, _428, _429), vec3(_507, _508, _509));
    float _597 = _594 * 2.0;
    float _601 = (_597 * _427) - _507;
    float _602 = (_597 * _428) - _508;
    float _603 = (_597 * _429) - _509;
    float _607 = abs(dot(vec3(_507, _508, _509), vec3(_427, _428, _429)));
    float _3518 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _609 = sqrt(_430);
    float _622 = exp2((_609 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_609 * 3.0));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _992;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_662, cbModelParam._m0[26u].z, fma(_658, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _654));
        float _721 = fma(_662, cbModelParam._m0[27u].z, fma(_658, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _654));
        float _725 = fma(_662, cbModelParam._m0[28u].z, fma(_658, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _654));
        float _750 = _654 + _427;
        float _751 = _658 + _428;
        float _752 = _662 + _429;
        float _762 = fma(_752, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750)) - _717;
        float _763 = fma(_752, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750)) - _721;
        float _764 = fma(_752, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750)) - _725;
        float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
        float _781 = ((_768 * _762) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_768 * _763) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_768 * _764) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _820 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_786.x + (-0.5));
        float _822 = _820 * (_786.y + (-0.5));
        float _823 = _820 * (_786.z + (-0.5));
        float _830 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_793.x + (-0.5));
        float _832 = _830 * (_793.y + (-0.5));
        float _833 = _830 * (_793.z + (-0.5));
        float _840 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_800.x + (-0.5));
        float _842 = _840 * (_800.y + (-0.5));
        float _843 = _840 * (_800.z + (-0.5));
        float _850 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_807.x + (-0.5));
        float _852 = _850 * (_807.y + (-0.5));
        float _853 = _850 * (_807.z + (-0.5));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = _821 * 0.5;
        float _858 = _831 * 0.5;
        float _859 = _841 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _874 = (dot(vec3(_427, _428, _429), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _884 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3566 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_886 + 1.0))) + _891) * _854;
        float _901 = _822 * 0.5;
        float _902 = _832 * 0.5;
        float _903 = _842 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_427, _428, _429), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3599 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_928 + 1.0))) + _933) * _855;
        float _943 = _823 * 0.5;
        float _944 = _833 * 0.5;
        float _945 = _843 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_427, _428, _429), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3632 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_970 + 1.0))) + _975) * _856;
        _992 = _823;
        _994 = _822;
        _995 = _821;
        _996 = _833;
        _997 = _832;
        _998 = _831;
        _999 = _843;
        _1000 = _842;
        _1001 = _841;
        _1002 = _856;
        _1003 = _855;
        _1004 = _854;
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
    }
    else
    {
        _992 = _993;
        _994 = _993;
        _995 = _993;
        _996 = _993;
        _997 = _993;
        _998 = _993;
        _999 = _993;
        _1000 = _993;
        _1001 = _993;
        _1002 = _993;
        _1003 = _993;
        _1004 = _993;
        _1005 = 0.0;
        _1006 = 0.0;
        _1007 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_662, cbModelParam._m0[30u].z, fma(_658, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _654));
        float _1040 = fma(_662, cbModelParam._m0[31u].z, fma(_658, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _654));
        float _1044 = fma(_662, cbModelParam._m0[32u].z, fma(_658, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _654));
        float _1067 = _654 + _427;
        float _1068 = _658 + _428;
        float _1069 = _662 + _429;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_427, _428, _429), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3695 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_427, _428, _429), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3728 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_427, _428, _429), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3761 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _993;
        _1306 = _993;
        _1307 = _993;
        _1308 = _993;
        _1309 = _993;
        _1310 = _993;
        _1311 = _993;
        _1312 = _993;
        _1313 = _993;
        _1314 = _993;
        _1315 = _993;
        _1316 = _993;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _601 * 0.5;
    float _1374 = _602 * 0.5;
    float _1375 = _603 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_992, _996, _999, _1002));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_994, _997, _1000, _1003));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _998, _1001, _1004));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _430);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_662, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_662, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_662, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_603, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601));
        float _1505 = fma(_603, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601));
        float _1508 = fma(_603, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1536 = frontier_phi_19_17_ladder;
        }
        float _1761;
        if (_1505 > 0.0)
        {
            _1761 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1761 = frontier_phi_28_24_ladder;
        }
        float _2007;
        if (_1508 > 0.0)
        {
            _2007 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2007 = frontier_phi_40_35_ladder;
        }
        float _2009 = isnan(_1761) ? _1536 : (isnan(_1536) ? _1761 : min(_1536, _1761));
        float _2010 = isnan(_2007) ? _2009 : (isnan(_2009) ? _2007 : min(_2009, _2007));
        float _2014 = (_2010 * _1502) + _1491;
        float _2015 = (_2010 * _1505) + _1495;
        float _2016 = (_2010 * _1508) + _1499;
        float _2017 = _2010 * 9.9999997473787516355514526367188e-05;
        float _2019 = (-1.0) - _2017;
        float _2021 = _2017 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2016 > _2021) || ((_2016 < _2019) || ((_2015 > _2021) || ((_2015 < _2019) || ((_2014 < _2019) || (_2014 > _2021))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2016, cbModelParam._m0[9u].z, fma(_2015, cbModelParam._m0[9u].y, _2014 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2016, cbModelParam._m0[10u].z, fma(_2015, cbModelParam._m0[10u].y, _2014 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2016, cbModelParam._m0[11u].z, fma(_2015, cbModelParam._m0[11u].y, _2014 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_18_40_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_18_40_ladder_2;
        _1526 = frontier_phi_18_40_ladder_1;
        _1528 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_601, _602, _603), _1442);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _430);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_662, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_662, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_662, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_603, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601));
        float _1604 = fma(_603, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601));
        float _1607 = fma(_603, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601));
        float _1766;
        if (_1601 > 0.0)
        {
            _1766 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1766 = frontier_phi_30_26_ladder;
        }
        float _2034;
        if (_1604 > 0.0)
        {
            _2034 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2034 = frontier_phi_42_37_ladder;
        }
        float _2239;
        if (_1607 > 0.0)
        {
            _2239 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2239 = frontier_phi_51_48_ladder;
        }
        float _2241 = isnan(_2034) ? _1766 : (isnan(_1766) ? _2034 : min(_1766, _2034));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1601) + _1590;
        float _2247 = (_2242 * _1604) + _1594;
        float _2248 = (_2242 * _1607) + _1598;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2249;
        float _2252 = _2249 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2248 > _2252) || ((_2248 < _2250) || ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 < _2250) || (_2246 > _2252))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2248, cbModelParam._m0[17u].z, fma(_2247, cbModelParam._m0[17u].y, _2246 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2248, cbModelParam._m0[18u].z, fma(_2247, cbModelParam._m0[18u].y, _2246 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2248, cbModelParam._m0[19u].z, fma(_2247, cbModelParam._m0[19u].y, _2246 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_27_51_ladder = _2446.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2446.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2446.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_27_51_ladder_2;
        _1628 = frontier_phi_27_51_ladder_1;
        _1630 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_601, _602, _603), _1533);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _622) * ((_609 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_622 * _609)) * _593;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1524)) + _1524);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    vec4 _1662 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_528, _529));
    float _1664 = _1662.w;
    float _1676 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1664);
    float _1677 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1664);
    float _1678 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1664);
    uvec4 _1682 = floatBitsToUint(cbInstanceData._m0[_567 + 5u]);
    uint _1684 = _1682.x * 14u;
    uint _1685 = _1684 + 13u;
    float _1692 = _593 + (-1.0);
    float _1697 = (cbLight._m0[_1685].x * _1692) + 1.0;
    float _1698 = (cbLight._m0[_1685].y * _1692) + 1.0;
    float _1699 = (cbLight._m0[_1685].z * _1692) + 1.0;
    float _1700 = (cbLight._m0[_1685].w * _1692) + 1.0;
    uint _1701 = _1684 + 5u;
    float _1707 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1711 = _1684 + 4u;
    float _1720 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1724 = _1684 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_427, _428, _429));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_427, _428, _429));
    float _3897 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3908 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1701].x * _1707) * _1745) + (((cbLight._m0[_1711].x * _1676) * _1720) * _1743);
    float _1753 = ((_1707 * cbLight._m0[_1701].y) * _1745) + (((cbLight._m0[_1711].y * _1677) * _1720) * _1743);
    float _1754 = ((_1707 * cbLight._m0[_1701].z) * _1745) + (((cbLight._m0[_1711].z * _1678) * _1720) * _1743);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1684 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1752;
        _1773 = _1753;
        _1775 = _1754;
    }
    else
    {
        uint _1779 = _1684 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1684 + 2u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3919 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1798 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1754;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1978 = _1684 + 7u;
        float _1994 = (dot(vec3(cbLight._m0[_1684 + 3u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _1995 = _1994 * _1994;
        float _3935 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1997 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1816 = (((cbLight._m0[_1978].x * 0.3183098733425140380859375) * _1996) * _1997) + _1771;
        _1818 = (((cbLight._m0[_1978].y * 0.3183098733425140380859375) * _1996) * _1997) + _1773;
        _1820 = (((cbLight._m0[_1978].z * 0.3183098733425140380859375) * _1996) * _1997) + _1775;
    }
    uint _1823 = _1684 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _430) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1684].x + _507;
    float _1839 = cbLight._m0[_1684].y + _508;
    float _1840 = cbLight._m0[_1684].z + _509;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1684].xyz));
    float _3951 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _1852 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1853 = dot(vec3(_427, _428, _429), vec3(_1845, _1846, _1847));
    float _3973 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1845, _1846, _1847));
    float _3984 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1837;
    float _1888 = (0.5 / (((_1852 * ((_1851 * _1877) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1877) + _1837) * _1851))) * _1851;
    float _3995 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1904 = _1684 + 9u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _430) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1724].x + _507;
    float _1918 = cbLight._m0[_1724].y + _508;
    float _1919 = cbLight._m0[_1724].z + _509;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1724].xyz));
    float _4006 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1931 = dot(vec3(_427, _428, _429), vec3(_1924, _1925, _1926));
    float _4017 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1924, _1925, _1926));
    float _4028 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1939 = _1916 * _1916;
    float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1916;
    float _1963 = (0.5 / (((_1852 * ((_1930 * _1953) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1953) + _1916) * _1930))) * _1930;
    float _4039 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
    float _1975 = (((_1952 * cbLight._m0[_1904].x) * _1965) * _1707) + ((((cbLight._m0[_1823].x * _1676) * _1876) * _1890) * _1720);
    float _1976 = (((_1952 * cbLight._m0[_1904].y) * _1965) * _1707) + ((((cbLight._m0[_1823].y * _1677) * _1876) * _1890) * _1720);
    float _1977 = (((_1952 * cbLight._m0[_1904].z) * _1965) * _1707) + ((((cbLight._m0[_1823].z * _1678) * _1876) * _1890) * _1720);
    float _2039;
    float _2041;
    float _2043;
    if (_1760)
    {
        _2039 = _1975;
        _2041 = _1976;
        _2043 = _1977;
    }
    else
    {
        uint _2045 = _1684 + 2u;
        uint _2049 = _1684 + 10u;
        float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _430) * 0.949999988079071044921875);
        float _2064 = _2063 * _2063;
        float _2065 = cbLight._m0[_2045].x + _507;
        float _2066 = cbLight._m0[_2045].y + _508;
        float _2067 = cbLight._m0[_2045].z + _509;
        float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
        float _2072 = _2071 * _2065;
        float _2073 = _2071 * _2066;
        float _2074 = _2071 * _2067;
        float _2075 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2045].xyz));
        float _4050 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2079 = dot(vec3(_427, _428, _429), vec3(_2072, _2073, _2074));
        float _4061 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2083 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2072, _2073, _2074));
        float _4072 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = _2064 * _2064;
        float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
        float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2101 = 1.0 - _2064;
        float _2111 = (0.5 / (((_1852 * ((_2078 * _2101) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2101) + _2064) * _2078))) * _2078;
        float _4083 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
        float _2114 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2039 = (((_2100 * cbLight._m0[_2049].x) * _2113) * _2114) + _1975;
        _2041 = (((_2100 * cbLight._m0[_2049].y) * _2113) * _2114) + _1976;
        _2043 = (((_2100 * cbLight._m0[_2049].z) * _2113) * _2114) + _1977;
    }
    float _2149;
    float _2151;
    float _2153;
    if (_1778)
    {
        _2149 = _2039;
        _2151 = _2041;
        _2153 = _2043;
    }
    else
    {
        uint _2160 = _1684 + 3u;
        uint _2164 = _1684 + 11u;
        float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _430) * 0.949999988079071044921875);
        float _2179 = _2178 * _2178;
        float _2180 = cbLight._m0[_2160].x + _507;
        float _2181 = cbLight._m0[_2160].y + _508;
        float _2182 = cbLight._m0[_2160].z + _509;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2187 = _2186 * _2180;
        float _2188 = _2186 * _2181;
        float _2189 = _2186 * _2182;
        float _2190 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2160].xyz));
        float _4099 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2194 = dot(vec3(_427, _428, _429), vec3(_2187, _2188, _2189));
        float _4110 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2187, _2188, _2189));
        float _4121 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2202 = _2179 * _2179;
        float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
        float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2216 = 1.0 - _2179;
        float _2226 = (0.5 / (((_1852 * ((_2193 * _2216) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2216) + _2179) * _2193))) * _2193;
        float _4132 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2228 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
        float _2229 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2149 = (((_2215 * cbLight._m0[_2164].x) * _2228) * _2229) + _2039;
        _2151 = (((_2215 * cbLight._m0[_2164].y) * _2228) * _2229) + _2041;
        _2153 = (((_2215 * cbLight._m0[_2164].z) * _2228) * _2229) + _2043;
    }
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    if (_1682.y == 0u)
    {
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2304;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2304;
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2304;
        uvec4 _2319 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2320 = _2319.x;
        uint _2331 = uint((float(_2319.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2320))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2320)));
        float _2341 = (log2(_2307 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2342 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        uint _2345 = uint(isnan(14.0) ? _2342 : (isnan(_2342) ? 14.0 : min(_2342, 14.0)));
        uvec4 _2350 = texelFetch(g_lightClusterGridBuffer, int(((_2345 << 2u) + (_2331 << 6u)) >> 2u));
        uint _2351 = _2350.x;
        uint _2352 = _2319.z;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((((1u << ((_2352 >> 4u) & 15u)) + 4294967295u) & _2351) == 0u) || ((_2352 & 240u) == 0u))
        {
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
        }
        else
        {
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            uint _2609 = 0u;
            uint _2618;
            bool _2619;
            for (;;)
            {
                _2618 = texelFetch(g_lightClassification, int((((_2345 << 5u) + (_2331 << 9u)) + (_2609 << 2u)) >> 2u)).x;
                _2619 = _2618 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2619)
                {
                    frontier_phi_68_pred = _2605;
                    frontier_phi_68_pred_1 = _2608;
                    frontier_phi_68_pred_2 = _2607;
                    frontier_phi_68_pred_3 = _2606;
                    frontier_phi_68_pred_4 = _2604;
                    frontier_phi_68_pred_5 = _2603;
                }
                else
                {
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    uint _2754;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2618;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    for (;;)
                    {
                        uint _2758 = uint(findLSB(_2754)) + (_2609 << 5u);
                        uint _2755 = (_2754 + 4294967295u) & _2754;
                        uint _2760 = _2758 * 48u;
                        vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 3u)).x));
                        uint _2780 = (_2758 * 48u) + 4u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 3u)).x));
                        uint _2799 = (_2758 * 48u) + 8u;
                        vec3 _2810 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x));
                        float _2814 = _2774.x - _2305;
                        float _2815 = _2774.y - _2306;
                        float _2816 = _2774.z - _2307;
                        float _2817 = dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816));
                        float _2820 = inversesqrt(_2817);
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2824 = dot(vec3(_548, _551, _554), vec3(_2821, _2822, _2823));
                        float _2829 = 1.0 - (_2817 * _2774.w);
                        float _4158 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2830 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2831 = sqrt(_2817) * _2793.w;
                        float _2834 = 1.39999997615814208984375 / (_2831 + 1.39999997615814208984375);
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2824) + _2835;
                        float _2841 = _2831 * _2831;
                        float _2845 = ((isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))) * _2830) / ((_2841 * 0.699999988079071044921875) + 1.0);
                        float _2849 = (-0.0) - _2305;
                        float _2850 = (-0.0) - _2306;
                        float _2851 = (-0.0) - _2307;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2856 = _2855 * _2849;
                        float _2857 = _2855 * _2850;
                        float _2858 = _2855 * _2851;
                        float _2866 = exp2(log2(1.0 / ((_2841 * 3.5) + 5.0)) * 0.25);
                        float _2867 = 1.0 - _609;
                        float _2874 = sqrt(1.0 - ((1.0 - (_2867 * _2867)) * (1.0 - (_2866 * _2866))));
                        float _2875 = _2874 * _2874;
                        float _2876 = _2875 * _2875;
                        float _2877 = _2856 + _2821;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
                        float _2887 = dot(vec3(_548, _551, _554), vec3(_2856, _2857, _2858));
                        float _4174 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2891 = dot(vec3(_548, _551, _554), vec3(_2883 * _2877, _2883 * _2878, _2883 * _2879));
                        float _4185 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2898 = ((_2894 * _2894) * (_2876 + (-1.0))) + 1.0;
                        float _2899 = _2834 * _2875;
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2824) + _2900;
                        float _4196 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2905 = 1.0 - _2875;
                        float _2915 = (0.5 / (((_2904 * ((_2890 * _2905) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2904 * _2905) + _2875) * _2890))) * _2904;
                        float _4207 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2926 = (((_2876 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2898 * _2898) * ((_2841 * 2.1991131305694580078125) + 3.141590118408203125))) * _2830;
                        _2678 = (_2845 * _2793.x) + _2751;
                        _2679 = (_2845 * _2793.y) + _2752;
                        _2680 = (_2845 * _2793.z) + _2753;
                        _2675 = (_2926 * _2810.x) + _2748;
                        _2676 = (_2926 * _2810.y) + _2749;
                        _2677 = (_2926 * _2810.z) + _2750;
                        if (_2755 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2755;
                        }
                    }
                    frontier_phi_68_pred = _2677;
                    frontier_phi_68_pred_1 = _2680;
                    frontier_phi_68_pred_2 = _2679;
                    frontier_phi_68_pred_3 = _2678;
                    frontier_phi_68_pred_4 = _2676;
                    frontier_phi_68_pred_5 = _2675;
                }
                _2456 = frontier_phi_68_pred;
                _2462 = frontier_phi_68_pred_1;
                _2460 = frontier_phi_68_pred_2;
                _2458 = frontier_phi_68_pred_3;
                _2454 = frontier_phi_68_pred_4;
                _2452 = frontier_phi_68_pred_5;
                uint _2610 = _2609 + 1u;
                if (_2610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2603 = _2452;
                    _2604 = _2454;
                    _2605 = _2456;
                    _2606 = _2458;
                    _2607 = _2460;
                    _2608 = _2462;
                    _2609 = _2610;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
        }
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.z;
        uint _2468 = (_2466 >> 8u) & 15u;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((4294967295u << _2468) & _2351) == 0u)
        {
            _2571 = _2451;
            _2573 = _2453;
            _2575 = _2455;
            _2577 = _2457;
            _2579 = _2459;
            _2581 = _2461;
        }
        else
        {
            float _2596 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
            float _2597 = _2596 * _2305;
            float _2598 = _2596 * _2306;
            float _2599 = _2596 * _2307;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2468 < ((_2466 >> 12u) & 15u))
            {
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2731 = _2451;
                float _2732 = _2453;
                float _2733 = _2455;
                float _2734 = _2457;
                float _2735 = _2459;
                float _2736 = _2461;
                uint _2737 = _2468;
                uint _2746;
                bool _2747;
                for (;;)
                {
                    _2746 = texelFetch(g_lightClassification, int((((_2345 << 5u) + (_2331 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                    _2747 = _2746 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2747)
                    {
                        frontier_phi_79_pred = _2736;
                        frontier_phi_79_pred_1 = _2735;
                        frontier_phi_79_pred_2 = _2734;
                        frontier_phi_79_pred_3 = _2733;
                        frontier_phi_79_pred_4 = _2732;
                        frontier_phi_79_pred_5 = _2731;
                    }
                    else
                    {
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _2953 = _2731;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        uint _2959 = _2746;
                        uint _2960;
                        vec4 _2985;
                        float _2986;
                        vec4 _3001;
                        vec3 _3013;
                        vec4 _3029;
                        vec4 _3045;
                        float _3092;
                        bool _3093;
                        for (;;)
                        {
                            uint _2970 = ((_2737 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2959));
                            _2960 = (_2959 + 4294967295u) & _2959;
                            uint _2972 = _2970 * 40u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2986 = _2985.w;
                            uint _2988 = (_2970 * 40u) + 4u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2970 * 40u) + 8u;
                            _3013 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x));
                            uint _3016 = (_2970 * 40u) + 16u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3032 = (_2970 * 40u) + 20u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2970 * 40u) + 24u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3067 = (_2970 * 40u) + 28u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3092 = fma(_2307, _3080.z, fma(_2306, _3080.y, _3080.x * _2305)) + _3080.w;
                            _3093 = !((fma(_2307, _3061.z, fma(_2306, _3061.y, _3061.x * _2305)) + _3061.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3093)
                            {
                                float _3120 = _2985.x - _2305;
                                float _3121 = _2985.y - _2306;
                                float _3122 = _2985.z - _2307;
                                float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                                float _3126 = inversesqrt(_3123);
                                float _3127 = _3126 * _3120;
                                float _3128 = _3126 * _3121;
                                float _3129 = _3126 * _3122;
                                float _3133 = 1.0 - (_3123 / (_2986 * _2986));
                                float _4218 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3138 = sqrt(_3123) * _3001.w;
                                float _3140 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                                float _3141 = _3140 * _3140;
                                float _3144 = ((1.0 - _3141) * dot(vec3(_3127, _3128, _3129), vec3(_548, _551, _554))) + _3141;
                                float _3147 = _3138 * _3138;
                                float _3151 = (fma(_2307, _3029.z, fma(_2306, _3029.y, _3029.x * _2305)) + _3029.w) / _3092;
                                float _3152 = (fma(_2307, _3045.z, fma(_2306, _3045.y, _3045.x * _2305)) + _3045.w) / _3092;
                                float _3156 = 1.0 - dot(vec2(_3151, _3152), vec2(_3151, _3152));
                                float _4234 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3158 = _3157 * (((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3134) / ((_3147 * 0.699999988079071044921875) + 1.0));
                                float _3170 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                                float _3171 = 1.0 - _609;
                                float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                                float _3179 = _3178 * _3178;
                                float _3180 = _3179 * _3179;
                                float _3181 = _3127 - _2597;
                                float _3182 = _3128 - _2598;
                                float _3183 = _3129 - _2599;
                                float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                                float _3191 = dot(vec3(_548, _551, _554), vec3((-0.0) - _2597, (-0.0) - _2598, (-0.0) - _2599));
                                float _4245 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3195 = dot(vec3(_548, _551, _554), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                                float _4256 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                                float _3203 = _3140 * _3179;
                                float _3204 = _3203 * _3203;
                                float _3210 = ((1.0 - _3204) * dot(vec3(_548, _551, _554), vec3(_3127, _3128, _3129))) + _3204;
                                float _4267 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3212 = 1.0 - _3179;
                                float _3222 = (0.5 / (((_3211 * ((_3194 * _3212) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3179) * _3194))) * _3211;
                                float _4278 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3232 = (_3157 * _3134) * (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3202 * _3202) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3158 * _3001.z;
                                frontier_phi_85_pred_1 = _3158 * _3001.y;
                                frontier_phi_85_pred_2 = _3158 * _3001.x;
                                frontier_phi_85_pred_3 = _3232 * _3013.z;
                                frontier_phi_85_pred_4 = _3232 * _3013.y;
                                frontier_phi_85_pred_5 = _3232 * _3013.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3241 = frontier_phi_85_pred;
                            _3240 = frontier_phi_85_pred_1;
                            _3239 = frontier_phi_85_pred_2;
                            _3238 = frontier_phi_85_pred_3;
                            _3237 = frontier_phi_85_pred_4;
                            _3236 = frontier_phi_85_pred_5;
                            _2943 = _3239 + _2956;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2940 = _3236 + _2953;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            if (_2960 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2960;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2945;
                        frontier_phi_79_pred_1 = _2944;
                        frontier_phi_79_pred_2 = _2943;
                        frontier_phi_79_pred_3 = _2942;
                        frontier_phi_79_pred_4 = _2941;
                        frontier_phi_79_pred_5 = _2940;
                    }
                    _2582 = frontier_phi_79_pred;
                    _2580 = frontier_phi_79_pred_1;
                    _2578 = frontier_phi_79_pred_2;
                    _2576 = frontier_phi_79_pred_3;
                    _2574 = frontier_phi_79_pred_4;
                    _2572 = frontier_phi_79_pred_5;
                    uint _2738 = _2737 + 1u;
                    if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2731 = _2572;
                        _2732 = _2574;
                        _2733 = _2576;
                        _2734 = _2578;
                        _2735 = _2580;
                        _2736 = _2582;
                        _2737 = _2738;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2578;
                frontier_phi_60_61_ladder_1 = _2582;
                frontier_phi_60_61_ladder_2 = _2580;
                frontier_phi_60_61_ladder_3 = _2576;
                frontier_phi_60_61_ladder_4 = _2574;
                frontier_phi_60_61_ladder_5 = _2572;
            }
            else
            {
                frontier_phi_60_61_ladder = _2457;
                frontier_phi_60_61_ladder_1 = _2461;
                frontier_phi_60_61_ladder_2 = _2459;
                frontier_phi_60_61_ladder_3 = _2455;
                frontier_phi_60_61_ladder_4 = _2453;
                frontier_phi_60_61_ladder_5 = _2451;
            }
            _2571 = frontier_phi_60_61_ladder_5;
            _2573 = frontier_phi_60_61_ladder_4;
            _2575 = frontier_phi_60_61_ladder_3;
            _2577 = frontier_phi_60_61_ladder;
            _2579 = frontier_phi_60_61_ladder_2;
            _2581 = frontier_phi_60_61_ladder_1;
        }
        float _2586 = isnan(1.0) ? _593 : (isnan(_593) ? 1.0 : min(_593, 1.0));
        _2363 = (_2586 * _2577) + _1816;
        _2365 = (_2586 * _2579) + _1818;
        _2367 = (_2586 * _2581) + _1820;
        _2369 = ((_2571 * 0.039999999105930328369140625) * _2586) + _2149;
        _2371 = ((_2573 * 0.039999999105930328369140625) * _2586) + _2151;
        _2373 = ((_2575 * 0.039999999105930328369140625) * _2586) + _2153;
    }
    else
    {
        _2363 = _1816;
        _2365 = _1818;
        _2367 = _1820;
        _2369 = _2149;
        _2371 = _2151;
        _2373 = _2153;
    }
    float _4294 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _4305 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4316 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _2390 = ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2363 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _593))) + ((_2369 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2391 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2365 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _593))) + ((_2371 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    float _2392 = ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2367 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _593))) + ((_2373 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1431)) * cbPerFrame._m0[3u].x);
    uint _2393 = _567 + 6u;
    float _2401 = _528 / cbSceneParam._m0[86u].x;
    float _2402 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2416 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, (log2((isnan(cbSceneParam._m0[77u].w) ? _449 : (isnan(_449) ? cbSceneParam._m0[77u].w : min(_449, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2418 = _2416.x;
    float _2419 = _2416.y;
    float _2420 = _2416.z;
    float _2421 = _2416.w;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_449 > cbSceneParam._m0[78u].w)
    {
        float _2476 = isnan(_449) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _449 : min(cbSceneParam._m0[80u].w, _449));
        float _2477 = _2476 / _449;
        float _2488 = _2477 * _500;
        float _2489 = _501 * _2477;
        float _2490 = (-0.0) - _2489;
        float _2491 = _2477 * _502;
        float _2493 = (cbSceneParam._m0[77u].w * _2490) / _2476;
        float _2494 = _2493 + cbSceneParam._m0[79u].w;
        float _2495 = cbSceneParam._m0[79u].w - _2489;
        float _2501 = sqrt(((_2488 * _2488) + (_2489 * _2489)) + (_2491 * _2491));
        float _2504 = (1.0 - (cbSceneParam._m0[77u].w / _2476)) * _2501;
        float _2509 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2511 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2688;
        if (abs((_2490 - _2493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2688 = ((((_2494 > 0.0) ? exp2(_2509 * _2494) : (2.0 - exp2(_2511 * _2494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2504;
        }
        else
        {
            float _2632 = 1.0 / cbSceneParam._m0[80u].x;
            float _2633 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : max(_2494, _2495));
            float _2634 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : min(_2494, _2495));
            float _2643 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : min(_2633, 0.0));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            _2688 = ((abs(_2501 / _2490) * cbSceneParam._m0[80u].y) * ((((_2643 - _2644) * 2.0) - ((exp2(_2509 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0)))) - exp2(_2509 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0))))) * _2632)) - ((exp2(_2511 * _2643) - exp2(_2511 * _2644)) * _2632))) + (_2504 * cbSceneParam._m0[80u].z);
        }
        vec4 _2690 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, 1.0), 0.0);
        float _2699 = exp2((_2688 * (-1.44269502162933349609375)) * (1.0 - _2690.w));
        float _2700 = log2(_2699);
        float _2716 = log2(_2421);
        _2513 = (exp2(_2716 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].x)) * _2690.x) / cbSceneParam._m0[78u].x)) + _2418;
        _2515 = (exp2(_2716 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].y)) * _2690.y) / cbSceneParam._m0[78u].y)) + _2419;
        _2517 = (exp2(_2716 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2700 * cbSceneParam._m0[78u].z)) * _2690.z) / cbSceneParam._m0[78u].z)) + _2420;
        _2519 = _2699 * _2421;
    }
    else
    {
        _2513 = _2418;
        _2515 = _2419;
        _2517 = _2420;
        _2519 = _2421;
    }
    bool _2726;
    vec4 _2529;
    vec4 _2551;
    float _2553;
    float _2557;
    float _2558;
    float _2559;
    float _2560;
    bool _2570;
    for (;;)
    {
        _2529 = cbMatDynParam._m0[0u];
        float _2531 = roundEven(_2529.y);
        bool _2532 = _2531 == 3.0;
        float _2533 = log2(_2519);
        float _2540 = exp2(_2533 * cbSceneParam._m0[78u].x) * _2390;
        float _2541 = exp2(_2533 * cbSceneParam._m0[78u].y) * _2391;
        float _2542 = exp2(_2533 * cbSceneParam._m0[78u].z) * _2392;
        float _2549 = _516 + (-0.5);
        _2551 = cbMtdParam._m0[1u];
        _2553 = _2551.y * _2549;
        float _2556 = (_2531 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2557 = _2556 * (_2532 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2513)));
        _2558 = _2556 * (_2532 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2515)));
        _2559 = _2556 * (_2532 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2517)));
        _2560 = _2549 * 0.999000012874603271484375;
        _2570 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2570)
        {
            if ((cbInstanceData._m0[_567 + 7u].x + _2560) < 0.5)
            {
                _2726 = true;
                break;
            }
        }
        uint _2667 = _569 + uint(_2529.w);
        if ((cbInstanceData._m0[_2667].w < 1.0) && ((cbInstanceData._m0[_2667].w + _2560) < 0.5))
        {
            _2726 = true;
            break;
        }
        if ((_2553 + 1.0) < _2551.x)
        {
            _2726 = true;
            break;
        }
        _2726 = false;
        break;
    }
    float _2931;
    if (_2726)
    {
        discard_state = true;
        _2931 = 0.0;
    }
    else
    {
        _2931 = cbInstanceData._m0[_2393].w;
    }
    SV_Target.x = _2557;
    SV_Target.y = _2558;
    SV_Target.z = _2559;
    SV_Target.w = _2931;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2393].w;
    discard_exit();
}


