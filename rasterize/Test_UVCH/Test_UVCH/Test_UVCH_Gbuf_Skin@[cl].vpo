#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 TANGENT_2;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 8) in vec4 TEXCOORD_1;
layout(location = 9) in vec4 TEXCOORD_2;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TANGENT_2_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec4 TEXCOORD_5;
layout(location = 6) out float TEXCOORD_8;
layout(location = 6, component = 1) out float TEXCOORD_9;
layout(location = 6, component = 2) out float TEXCOORD_10;
layout(location = 6, component = 3) out float TEXCOORD_16;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TANGENT_2_1.x = 0.0;
    TANGENT_2_1.y = 0.0;
    TANGENT_2_1.z = 0.0;
    TANGENT_2_1.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_5.w = 0.0;
    TEXCOORD_8 = 0.0;
    TEXCOORD_9 = 0.0;
    TEXCOORD_10 = 0.0;
    TEXCOORD_16 = 0.0;
    float _210 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _213 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _222 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _223 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _224 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _234 = (float(TANGENT_2.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _235 = (float(TANGENT_2.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _236 = (float(TANGENT_2.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _246 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _248 = texelFetch(g_InstanceIndexBuffer, int(_246));
    uint _249 = _248.x;
    precise float _250 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _255 = isnan(_250) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _250 : max(0.001000000047497451305389404296875, _250));
    precise float _257 = BLENDWEIGHT.x / _255;
    precise float _258 = BLENDWEIGHT.y / _255;
    precise float _259 = BLENDWEIGHT.z / _255;
    precise float _260 = BLENDWEIGHT.w / _255;
    uvec4 _267 = floatBitsToUint(cbInstanceData._m0[(_249 * 13u) + 4u]);
    uint _268 = _267.x;
    uint _270 = (_268 + uint(float(BLENDINDICES.x))) * 3u;
    uint _277 = _270 + 1u;
    uint _284 = _270 + 2u;
    precise float _291 = _257 * cbObjMatrix._m0[_270].x;
    precise float _292 = _257 * cbObjMatrix._m0[_277].x;
    precise float _293 = _257 * cbObjMatrix._m0[_284].x;
    precise float _294 = _257 * cbObjMatrix._m0[_270].y;
    precise float _295 = _257 * cbObjMatrix._m0[_277].y;
    precise float _296 = _257 * cbObjMatrix._m0[_284].y;
    precise float _297 = _257 * cbObjMatrix._m0[_270].z;
    precise float _298 = _257 * cbObjMatrix._m0[_277].z;
    precise float _299 = _257 * cbObjMatrix._m0[_284].z;
    precise float _300 = _257 * cbObjMatrix._m0[_270].w;
    precise float _301 = _257 * cbObjMatrix._m0[_277].w;
    precise float _302 = _257 * cbObjMatrix._m0[_284].w;
    uint _305 = (_268 + uint(float(BLENDINDICES.y))) * 3u;
    uint _312 = _305 + 1u;
    uint _319 = _305 + 2u;
    precise float _326 = _258 * cbObjMatrix._m0[_305].x;
    precise float _327 = _258 * cbObjMatrix._m0[_312].x;
    precise float _328 = _258 * cbObjMatrix._m0[_319].x;
    precise float _329 = _258 * cbObjMatrix._m0[_305].y;
    precise float _330 = _258 * cbObjMatrix._m0[_312].y;
    precise float _331 = _258 * cbObjMatrix._m0[_319].y;
    precise float _332 = _258 * cbObjMatrix._m0[_305].z;
    precise float _333 = _258 * cbObjMatrix._m0[_312].z;
    precise float _334 = _258 * cbObjMatrix._m0[_319].z;
    precise float _335 = _258 * cbObjMatrix._m0[_305].w;
    precise float _336 = _258 * cbObjMatrix._m0[_312].w;
    precise float _337 = _258 * cbObjMatrix._m0[_319].w;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    precise float _347 = _300 + _335;
    precise float _348 = _301 + _336;
    precise float _349 = _302 + _337;
    uint _352 = (_268 + uint(float(BLENDINDICES.z))) * 3u;
    uint _359 = _352 + 1u;
    uint _366 = _352 + 2u;
    precise float _373 = _259 * cbObjMatrix._m0[_352].x;
    precise float _374 = _259 * cbObjMatrix._m0[_359].x;
    precise float _375 = _259 * cbObjMatrix._m0[_366].x;
    precise float _376 = _259 * cbObjMatrix._m0[_352].y;
    precise float _377 = _259 * cbObjMatrix._m0[_359].y;
    precise float _378 = _259 * cbObjMatrix._m0[_366].y;
    precise float _379 = _259 * cbObjMatrix._m0[_352].z;
    precise float _380 = _259 * cbObjMatrix._m0[_359].z;
    precise float _381 = _259 * cbObjMatrix._m0[_366].z;
    precise float _382 = _259 * cbObjMatrix._m0[_352].w;
    precise float _383 = _259 * cbObjMatrix._m0[_359].w;
    precise float _384 = _259 * cbObjMatrix._m0[_366].w;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = _347 + _382;
    precise float _395 = _348 + _383;
    precise float _396 = _349 + _384;
    uint _399 = (_268 + uint(float(BLENDINDICES.w))) * 3u;
    uint _406 = _399 + 1u;
    uint _413 = _399 + 2u;
    precise float _420 = _260 * cbObjMatrix._m0[_399].x;
    precise float _421 = _260 * cbObjMatrix._m0[_406].x;
    precise float _422 = _260 * cbObjMatrix._m0[_413].x;
    precise float _423 = _260 * cbObjMatrix._m0[_399].y;
    precise float _424 = _260 * cbObjMatrix._m0[_406].y;
    precise float _425 = _260 * cbObjMatrix._m0[_413].y;
    precise float _426 = _260 * cbObjMatrix._m0[_399].z;
    precise float _427 = _260 * cbObjMatrix._m0[_406].z;
    precise float _428 = _260 * cbObjMatrix._m0[_413].z;
    precise float _429 = _260 * cbObjMatrix._m0[_399].w;
    precise float _430 = _260 * cbObjMatrix._m0[_406].w;
    precise float _431 = _260 * cbObjMatrix._m0[_413].w;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    precise float _440 = _393 + _428;
    precise float _441 = _394 + _429;
    precise float _442 = _395 + _430;
    precise float _443 = _396 + _431;
    precise float _444 = POSITION.x * _432;
    precise float _445 = POSITION.y * _435;
    precise float _446 = _445 + _444;
    precise float _447 = POSITION.z * _438;
    precise float _448 = _447 + _446;
    precise float _449 = 1.0 * _441;
    precise float _450 = _449 + _448;
    precise float _451 = POSITION.x * _433;
    precise float _452 = POSITION.y * _436;
    precise float _453 = _452 + _451;
    precise float _454 = POSITION.z * _439;
    precise float _455 = _454 + _453;
    precise float _456 = 1.0 * _442;
    precise float _457 = _456 + _455;
    precise float _458 = POSITION.x * _434;
    precise float _459 = POSITION.y * _437;
    precise float _460 = _459 + _458;
    precise float _461 = POSITION.z * _440;
    precise float _462 = _461 + _460;
    precise float _463 = 1.0 * _443;
    precise float _464 = _463 + _462;
    float _470 = cbSceneParam._m0[3u].x - _450;
    float _471 = cbSceneParam._m0[3u].y - _457;
    float _472 = cbSceneParam._m0[3u].z - _464;
    precise float _507 = _450 - cbSceneParam._m0[3u].x;
    precise float _508 = _457 - cbSceneParam._m0[3u].y;
    precise float _509 = _464 - cbSceneParam._m0[3u].z;
    precise float _537 = _507 * cbSceneParam._m0[24u].x;
    precise float _538 = _508 * cbSceneParam._m0[24u].y;
    precise float _539 = _538 + _537;
    precise float _540 = _509 * cbSceneParam._m0[24u].z;
    precise float _541 = _540 + _539;
    precise float _542 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _543 = _542 + _541;
    precise float _544 = _507 * cbSceneParam._m0[25u].x;
    precise float _545 = _508 * cbSceneParam._m0[25u].y;
    precise float _546 = _545 + _544;
    precise float _547 = _509 * cbSceneParam._m0[25u].z;
    precise float _548 = _547 + _546;
    precise float _549 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _550 = _549 + _548;
    precise float _551 = _507 * cbSceneParam._m0[26u].x;
    precise float _552 = _508 * cbSceneParam._m0[26u].y;
    precise float _553 = _552 + _551;
    precise float _554 = _509 * cbSceneParam._m0[26u].z;
    precise float _555 = _554 + _553;
    precise float _556 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _557 = _556 + _555;
    precise float _558 = _507 * cbSceneParam._m0[27u].x;
    precise float _559 = _508 * cbSceneParam._m0[27u].y;
    precise float _560 = _559 + _558;
    precise float _561 = _509 * cbSceneParam._m0[27u].z;
    precise float _562 = _561 + _560;
    precise float _563 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _564 = _563 + _562;
    gl_Position.x = _543;
    gl_Position.y = _550;
    gl_Position.z = _557;
    gl_Position.w = _564;
    NORMAL_1.x = fma(_213, _438, fma(_212, _435, _432 * _210));
    NORMAL_1.y = fma(_213, _439, fma(_212, _436, _433 * _210));
    NORMAL_1.z = fma(_213, _440, fma(_212, _437, _434 * _210));
    NORMAL_1.w = float(_249);
    TANGENT_1.x = fma(_224, _438, fma(_223, _435, _432 * _222));
    TANGENT_1.y = fma(_224, _439, fma(_223, _436, _433 * _222));
    TANGENT_1.z = fma(_224, _440, fma(_223, _437, _434 * _222));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TANGENT_2_1.x = fma(_236, _438, fma(_235, _435, _432 * _234));
    TANGENT_2_1.y = fma(_236, _439, fma(_235, _436, _433 * _234));
    TANGENT_2_1.z = fma(_236, _440, fma(_235, _437, _434 * _234));
    TANGENT_2_1.w = (float(TANGENT_2.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_3.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_3.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_3.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_5.x = TEXCOORD_1.x;
    TEXCOORD_5.y = TEXCOORD_1.y;
    TEXCOORD_5.z = TEXCOORD_1.z;
    TEXCOORD_5.w = COLOR_1.x;
    TEXCOORD_8 = TEXCOORD_2.x;
    TEXCOORD_9 = TEXCOORD_2.y;
    TEXCOORD_10 = TEXCOORD_2.z;
    TEXCOORD_16 = sqrt(((_470 * _470) + (_471 * _471)) + (_472 * _472));
}


