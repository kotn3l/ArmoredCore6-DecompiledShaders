#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_UVCH_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D Test_UVCH_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D Test_UVCH_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D Test_UVCH_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D Test_UVCH_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D Test_UVCH_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _995;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _262 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _319 = (TEXCOORD_5.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(Test_UVCH_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[11u].y + 1.0);
    float _3658 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _327 = (_320 * ((_289.x * cbMtdParam._m0[10u].x) - _268)) + _268;
    float _328 = (_320 * ((_289.y * cbMtdParam._m0[10u].y) - _269)) + _269;
    float _329 = (_320 * ((_289.z * cbMtdParam._m0[10u].z) - _270)) + _270;
    vec4 _342 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _366 = _364.x;
    float _367 = _364.y;
    float _368 = _364.z;
    vec4 _380 = texture(sampler2D(Test_UVCH_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _393 = ((_380.z - _368) * _320) + _368;
    float _396 = ((((_380.x - _366) * _320) + _366) * 2.0) + (-1.0);
    float _397 = ((((_380.y - _367) * _320) + _367) * 2.0) + (-1.0);
    float _398 = dot(vec2(_396, _397), vec2(_396, _397));
    float _3669 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    float _408 = (((_342.z - _393) * TEXCOORD_8) * cbMtdParam._m0[11u].w) + _393;
    float _414 = ((((_342.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[11u].z) + _396;
    float _415 = ((((_342.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[11u].z) + _397;
    float _418 = fma(_403, _235, fma(_415, _227 * TANGENT.x, (_213 * _205) * _414));
    float _421 = fma(_403, _236, fma(_415, _227 * TANGENT.y, (_213 * _206) * _414));
    float _424 = fma(_403, _237, fma(_415, _227 * TANGENT.z, (_213 * _207) * _414));
    float _428 = inversesqrt(dot(vec3(_418, _421, _424), vec3(_418, _421, _424)));
    float _429 = _428 * _418;
    float _430 = _428 * _421;
    float _431 = _428 * _424;
    float _3680 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _432 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3702 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3713 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _451 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    vec4 _516 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _518 = _516.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _675 = sqrt(((_502 * _502) + (_503 * _503)) + (_504 * _504));
        float _681 = (cbMatDynParam._m0[5u].x * _675) + cbMatDynParam._m0[5u].y;
        float _3724 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _686 = (cbMatDynParam._m0[5u].z * _675) + cbMatDynParam._m0[5u].w;
        float _3735 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) - _682)) + _682) < ((_518 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _550 = fma(_431, cbSceneParam._m0[5u].z, fma(_430, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _429));
    float _553 = fma(_431, cbSceneParam._m0[6u].z, fma(_430, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _429));
    float _556 = fma(_431, cbSceneParam._m0[7u].z, fma(_430, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _429));
    uint _569 = uint(roundEven(NORMAL.w)) * 13u;
    uint _571 = _569 + 9u;
    uint _572 = _571 + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_572].z;
    float _3746 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _595 = _592.x * TEXCOORD_5.w;
    float _596 = dot(vec3(_429, _430, _431), vec3(_509, _510, _511));
    float _599 = _596 * 2.0;
    float _603 = (_599 * _429) - _509;
    float _604 = (_599 * _430) - _510;
    float _605 = (_599 * _431) - _511;
    float _609 = abs(dot(vec3(_509, _510, _511), vec3(_429, _430, _431)));
    float _3779 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _611 = sqrt(_432);
    float _624 = exp2((_611 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_611 * 3.0));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = fma(_664, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656));
        float _723 = fma(_664, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656));
        float _727 = fma(_664, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656));
        float _752 = _656 + _429;
        float _753 = _660 + _430;
        float _754 = _664 + _431;
        float _764 = fma(_754, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752)) - _719;
        float _765 = fma(_754, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752)) - _723;
        float _766 = fma(_754, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752)) - _727;
        float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
        float _783 = ((_770 * _764) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_719 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_770 * _765) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_723 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_770 * _766) / cbModelParam._m0[34u].z) + ((((((_727 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        float _822 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_788.x + (-0.5));
        float _824 = _822 * (_788.y + (-0.5));
        float _825 = _822 * (_788.z + (-0.5));
        float _832 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_795.x + (-0.5));
        float _834 = _832 * (_795.y + (-0.5));
        float _835 = _832 * (_795.z + (-0.5));
        float _842 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_802.x + (-0.5));
        float _844 = _842 * (_802.y + (-0.5));
        float _845 = _842 * (_802.z + (-0.5));
        float _852 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_809.x + (-0.5));
        float _854 = _852 * (_809.y + (-0.5));
        float _855 = _852 * (_809.z + (-0.5));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = _823 * 0.5;
        float _860 = _833 * 0.5;
        float _861 = _843 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _876 = (dot(vec3(_429, _430, _431), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _886 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3827 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_888 + 1.0))) + _893) * _856;
        float _903 = _824 * 0.5;
        float _904 = _834 * 0.5;
        float _905 = _844 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_429, _430, _431), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3860 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_930 + 1.0))) + _935) * _857;
        float _945 = _825 * 0.5;
        float _946 = _835 * 0.5;
        float _947 = _845 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_429, _430, _431), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3893 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_972 + 1.0))) + _977) * _858;
        _994 = _825;
        _996 = _824;
        _997 = _823;
        _998 = _835;
        _999 = _834;
        _1000 = _833;
        _1001 = _845;
        _1002 = _844;
        _1003 = _843;
        _1004 = _858;
        _1005 = _857;
        _1006 = _856;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_664, cbModelParam._m0[30u].z, fma(_660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _656));
        float _1042 = fma(_664, cbModelParam._m0[31u].z, fma(_660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _656));
        float _1046 = fma(_664, cbModelParam._m0[32u].z, fma(_660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _656));
        float _1069 = _656 + _429;
        float _1070 = _660 + _430;
        float _1071 = _664 + _431;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_429, _430, _431), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3956 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_429, _430, _431), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3989 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_429, _430, _431), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4022 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _995;
        _1308 = _995;
        _1309 = _995;
        _1310 = _995;
        _1311 = _995;
        _1312 = _995;
        _1313 = _995;
        _1314 = _995;
        _1315 = _995;
        _1316 = _995;
        _1317 = _995;
        _1318 = _995;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _603 * 0.5;
    float _1376 = _604 * 0.5;
    float _1377 = _605 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_994, _998, _1001, _1004));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_996, _999, _1002, _1005));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _432);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_664, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_664, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_664, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_605, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603));
        float _1507 = fma(_605, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603));
        float _1510 = fma(_605, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1538 = frontier_phi_19_17_ladder;
        }
        float _1711;
        if (_1507 > 0.0)
        {
            _1711 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1711 = frontier_phi_28_24_ladder;
        }
        float _2006;
        if (_1510 > 0.0)
        {
            _2006 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2006 = frontier_phi_40_35_ladder;
        }
        float _2008 = isnan(_1711) ? _1538 : (isnan(_1538) ? _1711 : min(_1538, _1711));
        float _2009 = isnan(_2006) ? _2008 : (isnan(_2008) ? _2006 : min(_2008, _2006));
        float _2013 = (_2009 * _1504) + _1493;
        float _2014 = (_2009 * _1507) + _1497;
        float _2015 = (_2009 * _1510) + _1501;
        float _2016 = _2009 * 9.9999997473787516355514526367188e-05;
        float _2018 = (-1.0) - _2016;
        float _2020 = _2016 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2015 > _2020) || ((_2015 < _2018) || ((_2014 > _2020) || ((_2014 < _2018) || ((_2013 < _2018) || (_2013 > _2020))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2015, cbModelParam._m0[9u].z, fma(_2014, cbModelParam._m0[9u].y, _2013 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2015, cbModelParam._m0[10u].z, fma(_2014, cbModelParam._m0[10u].y, _2013 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2015, cbModelParam._m0[11u].z, fma(_2014, cbModelParam._m0[11u].y, _2013 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_18_40_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_18_40_ladder_2;
        _1528 = frontier_phi_18_40_ladder_1;
        _1530 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_603, _604, _605), _1444);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _432);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_664, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_664, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_664, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_605, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603));
        float _1606 = fma(_605, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603));
        float _1609 = fma(_605, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603));
        float _1716;
        if (_1603 > 0.0)
        {
            _1716 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1716 = frontier_phi_30_26_ladder;
        }
        float _2033;
        if (_1606 > 0.0)
        {
            _2033 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2033 = frontier_phi_42_37_ladder;
        }
        float _2360;
        if (_1609 > 0.0)
        {
            _2360 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2360 = frontier_phi_52_49_ladder;
        }
        float _2362 = isnan(_2033) ? _1716 : (isnan(_1716) ? _2033 : min(_1716, _2033));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1603) + _1592;
        float _2368 = (_2363 * _1606) + _1596;
        float _2369 = (_2363 * _1609) + _1600;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2370;
        float _2373 = _2370 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2369 > _2373) || ((_2369 < _2371) || ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 < _2371) || (_2367 > _2373))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2369, cbModelParam._m0[17u].z, fma(_2368, cbModelParam._m0[17u].y, _2367 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2369, cbModelParam._m0[18u].z, fma(_2368, cbModelParam._m0[18u].y, _2367 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2369, cbModelParam._m0[19u].z, fma(_2368, cbModelParam._m0[19u].y, _2367 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_27_52_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_27_52_ladder_2;
        _1630 = frontier_phi_27_52_ladder_1;
        _1632 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_603, _604, _605), _1535);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1644 = ((((1.0 - _624) * ((_611 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_624 * _611)) * _595;
    float _1645 = _1644 * ((cbModelParam._m0[1u].w * (_1628 - _1526)) + _1526);
    float _1646 = _1644 * ((cbModelParam._m0[1u].w * (_1630 - _1528)) + _1528);
    float _1647 = _1644 * ((cbModelParam._m0[1u].w * (_1632 - _1530)) + _1530);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1703 = _1690 / _1702;
    float _1704 = _1694 / _1702;
    float _1705 = _1698 / _1702;
    float _1852;
    float _1853;
    float _1854;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1732 = ((uint(_1705 > cbSceneParam._m0[59u].y) + uint(_1705 > cbSceneParam._m0[59u].x)) + uint(_1705 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1733 = _1732 + 43u;
        uint _1741 = _1732 + 44u;
        uint _1749 = _1732 + 45u;
        uint _1757 = _1732 + 46u;
        float _1768 = fma(_1702, cbSceneParam._m0[_1733].w, fma(_1698, cbSceneParam._m0[_1733].z, fma(_1694, cbSceneParam._m0[_1733].y, _1690 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1702, cbSceneParam._m0[_1741].w, fma(_1698, cbSceneParam._m0[_1741].z, fma(_1694, cbSceneParam._m0[_1741].y, _1690 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1702, cbSceneParam._m0[_1757].w, fma(_1698, cbSceneParam._m0[_1757].z, fma(_1694, cbSceneParam._m0[_1757].y, _1690 * cbSceneParam._m0[_1757].x)));
        float _1785 = cbSceneParam._m0[33u].z * _1780;
        float _1787 = cbSceneParam._m0[33u].w * _1780;
        float _1790 = fma(_1702, cbSceneParam._m0[_1749].w, fma(_1698, cbSceneParam._m0[_1749].z, fma(_1694, cbSceneParam._m0[_1749].y, _1690 * cbSceneParam._m0[_1749].x))) / _1780;
        float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
        float _4148 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1845 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1768) / _1780, (_1787 + _1772) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1768) / _1780, (_1772 - _1785) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1785) / _1780, (_1772 - _1787) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1787) / _1780, (_1785 + _1772) / _1780), _1790), 0.0)).x), vec4(0.25)));
        _1852 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
        _1853 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
        _1854 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1852 = 1.0;
        _1853 = 1.0;
        _1854 = 1.0;
    }
    float _1918;
    float _1920;
    float _1922;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1906 = fma(_1702, cbSceneParam._m0[63u].w, fma(_1698, cbSceneParam._m0[63u].z, fma(_1694, cbSceneParam._m0[63u].y, _1690 * cbSceneParam._m0[63u].x)));
        float _1907 = fma(_1702, cbSceneParam._m0[60u].w, fma(_1698, cbSceneParam._m0[60u].z, fma(_1694, cbSceneParam._m0[60u].y, _1690 * cbSceneParam._m0[60u].x))) / _1906;
        float _1908 = fma(_1702, cbSceneParam._m0[61u].w, fma(_1698, cbSceneParam._m0[61u].z, fma(_1694, cbSceneParam._m0[61u].y, _1690 * cbSceneParam._m0[61u].x))) / _1906;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1907 >= cbSceneParam._m0[64u].x) && (_1908 >= cbSceneParam._m0[64u].y)) && (_1907 <= cbSceneParam._m0[64u].z)) && (_1908 <= cbSceneParam._m0[64u].w))
        {
            float _2046 = fma(_1702, cbSceneParam._m0[62u].w, fma(_1698, cbSceneParam._m0[62u].z, fma(_1694, cbSceneParam._m0[62u].y, _1690 * cbSceneParam._m0[62u].x))) / _1906;
            float _2050 = isnan(cbSceneParam._m0[41u].w) ? _2046 : (isnan(_2046) ? cbSceneParam._m0[41u].w : max(_2046, cbSceneParam._m0[41u].w));
            float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
            float _4164 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
            float _2100 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1907, cbSceneParam._m0[33u].w + _1908), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1907, _1908 - cbSceneParam._m0[33u].z), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].z, _1908 - cbSceneParam._m0[33u].w), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1908), _2050), 0.0)).x), vec4(0.25)));
            float _2104 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
            float _2105 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
            float _2106 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2105) ? _1853 : (isnan(_1853) ? _2105 : min(_1853, _2105));
            frontier_phi_39_38_ladder_1 = isnan(_2104) ? _1852 : (isnan(_1852) ? _2104 : min(_1852, _2104));
            frontier_phi_39_38_ladder_2 = isnan(_2106) ? _1854 : (isnan(_1854) ? _2106 : min(_1854, _2106));
        }
        else
        {
            frontier_phi_39_38_ladder = _1853;
            frontier_phi_39_38_ladder_1 = _1852;
            frontier_phi_39_38_ladder_2 = _1854;
        }
        _1918 = frontier_phi_39_38_ladder_1;
        _1920 = frontier_phi_39_38_ladder;
        _1922 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1918 = _1852;
        _1920 = _1853;
        _1922 = _1854;
    }
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_569 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _595 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1965 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1969 = _1929 | 1u;
    float _1980 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_429, _430, _431));
    float _1983 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_429, _430, _431));
    float _4200 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _4211 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1988 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _1990 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _1997 = ((cbLight._m0[_1946].x * _1952) * _1990) + (((cbLight._m0[_1956].x * _1918) * _1965) * _1988);
    float _1998 = ((_1952 * cbLight._m0[_1946].y) * _1990) + (((cbLight._m0[_1956].y * _1920) * _1965) * _1988);
    float _1999 = ((_1952 * cbLight._m0[_1946].z) * _1990) + (((cbLight._m0[_1956].z * _1922) * _1965) * _1988);
    uvec4 _2003 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2005 = _2003.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2005)
    {
        _2107 = _1997;
        _2109 = _1998;
        _2111 = _1999;
    }
    else
    {
        uint _2115 = _1929 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_429, _430, _431)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4222 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2134 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1997;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1998;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1999;
    }
    bool _2114 = _2003.y == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2114)
    {
        _2169 = _2107;
        _2171 = _2109;
        _2173 = _2111;
    }
    else
    {
        uint _2331 = _1929 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_429, _430, _431)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4238 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2350 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2169 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2107;
        _2171 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2109;
        _2173 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2111;
    }
    uint _2176 = _1929 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _432) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1929].x + _509;
    float _2192 = cbLight._m0[_1929].y + _510;
    float _2193 = cbLight._m0[_1929].z + _511;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1929].xyz));
    float _4254 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _2205 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2206 = dot(vec3(_429, _430, _431), vec3(_2198, _2199, _2200));
    float _4276 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2198, _2199, _2200));
    float _4287 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2205 * ((_2204 * _2230) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2230) + _2190) * _2204))) * _2204;
    float _4298 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2257 = _1929 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _432) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_1969].x + _509;
    float _2271 = cbLight._m0[_1969].y + _510;
    float _2272 = cbLight._m0[_1969].z + _511;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_1969].xyz));
    float _4309 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2284 = dot(vec3(_429, _430, _431), vec3(_2277, _2278, _2279));
    float _4320 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2277, _2278, _2279));
    float _4331 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2269;
    float _2316 = (0.5 / (((_2205 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2306) + _2269) * _2283))) * _2283;
    float _4342 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2328 = (((_2305 * cbLight._m0[_2257].x) * _2318) * _1952) + ((((cbLight._m0[_2176].x * _1918) * _2229) * _2243) * _1965);
    float _2329 = (((_2305 * cbLight._m0[_2257].y) * _2318) * _1952) + ((((cbLight._m0[_2176].y * _1920) * _2229) * _2243) * _1965);
    float _2330 = (((_2305 * cbLight._m0[_2257].z) * _2318) * _1952) + ((((cbLight._m0[_2176].z * _1922) * _2229) * _2243) * _1965);
    float _2386;
    float _2388;
    float _2390;
    if (_2005)
    {
        _2386 = _2328;
        _2388 = _2329;
        _2390 = _2330;
    }
    else
    {
        uint _2392 = _1929 + 2u;
        uint _2396 = _1929 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _432) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _509;
        float _2413 = cbLight._m0[_2392].y + _510;
        float _2414 = cbLight._m0[_2392].z + _511;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_2392].xyz));
        float _4353 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2426 = dot(vec3(_429, _430, _431), vec3(_2419, _2420, _2421));
        float _4364 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4375 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2448 = 1.0 - _2411;
        float _2458 = (0.5 / (((_2205 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2448) + _2411) * _2425))) * _2425;
        float _4386 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2386 = (((_2447 * cbLight._m0[_2396].x) * _2460) * _2461) + _2328;
        _2388 = (((_2447 * cbLight._m0[_2396].y) * _2460) * _2461) + _2329;
        _2390 = (((_2447 * cbLight._m0[_2396].z) * _2460) * _2461) + _2330;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2114)
    {
        _2492 = _2386;
        _2494 = _2388;
        _2496 = _2390;
    }
    else
    {
        uint _2503 = _1929 + 3u;
        uint _2507 = _1929 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _432) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _509;
        float _2524 = cbLight._m0[_2503].y + _510;
        float _2525 = cbLight._m0[_2503].z + _511;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_429, _430, _431), vec3(cbLight._m0[_2503].xyz));
        float _4402 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2537 = dot(vec3(_429, _430, _431), vec3(_2530, _2531, _2532));
        float _4413 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4424 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2559 = 1.0 - _2522;
        float _2569 = (0.5 / (((_2205 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2559) + _2522) * _2536))) * _2536;
        float _4435 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2492 = (((_2558 * cbLight._m0[_2507].x) * _2571) * _2572) + _2386;
        _2494 = (((_2558 * cbLight._m0[_2507].y) * _2571) * _2572) + _2388;
        _2496 = (((_2558 * cbLight._m0[_2507].z) * _2571) * _2572) + _2390;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1927.y == 0u)
    {
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2594)));
        float _2615 = (log2(_1705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2872)
                {
                    frontier_phi_73_pred = _2861;
                    frontier_phi_73_pred_1 = _2860;
                    frontier_phi_73_pred_2 = _2859;
                    frontier_phi_73_pred_3 = _2858;
                    frontier_phi_73_pred_4 = _2857;
                    frontier_phi_73_pred_5 = _2856;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2871;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2862 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _1703;
                        float _3068 = _3027.y - _1704;
                        float _3069 = _3027.z - _1705;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_550, _553, _556), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4461 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _1703;
                        float _3103 = (-0.0) - _1704;
                        float _3104 = (-0.0) - _1705;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3118 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _611;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3109 + _3074;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_550, _553, _556), vec3(_3109, _3110, _3111));
                        float _4477 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3143 = dot(vec3(_550, _553, _556), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4488 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3087 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3077) + _3152;
                        float _4499 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4510 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3150 * _3150) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2931 = (_3098 * _3046.x) + _3004;
                        _2932 = (_3098 * _3046.y) + _3005;
                        _2933 = (_3098 * _3046.z) + _3006;
                        _2928 = (_3178 * _3063.x) + _3001;
                        _2929 = (_3178 * _3063.y) + _3002;
                        _2930 = (_3178 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_73_pred = _2933;
                    frontier_phi_73_pred_1 = _2932;
                    frontier_phi_73_pred_2 = _2931;
                    frontier_phi_73_pred_3 = _2930;
                    frontier_phi_73_pred_4 = _2929;
                    frontier_phi_73_pred_5 = _2928;
                }
                _2715 = frontier_phi_73_pred;
                _2713 = frontier_phi_73_pred_1;
                _2711 = frontier_phi_73_pred_2;
                _2709 = frontier_phi_73_pred_3;
                _2707 = frontier_phi_73_pred_4;
                _2705 = frontier_phi_73_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2705;
                    _2857 = _2707;
                    _2858 = _2709;
                    _2859 = _2711;
                    _2860 = _2713;
                    _2861 = _2715;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2721) & _2625) == 0u)
        {
            _2824 = _2704;
            _2826 = _2706;
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
            float _2850 = _2849 * _1703;
            float _2851 = _2849 * _1704;
            float _2852 = _2849 * _1705;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2984 = _2704;
                float _2985 = _2706;
                float _2986 = _2708;
                float _2987 = _2710;
                float _2988 = _2712;
                float _2989 = _2714;
                uint _2990 = _2721;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3000)
                    {
                        frontier_phi_84_pred = _2988;
                        frontier_phi_84_pred_1 = _2987;
                        frontier_phi_84_pred_2 = _2986;
                        frontier_phi_84_pred_3 = _2985;
                        frontier_phi_84_pred_4 = _2984;
                        frontier_phi_84_pred_5 = _2989;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3205 = _2984;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        uint _3211 = _2999;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3281;
                        vec4 _3297;
                        float _3344;
                        bool _3345;
                        for (;;)
                        {
                            uint _3222 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3268 = (_3222 * 40u) + 16u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3284 = (_3222 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3300 = (_3222 * 40u) + 24u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3319 = (_3222 * 40u) + 28u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3344 = fma(_1705, _3332.z, fma(_1704, _3332.y, _3332.x * _1703)) + _3332.w;
                            _3345 = !((fma(_1705, _3313.z, fma(_1704, _3313.y, _3313.x * _1703)) + _3313.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3345)
                            {
                                float _3372 = _3237.x - _1703;
                                float _3373 = _3237.y - _1704;
                                float _3374 = _3237.z - _1705;
                                float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                                float _3378 = inversesqrt(_3375);
                                float _3379 = _3378 * _3372;
                                float _3380 = _3378 * _3373;
                                float _3381 = _3378 * _3374;
                                float _3385 = 1.0 - (_3375 / (_3238 * _3238));
                                float _4521 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3390 = sqrt(_3375) * _3253.w;
                                float _3392 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                                float _3393 = _3392 * _3392;
                                float _3396 = ((1.0 - _3393) * dot(vec3(_3379, _3380, _3381), vec3(_550, _553, _556))) + _3393;
                                float _3399 = _3390 * _3390;
                                float _3403 = (fma(_1705, _3281.z, fma(_1704, _3281.y, _3281.x * _1703)) + _3281.w) / _3344;
                                float _3404 = (fma(_1705, _3297.z, fma(_1704, _3297.y, _3297.x * _1703)) + _3297.w) / _3344;
                                float _3408 = 1.0 - dot(vec2(_3403, _3404), vec2(_3403, _3404));
                                float _4537 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3410 = _3409 * (((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3386) / ((_3399 * 0.699999988079071044921875) + 1.0));
                                float _3422 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                                float _3423 = 1.0 - _611;
                                float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                                float _3431 = _3430 * _3430;
                                float _3432 = _3431 * _3431;
                                float _3433 = _3379 - _2850;
                                float _3434 = _3380 - _2851;
                                float _3435 = _3381 - _2852;
                                float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                                float _3443 = dot(vec3(_550, _553, _556), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4548 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3447 = dot(vec3(_550, _553, _556), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                                float _4559 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                                float _3455 = _3392 * _3431;
                                float _3456 = _3455 * _3455;
                                float _3462 = ((1.0 - _3456) * dot(vec3(_550, _553, _556), vec3(_3379, _3380, _3381))) + _3456;
                                float _4570 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3464 = 1.0 - _3431;
                                float _3474 = (0.5 / (((_3463 * ((_3446 * _3464) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3431) * _3446))) * _3463;
                                float _4581 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3484 = (_3409 * _3386) * (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) / ((_3454 * _3454) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3410 * _3253.y;
                                frontier_phi_90_pred_1 = _3410 * _3253.x;
                                frontier_phi_90_pred_2 = _3484 * _3265.z;
                                frontier_phi_90_pred_3 = _3484 * _3265.y;
                                frontier_phi_90_pred_4 = _3484 * _3265.x;
                                frontier_phi_90_pred_5 = _3410 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3492 = frontier_phi_90_pred;
                            _3491 = frontier_phi_90_pred_1;
                            _3490 = frontier_phi_90_pred_2;
                            _3489 = frontier_phi_90_pred_3;
                            _3488 = frontier_phi_90_pred_4;
                            _3493 = frontier_phi_90_pred_5;
                            _3195 = _3491 + _3208;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3192 = _3488 + _3205;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3196;
                        frontier_phi_84_pred_1 = _3195;
                        frontier_phi_84_pred_2 = _3194;
                        frontier_phi_84_pred_3 = _3193;
                        frontier_phi_84_pred_4 = _3192;
                        frontier_phi_84_pred_5 = _3197;
                    }
                    _2833 = frontier_phi_84_pred;
                    _2831 = frontier_phi_84_pred_1;
                    _2829 = frontier_phi_84_pred_2;
                    _2827 = frontier_phi_84_pred_3;
                    _2825 = frontier_phi_84_pred_4;
                    _2835 = frontier_phi_84_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2825;
                        _2985 = _2827;
                        _2986 = _2829;
                        _2987 = _2831;
                        _2988 = _2833;
                        _2989 = _2835;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2835;
                frontier_phi_65_66_ladder_1 = _2831;
                frontier_phi_65_66_ladder_2 = _2833;
                frontier_phi_65_66_ladder_3 = _2827;
                frontier_phi_65_66_ladder_4 = _2825;
                frontier_phi_65_66_ladder_5 = _2829;
            }
            else
            {
                frontier_phi_65_66_ladder = _2714;
                frontier_phi_65_66_ladder_1 = _2710;
                frontier_phi_65_66_ladder_2 = _2712;
                frontier_phi_65_66_ladder_3 = _2706;
                frontier_phi_65_66_ladder_4 = _2704;
                frontier_phi_65_66_ladder_5 = _2708;
            }
            _2824 = frontier_phi_65_66_ladder_4;
            _2826 = frontier_phi_65_66_ladder_3;
            _2828 = frontier_phi_65_66_ladder_5;
            _2830 = frontier_phi_65_66_ladder_1;
            _2832 = frontier_phi_65_66_ladder_2;
            _2834 = frontier_phi_65_66_ladder;
        }
        float _2839 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        _2637 = (_2839 * _2830) + _2169;
        _2639 = (_2839 * _2832) + _2171;
        _2641 = (_2839 * _2834) + _2173;
        _2643 = ((_2824 * 0.039999999105930328369140625) * _2839) + _2492;
        _2645 = ((_2826 * 0.039999999105930328369140625) * _2839) + _2494;
        _2647 = ((_2828 * 0.039999999105930328369140625) * _2839) + _2496;
    }
    else
    {
        _2637 = _2169;
        _2639 = _2171;
        _2641 = _2173;
        _2643 = _2492;
        _2645 = _2494;
        _2647 = _2496;
    }
    float _4597 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4608 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4619 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2664 = ((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2637 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _595))) + ((_2643 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2639 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _595))) + ((_2645 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2641 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _595))) + ((_2647 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    uint _2667 = _569 + 6u;
    float _2675 = _530 / cbSceneParam._m0[86u].x;
    float _2676 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, (log2((isnan(cbSceneParam._m0[77u].w) ? _451 : (isnan(_451) ? cbSceneParam._m0[77u].w : min(_451, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2692 = _2690.x;
    float _2693 = _2690.y;
    float _2694 = _2690.z;
    float _2695 = _2690.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_451 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_451) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _451 : min(cbSceneParam._m0[80u].w, _451));
        float _2730 = _2729 / _451;
        float _2741 = _2730 * _502;
        float _2742 = _503 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2744 = _2730 * _504;
        float _2746 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2742;
        float _2754 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2941;
        if (abs((_2743 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2941 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2887 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2941 = ((abs(_2754 / _2743) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2764 * _2896) - exp2(_2764 * _2897)) * _2885))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2943 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, 1.0), 0.0);
        float _2952 = exp2((_2941 * (-1.44269502162933349609375)) * (1.0 - _2943.w));
        float _2953 = log2(_2952);
        float _2969 = log2(_2695);
        _2766 = (exp2(_2969 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].x)) * _2943.x) / cbSceneParam._m0[78u].x)) + _2692;
        _2768 = (exp2(_2969 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].y)) * _2943.y) / cbSceneParam._m0[78u].y)) + _2693;
        _2770 = (exp2(_2969 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2953 * cbSceneParam._m0[78u].z)) * _2943.z) / cbSceneParam._m0[78u].z)) + _2694;
        _2772 = _2952 * _2695;
    }
    else
    {
        _2766 = _2692;
        _2768 = _2693;
        _2770 = _2694;
        _2772 = _2695;
    }
    bool _2979;
    vec4 _2782;
    vec4 _2804;
    float _2806;
    float _2810;
    float _2811;
    float _2812;
    float _2813;
    bool _2823;
    for (;;)
    {
        _2782 = cbMatDynParam._m0[0u];
        float _2784 = roundEven(_2782.y);
        bool _2785 = _2784 == 3.0;
        float _2786 = log2(_2772);
        float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * _2664;
        float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * _2665;
        float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * _2666;
        float _2802 = _518 + (-0.5);
        _2804 = cbMtdParam._m0[1u];
        _2806 = _2804.y * _2802;
        float _2809 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2810 = _2809 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
        _2811 = _2809 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
        _2812 = _2809 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
        _2813 = _2802 * 0.999000012874603271484375;
        _2823 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2823)
        {
            if ((cbInstanceData._m0[_569 + 7u].x + _2813) < 0.5)
            {
                _2979 = true;
                break;
            }
        }
        uint _2920 = _571 + uint(_2782.w);
        if ((cbInstanceData._m0[_2920].w < 1.0) && ((cbInstanceData._m0[_2920].w + _2813) < 0.5))
        {
            _2979 = true;
            break;
        }
        if ((_2806 + 1.0) < _2804.x)
        {
            _2979 = true;
            break;
        }
        _2979 = false;
        break;
    }
    float _3183;
    if (_2979)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = cbInstanceData._m0[_2667].w;
    }
    SV_Target.x = _2810;
    SV_Target.y = _2811;
    SV_Target.z = _2812;
    SV_Target.w = _3183;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2667].w;
    discard_exit();
}


