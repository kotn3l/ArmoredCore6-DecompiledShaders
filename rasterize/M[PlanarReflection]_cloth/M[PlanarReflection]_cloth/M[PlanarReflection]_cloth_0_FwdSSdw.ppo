#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _249.x;
    vec4 _263 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _2725 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _2725 : (isnan(_2725) ? 1.0 : min(_2725, 1.0))));
    float _287 = fma(_280, _207, fma(_273, _199 * TANGENT.x, (_185 * _178) * _271));
    float _290 = fma(_280, _208, fma(_273, _199 * TANGENT.y, (_185 * _179) * _271));
    float _293 = fma(_280, _209, fma(_273, _199 * TANGENT.z, (_185 * _180) * _271));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _2736 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _301 = isnan(1.0) ? _2736 : (isnan(_2736) ? 1.0 : min(_2736, 1.0));
    float _2747 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _2758 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _2769 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _2780 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _305 = isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _412 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _415 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = (_428 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2747 : (isnan(_2747) ? 1.0 : min(_2747, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0)))) * cbInstanceData._m0[_431].z;
    float _2791 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0));
    float _2802 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0));
    float _2813 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0));
    float _443 = 1.0 - _305;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _305;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _469 = _466.x * TEXCOORD.z;
    float _473 = abs(dot(vec3(_379, _380, _381), vec3(_298, _299, _300)));
    float _2824 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _479 = exp2(log2(1.0 - (isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0)))) * 5.0);
    float _480 = 0.959999978542327880859375 - _451;
    float _482 = 0.959999978542327880859375 - _452;
    float _483 = 0.959999978542327880859375 - _453;
    float _487 = (_479 * _480) + _454;
    float _488 = (_479 * _482) + _456;
    float _489 = (_479 * _483) + _457;
    vec4 _507 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_321 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_298, _299, _300), vec3(1.0, 0.0, 0.0))) + (_387 / cbSceneParam._m0[86u].x), 1.0 - (_388 / cbSceneParam._m0[86u].y)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _854;
    float _855;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _582 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _586 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _611 = _543 + _298;
        float _612 = _547 + _299;
        float _613 = _551 + _300;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_668.x + (-0.5));
        float _704 = _702 * (_668.y + (-0.5));
        float _705 = _702 * (_668.z + (-0.5));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _710 = ((_647.x + (-0.5)) * 0.5) * _681;
        float _712 = ((_654.x + (-0.5)) * 0.5) * _688;
        float _714 = ((_661.x + (-0.5)) * 0.5) * _695;
        float _715 = dot(vec3(_710, _712, _714), vec3(_710, _712, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_298, _299, _300), vec3(_720 * _710, _720 * _712, _720 * _714)) + 1.0) * 0.5;
        float _2850 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_712 * _712) + (_710 * _710)) + (_714 * _714)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _2861 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _2872 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))) * (_741 + 1.0))) + _746) * _706;
        float _757 = ((_647.y + (-0.5)) * 0.5) * _681;
        float _759 = ((_654.y + (-0.5)) * 0.5) * _688;
        float _761 = ((_661.y + (-0.5)) * 0.5) * _695;
        float _762 = dot(vec3(_757, _759, _761), vec3(_757, _759, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_298, _299, _300), vec3(_767 * _757, _767 * _759, _767 * _761)) + 1.0) * 0.5;
        float _2883 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_759 * _759) + (_757 * _757)) + (_761 * _761)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _2894 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _2905 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0))) * (_786 + 1.0))) + _791) * _707;
        float _802 = ((_647.z + (-0.5)) * 0.5) * _681;
        float _804 = ((_654.z + (-0.5)) * 0.5) * _688;
        float _806 = ((_661.z + (-0.5)) * 0.5) * _695;
        float _807 = dot(vec3(_802, _804, _806), vec3(_802, _804, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_298, _299, _300), vec3(_812 * _802, _812 * _804, _812 * _806)) + 1.0) * 0.5;
        float _2916 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_804 * _804) + (_802 * _802)) + (_806 * _806)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _2927 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _2938 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0))) * (_831 + 1.0))) + _836) * _708;
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = 0.0;
        _854 = 0.0;
        _855 = 0.0;
    }
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _881 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _885 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _889 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _912 = _543 + _298;
        float _913 = _547 + _299;
        float _914 = _551 + _300;
        float _924 = fma(_914, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912)) - _881;
        float _925 = fma(_914, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912)) - _885;
        float _926 = fma(_914, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912)) - _889;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_881 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_885 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[35u].z) + ((((((_889 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _980 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_968.x + (-0.5));
        float _1003 = _1001 * (_968.y + (-0.5));
        float _1004 = _1001 * (_968.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1009 = ((_947.x + (-0.5)) * 0.5) * _980;
        float _1011 = ((_954.x + (-0.5)) * 0.5) * _987;
        float _1013 = ((_961.x + (-0.5)) * 0.5) * _994;
        float _1014 = dot(vec3(_1009, _1011, _1013), vec3(_1009, _1011, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_298, _299, _300), vec3(_1019 * _1009, _1019 * _1011, _1019 * _1013)) + 1.0) * 0.5;
        float _2979 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1011 * _1011) + (_1009 * _1009)) + (_1013 * _1013)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _2990 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3001 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0))) * (_1038 + 1.0))) + _1043) * _1005;
        float _1054 = ((_947.y + (-0.5)) * 0.5) * _980;
        float _1056 = ((_954.y + (-0.5)) * 0.5) * _987;
        float _1058 = ((_961.y + (-0.5)) * 0.5) * _994;
        float _1059 = dot(vec3(_1054, _1056, _1058), vec3(_1054, _1056, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_298, _299, _300), vec3(_1064 * _1054, _1064 * _1056, _1064 * _1058)) + 1.0) * 0.5;
        float _3012 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1056 * _1056) + (_1054 * _1054)) + (_1058 * _1058)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3023 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3034 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))) * (_1083 + 1.0))) + _1088) * _1006;
        float _1099 = ((_947.z + (-0.5)) * 0.5) * _980;
        float _1101 = ((_954.z + (-0.5)) * 0.5) * _987;
        float _1103 = ((_961.z + (-0.5)) * 0.5) * _994;
        float _1104 = dot(vec3(_1099, _1101, _1103), vec3(_1099, _1101, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_298, _299, _300), vec3(_1109 * _1099, _1109 * _1101, _1109 * _1103)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1101 * _1101) + (_1099 * _1099)) + (_1103 * _1103)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3067 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_1128 + 1.0))) + _1133) * _1007;
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1151 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _853)) + _853;
    float _1163 = (cbModelParam._m0[1u].x * (_1151 - _854)) + _854;
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _855)) + _855;
    float _1185 = fma(_1164, cbSceneParam._m0[89u].z, fma(_1163, cbSceneParam._m0[89u].y, _1162 * cbSceneParam._m0[89u].x));
    float _1188 = fma(_1164, cbSceneParam._m0[90u].z, fma(_1163, cbSceneParam._m0[90u].y, _1162 * cbSceneParam._m0[90u].x));
    float _1191 = fma(_1164, cbSceneParam._m0[91u].z, fma(_1163, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1162));
    vec4 _1205 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1207 = _1205.w;
    float _1219 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1207);
    float _1220 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1207);
    float _1221 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1207);
    uvec4 _1225 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1227 = _1225.x * 14u;
    uint _1229 = _1227 + 13u;
    float _1236 = _469 + (-1.0);
    float _1241 = (cbLight._m0[_1229].x * _1236) + 1.0;
    float _1242 = (cbLight._m0[_1229].y * _1236) + 1.0;
    float _1243 = (cbLight._m0[_1229].z * _1236) + 1.0;
    float _1244 = (cbLight._m0[_1229].w * _1236) + 1.0;
    uint _1245 = _1227 + 5u;
    float _1251 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
    uint _1255 = _1227 + 4u;
    float _1265 = isnan(1.0) ? _1241 : (isnan(_1241) ? 1.0 : min(_1241, 1.0));
    uint _1269 = _1227 | 1u;
    float _1280 = dot(vec3(cbLight._m0[_1227].xyz), vec3(_298, _299, _300));
    float _1283 = dot(vec3(cbLight._m0[_1269].xyz), vec3(_298, _299, _300));
    float _3118 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
    float _3129 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
    float _1288 = (isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0))) * 0.3183098733425140380859375;
    float _1290 = (isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0))) * 0.3183098733425140380859375;
    float _1297 = ((cbLight._m0[_1245].x * _1251) * _1290) + (((cbLight._m0[_1255].x * _1219) * _1265) * _1288);
    float _1298 = ((_1251 * cbLight._m0[_1245].y) * _1290) + (((cbLight._m0[_1255].y * _1220) * _1265) * _1288);
    float _1299 = ((_1251 * cbLight._m0[_1245].z) * _1290) + (((cbLight._m0[_1255].z * _1221) * _1265) * _1288);
    uvec4 _1304 = floatBitsToUint(cbLight._m0[_1227 + 12u]);
    bool _1306 = _1304.x == 0u;
    float _1307;
    float _1309;
    float _1311;
    if (_1306)
    {
        _1307 = _1297;
        _1309 = _1298;
        _1311 = _1299;
    }
    else
    {
        uint _1315 = _1227 + 6u;
        float _1331 = (dot(vec3(cbLight._m0[_1227 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1332 = _1331 * _1331;
        float _3140 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
        float _1334 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
        _1307 = (((cbLight._m0[_1315].x * 0.3183098733425140380859375) * _1333) * _1334) + _1297;
        _1309 = (((cbLight._m0[_1315].y * 0.3183098733425140380859375) * _1333) * _1334) + _1298;
        _1311 = (((cbLight._m0[_1315].z * 0.3183098733425140380859375) * _1333) * _1334) + _1299;
    }
    bool _1314 = _1304.y == 0u;
    float _1344;
    float _1346;
    float _1348;
    if (_1314)
    {
        _1344 = _1307;
        _1346 = _1309;
        _1348 = _1311;
    }
    else
    {
        uint _1516 = _1227 + 7u;
        float _1532 = (dot(vec3(cbLight._m0[_1227 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1533 = _1532 * _1532;
        float _3156 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _1535 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _1344 = (((cbLight._m0[_1516].x * 0.3183098733425140380859375) * _1534) * _1535) + _1307;
        _1346 = (((cbLight._m0[_1516].y * 0.3183098733425140380859375) * _1534) * _1535) + _1309;
        _1348 = (((cbLight._m0[_1516].z * 0.3183098733425140380859375) * _1534) * _1535) + _1311;
    }
    uint _1351 = _1227 + 8u;
    float _1364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1227].w)) * _301) * 0.949999988079071044921875);
    float _1365 = _1364 * _1364;
    float _1366 = cbLight._m0[_1227].x + _379;
    float _1367 = cbLight._m0[_1227].y + _380;
    float _1368 = cbLight._m0[_1227].z + _381;
    float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
    float _1373 = _1372 * _1366;
    float _1374 = _1372 * _1367;
    float _1375 = _1372 * _1368;
    float _1376 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1227].xyz));
    float _3172 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
    float _1379 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _1380 = dot(vec3(_298, _299, _300), vec3(_379, _380, _381));
    float _3183 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
    float _1383 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _1384 = dot(vec3(_298, _299, _300), vec3(_1373, _1374, _1375));
    float _3194 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
    float _1387 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _1388 = dot(vec3(cbLight._m0[_1227].xyz), vec3(_1373, _1374, _1375));
    float _3205 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
    float _1392 = _1365 * _1365;
    float _1396 = ((_1387 * _1387) * (_1392 + (-1.0))) + 1.0;
    float _1404 = exp2(log2(1.0 - (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * 5.0);
    float _1411 = 1.0 - _1365;
    float _1422 = (0.5 / (((_1383 * ((_1379 * _1411) + _1365)) + 9.9999999392252902907785028219223e-09) + (((_1383 * _1411) + _1365) * _1379))) * _1379;
    float _3216 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
    float _1424 = (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_1392 / ((_1396 * _1396) * 3.141590118408203125));
    uint _1438 = _1227 + 9u;
    float _1449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1269].w)) * _301) * 0.949999988079071044921875);
    float _1450 = _1449 * _1449;
    float _1451 = cbLight._m0[_1269].x + _379;
    float _1452 = cbLight._m0[_1269].y + _380;
    float _1453 = cbLight._m0[_1269].z + _381;
    float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
    float _1458 = _1457 * _1451;
    float _1459 = _1457 * _1452;
    float _1460 = _1457 * _1453;
    float _1461 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1269].xyz));
    float _3227 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
    float _1464 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _1465 = dot(vec3(_298, _299, _300), vec3(_1458, _1459, _1460));
    float _3238 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1468 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _1469 = dot(vec3(cbLight._m0[_1269].xyz), vec3(_1458, _1459, _1460));
    float _3249 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1473 = _1450 * _1450;
    float _1477 = ((_1468 * _1468) * (_1473 + (-1.0))) + 1.0;
    float _1484 = exp2(log2(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * 5.0);
    float _1491 = 1.0 - _1450;
    float _1501 = (0.5 / (((_1383 * ((_1464 * _1491) + _1450)) + 9.9999999392252902907785028219223e-09) + (((_1383 * _1491) + _1450) * _1464))) * _1464;
    float _3260 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _1503 = (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_1473 / ((_1477 * _1477) * 3.141590118408203125));
    float _1513 = (((((_1484 * _480) + _454) * cbLight._m0[_1438].x) * _1503) * _1251) + ((((cbLight._m0[_1351].x * _1219) * ((_1404 * _480) + _454)) * _1424) * _1265);
    float _1514 = (((((_1484 * _482) + _456) * cbLight._m0[_1438].y) * _1503) * _1251) + ((((cbLight._m0[_1351].y * _1220) * ((_1404 * _482) + _456)) * _1424) * _1265);
    float _1515 = (((((_1484 * _483) + _457) * cbLight._m0[_1438].z) * _1503) * _1251) + ((((cbLight._m0[_1351].z * _1221) * ((_1404 * _483) + _457)) * _1424) * _1265);
    float _1545;
    float _1547;
    float _1549;
    if (_1306)
    {
        _1545 = _1513;
        _1547 = _1514;
        _1549 = _1515;
    }
    else
    {
        uint _1551 = _1227 + 2u;
        uint _1555 = _1227 + 10u;
        float _1569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _301) * 0.949999988079071044921875);
        float _1570 = _1569 * _1569;
        float _1571 = cbLight._m0[_1551].x + _379;
        float _1572 = cbLight._m0[_1551].y + _380;
        float _1573 = cbLight._m0[_1551].z + _381;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1578 = _1577 * _1571;
        float _1579 = _1577 * _1572;
        float _1580 = _1577 * _1573;
        float _1581 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1551].xyz));
        float _3271 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1584 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _1585 = dot(vec3(_298, _299, _300), vec3(_1578, _1579, _1580));
        float _3282 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1588 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _1589 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1578, _1579, _1580));
        float _3293 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1570 * _1570;
        float _1597 = ((_1588 * _1588) * (_1593 + (-1.0))) + 1.0;
        float _1604 = exp2(log2(1.0 - (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * 5.0);
        float _1611 = 1.0 - _1570;
        float _1621 = (0.5 / (((_1383 * ((_1584 * _1611) + _1570)) + 9.9999999392252902907785028219223e-09) + (((_1383 * _1611) + _1570) * _1584))) * _1584;
        float _3304 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1623 = (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_1593 / ((_1597 * _1597) * 3.141590118408203125));
        float _1624 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
        _1545 = (((((_1604 * _480) + _454) * cbLight._m0[_1555].x) * _1623) * _1624) + _1513;
        _1547 = (((((_1604 * _482) + _456) * cbLight._m0[_1555].y) * _1623) * _1624) + _1514;
        _1549 = (((((_1604 * _483) + _457) * cbLight._m0[_1555].z) * _1623) * _1624) + _1515;
    }
    float _1634;
    float _1636;
    float _1638;
    if (_1314)
    {
        _1634 = _1545;
        _1636 = _1547;
        _1638 = _1549;
    }
    else
    {
        uint _1645 = _1227 + 3u;
        uint _1649 = _1227 + 11u;
        float _1663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _301) * 0.949999988079071044921875);
        float _1664 = _1663 * _1663;
        float _1665 = cbLight._m0[_1645].x + _379;
        float _1666 = cbLight._m0[_1645].y + _380;
        float _1667 = cbLight._m0[_1645].z + _381;
        float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
        float _1672 = _1671 * _1665;
        float _1673 = _1671 * _1666;
        float _1674 = _1671 * _1667;
        float _1675 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1645].xyz));
        float _3320 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1678 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1679 = dot(vec3(_298, _299, _300), vec3(_1672, _1673, _1674));
        float _3331 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1682 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1683 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1672, _1673, _1674));
        float _3342 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = _1664 * _1664;
        float _1691 = ((_1682 * _1682) * (_1687 + (-1.0))) + 1.0;
        float _1698 = exp2(log2(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * 5.0);
        float _1705 = 1.0 - _1664;
        float _1715 = (0.5 / (((_1383 * ((_1678 * _1705) + _1664)) + 9.9999999392252902907785028219223e-09) + (((_1383 * _1705) + _1664) * _1678))) * _1678;
        float _3353 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1717 = (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * (_1687 / ((_1691 * _1691) * 3.141590118408203125));
        float _1718 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _1634 = (((((_1698 * _480) + _454) * cbLight._m0[_1649].x) * _1717) * _1718) + _1545;
        _1636 = (((((_1698 * _482) + _456) * cbLight._m0[_1649].y) * _1717) * _1718) + _1547;
        _1638 = (((((_1698 * _483) + _457) * cbLight._m0[_1649].z) * _1717) * _1718) + _1549;
    }
    float _1827;
    float _1829;
    float _1831;
    float _1833;
    float _1835;
    float _1837;
    if (_1225.y == 0u)
    {
        float _1768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1769 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1768;
        float _1770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1768;
        float _1771 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1768;
        uvec4 _1783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1784 = _1783.x;
        uint _1795 = uint((float(_1783.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _1784))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _1784)));
        float _1805 = (log2(_1771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1806 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        uint _1809 = uint(isnan(14.0) ? _1806 : (isnan(_1806) ? 14.0 : min(_1806, 14.0)));
        uvec4 _1814 = texelFetch(g_lightClusterGridBuffer, int(((_1809 << 2u) + (_1795 << 6u)) >> 2u));
        uint _1815 = _1814.x;
        uint _1816 = _1783.z;
        float _1894;
        float _1896;
        float _1898;
        float _1900;
        float _1902;
        float _1904;
        if (((((1u << ((_1816 >> 4u) & 15u)) + 4294967295u) & _1815) == 0u) || ((_1816 & 240u) == 0u))
        {
            _1894 = 0.0;
            _1896 = 0.0;
            _1898 = 0.0;
            _1900 = 0.0;
            _1902 = 0.0;
            _1904 = 0.0;
        }
        else
        {
            float _1895;
            float _1897;
            float _1899;
            float _1901;
            float _1903;
            float _1905;
            float _2039 = 0.0;
            float _2040 = 0.0;
            float _2041 = 0.0;
            float _2042 = 0.0;
            float _2043 = 0.0;
            float _2044 = 0.0;
            uint _2045 = 0u;
            uint _2054;
            bool _2055;
            for (;;)
            {
                _2054 = texelFetch(g_lightClassification, int((((_1809 << 5u) + (_1795 << 9u)) + (_2045 << 2u)) >> 2u)).x;
                _2055 = _2054 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                float frontier_phi_27_pred_3;
                float frontier_phi_27_pred_4;
                float frontier_phi_27_pred_5;
                if (_2055)
                {
                    frontier_phi_27_pred = _2039;
                    frontier_phi_27_pred_1 = _2040;
                    frontier_phi_27_pred_2 = _2044;
                    frontier_phi_27_pred_3 = _2043;
                    frontier_phi_27_pred_4 = _2042;
                    frontier_phi_27_pred_5 = _2041;
                }
                else
                {
                    float _2163;
                    float _2164;
                    float _2165;
                    float _2166;
                    float _2167;
                    float _2168;
                    uint _2169;
                    _2163 = _2039;
                    _2164 = _2040;
                    _2165 = _2041;
                    _2166 = _2042;
                    _2167 = _2043;
                    _2168 = _2044;
                    _2169 = _2054;
                    float _2095;
                    float _2096;
                    float _2097;
                    float _2098;
                    float _2099;
                    float _2100;
                    for (;;)
                    {
                        uint _2173 = uint(findLSB(_2169)) + (_2045 << 5u);
                        uint _2170 = (_2169 + 4294967295u) & _2169;
                        uint _2175 = _2173 * 48u;
                        vec4 _2189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2175)).x, texelFetch(g_PointLightRenderingBuffer, int(_2175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2175 + 3u)).x));
                        uint _2195 = (_2173 * 48u) + 4u;
                        vec4 _2208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2195)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2195 + 3u)).x));
                        uint _2214 = (_2173 * 48u) + 8u;
                        vec3 _2225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2214)).x, texelFetch(g_PointLightRenderingBuffer, int(_2214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2214 + 2u)).x));
                        float _2229 = _2189.x - _1769;
                        float _2230 = _2189.y - _1770;
                        float _2231 = _2189.z - _1771;
                        float _2232 = dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231));
                        float _2235 = inversesqrt(_2232);
                        float _2236 = _2235 * _2229;
                        float _2237 = _2235 * _2230;
                        float _2238 = _2235 * _2231;
                        float _2239 = dot(vec3(_409, _412, _415), vec3(_2236, _2237, _2238));
                        float _2244 = 1.0 - (_2232 * _2189.w);
                        float _3379 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
                        float _2245 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
                        float _2246 = sqrt(_2232) * _2208.w;
                        float _2249 = 1.39999997615814208984375 / (_2246 + 1.39999997615814208984375);
                        float _2250 = _2249 * _2249;
                        float _2253 = ((1.0 - _2250) * _2239) + _2250;
                        float _2256 = _2246 * _2246;
                        float _2260 = ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2245) / ((_2256 * 0.699999988079071044921875) + 1.0);
                        float _2264 = (-0.0) - _1769;
                        float _2265 = (-0.0) - _1770;
                        float _2266 = (-0.0) - _1771;
                        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
                        float _2271 = _2270 * _2264;
                        float _2272 = _2270 * _2265;
                        float _2273 = _2270 * _2266;
                        float _2281 = exp2(log2(1.0 / ((_2256 * 3.5) + 5.0)) * 0.25);
                        float _2283 = 1.0 - sqrt(_301);
                        float _2290 = sqrt(1.0 - ((1.0 - (_2283 * _2283)) * (1.0 - (_2281 * _2281))));
                        float _2291 = _2290 * _2290;
                        float _2292 = _2291 * _2291;
                        float _2293 = _2271 + _2236;
                        float _2294 = _2272 + _2237;
                        float _2295 = _2273 + _2238;
                        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
                        float _2303 = dot(vec3(_409, _412, _415), vec3(_2271, _2272, _2273));
                        float _3395 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
                        float _2306 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
                        float _2307 = dot(vec3(_409, _412, _415), vec3(_2299 * _2293, _2299 * _2294, _2299 * _2295));
                        float _3406 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
                        float _2310 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
                        float _2314 = ((_2310 * _2310) * (_2292 + (-1.0))) + 1.0;
                        float _2315 = _2249 * _2291;
                        float _2316 = _2315 * _2315;
                        float _2319 = ((1.0 - _2316) * _2239) + _2316;
                        float _3417 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
                        float _2320 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
                        float _2321 = 1.0 - _2291;
                        float _2331 = (0.5 / (((_2320 * ((_2306 * _2321) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2321) + _2291) * _2306))) * _2320;
                        float _3428 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
                        float _2342 = (((_2292 * 3.1415927410125732421875) * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) / ((_2314 * _2314) * ((_2256 * 2.1991131305694580078125) + 3.141590118408203125))) * _2245;
                        _2098 = (_2260 * _2208.x) + _2166;
                        _2099 = (_2260 * _2208.y) + _2167;
                        _2100 = (_2260 * _2208.z) + _2168;
                        _2095 = (_2342 * _2225.x) + _2163;
                        _2096 = (_2342 * _2225.y) + _2164;
                        _2097 = (_2342 * _2225.z) + _2165;
                        if (_2170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2163 = _2095;
                            _2164 = _2096;
                            _2165 = _2097;
                            _2166 = _2098;
                            _2167 = _2099;
                            _2168 = _2100;
                            _2169 = _2170;
                        }
                    }
                    frontier_phi_27_pred = _2095;
                    frontier_phi_27_pred_1 = _2096;
                    frontier_phi_27_pred_2 = _2100;
                    frontier_phi_27_pred_3 = _2099;
                    frontier_phi_27_pred_4 = _2098;
                    frontier_phi_27_pred_5 = _2097;
                }
                _1895 = frontier_phi_27_pred;
                _1897 = frontier_phi_27_pred_1;
                _1905 = frontier_phi_27_pred_2;
                _1903 = frontier_phi_27_pred_3;
                _1901 = frontier_phi_27_pred_4;
                _1899 = frontier_phi_27_pred_5;
                uint _2046 = _2045 + 1u;
                if (_2046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2039 = _1895;
                    _2040 = _1897;
                    _2041 = _1899;
                    _2042 = _1901;
                    _2043 = _1903;
                    _2044 = _1905;
                    _2045 = _2046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1894 = _1895;
            _1896 = _1897;
            _1898 = _1899;
            _1900 = _1901;
            _1902 = _1903;
            _1904 = _1905;
        }
        uvec4 _1908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1909 = _1908.z;
        uint _1911 = (_1909 >> 8u) & 15u;
        float _2007;
        float _2009;
        float _2011;
        float _2013;
        float _2015;
        float _2017;
        if (((4294967295u << _1911) & _1815) == 0u)
        {
            _2007 = _1894;
            _2009 = _1896;
            _2011 = _1898;
            _2013 = _1900;
            _2015 = _1902;
            _2017 = _1904;
        }
        else
        {
            float _2032 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
            float _2033 = _2032 * _1769;
            float _2034 = _2032 * _1770;
            float _2035 = _2032 * _1771;
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            float frontier_phi_21_22_ladder_3;
            float frontier_phi_21_22_ladder_4;
            float frontier_phi_21_22_ladder_5;
            if (_1911 < ((_1909 >> 12u) & 15u))
            {
                float _2008;
                float _2010;
                float _2012;
                float _2014;
                float _2016;
                float _2018;
                float _2146 = _1894;
                float _2147 = _1896;
                float _2148 = _1898;
                float _2149 = _1900;
                float _2150 = _1902;
                float _2151 = _1904;
                uint _2152 = _1911;
                uint _2161;
                bool _2162;
                for (;;)
                {
                    _2161 = texelFetch(g_lightClassification, int((((_1809 << 5u) + (_1795 << 9u)) + (_2152 << 2u)) >> 2u)).x;
                    _2162 = _2161 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    float frontier_phi_33_pred_3;
                    float frontier_phi_33_pred_4;
                    float frontier_phi_33_pred_5;
                    if (_2162)
                    {
                        frontier_phi_33_pred = _2151;
                        frontier_phi_33_pred_1 = _2150;
                        frontier_phi_33_pred_2 = _2149;
                        frontier_phi_33_pred_3 = _2148;
                        frontier_phi_33_pred_4 = _2147;
                        frontier_phi_33_pred_5 = _2146;
                    }
                    else
                    {
                        float _2347;
                        float _2348;
                        float _2349;
                        float _2350;
                        float _2351;
                        float _2352;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2360 = _2146;
                        float _2361 = _2147;
                        float _2362 = _2148;
                        float _2363 = _2149;
                        float _2364 = _2150;
                        float _2365 = _2151;
                        uint _2366 = _2161;
                        uint _2367;
                        vec4 _2393;
                        float _2394;
                        vec4 _2409;
                        vec3 _2421;
                        vec4 _2437;
                        vec4 _2453;
                        float _2500;
                        bool _2501;
                        for (;;)
                        {
                            uint _2377 = ((_2152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2366));
                            _2367 = (_2366 + 4294967295u) & _2366;
                            uint _2379 = _2377 * 40u;
                            _2393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2379 + 3u)).x));
                            _2394 = _2393.w;
                            uint _2396 = (_2377 * 40u) + 4u;
                            _2409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2396 + 3u)).x));
                            uint _2411 = (_2377 * 40u) + 8u;
                            _2421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 2u)).x));
                            uint _2424 = (_2377 * 40u) + 16u;
                            _2437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2424 + 3u)).x));
                            uint _2440 = (_2377 * 40u) + 20u;
                            _2453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2440 + 3u)).x));
                            uint _2456 = (_2377 * 40u) + 24u;
                            vec4 _2469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 3u)).x));
                            uint _2475 = (_2377 * 40u) + 28u;
                            vec4 _2488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 3u)).x));
                            _2500 = fma(_1771, _2488.z, fma(_1770, _2488.y, _2488.x * _1769)) + _2488.w;
                            _2501 = !((fma(_1771, _2469.z, fma(_1770, _2469.y, _2469.x * _1769)) + _2469.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            float frontier_phi_39_pred_3;
                            float frontier_phi_39_pred_4;
                            float frontier_phi_39_pred_5;
                            if (_2501)
                            {
                                float _2528 = _2393.x - _1769;
                                float _2529 = _2393.y - _1770;
                                float _2530 = _2393.z - _1771;
                                float _2531 = dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530));
                                float _2534 = inversesqrt(_2531);
                                float _2535 = _2534 * _2528;
                                float _2536 = _2534 * _2529;
                                float _2537 = _2534 * _2530;
                                float _2541 = 1.0 - (_2531 / (_2394 * _2394));
                                float _3439 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                                float _2542 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
                                float _2546 = sqrt(_2531) * _2409.w;
                                float _2548 = 1.39999997615814208984375 / (_2546 + 1.39999997615814208984375);
                                float _2549 = _2548 * _2548;
                                float _2552 = ((1.0 - _2549) * dot(vec3(_2535, _2536, _2537), vec3(_409, _412, _415))) + _2549;
                                float _2555 = _2546 * _2546;
                                float _2559 = (fma(_1771, _2437.z, fma(_1770, _2437.y, _2437.x * _1769)) + _2437.w) / _2500;
                                float _2560 = (fma(_1771, _2453.z, fma(_1770, _2453.y, _2453.x * _1769)) + _2453.w) / _2500;
                                float _2564 = 1.0 - dot(vec2(_2559, _2560), vec2(_2559, _2560));
                                float _3455 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                                float _2565 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
                                float _2566 = _2565 * (((isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0))) * _2542) / ((_2555 * 0.699999988079071044921875) + 1.0));
                                float _2578 = exp2(log2(1.0 / ((_2555 * 3.5) + 5.0)) * 0.25);
                                float _2580 = 1.0 - sqrt(_301);
                                float _2587 = sqrt(1.0 - ((1.0 - (_2580 * _2580)) * (1.0 - (_2578 * _2578))));
                                float _2588 = _2587 * _2587;
                                float _2589 = _2588 * _2588;
                                float _2590 = _2535 - _2033;
                                float _2591 = _2536 - _2034;
                                float _2592 = _2537 - _2035;
                                float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
                                float _2600 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2033, (-0.0) - _2034, (-0.0) - _2035));
                                float _3466 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                                float _2603 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
                                float _2604 = dot(vec3(_409, _412, _415), vec3(_2596 * _2590, _2596 * _2591, _2596 * _2592));
                                float _3477 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
                                float _2607 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
                                float _2611 = ((_2607 * _2607) * (_2589 + (-1.0))) + 1.0;
                                float _2612 = _2548 * _2588;
                                float _2613 = _2612 * _2612;
                                float _2619 = ((1.0 - _2613) * dot(vec3(_409, _412, _415), vec3(_2535, _2536, _2537))) + _2613;
                                float _3488 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                                float _2620 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
                                float _2621 = 1.0 - _2588;
                                float _2631 = (0.5 / (((_2620 * ((_2603 * _2621) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2621) + _2588) * _2603))) * _2620;
                                float _3499 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                                float _2641 = (_2565 * _2542) * (((_2589 * 3.1415927410125732421875) * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) / ((_2611 * _2611) * ((_2555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_39_pred = _2641 * _2421.y;
                                frontier_phi_39_pred_1 = _2641 * _2421.x;
                                frontier_phi_39_pred_2 = _2566 * _2409.z;
                                frontier_phi_39_pred_3 = _2566 * _2409.y;
                                frontier_phi_39_pred_4 = _2566 * _2409.x;
                                frontier_phi_39_pred_5 = _2641 * _2421.z;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                                frontier_phi_39_pred_3 = 0.0;
                                frontier_phi_39_pred_4 = 0.0;
                                frontier_phi_39_pred_5 = 0.0;
                            }
                            _2646 = frontier_phi_39_pred;
                            _2645 = frontier_phi_39_pred_1;
                            _2650 = frontier_phi_39_pred_2;
                            _2649 = frontier_phi_39_pred_3;
                            _2648 = frontier_phi_39_pred_4;
                            _2647 = frontier_phi_39_pred_5;
                            _2350 = _2648 + _2363;
                            _2351 = _2649 + _2364;
                            _2352 = _2650 + _2365;
                            _2347 = _2645 + _2360;
                            _2348 = _2646 + _2361;
                            _2349 = _2647 + _2362;
                            if (_2367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2360 = _2347;
                                _2361 = _2348;
                                _2362 = _2349;
                                _2363 = _2350;
                                _2364 = _2351;
                                _2365 = _2352;
                                _2366 = _2367;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _2352;
                        frontier_phi_33_pred_1 = _2351;
                        frontier_phi_33_pred_2 = _2350;
                        frontier_phi_33_pred_3 = _2349;
                        frontier_phi_33_pred_4 = _2348;
                        frontier_phi_33_pred_5 = _2347;
                    }
                    _2018 = frontier_phi_33_pred;
                    _2016 = frontier_phi_33_pred_1;
                    _2014 = frontier_phi_33_pred_2;
                    _2012 = frontier_phi_33_pred_3;
                    _2010 = frontier_phi_33_pred_4;
                    _2008 = frontier_phi_33_pred_5;
                    uint _2153 = _2152 + 1u;
                    if (_2153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2146 = _2008;
                        _2147 = _2010;
                        _2148 = _2012;
                        _2149 = _2014;
                        _2150 = _2016;
                        _2151 = _2018;
                        _2152 = _2153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _2018;
                frontier_phi_21_22_ladder_1 = _2016;
                frontier_phi_21_22_ladder_2 = _2014;
                frontier_phi_21_22_ladder_3 = _2008;
                frontier_phi_21_22_ladder_4 = _2012;
                frontier_phi_21_22_ladder_5 = _2010;
            }
            else
            {
                frontier_phi_21_22_ladder = _1904;
                frontier_phi_21_22_ladder_1 = _1902;
                frontier_phi_21_22_ladder_2 = _1900;
                frontier_phi_21_22_ladder_3 = _1894;
                frontier_phi_21_22_ladder_4 = _1898;
                frontier_phi_21_22_ladder_5 = _1896;
            }
            _2007 = frontier_phi_21_22_ladder_3;
            _2009 = frontier_phi_21_22_ladder_5;
            _2011 = frontier_phi_21_22_ladder_4;
            _2013 = frontier_phi_21_22_ladder_2;
            _2015 = frontier_phi_21_22_ladder_1;
            _2017 = frontier_phi_21_22_ladder;
        }
        float _2022 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _1827 = (_2022 * _2013) + _1344;
        _1829 = (_2022 * _2015) + _1346;
        _1831 = (_2022 * _2017) + _1348;
        _1833 = ((_2007 * _454) * _2022) + _1634;
        _1835 = ((_2009 * _456) * _2022) + _1636;
        _1837 = ((_2011 * _457) * _2022) + _1638;
    }
    else
    {
        _1827 = _1344;
        _1829 = _1346;
        _1831 = _1348;
        _1833 = _1634;
        _1835 = _1636;
        _1837 = _1638;
    }
    float _3515 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3526 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3537 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _1857 = _428 + 6u;
    float _1865 = _387 / cbSceneParam._m0[86u].x;
    float _1866 = _388 / cbSceneParam._m0[86u].y;
    vec4 _1880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1865, _1866, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1882 = _1880.x;
    float _1883 = _1880.y;
    float _1884 = _1880.z;
    float _1885 = _1880.w;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _1919 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _1920 = _1919 / _321;
        float _1931 = _1920 * _372;
        float _1932 = _373 * _1920;
        float _1933 = (-0.0) - _1932;
        float _1934 = _1920 * _374;
        float _1936 = (cbSceneParam._m0[77u].w * _1933) / _1919;
        float _1937 = _1936 + cbSceneParam._m0[79u].w;
        float _1938 = cbSceneParam._m0[79u].w - _1932;
        float _1944 = sqrt(((_1931 * _1931) + (_1932 * _1932)) + (_1934 * _1934));
        float _1947 = (1.0 - (cbSceneParam._m0[77u].w / _1919)) * _1944;
        float _1953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2108;
        if (abs((_1933 - _1936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2108 = ((((_1937 > 0.0) ? exp2(_1953 * _1937) : (2.0 - exp2(_1955 * _1937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1947;
        }
        else
        {
            float _2068 = 1.0 / cbSceneParam._m0[80u].x;
            float _2069 = isnan(_1938) ? _1937 : (isnan(_1937) ? _1938 : max(_1937, _1938));
            float _2070 = isnan(_1938) ? _1937 : (isnan(_1937) ? _1938 : min(_1937, _1938));
            float _2079 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : min(_2069, 0.0));
            float _2080 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : min(_2070, 0.0));
            _2108 = ((abs(_1944 / _1933) * cbSceneParam._m0[80u].y) * ((((_2079 - _2080) * 2.0) - ((exp2(_1953 * (isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0)))) - exp2(_1953 * (isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))))) * _2068)) - ((exp2(_1955 * _2079) - exp2(_1955 * _2080)) * _2068))) + (_1947 * cbSceneParam._m0[80u].z);
        }
        vec4 _2110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1865, _1866, 1.0), 0.0);
        float _2119 = exp2((_2108 * (-1.44269502162933349609375)) * (1.0 - _2110.w));
        float _2120 = log2(_2119);
        float _2136 = log2(_1885);
        _1957 = (exp2(_2136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].x)) * _2110.x) / cbSceneParam._m0[78u].x)) + _1882;
        _1959 = (exp2(_2136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].y)) * _2110.y) / cbSceneParam._m0[78u].y)) + _1883;
        _1961 = (exp2(_2136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2120 * cbSceneParam._m0[78u].z)) * _2110.z) / cbSceneParam._m0[78u].z)) + _1884;
        _1963 = _2119 * _1885;
    }
    else
    {
        _1957 = _1882;
        _1959 = _1883;
        _1961 = _1884;
        _1963 = _1885;
    }
    float _1974 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1975 = _1974 == 3.0;
    float _1977 = log2(_1963);
    float _1984 = exp2(_1977 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1827 + (((1.0 - _487) * _469) * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)))))) + ((_1833 + ((_507.x * _487) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1985 = exp2(_1977 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1829 + (((1.0 - _488) * _469) * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)))))) + ((_1835 + ((_507.y * _488) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1986 = exp2(_1977 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1831 + (((1.0 - _489) * _469) * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)))))) + ((_1837 + ((_507.z * _489) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1995 = (_1974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1995 * (_1975 ? _1984 : (_1984 + (cbSceneParam._m0[72u].w * _1957)));
    SV_Target.y = _1995 * (_1975 ? _1985 : (_1985 + (cbSceneParam._m0[72u].w * _1959)));
    SV_Target.z = _1995 * (_1975 ? _1986 : (_1986 + (cbSceneParam._m0[72u].w * _1961)));
    SV_Target.w = cbInstanceData._m0[_1857].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1857].w;
}


