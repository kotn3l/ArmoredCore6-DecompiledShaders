#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2825;
float _2826;
float _2827;
float _2828;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _253.x;
    vec4 _267 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _2837 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0))));
    float _291 = fma(_284, _211, fma(_277, _203 * TANGENT.x, (_189 * _182) * _275));
    float _294 = fma(_284, _212, fma(_277, _203 * TANGENT.y, (_189 * _183) * _275));
    float _297 = fma(_284, _213, fma(_277, _203 * TANGENT.z, (_189 * _184) * _275));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _2848 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _305 = isnan(1.0) ? _2848 : (isnan(_2848) ? 1.0 : min(_2848, 1.0));
    float _2859 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _2870 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _2881 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _2892 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _309 = isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _578 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _584 = (cbMatDynParam._m0[5u].x * _578) + cbMatDynParam._m0[5u].y;
        float _2903 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _585 = isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0));
        float _589 = (cbMatDynParam._m0[5u].z * _578) + cbMatDynParam._m0[5u].w;
        float _2914 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0))) - _585)) + _585) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _428 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2859 : (isnan(_2859) ? 1.0 : min(_2859, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2870 : (isnan(_2870) ? 1.0 : min(_2870, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0)))) * cbInstanceData._m0[_447].z;
    float _2925 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0));
    float _2936 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
    float _2947 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
    float _459 = 1.0 - _309;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _309;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _309;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _485 = _482.x * TEXCOORD.z;
    float _489 = abs(dot(vec3(_383, _384, _385), vec3(_302, _303, _304)));
    float _2958 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _495 = exp2(log2(1.0 - (isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0)))) * 5.0);
    float _496 = 0.959999978542327880859375 - _467;
    float _498 = 0.959999978542327880859375 - _468;
    float _499 = 0.959999978542327880859375 - _469;
    float _503 = (_495 * _496) + _470;
    float _504 = (_495 * _498) + _472;
    float _505 = (_495 * _499) + _473;
    vec4 _523 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_325 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_302, _303, _304), vec3(1.0, 0.0, 0.0))) + (_404 / cbSceneParam._m0[86u].x), 1.0 - (_405 / cbSceneParam._m0[86u].y)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _899;
    float _900;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559));
        float _627 = fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559));
        float _631 = fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559));
        float _656 = _559 + _302;
        float _657 = _563 + _303;
        float _658 = _567 + _304;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _755 = ((_692.x + (-0.5)) * 0.5) * _726;
        float _757 = ((_699.x + (-0.5)) * 0.5) * _733;
        float _759 = ((_706.x + (-0.5)) * 0.5) * _740;
        float _760 = dot(vec3(_755, _757, _759), vec3(_755, _757, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_302, _303, _304), vec3(_765 * _755, _765 * _757, _765 * _759)) + 1.0) * 0.5;
        float _2984 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_757 * _757) + (_755 * _755)) + (_759 * _759)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _2995 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3006 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0))) * (_786 + 1.0))) + _791) * _751;
        float _802 = ((_692.y + (-0.5)) * 0.5) * _726;
        float _804 = ((_699.y + (-0.5)) * 0.5) * _733;
        float _806 = ((_706.y + (-0.5)) * 0.5) * _740;
        float _807 = dot(vec3(_802, _804, _806), vec3(_802, _804, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_302, _303, _304), vec3(_812 * _802, _812 * _804, _812 * _806)) + 1.0) * 0.5;
        float _3017 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_804 * _804) + (_802 * _802)) + (_806 * _806)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3028 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3039 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0))) * (_831 + 1.0))) + _836) * _752;
        float _847 = ((_692.z + (-0.5)) * 0.5) * _726;
        float _849 = ((_699.z + (-0.5)) * 0.5) * _733;
        float _851 = ((_706.z + (-0.5)) * 0.5) * _740;
        float _852 = dot(vec3(_847, _849, _851), vec3(_847, _849, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_302, _303, _304), vec3(_857 * _847, _857 * _849, _857 * _851)) + 1.0) * 0.5;
        float _3050 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_849 * _849) + (_847 * _847)) + (_851 * _851)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3061 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3072 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_876 + 1.0))) + _881) * _753;
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = 0.0;
        _899 = 0.0;
        _900 = 0.0;
    }
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _929 = fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559));
        float _933 = fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559));
        float _937 = fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559));
        float _960 = _559 + _302;
        float _961 = _563 + _303;
        float _962 = _567 + _304;
        float _972 = fma(_962, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960)) - _929;
        float _973 = fma(_962, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960)) - _933;
        float _974 = fma(_962, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960)) - _937;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_929 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_933 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[35u].z) + ((((((_937 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1028 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1016.x + (-0.5));
        float _1051 = _1049 * (_1016.y + (-0.5));
        float _1052 = _1049 * (_1016.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1057 = ((_995.x + (-0.5)) * 0.5) * _1028;
        float _1059 = ((_1002.x + (-0.5)) * 0.5) * _1035;
        float _1061 = ((_1009.x + (-0.5)) * 0.5) * _1042;
        float _1062 = dot(vec3(_1057, _1059, _1061), vec3(_1057, _1059, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_302, _303, _304), vec3(_1067 * _1057, _1067 * _1059, _1067 * _1061)) + 1.0) * 0.5;
        float _3113 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1059 * _1059) + (_1057 * _1057)) + (_1061 * _1061)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3124 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3135 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0))) * (_1086 + 1.0))) + _1091) * _1053;
        float _1102 = ((_995.y + (-0.5)) * 0.5) * _1028;
        float _1104 = ((_1002.y + (-0.5)) * 0.5) * _1035;
        float _1106 = ((_1009.y + (-0.5)) * 0.5) * _1042;
        float _1107 = dot(vec3(_1102, _1104, _1106), vec3(_1102, _1104, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_302, _303, _304), vec3(_1112 * _1102, _1112 * _1104, _1112 * _1106)) + 1.0) * 0.5;
        float _3146 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1104 * _1104) + (_1102 * _1102)) + (_1106 * _1106)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3157 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3168 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))) * (_1131 + 1.0))) + _1136) * _1054;
        float _1147 = ((_995.z + (-0.5)) * 0.5) * _1028;
        float _1149 = ((_1002.z + (-0.5)) * 0.5) * _1035;
        float _1151 = ((_1009.z + (-0.5)) * 0.5) * _1042;
        float _1152 = dot(vec3(_1147, _1149, _1151), vec3(_1147, _1149, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_302, _303, _304), vec3(_1157 * _1147, _1157 * _1149, _1157 * _1151)) + 1.0) * 0.5;
        float _3179 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1149 * _1149) + (_1147 * _1147)) + (_1151 * _1151)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3190 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3201 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0))) * (_1176 + 1.0))) + _1181) * _1055;
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _898)) + _898;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _899)) + _899;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _900)) + _900;
    float _1233 = fma(_1212, cbSceneParam._m0[89u].z, fma(_1211, cbSceneParam._m0[89u].y, _1210 * cbSceneParam._m0[89u].x));
    float _1236 = fma(_1212, cbSceneParam._m0[90u].z, fma(_1211, cbSceneParam._m0[90u].y, _1210 * cbSceneParam._m0[90u].x));
    float _1239 = fma(_1212, cbSceneParam._m0[91u].z, fma(_1211, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1210));
    vec4 _1253 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_404, _405));
    float _1255 = _1253.w;
    float _1267 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1255);
    float _1268 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1255);
    float _1269 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1255);
    uvec4 _1273 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1275 = _1273.x * 14u;
    uint _1277 = _1275 + 13u;
    float _1284 = _485 + (-1.0);
    float _1289 = (cbLight._m0[_1277].x * _1284) + 1.0;
    float _1290 = (cbLight._m0[_1277].y * _1284) + 1.0;
    float _1291 = (cbLight._m0[_1277].z * _1284) + 1.0;
    float _1292 = (cbLight._m0[_1277].w * _1284) + 1.0;
    uint _1293 = _1275 + 5u;
    float _1299 = isnan(1.0) ? _1290 : (isnan(_1290) ? 1.0 : min(_1290, 1.0));
    uint _1303 = _1275 + 4u;
    float _1313 = isnan(1.0) ? _1289 : (isnan(_1289) ? 1.0 : min(_1289, 1.0));
    uint _1317 = _1275 | 1u;
    float _1328 = dot(vec3(cbLight._m0[_1275].xyz), vec3(_302, _303, _304));
    float _1331 = dot(vec3(cbLight._m0[_1317].xyz), vec3(_302, _303, _304));
    float _3252 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _3263 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _1336 = (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * 0.3183098733425140380859375;
    float _1338 = (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))) * 0.3183098733425140380859375;
    float _1345 = ((cbLight._m0[_1293].x * _1299) * _1338) + (((cbLight._m0[_1303].x * _1267) * _1313) * _1336);
    float _1346 = ((_1299 * cbLight._m0[_1293].y) * _1338) + (((cbLight._m0[_1303].y * _1268) * _1313) * _1336);
    float _1347 = ((_1299 * cbLight._m0[_1293].z) * _1338) + (((cbLight._m0[_1303].z * _1269) * _1313) * _1336);
    uvec4 _1352 = floatBitsToUint(cbLight._m0[_1275 + 12u]);
    bool _1354 = _1352.x == 0u;
    float _1355;
    float _1357;
    float _1359;
    if (_1354)
    {
        _1355 = _1345;
        _1357 = _1346;
        _1359 = _1347;
    }
    else
    {
        uint _1363 = _1275 + 6u;
        float _1379 = (dot(vec3(cbLight._m0[_1275 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1380 = _1379 * _1379;
        float _3274 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _1382 = isnan(1.0) ? _1291 : (isnan(_1291) ? 1.0 : min(_1291, 1.0));
        _1355 = (((cbLight._m0[_1363].x * 0.3183098733425140380859375) * _1381) * _1382) + _1345;
        _1357 = (((cbLight._m0[_1363].y * 0.3183098733425140380859375) * _1381) * _1382) + _1346;
        _1359 = (((cbLight._m0[_1363].z * 0.3183098733425140380859375) * _1381) * _1382) + _1347;
    }
    bool _1362 = _1352.y == 0u;
    float _1392;
    float _1394;
    float _1396;
    if (_1362)
    {
        _1392 = _1355;
        _1394 = _1357;
        _1396 = _1359;
    }
    else
    {
        uint _1564 = _1275 + 7u;
        float _1580 = (dot(vec3(cbLight._m0[_1275 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1581 = _1580 * _1580;
        float _3290 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1583 = isnan(1.0) ? _1292 : (isnan(_1292) ? 1.0 : min(_1292, 1.0));
        _1392 = (((cbLight._m0[_1564].x * 0.3183098733425140380859375) * _1582) * _1583) + _1355;
        _1394 = (((cbLight._m0[_1564].y * 0.3183098733425140380859375) * _1582) * _1583) + _1357;
        _1396 = (((cbLight._m0[_1564].z * 0.3183098733425140380859375) * _1582) * _1583) + _1359;
    }
    uint _1399 = _1275 + 8u;
    float _1412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1275].w)) * _305) * 0.949999988079071044921875);
    float _1413 = _1412 * _1412;
    float _1414 = cbLight._m0[_1275].x + _383;
    float _1415 = cbLight._m0[_1275].y + _384;
    float _1416 = cbLight._m0[_1275].z + _385;
    float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
    float _1421 = _1420 * _1414;
    float _1422 = _1420 * _1415;
    float _1423 = _1420 * _1416;
    float _1424 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1275].xyz));
    float _3306 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1427 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _1428 = dot(vec3(_302, _303, _304), vec3(_383, _384, _385));
    float _3317 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
    float _1431 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _1432 = dot(vec3(_302, _303, _304), vec3(_1421, _1422, _1423));
    float _3328 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
    float _1435 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _1436 = dot(vec3(cbLight._m0[_1275].xyz), vec3(_1421, _1422, _1423));
    float _3339 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
    float _1440 = _1413 * _1413;
    float _1444 = ((_1435 * _1435) * (_1440 + (-1.0))) + 1.0;
    float _1452 = exp2(log2(1.0 - (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * 5.0);
    float _1459 = 1.0 - _1413;
    float _1470 = (0.5 / (((_1431 * ((_1427 * _1459) + _1413)) + 9.9999999392252902907785028219223e-09) + (((_1431 * _1459) + _1413) * _1427))) * _1427;
    float _3350 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1472 = (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_1440 / ((_1444 * _1444) * 3.141590118408203125));
    uint _1486 = _1275 + 9u;
    float _1497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1317].w)) * _305) * 0.949999988079071044921875);
    float _1498 = _1497 * _1497;
    float _1499 = cbLight._m0[_1317].x + _383;
    float _1500 = cbLight._m0[_1317].y + _384;
    float _1501 = cbLight._m0[_1317].z + _385;
    float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
    float _1506 = _1505 * _1499;
    float _1507 = _1505 * _1500;
    float _1508 = _1505 * _1501;
    float _1509 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1317].xyz));
    float _3361 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1512 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _1513 = dot(vec3(_302, _303, _304), vec3(_1506, _1507, _1508));
    float _3372 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1516 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _1517 = dot(vec3(cbLight._m0[_1317].xyz), vec3(_1506, _1507, _1508));
    float _3383 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1521 = _1498 * _1498;
    float _1525 = ((_1516 * _1516) * (_1521 + (-1.0))) + 1.0;
    float _1532 = exp2(log2(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * 5.0);
    float _1539 = 1.0 - _1498;
    float _1549 = (0.5 / (((_1431 * ((_1512 * _1539) + _1498)) + 9.9999999392252902907785028219223e-09) + (((_1431 * _1539) + _1498) * _1512))) * _1512;
    float _3394 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1551 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_1521 / ((_1525 * _1525) * 3.141590118408203125));
    float _1561 = (((((_1532 * _496) + _470) * cbLight._m0[_1486].x) * _1551) * _1299) + ((((cbLight._m0[_1399].x * _1267) * ((_1452 * _496) + _470)) * _1472) * _1313);
    float _1562 = (((((_1532 * _498) + _472) * cbLight._m0[_1486].y) * _1551) * _1299) + ((((cbLight._m0[_1399].y * _1268) * ((_1452 * _498) + _472)) * _1472) * _1313);
    float _1563 = (((((_1532 * _499) + _473) * cbLight._m0[_1486].z) * _1551) * _1299) + ((((cbLight._m0[_1399].z * _1269) * ((_1452 * _499) + _473)) * _1472) * _1313);
    float _1593;
    float _1595;
    float _1597;
    if (_1354)
    {
        _1593 = _1561;
        _1595 = _1562;
        _1597 = _1563;
    }
    else
    {
        uint _1599 = _1275 + 2u;
        uint _1603 = _1275 + 10u;
        float _1617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _305) * 0.949999988079071044921875);
        float _1618 = _1617 * _1617;
        float _1619 = cbLight._m0[_1599].x + _383;
        float _1620 = cbLight._m0[_1599].y + _384;
        float _1621 = cbLight._m0[_1599].z + _385;
        float _1625 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
        float _1626 = _1625 * _1619;
        float _1627 = _1625 * _1620;
        float _1628 = _1625 * _1621;
        float _1629 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1599].xyz));
        float _3405 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1632 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1633 = dot(vec3(_302, _303, _304), vec3(_1626, _1627, _1628));
        float _3416 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1636 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1637 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1626, _1627, _1628));
        float _3427 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = _1618 * _1618;
        float _1645 = ((_1636 * _1636) * (_1641 + (-1.0))) + 1.0;
        float _1652 = exp2(log2(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * 5.0);
        float _1659 = 1.0 - _1618;
        float _1669 = (0.5 / (((_1431 * ((_1632 * _1659) + _1618)) + 9.9999999392252902907785028219223e-09) + (((_1431 * _1659) + _1618) * _1632))) * _1632;
        float _3438 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1671 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1641 / ((_1645 * _1645) * 3.141590118408203125));
        float _1672 = isnan(1.0) ? _1291 : (isnan(_1291) ? 1.0 : min(_1291, 1.0));
        _1593 = (((((_1652 * _496) + _470) * cbLight._m0[_1603].x) * _1671) * _1672) + _1561;
        _1595 = (((((_1652 * _498) + _472) * cbLight._m0[_1603].y) * _1671) * _1672) + _1562;
        _1597 = (((((_1652 * _499) + _473) * cbLight._m0[_1603].z) * _1671) * _1672) + _1563;
    }
    float _1682;
    float _1684;
    float _1686;
    if (_1362)
    {
        _1682 = _1593;
        _1684 = _1595;
        _1686 = _1597;
    }
    else
    {
        uint _1693 = _1275 + 3u;
        uint _1697 = _1275 + 11u;
        float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _305) * 0.949999988079071044921875);
        float _1712 = _1711 * _1711;
        float _1713 = cbLight._m0[_1693].x + _383;
        float _1714 = cbLight._m0[_1693].y + _384;
        float _1715 = cbLight._m0[_1693].z + _385;
        float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
        float _1720 = _1719 * _1713;
        float _1721 = _1719 * _1714;
        float _1722 = _1719 * _1715;
        float _1723 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1693].xyz));
        float _3454 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1726 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1727 = dot(vec3(_302, _303, _304), vec3(_1720, _1721, _1722));
        float _3465 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1730 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1731 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1720, _1721, _1722));
        float _3476 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = _1712 * _1712;
        float _1739 = ((_1730 * _1730) * (_1735 + (-1.0))) + 1.0;
        float _1746 = exp2(log2(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * 5.0);
        float _1753 = 1.0 - _1712;
        float _1763 = (0.5 / (((_1431 * ((_1726 * _1753) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1431 * _1753) + _1712) * _1726))) * _1726;
        float _3487 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1765 = (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1735 / ((_1739 * _1739) * 3.141590118408203125));
        float _1766 = isnan(1.0) ? _1292 : (isnan(_1292) ? 1.0 : min(_1292, 1.0));
        _1682 = (((((_1746 * _496) + _470) * cbLight._m0[_1697].x) * _1765) * _1766) + _1593;
        _1684 = (((((_1746 * _498) + _472) * cbLight._m0[_1697].y) * _1765) * _1766) + _1595;
        _1686 = (((((_1746 * _499) + _473) * cbLight._m0[_1697].z) * _1765) * _1766) + _1597;
    }
    float _1875;
    float _1877;
    float _1879;
    float _1881;
    float _1883;
    float _1885;
    if (_1273.y == 0u)
    {
        float _1816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1817 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1816;
        float _1818 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1816;
        float _1819 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1816;
        uvec4 _1831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1832 = _1831.x;
        uint _1843 = uint((float(_1831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _1832))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _1832)));
        float _1853 = (log2(_1819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1854 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        uint _1857 = uint(isnan(14.0) ? _1854 : (isnan(_1854) ? 14.0 : min(_1854, 14.0)));
        uvec4 _1862 = texelFetch(g_lightClusterGridBuffer, int(((_1857 << 2u) + (_1843 << 6u)) >> 2u));
        uint _1863 = _1862.x;
        uint _1864 = _1831.z;
        float _1942;
        float _1944;
        float _1946;
        float _1948;
        float _1950;
        float _1952;
        if (((((1u << ((_1864 >> 4u) & 15u)) + 4294967295u) & _1863) == 0u) || ((_1864 & 240u) == 0u))
        {
            _1942 = 0.0;
            _1944 = 0.0;
            _1946 = 0.0;
            _1948 = 0.0;
            _1950 = 0.0;
            _1952 = 0.0;
        }
        else
        {
            float _1943;
            float _1945;
            float _1947;
            float _1949;
            float _1951;
            float _1953;
            float _2096 = 0.0;
            float _2097 = 0.0;
            float _2098 = 0.0;
            float _2099 = 0.0;
            float _2100 = 0.0;
            float _2101 = 0.0;
            uint _2102 = 0u;
            uint _2111;
            bool _2112;
            for (;;)
            {
                _2111 = texelFetch(g_lightClassification, int((((_1857 << 5u) + (_1843 << 9u)) + (_2102 << 2u)) >> 2u)).x;
                _2112 = _2111 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                float frontier_phi_32_pred_3;
                float frontier_phi_32_pred_4;
                float frontier_phi_32_pred_5;
                if (_2112)
                {
                    frontier_phi_32_pred = _2096;
                    frontier_phi_32_pred_1 = _2099;
                    frontier_phi_32_pred_2 = _2098;
                    frontier_phi_32_pred_3 = _2097;
                    frontier_phi_32_pred_4 = _2101;
                    frontier_phi_32_pred_5 = _2100;
                }
                else
                {
                    float _2241;
                    float _2242;
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    uint _2247;
                    _2241 = _2096;
                    _2242 = _2097;
                    _2243 = _2098;
                    _2244 = _2099;
                    _2245 = _2100;
                    _2246 = _2101;
                    _2247 = _2111;
                    float _2168;
                    float _2169;
                    float _2170;
                    float _2171;
                    float _2172;
                    float _2173;
                    for (;;)
                    {
                        uint _2251 = uint(findLSB(_2247)) + (_2102 << 5u);
                        uint _2248 = (_2247 + 4294967295u) & _2247;
                        uint _2253 = _2251 * 48u;
                        vec4 _2267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2253)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2253 + 3u)).x));
                        uint _2273 = (_2251 * 48u) + 4u;
                        vec4 _2286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2273)).x, texelFetch(g_PointLightRenderingBuffer, int(_2273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2273 + 3u)).x));
                        uint _2292 = (_2251 * 48u) + 8u;
                        vec3 _2303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2292)).x, texelFetch(g_PointLightRenderingBuffer, int(_2292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2292 + 2u)).x));
                        float _2307 = _2267.x - _1817;
                        float _2308 = _2267.y - _1818;
                        float _2309 = _2267.z - _1819;
                        float _2310 = dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309));
                        float _2313 = inversesqrt(_2310);
                        float _2314 = _2313 * _2307;
                        float _2315 = _2313 * _2308;
                        float _2316 = _2313 * _2309;
                        float _2317 = dot(vec3(_425, _428, _431), vec3(_2314, _2315, _2316));
                        float _2322 = 1.0 - (_2310 * _2267.w);
                        float _3513 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
                        float _2323 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
                        float _2324 = sqrt(_2310) * _2286.w;
                        float _2327 = 1.39999997615814208984375 / (_2324 + 1.39999997615814208984375);
                        float _2328 = _2327 * _2327;
                        float _2331 = ((1.0 - _2328) * _2317) + _2328;
                        float _2334 = _2324 * _2324;
                        float _2338 = ((isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0))) * _2323) / ((_2334 * 0.699999988079071044921875) + 1.0);
                        float _2342 = (-0.0) - _1817;
                        float _2343 = (-0.0) - _1818;
                        float _2344 = (-0.0) - _1819;
                        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
                        float _2349 = _2348 * _2342;
                        float _2350 = _2348 * _2343;
                        float _2351 = _2348 * _2344;
                        float _2359 = exp2(log2(1.0 / ((_2334 * 3.5) + 5.0)) * 0.25);
                        float _2361 = 1.0 - sqrt(_305);
                        float _2368 = sqrt(1.0 - ((1.0 - (_2361 * _2361)) * (1.0 - (_2359 * _2359))));
                        float _2369 = _2368 * _2368;
                        float _2370 = _2369 * _2369;
                        float _2371 = _2349 + _2314;
                        float _2372 = _2350 + _2315;
                        float _2373 = _2351 + _2316;
                        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
                        float _2381 = dot(vec3(_425, _428, _431), vec3(_2349, _2350, _2351));
                        float _3529 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
                        float _2384 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
                        float _2385 = dot(vec3(_425, _428, _431), vec3(_2377 * _2371, _2377 * _2372, _2377 * _2373));
                        float _3540 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
                        float _2388 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                        float _2392 = ((_2388 * _2388) * (_2370 + (-1.0))) + 1.0;
                        float _2393 = _2327 * _2369;
                        float _2394 = _2393 * _2393;
                        float _2397 = ((1.0 - _2394) * _2317) + _2394;
                        float _3551 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
                        float _2398 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
                        float _2399 = 1.0 - _2369;
                        float _2409 = (0.5 / (((_2398 * ((_2384 * _2399) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2399) + _2369) * _2384))) * _2398;
                        float _3562 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
                        float _2420 = (((_2370 * 3.1415927410125732421875) * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) / ((_2392 * _2392) * ((_2334 * 2.1991131305694580078125) + 3.141590118408203125))) * _2323;
                        _2171 = (_2338 * _2286.x) + _2244;
                        _2172 = (_2338 * _2286.y) + _2245;
                        _2173 = (_2338 * _2286.z) + _2246;
                        _2168 = (_2420 * _2303.x) + _2241;
                        _2169 = (_2420 * _2303.y) + _2242;
                        _2170 = (_2420 * _2303.z) + _2243;
                        if (_2248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2241 = _2168;
                            _2242 = _2169;
                            _2243 = _2170;
                            _2244 = _2171;
                            _2245 = _2172;
                            _2246 = _2173;
                            _2247 = _2248;
                        }
                    }
                    frontier_phi_32_pred = _2168;
                    frontier_phi_32_pred_1 = _2171;
                    frontier_phi_32_pred_2 = _2170;
                    frontier_phi_32_pred_3 = _2169;
                    frontier_phi_32_pred_4 = _2173;
                    frontier_phi_32_pred_5 = _2172;
                }
                _1943 = frontier_phi_32_pred;
                _1949 = frontier_phi_32_pred_1;
                _1947 = frontier_phi_32_pred_2;
                _1945 = frontier_phi_32_pred_3;
                _1953 = frontier_phi_32_pred_4;
                _1951 = frontier_phi_32_pred_5;
                uint _2103 = _2102 + 1u;
                if (_2103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2096 = _1943;
                    _2097 = _1945;
                    _2098 = _1947;
                    _2099 = _1949;
                    _2100 = _1951;
                    _2101 = _1953;
                    _2102 = _2103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1942 = _1943;
            _1944 = _1945;
            _1946 = _1947;
            _1948 = _1949;
            _1950 = _1951;
            _1952 = _1953;
        }
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.z;
        uint _1959 = (_1957 >> 8u) & 15u;
        float _2064;
        float _2066;
        float _2068;
        float _2070;
        float _2072;
        float _2074;
        if (((4294967295u << _1959) & _1863) == 0u)
        {
            _2064 = _1942;
            _2066 = _1944;
            _2068 = _1946;
            _2070 = _1948;
            _2072 = _1950;
            _2074 = _1952;
        }
        else
        {
            float _2089 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
            float _2090 = _2089 * _1817;
            float _2091 = _2089 * _1818;
            float _2092 = _2089 * _1819;
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            float frontier_phi_24_25_ladder_3;
            float frontier_phi_24_25_ladder_4;
            float frontier_phi_24_25_ladder_5;
            if (_1959 < ((_1957 >> 12u) & 15u))
            {
                float _2065;
                float _2067;
                float _2069;
                float _2071;
                float _2073;
                float _2075;
                float _2224 = _1942;
                float _2225 = _1944;
                float _2226 = _1946;
                float _2227 = _1948;
                float _2228 = _1950;
                float _2229 = _1952;
                uint _2230 = _1959;
                uint _2239;
                bool _2240;
                for (;;)
                {
                    _2239 = texelFetch(g_lightClassification, int((((_1857 << 5u) + (_1843 << 9u)) + (_2230 << 2u)) >> 2u)).x;
                    _2240 = _2239 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    float frontier_phi_43_pred_3;
                    float frontier_phi_43_pred_4;
                    float frontier_phi_43_pred_5;
                    if (_2240)
                    {
                        frontier_phi_43_pred = _2227;
                        frontier_phi_43_pred_1 = _2229;
                        frontier_phi_43_pred_2 = _2228;
                        frontier_phi_43_pred_3 = _2226;
                        frontier_phi_43_pred_4 = _2225;
                        frontier_phi_43_pred_5 = _2224;
                    }
                    else
                    {
                        float _2434;
                        float _2435;
                        float _2436;
                        float _2437;
                        float _2438;
                        float _2439;
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2447 = _2224;
                        float _2448 = _2225;
                        float _2449 = _2226;
                        float _2450 = _2227;
                        float _2451 = _2228;
                        float _2452 = _2229;
                        uint _2453 = _2239;
                        uint _2454;
                        vec4 _2480;
                        float _2481;
                        vec4 _2496;
                        vec3 _2508;
                        vec4 _2524;
                        vec4 _2540;
                        float _2587;
                        bool _2588;
                        for (;;)
                        {
                            uint _2464 = ((_2230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2453));
                            _2454 = (_2453 + 4294967295u) & _2453;
                            uint _2466 = _2464 * 40u;
                            _2480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2466 + 3u)).x));
                            _2481 = _2480.w;
                            uint _2483 = (_2464 * 40u) + 4u;
                            _2496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2483 + 3u)).x));
                            uint _2498 = (_2464 * 40u) + 8u;
                            _2508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 2u)).x));
                            uint _2511 = (_2464 * 40u) + 16u;
                            _2524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 3u)).x));
                            uint _2527 = (_2464 * 40u) + 20u;
                            _2540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 3u)).x));
                            uint _2543 = (_2464 * 40u) + 24u;
                            vec4 _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            uint _2562 = (_2464 * 40u) + 28u;
                            vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            _2587 = fma(_1819, _2575.z, fma(_1818, _2575.y, _2575.x * _1817)) + _2575.w;
                            _2588 = !((fma(_1819, _2556.z, fma(_1818, _2556.y, _2556.x * _1817)) + _2556.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            float frontier_phi_49_pred_3;
                            float frontier_phi_49_pred_4;
                            float frontier_phi_49_pred_5;
                            if (_2588)
                            {
                                float _2615 = _2480.x - _1817;
                                float _2616 = _2480.y - _1818;
                                float _2617 = _2480.z - _1819;
                                float _2618 = dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617));
                                float _2621 = inversesqrt(_2618);
                                float _2622 = _2621 * _2615;
                                float _2623 = _2621 * _2616;
                                float _2624 = _2621 * _2617;
                                float _2628 = 1.0 - (_2618 / (_2481 * _2481));
                                float _3573 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                                float _2629 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                                float _2633 = sqrt(_2618) * _2496.w;
                                float _2635 = 1.39999997615814208984375 / (_2633 + 1.39999997615814208984375);
                                float _2636 = _2635 * _2635;
                                float _2639 = ((1.0 - _2636) * dot(vec3(_2622, _2623, _2624), vec3(_425, _428, _431))) + _2636;
                                float _2642 = _2633 * _2633;
                                float _2646 = (fma(_1819, _2524.z, fma(_1818, _2524.y, _2524.x * _1817)) + _2524.w) / _2587;
                                float _2647 = (fma(_1819, _2540.z, fma(_1818, _2540.y, _2540.x * _1817)) + _2540.w) / _2587;
                                float _2651 = 1.0 - dot(vec2(_2646, _2647), vec2(_2646, _2647));
                                float _3589 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                                float _2652 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                                float _2653 = _2652 * (((isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))) * _2629) / ((_2642 * 0.699999988079071044921875) + 1.0));
                                float _2665 = exp2(log2(1.0 / ((_2642 * 3.5) + 5.0)) * 0.25);
                                float _2667 = 1.0 - sqrt(_305);
                                float _2674 = sqrt(1.0 - ((1.0 - (_2667 * _2667)) * (1.0 - (_2665 * _2665))));
                                float _2675 = _2674 * _2674;
                                float _2676 = _2675 * _2675;
                                float _2677 = _2622 - _2090;
                                float _2678 = _2623 - _2091;
                                float _2679 = _2624 - _2092;
                                float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
                                float _2687 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2090, (-0.0) - _2091, (-0.0) - _2092));
                                float _3600 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                                float _2690 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2691 = dot(vec3(_425, _428, _431), vec3(_2683 * _2677, _2683 * _2678, _2683 * _2679));
                                float _3611 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                                float _2694 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2698 = ((_2694 * _2694) * (_2676 + (-1.0))) + 1.0;
                                float _2699 = _2635 * _2675;
                                float _2700 = _2699 * _2699;
                                float _2706 = ((1.0 - _2700) * dot(vec3(_425, _428, _431), vec3(_2622, _2623, _2624))) + _2700;
                                float _3622 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2707 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
                                float _2708 = 1.0 - _2675;
                                float _2718 = (0.5 / (((_2707 * ((_2690 * _2708) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2708) + _2675) * _2690))) * _2707;
                                float _3633 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                                float _2728 = (_2652 * _2629) * (((_2676 * 3.1415927410125732421875) * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) / ((_2698 * _2698) * ((_2642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_49_pred = _2653 * _2496.x;
                                frontier_phi_49_pred_1 = _2728 * _2508.z;
                                frontier_phi_49_pred_2 = _2728 * _2508.y;
                                frontier_phi_49_pred_3 = _2728 * _2508.x;
                                frontier_phi_49_pred_4 = _2653 * _2496.z;
                                frontier_phi_49_pred_5 = _2653 * _2496.y;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                                frontier_phi_49_pred_3 = 0.0;
                                frontier_phi_49_pred_4 = 0.0;
                                frontier_phi_49_pred_5 = 0.0;
                            }
                            _2735 = frontier_phi_49_pred;
                            _2734 = frontier_phi_49_pred_1;
                            _2733 = frontier_phi_49_pred_2;
                            _2732 = frontier_phi_49_pred_3;
                            _2737 = frontier_phi_49_pred_4;
                            _2736 = frontier_phi_49_pred_5;
                            _2437 = _2735 + _2450;
                            _2438 = _2736 + _2451;
                            _2439 = _2737 + _2452;
                            _2434 = _2732 + _2447;
                            _2435 = _2733 + _2448;
                            _2436 = _2734 + _2449;
                            if (_2454 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2447 = _2434;
                                _2448 = _2435;
                                _2449 = _2436;
                                _2450 = _2437;
                                _2451 = _2438;
                                _2452 = _2439;
                                _2453 = _2454;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2437;
                        frontier_phi_43_pred_1 = _2439;
                        frontier_phi_43_pred_2 = _2438;
                        frontier_phi_43_pred_3 = _2436;
                        frontier_phi_43_pred_4 = _2435;
                        frontier_phi_43_pred_5 = _2434;
                    }
                    _2071 = frontier_phi_43_pred;
                    _2075 = frontier_phi_43_pred_1;
                    _2073 = frontier_phi_43_pred_2;
                    _2069 = frontier_phi_43_pred_3;
                    _2067 = frontier_phi_43_pred_4;
                    _2065 = frontier_phi_43_pred_5;
                    uint _2231 = _2230 + 1u;
                    if (_2231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2224 = _2065;
                        _2225 = _2067;
                        _2226 = _2069;
                        _2227 = _2071;
                        _2228 = _2073;
                        _2229 = _2075;
                        _2230 = _2231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _2075;
                frontier_phi_24_25_ladder_1 = _2073;
                frontier_phi_24_25_ladder_2 = _2071;
                frontier_phi_24_25_ladder_3 = _2069;
                frontier_phi_24_25_ladder_4 = _2067;
                frontier_phi_24_25_ladder_5 = _2065;
            }
            else
            {
                frontier_phi_24_25_ladder = _1952;
                frontier_phi_24_25_ladder_1 = _1950;
                frontier_phi_24_25_ladder_2 = _1948;
                frontier_phi_24_25_ladder_3 = _1946;
                frontier_phi_24_25_ladder_4 = _1944;
                frontier_phi_24_25_ladder_5 = _1942;
            }
            _2064 = frontier_phi_24_25_ladder_5;
            _2066 = frontier_phi_24_25_ladder_4;
            _2068 = frontier_phi_24_25_ladder_3;
            _2070 = frontier_phi_24_25_ladder_2;
            _2072 = frontier_phi_24_25_ladder_1;
            _2074 = frontier_phi_24_25_ladder;
        }
        float _2079 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _1875 = (_2079 * _2070) + _1392;
        _1877 = (_2079 * _2072) + _1394;
        _1879 = (_2079 * _2074) + _1396;
        _1881 = ((_2064 * _470) * _2079) + _1682;
        _1883 = ((_2066 * _472) * _2079) + _1684;
        _1885 = ((_2068 * _473) * _2079) + _1686;
    }
    else
    {
        _1875 = _1392;
        _1877 = _1394;
        _1879 = _1396;
        _1881 = _1682;
        _1883 = _1684;
        _1885 = _1686;
    }
    float _3649 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3660 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3671 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _1902 = ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1875 + (((1.0 - _503) * _485) * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)))))) + ((_1881 + ((_523.x * _503) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1903 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1877 + (((1.0 - _504) * _485) * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)))))) + ((_1883 + ((_523.y * _504) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    float _1904 = ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1879 + (((1.0 - _505) * _485) * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)))))) + ((_1885 + ((_523.z * _505) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x);
    uint _1905 = _444 + 6u;
    float _1913 = _404 / cbSceneParam._m0[86u].x;
    float _1914 = _405 / cbSceneParam._m0[86u].y;
    vec4 _1928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1930 = _1928.x;
    float _1931 = _1928.y;
    float _1932 = _1928.z;
    float _1933 = _1928.w;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _1967 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _1968 = _1967 / _325;
        float _1979 = _1968 * _376;
        float _1980 = _377 * _1968;
        float _1981 = (-0.0) - _1980;
        float _1982 = _1968 * _378;
        float _1984 = (cbSceneParam._m0[77u].w * _1981) / _1967;
        float _1985 = _1984 + cbSceneParam._m0[79u].w;
        float _1986 = cbSceneParam._m0[79u].w - _1980;
        float _1992 = sqrt(((_1979 * _1979) + (_1980 * _1980)) + (_1982 * _1982));
        float _1995 = (1.0 - (cbSceneParam._m0[77u].w / _1967)) * _1992;
        float _2001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2181;
        if (abs((_1981 - _1984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2181 = ((((_1985 > 0.0) ? exp2(_2001 * _1985) : (2.0 - exp2(_2003 * _1985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1995;
        }
        else
        {
            float _2125 = 1.0 / cbSceneParam._m0[80u].x;
            float _2126 = isnan(_1986) ? _1985 : (isnan(_1985) ? _1986 : max(_1985, _1986));
            float _2127 = isnan(_1986) ? _1985 : (isnan(_1985) ? _1986 : min(_1985, _1986));
            float _2136 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : min(_2126, 0.0));
            float _2137 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : min(_2127, 0.0));
            _2181 = ((abs(_1992 / _1981) * cbSceneParam._m0[80u].y) * ((((_2136 - _2137) * 2.0) - ((exp2(_2001 * (isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)))) - exp2(_2001 * (isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))))) * _2125)) - ((exp2(_2003 * _2136) - exp2(_2003 * _2137)) * _2125))) + (_1995 * cbSceneParam._m0[80u].z);
        }
        vec4 _2183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, 1.0), 0.0);
        float _2192 = exp2((_2181 * (-1.44269502162933349609375)) * (1.0 - _2183.w));
        float _2193 = log2(_2192);
        float _2209 = log2(_1933);
        _2005 = (exp2(_2209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2193 * cbSceneParam._m0[78u].x)) * _2183.x) / cbSceneParam._m0[78u].x)) + _1930;
        _2007 = (exp2(_2209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2193 * cbSceneParam._m0[78u].y)) * _2183.y) / cbSceneParam._m0[78u].y)) + _1931;
        _2009 = (exp2(_2209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2193 * cbSceneParam._m0[78u].z)) * _2183.z) / cbSceneParam._m0[78u].z)) + _1932;
        _2011 = _2192 * _1933;
    }
    else
    {
        _2005 = _1930;
        _2007 = _1931;
        _2009 = _1932;
        _2011 = _1933;
    }
    bool _2219;
    vec4 _2020;
    vec4 _2043;
    float _2045;
    float _2049;
    float _2050;
    float _2051;
    float _2052;
    bool _2063;
    for (;;)
    {
        _2020 = cbMatDynParam._m0[0u];
        float _2022 = roundEven(_2020.y);
        bool _2023 = _2022 == 3.0;
        float _2025 = log2(_2011);
        float _2032 = exp2(_2025 * cbSceneParam._m0[78u].x) * _1902;
        float _2033 = exp2(_2025 * cbSceneParam._m0[78u].y) * _1903;
        float _2034 = exp2(_2025 * cbSceneParam._m0[78u].z) * _1904;
        float _2041 = _392 + (-0.5);
        _2043 = cbMtdParam._m0[1u];
        _2045 = _2043.y * _2041;
        float _2048 = (_2022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2049 = _2048 * (_2023 ? _2032 : (_2032 + (cbSceneParam._m0[72u].w * _2005)));
        _2050 = _2048 * (_2023 ? _2033 : (_2033 + (cbSceneParam._m0[72u].w * _2007)));
        _2051 = _2048 * (_2023 ? _2034 : (_2034 + (cbSceneParam._m0[72u].w * _2009)));
        _2052 = _2041 * 0.999000012874603271484375;
        _2063 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2063)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2052) < 0.5)
            {
                _2219 = true;
                break;
            }
        }
        uint _2160 = _446 + uint(_2020.w);
        if ((cbInstanceData._m0[_2160].w < 1.0) && ((cbInstanceData._m0[_2160].w + _2052) < 0.5))
        {
            _2219 = true;
            break;
        }
        if ((_2045 + 1.0) < _2043.x)
        {
            _2219 = true;
            break;
        }
        _2219 = false;
        break;
    }
    float _2425;
    if (_2219)
    {
        discard_state = true;
        _2425 = 0.0;
    }
    else
    {
        _2425 = cbInstanceData._m0[_1905].w;
    }
    SV_Target.x = _2049;
    SV_Target.y = _2050;
    SV_Target.z = _2051;
    SV_Target.w = _2425;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1905].w;
    discard_exit();
}


