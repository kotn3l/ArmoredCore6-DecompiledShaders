#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 54) uniform texture2D g_ReflectionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_PlanarReflection_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_PlanarReflection_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_PlanarReflection_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205;
    float _206;
    float _207;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _205 = (-0.0) - _191;
        _206 = (-0.0) - _192;
        _207 = (-0.0) - _193;
    }
    else
    {
        _205 = _191;
        _206 = _192;
        _207 = _193;
    }
    vec4 _227 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _247.x;
    vec4 _261 = texture(sampler2D(M_PlanarReflection_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _2699 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _2699 : (isnan(_2699) ? 1.0 : min(_2699, 1.0))));
    float _285 = fma(_278, _205, fma(_271, _197 * TANGENT.x, (_183 * _176) * _269));
    float _288 = fma(_278, _206, fma(_271, _197 * TANGENT.y, (_183 * _177) * _269));
    float _291 = fma(_278, _207, fma(_271, _197 * TANGENT.z, (_183 * _178) * _269));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _2710 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _299 = isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0));
    float _2721 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _2732 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _2743 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _2754 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _303 = isnan(1.0) ? _2754 : (isnan(_2754) ? 1.0 : min(_2754, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _410 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _413 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = (_426 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2721 : (isnan(_2721) ? 1.0 : min(_2721, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2732 : (isnan(_2732) ? 1.0 : min(_2732, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2743 : (isnan(_2743) ? 1.0 : min(_2743, 1.0)))) * cbInstanceData._m0[_429].z;
    float _2765 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2765 : (isnan(_2765) ? 1.0 : min(_2765, 1.0));
    float _2776 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _2776 : (isnan(_2776) ? 1.0 : min(_2776, 1.0));
    float _2787 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _2787 : (isnan(_2787) ? 1.0 : min(_2787, 1.0));
    float _441 = 1.0 - _303;
    float _442 = _438 * _441;
    float _443 = _439 * _441;
    float _444 = _440 * _441;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _303;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _303;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _303;
    float _452 = _449 + 0.039999999105930328369140625;
    float _454 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _467 = _464.x * TEXCOORD.z;
    float _471 = abs(dot(vec3(_377, _378, _379), vec3(_296, _297, _298)));
    float _2798 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _477 = exp2(log2(1.0 - (isnan(1.0) ? _2798 : (isnan(_2798) ? 1.0 : min(_2798, 1.0)))) * 5.0);
    float _478 = 0.959999978542327880859375 - _449;
    float _480 = 0.959999978542327880859375 - _450;
    float _481 = 0.959999978542327880859375 - _451;
    float _485 = (_477 * _478) + _452;
    float _486 = (_477 * _480) + _454;
    float _487 = (_477 * _481) + _455;
    vec4 _505 = texture(sampler2D(g_ReflectionTexture, SS_ClampLinear), vec2((((10.0 / (_319 + 10.0)) * cbMtdParam._m0[10u].x) * dot(vec3(_296, _297, _298), vec3(1.0, 0.0, 0.0))) + (_385 / cbSceneParam._m0[86u].x), 1.0 - (_386 / cbSceneParam._m0[86u].y)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _852;
    float _853;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _576 = fma(_549, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _541));
        float _580 = fma(_549, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _541));
        float _584 = fma(_549, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _541));
        float _609 = _541 + _296;
        float _610 = _545 + _297;
        float _611 = _549 + _298;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _576;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _580;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _584;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_576 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_580 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_584 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _708 = ((_645.x + (-0.5)) * 0.5) * _679;
        float _710 = ((_652.x + (-0.5)) * 0.5) * _686;
        float _712 = ((_659.x + (-0.5)) * 0.5) * _693;
        float _713 = dot(vec3(_708, _710, _712), vec3(_708, _710, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_296, _297, _298), vec3(_718 * _708, _718 * _710, _718 * _712)) + 1.0) * 0.5;
        float _2824 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_710 * _710) + (_708 * _708)) + (_712 * _712)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _2835 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _2846 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0))) * (_739 + 1.0))) + _744) * _704;
        float _755 = ((_645.y + (-0.5)) * 0.5) * _679;
        float _757 = ((_652.y + (-0.5)) * 0.5) * _686;
        float _759 = ((_659.y + (-0.5)) * 0.5) * _693;
        float _760 = dot(vec3(_755, _757, _759), vec3(_755, _757, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_296, _297, _298), vec3(_765 * _755, _765 * _757, _765 * _759)) + 1.0) * 0.5;
        float _2857 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_757 * _757) + (_755 * _755)) + (_759 * _759)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _2868 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _2879 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0))) * (_784 + 1.0))) + _789) * _705;
        float _800 = ((_645.z + (-0.5)) * 0.5) * _679;
        float _802 = ((_652.z + (-0.5)) * 0.5) * _686;
        float _804 = ((_659.z + (-0.5)) * 0.5) * _693;
        float _805 = dot(vec3(_800, _802, _804), vec3(_800, _802, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_296, _297, _298), vec3(_810 * _800, _810 * _802, _810 * _804)) + 1.0) * 0.5;
        float _2890 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_802 * _802) + (_800 * _800)) + (_804 * _804)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _2901 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _2912 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0))) * (_829 + 1.0))) + _834) * _706;
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = 0.0;
        _852 = 0.0;
        _853 = 0.0;
    }
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _879 = fma(_549, cbModelParam._m0[30u].z, fma(_545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _541));
        float _883 = fma(_549, cbModelParam._m0[31u].z, fma(_545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _541));
        float _887 = fma(_549, cbModelParam._m0[32u].z, fma(_545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _541));
        float _910 = _541 + _296;
        float _911 = _545 + _297;
        float _912 = _549 + _298;
        float _922 = fma(_912, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910)) - _879;
        float _923 = fma(_912, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910)) - _883;
        float _924 = fma(_912, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910)) - _887;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_879 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_883 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[35u].z) + ((((((_887 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _978 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1007 = ((_945.x + (-0.5)) * 0.5) * _978;
        float _1009 = ((_952.x + (-0.5)) * 0.5) * _985;
        float _1011 = ((_959.x + (-0.5)) * 0.5) * _992;
        float _1012 = dot(vec3(_1007, _1009, _1011), vec3(_1007, _1009, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_296, _297, _298), vec3(_1017 * _1007, _1017 * _1009, _1017 * _1011)) + 1.0) * 0.5;
        float _2953 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1009 * _1009) + (_1007 * _1007)) + (_1011 * _1011)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _2964 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _2975 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0))) * (_1036 + 1.0))) + _1041) * _1003;
        float _1052 = ((_945.y + (-0.5)) * 0.5) * _978;
        float _1054 = ((_952.y + (-0.5)) * 0.5) * _985;
        float _1056 = ((_959.y + (-0.5)) * 0.5) * _992;
        float _1057 = dot(vec3(_1052, _1054, _1056), vec3(_1052, _1054, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_296, _297, _298), vec3(_1062 * _1052, _1062 * _1054, _1062 * _1056)) + 1.0) * 0.5;
        float _2986 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1054 * _1054) + (_1052 * _1052)) + (_1056 * _1056)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _2997 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3008 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0))) * (_1081 + 1.0))) + _1086) * _1004;
        float _1097 = ((_945.z + (-0.5)) * 0.5) * _978;
        float _1099 = ((_952.z + (-0.5)) * 0.5) * _985;
        float _1101 = ((_959.z + (-0.5)) * 0.5) * _992;
        float _1102 = dot(vec3(_1097, _1099, _1101), vec3(_1097, _1099, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_296, _297, _298), vec3(_1107 * _1097, _1107 * _1099, _1107 * _1101)) + 1.0) * 0.5;
        float _3019 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1099 * _1099) + (_1097 * _1097)) + (_1101 * _1101)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3030 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3041 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0))) * (_1126 + 1.0))) + _1131) * _1005;
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1150 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
    }
    else
    {
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _851)) + _851;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _852)) + _852;
    float _1162 = (cbModelParam._m0[1u].x * (_1150 - _853)) + _853;
    float _1183 = fma(_1162, cbSceneParam._m0[89u].z, fma(_1161, cbSceneParam._m0[89u].y, _1160 * cbSceneParam._m0[89u].x));
    float _1186 = fma(_1162, cbSceneParam._m0[90u].z, fma(_1161, cbSceneParam._m0[90u].y, _1160 * cbSceneParam._m0[90u].x));
    float _1189 = fma(_1162, cbSceneParam._m0[91u].z, fma(_1161, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1160));
    uvec4 _1205 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1207 = _1205.x * 14u;
    uint _1209 = _1207 + 13u;
    float _1216 = _467 + (-1.0);
    float _1221 = (cbLight._m0[_1209].x * _1216) + 1.0;
    float _1222 = (cbLight._m0[_1209].y * _1216) + 1.0;
    float _1223 = (cbLight._m0[_1209].z * _1216) + 1.0;
    float _1224 = (cbLight._m0[_1209].w * _1216) + 1.0;
    uint _1225 = _1207 + 5u;
    float _1231 = isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0));
    uint _1235 = _1207 + 4u;
    float _1242 = isnan(1.0) ? _1221 : (isnan(_1221) ? 1.0 : min(_1221, 1.0));
    uint _1246 = _1207 | 1u;
    float _1257 = dot(vec3(cbLight._m0[_1207].xyz), vec3(_296, _297, _298));
    float _1260 = dot(vec3(cbLight._m0[_1246].xyz), vec3(_296, _297, _298));
    float _3092 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _3103 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1265 = (isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * 0.3183098733425140380859375;
    float _1267 = (isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))) * 0.3183098733425140380859375;
    float _1274 = ((cbLight._m0[_1225].x * _1231) * _1267) + ((cbLight._m0[_1235].x * _1242) * _1265);
    float _1275 = ((_1231 * cbLight._m0[_1225].y) * _1267) + ((_1242 * cbLight._m0[_1235].y) * _1265);
    float _1276 = ((_1231 * cbLight._m0[_1225].z) * _1267) + ((_1242 * cbLight._m0[_1235].z) * _1265);
    uvec4 _1281 = floatBitsToUint(cbLight._m0[_1207 + 12u]);
    bool _1283 = _1281.x == 0u;
    float _1284;
    float _1286;
    float _1288;
    if (_1283)
    {
        _1284 = _1274;
        _1286 = _1275;
        _1288 = _1276;
    }
    else
    {
        uint _1292 = _1207 + 6u;
        float _1308 = (dot(vec3(cbLight._m0[_1207 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1309 = _1308 * _1308;
        float _3114 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _1311 = isnan(1.0) ? _1223 : (isnan(_1223) ? 1.0 : min(_1223, 1.0));
        _1284 = (((cbLight._m0[_1292].x * 0.3183098733425140380859375) * _1310) * _1311) + _1274;
        _1286 = (((cbLight._m0[_1292].y * 0.3183098733425140380859375) * _1310) * _1311) + _1275;
        _1288 = (((cbLight._m0[_1292].z * 0.3183098733425140380859375) * _1310) * _1311) + _1276;
    }
    bool _1291 = _1281.y == 0u;
    float _1321;
    float _1323;
    float _1325;
    if (_1291)
    {
        _1321 = _1284;
        _1323 = _1286;
        _1325 = _1288;
    }
    else
    {
        uint _1490 = _1207 + 7u;
        float _1506 = (dot(vec3(cbLight._m0[_1207 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1507 = _1506 * _1506;
        float _3130 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _1509 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _1321 = (((cbLight._m0[_1490].x * 0.3183098733425140380859375) * _1508) * _1509) + _1284;
        _1323 = (((cbLight._m0[_1490].y * 0.3183098733425140380859375) * _1508) * _1509) + _1286;
        _1325 = (((cbLight._m0[_1490].z * 0.3183098733425140380859375) * _1508) * _1509) + _1288;
    }
    uint _1328 = _1207 + 8u;
    float _1341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1207].w)) * _299) * 0.949999988079071044921875);
    float _1342 = _1341 * _1341;
    float _1343 = cbLight._m0[_1207].x + _377;
    float _1344 = cbLight._m0[_1207].y + _378;
    float _1345 = cbLight._m0[_1207].z + _379;
    float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
    float _1350 = _1349 * _1343;
    float _1351 = _1349 * _1344;
    float _1352 = _1349 * _1345;
    float _1353 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1207].xyz));
    float _3146 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1356 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _1357 = dot(vec3(_296, _297, _298), vec3(_377, _378, _379));
    float _3157 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    float _1360 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _1361 = dot(vec3(_296, _297, _298), vec3(_1350, _1351, _1352));
    float _3168 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1364 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _1365 = dot(vec3(cbLight._m0[_1207].xyz), vec3(_1350, _1351, _1352));
    float _3179 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1369 = _1342 * _1342;
    float _1373 = ((_1364 * _1364) * (_1369 + (-1.0))) + 1.0;
    float _1381 = exp2(log2(1.0 - (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * 5.0);
    float _1388 = 1.0 - _1342;
    float _1399 = (0.5 / (((_1360 * ((_1356 * _1388) + _1342)) + 9.9999999392252902907785028219223e-09) + (((_1360 * _1388) + _1342) * _1356))) * _1356;
    float _3190 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
    float _1401 = (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_1369 / ((_1373 * _1373) * 3.141590118408203125));
    uint _1412 = _1207 + 9u;
    float _1423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1246].w)) * _299) * 0.949999988079071044921875);
    float _1424 = _1423 * _1423;
    float _1425 = cbLight._m0[_1246].x + _377;
    float _1426 = cbLight._m0[_1246].y + _378;
    float _1427 = cbLight._m0[_1246].z + _379;
    float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
    float _1432 = _1431 * _1425;
    float _1433 = _1431 * _1426;
    float _1434 = _1431 * _1427;
    float _1435 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1246].xyz));
    float _3201 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
    float _1438 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _1439 = dot(vec3(_296, _297, _298), vec3(_1432, _1433, _1434));
    float _3212 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
    float _1442 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _1443 = dot(vec3(cbLight._m0[_1246].xyz), vec3(_1432, _1433, _1434));
    float _3223 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _1447 = _1424 * _1424;
    float _1451 = ((_1442 * _1442) * (_1447 + (-1.0))) + 1.0;
    float _1458 = exp2(log2(1.0 - (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * 5.0);
    float _1465 = 1.0 - _1424;
    float _1475 = (0.5 / (((_1360 * ((_1438 * _1465) + _1424)) + 9.9999999392252902907785028219223e-09) + (((_1360 * _1465) + _1424) * _1438))) * _1438;
    float _3234 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _1477 = (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_1447 / ((_1451 * _1451) * 3.141590118408203125));
    float _1487 = (((((_1458 * _478) + _452) * cbLight._m0[_1412].x) * _1477) * _1231) + (((((_1381 * _478) + _452) * cbLight._m0[_1328].x) * _1401) * _1242);
    float _1488 = (((((_1458 * _480) + _454) * cbLight._m0[_1412].y) * _1477) * _1231) + (((((_1381 * _480) + _454) * cbLight._m0[_1328].y) * _1401) * _1242);
    float _1489 = (((((_1458 * _481) + _455) * cbLight._m0[_1412].z) * _1477) * _1231) + (((((_1381 * _481) + _455) * cbLight._m0[_1328].z) * _1401) * _1242);
    float _1519;
    float _1521;
    float _1523;
    if (_1283)
    {
        _1519 = _1487;
        _1521 = _1488;
        _1523 = _1489;
    }
    else
    {
        uint _1525 = _1207 + 2u;
        uint _1529 = _1207 + 10u;
        float _1543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _299) * 0.949999988079071044921875);
        float _1544 = _1543 * _1543;
        float _1545 = cbLight._m0[_1525].x + _377;
        float _1546 = cbLight._m0[_1525].y + _378;
        float _1547 = cbLight._m0[_1525].z + _379;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1552 = _1551 * _1545;
        float _1553 = _1551 * _1546;
        float _1554 = _1551 * _1547;
        float _1555 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1525].xyz));
        float _3245 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1558 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1559 = dot(vec3(_296, _297, _298), vec3(_1552, _1553, _1554));
        float _3256 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1562 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1563 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1552, _1553, _1554));
        float _3267 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1544 * _1544;
        float _1571 = ((_1562 * _1562) * (_1567 + (-1.0))) + 1.0;
        float _1578 = exp2(log2(1.0 - (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * 5.0);
        float _1585 = 1.0 - _1544;
        float _1595 = (0.5 / (((_1360 * ((_1558 * _1585) + _1544)) + 9.9999999392252902907785028219223e-09) + (((_1360 * _1585) + _1544) * _1558))) * _1558;
        float _3278 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1597 = (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * (_1567 / ((_1571 * _1571) * 3.141590118408203125));
        float _1598 = isnan(1.0) ? _1223 : (isnan(_1223) ? 1.0 : min(_1223, 1.0));
        _1519 = (((((_1578 * _478) + _452) * cbLight._m0[_1529].x) * _1597) * _1598) + _1487;
        _1521 = (((((_1578 * _480) + _454) * cbLight._m0[_1529].y) * _1597) * _1598) + _1488;
        _1523 = (((((_1578 * _481) + _455) * cbLight._m0[_1529].z) * _1597) * _1598) + _1489;
    }
    float _1608;
    float _1610;
    float _1612;
    if (_1291)
    {
        _1608 = _1519;
        _1610 = _1521;
        _1612 = _1523;
    }
    else
    {
        uint _1619 = _1207 + 3u;
        uint _1623 = _1207 + 11u;
        float _1637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _299) * 0.949999988079071044921875);
        float _1638 = _1637 * _1637;
        float _1639 = cbLight._m0[_1619].x + _377;
        float _1640 = cbLight._m0[_1619].y + _378;
        float _1641 = cbLight._m0[_1619].z + _379;
        float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
        float _1646 = _1645 * _1639;
        float _1647 = _1645 * _1640;
        float _1648 = _1645 * _1641;
        float _1649 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1619].xyz));
        float _3294 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1652 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1653 = dot(vec3(_296, _297, _298), vec3(_1646, _1647, _1648));
        float _3305 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1656 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1657 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1646, _1647, _1648));
        float _3316 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1638 * _1638;
        float _1665 = ((_1656 * _1656) * (_1661 + (-1.0))) + 1.0;
        float _1672 = exp2(log2(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * 5.0);
        float _1679 = 1.0 - _1638;
        float _1689 = (0.5 / (((_1360 * ((_1652 * _1679) + _1638)) + 9.9999999392252902907785028219223e-09) + (((_1360 * _1679) + _1638) * _1652))) * _1652;
        float _3327 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1691 = (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1661 / ((_1665 * _1665) * 3.141590118408203125));
        float _1692 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _1608 = (((((_1672 * _478) + _452) * cbLight._m0[_1623].x) * _1691) * _1692) + _1519;
        _1610 = (((((_1672 * _480) + _454) * cbLight._m0[_1623].y) * _1691) * _1692) + _1521;
        _1612 = (((((_1672 * _481) + _455) * cbLight._m0[_1623].z) * _1691) * _1692) + _1523;
    }
    float _1801;
    float _1803;
    float _1805;
    float _1807;
    float _1809;
    float _1811;
    if (_1205.y == 0u)
    {
        float _1742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1743 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1742;
        float _1744 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1742;
        float _1745 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1742;
        uvec4 _1757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1758 = _1757.x;
        uint _1769 = uint((float(_1757.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _1758))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _1758)));
        float _1779 = (log2(_1745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1780 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        uint _1783 = uint(isnan(14.0) ? _1780 : (isnan(_1780) ? 14.0 : min(_1780, 14.0)));
        uvec4 _1788 = texelFetch(g_lightClusterGridBuffer, int(((_1783 << 2u) + (_1769 << 6u)) >> 2u));
        uint _1789 = _1788.x;
        uint _1790 = _1757.z;
        float _1868;
        float _1870;
        float _1872;
        float _1874;
        float _1876;
        float _1878;
        if (((((1u << ((_1790 >> 4u) & 15u)) + 4294967295u) & _1789) == 0u) || ((_1790 & 240u) == 0u))
        {
            _1868 = 0.0;
            _1870 = 0.0;
            _1872 = 0.0;
            _1874 = 0.0;
            _1876 = 0.0;
            _1878 = 0.0;
        }
        else
        {
            float _1869;
            float _1871;
            float _1873;
            float _1875;
            float _1877;
            float _1879;
            float _2013 = 0.0;
            float _2014 = 0.0;
            float _2015 = 0.0;
            float _2016 = 0.0;
            float _2017 = 0.0;
            float _2018 = 0.0;
            uint _2019 = 0u;
            uint _2028;
            bool _2029;
            for (;;)
            {
                _2028 = texelFetch(g_lightClassification, int((((_1783 << 5u) + (_1769 << 9u)) + (_2019 << 2u)) >> 2u)).x;
                _2029 = _2028 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                float frontier_phi_27_pred_3;
                float frontier_phi_27_pred_4;
                float frontier_phi_27_pred_5;
                if (_2029)
                {
                    frontier_phi_27_pred = _2013;
                    frontier_phi_27_pred_1 = _2014;
                    frontier_phi_27_pred_2 = _2018;
                    frontier_phi_27_pred_3 = _2017;
                    frontier_phi_27_pred_4 = _2016;
                    frontier_phi_27_pred_5 = _2015;
                }
                else
                {
                    float _2137;
                    float _2138;
                    float _2139;
                    float _2140;
                    float _2141;
                    float _2142;
                    uint _2143;
                    _2137 = _2013;
                    _2138 = _2014;
                    _2139 = _2015;
                    _2140 = _2016;
                    _2141 = _2017;
                    _2142 = _2018;
                    _2143 = _2028;
                    float _2069;
                    float _2070;
                    float _2071;
                    float _2072;
                    float _2073;
                    float _2074;
                    for (;;)
                    {
                        uint _2147 = uint(findLSB(_2143)) + (_2019 << 5u);
                        uint _2144 = (_2143 + 4294967295u) & _2143;
                        uint _2149 = _2147 * 48u;
                        vec4 _2163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2149)).x, texelFetch(g_PointLightRenderingBuffer, int(_2149 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2149 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2149 + 3u)).x));
                        uint _2169 = (_2147 * 48u) + 4u;
                        vec4 _2182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2169)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2169 + 3u)).x));
                        uint _2188 = (_2147 * 48u) + 8u;
                        vec3 _2199 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2188)).x, texelFetch(g_PointLightRenderingBuffer, int(_2188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2188 + 2u)).x));
                        float _2203 = _2163.x - _1743;
                        float _2204 = _2163.y - _1744;
                        float _2205 = _2163.z - _1745;
                        float _2206 = dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205));
                        float _2209 = inversesqrt(_2206);
                        float _2210 = _2209 * _2203;
                        float _2211 = _2209 * _2204;
                        float _2212 = _2209 * _2205;
                        float _2213 = dot(vec3(_407, _410, _413), vec3(_2210, _2211, _2212));
                        float _2218 = 1.0 - (_2206 * _2163.w);
                        float _3353 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
                        float _2219 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
                        float _2220 = sqrt(_2206) * _2182.w;
                        float _2223 = 1.39999997615814208984375 / (_2220 + 1.39999997615814208984375);
                        float _2224 = _2223 * _2223;
                        float _2227 = ((1.0 - _2224) * _2213) + _2224;
                        float _2230 = _2220 * _2220;
                        float _2234 = ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2219) / ((_2230 * 0.699999988079071044921875) + 1.0);
                        float _2238 = (-0.0) - _1743;
                        float _2239 = (-0.0) - _1744;
                        float _2240 = (-0.0) - _1745;
                        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
                        float _2245 = _2244 * _2238;
                        float _2246 = _2244 * _2239;
                        float _2247 = _2244 * _2240;
                        float _2255 = exp2(log2(1.0 / ((_2230 * 3.5) + 5.0)) * 0.25);
                        float _2257 = 1.0 - sqrt(_299);
                        float _2264 = sqrt(1.0 - ((1.0 - (_2257 * _2257)) * (1.0 - (_2255 * _2255))));
                        float _2265 = _2264 * _2264;
                        float _2266 = _2265 * _2265;
                        float _2267 = _2245 + _2210;
                        float _2268 = _2246 + _2211;
                        float _2269 = _2247 + _2212;
                        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
                        float _2277 = dot(vec3(_407, _410, _413), vec3(_2245, _2246, _2247));
                        float _3369 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
                        float _2280 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
                        float _2281 = dot(vec3(_407, _410, _413), vec3(_2273 * _2267, _2273 * _2268, _2273 * _2269));
                        float _3380 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
                        float _2284 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
                        float _2288 = ((_2284 * _2284) * (_2266 + (-1.0))) + 1.0;
                        float _2289 = _2223 * _2265;
                        float _2290 = _2289 * _2289;
                        float _2293 = ((1.0 - _2290) * _2213) + _2290;
                        float _3391 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
                        float _2294 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
                        float _2295 = 1.0 - _2265;
                        float _2305 = (0.5 / (((_2294 * ((_2280 * _2295) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2295) + _2265) * _2280))) * _2294;
                        float _3402 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                        float _2316 = (((_2266 * 3.1415927410125732421875) * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) / ((_2288 * _2288) * ((_2230 * 2.1991131305694580078125) + 3.141590118408203125))) * _2219;
                        _2072 = (_2234 * _2182.x) + _2140;
                        _2073 = (_2234 * _2182.y) + _2141;
                        _2074 = (_2234 * _2182.z) + _2142;
                        _2069 = (_2316 * _2199.x) + _2137;
                        _2070 = (_2316 * _2199.y) + _2138;
                        _2071 = (_2316 * _2199.z) + _2139;
                        if (_2144 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2137 = _2069;
                            _2138 = _2070;
                            _2139 = _2071;
                            _2140 = _2072;
                            _2141 = _2073;
                            _2142 = _2074;
                            _2143 = _2144;
                        }
                    }
                    frontier_phi_27_pred = _2069;
                    frontier_phi_27_pred_1 = _2070;
                    frontier_phi_27_pred_2 = _2074;
                    frontier_phi_27_pred_3 = _2073;
                    frontier_phi_27_pred_4 = _2072;
                    frontier_phi_27_pred_5 = _2071;
                }
                _1869 = frontier_phi_27_pred;
                _1871 = frontier_phi_27_pred_1;
                _1879 = frontier_phi_27_pred_2;
                _1877 = frontier_phi_27_pred_3;
                _1875 = frontier_phi_27_pred_4;
                _1873 = frontier_phi_27_pred_5;
                uint _2020 = _2019 + 1u;
                if (_2020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2013 = _1869;
                    _2014 = _1871;
                    _2015 = _1873;
                    _2016 = _1875;
                    _2017 = _1877;
                    _2018 = _1879;
                    _2019 = _2020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1868 = _1869;
            _1870 = _1871;
            _1872 = _1873;
            _1874 = _1875;
            _1876 = _1877;
            _1878 = _1879;
        }
        uvec4 _1882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1883 = _1882.z;
        uint _1885 = (_1883 >> 8u) & 15u;
        float _1981;
        float _1983;
        float _1985;
        float _1987;
        float _1989;
        float _1991;
        if (((4294967295u << _1885) & _1789) == 0u)
        {
            _1981 = _1868;
            _1983 = _1870;
            _1985 = _1872;
            _1987 = _1874;
            _1989 = _1876;
            _1991 = _1878;
        }
        else
        {
            float _2006 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
            float _2007 = _2006 * _1743;
            float _2008 = _2006 * _1744;
            float _2009 = _2006 * _1745;
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            float frontier_phi_21_22_ladder_3;
            float frontier_phi_21_22_ladder_4;
            float frontier_phi_21_22_ladder_5;
            if (_1885 < ((_1883 >> 12u) & 15u))
            {
                float _1982;
                float _1984;
                float _1986;
                float _1988;
                float _1990;
                float _1992;
                float _2120 = _1868;
                float _2121 = _1870;
                float _2122 = _1872;
                float _2123 = _1874;
                float _2124 = _1876;
                float _2125 = _1878;
                uint _2126 = _1885;
                uint _2135;
                bool _2136;
                for (;;)
                {
                    _2135 = texelFetch(g_lightClassification, int((((_1783 << 5u) + (_1769 << 9u)) + (_2126 << 2u)) >> 2u)).x;
                    _2136 = _2135 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    float frontier_phi_33_pred_3;
                    float frontier_phi_33_pred_4;
                    float frontier_phi_33_pred_5;
                    if (_2136)
                    {
                        frontier_phi_33_pred = _2125;
                        frontier_phi_33_pred_1 = _2124;
                        frontier_phi_33_pred_2 = _2123;
                        frontier_phi_33_pred_3 = _2122;
                        frontier_phi_33_pred_4 = _2121;
                        frontier_phi_33_pred_5 = _2120;
                    }
                    else
                    {
                        float _2321;
                        float _2322;
                        float _2323;
                        float _2324;
                        float _2325;
                        float _2326;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2334 = _2120;
                        float _2335 = _2121;
                        float _2336 = _2122;
                        float _2337 = _2123;
                        float _2338 = _2124;
                        float _2339 = _2125;
                        uint _2340 = _2135;
                        uint _2341;
                        vec4 _2367;
                        float _2368;
                        vec4 _2383;
                        vec3 _2395;
                        vec4 _2411;
                        vec4 _2427;
                        float _2474;
                        bool _2475;
                        for (;;)
                        {
                            uint _2351 = ((_2126 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2340));
                            _2341 = (_2340 + 4294967295u) & _2340;
                            uint _2353 = _2351 * 40u;
                            _2367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2353 + 3u)).x));
                            _2368 = _2367.w;
                            uint _2370 = (_2351 * 40u) + 4u;
                            _2383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2370 + 3u)).x));
                            uint _2385 = (_2351 * 40u) + 8u;
                            _2395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2385 + 2u)).x));
                            uint _2398 = (_2351 * 40u) + 16u;
                            _2411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2398 + 3u)).x));
                            uint _2414 = (_2351 * 40u) + 20u;
                            _2427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 3u)).x));
                            uint _2430 = (_2351 * 40u) + 24u;
                            vec4 _2443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 3u)).x));
                            uint _2449 = (_2351 * 40u) + 28u;
                            vec4 _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            _2474 = fma(_1745, _2462.z, fma(_1744, _2462.y, _2462.x * _1743)) + _2462.w;
                            _2475 = !((fma(_1745, _2443.z, fma(_1744, _2443.y, _2443.x * _1743)) + _2443.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            float frontier_phi_39_pred_3;
                            float frontier_phi_39_pred_4;
                            float frontier_phi_39_pred_5;
                            if (_2475)
                            {
                                float _2502 = _2367.x - _1743;
                                float _2503 = _2367.y - _1744;
                                float _2504 = _2367.z - _1745;
                                float _2505 = dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504));
                                float _2508 = inversesqrt(_2505);
                                float _2509 = _2508 * _2502;
                                float _2510 = _2508 * _2503;
                                float _2511 = _2508 * _2504;
                                float _2515 = 1.0 - (_2505 / (_2368 * _2368));
                                float _3413 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                                float _2516 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
                                float _2520 = sqrt(_2505) * _2383.w;
                                float _2522 = 1.39999997615814208984375 / (_2520 + 1.39999997615814208984375);
                                float _2523 = _2522 * _2522;
                                float _2526 = ((1.0 - _2523) * dot(vec3(_2509, _2510, _2511), vec3(_407, _410, _413))) + _2523;
                                float _2529 = _2520 * _2520;
                                float _2533 = (fma(_1745, _2411.z, fma(_1744, _2411.y, _2411.x * _1743)) + _2411.w) / _2474;
                                float _2534 = (fma(_1745, _2427.z, fma(_1744, _2427.y, _2427.x * _1743)) + _2427.w) / _2474;
                                float _2538 = 1.0 - dot(vec2(_2533, _2534), vec2(_2533, _2534));
                                float _3429 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                                float _2539 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
                                float _2540 = _2539 * (((isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))) * _2516) / ((_2529 * 0.699999988079071044921875) + 1.0));
                                float _2552 = exp2(log2(1.0 / ((_2529 * 3.5) + 5.0)) * 0.25);
                                float _2554 = 1.0 - sqrt(_299);
                                float _2561 = sqrt(1.0 - ((1.0 - (_2554 * _2554)) * (1.0 - (_2552 * _2552))));
                                float _2562 = _2561 * _2561;
                                float _2563 = _2562 * _2562;
                                float _2564 = _2509 - _2007;
                                float _2565 = _2510 - _2008;
                                float _2566 = _2511 - _2009;
                                float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
                                float _2574 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2007, (-0.0) - _2008, (-0.0) - _2009));
                                float _3440 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                                float _2577 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
                                float _2578 = dot(vec3(_407, _410, _413), vec3(_2570 * _2564, _2570 * _2565, _2570 * _2566));
                                float _3451 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                                float _2581 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
                                float _2585 = ((_2581 * _2581) * (_2563 + (-1.0))) + 1.0;
                                float _2586 = _2522 * _2562;
                                float _2587 = _2586 * _2586;
                                float _2593 = ((1.0 - _2587) * dot(vec3(_407, _410, _413), vec3(_2509, _2510, _2511))) + _2587;
                                float _3462 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                                float _2594 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
                                float _2595 = 1.0 - _2562;
                                float _2605 = (0.5 / (((_2594 * ((_2577 * _2595) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2595) + _2562) * _2577))) * _2594;
                                float _3473 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                                float _2615 = (_2539 * _2516) * (((_2563 * 3.1415927410125732421875) * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) / ((_2585 * _2585) * ((_2529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_39_pred = _2615 * _2395.y;
                                frontier_phi_39_pred_1 = _2615 * _2395.x;
                                frontier_phi_39_pred_2 = _2540 * _2383.z;
                                frontier_phi_39_pred_3 = _2540 * _2383.y;
                                frontier_phi_39_pred_4 = _2540 * _2383.x;
                                frontier_phi_39_pred_5 = _2615 * _2395.z;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                                frontier_phi_39_pred_3 = 0.0;
                                frontier_phi_39_pred_4 = 0.0;
                                frontier_phi_39_pred_5 = 0.0;
                            }
                            _2620 = frontier_phi_39_pred;
                            _2619 = frontier_phi_39_pred_1;
                            _2624 = frontier_phi_39_pred_2;
                            _2623 = frontier_phi_39_pred_3;
                            _2622 = frontier_phi_39_pred_4;
                            _2621 = frontier_phi_39_pred_5;
                            _2324 = _2622 + _2337;
                            _2325 = _2623 + _2338;
                            _2326 = _2624 + _2339;
                            _2321 = _2619 + _2334;
                            _2322 = _2620 + _2335;
                            _2323 = _2621 + _2336;
                            if (_2341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2334 = _2321;
                                _2335 = _2322;
                                _2336 = _2323;
                                _2337 = _2324;
                                _2338 = _2325;
                                _2339 = _2326;
                                _2340 = _2341;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _2326;
                        frontier_phi_33_pred_1 = _2325;
                        frontier_phi_33_pred_2 = _2324;
                        frontier_phi_33_pred_3 = _2323;
                        frontier_phi_33_pred_4 = _2322;
                        frontier_phi_33_pred_5 = _2321;
                    }
                    _1992 = frontier_phi_33_pred;
                    _1990 = frontier_phi_33_pred_1;
                    _1988 = frontier_phi_33_pred_2;
                    _1986 = frontier_phi_33_pred_3;
                    _1984 = frontier_phi_33_pred_4;
                    _1982 = frontier_phi_33_pred_5;
                    uint _2127 = _2126 + 1u;
                    if (_2127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2120 = _1982;
                        _2121 = _1984;
                        _2122 = _1986;
                        _2123 = _1988;
                        _2124 = _1990;
                        _2125 = _1992;
                        _2126 = _2127;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1992;
                frontier_phi_21_22_ladder_1 = _1990;
                frontier_phi_21_22_ladder_2 = _1988;
                frontier_phi_21_22_ladder_3 = _1982;
                frontier_phi_21_22_ladder_4 = _1986;
                frontier_phi_21_22_ladder_5 = _1984;
            }
            else
            {
                frontier_phi_21_22_ladder = _1878;
                frontier_phi_21_22_ladder_1 = _1876;
                frontier_phi_21_22_ladder_2 = _1874;
                frontier_phi_21_22_ladder_3 = _1868;
                frontier_phi_21_22_ladder_4 = _1872;
                frontier_phi_21_22_ladder_5 = _1870;
            }
            _1981 = frontier_phi_21_22_ladder_3;
            _1983 = frontier_phi_21_22_ladder_5;
            _1985 = frontier_phi_21_22_ladder_4;
            _1987 = frontier_phi_21_22_ladder_2;
            _1989 = frontier_phi_21_22_ladder_1;
            _1991 = frontier_phi_21_22_ladder;
        }
        float _1996 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _1801 = (_1996 * _1987) + _1321;
        _1803 = (_1996 * _1989) + _1323;
        _1805 = (_1996 * _1991) + _1325;
        _1807 = ((_1981 * _452) * _1996) + _1608;
        _1809 = ((_1983 * _454) * _1996) + _1610;
        _1811 = ((_1985 * _455) * _1996) + _1612;
    }
    else
    {
        _1801 = _1321;
        _1803 = _1323;
        _1805 = _1325;
        _1807 = _1608;
        _1809 = _1610;
        _1811 = _1612;
    }
    float _3489 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3500 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3511 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    uint _1831 = _426 + 6u;
    float _1839 = _385 / cbSceneParam._m0[86u].x;
    float _1840 = _386 / cbSceneParam._m0[86u].y;
    vec4 _1854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1839, _1840, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1856 = _1854.x;
    float _1857 = _1854.y;
    float _1858 = _1854.z;
    float _1859 = _1854.w;
    float _1931;
    float _1933;
    float _1935;
    float _1937;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _1893 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _1894 = _1893 / _319;
        float _1905 = _1894 * _370;
        float _1906 = _371 * _1894;
        float _1907 = (-0.0) - _1906;
        float _1908 = _1894 * _372;
        float _1910 = (cbSceneParam._m0[77u].w * _1907) / _1893;
        float _1911 = _1910 + cbSceneParam._m0[79u].w;
        float _1912 = cbSceneParam._m0[79u].w - _1906;
        float _1918 = sqrt(((_1905 * _1905) + (_1906 * _1906)) + (_1908 * _1908));
        float _1921 = (1.0 - (cbSceneParam._m0[77u].w / _1893)) * _1918;
        float _1927 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1929 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2082;
        if (abs((_1907 - _1910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2082 = ((((_1911 > 0.0) ? exp2(_1927 * _1911) : (2.0 - exp2(_1929 * _1911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1921;
        }
        else
        {
            float _2042 = 1.0 / cbSceneParam._m0[80u].x;
            float _2043 = isnan(_1912) ? _1911 : (isnan(_1911) ? _1912 : max(_1911, _1912));
            float _2044 = isnan(_1912) ? _1911 : (isnan(_1911) ? _1912 : min(_1911, _1912));
            float _2053 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : min(_2043, 0.0));
            float _2054 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : min(_2044, 0.0));
            _2082 = ((abs(_1918 / _1907) * cbSceneParam._m0[80u].y) * ((((_2053 - _2054) * 2.0) - ((exp2(_1927 * (isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)))) - exp2(_1927 * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))))) * _2042)) - ((exp2(_1929 * _2053) - exp2(_1929 * _2054)) * _2042))) + (_1921 * cbSceneParam._m0[80u].z);
        }
        vec4 _2084 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1839, _1840, 1.0), 0.0);
        float _2093 = exp2((_2082 * (-1.44269502162933349609375)) * (1.0 - _2084.w));
        float _2094 = log2(_2093);
        float _2110 = log2(_1859);
        _1931 = (exp2(_2110 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2094 * cbSceneParam._m0[78u].x)) * _2084.x) / cbSceneParam._m0[78u].x)) + _1856;
        _1933 = (exp2(_2110 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2094 * cbSceneParam._m0[78u].y)) * _2084.y) / cbSceneParam._m0[78u].y)) + _1857;
        _1935 = (exp2(_2110 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2094 * cbSceneParam._m0[78u].z)) * _2084.z) / cbSceneParam._m0[78u].z)) + _1858;
        _1937 = _2093 * _1859;
    }
    else
    {
        _1931 = _1856;
        _1933 = _1857;
        _1935 = _1858;
        _1937 = _1859;
    }
    float _1948 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1949 = _1948 == 3.0;
    float _1951 = log2(_1937);
    float _1958 = exp2(_1951 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1801 + (((1.0 - _485) * _467) * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)))))) + ((_1807 + ((_505.x * _485) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1959 = exp2(_1951 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1803 + (((1.0 - _486) * _467) * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)))))) + ((_1809 + ((_505.y * _486) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1960 = exp2(_1951 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1805 + (((1.0 - _487) * _467) * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)))))) + ((_1811 + ((_505.z * _487) * cbSceneParam._m0[72u].w)) * cbPerFrame._m0[3u].x));
    float _1969 = (_1948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1969 * (_1949 ? _1958 : (_1958 + (cbSceneParam._m0[72u].w * _1931)));
    SV_Target.y = _1969 * (_1949 ? _1959 : (_1959 + (cbSceneParam._m0[72u].w * _1933)));
    SV_Target.z = _1969 * (_1949 ? _1960 : (_1960 + (cbSceneParam._m0[72u].w * _1935)));
    SV_Target.w = cbInstanceData._m0[_1831].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1831].w;
}


