#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _917;
float _3351;
float _3352;
float _3353;
float _3354;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _264 = cbMtdParam._m0[11u].x + _257.x;
    vec4 _276 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _276.z;
    float _284 = (_276.x * 2.0) + (-1.0);
    float _286 = (_276.y * 2.0) + (-1.0);
    float _287 = dot(vec2(_284, _286), vec2(_284, _286));
    float _3363 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _293 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    vec4 _312 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _319 = fma(_293, _215, fma(_286, _207 * TANGENT.x, (_193 * _186) * _284));
    float _322 = fma(_293, _216, fma(_286, _207 * TANGENT.y, (_193 * _187) * _284));
    float _325 = fma(_293, _217, fma(_286, _207 * TANGENT.z, (_193 * _188) * _284));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3374 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _333 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3396 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3407 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3418 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _337 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _353 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _404 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _394);
    float _405 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _394);
    float _406 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _394);
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _404 * _410;
    float _412 = _405 * _410;
    float _413 = _406 * _410;
    vec4 _418 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _420 = _418.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _596 = sqrt(((_404 * _404) + (_405 * _405)) + (_406 * _406));
        float _602 = (cbMatDynParam._m0[5u].x * _596) + cbMatDynParam._m0[5u].y;
        float _3429 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _603 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _607 = (cbMatDynParam._m0[5u].z * _596) + cbMatDynParam._m0[5u].w;
        float _3440 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) - _603)) + _603) < ((_420 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _432 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _433 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _453 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _456 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _459 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    uint _472 = uint(roundEven(NORMAL.w)) * 13u;
    uint _474 = _472 + 9u;
    uint _475 = _474 + uint(cbMatDynParam._m0[0u].w);
    float _481 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_475].x;
    float _482 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_475].y;
    float _483 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_475].z;
    float _3451 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _487 = 1.0 - _337;
    float _488 = _484 * _487;
    float _489 = _485 * _487;
    float _490 = _486 * _487;
    float _495 = (_484 + (-0.039999999105930328369140625)) * _337;
    float _496 = (_485 + (-0.039999999105930328369140625)) * _337;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _337;
    float _498 = _495 + 0.039999999105930328369140625;
    float _500 = _496 + 0.039999999105930328369140625;
    float _501 = _497 + 0.039999999105930328369140625;
    vec4 _510 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _432, cbSceneParam._m0[86u].y * _433));
    float _513 = _510.x * TEXCOORD.z;
    float _514 = dot(vec3(_330, _331, _332), vec3(_411, _412, _413));
    float _517 = _514 * 2.0;
    float _521 = (_517 * _330) - _411;
    float _522 = (_517 * _331) - _412;
    float _523 = (_517 * _332) - _413;
    float _527 = abs(dot(vec3(_411, _412, _413), vec3(_330, _331, _332)));
    float _3484 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _529 = sqrt(_333);
    float _542 = exp2((_529 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_529 * 3.0));
    float _548 = (1.0 - _542) * ((_529 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _549 = _542 * _529;
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _916;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _641 = fma(_585, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577));
        float _645 = fma(_585, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577));
        float _649 = fma(_585, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577));
        float _674 = _577 + _330;
        float _675 = _581 + _331;
        float _676 = _585 + _332;
        float _686 = fma(_676, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674)) - _641;
        float _687 = fma(_676, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674)) - _645;
        float _688 = fma(_676, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674)) - _649;
        float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
        float _705 = ((_692 * _686) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_641 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_692 * _687) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_645 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_692 * _688) / cbModelParam._m0[34u].z) + ((((((_649 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_705, _706, _707), 0.0);
        float _744 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_710.x + (-0.5));
        float _746 = _744 * (_710.y + (-0.5));
        float _747 = _744 * (_710.z + (-0.5));
        float _754 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_717.x + (-0.5));
        float _756 = _754 * (_717.y + (-0.5));
        float _757 = _754 * (_717.z + (-0.5));
        float _764 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_724.x + (-0.5));
        float _766 = _764 * (_724.y + (-0.5));
        float _767 = _764 * (_724.z + (-0.5));
        float _774 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_731.x + (-0.5));
        float _776 = _774 * (_731.y + (-0.5));
        float _777 = _774 * (_731.z + (-0.5));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = _745 * 0.5;
        float _782 = _755 * 0.5;
        float _783 = _765 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _798 = (dot(vec3(_330, _331, _332), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _808 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3532 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_810 + 1.0))) + _815) * _778;
        float _825 = _746 * 0.5;
        float _826 = _756 * 0.5;
        float _827 = _766 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_330, _331, _332), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3565 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_852 + 1.0))) + _857) * _779;
        float _867 = _747 * 0.5;
        float _868 = _757 * 0.5;
        float _869 = _767 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_330, _331, _332), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3598 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_894 + 1.0))) + _899) * _780;
        _916 = _747;
        _918 = _746;
        _919 = _745;
        _920 = _757;
        _921 = _756;
        _922 = _755;
        _923 = _767;
        _924 = _766;
        _925 = _765;
        _926 = _780;
        _927 = _779;
        _928 = _778;
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
    }
    else
    {
        _916 = _917;
        _918 = _917;
        _919 = _917;
        _920 = _917;
        _921 = _917;
        _922 = _917;
        _923 = _917;
        _924 = _917;
        _925 = _917;
        _926 = _917;
        _927 = _917;
        _928 = _917;
        _929 = 0.0;
        _930 = 0.0;
        _931 = 0.0;
    }
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _960 = fma(_585, cbModelParam._m0[30u].z, fma(_581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _577));
        float _964 = fma(_585, cbModelParam._m0[31u].z, fma(_581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _577));
        float _968 = fma(_585, cbModelParam._m0[32u].z, fma(_581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _577));
        float _991 = _577 + _330;
        float _992 = _581 + _331;
        float _993 = _585 + _332;
        float _1003 = fma(_993, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991)) - _960;
        float _1004 = fma(_993, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991)) - _964;
        float _1005 = fma(_993, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991)) - _968;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_960 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_964 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[35u].z) + ((((((_968 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1059 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1026.x + (-0.5));
        float _1061 = _1059 * (_1026.y + (-0.5));
        float _1062 = _1059 * (_1026.z + (-0.5));
        float _1069 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1033.x + (-0.5));
        float _1071 = _1069 * (_1033.y + (-0.5));
        float _1072 = _1069 * (_1033.z + (-0.5));
        float _1079 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1040.x + (-0.5));
        float _1081 = _1079 * (_1040.y + (-0.5));
        float _1082 = _1079 * (_1040.z + (-0.5));
        float _1089 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1047.x + (-0.5));
        float _1091 = _1089 * (_1047.y + (-0.5));
        float _1092 = _1089 * (_1047.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_330, _331, _332), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3661 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1123 + 1.0))) + _1128) * _1093;
        float _1138 = _1061 * 0.5;
        float _1139 = _1071 * 0.5;
        float _1140 = _1081 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_330, _331, _332), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3694 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1165 + 1.0))) + _1170) * _1094;
        float _1180 = _1062 * 0.5;
        float _1181 = _1072 * 0.5;
        float _1182 = _1082 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_330, _331, _332), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3727 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1207 + 1.0))) + _1212) * _1095;
        _1229 = _1062;
        _1230 = _1061;
        _1231 = _1060;
        _1232 = _1072;
        _1233 = _1071;
        _1234 = _1070;
        _1235 = _1082;
        _1236 = _1081;
        _1237 = _1080;
        _1238 = _1095;
        _1239 = _1094;
        _1240 = _1093;
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _917;
        _1230 = _917;
        _1231 = _917;
        _1232 = _917;
        _1233 = _917;
        _1234 = _917;
        _1235 = _917;
        _1236 = _917;
        _1237 = _917;
        _1238 = _917;
        _1239 = _917;
        _1240 = _917;
        _1241 = 0.0;
        _1242 = 0.0;
        _1243 = 0.0;
    }
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _931)) + _931;
    float _1276 = fma(_1255, cbSceneParam._m0[89u].z, fma(_1254, cbSceneParam._m0[89u].y, _1253 * cbSceneParam._m0[89u].x));
    float _1279 = fma(_1255, cbSceneParam._m0[90u].z, fma(_1254, cbSceneParam._m0[90u].y, _1253 * cbSceneParam._m0[90u].x));
    float _1282 = fma(_1255, cbSceneParam._m0[91u].z, fma(_1254, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1253));
    float _1297 = _521 * 0.5;
    float _1298 = _522 * 0.5;
    float _1299 = _523 * 0.5;
    float _1300 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1303 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1306 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1340;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1313 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_916, _920, _923, _926));
        float _1317 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_918, _921, _924, _927));
        float _1321 = dot(vec4(_1297, _1298, _1299, 1.0), vec4(_919, _922, _925, _928));
        float _1328 = dot(vec4(cbModelParam._m0[39u]), vec4(_1297, _1298, _1299, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1351;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1342 = dot(vec4(cbModelParam._m0[40u]), vec4(_1297, _1298, _1299, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1355 = (_1351 * cbModelParam._m0[1u].x) + (_1340 * (1.0 - cbModelParam._m0[1u].x));
    float _1365 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _333);
    float _1366 = isnan(_1365) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1365 : min(cbModelParam._m0[25u].z, _1365));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_585, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_585, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_585, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_523, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521));
        float _1429 = fma(_523, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521));
        float _1432 = fma(_523, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1460 = frontier_phi_19_17_ladder;
        }
        float _1667;
        if (_1429 > 0.0)
        {
            _1667 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1667 = frontier_phi_28_24_ladder;
        }
        float _1921;
        if (_1432 > 0.0)
        {
            _1921 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1921 = frontier_phi_40_35_ladder;
        }
        float _1923 = isnan(_1667) ? _1460 : (isnan(_1460) ? _1667 : min(_1460, _1667));
        float _1924 = isnan(_1921) ? _1923 : (isnan(_1923) ? _1921 : min(_1923, _1921));
        float _1928 = (_1924 * _1426) + _1415;
        float _1929 = (_1924 * _1429) + _1419;
        float _1930 = (_1924 * _1432) + _1423;
        float _1931 = _1924 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1931;
        float _1935 = _1931 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 > _1935) || ((_1929 < _1933) || ((_1928 < _1933) || (_1928 > _1935))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1930, cbModelParam._m0[9u].z, fma(_1929, cbModelParam._m0[9u].y, _1928 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1930, cbModelParam._m0[10u].z, fma(_1929, cbModelParam._m0[10u].y, _1928 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1930, cbModelParam._m0[11u].z, fma(_1929, cbModelParam._m0[11u].y, _1928 * cbModelParam._m0[11u].x))), _1366);
            frontier_phi_18_40_ladder = _2058.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2058.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2058.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_18_40_ladder_2;
        _1450 = frontier_phi_18_40_ladder_1;
        _1452 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_521, _522, _523), _1366);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _333);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_585, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_585, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_585, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_523, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521));
        float _1528 = fma(_523, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521));
        float _1531 = fma(_523, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521));
        float _1672;
        if (_1525 > 0.0)
        {
            _1672 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1672 = frontier_phi_30_26_ladder;
        }
        float _1948;
        if (_1528 > 0.0)
        {
            _1948 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1948 = frontier_phi_42_37_ladder;
        }
        float _2161;
        if (_1531 > 0.0)
        {
            _2161 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2161 = frontier_phi_51_48_ladder;
        }
        float _2163 = isnan(_1948) ? _1672 : (isnan(_1672) ? _1948 : min(_1672, _1948));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1525) + _1514;
        float _2169 = (_2164 * _1528) + _1518;
        float _2170 = (_2164 * _1531) + _1522;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2171;
        float _2174 = _2171 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2170 > _2174) || ((_2170 < _2172) || ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 < _2172) || (_2168 > _2174))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2170, cbModelParam._m0[17u].z, fma(_2169, cbModelParam._m0[17u].y, _2168 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2170, cbModelParam._m0[18u].z, fma(_2169, cbModelParam._m0[18u].y, _2168 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2170, cbModelParam._m0[19u].z, fma(_2169, cbModelParam._m0[19u].y, _2168 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_27_51_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_27_51_ladder_2;
        _1552 = frontier_phi_27_51_ladder_1;
        _1554 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_521, _522, _523), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1567 = (((_548 * _498) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1569 = (((_548 * _500) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1571 = (((_548 * _501) + _549) * _513) * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    uvec4 _1590 = floatBitsToUint(cbInstanceData._m0[_472 + 5u]);
    uint _1592 = _1590.x * 14u;
    uint _1593 = _1592 + 13u;
    float _1600 = _513 + (-1.0);
    float _1605 = (cbLight._m0[_1593].x * _1600) + 1.0;
    float _1606 = (cbLight._m0[_1593].y * _1600) + 1.0;
    float _1607 = (cbLight._m0[_1593].z * _1600) + 1.0;
    float _1608 = (cbLight._m0[_1593].w * _1600) + 1.0;
    uint _1609 = _1592 + 5u;
    float _1615 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    uint _1619 = _1592 + 4u;
    float _1626 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
    uint _1630 = _1592 | 1u;
    float _1641 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_330, _331, _332));
    float _1644 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_330, _331, _332));
    float _3863 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _3874 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1649 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1651 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1658 = ((cbLight._m0[_1609].x * _1615) * _1651) + ((cbLight._m0[_1619].x * _1626) * _1649);
    float _1659 = ((_1615 * cbLight._m0[_1609].y) * _1651) + ((_1626 * cbLight._m0[_1619].y) * _1649);
    float _1660 = ((_1615 * cbLight._m0[_1609].z) * _1651) + ((_1626 * cbLight._m0[_1619].z) * _1649);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1592 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1658;
        _1679 = _1659;
        _1681 = _1660;
    }
    else
    {
        uint _1685 = _1592 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1592 + 2u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3885 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1704 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1660;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1892 = _1592 + 7u;
        float _1908 = (dot(vec3(cbLight._m0[_1592 + 3u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3901 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1911 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1722 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1677;
        _1724 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1679;
        _1726 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1681;
    }
    uint _1729 = _1592 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _333) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1592].x + _411;
    float _1745 = cbLight._m0[_1592].y + _412;
    float _1746 = cbLight._m0[_1592].z + _413;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1592].xyz));
    float _3917 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _1758 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1759 = dot(vec3(_330, _331, _332), vec3(_1751, _1752, _1753));
    float _3939 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1751, _1752, _1753));
    float _3950 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _495;
    float _1782 = 0.959999978542327880859375 - _496;
    float _1783 = 0.959999978542327880859375 - _497;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3961 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1814 = _1592 + 9u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _333) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1630].x + _411;
    float _1828 = cbLight._m0[_1630].y + _412;
    float _1829 = cbLight._m0[_1630].z + _413;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1630].xyz));
    float _3972 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1841 = dot(vec3(_330, _331, _332), vec3(_1834, _1835, _1836));
    float _3983 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1845 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1834, _1835, _1836));
    float _3994 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1849 = _1826 * _1826;
    float _1853 = ((_1844 * _1844) * (_1849 + (-1.0))) + 1.0;
    float _1860 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1867 = 1.0 - _1826;
    float _1877 = (0.5 / (((_1758 * ((_1840 * _1867) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1867) + _1826) * _1840))) * _1840;
    float _4005 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1849 / ((_1853 * _1853) * 3.141590118408203125));
    float _1889 = (((((_1860 * _1780) + _498) * cbLight._m0[_1814].x) * _1879) * _1615) + (((((_1779 * _1780) + _498) * cbLight._m0[_1729].x) * _1803) * _1626);
    float _1890 = (((((_1860 * _1782) + _500) * cbLight._m0[_1814].y) * _1879) * _1615) + (((((_1779 * _1782) + _500) * cbLight._m0[_1729].y) * _1803) * _1626);
    float _1891 = (((((_1860 * _1783) + _501) * cbLight._m0[_1814].z) * _1879) * _1615) + (((((_1779 * _1783) + _501) * cbLight._m0[_1729].z) * _1803) * _1626);
    float _1953;
    float _1955;
    float _1957;
    if (_1666)
    {
        _1953 = _1889;
        _1955 = _1890;
        _1957 = _1891;
    }
    else
    {
        uint _1959 = _1592 + 2u;
        uint _1963 = _1592 + 10u;
        float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _333) * 0.949999988079071044921875);
        float _1978 = _1977 * _1977;
        float _1979 = cbLight._m0[_1959].x + _411;
        float _1980 = cbLight._m0[_1959].y + _412;
        float _1981 = cbLight._m0[_1959].z + _413;
        float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
        float _1986 = _1985 * _1979;
        float _1987 = _1985 * _1980;
        float _1988 = _1985 * _1981;
        float _1989 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1959].xyz));
        float _4016 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1993 = dot(vec3(_330, _331, _332), vec3(_1986, _1987, _1988));
        float _4027 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1996 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1997 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_1986, _1987, _1988));
        float _4038 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2001 = _1978 * _1978;
        float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
        float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2019 = 1.0 - _1978;
        float _2029 = (0.5 / (((_1758 * ((_1992 * _2019) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2019) + _1978) * _1992))) * _1992;
        float _4049 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2031 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
        float _2032 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
        _1953 = (((((_2012 * _1780) + _498) * cbLight._m0[_1963].x) * _2031) * _2032) + _1889;
        _1955 = (((((_2012 * _1782) + _500) * cbLight._m0[_1963].y) * _2031) * _2032) + _1890;
        _1957 = (((((_2012 * _1783) + _501) * cbLight._m0[_1963].z) * _2031) * _2032) + _1891;
    }
    float _2067;
    float _2069;
    float _2071;
    if (_1684)
    {
        _2067 = _1953;
        _2069 = _1955;
        _2071 = _1957;
    }
    else
    {
        uint _2078 = _1592 + 3u;
        uint _2082 = _1592 + 11u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _333) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _411;
        float _2099 = cbLight._m0[_2078].y + _412;
        float _2100 = cbLight._m0[_2078].z + _413;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2078].xyz));
        float _4065 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2112 = dot(vec3(_330, _331, _332), vec3(_2105, _2106, _2107));
        float _4076 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4087 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
        float _2138 = 1.0 - _2097;
        float _2148 = (0.5 / (((_1758 * ((_2111 * _2138) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2138) + _2097) * _2111))) * _2111;
        float _4098 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _2067 = (((((_2131 * _1780) + _498) * cbLight._m0[_2082].x) * _2150) * _2151) + _1953;
        _2069 = (((((_2131 * _1782) + _500) * cbLight._m0[_2082].y) * _2150) * _2151) + _1955;
        _2071 = (((((_2131 * _1783) + _501) * cbLight._m0[_2082].z) * _2150) * _2151) + _1957;
    }
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    if (_1590.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _433) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _432) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
        }
        else
        {
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            uint _2575 = 0u;
            uint _2584;
            bool _2585;
            for (;;)
            {
                _2584 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2575 << 2u)) >> 2u)).x;
                _2585 = _2584 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2585)
                {
                    frontier_phi_68_pred = _2571;
                    frontier_phi_68_pred_1 = _2574;
                    frontier_phi_68_pred_2 = _2573;
                    frontier_phi_68_pred_3 = _2572;
                    frontier_phi_68_pred_4 = _2570;
                    frontier_phi_68_pred_5 = _2569;
                }
                else
                {
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    uint _2720;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2584;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    for (;;)
                    {
                        uint _2724 = uint(findLSB(_2720)) + (_2575 << 5u);
                        uint _2721 = (_2720 + 4294967295u) & _2720;
                        uint _2726 = _2724 * 48u;
                        vec4 _2740 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2746 = (_2724 * 48u) + 4u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2765 = (_2724 * 48u) + 8u;
                        vec3 _2776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x));
                        float _2780 = _2740.x - _2227;
                        float _2781 = _2740.y - _2228;
                        float _2782 = _2740.z - _2229;
                        float _2783 = dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782));
                        float _2786 = inversesqrt(_2783);
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2790 = dot(vec3(_453, _456, _459), vec3(_2787, _2788, _2789));
                        float _2795 = 1.0 - (_2783 * _2740.w);
                        float _4124 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2797 = sqrt(_2783) * _2759.w;
                        float _2800 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2790) + _2801;
                        float _2807 = _2797 * _2797;
                        float _2811 = ((isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))) * _2796) / ((_2807 * 0.699999988079071044921875) + 1.0);
                        float _2815 = (-0.0) - _2227;
                        float _2816 = (-0.0) - _2228;
                        float _2817 = (-0.0) - _2229;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2832 = exp2(log2(1.0 / ((_2807 * 3.5) + 5.0)) * 0.25);
                        float _2833 = 1.0 - _529;
                        float _2840 = sqrt(1.0 - ((1.0 - (_2833 * _2833)) * (1.0 - (_2832 * _2832))));
                        float _2841 = _2840 * _2840;
                        float _2842 = _2841 * _2841;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2853 = dot(vec3(_453, _456, _459), vec3(_2822, _2823, _2824));
                        float _4140 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2856 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2857 = dot(vec3(_453, _456, _459), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845));
                        float _4151 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2864 = ((_2860 * _2860) * (_2842 + (-1.0))) + 1.0;
                        float _2865 = _2800 * _2841;
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2790) + _2866;
                        float _4162 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2871 = 1.0 - _2841;
                        float _2881 = (0.5 / (((_2870 * ((_2856 * _2871) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2870 * _2871) + _2841) * _2856))) * _2870;
                        float _4173 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2892 = (((_2842 * 3.1415927410125732421875) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) / ((_2864 * _2864) * ((_2807 * 2.1991131305694580078125) + 3.141590118408203125))) * _2796;
                        _2644 = (_2811 * _2759.x) + _2717;
                        _2645 = (_2811 * _2759.y) + _2718;
                        _2646 = (_2811 * _2759.z) + _2719;
                        _2641 = (_2892 * _2776.x) + _2714;
                        _2642 = (_2892 * _2776.y) + _2715;
                        _2643 = (_2892 * _2776.z) + _2716;
                        if (_2721 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2721;
                        }
                    }
                    frontier_phi_68_pred = _2643;
                    frontier_phi_68_pred_1 = _2646;
                    frontier_phi_68_pred_2 = _2645;
                    frontier_phi_68_pred_3 = _2644;
                    frontier_phi_68_pred_4 = _2642;
                    frontier_phi_68_pred_5 = _2641;
                }
                _2413 = frontier_phi_68_pred;
                _2419 = frontier_phi_68_pred_1;
                _2417 = frontier_phi_68_pred_2;
                _2415 = frontier_phi_68_pred_3;
                _2411 = frontier_phi_68_pred_4;
                _2409 = frontier_phi_68_pred_5;
                uint _2576 = _2575 + 1u;
                if (_2576 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2569 = _2409;
                    _2570 = _2411;
                    _2571 = _2413;
                    _2572 = _2415;
                    _2573 = _2417;
                    _2574 = _2419;
                    _2575 = _2576;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
        }
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.z;
        uint _2425 = (_2423 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2425) & _2273) == 0u)
        {
            _2537 = _2408;
            _2539 = _2410;
            _2541 = _2412;
            _2543 = _2414;
            _2545 = _2416;
            _2547 = _2418;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2563 = _2562 * _2227;
            float _2564 = _2562 * _2228;
            float _2565 = _2562 * _2229;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2425 < ((_2423 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2697 = _2408;
                float _2698 = _2410;
                float _2699 = _2412;
                float _2700 = _2414;
                float _2701 = _2416;
                float _2702 = _2418;
                uint _2703 = _2425;
                uint _2712;
                bool _2713;
                for (;;)
                {
                    _2712 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                    _2713 = _2712 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2713)
                    {
                        frontier_phi_79_pred = _2702;
                        frontier_phi_79_pred_1 = _2701;
                        frontier_phi_79_pred_2 = _2700;
                        frontier_phi_79_pred_3 = _2699;
                        frontier_phi_79_pred_4 = _2698;
                        frontier_phi_79_pred_5 = _2697;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        uint _2925 = _2712;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        vec3 _2979;
                        vec4 _2995;
                        vec4 _3011;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2936 = ((_2703 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2936 * 40u) + 8u;
                            _2979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x));
                            uint _2982 = (_2936 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2998 = (_2936 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3014 = (_2936 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2936 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_2229, _3046.z, fma(_2228, _3046.y, _3046.x * _2227)) + _3046.w;
                            _3059 = !((fma(_2229, _3027.z, fma(_2228, _3027.y, _3027.x * _2227)) + _3027.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2951.x - _2227;
                                float _3087 = _2951.y - _2228;
                                float _3088 = _2951.z - _2229;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2952 * _2952));
                                float _4184 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3104 = sqrt(_3089) * _2967.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_453, _456, _459))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_2229, _2995.z, fma(_2228, _2995.y, _2995.x * _2227)) + _2995.w) / _3058;
                                float _3118 = (fma(_2229, _3011.z, fma(_2228, _3011.y, _3011.x * _2227)) + _3011.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4200 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _529;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2563;
                                float _3148 = _3094 - _2564;
                                float _3149 = _3095 - _2565;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_453, _456, _459), vec3((-0.0) - _2563, (-0.0) - _2564, (-0.0) - _2565));
                                float _4211 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3161 = dot(vec3(_453, _456, _459), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4222 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_453, _456, _459), vec3(_3093, _3094, _3095))) + _3170;
                                float _4233 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4244 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3124 * _2967.z;
                                frontier_phi_85_pred_1 = _3124 * _2967.y;
                                frontier_phi_85_pred_2 = _3124 * _2967.x;
                                frontier_phi_85_pred_3 = _3198 * _2979.z;
                                frontier_phi_85_pred_4 = _3198 * _2979.y;
                                frontier_phi_85_pred_5 = _3198 * _2979.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3207 = frontier_phi_85_pred;
                            _3206 = frontier_phi_85_pred_1;
                            _3205 = frontier_phi_85_pred_2;
                            _3204 = frontier_phi_85_pred_3;
                            _3203 = frontier_phi_85_pred_4;
                            _3202 = frontier_phi_85_pred_5;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            _2908 = _3204 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2911;
                        frontier_phi_79_pred_1 = _2910;
                        frontier_phi_79_pred_2 = _2909;
                        frontier_phi_79_pred_3 = _2908;
                        frontier_phi_79_pred_4 = _2907;
                        frontier_phi_79_pred_5 = _2906;
                    }
                    _2548 = frontier_phi_79_pred;
                    _2546 = frontier_phi_79_pred_1;
                    _2544 = frontier_phi_79_pred_2;
                    _2542 = frontier_phi_79_pred_3;
                    _2540 = frontier_phi_79_pred_4;
                    _2538 = frontier_phi_79_pred_5;
                    uint _2704 = _2703 + 1u;
                    if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2697 = _2538;
                        _2698 = _2540;
                        _2699 = _2542;
                        _2700 = _2544;
                        _2701 = _2546;
                        _2702 = _2548;
                        _2703 = _2704;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2544;
                frontier_phi_60_61_ladder_1 = _2548;
                frontier_phi_60_61_ladder_2 = _2546;
                frontier_phi_60_61_ladder_3 = _2542;
                frontier_phi_60_61_ladder_4 = _2540;
                frontier_phi_60_61_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_60_61_ladder = _2414;
                frontier_phi_60_61_ladder_1 = _2418;
                frontier_phi_60_61_ladder_2 = _2416;
                frontier_phi_60_61_ladder_3 = _2412;
                frontier_phi_60_61_ladder_4 = _2410;
                frontier_phi_60_61_ladder_5 = _2408;
            }
            _2537 = frontier_phi_60_61_ladder_5;
            _2539 = frontier_phi_60_61_ladder_4;
            _2541 = frontier_phi_60_61_ladder_3;
            _2543 = frontier_phi_60_61_ladder;
            _2545 = frontier_phi_60_61_ladder_2;
            _2547 = frontier_phi_60_61_ladder_1;
        }
        float _2552 = isnan(1.0) ? _513 : (isnan(_513) ? 1.0 : min(_513, 1.0));
        _2285 = (_2552 * _2543) + _1722;
        _2287 = (_2552 * _2545) + _1724;
        _2289 = (_2552 * _2547) + _1726;
        _2291 = ((_2537 * _498) * _2552) + _2067;
        _2293 = ((_2539 * _500) * _2552) + _2069;
        _2295 = ((_2541 * _501) * _2552) + _2071;
    }
    else
    {
        _2285 = _1722;
        _2287 = _1724;
        _2289 = _1726;
        _2291 = _2067;
        _2293 = _2069;
        _2295 = _2071;
    }
    uint _2301 = _474 + uint(cbMatDynParam._m0[0u].w);
    float _2309 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _312.x) * cbInstanceData._m0[_2301].x;
    float _2312 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _312.y) * cbInstanceData._m0[_2301].y;
    float _2315 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _312.z) * cbInstanceData._m0[_2301].z;
    float _4260 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4271 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4282 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2332 = (((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2285 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _513))) + ((_2291 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + _2309;
    float _2334 = (_2312 + ((_2293 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2287 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _513)));
    float _2336 = (_2315 + ((_2295 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1355)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2289 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _513)));
    float _2337 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2338 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2345 = cbMtdParam._m0[2u].x * _2309;
    float _2346 = cbMtdParam._m0[2u].y * _2312;
    float _2347 = cbMtdParam._m0[2u].z * _2315;
    float _4308 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2349 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    uint _2350 = _472 + 6u;
    float _2358 = _432 / cbSceneParam._m0[86u].x;
    float _2359 = _433 / cbSceneParam._m0[86u].y;
    vec4 _2373 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, (log2((isnan(cbSceneParam._m0[77u].w) ? _353 : (isnan(_353) ? cbSceneParam._m0[77u].w : min(_353, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2375 = _2373.x;
    float _2376 = _2373.y;
    float _2377 = _2373.z;
    float _2378 = _2373.w;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_353 > cbSceneParam._m0[78u].w)
    {
        float _2433 = isnan(_353) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _353 : min(cbSceneParam._m0[80u].w, _353));
        float _2434 = _2433 / _353;
        float _2445 = _2434 * _404;
        float _2446 = _405 * _2434;
        float _2447 = (-0.0) - _2446;
        float _2448 = _2434 * _406;
        float _2450 = (cbSceneParam._m0[77u].w * _2447) / _2433;
        float _2451 = _2450 + cbSceneParam._m0[79u].w;
        float _2452 = cbSceneParam._m0[79u].w - _2446;
        float _2458 = sqrt(((_2445 * _2445) + (_2446 * _2446)) + (_2448 * _2448));
        float _2461 = (1.0 - (cbSceneParam._m0[77u].w / _2433)) * _2458;
        float _2466 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2468 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2654;
        if (abs((_2447 - _2450) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2654 = ((((_2451 > 0.0) ? exp2(_2466 * _2451) : (2.0 - exp2(_2468 * _2451))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2461;
        }
        else
        {
            float _2598 = 1.0 / cbSceneParam._m0[80u].x;
            float _2599 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : max(_2451, _2452));
            float _2600 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : min(_2451, _2452));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            _2654 = ((abs(_2458 / _2447) * cbSceneParam._m0[80u].y) * ((((_2609 - _2610) * 2.0) - ((exp2(_2466 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0)))) - exp2(_2466 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0))))) * _2598)) - ((exp2(_2468 * _2609) - exp2(_2468 * _2610)) * _2598))) + (_2461 * cbSceneParam._m0[80u].z);
        }
        vec4 _2656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, 1.0), 0.0);
        float _2665 = exp2((_2654 * (-1.44269502162933349609375)) * (1.0 - _2656.w));
        float _2666 = log2(_2665);
        float _2682 = log2(_2378);
        _2470 = (exp2(_2682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].x)) * _2656.x) / cbSceneParam._m0[78u].x)) + _2375;
        _2472 = (exp2(_2682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].y)) * _2656.y) / cbSceneParam._m0[78u].y)) + _2376;
        _2474 = (exp2(_2682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2666 * cbSceneParam._m0[78u].z)) * _2656.z) / cbSceneParam._m0[78u].z)) + _2377;
        _2476 = _2665 * _2378;
    }
    else
    {
        _2470 = _2375;
        _2472 = _2376;
        _2474 = _2377;
        _2476 = _2378;
    }
    bool _2692;
    vec4 _2486;
    vec4 _2508;
    float _2510;
    float _2514;
    float _2515;
    float _2516;
    float _2519;
    float _2522;
    float _2525;
    float _2526;
    bool _2536;
    for (;;)
    {
        _2486 = cbMatDynParam._m0[0u];
        float _2488 = roundEven(_2486.y);
        bool _2489 = _2488 == 3.0;
        float _2490 = log2(_2476);
        float _2494 = exp2(_2490 * cbSceneParam._m0[78u].x);
        float _2495 = exp2(_2490 * cbSceneParam._m0[78u].y);
        float _2496 = exp2(_2490 * cbSceneParam._m0[78u].z);
        float _2497 = _2494 * _2337;
        float _2498 = _2495 * _2338;
        float _2499 = _2496 * _2339;
        float _2506 = _420 + (-0.5);
        _2508 = cbMtdParam._m0[1u];
        _2510 = _2508.y * _2506;
        float _2513 = (_2488 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2514 = _2513 * (_2489 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2470)));
        _2515 = _2513 * (_2489 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
        _2516 = _2513 * (_2489 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = ((_2345 * _2349) * _2494) * _2513;
        _2522 = ((_2346 * _2349) * _2495) * _2513;
        _2525 = ((_2347 * _2349) * _2496) * _2513;
        _2526 = _2506 * 0.999000012874603271484375;
        _2536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2536)
        {
            if ((cbInstanceData._m0[_472 + 7u].x + _2526) < 0.5)
            {
                _2692 = true;
                break;
            }
        }
        uint _2633 = _474 + uint(_2486.w);
        if ((cbInstanceData._m0[_2633].w < 1.0) && ((cbInstanceData._m0[_2633].w + _2526) < 0.5))
        {
            _2692 = true;
            break;
        }
        if ((_2510 + 1.0) < _2508.x)
        {
            _2692 = true;
            break;
        }
        _2692 = false;
        break;
    }
    float _2897;
    if (_2692)
    {
        discard_state = true;
        _2897 = 0.0;
    }
    else
    {
        _2897 = cbInstanceData._m0[_2350].w;
    }
    SV_Target.x = _2514;
    SV_Target.y = _2515;
    SV_Target.z = _2516;
    SV_Target.w = _2897;
    SV_Target_1.x = _2519;
    SV_Target_1.y = _2522;
    SV_Target_1.z = _2525;
    SV_Target_1.w = cbInstanceData._m0[_2350].w;
    discard_exit();
}


