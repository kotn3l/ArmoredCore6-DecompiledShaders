#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3261 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))));
    vec4 _293 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _300 = fma(_274, _211, fma(_267, _203 * TANGENT.x, (_189 * _182) * _265));
    float _303 = fma(_274, _212, fma(_267, _203 * TANGENT.y, (_189 * _183) * _265));
    float _306 = fma(_274, _213, fma(_267, _203 * TANGENT.z, (_189 * _184) * _265));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _3272 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _314 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3294 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3305 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3316 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _318 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_313, cbSceneParam._m0[5u].z, fma(_312, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _311));
    float _425 = fma(_313, cbSceneParam._m0[6u].z, fma(_312, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _311));
    float _428 = fma(_313, cbSceneParam._m0[7u].z, fma(_312, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _311));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = _441 + 9u;
    uint _444 = _443 + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3327 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _456 = 1.0 - _318;
    float _457 = _453 * _456;
    float _458 = _454 * _456;
    float _459 = _455 * _456;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _318;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _318;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _318;
    float _467 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _482 = _479.x * TEXCOORD.z;
    float _483 = dot(vec3(_311, _312, _313), vec3(_392, _393, _394));
    float _486 = _483 * 2.0;
    float _490 = (_486 * _311) - _392;
    float _491 = (_486 * _312) - _393;
    float _492 = (_486 * _313) - _394;
    float _496 = abs(dot(vec3(_392, _393, _394), vec3(_311, _312, _313)));
    float _3360 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = sqrt(_314);
    float _511 = exp2((_498 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_498 * 3.0));
    float _517 = (1.0 - _511) * ((_498 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _518 = _511 * _498;
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _585 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _589 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _614 = _546 + _311;
        float _615 = _550 + _312;
        float _616 = _554 + _313;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_311, _312, _313), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3408 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_311, _312, _313), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3441 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_311, _312, _313), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3474 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _901 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _905 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _928 = _546 + _311;
        float _929 = _550 + _312;
        float _930 = _554 + _313;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_311, _312, _313), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3537 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_311, _312, _313), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3570 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_311, _312, _313), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3603 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_492, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490));
        float _1366 = fma(_492, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490));
        float _1369 = fma(_492, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1397 = frontier_phi_16_14_ladder;
        }
        float _1625;
        if (_1366 > 0.0)
        {
            _1625 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1625 = frontier_phi_25_21_ladder;
        }
        float _1882;
        if (_1369 > 0.0)
        {
            _1882 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1882 = frontier_phi_37_32_ladder;
        }
        float _1884 = isnan(_1625) ? _1397 : (isnan(_1397) ? _1625 : min(_1397, _1625));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1363) + _1352;
        float _1890 = (_1885 * _1366) + _1356;
        float _1891 = (_1885 * _1369) + _1360;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_15_37_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_15_37_ladder_2;
        _1387 = frontier_phi_15_37_ladder_1;
        _1389 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_490, _491, _492), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_492, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490));
        float _1465 = fma(_492, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490));
        float _1468 = fma(_492, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490));
        float _1630;
        if (_1462 > 0.0)
        {
            _1630 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1630 = frontier_phi_27_23_ladder;
        }
        float _1909;
        if (_1465 > 0.0)
        {
            _1909 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1909 = frontier_phi_39_34_ladder;
        }
        float _2122;
        if (_1468 > 0.0)
        {
            _2122 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2122 = frontier_phi_48_45_ladder;
        }
        float _2124 = isnan(_1909) ? _1630 : (isnan(_1630) ? _1909 : min(_1630, _1909));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1462) + _1451;
        float _2130 = (_2125 * _1465) + _1455;
        float _2131 = (_2125 * _1468) + _1459;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2132;
        float _2135 = _2132 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2131 > _2135) || ((_2131 < _2133) || ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 < _2133) || (_2129 > _2135))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2131, cbModelParam._m0[17u].z, fma(_2130, cbModelParam._m0[17u].y, _2129 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2131, cbModelParam._m0[18u].z, fma(_2130, cbModelParam._m0[18u].y, _2129 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2131, cbModelParam._m0[19u].z, fma(_2130, cbModelParam._m0[19u].y, _2129 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_24_48_ladder = _2364.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2364.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2364.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_24_48_ladder_2;
        _1489 = frontier_phi_24_48_ladder_1;
        _1491 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_490, _491, _492), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_517 * _467) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_517 * _469) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_517 * _470) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    vec4 _1525 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_400, _401));
    float _1527 = _1525.w;
    float _1539 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1527);
    float _1540 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1527);
    float _1541 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1527);
    uvec4 _1545 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1547 = _1545.x * 14u;
    uint _1548 = _1547 + 13u;
    float _1555 = _482 + (-1.0);
    float _1560 = (cbLight._m0[_1548].x * _1555) + 1.0;
    float _1561 = (cbLight._m0[_1548].y * _1555) + 1.0;
    float _1562 = (cbLight._m0[_1548].z * _1555) + 1.0;
    float _1563 = (cbLight._m0[_1548].w * _1555) + 1.0;
    uint _1564 = _1547 + 5u;
    float _1570 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1574 = _1547 + 4u;
    float _1584 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1588 = _1547 | 1u;
    float _1599 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_311, _312, _313));
    float _1602 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_311, _312, _313));
    float _3739 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _3750 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1609 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.3183098733425140380859375;
    float _1616 = ((cbLight._m0[_1564].x * _1570) * _1609) + (((cbLight._m0[_1574].x * _1539) * _1584) * _1607);
    float _1617 = ((_1570 * cbLight._m0[_1564].y) * _1609) + (((cbLight._m0[_1574].y * _1540) * _1584) * _1607);
    float _1618 = ((_1570 * cbLight._m0[_1564].z) * _1609) + (((cbLight._m0[_1574].z * _1541) * _1584) * _1607);
    uvec4 _1622 = floatBitsToUint(cbLight._m0[_1547 + 12u]);
    bool _1624 = _1622.x == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1624)
    {
        _1635 = _1616;
        _1637 = _1617;
        _1639 = _1618;
    }
    else
    {
        uint _1643 = _1547 + 6u;
        float _1659 = (dot(vec3(cbLight._m0[_1547 + 2u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3761 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1662 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1635 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1616;
        _1637 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1617;
        _1639 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1618;
    }
    bool _1642 = _1622.y == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1642)
    {
        _1680 = _1635;
        _1682 = _1637;
        _1684 = _1639;
    }
    else
    {
        uint _1853 = _1547 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1547 + 3u].xyz), vec3(_311, _312, _313)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3777 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1872 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _1680 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1635;
        _1682 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1637;
        _1684 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1639;
    }
    uint _1687 = _1547 + 8u;
    float _1700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1547].w)) * _314) * 0.949999988079071044921875);
    float _1701 = _1700 * _1700;
    float _1702 = cbLight._m0[_1547].x + _392;
    float _1703 = cbLight._m0[_1547].y + _393;
    float _1704 = cbLight._m0[_1547].z + _394;
    float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
    float _1709 = _1708 * _1702;
    float _1710 = _1708 * _1703;
    float _1711 = _1708 * _1704;
    float _1712 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1547].xyz));
    float _3793 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1715 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _1716 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1717 = dot(vec3(_311, _312, _313), vec3(_1709, _1710, _1711));
    float _3815 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1547].xyz), vec3(_1709, _1710, _1711));
    float _3826 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1725 = _1701 * _1701;
    float _1729 = ((_1720 * _1720) * (_1725 + (-1.0))) + 1.0;
    float _1737 = exp2(log2(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * 5.0);
    float _1738 = 0.959999978542327880859375 - _464;
    float _1740 = 0.959999978542327880859375 - _465;
    float _1741 = 0.959999978542327880859375 - _466;
    float _1748 = 1.0 - _1701;
    float _1759 = (0.5 / (((_1716 * ((_1715 * _1748) + _1701)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1748) + _1701) * _1715))) * _1715;
    float _3837 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1761 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1725 / ((_1729 * _1729) * 3.141590118408203125));
    uint _1775 = _1547 + 9u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _314) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1588].x + _392;
    float _1789 = cbLight._m0[_1588].y + _393;
    float _1790 = cbLight._m0[_1588].z + _394;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1588].xyz));
    float _3848 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1802 = dot(vec3(_311, _312, _313), vec3(_1795, _1796, _1797));
    float _3859 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1806 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1795, _1796, _1797));
    float _3870 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1810 = _1787 * _1787;
    float _1814 = ((_1805 * _1805) * (_1810 + (-1.0))) + 1.0;
    float _1821 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
    float _1828 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1716 * ((_1801 * _1828) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1828) + _1787) * _1801))) * _1801;
    float _3881 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1810 / ((_1814 * _1814) * 3.141590118408203125));
    float _1850 = (((((_1821 * _1738) + _467) * cbLight._m0[_1775].x) * _1840) * _1570) + ((((cbLight._m0[_1687].x * _1539) * ((_1737 * _1738) + _467)) * _1761) * _1584);
    float _1851 = (((((_1821 * _1740) + _469) * cbLight._m0[_1775].y) * _1840) * _1570) + ((((cbLight._m0[_1687].y * _1540) * ((_1737 * _1740) + _469)) * _1761) * _1584);
    float _1852 = (((((_1821 * _1741) + _470) * cbLight._m0[_1775].z) * _1840) * _1570) + ((((cbLight._m0[_1687].z * _1541) * ((_1737 * _1741) + _470)) * _1761) * _1584);
    float _1914;
    float _1916;
    float _1918;
    if (_1624)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1547 + 2u;
        uint _1924 = _1547 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _314) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _392;
        float _1941 = cbLight._m0[_1920].y + _393;
        float _1942 = cbLight._m0[_1920].z + _394;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_1920].xyz));
        float _3892 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1954 = dot(vec3(_311, _312, _313), vec3(_1947, _1948, _1949));
        float _3903 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3914 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0);
        float _1980 = 1.0 - _1939;
        float _1990 = (0.5 / (((_1716 * ((_1953 * _1980) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1980) + _1939) * _1953))) * _1953;
        float _3925 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1992 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1993 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1914 = (((((_1973 * _1738) + _467) * cbLight._m0[_1924].x) * _1992) * _1993) + _1850;
        _1916 = (((((_1973 * _1740) + _469) * cbLight._m0[_1924].y) * _1992) * _1993) + _1851;
        _1918 = (((((_1973 * _1741) + _470) * cbLight._m0[_1924].z) * _1992) * _1993) + _1852;
    }
    float _2028;
    float _2030;
    float _2032;
    if (_1642)
    {
        _2028 = _1914;
        _2030 = _1916;
        _2032 = _1918;
    }
    else
    {
        uint _2039 = _1547 + 3u;
        uint _2043 = _1547 + 11u;
        float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _314) * 0.949999988079071044921875);
        float _2058 = _2057 * _2057;
        float _2059 = cbLight._m0[_2039].x + _392;
        float _2060 = cbLight._m0[_2039].y + _393;
        float _2061 = cbLight._m0[_2039].z + _394;
        float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
        float _2066 = _2065 * _2059;
        float _2067 = _2065 * _2060;
        float _2068 = _2065 * _2061;
        float _2069 = dot(vec3(_311, _312, _313), vec3(cbLight._m0[_2039].xyz));
        float _3941 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2073 = dot(vec3(_311, _312, _313), vec3(_2066, _2067, _2068));
        float _3952 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2077 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2066, _2067, _2068));
        float _3963 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2081 = _2058 * _2058;
        float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
        float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0);
        float _2099 = 1.0 - _2058;
        float _2109 = (0.5 / (((_1716 * ((_2072 * _2099) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _2099) + _2058) * _2072))) * _2072;
        float _3974 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
        _2028 = (((((_2092 * _1738) + _467) * cbLight._m0[_2043].x) * _2111) * _2112) + _1914;
        _2030 = (((((_2092 * _1740) + _469) * cbLight._m0[_2043].y) * _2111) * _2112) + _1916;
        _2032 = (((((_2092 * _1741) + _470) * cbLight._m0[_2043].z) * _2111) * _2112) + _1918;
    }
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_1545.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
        }
        else
        {
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            uint _2528 = 0u;
            uint _2537;
            bool _2538;
            for (;;)
            {
                _2537 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2528 << 2u)) >> 2u)).x;
                _2538 = _2537 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2538)
                {
                    frontier_phi_63_pred = _2527;
                    frontier_phi_63_pred_1 = _2526;
                    frontier_phi_63_pred_2 = _2525;
                    frontier_phi_63_pred_3 = _2524;
                    frontier_phi_63_pred_4 = _2523;
                    frontier_phi_63_pred_5 = _2522;
                }
                else
                {
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    uint _2652;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2537;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    for (;;)
                    {
                        uint _2656 = uint(findLSB(_2652)) + (_2528 << 5u);
                        uint _2653 = (_2652 + 4294967295u) & _2652;
                        uint _2658 = _2656 * 48u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2678 = (_2656 * 48u) + 4u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2697 = (_2656 * 48u) + 8u;
                        vec3 _2708 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x));
                        float _2712 = _2672.x - _2188;
                        float _2713 = _2672.y - _2189;
                        float _2714 = _2672.z - _2190;
                        float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                        float _2718 = inversesqrt(_2715);
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2722 = dot(vec3(_422, _425, _428), vec3(_2719, _2720, _2721));
                        float _2727 = 1.0 - (_2715 * _2672.w);
                        float _4000 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2729 = sqrt(_2715) * _2691.w;
                        float _2732 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2722) + _2733;
                        float _2739 = _2729 * _2729;
                        float _2743 = ((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2728) / ((_2739 * 0.699999988079071044921875) + 1.0);
                        float _2747 = (-0.0) - _2188;
                        float _2748 = (-0.0) - _2189;
                        float _2749 = (-0.0) - _2190;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2764 = exp2(log2(1.0 / ((_2739 * 3.5) + 5.0)) * 0.25);
                        float _2765 = 1.0 - _498;
                        float _2772 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * (1.0 - (_2764 * _2764))));
                        float _2773 = _2772 * _2772;
                        float _2774 = _2773 * _2773;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_422, _425, _428), vec3(_2754, _2755, _2756));
                        float _4016 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2789 = dot(vec3(_422, _425, _428), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _4027 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2796 = ((_2792 * _2792) * (_2774 + (-1.0))) + 1.0;
                        float _2797 = _2732 * _2773;
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2722) + _2798;
                        float _4038 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2803 = 1.0 - _2773;
                        float _2813 = (0.5 / (((_2802 * ((_2788 * _2803) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2803) + _2773) * _2788))) * _2802;
                        float _4049 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2824 = (((_2774 * 3.1415927410125732421875) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) / ((_2796 * _2796) * ((_2739 * 2.1991131305694580078125) + 3.141590118408203125))) * _2728;
                        _2581 = (_2743 * _2691.x) + _2649;
                        _2582 = (_2743 * _2691.y) + _2650;
                        _2583 = (_2743 * _2691.z) + _2651;
                        _2578 = (_2824 * _2708.x) + _2646;
                        _2579 = (_2824 * _2708.y) + _2647;
                        _2580 = (_2824 * _2708.z) + _2648;
                        if (_2653 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2653;
                        }
                    }
                    frontier_phi_63_pred = _2583;
                    frontier_phi_63_pred_1 = _2582;
                    frontier_phi_63_pred_2 = _2581;
                    frontier_phi_63_pred_3 = _2580;
                    frontier_phi_63_pred_4 = _2579;
                    frontier_phi_63_pred_5 = _2578;
                }
                _2380 = frontier_phi_63_pred;
                _2378 = frontier_phi_63_pred_1;
                _2376 = frontier_phi_63_pred_2;
                _2374 = frontier_phi_63_pred_3;
                _2372 = frontier_phi_63_pred_4;
                _2370 = frontier_phi_63_pred_5;
                uint _2529 = _2528 + 1u;
                if (_2529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2522 = _2370;
                    _2523 = _2372;
                    _2524 = _2374;
                    _2525 = _2376;
                    _2526 = _2378;
                    _2527 = _2380;
                    _2528 = _2529;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
        }
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.z;
        uint _2386 = (_2384 >> 8u) & 15u;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((4294967295u << _2386) & _2234) == 0u)
        {
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
            _2496 = _2375;
            _2498 = _2377;
            _2500 = _2379;
        }
        else
        {
            float _2515 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2516 = _2515 * _2188;
            float _2517 = _2515 * _2189;
            float _2518 = _2515 * _2190;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2386 < ((_2384 >> 12u) & 15u))
            {
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2629 = _2369;
                float _2630 = _2371;
                float _2631 = _2373;
                float _2632 = _2375;
                float _2633 = _2377;
                float _2634 = _2379;
                uint _2635 = _2386;
                uint _2644;
                bool _2645;
                for (;;)
                {
                    _2644 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                    _2645 = _2644 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2645)
                    {
                        frontier_phi_69_pred = _2634;
                        frontier_phi_69_pred_1 = _2633;
                        frontier_phi_69_pred_2 = _2632;
                        frontier_phi_69_pred_3 = _2631;
                        frontier_phi_69_pred_4 = _2630;
                        frontier_phi_69_pred_5 = _2629;
                    }
                    else
                    {
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _2842 = _2629;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        uint _2848 = _2644;
                        uint _2849;
                        vec4 _2874;
                        float _2875;
                        vec4 _2890;
                        vec3 _2902;
                        vec4 _2918;
                        vec4 _2934;
                        float _2981;
                        bool _2982;
                        for (;;)
                        {
                            uint _2859 = ((_2635 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2848));
                            _2849 = (_2848 + 4294967295u) & _2848;
                            uint _2861 = _2859 * 40u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2875 = _2874.w;
                            uint _2877 = (_2859 * 40u) + 4u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2859 * 40u) + 8u;
                            _2902 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x));
                            uint _2905 = (_2859 * 40u) + 16u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2859 * 40u) + 20u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2859 * 40u) + 24u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2956 = (_2859 * 40u) + 28u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2981 = fma(_2190, _2969.z, fma(_2189, _2969.y, _2969.x * _2188)) + _2969.w;
                            _2982 = !((fma(_2190, _2950.z, fma(_2189, _2950.y, _2950.x * _2188)) + _2950.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2982)
                            {
                                float _3009 = _2874.x - _2188;
                                float _3010 = _2874.y - _2189;
                                float _3011 = _2874.z - _2190;
                                float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                                float _3015 = inversesqrt(_3012);
                                float _3016 = _3015 * _3009;
                                float _3017 = _3015 * _3010;
                                float _3018 = _3015 * _3011;
                                float _3022 = 1.0 - (_3012 / (_2875 * _2875));
                                float _4060 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3023 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3027 = sqrt(_3012) * _2890.w;
                                float _3029 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                                float _3030 = _3029 * _3029;
                                float _3033 = ((1.0 - _3030) * dot(vec3(_3016, _3017, _3018), vec3(_422, _425, _428))) + _3030;
                                float _3036 = _3027 * _3027;
                                float _3040 = (fma(_2190, _2918.z, fma(_2189, _2918.y, _2918.x * _2188)) + _2918.w) / _2981;
                                float _3041 = (fma(_2190, _2934.z, fma(_2189, _2934.y, _2934.x * _2188)) + _2934.w) / _2981;
                                float _3045 = 1.0 - dot(vec2(_3040, _3041), vec2(_3040, _3041));
                                float _4076 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3046 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3047 = _3046 * (((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3023) / ((_3036 * 0.699999988079071044921875) + 1.0));
                                float _3059 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                                float _3060 = 1.0 - _498;
                                float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                                float _3068 = _3067 * _3067;
                                float _3069 = _3068 * _3068;
                                float _3070 = _3016 - _2516;
                                float _3071 = _3017 - _2517;
                                float _3072 = _3018 - _2518;
                                float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                                float _3080 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2516, (-0.0) - _2517, (-0.0) - _2518));
                                float _4087 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3083 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3084 = dot(vec3(_422, _425, _428), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                                float _4098 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3087 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                                float _3092 = _3029 * _3068;
                                float _3093 = _3092 * _3092;
                                float _3099 = ((1.0 - _3093) * dot(vec3(_422, _425, _428), vec3(_3016, _3017, _3018))) + _3093;
                                float _4109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3101 = 1.0 - _3068;
                                float _3111 = (0.5 / (((_3100 * ((_3083 * _3101) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3068) * _3083))) * _3100;
                                float _4120 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3121 = (_3046 * _3023) * (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) / ((_3091 * _3091) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3047 * _2890.z;
                                frontier_phi_75_pred_1 = _3047 * _2890.y;
                                frontier_phi_75_pred_2 = _3047 * _2890.x;
                                frontier_phi_75_pred_3 = _3121 * _2902.z;
                                frontier_phi_75_pred_4 = _3121 * _2902.y;
                                frontier_phi_75_pred_5 = _3121 * _2902.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3130 = frontier_phi_75_pred;
                            _3129 = frontier_phi_75_pred_1;
                            _3128 = frontier_phi_75_pred_2;
                            _3127 = frontier_phi_75_pred_3;
                            _3126 = frontier_phi_75_pred_4;
                            _3125 = frontier_phi_75_pred_5;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            if (_2849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2849;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2834;
                        frontier_phi_69_pred_1 = _2833;
                        frontier_phi_69_pred_2 = _2832;
                        frontier_phi_69_pred_3 = _2831;
                        frontier_phi_69_pred_4 = _2830;
                        frontier_phi_69_pred_5 = _2829;
                    }
                    _2501 = frontier_phi_69_pred;
                    _2499 = frontier_phi_69_pred_1;
                    _2497 = frontier_phi_69_pred_2;
                    _2495 = frontier_phi_69_pred_3;
                    _2493 = frontier_phi_69_pred_4;
                    _2491 = frontier_phi_69_pred_5;
                    uint _2636 = _2635 + 1u;
                    if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2629 = _2491;
                        _2630 = _2493;
                        _2631 = _2495;
                        _2632 = _2497;
                        _2633 = _2499;
                        _2634 = _2501;
                        _2635 = _2636;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2501;
                frontier_phi_57_58_ladder_1 = _2499;
                frontier_phi_57_58_ladder_2 = _2497;
                frontier_phi_57_58_ladder_3 = _2495;
                frontier_phi_57_58_ladder_4 = _2493;
                frontier_phi_57_58_ladder_5 = _2491;
            }
            else
            {
                frontier_phi_57_58_ladder = _2379;
                frontier_phi_57_58_ladder_1 = _2377;
                frontier_phi_57_58_ladder_2 = _2375;
                frontier_phi_57_58_ladder_3 = _2373;
                frontier_phi_57_58_ladder_4 = _2371;
                frontier_phi_57_58_ladder_5 = _2369;
            }
            _2490 = frontier_phi_57_58_ladder_5;
            _2492 = frontier_phi_57_58_ladder_4;
            _2494 = frontier_phi_57_58_ladder_3;
            _2496 = frontier_phi_57_58_ladder_2;
            _2498 = frontier_phi_57_58_ladder_1;
            _2500 = frontier_phi_57_58_ladder;
        }
        float _2505 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2246 = (_2505 * _2496) + _1680;
        _2248 = (_2505 * _2498) + _1682;
        _2250 = (_2505 * _2500) + _1684;
        _2252 = ((_2490 * _467) * _2505) + _2028;
        _2254 = ((_2492 * _469) * _2505) + _2030;
        _2256 = ((_2494 * _470) * _2505) + _2032;
    }
    else
    {
        _2246 = _1680;
        _2248 = _1682;
        _2250 = _1684;
        _2252 = _2028;
        _2254 = _2030;
        _2256 = _2032;
    }
    uint _2262 = _443 + uint(cbMatDynParam._m0[0u].w);
    float _2270 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _293.x) * cbInstanceData._m0[_2262].x;
    float _2273 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _293.y) * cbInstanceData._m0[_2262].y;
    float _2276 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _293.z) * cbInstanceData._m0[_2262].z;
    float _4136 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4147 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4158 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _2293 = (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2246 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _482))) + ((_2252 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + _2270;
    float _2295 = (_2273 + ((_2254 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2248 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _482)));
    float _2297 = (_2276 + ((_2256 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2250 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _482)));
    float _4184 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2310 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    uint _2311 = _441 + 6u;
    float _2319 = _400 / cbSceneParam._m0[86u].x;
    float _2320 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2334 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2336 = _2334.x;
    float _2337 = _2334.y;
    float _2338 = _2334.z;
    float _2339 = _2334.w;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2394 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2395 = _2394 / _334;
        float _2406 = _2395 * _385;
        float _2407 = _386 * _2395;
        float _2408 = (-0.0) - _2407;
        float _2409 = _2395 * _387;
        float _2411 = (cbSceneParam._m0[77u].w * _2408) / _2394;
        float _2412 = _2411 + cbSceneParam._m0[79u].w;
        float _2413 = cbSceneParam._m0[79u].w - _2407;
        float _2419 = sqrt(((_2406 * _2406) + (_2407 * _2407)) + (_2409 * _2409));
        float _2422 = (1.0 - (cbSceneParam._m0[77u].w / _2394)) * _2419;
        float _2427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2591;
        if (abs((_2408 - _2411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2591 = ((((_2412 > 0.0) ? exp2(_2427 * _2412) : (2.0 - exp2(_2429 * _2412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2422;
        }
        else
        {
            float _2551 = 1.0 / cbSceneParam._m0[80u].x;
            float _2552 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : max(_2412, _2413));
            float _2553 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : min(_2412, _2413));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            _2591 = ((abs(_2419 / _2408) * cbSceneParam._m0[80u].y) * ((((_2562 - _2563) * 2.0) - ((exp2(_2427 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0)))) - exp2(_2427 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))))) * _2551)) - ((exp2(_2429 * _2562) - exp2(_2429 * _2563)) * _2551))) + (_2422 * cbSceneParam._m0[80u].z);
        }
        vec4 _2593 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2319, _2320, 1.0), 0.0);
        float _2602 = exp2((_2591 * (-1.44269502162933349609375)) * (1.0 - _2593.w));
        float _2603 = log2(_2602);
        float _2619 = log2(_2339);
        _2431 = (exp2(_2619 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].x)) * _2593.x) / cbSceneParam._m0[78u].x)) + _2336;
        _2433 = (exp2(_2619 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].y)) * _2593.y) / cbSceneParam._m0[78u].y)) + _2337;
        _2435 = (exp2(_2619 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2603 * cbSceneParam._m0[78u].z)) * _2593.z) / cbSceneParam._m0[78u].z)) + _2338;
        _2437 = _2602 * _2339;
    }
    else
    {
        _2431 = _2336;
        _2433 = _2337;
        _2435 = _2338;
        _2437 = _2339;
    }
    float _2449 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2450 = _2449 == 3.0;
    float _2451 = log2(_2437);
    float _2455 = exp2(_2451 * cbSceneParam._m0[78u].x);
    float _2456 = exp2(_2451 * cbSceneParam._m0[78u].y);
    float _2457 = exp2(_2451 * cbSceneParam._m0[78u].z);
    float _2458 = _2455 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2459 = _2456 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2460 = _2457 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2469 = (_2449 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2469 * (_2450 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.y = _2469 * (_2450 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2433)));
    SV_Target.z = _2469 * (_2450 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2435)));
    SV_Target.w = cbInstanceData._m0[_2311].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2270) * _2310) * _2455) * _2469;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2273) * _2310) * _2456) * _2469;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2276) * _2310) * _2457) * _2469;
    SV_Target_1.w = cbInstanceData._m0[_2311].w;
}


