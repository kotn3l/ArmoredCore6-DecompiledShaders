#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _859;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _259.z;
    float _267 = (_259.x * 2.0) + (-1.0);
    float _269 = (_259.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3522 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    vec4 _295 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _302 = fma(_276, _213, fma(_269, _205 * TANGENT.x, (_191 * _184) * _267));
    float _305 = fma(_276, _214, fma(_269, _205 * TANGENT.y, (_191 * _185) * _267));
    float _308 = fma(_276, _215, fma(_269, _205 * TANGENT.z, (_191 * _186) * _267));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3533 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _316 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3555 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3566 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3577 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _320 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _427 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _430 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = _443 + 9u;
    uint _446 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3588 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _458 = 1.0 - _320;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _320;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _320;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _320;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = dot(vec3(_313, _314, _315), vec3(_394, _395, _396));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _313) - _394;
    float _493 = (_488 * _314) - _395;
    float _494 = (_488 * _315) - _396;
    float _498 = abs(dot(vec3(_394, _395, _396), vec3(_313, _314, _315)));
    float _3621 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_316);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _858;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _583 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _587 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _591 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _616 = _548 + _313;
        float _617 = _552 + _314;
        float _618 = _556 + _315;
        float _628 = fma(_618, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616)) - _583;
        float _629 = fma(_618, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616)) - _587;
        float _630 = fma(_618, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616)) - _591;
        float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
        float _647 = ((_634 * _628) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_583 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_634 * _629) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_587 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_634 * _630) / cbModelParam._m0[34u].z) + ((((((_591 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_647, _648, _649), 0.0);
        float _686 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_652.x + (-0.5));
        float _688 = _686 * (_652.y + (-0.5));
        float _689 = _686 * (_652.z + (-0.5));
        float _696 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_659.x + (-0.5));
        float _698 = _696 * (_659.y + (-0.5));
        float _699 = _696 * (_659.z + (-0.5));
        float _706 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_666.x + (-0.5));
        float _708 = _706 * (_666.y + (-0.5));
        float _709 = _706 * (_666.z + (-0.5));
        float _716 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_673.x + (-0.5));
        float _718 = _716 * (_673.y + (-0.5));
        float _719 = _716 * (_673.z + (-0.5));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = _687 * 0.5;
        float _724 = _697 * 0.5;
        float _725 = _707 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _740 = (dot(vec3(_313, _314, _315), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _750 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3669 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_752 + 1.0))) + _757) * _720;
        float _767 = _688 * 0.5;
        float _768 = _698 * 0.5;
        float _769 = _708 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _783 = (dot(vec3(_313, _314, _315), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _792 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3702 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_794 + 1.0))) + _799) * _721;
        float _809 = _689 * 0.5;
        float _810 = _699 * 0.5;
        float _811 = _709 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_313, _314, _315), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3735 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_836 + 1.0))) + _841) * _722;
        _858 = _689;
        _860 = _688;
        _861 = _687;
        _862 = _699;
        _863 = _698;
        _864 = _697;
        _865 = _709;
        _866 = _708;
        _867 = _707;
        _868 = _722;
        _869 = _721;
        _870 = _720;
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
    }
    else
    {
        _858 = _859;
        _860 = _859;
        _861 = _859;
        _862 = _859;
        _863 = _859;
        _864 = _859;
        _865 = _859;
        _866 = _859;
        _867 = _859;
        _868 = _859;
        _869 = _859;
        _870 = _859;
        _871 = 0.0;
        _872 = 0.0;
        _873 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _903 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _907 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _930 = _548 + _313;
        float _931 = _552 + _314;
        float _932 = _556 + _315;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_313, _314, _315), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3798 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_313, _314, _315), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3831 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_313, _314, _315), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3864 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _859;
        _1169 = _859;
        _1170 = _859;
        _1171 = _859;
        _1172 = _859;
        _1173 = _859;
        _1174 = _859;
        _1175 = _859;
        _1176 = _859;
        _1177 = _859;
        _1178 = _859;
        _1179 = _859;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = _494 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _862, _865, _868));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_860, _863, _866, _869));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_861, _864, _867, _870));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1368 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1371 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1399 = frontier_phi_16_14_ladder;
        }
        float _1574;
        if (_1368 > 0.0)
        {
            _1574 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_21_ladder;
        }
        float _1870;
        if (_1371 > 0.0)
        {
            _1870 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1870 = frontier_phi_37_32_ladder;
        }
        float _1872 = isnan(_1574) ? _1399 : (isnan(_1399) ? _1574 : min(_1399, _1574));
        float _1873 = isnan(_1870) ? _1872 : (isnan(_1872) ? _1870 : min(_1872, _1870));
        float _1877 = (_1873 * _1365) + _1354;
        float _1878 = (_1873 * _1368) + _1358;
        float _1879 = (_1873 * _1371) + _1362;
        float _1880 = _1873 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1880;
        float _1884 = _1880 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 > _1884) || ((_1878 < _1882) || ((_1877 < _1882) || (_1877 > _1884))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1879, cbModelParam._m0[9u].z, fma(_1878, cbModelParam._m0[9u].y, _1877 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1879, cbModelParam._m0[10u].z, fma(_1878, cbModelParam._m0[10u].y, _1877 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1879, cbModelParam._m0[11u].z, fma(_1878, cbModelParam._m0[11u].y, _1877 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_15_37_ladder = _2024.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2024.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2024.z * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_15_37_ladder_1;
        _1389 = frontier_phi_15_37_ladder;
        _1391 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1467 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1470 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1579;
        if (_1464 > 0.0)
        {
            _1579 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_27_23_ladder;
        }
        float _1897;
        if (_1467 > 0.0)
        {
            _1897 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1897 = frontier_phi_39_34_ladder;
        }
        float _2235;
        if (_1470 > 0.0)
        {
            _2235 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2235 = frontier_phi_49_46_ladder;
        }
        float _2237 = isnan(_1897) ? _1579 : (isnan(_1579) ? _1897 : min(_1579, _1897));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1464) + _1453;
        float _2243 = (_2238 * _1467) + _1457;
        float _2244 = (_2238 * _1470) + _1461;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2244, cbModelParam._m0[17u].z, fma(_2243, cbModelParam._m0[17u].y, _2242 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2244, cbModelParam._m0[18u].z, fma(_2243, cbModelParam._m0[18u].y, _2242 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2244, cbModelParam._m0[19u].z, fma(_2243, cbModelParam._m0[19u].y, _2242 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_24_49_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_24_49_ladder_2;
        _1491 = frontier_phi_24_49_ladder_1;
        _1493 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1506 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1566 = _1553 / _1565;
    float _1567 = _1557 / _1565;
    float _1568 = _1561 / _1565;
    float _1715;
    float _1716;
    float _1717;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1595 = ((uint(_1568 > cbSceneParam._m0[59u].y) + uint(_1568 > cbSceneParam._m0[59u].x)) + uint(_1568 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1596 = _1595 + 43u;
        uint _1604 = _1595 + 44u;
        uint _1612 = _1595 + 45u;
        uint _1620 = _1595 + 46u;
        float _1631 = fma(_1565, cbSceneParam._m0[_1596].w, fma(_1561, cbSceneParam._m0[_1596].z, fma(_1557, cbSceneParam._m0[_1596].y, _1553 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1565, cbSceneParam._m0[_1604].w, fma(_1561, cbSceneParam._m0[_1604].z, fma(_1557, cbSceneParam._m0[_1604].y, _1553 * cbSceneParam._m0[_1604].x)));
        float _1643 = fma(_1565, cbSceneParam._m0[_1620].w, fma(_1561, cbSceneParam._m0[_1620].z, fma(_1557, cbSceneParam._m0[_1620].y, _1553 * cbSceneParam._m0[_1620].x)));
        float _1648 = cbSceneParam._m0[33u].z * _1643;
        float _1650 = cbSceneParam._m0[33u].w * _1643;
        float _1653 = fma(_1565, cbSceneParam._m0[_1612].w, fma(_1561, cbSceneParam._m0[_1612].z, fma(_1557, cbSceneParam._m0[_1612].y, _1553 * cbSceneParam._m0[_1612].x))) / _1643;
        float _1701 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
        float _3990 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1708 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1631) / _1643, (_1650 + _1635) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 + _1631) / _1643, (_1635 - _1648) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1648) / _1643, (_1635 - _1650) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1650) / _1643, (_1648 + _1635) / _1643), _1653), 0.0)).x), vec4(0.25)));
        _1715 = 1.0 - (_1708 * cbSceneParam._m0[34u].x);
        _1716 = 1.0 - (_1708 * cbSceneParam._m0[34u].y);
        _1717 = 1.0 - (_1708 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1715 = 1.0;
        _1716 = 1.0;
        _1717 = 1.0;
    }
    float _1781;
    float _1783;
    float _1785;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1769 = fma(_1565, cbSceneParam._m0[63u].w, fma(_1561, cbSceneParam._m0[63u].z, fma(_1557, cbSceneParam._m0[63u].y, _1553 * cbSceneParam._m0[63u].x)));
        float _1770 = fma(_1565, cbSceneParam._m0[60u].w, fma(_1561, cbSceneParam._m0[60u].z, fma(_1557, cbSceneParam._m0[60u].y, _1553 * cbSceneParam._m0[60u].x))) / _1769;
        float _1771 = fma(_1565, cbSceneParam._m0[61u].w, fma(_1561, cbSceneParam._m0[61u].z, fma(_1557, cbSceneParam._m0[61u].y, _1553 * cbSceneParam._m0[61u].x))) / _1769;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1770 >= cbSceneParam._m0[64u].x) && (_1771 >= cbSceneParam._m0[64u].y)) && (_1770 <= cbSceneParam._m0[64u].z)) && (_1771 <= cbSceneParam._m0[64u].w))
        {
            float _1910 = fma(_1565, cbSceneParam._m0[62u].w, fma(_1561, cbSceneParam._m0[62u].z, fma(_1557, cbSceneParam._m0[62u].y, _1553 * cbSceneParam._m0[62u].x))) / _1769;
            float _1914 = isnan(cbSceneParam._m0[41u].w) ? _1910 : (isnan(_1910) ? cbSceneParam._m0[41u].w : max(_1910, cbSceneParam._m0[41u].w));
            float _1957 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
            float _4006 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
            float _1964 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1770, cbSceneParam._m0[33u].w + _1771), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1770, _1771 - cbSceneParam._m0[33u].z), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].z, _1771 - cbSceneParam._m0[33u].w), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1771), _1914), 0.0)).x), vec4(0.25)));
            float _1968 = 1.0 - (_1964 * cbSceneParam._m0[34u].x);
            float _1969 = 1.0 - (_1964 * cbSceneParam._m0[34u].y);
            float _1970 = 1.0 - (_1964 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1969) ? _1716 : (isnan(_1716) ? _1969 : min(_1716, _1969));
            frontier_phi_36_35_ladder_1 = isnan(_1970) ? _1717 : (isnan(_1717) ? _1970 : min(_1717, _1970));
            frontier_phi_36_35_ladder_2 = isnan(_1968) ? _1715 : (isnan(_1715) ? _1968 : min(_1715, _1968));
        }
        else
        {
            frontier_phi_36_35_ladder = _1716;
            frontier_phi_36_35_ladder_1 = _1717;
            frontier_phi_36_35_ladder_2 = _1715;
        }
        _1781 = frontier_phi_36_35_ladder_2;
        _1783 = frontier_phi_36_35_ladder;
        _1785 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1781 = _1715;
        _1783 = _1716;
        _1785 = _1717;
    }
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _484 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1829 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1833 = _1792 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_313, _314, _315));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_313, _314, _315));
    float _4042 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _4053 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1809].x * _1815) * _1854) + (((cbLight._m0[_1819].x * _1781) * _1829) * _1852);
    float _1862 = ((_1815 * cbLight._m0[_1809].y) * _1854) + (((cbLight._m0[_1819].y * _1783) * _1829) * _1852);
    float _1863 = ((_1815 * cbLight._m0[_1809].z) * _1854) + (((cbLight._m0[_1819].z * _1785) * _1829) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1869)
    {
        _1971 = _1861;
        _1973 = _1862;
        _1975 = _1863;
    }
    else
    {
        uint _1979 = _1792 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4064 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1998 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1861;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1862;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1863;
    }
    bool _1978 = _1867.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1978)
    {
        _2033 = _1971;
        _2035 = _1973;
        _2037 = _1975;
    }
    else
    {
        uint _2206 = _1792 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4080 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2225 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2033 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1971;
        _2035 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _1973;
        _2037 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _1975;
    }
    uint _2040 = _1792 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _316) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1792].x + _394;
    float _2056 = cbLight._m0[_1792].y + _395;
    float _2057 = cbLight._m0[_1792].z + _396;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1792].xyz));
    float _4096 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2069 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2070 = dot(vec3(_313, _314, _315), vec3(_2062, _2063, _2064));
    float _4118 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2062, _2063, _2064));
    float _4129 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _2091 = 0.959999978542327880859375 - _466;
    float _2093 = 0.959999978542327880859375 - _467;
    float _2094 = 0.959999978542327880859375 - _468;
    float _2101 = 1.0 - _2054;
    float _2112 = (0.5 / (((_2069 * ((_2068 * _2101) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2101) + _2054) * _2068))) * _2068;
    float _4140 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2128 = _1792 + 9u;
    float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _316) * 0.949999988079071044921875);
    float _2140 = _2139 * _2139;
    float _2141 = cbLight._m0[_1833].x + _394;
    float _2142 = cbLight._m0[_1833].y + _395;
    float _2143 = cbLight._m0[_1833].z + _396;
    float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
    float _2148 = _2147 * _2141;
    float _2149 = _2147 * _2142;
    float _2150 = _2147 * _2143;
    float _2151 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1833].xyz));
    float _4151 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2155 = dot(vec3(_313, _314, _315), vec3(_2148, _2149, _2150));
    float _4162 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2148, _2149, _2150));
    float _4173 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2140 * _2140;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2181 = 1.0 - _2140;
    float _2191 = (0.5 / (((_2069 * ((_2154 * _2181) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2181) + _2140) * _2154))) * _2154;
    float _4184 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    float _2203 = (((((_2174 * _2091) + _469) * cbLight._m0[_2128].x) * _2193) * _1815) + ((((cbLight._m0[_2040].x * _1781) * ((_2090 * _2091) + _469)) * _2114) * _1829);
    float _2204 = (((((_2174 * _2093) + _471) * cbLight._m0[_2128].y) * _2193) * _1815) + ((((cbLight._m0[_2040].y * _1783) * ((_2090 * _2093) + _471)) * _2114) * _1829);
    float _2205 = (((((_2174 * _2094) + _472) * cbLight._m0[_2128].z) * _2193) * _1815) + ((((cbLight._m0[_2040].z * _1785) * ((_2090 * _2094) + _472)) * _2114) * _1829);
    float _2261;
    float _2263;
    float _2265;
    if (_1869)
    {
        _2261 = _2203;
        _2263 = _2204;
        _2265 = _2205;
    }
    else
    {
        uint _2267 = _1792 + 2u;
        uint _2271 = _1792 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _316) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _394;
        float _2288 = cbLight._m0[_2267].y + _395;
        float _2289 = cbLight._m0[_2267].z + _396;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2267].xyz));
        float _4195 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2301 = dot(vec3(_313, _314, _315), vec3(_2294, _2295, _2296));
        float _4206 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4217 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2327 = 1.0 - _2286;
        float _2337 = (0.5 / (((_2069 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2327) + _2286) * _2300))) * _2300;
        float _4228 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2261 = (((((_2320 * _2091) + _469) * cbLight._m0[_2271].x) * _2339) * _2340) + _2203;
        _2263 = (((((_2320 * _2093) + _471) * cbLight._m0[_2271].y) * _2339) * _2340) + _2204;
        _2265 = (((((_2320 * _2094) + _472) * cbLight._m0[_2271].z) * _2339) * _2340) + _2205;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1978)
    {
        _2371 = _2261;
        _2373 = _2263;
        _2375 = _2265;
    }
    else
    {
        uint _2382 = _1792 + 3u;
        uint _2386 = _1792 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _316) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _394;
        float _2403 = cbLight._m0[_2382].y + _395;
        float _2404 = cbLight._m0[_2382].z + _396;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2382].xyz));
        float _4244 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2416 = dot(vec3(_313, _314, _315), vec3(_2409, _2410, _2411));
        float _4255 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4266 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2069 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2442) + _2401) * _2415))) * _2415;
        float _4277 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2371 = (((((_2435 * _2091) + _469) * cbLight._m0[_2386].x) * _2454) * _2455) + _2261;
        _2373 = (((((_2435 * _2093) + _471) * cbLight._m0[_2386].y) * _2454) * _2455) + _2263;
        _2375 = (((((_2435 * _2094) + _472) * cbLight._m0[_2386].z) * _2454) * _2455) + _2265;
    }
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    if (_1790.y == 0u)
    {
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2477)));
        float _2498 = (log2(_1568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2791)
                {
                    frontier_phi_68_pred = _2780;
                    frontier_phi_68_pred_1 = _2779;
                    frontier_phi_68_pred_2 = _2778;
                    frontier_phi_68_pred_3 = _2776;
                    frontier_phi_68_pred_4 = _2775;
                    frontier_phi_68_pred_5 = _2777;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2790;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2781 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _1566;
                        float _2966 = _2925.y - _1567;
                        float _2967 = _2925.z - _1568;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_424, _427, _430), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4303 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _1566;
                        float _3001 = (-0.0) - _1567;
                        float _3002 = (-0.0) - _1568;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3016 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3017 = 1.0 - _500;
                        float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                        float _3025 = _3024 * _3024;
                        float _3026 = _3025 * _3025;
                        float _3027 = _3007 + _2972;
                        float _3028 = _3008 + _2973;
                        float _3029 = _3009 + _2974;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3037 = dot(vec3(_424, _427, _430), vec3(_3007, _3008, _3009));
                        float _4319 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3041 = dot(vec3(_424, _427, _430), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                        float _4330 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                        float _3049 = _2985 * _3025;
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _2975) + _3050;
                        float _4341 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3055 = 1.0 - _3025;
                        float _3065 = (0.5 / (((_3054 * ((_3040 * _3055) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3025) * _3040))) * _3054;
                        float _4352 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3076 = (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3048 * _3048) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2834 = (_2996 * _2944.x) + _2902;
                        _2835 = (_2996 * _2944.y) + _2903;
                        _2836 = (_2996 * _2944.z) + _2904;
                        _2831 = (_3076 * _2961.x) + _2899;
                        _2832 = (_3076 * _2961.y) + _2900;
                        _2833 = (_3076 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_68_pred = _2836;
                    frontier_phi_68_pred_1 = _2835;
                    frontier_phi_68_pred_2 = _2834;
                    frontier_phi_68_pred_3 = _2832;
                    frontier_phi_68_pred_4 = _2831;
                    frontier_phi_68_pred_5 = _2833;
                }
                _2633 = frontier_phi_68_pred;
                _2631 = frontier_phi_68_pred_1;
                _2629 = frontier_phi_68_pred_2;
                _2625 = frontier_phi_68_pred_3;
                _2623 = frontier_phi_68_pred_4;
                _2627 = frontier_phi_68_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2623;
                    _2776 = _2625;
                    _2777 = _2627;
                    _2778 = _2629;
                    _2779 = _2631;
                    _2780 = _2633;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2639) & _2508) == 0u)
        {
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
            float _2769 = _2768 * _1566;
            float _2770 = _2768 * _1567;
            float _2771 = _2768 * _1568;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2882 = _2622;
                float _2883 = _2624;
                float _2884 = _2626;
                float _2885 = _2628;
                float _2886 = _2630;
                float _2887 = _2632;
                uint _2888 = _2639;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2898)
                    {
                        frontier_phi_74_pred = _2884;
                        frontier_phi_74_pred_1 = _2883;
                        frontier_phi_74_pred_2 = _2882;
                        frontier_phi_74_pred_3 = _2887;
                        frontier_phi_74_pred_4 = _2886;
                        frontier_phi_74_pred_5 = _2885;
                    }
                    else
                    {
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3094 = _2882;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        float _3097 = _2885;
                        float _3098 = _2886;
                        float _3099 = _2887;
                        uint _3100 = _2897;
                        uint _3101;
                        vec4 _3126;
                        float _3127;
                        vec4 _3142;
                        vec3 _3154;
                        vec4 _3170;
                        vec4 _3186;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3111 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3100));
                            _3101 = (_3100 + 4294967295u) & _3100;
                            uint _3113 = _3111 * 40u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            _3127 = _3126.w;
                            uint _3129 = (_3111 * 40u) + 4u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3144 = (_3111 * 40u) + 8u;
                            _3154 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x));
                            uint _3157 = (_3111 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3111 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3111 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3111 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_1568, _3221.z, fma(_1567, _3221.y, _3221.x * _1566)) + _3221.w;
                            _3234 = !((fma(_1568, _3202.z, fma(_1567, _3202.y, _3202.x * _1566)) + _3202.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3126.x - _1566;
                                float _3262 = _3126.y - _1567;
                                float _3263 = _3126.z - _1568;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3127 * _3127));
                                float _4363 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3279 = sqrt(_3264) * _3142.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_424, _427, _430))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_1568, _3170.z, fma(_1567, _3170.y, _3170.x * _1566)) + _3170.w) / _3233;
                                float _3293 = (fma(_1568, _3186.z, fma(_1567, _3186.y, _3186.x * _1566)) + _3186.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4379 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _500;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2769;
                                float _3323 = _3269 - _2770;
                                float _3324 = _3270 - _2771;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4390 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3336 = dot(vec3(_424, _427, _430), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4401 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_424, _427, _430), vec3(_3268, _3269, _3270))) + _3345;
                                float _4412 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4423 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3373 * _3154.z;
                                frontier_phi_80_pred_1 = _3373 * _3154.y;
                                frontier_phi_80_pred_2 = _3373 * _3154.x;
                                frontier_phi_80_pred_3 = _3299 * _3142.z;
                                frontier_phi_80_pred_4 = _3299 * _3142.y;
                                frontier_phi_80_pred_5 = _3299 * _3142.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3379 = frontier_phi_80_pred;
                            _3378 = frontier_phi_80_pred_1;
                            _3377 = frontier_phi_80_pred_2;
                            _3382 = frontier_phi_80_pred_3;
                            _3381 = frontier_phi_80_pred_4;
                            _3380 = frontier_phi_80_pred_5;
                            _3084 = _3380 + _3097;
                            _3085 = _3381 + _3098;
                            _3086 = _3382 + _3099;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            _3083 = _3379 + _3096;
                            if (_3101 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3101;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3083;
                        frontier_phi_74_pred_1 = _3082;
                        frontier_phi_74_pred_2 = _3081;
                        frontier_phi_74_pred_3 = _3086;
                        frontier_phi_74_pred_4 = _3085;
                        frontier_phi_74_pred_5 = _3084;
                    }
                    _2748 = frontier_phi_74_pred;
                    _2746 = frontier_phi_74_pred_1;
                    _2744 = frontier_phi_74_pred_2;
                    _2754 = frontier_phi_74_pred_3;
                    _2752 = frontier_phi_74_pred_4;
                    _2750 = frontier_phi_74_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2744;
                        _2883 = _2746;
                        _2884 = _2748;
                        _2885 = _2750;
                        _2886 = _2752;
                        _2887 = _2754;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2752;
                frontier_phi_62_63_ladder_1 = _2750;
                frontier_phi_62_63_ladder_2 = _2748;
                frontier_phi_62_63_ladder_3 = _2754;
                frontier_phi_62_63_ladder_4 = _2746;
                frontier_phi_62_63_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_62_63_ladder = _2630;
                frontier_phi_62_63_ladder_1 = _2628;
                frontier_phi_62_63_ladder_2 = _2626;
                frontier_phi_62_63_ladder_3 = _2632;
                frontier_phi_62_63_ladder_4 = _2624;
                frontier_phi_62_63_ladder_5 = _2622;
            }
            _2743 = frontier_phi_62_63_ladder_5;
            _2745 = frontier_phi_62_63_ladder_4;
            _2747 = frontier_phi_62_63_ladder_2;
            _2749 = frontier_phi_62_63_ladder_1;
            _2751 = frontier_phi_62_63_ladder;
            _2753 = frontier_phi_62_63_ladder_3;
        }
        float _2758 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2520 = (_2758 * _2749) + _2033;
        _2522 = (_2758 * _2751) + _2035;
        _2524 = (_2758 * _2753) + _2037;
        _2526 = ((_2743 * _469) * _2758) + _2371;
        _2528 = ((_2745 * _471) * _2758) + _2373;
        _2530 = ((_2747 * _472) * _2758) + _2375;
    }
    else
    {
        _2520 = _2033;
        _2522 = _2035;
        _2524 = _2037;
        _2526 = _2371;
        _2528 = _2373;
        _2530 = _2375;
    }
    uint _2536 = _445 + uint(cbMatDynParam._m0[0u].w);
    float _2544 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _295.x) * cbInstanceData._m0[_2536].x;
    float _2547 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _295.y) * cbInstanceData._m0[_2536].y;
    float _2550 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _295.z) * cbInstanceData._m0[_2536].z;
    float _4439 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4450 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4461 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _2567 = (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2520 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _484))) + ((_2526 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + _2544;
    float _2569 = (_2547 + ((_2528 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2522 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _484)));
    float _2571 = (_2550 + ((_2530 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1294)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2524 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _484)));
    float _4487 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2584 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    uint _2585 = _443 + 6u;
    float _2593 = _402 / cbSceneParam._m0[86u].x;
    float _2594 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2648 = _2647 / _336;
        float _2659 = _2648 * _387;
        float _2660 = _388 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2662 = _2648 * _389;
        float _2664 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2660;
        float _2672 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2844;
        if (abs((_2661 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2844 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2806 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2844 = ((abs(_2672 / _2661) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2682 * _2815) - exp2(_2682 * _2816)) * _2804))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2846 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2855 = exp2((_2844 * (-1.44269502162933349609375)) * (1.0 - _2846.w));
        float _2856 = log2(_2855);
        float _2872 = log2(_2613);
        _2684 = (exp2(_2872 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].x)) * _2846.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2686 = (exp2(_2872 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].y)) * _2846.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2688 = (exp2(_2872 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2856 * cbSceneParam._m0[78u].z)) * _2846.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2690 = _2855 * _2613;
    }
    else
    {
        _2684 = _2610;
        _2686 = _2611;
        _2688 = _2612;
        _2690 = _2613;
    }
    float _2702 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2703 = _2702 == 3.0;
    float _2704 = log2(_2690);
    float _2708 = exp2(_2704 * cbSceneParam._m0[78u].x);
    float _2709 = exp2(_2704 * cbSceneParam._m0[78u].y);
    float _2710 = exp2(_2704 * cbSceneParam._m0[78u].z);
    float _2711 = _2708 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)));
    float _2712 = _2709 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)));
    float _2713 = _2710 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0)));
    float _2722 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2722 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.y = _2722 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.z = _2722 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2544) * _2584) * _2708) * _2722;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2547) * _2584) * _2709) * _2722;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2550) * _2584) * _2710) * _2722;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


