#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _855;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3235 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))));
    vec4 _291 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _298 = fma(_272, _209, fma(_265, _201 * TANGENT.x, (_187 * _180) * _263));
    float _301 = fma(_272, _210, fma(_265, _201 * TANGENT.y, (_187 * _181) * _263));
    float _304 = fma(_272, _211, fma(_265, _201 * TANGENT.z, (_187 * _182) * _263));
    float _308 = inversesqrt(dot(vec3(_298, _301, _304), vec3(_298, _301, _304)));
    float _309 = _308 * _298;
    float _310 = _308 * _301;
    float _311 = _308 * _304;
    float _3246 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _312 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3268 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3279 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3290 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _316 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_311, cbSceneParam._m0[5u].z, fma(_310, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _309));
    float _423 = fma(_311, cbSceneParam._m0[6u].z, fma(_310, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _309));
    float _426 = fma(_311, cbSceneParam._m0[7u].z, fma(_310, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _309));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _441 = _439 + 9u;
    uint _442 = _441 + uint(cbMatDynParam._m0[0u].w);
    float _448 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_442].x;
    float _449 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_442].y;
    float _450 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_442].z;
    float _3301 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _454 = 1.0 - _316;
    float _455 = _451 * _454;
    float _456 = _452 * _454;
    float _457 = _453 * _454;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _316;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _316;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _316;
    float _465 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _480 = _477.x * TEXCOORD.z;
    float _481 = dot(vec3(_309, _310, _311), vec3(_390, _391, _392));
    float _484 = _481 * 2.0;
    float _488 = (_484 * _309) - _390;
    float _489 = (_484 * _310) - _391;
    float _490 = (_484 * _311) - _392;
    float _494 = abs(dot(vec3(_390, _391, _392), vec3(_309, _310, _311)));
    float _3334 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = sqrt(_312);
    float _509 = exp2((_496 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_496 * 3.0));
    float _515 = (1.0 - _509) * ((_496 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _516 = _509 * _496;
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_552, cbModelParam._m0[26u].z, fma(_548, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544));
        float _583 = fma(_552, cbModelParam._m0[27u].z, fma(_548, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544));
        float _587 = fma(_552, cbModelParam._m0[28u].z, fma(_548, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544));
        float _612 = _544 + _309;
        float _613 = _548 + _310;
        float _614 = _552 + _311;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_309, _310, _311), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3382 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_309, _310, _311), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3415 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_309, _310, _311), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3448 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_552, cbModelParam._m0[30u].z, fma(_548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _544));
        float _899 = fma(_552, cbModelParam._m0[31u].z, fma(_548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _544));
        float _903 = fma(_552, cbModelParam._m0[32u].z, fma(_548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _544));
        float _926 = _544 + _309;
        float _927 = _548 + _310;
        float _928 = _552 + _311;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_309, _310, _311), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3511 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_309, _310, _311), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3544 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_309, _310, _311), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3577 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _855;
        _1165 = _855;
        _1166 = _855;
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _858, _861, _864));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_856, _859, _862, _865));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_857, _860, _863, _866));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_552, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_552, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_552, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_490, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488));
        float _1364 = fma(_490, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488));
        float _1367 = fma(_490, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1395 = frontier_phi_16_14_ladder;
        }
        float _1602;
        if (_1364 > 0.0)
        {
            _1602 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1602 = frontier_phi_25_21_ladder;
        }
        float _1856;
        if (_1367 > 0.0)
        {
            _1856 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1856 = frontier_phi_37_32_ladder;
        }
        float _1858 = isnan(_1602) ? _1395 : (isnan(_1395) ? _1602 : min(_1395, _1602));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1361) + _1350;
        float _1864 = (_1859 * _1364) + _1354;
        float _1865 = (_1859 * _1367) + _1358;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_15_37_ladder = _1993.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1993.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1993.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_15_37_ladder_2;
        _1385 = frontier_phi_15_37_ladder_1;
        _1387 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_488, _489, _490), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_552, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_552, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_552, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_490, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488));
        float _1463 = fma(_490, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488));
        float _1466 = fma(_490, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488));
        float _1607;
        if (_1460 > 0.0)
        {
            _1607 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1607 = frontier_phi_27_23_ladder;
        }
        float _1883;
        if (_1463 > 0.0)
        {
            _1883 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1883 = frontier_phi_39_34_ladder;
        }
        float _2096;
        if (_1466 > 0.0)
        {
            _2096 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2096 = frontier_phi_48_45_ladder;
        }
        float _2098 = isnan(_1883) ? _1607 : (isnan(_1607) ? _1883 : min(_1607, _1883));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1460) + _1449;
        float _2104 = (_2099 * _1463) + _1453;
        float _2105 = (_2099 * _1466) + _1457;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_24_48_ladder = _2338.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2338.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2338.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_24_48_ladder_2;
        _1487 = frontier_phi_24_48_ladder_1;
        _1489 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_488, _489, _490), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_515 * _465) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_515 * _467) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_515 * _468) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _480 + (-1.0);
    float _1540 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1541 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1544 = _1527 + 5u;
    float _1550 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1554 = _1527 + 4u;
    float _1561 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1565 = _1527 | 1u;
    float _1576 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_309, _310, _311));
    float _1579 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_309, _310, _311));
    float _3713 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _3724 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1584 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1586 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1593 = ((cbLight._m0[_1544].x * _1550) * _1586) + ((cbLight._m0[_1554].x * _1561) * _1584);
    float _1594 = ((_1550 * cbLight._m0[_1544].y) * _1586) + ((_1561 * cbLight._m0[_1554].y) * _1584);
    float _1595 = ((_1550 * cbLight._m0[_1544].z) * _1586) + ((_1561 * cbLight._m0[_1554].z) * _1584);
    uvec4 _1599 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1601 = _1599.x == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1601)
    {
        _1612 = _1593;
        _1614 = _1594;
        _1616 = _1595;
    }
    else
    {
        uint _1620 = _1527 + 6u;
        float _1636 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1637 = _1636 * _1636;
        float _3735 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1639 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1612 = (((cbLight._m0[_1620].x * 0.3183098733425140380859375) * _1638) * _1639) + _1593;
        _1614 = (((cbLight._m0[_1620].y * 0.3183098733425140380859375) * _1638) * _1639) + _1594;
        _1616 = (((cbLight._m0[_1620].z * 0.3183098733425140380859375) * _1638) * _1639) + _1595;
    }
    bool _1619 = _1599.y == 0u;
    float _1657;
    float _1659;
    float _1661;
    if (_1619)
    {
        _1657 = _1612;
        _1659 = _1614;
        _1661 = _1616;
    }
    else
    {
        uint _1827 = _1527 + 7u;
        float _1843 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_309, _310, _311)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3751 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1846 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1657 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1612;
        _1659 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1614;
        _1661 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1616;
    }
    uint _1664 = _1527 + 8u;
    float _1677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1527].w)) * _312) * 0.949999988079071044921875);
    float _1678 = _1677 * _1677;
    float _1679 = cbLight._m0[_1527].x + _390;
    float _1680 = cbLight._m0[_1527].y + _391;
    float _1681 = cbLight._m0[_1527].z + _392;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1686 = _1685 * _1679;
    float _1687 = _1685 * _1680;
    float _1688 = _1685 * _1681;
    float _1689 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1527].xyz));
    float _3767 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1693 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1694 = dot(vec3(_309, _310, _311), vec3(_1686, _1687, _1688));
    float _3789 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1697 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1698 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1686, _1687, _1688));
    float _3800 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1702 = _1678 * _1678;
    float _1706 = ((_1697 * _1697) * (_1702 + (-1.0))) + 1.0;
    float _1714 = exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0);
    float _1715 = 0.959999978542327880859375 - _462;
    float _1717 = 0.959999978542327880859375 - _463;
    float _1718 = 0.959999978542327880859375 - _464;
    float _1725 = 1.0 - _1678;
    float _1736 = (0.5 / (((_1693 * ((_1692 * _1725) + _1678)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1725) + _1678) * _1692))) * _1692;
    float _3811 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1738 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1702 / ((_1706 * _1706) * 3.141590118408203125));
    uint _1749 = _1527 + 9u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _312) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1565].x + _390;
    float _1763 = cbLight._m0[_1565].y + _391;
    float _1764 = cbLight._m0[_1565].z + _392;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1565].xyz));
    float _3822 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1776 = dot(vec3(_309, _310, _311), vec3(_1769, _1770, _1771));
    float _3833 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1769, _1770, _1771));
    float _3844 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1761 * _1761;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1795 = exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0);
    float _1802 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1693 * ((_1775 * _1802) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1802) + _1761) * _1775))) * _1775;
    float _3855 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    float _1824 = (((((_1795 * _1715) + _465) * cbLight._m0[_1749].x) * _1814) * _1550) + (((((_1714 * _1715) + _465) * cbLight._m0[_1664].x) * _1738) * _1561);
    float _1825 = (((((_1795 * _1717) + _467) * cbLight._m0[_1749].y) * _1814) * _1550) + (((((_1714 * _1717) + _467) * cbLight._m0[_1664].y) * _1738) * _1561);
    float _1826 = (((((_1795 * _1718) + _468) * cbLight._m0[_1749].z) * _1814) * _1550) + (((((_1714 * _1718) + _468) * cbLight._m0[_1664].z) * _1738) * _1561);
    float _1888;
    float _1890;
    float _1892;
    if (_1601)
    {
        _1888 = _1824;
        _1890 = _1825;
        _1892 = _1826;
    }
    else
    {
        uint _1894 = _1527 + 2u;
        uint _1898 = _1527 + 10u;
        float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _312) * 0.949999988079071044921875);
        float _1913 = _1912 * _1912;
        float _1914 = cbLight._m0[_1894].x + _390;
        float _1915 = cbLight._m0[_1894].y + _391;
        float _1916 = cbLight._m0[_1894].z + _392;
        float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
        float _1921 = _1920 * _1914;
        float _1922 = _1920 * _1915;
        float _1923 = _1920 * _1916;
        float _1924 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_1894].xyz));
        float _3866 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1928 = dot(vec3(_309, _310, _311), vec3(_1921, _1922, _1923));
        float _3877 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1932 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1921, _1922, _1923));
        float _3888 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1936 = _1913 * _1913;
        float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
        float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0);
        float _1954 = 1.0 - _1913;
        float _1964 = (0.5 / (((_1693 * ((_1927 * _1954) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _1954) + _1913) * _1927))) * _1927;
        float _3899 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1966 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
        float _1967 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
        _1888 = (((((_1947 * _1715) + _465) * cbLight._m0[_1898].x) * _1966) * _1967) + _1824;
        _1890 = (((((_1947 * _1717) + _467) * cbLight._m0[_1898].y) * _1966) * _1967) + _1825;
        _1892 = (((((_1947 * _1718) + _468) * cbLight._m0[_1898].z) * _1966) * _1967) + _1826;
    }
    float _2002;
    float _2004;
    float _2006;
    if (_1619)
    {
        _2002 = _1888;
        _2004 = _1890;
        _2006 = _1892;
    }
    else
    {
        uint _2013 = _1527 + 3u;
        uint _2017 = _1527 + 11u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _312) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _390;
        float _2034 = cbLight._m0[_2013].y + _391;
        float _2035 = cbLight._m0[_2013].z + _392;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_309, _310, _311), vec3(cbLight._m0[_2013].xyz));
        float _3915 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2047 = dot(vec3(_309, _310, _311), vec3(_2040, _2041, _2042));
        float _3926 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _3937 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1693 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1693 * _2073) + _2032) * _2046))) * _2046;
        float _3948 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _2002 = (((((_2066 * _1715) + _465) * cbLight._m0[_2017].x) * _2085) * _2086) + _1888;
        _2004 = (((((_2066 * _1717) + _467) * cbLight._m0[_2017].y) * _2085) * _2086) + _1890;
        _2006 = (((((_2066 * _1718) + _468) * cbLight._m0[_2017].z) * _2085) * _2086) + _1892;
    }
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_1525.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            uint _2502 = 0u;
            uint _2511;
            bool _2512;
            for (;;)
            {
                _2511 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2502 << 2u)) >> 2u)).x;
                _2512 = _2511 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2512)
                {
                    frontier_phi_63_pred = _2501;
                    frontier_phi_63_pred_1 = _2500;
                    frontier_phi_63_pred_2 = _2499;
                    frontier_phi_63_pred_3 = _2498;
                    frontier_phi_63_pred_4 = _2497;
                    frontier_phi_63_pred_5 = _2496;
                }
                else
                {
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    uint _2626;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2501;
                    _2626 = _2511;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    for (;;)
                    {
                        uint _2630 = uint(findLSB(_2626)) + (_2502 << 5u);
                        uint _2627 = (_2626 + 4294967295u) & _2626;
                        uint _2632 = _2630 * 48u;
                        vec4 _2646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 3u)).x));
                        uint _2652 = (_2630 * 48u) + 4u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        uint _2671 = (_2630 * 48u) + 8u;
                        vec3 _2682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x));
                        float _2686 = _2646.x - _2162;
                        float _2687 = _2646.y - _2163;
                        float _2688 = _2646.z - _2164;
                        float _2689 = dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688));
                        float _2692 = inversesqrt(_2689);
                        float _2693 = _2692 * _2686;
                        float _2694 = _2692 * _2687;
                        float _2695 = _2692 * _2688;
                        float _2696 = dot(vec3(_420, _423, _426), vec3(_2693, _2694, _2695));
                        float _2701 = 1.0 - (_2689 * _2646.w);
                        float _3974 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2702 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2703 = sqrt(_2689) * _2665.w;
                        float _2706 = 1.39999997615814208984375 / (_2703 + 1.39999997615814208984375);
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2696) + _2707;
                        float _2713 = _2703 * _2703;
                        float _2717 = ((isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))) * _2702) / ((_2713 * 0.699999988079071044921875) + 1.0);
                        float _2721 = (-0.0) - _2162;
                        float _2722 = (-0.0) - _2163;
                        float _2723 = (-0.0) - _2164;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2728 = _2727 * _2721;
                        float _2729 = _2727 * _2722;
                        float _2730 = _2727 * _2723;
                        float _2738 = exp2(log2(1.0 / ((_2713 * 3.5) + 5.0)) * 0.25);
                        float _2739 = 1.0 - _496;
                        float _2746 = sqrt(1.0 - ((1.0 - (_2739 * _2739)) * (1.0 - (_2738 * _2738))));
                        float _2747 = _2746 * _2746;
                        float _2748 = _2747 * _2747;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2751 = _2730 + _2695;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2759 = dot(vec3(_420, _423, _426), vec3(_2728, _2729, _2730));
                        float _3990 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2762 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2763 = dot(vec3(_420, _423, _426), vec3(_2755 * _2749, _2755 * _2750, _2755 * _2751));
                        float _4001 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2766 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2770 = ((_2766 * _2766) * (_2748 + (-1.0))) + 1.0;
                        float _2771 = _2706 * _2747;
                        float _2772 = _2771 * _2771;
                        float _2775 = ((1.0 - _2772) * _2696) + _2772;
                        float _4012 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2777 = 1.0 - _2747;
                        float _2787 = (0.5 / (((_2776 * ((_2762 * _2777) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2776 * _2777) + _2747) * _2762))) * _2776;
                        float _4023 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2798 = (((_2748 * 3.1415927410125732421875) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) / ((_2770 * _2770) * ((_2713 * 2.1991131305694580078125) + 3.141590118408203125))) * _2702;
                        _2555 = (_2717 * _2665.x) + _2623;
                        _2556 = (_2717 * _2665.y) + _2624;
                        _2557 = (_2717 * _2665.z) + _2625;
                        _2552 = (_2798 * _2682.x) + _2620;
                        _2553 = (_2798 * _2682.y) + _2621;
                        _2554 = (_2798 * _2682.z) + _2622;
                        if (_2627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2557;
                            _2626 = _2627;
                        }
                    }
                    frontier_phi_63_pred = _2557;
                    frontier_phi_63_pred_1 = _2556;
                    frontier_phi_63_pred_2 = _2555;
                    frontier_phi_63_pred_3 = _2554;
                    frontier_phi_63_pred_4 = _2553;
                    frontier_phi_63_pred_5 = _2552;
                }
                _2354 = frontier_phi_63_pred;
                _2352 = frontier_phi_63_pred_1;
                _2350 = frontier_phi_63_pred_2;
                _2348 = frontier_phi_63_pred_3;
                _2346 = frontier_phi_63_pred_4;
                _2344 = frontier_phi_63_pred_5;
                uint _2503 = _2502 + 1u;
                if (_2503 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2496 = _2344;
                    _2497 = _2346;
                    _2498 = _2348;
                    _2499 = _2350;
                    _2500 = _2352;
                    _2501 = _2354;
                    _2502 = _2503;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        if (((4294967295u << _2360) & _2208) == 0u)
        {
            _2464 = _2343;
            _2466 = _2345;
            _2468 = _2347;
            _2470 = _2349;
            _2472 = _2351;
            _2474 = _2353;
        }
        else
        {
            float _2489 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2490 = _2489 * _2162;
            float _2491 = _2489 * _2163;
            float _2492 = _2489 * _2164;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2465;
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2603 = _2343;
                float _2604 = _2345;
                float _2605 = _2347;
                float _2606 = _2349;
                float _2607 = _2351;
                float _2608 = _2353;
                uint _2609 = _2360;
                uint _2618;
                bool _2619;
                for (;;)
                {
                    _2618 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2609 << 2u)) >> 2u)).x;
                    _2619 = _2618 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2619)
                    {
                        frontier_phi_69_pred = _2608;
                        frontier_phi_69_pred_1 = _2607;
                        frontier_phi_69_pred_2 = _2606;
                        frontier_phi_69_pred_3 = _2605;
                        frontier_phi_69_pred_4 = _2604;
                        frontier_phi_69_pred_5 = _2603;
                    }
                    else
                    {
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        float _2821 = _2608;
                        uint _2822 = _2618;
                        uint _2823;
                        vec4 _2848;
                        float _2849;
                        vec4 _2864;
                        vec3 _2876;
                        vec4 _2892;
                        vec4 _2908;
                        float _2955;
                        bool _2956;
                        for (;;)
                        {
                            uint _2833 = ((_2609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2822));
                            _2823 = (_2822 + 4294967295u) & _2822;
                            uint _2835 = _2833 * 40u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            _2849 = _2848.w;
                            uint _2851 = (_2833 * 40u) + 4u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2866 = (_2833 * 40u) + 8u;
                            _2876 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x));
                            uint _2879 = (_2833 * 40u) + 16u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2895 = (_2833 * 40u) + 20u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2833 * 40u) + 24u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2930 = (_2833 * 40u) + 28u;
                            vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            _2955 = fma(_2164, _2943.z, fma(_2163, _2943.y, _2943.x * _2162)) + _2943.w;
                            _2956 = !((fma(_2164, _2924.z, fma(_2163, _2924.y, _2924.x * _2162)) + _2924.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2956)
                            {
                                float _2983 = _2848.x - _2162;
                                float _2984 = _2848.y - _2163;
                                float _2985 = _2848.z - _2164;
                                float _2986 = dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985));
                                float _2989 = inversesqrt(_2986);
                                float _2990 = _2989 * _2983;
                                float _2991 = _2989 * _2984;
                                float _2992 = _2989 * _2985;
                                float _2996 = 1.0 - (_2986 / (_2849 * _2849));
                                float _4034 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2997 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3001 = sqrt(_2986) * _2864.w;
                                float _3003 = 1.39999997615814208984375 / (_3001 + 1.39999997615814208984375);
                                float _3004 = _3003 * _3003;
                                float _3007 = ((1.0 - _3004) * dot(vec3(_2990, _2991, _2992), vec3(_420, _423, _426))) + _3004;
                                float _3010 = _3001 * _3001;
                                float _3014 = (fma(_2164, _2892.z, fma(_2163, _2892.y, _2892.x * _2162)) + _2892.w) / _2955;
                                float _3015 = (fma(_2164, _2908.z, fma(_2163, _2908.y, _2908.x * _2162)) + _2908.w) / _2955;
                                float _3019 = 1.0 - dot(vec2(_3014, _3015), vec2(_3014, _3015));
                                float _4050 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3021 = _3020 * (((isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))) * _2997) / ((_3010 * 0.699999988079071044921875) + 1.0));
                                float _3033 = exp2(log2(1.0 / ((_3010 * 3.5) + 5.0)) * 0.25);
                                float _3034 = 1.0 - _496;
                                float _3041 = sqrt(1.0 - ((1.0 - (_3034 * _3034)) * (1.0 - (_3033 * _3033))));
                                float _3042 = _3041 * _3041;
                                float _3043 = _3042 * _3042;
                                float _3044 = _2990 - _2490;
                                float _3045 = _2991 - _2491;
                                float _3046 = _2992 - _2492;
                                float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                                float _3054 = dot(vec3(_420, _423, _426), vec3((-0.0) - _2490, (-0.0) - _2491, (-0.0) - _2492));
                                float _4061 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3057 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3058 = dot(vec3(_420, _423, _426), vec3(_3050 * _3044, _3050 * _3045, _3050 * _3046));
                                float _4072 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3061 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3065 = ((_3061 * _3061) * (_3043 + (-1.0))) + 1.0;
                                float _3066 = _3003 * _3042;
                                float _3067 = _3066 * _3066;
                                float _3073 = ((1.0 - _3067) * dot(vec3(_420, _423, _426), vec3(_2990, _2991, _2992))) + _3067;
                                float _4083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3075 = 1.0 - _3042;
                                float _3085 = (0.5 / (((_3074 * ((_3057 * _3075) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3042) * _3057))) * _3074;
                                float _4094 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3095 = (_3020 * _2997) * (((_3043 * 3.1415927410125732421875) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) / ((_3065 * _3065) * ((_3010 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3021 * _2864.z;
                                frontier_phi_75_pred_1 = _3021 * _2864.y;
                                frontier_phi_75_pred_2 = _3021 * _2864.x;
                                frontier_phi_75_pred_3 = _3095 * _2876.z;
                                frontier_phi_75_pred_4 = _3095 * _2876.y;
                                frontier_phi_75_pred_5 = _3095 * _2876.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3104 = frontier_phi_75_pred;
                            _3103 = frontier_phi_75_pred_1;
                            _3102 = frontier_phi_75_pred_2;
                            _3101 = frontier_phi_75_pred_3;
                            _3100 = frontier_phi_75_pred_4;
                            _3099 = frontier_phi_75_pred_5;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2808 = _3104 + _2821;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            if (_2823 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2823;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2808;
                        frontier_phi_69_pred_1 = _2807;
                        frontier_phi_69_pred_2 = _2806;
                        frontier_phi_69_pred_3 = _2805;
                        frontier_phi_69_pred_4 = _2804;
                        frontier_phi_69_pred_5 = _2803;
                    }
                    _2475 = frontier_phi_69_pred;
                    _2473 = frontier_phi_69_pred_1;
                    _2471 = frontier_phi_69_pred_2;
                    _2469 = frontier_phi_69_pred_3;
                    _2467 = frontier_phi_69_pred_4;
                    _2465 = frontier_phi_69_pred_5;
                    uint _2610 = _2609 + 1u;
                    if (_2610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2603 = _2465;
                        _2604 = _2467;
                        _2605 = _2469;
                        _2606 = _2471;
                        _2607 = _2473;
                        _2608 = _2475;
                        _2609 = _2610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2475;
                frontier_phi_57_58_ladder_1 = _2473;
                frontier_phi_57_58_ladder_2 = _2471;
                frontier_phi_57_58_ladder_3 = _2469;
                frontier_phi_57_58_ladder_4 = _2467;
                frontier_phi_57_58_ladder_5 = _2465;
            }
            else
            {
                frontier_phi_57_58_ladder = _2353;
                frontier_phi_57_58_ladder_1 = _2351;
                frontier_phi_57_58_ladder_2 = _2349;
                frontier_phi_57_58_ladder_3 = _2347;
                frontier_phi_57_58_ladder_4 = _2345;
                frontier_phi_57_58_ladder_5 = _2343;
            }
            _2464 = frontier_phi_57_58_ladder_5;
            _2466 = frontier_phi_57_58_ladder_4;
            _2468 = frontier_phi_57_58_ladder_3;
            _2470 = frontier_phi_57_58_ladder_2;
            _2472 = frontier_phi_57_58_ladder_1;
            _2474 = frontier_phi_57_58_ladder;
        }
        float _2479 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2220 = (_2479 * _2470) + _1657;
        _2222 = (_2479 * _2472) + _1659;
        _2224 = (_2479 * _2474) + _1661;
        _2226 = ((_2464 * _465) * _2479) + _2002;
        _2228 = ((_2466 * _467) * _2479) + _2004;
        _2230 = ((_2468 * _468) * _2479) + _2006;
    }
    else
    {
        _2220 = _1657;
        _2222 = _1659;
        _2224 = _1661;
        _2226 = _2002;
        _2228 = _2004;
        _2230 = _2006;
    }
    uint _2236 = _441 + uint(cbMatDynParam._m0[0u].w);
    float _2244 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _291.x) * cbInstanceData._m0[_2236].x;
    float _2247 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _291.y) * cbInstanceData._m0[_2236].y;
    float _2250 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _291.z) * cbInstanceData._m0[_2236].z;
    float _4110 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4121 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4132 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _2267 = (((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2220 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _480))) + ((_2226 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + _2244;
    float _2269 = (_2247 + ((_2228 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2222 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _480)));
    float _2271 = (_2250 + ((_2230 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2224 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _480)));
    float _4158 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2284 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    uint _2285 = _439 + 6u;
    float _2293 = _398 / cbSceneParam._m0[86u].x;
    float _2294 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2369 = _2368 / _332;
        float _2380 = _2369 * _383;
        float _2381 = _384 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2383 = _2369 * _385;
        float _2385 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2386 = _2385 + cbSceneParam._m0[79u].w;
        float _2387 = cbSceneParam._m0[79u].w - _2381;
        float _2393 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2383 * _2383));
        float _2396 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2393;
        float _2401 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2403 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2565;
        if (abs((_2382 - _2385) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2565 = ((((_2386 > 0.0) ? exp2(_2401 * _2386) : (2.0 - exp2(_2403 * _2386))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2396;
        }
        else
        {
            float _2525 = 1.0 / cbSceneParam._m0[80u].x;
            float _2526 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : max(_2386, _2387));
            float _2527 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : min(_2386, _2387));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            float _2537 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : min(_2527, 0.0));
            _2565 = ((abs(_2393 / _2382) * cbSceneParam._m0[80u].y) * ((((_2536 - _2537) * 2.0) - ((exp2(_2401 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0)))) - exp2(_2401 * (isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0))))) * _2525)) - ((exp2(_2403 * _2536) - exp2(_2403 * _2537)) * _2525))) + (_2396 * cbSceneParam._m0[80u].z);
        }
        vec4 _2567 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2576 = exp2((_2565 * (-1.44269502162933349609375)) * (1.0 - _2567.w));
        float _2577 = log2(_2576);
        float _2593 = log2(_2313);
        _2405 = (exp2(_2593 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2577 * cbSceneParam._m0[78u].x)) * _2567.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2407 = (exp2(_2593 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2577 * cbSceneParam._m0[78u].y)) * _2567.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2409 = (exp2(_2593 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2577 * cbSceneParam._m0[78u].z)) * _2567.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2411 = _2576 * _2313;
    }
    else
    {
        _2405 = _2310;
        _2407 = _2311;
        _2409 = _2312;
        _2411 = _2313;
    }
    float _2423 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2424 = _2423 == 3.0;
    float _2425 = log2(_2411);
    float _2429 = exp2(_2425 * cbSceneParam._m0[78u].x);
    float _2430 = exp2(_2425 * cbSceneParam._m0[78u].y);
    float _2431 = exp2(_2425 * cbSceneParam._m0[78u].z);
    float _2432 = _2429 * (isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0)));
    float _2433 = _2430 * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0)));
    float _2434 = _2431 * (isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0)));
    float _2443 = (_2423 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2443 * (_2424 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.y = _2443 * (_2424 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2407)));
    SV_Target.z = _2443 * (_2424 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2409)));
    SV_Target.w = cbInstanceData._m0[_2285].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2244) * _2284) * _2429) * _2443;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2247) * _2284) * _2430) * _2443;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2250) * _2284) * _2431) * _2443;
    SV_Target_1.w = cbInstanceData._m0[_2285].w;
}


