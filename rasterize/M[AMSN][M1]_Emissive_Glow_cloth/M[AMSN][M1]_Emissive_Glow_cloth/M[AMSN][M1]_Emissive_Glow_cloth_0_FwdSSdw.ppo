#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _874;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = cbMtdParam._m0[11u].x + _255.x;
    vec4 _274 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3278 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))));
    vec4 _310 = texture(sampler2D(M_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = fma(_291, _213, fma(_284, _205 * TANGENT.x, (_191 * _184) * _282));
    float _320 = fma(_291, _214, fma(_284, _205 * TANGENT.y, (_191 * _185) * _282));
    float _323 = fma(_291, _215, fma(_284, _205 * TANGENT.z, (_191 * _186) * _282));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3289 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _331 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3311 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3322 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3333 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _335 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _351 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _402 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _392);
    float _403 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _392);
    float _404 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _392);
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _402 * _408;
    float _410 = _403 * _408;
    float _411 = _404 * _408;
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _439 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _442 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _445 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    uint _458 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = _458 + 9u;
    uint _461 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_461].z;
    float _3344 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _473 = 1.0 - _335;
    float _474 = _470 * _473;
    float _475 = _471 * _473;
    float _476 = _472 * _473;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _335;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _335;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _335;
    float _484 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    vec4 _496 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _499 = _496.x * TEXCOORD.z;
    float _500 = dot(vec3(_328, _329, _330), vec3(_409, _410, _411));
    float _503 = _500 * 2.0;
    float _507 = (_503 * _328) - _409;
    float _508 = (_503 * _329) - _410;
    float _509 = (_503 * _330) - _411;
    float _513 = abs(dot(vec3(_409, _410, _411), vec3(_328, _329, _330)));
    float _3377 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _515 = sqrt(_331);
    float _528 = exp2((_515 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_515 * 3.0));
    float _534 = (1.0 - _528) * ((_515 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _535 = _528 * _515;
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _873;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _598 = fma(_571, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563));
        float _602 = fma(_571, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563));
        float _606 = fma(_571, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563));
        float _631 = _563 + _328;
        float _632 = _567 + _329;
        float _633 = _571 + _330;
        float _643 = fma(_633, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631)) - _598;
        float _644 = fma(_633, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631)) - _602;
        float _645 = fma(_633, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631)) - _606;
        float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
        float _662 = ((_649 * _643) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_598 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_649 * _644) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_602 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_649 * _645) / cbModelParam._m0[34u].z) + ((((((_606 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_662, _663, _664), 0.0);
        float _701 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_667.x + (-0.5));
        float _703 = _701 * (_667.y + (-0.5));
        float _704 = _701 * (_667.z + (-0.5));
        float _711 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_674.x + (-0.5));
        float _713 = _711 * (_674.y + (-0.5));
        float _714 = _711 * (_674.z + (-0.5));
        float _721 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_681.x + (-0.5));
        float _723 = _721 * (_681.y + (-0.5));
        float _724 = _721 * (_681.z + (-0.5));
        float _731 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_688.x + (-0.5));
        float _733 = _731 * (_688.y + (-0.5));
        float _734 = _731 * (_688.z + (-0.5));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = _702 * 0.5;
        float _739 = _712 * 0.5;
        float _740 = _722 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _755 = (dot(vec3(_328, _329, _330), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _765 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3425 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_767 + 1.0))) + _772) * _735;
        float _782 = _703 * 0.5;
        float _783 = _713 * 0.5;
        float _784 = _723 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_328, _329, _330), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3458 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_809 + 1.0))) + _814) * _736;
        float _824 = _704 * 0.5;
        float _825 = _714 * 0.5;
        float _826 = _724 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(_328, _329, _330), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3491 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_851 + 1.0))) + _856) * _737;
        _873 = _704;
        _875 = _703;
        _876 = _702;
        _877 = _714;
        _878 = _713;
        _879 = _712;
        _880 = _724;
        _881 = _723;
        _882 = _722;
        _883 = _737;
        _884 = _736;
        _885 = _735;
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
    }
    else
    {
        _873 = _874;
        _875 = _874;
        _876 = _874;
        _877 = _874;
        _878 = _874;
        _879 = _874;
        _880 = _874;
        _881 = _874;
        _882 = _874;
        _883 = _874;
        _884 = _874;
        _885 = _874;
        _886 = 0.0;
        _887 = 0.0;
        _888 = 0.0;
    }
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _914 = fma(_571, cbModelParam._m0[30u].z, fma(_567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _563));
        float _918 = fma(_571, cbModelParam._m0[31u].z, fma(_567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _563));
        float _922 = fma(_571, cbModelParam._m0[32u].z, fma(_567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _563));
        float _945 = _563 + _328;
        float _946 = _567 + _329;
        float _947 = _571 + _330;
        float _957 = fma(_947, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945)) - _914;
        float _958 = fma(_947, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945)) - _918;
        float _959 = fma(_947, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945)) - _922;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_914 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_918 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[35u].z) + ((((((_922 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1013 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_980.x + (-0.5));
        float _1015 = _1013 * (_980.y + (-0.5));
        float _1016 = _1013 * (_980.z + (-0.5));
        float _1023 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_987.x + (-0.5));
        float _1025 = _1023 * (_987.y + (-0.5));
        float _1026 = _1023 * (_987.z + (-0.5));
        float _1033 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_994.x + (-0.5));
        float _1035 = _1033 * (_994.y + (-0.5));
        float _1036 = _1033 * (_994.z + (-0.5));
        float _1043 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1001.x + (-0.5));
        float _1045 = _1043 * (_1001.y + (-0.5));
        float _1046 = _1043 * (_1001.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_328, _329, _330), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3554 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1077 + 1.0))) + _1082) * _1047;
        float _1092 = _1015 * 0.5;
        float _1093 = _1025 * 0.5;
        float _1094 = _1035 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_328, _329, _330), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3587 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1119 + 1.0))) + _1124) * _1048;
        float _1134 = _1016 * 0.5;
        float _1135 = _1026 * 0.5;
        float _1136 = _1036 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_328, _329, _330), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3620 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1161 + 1.0))) + _1166) * _1049;
        _1183 = _1016;
        _1184 = _1015;
        _1185 = _1014;
        _1186 = _1026;
        _1187 = _1025;
        _1188 = _1024;
        _1189 = _1036;
        _1190 = _1035;
        _1191 = _1034;
        _1192 = _1049;
        _1193 = _1048;
        _1194 = _1047;
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _874;
        _1184 = _874;
        _1185 = _874;
        _1186 = _874;
        _1187 = _874;
        _1188 = _874;
        _1189 = _874;
        _1190 = _874;
        _1191 = _874;
        _1192 = _874;
        _1193 = _874;
        _1194 = _874;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _887)) + _887;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _888)) + _888;
    float _1230 = fma(_1209, cbSceneParam._m0[89u].z, fma(_1208, cbSceneParam._m0[89u].y, _1207 * cbSceneParam._m0[89u].x));
    float _1233 = fma(_1209, cbSceneParam._m0[90u].z, fma(_1208, cbSceneParam._m0[90u].y, _1207 * cbSceneParam._m0[90u].x));
    float _1236 = fma(_1209, cbSceneParam._m0[91u].z, fma(_1208, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1207));
    float _1251 = _507 * 0.5;
    float _1252 = _508 * 0.5;
    float _1253 = _509 * 0.5;
    float _1254 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1257 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1260 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1294;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1267 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_873, _877, _880, _883));
        float _1271 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_875, _878, _881, _884));
        float _1275 = dot(vec4(_1251, _1252, _1253, 1.0), vec4(_876, _879, _882, _885));
        float _1282 = dot(vec4(cbModelParam._m0[39u]), vec4(_1251, _1252, _1253, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1305;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1296 = dot(vec4(cbModelParam._m0[40u]), vec4(_1251, _1252, _1253, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1309 = (_1305 * cbModelParam._m0[1u].x) + (_1294 * (1.0 - cbModelParam._m0[1u].x));
    float _1319 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _331);
    float _1320 = isnan(_1319) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1319 : min(cbModelParam._m0[25u].z, _1319));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1369 = fma(_571, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563)) + cbModelParam._m0[13u].w;
        float _1373 = fma(_571, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563)) + cbModelParam._m0[14u].w;
        float _1377 = fma(_571, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563)) + cbModelParam._m0[15u].w;
        float _1380 = fma(_509, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _507));
        float _1383 = fma(_509, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _507));
        float _1386 = fma(_509, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _507));
        float _1414;
        if (_1380 > 0.0)
        {
            _1414 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1414 = frontier_phi_16_14_ladder;
        }
        float _1642;
        if (_1383 > 0.0)
        {
            _1642 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1642 = frontier_phi_25_21_ladder;
        }
        float _1899;
        if (_1386 > 0.0)
        {
            _1899 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1899 = frontier_phi_37_32_ladder;
        }
        float _1901 = isnan(_1642) ? _1414 : (isnan(_1414) ? _1642 : min(_1414, _1642));
        float _1902 = isnan(_1899) ? _1901 : (isnan(_1901) ? _1899 : min(_1901, _1899));
        float _1906 = (_1902 * _1380) + _1369;
        float _1907 = (_1902 * _1383) + _1373;
        float _1908 = (_1902 * _1386) + _1377;
        float _1909 = _1902 * 9.9999997473787516355514526367188e-05;
        float _1911 = (-1.0) - _1909;
        float _1913 = _1909 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1908 > _1913) || ((_1908 < _1911) || ((_1907 > _1913) || ((_1907 < _1911) || ((_1906 < _1911) || (_1906 > _1913))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1908, cbModelParam._m0[9u].z, fma(_1907, cbModelParam._m0[9u].y, _1906 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1908, cbModelParam._m0[10u].z, fma(_1907, cbModelParam._m0[10u].y, _1906 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1908, cbModelParam._m0[11u].z, fma(_1907, cbModelParam._m0[11u].y, _1906 * cbModelParam._m0[11u].x))), _1320);
            frontier_phi_15_37_ladder = _2036.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2036.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2036.x * cbModelParam._m0[1u].y;
        }
        _1402 = frontier_phi_15_37_ladder_2;
        _1404 = frontier_phi_15_37_ladder_1;
        _1406 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1390 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_507, _508, _509), _1320);
        _1402 = _1390.x * cbModelParam._m0[1u].y;
        _1404 = _1390.y * cbModelParam._m0[1u].y;
        _1406 = _1390.z * cbModelParam._m0[1u].y;
    }
    float _1410 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _331);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1410 : min(cbModelParam._m0[25u].w, _1410));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_571, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_571, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_571, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_509, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _507));
        float _1482 = fma(_509, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _507));
        float _1485 = fma(_509, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _507));
        float _1647;
        if (_1479 > 0.0)
        {
            _1647 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1647 = frontier_phi_27_23_ladder;
        }
        float _1926;
        if (_1482 > 0.0)
        {
            _1926 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1926 = frontier_phi_39_34_ladder;
        }
        float _2139;
        if (_1485 > 0.0)
        {
            _2139 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2139 = frontier_phi_48_45_ladder;
        }
        float _2141 = isnan(_1926) ? _1647 : (isnan(_1647) ? _1926 : min(_1647, _1926));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1479) + _1468;
        float _2147 = (_2142 * _1482) + _1472;
        float _2148 = (_2142 * _1485) + _1476;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2149;
        float _2152 = _2149 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2148 > _2152) || ((_2148 < _2150) || ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 < _2150) || (_2146 > _2152))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2148, cbModelParam._m0[17u].z, fma(_2147, cbModelParam._m0[17u].y, _2146 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2148, cbModelParam._m0[18u].z, fma(_2147, cbModelParam._m0[18u].y, _2146 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2148, cbModelParam._m0[19u].z, fma(_2147, cbModelParam._m0[19u].y, _2146 * cbModelParam._m0[19u].x))), _1411);
            frontier_phi_24_48_ladder = _2381.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2381.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2381.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_24_48_ladder_2;
        _1506 = frontier_phi_24_48_ladder_1;
        _1508 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_507, _508, _509), _1411);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1521 = (((_534 * _484) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1504 - _1402)) + _1402);
    float _1523 = (((_534 * _486) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1506 - _1404)) + _1404);
    float _1525 = (((_534 * _487) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1528 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    vec4 _1542 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_417, _418));
    float _1544 = _1542.w;
    float _1556 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1544);
    float _1557 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1544);
    float _1558 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1544);
    uvec4 _1562 = floatBitsToUint(cbInstanceData._m0[_458 + 5u]);
    uint _1564 = _1562.x * 14u;
    uint _1565 = _1564 + 13u;
    float _1572 = _499 + (-1.0);
    float _1577 = (cbLight._m0[_1565].x * _1572) + 1.0;
    float _1578 = (cbLight._m0[_1565].y * _1572) + 1.0;
    float _1579 = (cbLight._m0[_1565].z * _1572) + 1.0;
    float _1580 = (cbLight._m0[_1565].w * _1572) + 1.0;
    uint _1581 = _1564 + 5u;
    float _1587 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1591 = _1564 + 4u;
    float _1601 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1605 = _1564 | 1u;
    float _1616 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_328, _329, _330));
    float _1619 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_328, _329, _330));
    float _3756 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _3767 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1624 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1626 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1633 = ((cbLight._m0[_1581].x * _1587) * _1626) + (((cbLight._m0[_1591].x * _1556) * _1601) * _1624);
    float _1634 = ((_1587 * cbLight._m0[_1581].y) * _1626) + (((cbLight._m0[_1591].y * _1557) * _1601) * _1624);
    float _1635 = ((_1587 * cbLight._m0[_1581].z) * _1626) + (((cbLight._m0[_1591].z * _1558) * _1601) * _1624);
    uvec4 _1639 = floatBitsToUint(cbLight._m0[_1564 + 12u]);
    bool _1641 = _1639.x == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1641)
    {
        _1652 = _1633;
        _1654 = _1634;
        _1656 = _1635;
    }
    else
    {
        uint _1660 = _1564 + 6u;
        float _1676 = (dot(vec3(cbLight._m0[_1564 + 2u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3778 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1679 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1652 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1633;
        _1654 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1634;
        _1656 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1635;
    }
    bool _1659 = _1639.y == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1659)
    {
        _1697 = _1652;
        _1699 = _1654;
        _1701 = _1656;
    }
    else
    {
        uint _1870 = _1564 + 7u;
        float _1886 = (dot(vec3(cbLight._m0[_1564 + 3u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _3794 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1889 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1697 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1652;
        _1699 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1654;
        _1701 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1656;
    }
    uint _1704 = _1564 + 8u;
    float _1717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _331) * 0.949999988079071044921875);
    float _1718 = _1717 * _1717;
    float _1719 = cbLight._m0[_1564].x + _409;
    float _1720 = cbLight._m0[_1564].y + _410;
    float _1721 = cbLight._m0[_1564].z + _411;
    float _1725 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
    float _1726 = _1725 * _1719;
    float _1727 = _1725 * _1720;
    float _1728 = _1725 * _1721;
    float _1729 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1564].xyz));
    float _3810 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _1733 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1734 = dot(vec3(_328, _329, _330), vec3(_1726, _1727, _1728));
    float _3832 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1738 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1726, _1727, _1728));
    float _3843 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1742 = _1718 * _1718;
    float _1746 = ((_1737 * _1737) * (_1742 + (-1.0))) + 1.0;
    float _1754 = exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0);
    float _1755 = 0.959999978542327880859375 - _481;
    float _1757 = 0.959999978542327880859375 - _482;
    float _1758 = 0.959999978542327880859375 - _483;
    float _1765 = 1.0 - _1718;
    float _1776 = (0.5 / (((_1733 * ((_1732 * _1765) + _1718)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1765) + _1718) * _1732))) * _1732;
    float _3854 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1778 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1742 / ((_1746 * _1746) * 3.141590118408203125));
    uint _1792 = _1564 + 9u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _331) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1605].x + _409;
    float _1806 = cbLight._m0[_1605].y + _410;
    float _1807 = cbLight._m0[_1605].z + _411;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1605].xyz));
    float _3865 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1819 = dot(vec3(_328, _329, _330), vec3(_1812, _1813, _1814));
    float _3876 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1812, _1813, _1814));
    float _3887 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1804 * _1804;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1838 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
    float _1845 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1733 * ((_1818 * _1845) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1845) + _1804) * _1818))) * _1818;
    float _3898 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    float _1867 = (((((_1838 * _1755) + _484) * cbLight._m0[_1792].x) * _1857) * _1587) + ((((cbLight._m0[_1704].x * _1556) * ((_1754 * _1755) + _484)) * _1778) * _1601);
    float _1868 = (((((_1838 * _1757) + _486) * cbLight._m0[_1792].y) * _1857) * _1587) + ((((cbLight._m0[_1704].y * _1557) * ((_1754 * _1757) + _486)) * _1778) * _1601);
    float _1869 = (((((_1838 * _1758) + _487) * cbLight._m0[_1792].z) * _1857) * _1587) + ((((cbLight._m0[_1704].z * _1558) * ((_1754 * _1758) + _487)) * _1778) * _1601);
    float _1931;
    float _1933;
    float _1935;
    if (_1641)
    {
        _1931 = _1867;
        _1933 = _1868;
        _1935 = _1869;
    }
    else
    {
        uint _1937 = _1564 + 2u;
        uint _1941 = _1564 + 10u;
        float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _331) * 0.949999988079071044921875);
        float _1956 = _1955 * _1955;
        float _1957 = cbLight._m0[_1937].x + _409;
        float _1958 = cbLight._m0[_1937].y + _410;
        float _1959 = cbLight._m0[_1937].z + _411;
        float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
        float _1964 = _1963 * _1957;
        float _1965 = _1963 * _1958;
        float _1966 = _1963 * _1959;
        float _1967 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1937].xyz));
        float _3909 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1970 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1971 = dot(vec3(_328, _329, _330), vec3(_1964, _1965, _1966));
        float _3920 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1974 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1975 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_1964, _1965, _1966));
        float _3931 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1979 = _1956 * _1956;
        float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
        float _1990 = exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0);
        float _1997 = 1.0 - _1956;
        float _2007 = (0.5 / (((_1733 * ((_1970 * _1997) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1997) + _1956) * _1970))) * _1970;
        float _3942 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2009 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
        float _2010 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1931 = (((((_1990 * _1755) + _484) * cbLight._m0[_1941].x) * _2009) * _2010) + _1867;
        _1933 = (((((_1990 * _1757) + _486) * cbLight._m0[_1941].y) * _2009) * _2010) + _1868;
        _1935 = (((((_1990 * _1758) + _487) * cbLight._m0[_1941].z) * _2009) * _2010) + _1869;
    }
    float _2045;
    float _2047;
    float _2049;
    if (_1659)
    {
        _2045 = _1931;
        _2047 = _1933;
        _2049 = _1935;
    }
    else
    {
        uint _2056 = _1564 + 3u;
        uint _2060 = _1564 + 11u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _331) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _409;
        float _2077 = cbLight._m0[_2056].y + _410;
        float _2078 = cbLight._m0[_2056].z + _411;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2056].xyz));
        float _3958 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2090 = dot(vec3(_328, _329, _330), vec3(_2083, _2084, _2085));
        float _3969 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _3980 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
        float _2116 = 1.0 - _2075;
        float _2126 = (0.5 / (((_1733 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _2116) + _2075) * _2089))) * _2089;
        float _3991 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _2045 = (((((_2109 * _1755) + _484) * cbLight._m0[_2060].x) * _2128) * _2129) + _1931;
        _2047 = (((((_2109 * _1757) + _486) * cbLight._m0[_2060].y) * _2128) * _2129) + _1933;
        _2049 = (((((_2109 * _1758) + _487) * cbLight._m0[_2060].z) * _2128) * _2129) + _1935;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1562.y == 0u)
    {
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2204;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2204;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2204;
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.x;
        uint _2231 = uint((float(_2219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2220))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2220)));
        float _2241 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2242 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        uint _2245 = uint(isnan(14.0) ? _2242 : (isnan(_2242) ? 14.0 : min(_2242, 14.0)));
        uvec4 _2250 = texelFetch(g_lightClusterGridBuffer, int(((_2245 << 2u) + (_2231 << 6u)) >> 2u));
        uint _2251 = _2250.x;
        uint _2252 = _2219.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2252 >> 4u) & 15u)) + 4294967295u) & _2251) == 0u) || ((_2252 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            uint _2545 = 0u;
            uint _2554;
            bool _2555;
            for (;;)
            {
                _2554 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2545 << 2u)) >> 2u)).x;
                _2555 = _2554 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2555)
                {
                    frontier_phi_63_pred = _2544;
                    frontier_phi_63_pred_1 = _2543;
                    frontier_phi_63_pred_2 = _2542;
                    frontier_phi_63_pred_3 = _2541;
                    frontier_phi_63_pred_4 = _2540;
                    frontier_phi_63_pred_5 = _2539;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2554;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2545 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        float _2729 = _2689.x - _2205;
                        float _2730 = _2689.y - _2206;
                        float _2731 = _2689.z - _2207;
                        float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                        float _2735 = inversesqrt(_2732);
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2739 = dot(vec3(_439, _442, _445), vec3(_2736, _2737, _2738));
                        float _2744 = 1.0 - (_2732 * _2689.w);
                        float _4017 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2746 = sqrt(_2732) * _2708.w;
                        float _2749 = 1.39999997615814208984375 / (_2746 + 1.39999997615814208984375);
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2739) + _2750;
                        float _2756 = _2746 * _2746;
                        float _2760 = ((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2745) / ((_2756 * 0.699999988079071044921875) + 1.0);
                        float _2764 = (-0.0) - _2205;
                        float _2765 = (-0.0) - _2206;
                        float _2766 = (-0.0) - _2207;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2781 = exp2(log2(1.0 / ((_2756 * 3.5) + 5.0)) * 0.25);
                        float _2782 = 1.0 - _515;
                        float _2789 = sqrt(1.0 - ((1.0 - (_2782 * _2782)) * (1.0 - (_2781 * _2781))));
                        float _2790 = _2789 * _2789;
                        float _2791 = _2790 * _2790;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2802 = dot(vec3(_439, _442, _445), vec3(_2771, _2772, _2773));
                        float _4033 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2805 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2806 = dot(vec3(_439, _442, _445), vec3(_2798 * _2792, _2798 * _2793, _2798 * _2794));
                        float _4044 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2813 = ((_2809 * _2809) * (_2791 + (-1.0))) + 1.0;
                        float _2814 = _2749 * _2790;
                        float _2815 = _2814 * _2814;
                        float _2818 = ((1.0 - _2815) * _2739) + _2815;
                        float _4055 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2820 = 1.0 - _2790;
                        float _2830 = (0.5 / (((_2819 * ((_2805 * _2820) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2819 * _2820) + _2790) * _2805))) * _2819;
                        float _4066 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2841 = (((_2791 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_2813 * _2813) * ((_2756 * 2.1991131305694580078125) + 3.141590118408203125))) * _2745;
                        _2598 = (_2760 * _2708.x) + _2666;
                        _2599 = (_2760 * _2708.y) + _2667;
                        _2600 = (_2760 * _2708.z) + _2668;
                        _2595 = (_2841 * _2725.x) + _2663;
                        _2596 = (_2841 * _2725.y) + _2664;
                        _2597 = (_2841 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_63_pred = _2600;
                    frontier_phi_63_pred_1 = _2599;
                    frontier_phi_63_pred_2 = _2598;
                    frontier_phi_63_pred_3 = _2597;
                    frontier_phi_63_pred_4 = _2596;
                    frontier_phi_63_pred_5 = _2595;
                }
                _2397 = frontier_phi_63_pred;
                _2395 = frontier_phi_63_pred_1;
                _2393 = frontier_phi_63_pred_2;
                _2391 = frontier_phi_63_pred_3;
                _2389 = frontier_phi_63_pred_4;
                _2387 = frontier_phi_63_pred_5;
                uint _2546 = _2545 + 1u;
                if (_2546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2539 = _2387;
                    _2540 = _2389;
                    _2541 = _2391;
                    _2542 = _2393;
                    _2543 = _2395;
                    _2544 = _2397;
                    _2545 = _2546;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((4294967295u << _2403) & _2251) == 0u)
        {
            _2507 = _2386;
            _2509 = _2388;
            _2511 = _2390;
            _2513 = _2392;
            _2515 = _2394;
            _2517 = _2396;
        }
        else
        {
            float _2532 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _2533 = _2532 * _2205;
            float _2534 = _2532 * _2206;
            float _2535 = _2532 * _2207;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2646 = _2386;
                float _2647 = _2388;
                float _2648 = _2390;
                float _2649 = _2392;
                float _2650 = _2394;
                float _2651 = _2396;
                uint _2652 = _2403;
                uint _2661;
                bool _2662;
                for (;;)
                {
                    _2661 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                    _2662 = _2661 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2662)
                    {
                        frontier_phi_69_pred = _2651;
                        frontier_phi_69_pred_1 = _2650;
                        frontier_phi_69_pred_2 = _2649;
                        frontier_phi_69_pred_3 = _2648;
                        frontier_phi_69_pred_4 = _2647;
                        frontier_phi_69_pred_5 = _2646;
                    }
                    else
                    {
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        float _2862 = _2649;
                        float _2863 = _2650;
                        float _2864 = _2651;
                        uint _2865 = _2661;
                        uint _2866;
                        vec4 _2891;
                        float _2892;
                        vec4 _2907;
                        vec3 _2919;
                        vec4 _2935;
                        vec4 _2951;
                        float _2998;
                        bool _2999;
                        for (;;)
                        {
                            uint _2876 = ((_2652 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2865));
                            _2866 = (_2865 + 4294967295u) & _2865;
                            uint _2878 = _2876 * 40u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2892 = _2891.w;
                            uint _2894 = (_2876 * 40u) + 4u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2909 = (_2876 * 40u) + 8u;
                            _2919 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x));
                            uint _2922 = (_2876 * 40u) + 16u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2876 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2876 * 40u) + 24u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2973 = (_2876 * 40u) + 28u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2998 = fma(_2207, _2986.z, fma(_2206, _2986.y, _2986.x * _2205)) + _2986.w;
                            _2999 = !((fma(_2207, _2967.z, fma(_2206, _2967.y, _2967.x * _2205)) + _2967.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2999)
                            {
                                float _3026 = _2891.x - _2205;
                                float _3027 = _2891.y - _2206;
                                float _3028 = _2891.z - _2207;
                                float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                                float _3032 = inversesqrt(_3029);
                                float _3033 = _3032 * _3026;
                                float _3034 = _3032 * _3027;
                                float _3035 = _3032 * _3028;
                                float _3039 = 1.0 - (_3029 / (_2892 * _2892));
                                float _4077 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3044 = sqrt(_3029) * _2907.w;
                                float _3046 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                                float _3047 = _3046 * _3046;
                                float _3050 = ((1.0 - _3047) * dot(vec3(_3033, _3034, _3035), vec3(_439, _442, _445))) + _3047;
                                float _3053 = _3044 * _3044;
                                float _3057 = (fma(_2207, _2935.z, fma(_2206, _2935.y, _2935.x * _2205)) + _2935.w) / _2998;
                                float _3058 = (fma(_2207, _2951.z, fma(_2206, _2951.y, _2951.x * _2205)) + _2951.w) / _2998;
                                float _3062 = 1.0 - dot(vec2(_3057, _3058), vec2(_3057, _3058));
                                float _4093 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3064 = _3063 * (((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3040) / ((_3053 * 0.699999988079071044921875) + 1.0));
                                float _3076 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                                float _3077 = 1.0 - _515;
                                float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                                float _3085 = _3084 * _3084;
                                float _3086 = _3085 * _3085;
                                float _3087 = _3033 - _2533;
                                float _3088 = _3034 - _2534;
                                float _3089 = _3035 - _2535;
                                float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                                float _3097 = dot(vec3(_439, _442, _445), vec3((-0.0) - _2533, (-0.0) - _2534, (-0.0) - _2535));
                                float _4104 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3101 = dot(vec3(_439, _442, _445), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                                float _4115 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                                float _3109 = _3046 * _3085;
                                float _3110 = _3109 * _3109;
                                float _3116 = ((1.0 - _3110) * dot(vec3(_439, _442, _445), vec3(_3033, _3034, _3035))) + _3110;
                                float _4126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3118 = 1.0 - _3085;
                                float _3128 = (0.5 / (((_3117 * ((_3100 * _3118) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3085) * _3100))) * _3117;
                                float _4137 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3138 = (_3063 * _3040) * (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_3108 * _3108) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3064 * _2907.z;
                                frontier_phi_75_pred_1 = _3064 * _2907.y;
                                frontier_phi_75_pred_2 = _3064 * _2907.x;
                                frontier_phi_75_pred_3 = _3138 * _2919.z;
                                frontier_phi_75_pred_4 = _3138 * _2919.y;
                                frontier_phi_75_pred_5 = _3138 * _2919.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3147 = frontier_phi_75_pred;
                            _3146 = frontier_phi_75_pred_1;
                            _3145 = frontier_phi_75_pred_2;
                            _3144 = frontier_phi_75_pred_3;
                            _3143 = frontier_phi_75_pred_4;
                            _3142 = frontier_phi_75_pred_5;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            _2848 = _3144 + _2861;
                            if (_2866 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2866;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2851;
                        frontier_phi_69_pred_1 = _2850;
                        frontier_phi_69_pred_2 = _2849;
                        frontier_phi_69_pred_3 = _2848;
                        frontier_phi_69_pred_4 = _2847;
                        frontier_phi_69_pred_5 = _2846;
                    }
                    _2518 = frontier_phi_69_pred;
                    _2516 = frontier_phi_69_pred_1;
                    _2514 = frontier_phi_69_pred_2;
                    _2512 = frontier_phi_69_pred_3;
                    _2510 = frontier_phi_69_pred_4;
                    _2508 = frontier_phi_69_pred_5;
                    uint _2653 = _2652 + 1u;
                    if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2646 = _2508;
                        _2647 = _2510;
                        _2648 = _2512;
                        _2649 = _2514;
                        _2650 = _2516;
                        _2651 = _2518;
                        _2652 = _2653;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2518;
                frontier_phi_57_58_ladder_1 = _2516;
                frontier_phi_57_58_ladder_2 = _2514;
                frontier_phi_57_58_ladder_3 = _2512;
                frontier_phi_57_58_ladder_4 = _2510;
                frontier_phi_57_58_ladder_5 = _2508;
            }
            else
            {
                frontier_phi_57_58_ladder = _2396;
                frontier_phi_57_58_ladder_1 = _2394;
                frontier_phi_57_58_ladder_2 = _2392;
                frontier_phi_57_58_ladder_3 = _2390;
                frontier_phi_57_58_ladder_4 = _2388;
                frontier_phi_57_58_ladder_5 = _2386;
            }
            _2507 = frontier_phi_57_58_ladder_5;
            _2509 = frontier_phi_57_58_ladder_4;
            _2511 = frontier_phi_57_58_ladder_3;
            _2513 = frontier_phi_57_58_ladder_2;
            _2515 = frontier_phi_57_58_ladder_1;
            _2517 = frontier_phi_57_58_ladder;
        }
        float _2522 = isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0));
        _2263 = (_2522 * _2513) + _1697;
        _2265 = (_2522 * _2515) + _1699;
        _2267 = (_2522 * _2517) + _1701;
        _2269 = ((_2507 * _484) * _2522) + _2045;
        _2271 = ((_2509 * _486) * _2522) + _2047;
        _2273 = ((_2511 * _487) * _2522) + _2049;
    }
    else
    {
        _2263 = _1697;
        _2265 = _1699;
        _2267 = _1701;
        _2269 = _2045;
        _2271 = _2047;
        _2273 = _2049;
    }
    uint _2279 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _2287 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _310.x) * cbInstanceData._m0[_2279].x;
    float _2290 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _310.y) * cbInstanceData._m0[_2279].y;
    float _2293 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _310.z) * cbInstanceData._m0[_2279].z;
    float _4153 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4164 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4175 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2310 = (((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2263 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _499))) + ((_2269 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + _2287;
    float _2312 = (_2290 + ((_2271 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2265 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _499)));
    float _2314 = (_2293 + ((_2273 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1309)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2267 + ((isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))) * _499)));
    float _4201 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2327 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    uint _2328 = _458 + 6u;
    float _2336 = _417 / cbSceneParam._m0[86u].x;
    float _2337 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _351 : (isnan(_351) ? cbSceneParam._m0[77u].w : min(_351, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_351 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_351) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _351 : min(cbSceneParam._m0[80u].w, _351));
        float _2412 = _2411 / _351;
        float _2423 = _2412 * _402;
        float _2424 = _403 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _404;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2444 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2446 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2608;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2608 = ((((_2429 > 0.0) ? exp2(_2444 * _2429) : (2.0 - exp2(_2446 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2568 = 1.0 / cbSceneParam._m0[80u].x;
            float _2569 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2570 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            _2608 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2579 - _2580) * 2.0) - ((exp2(_2444 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0)))) - exp2(_2444 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))))) * _2568)) - ((exp2(_2446 * _2579) - exp2(_2446 * _2580)) * _2568))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2610 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2619 = exp2((_2608 * (-1.44269502162933349609375)) * (1.0 - _2610.w));
        float _2620 = log2(_2619);
        float _2636 = log2(_2356);
        _2448 = (exp2(_2636 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].x)) * _2610.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2450 = (exp2(_2636 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].y)) * _2610.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2452 = (exp2(_2636 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].z)) * _2610.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2454 = _2619 * _2356;
    }
    else
    {
        _2448 = _2353;
        _2450 = _2354;
        _2452 = _2355;
        _2454 = _2356;
    }
    float _2466 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2467 = _2466 == 3.0;
    float _2468 = log2(_2454);
    float _2472 = exp2(_2468 * cbSceneParam._m0[78u].x);
    float _2473 = exp2(_2468 * cbSceneParam._m0[78u].y);
    float _2474 = exp2(_2468 * cbSceneParam._m0[78u].z);
    float _2475 = _2472 * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)));
    float _2476 = _2473 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)));
    float _2477 = _2474 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2486 = (_2466 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2486 * (_2467 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2448)));
    SV_Target.y = _2486 * (_2467 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2450)));
    SV_Target.z = _2486 * (_2467 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.w = cbInstanceData._m0[_2328].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2287) * _2327) * _2472) * _2486;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2290) * _2327) * _2473) * _2486;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2293) * _2327) * _2474) * _2486;
    SV_Target_1.w = cbInstanceData._m0[_2328].w;
}


