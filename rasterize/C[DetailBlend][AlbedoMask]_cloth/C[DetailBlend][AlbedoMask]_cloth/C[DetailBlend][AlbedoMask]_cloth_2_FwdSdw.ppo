#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _270 = log2(0.0);
    float _272 = exp2(_270 * cbMtdParam._m0[20u].y);
    float _273 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _274 = isnan(1.0) ? _273 : (isnan(_273) ? 1.0 : min(_273, 1.0));
    vec4 _288 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _293 = _288.w;
    float _301 = exp2(log2(_292 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _316 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _339 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _341 = _339.x;
    float _342 = _339.y;
    float _347 = _341 - ((_341 * _339.z) * cbMtdParam._m0[19u].w);
    bool _383 = _347 >= 0.25;
    bool _388 = _347 >= 0.3499999940395355224609375;
    bool _393 = _347 >= 0.5;
    bool _398 = _347 >= 0.64999997615814208984375;
    bool _403 = _347 >= 0.75;
    vec4 _431 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _442 = cbMtdParam._m0[9u].x * _431.x;
    float _443 = cbMtdParam._m0[9u].y * _431.y;
    float _444 = cbMtdParam._m0[9u].z * _431.z;
    float _451 = (((((((_403 ? cbMtdParam._m0[13u].x : (_398 ? cbMtdParam._m0[18u].x : (_393 ? cbMtdParam._m0[17u].x : (_388 ? cbMtdParam._m0[16u].x : (_383 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _342) + cbMtdParam._m0[10u].x) * _316.x) - _442) * _303) + _442;
    float _452 = (((((((_403 ? cbMtdParam._m0[13u].y : (_398 ? cbMtdParam._m0[18u].y : (_393 ? cbMtdParam._m0[17u].y : (_388 ? cbMtdParam._m0[16u].y : (_383 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _342) + cbMtdParam._m0[10u].y) * _316.y) - _443) * _303) + _443;
    float _453 = (((((((_403 ? cbMtdParam._m0[13u].z : (_398 ? cbMtdParam._m0[18u].z : (_393 ? cbMtdParam._m0[17u].z : (_388 ? cbMtdParam._m0[16u].z : (_383 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _342) + cbMtdParam._m0[10u].z) * _316.z) - _444) * _303) + _444;
    float _460 = exp2(log2(_293) * cbMtdParam._m0[21u].y);
    vec4 _473 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _493 = (((cbMtdParam._m0[11u].x * _473.x) - _451) * _460) + _451;
    float _494 = (((cbMtdParam._m0[11u].y * _473.y) - _452) * _460) + _452;
    float _495 = (((cbMtdParam._m0[11u].z * _473.z) - _453) * _460) + _453;
    vec4 _507 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _531 = (_260.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _507.x) - _493) * _274) + _493);
    float _533 = (_260.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _507.y) - _494) * _274) + _494);
    float _535 = (_260.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _507.z) - _495) * _274) + _495);
    float _540 = exp2(log2(1.0 - _293) * 0.00999999977648258209228515625);
    float _558 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _540) + cbMtdParam._m0[21u].z;
    float _577 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _558) + cbMtdParam._m0[20u].z) * _460) + _558;
    float _600 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _577) + cbMtdParam._m0[22u].z) * _274) + _577;
    vec4 _612 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _630 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _636 = cbMtdParam._m0[19u].x + _630.z;
    float _639 = (((cbMtdParam._m0[20u].x + _612.z) - _636) * _540) + _636;
    vec4 _651 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _663 = (_292 * 2.0) * ((((_651.z - _639) + cbMtdParam._m0[22u].x) * _460) + _639);
    vec4 _675 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _684 = (((_675.z - _663) + cbMtdParam._m0[21u].x) * _274) + _663;
    float _695 = ((_612.x - _632) * _540) + _632;
    float _696 = ((_612.y - _633) * _540) + _633;
    float _701 = ((_651.x - _695) * _460) + _695;
    float _702 = ((_651.y - _696) * _460) + _696;
    float _711 = ((((_675.x - _701) * _274) + _701) * 2.0) + (-1.0);
    float _712 = ((((_675.y - _702) * _274) + _702) * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3955 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))));
    float _721 = _711 + (cbMtdParam._m0[21u].w * ((_288.x * 2.0) + (-1.0)));
    float _722 = _712 + (cbMtdParam._m0[21u].w * ((_288.y * 2.0) + (-1.0)));
    float _725 = fma(_718, _243, fma(_722, _235 * TANGENT.x, (_221 * _213) * _721));
    float _728 = fma(_718, _244, fma(_722, _235 * TANGENT.y, (_221 * _214) * _721));
    float _731 = fma(_718, _245, fma(_722, _235 * TANGENT.z, (_221 * _215) * _721));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _3966 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _739 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3988 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3999 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4010 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _743 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _827 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _829 = _827.w;
    float _848 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _851 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _854 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    vec4 _856 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _867 = (((_856.y - _739) + (_856.w * _739)) * cbMtdParam._m0[3u].x) + _739;
    uint _880 = uint(roundEven(NORMAL.w)) * 13u;
    uint _882 = (_880 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_882].z;
    float _4021 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    vec4 _894 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _899 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _910 = (((_899.x - _743) + (_899.w * _743)) * cbMtdParam._m0[3u].x) + _743;
    float _923 = (cbMtdParam._m0[3u].x * (((_891 * _829) - _891) + _894.x)) + _891;
    float _924 = (cbMtdParam._m0[3u].x * (((_892 * _829) - _892) + _894.y)) + _892;
    float _925 = (cbMtdParam._m0[3u].x * (((_893 * _829) - _893) + _894.z)) + _893;
    float _926 = 1.0 - _910;
    float _927 = _926 * _923;
    float _928 = _926 * _924;
    float _929 = _926 * _925;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _910;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _910;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _910;
    float _937 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    vec4 _949 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _952 = _949.x * TEXCOORD_4;
    float _953 = dot(vec3(_736, _737, _738), vec3(_816, _817, _818));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _736) - _816;
    float _961 = (_956 * _737) - _817;
    float _962 = (_956 * _738) - _818;
    float _966 = abs(dot(vec3(_816, _817, _818), vec3(_736, _737, _738)));
    float _4054 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_867);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _987 = (1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _968;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1055 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1059 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _736;
        float _1084 = _1020 + _737;
        float _1085 = _1024 + _738;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1051;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1055;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1059;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_736, _737, _738), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4102 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_736, _737, _738), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4135 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_736, _737, _738), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4168 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1370 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1374 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1397 = _1016 + _736;
        float _1398 = _1020 + _737;
        float _1399 = _1024 + _738;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_736, _737, _738), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4231 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_736, _737, _738), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4264 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_736, _737, _738), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4297 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1338)) + _1338;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _960 * 0.5;
    float _1704 = _961 * 0.5;
    float _1705 = _962 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1819 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1823 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1827 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1830 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1833 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1836 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1864;
        if (_1830 > 0.0)
        {
            _1864 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1864 = frontier_phi_16_14_ladder;
        }
        float _2035;
        if (_1833 > 0.0)
        {
            _2035 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2329;
        if (_1836 > 0.0)
        {
            _2329 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2329 = frontier_phi_37_32_ladder;
        }
        float _2331 = isnan(_2035) ? _1864 : (isnan(_1864) ? _2035 : min(_1864, _2035));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1830) + _1819;
        float _2337 = (_2332 * _1833) + _1823;
        float _2338 = (_2332 * _1836) + _1827;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2341 = (-1.0) - _2339;
        float _2343 = _2339 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2338 > _2343) || ((_2338 < _2341) || ((_2337 > _2343) || ((_2337 < _2341) || ((_2336 < _2341) || (_2336 > _2343))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2338, cbModelParam._m0[9u].z, fma(_2337, cbModelParam._m0[9u].y, _2336 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2338, cbModelParam._m0[10u].z, fma(_2337, cbModelParam._m0[10u].y, _2336 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2338, cbModelParam._m0[11u].z, fma(_2337, cbModelParam._m0[11u].y, _2336 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_15_37_ladder = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2483.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2483.z * cbModelParam._m0[1u].y;
        }
        _1852 = frontier_phi_15_37_ladder_1;
        _1854 = frontier_phi_15_37_ladder;
        _1856 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1772);
        _1852 = _1840.x * cbModelParam._m0[1u].y;
        _1854 = _1840.y * cbModelParam._m0[1u].y;
        _1856 = _1840.z * cbModelParam._m0[1u].y;
    }
    float _1860 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1860 : min(cbModelParam._m0[25u].w, _1860));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1914 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1918 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1922 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1925 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1928 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1931 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2040;
        if (_1925 > 0.0)
        {
            _2040 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2040 = frontier_phi_27_23_ladder;
        }
        float _2356;
        if (_1928 > 0.0)
        {
            _2356 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2356 = frontier_phi_39_34_ladder;
        }
        float _2694;
        if (_1931 > 0.0)
        {
            _2694 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2694 = frontier_phi_49_46_ladder;
        }
        float _2696 = isnan(_2356) ? _2040 : (isnan(_2040) ? _2356 : min(_2040, _2356));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _1925) + _1914;
        float _2702 = (_2697 * _1928) + _1918;
        float _2703 = (_2697 * _1931) + _1922;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1861);
            frontier_phi_24_49_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _1950 = frontier_phi_24_49_ladder_2;
        _1952 = frontier_phi_24_49_ladder_1;
        _1954 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1861);
        _1950 = _1934.x * cbModelParam._m0[1u].z;
        _1952 = _1934.y * cbModelParam._m0[1u].z;
        _1954 = _1934.z * cbModelParam._m0[1u].z;
    }
    float _1967 = (((_987 * _937) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1969 = (((_987 * _939) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1971 = (((_987 * _940) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1967 * cbSceneParam._m0[91u].x));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2027 = _2014 / _2026;
    float _2028 = _2018 / _2026;
    float _2029 = _2022 / _2026;
    float _2175;
    float _2176;
    float _2177;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2056 = ((uint(_2029 > cbSceneParam._m0[59u].y) + uint(_2029 > cbSceneParam._m0[59u].x)) + uint(_2029 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2057 = _2056 + 43u;
        uint _2065 = _2056 + 44u;
        uint _2073 = _2056 + 45u;
        uint _2081 = _2056 + 46u;
        float _2092 = fma(_2026, cbSceneParam._m0[_2057].w, fma(_2022, cbSceneParam._m0[_2057].z, fma(_2018, cbSceneParam._m0[_2057].y, _2014 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2026, cbSceneParam._m0[_2065].w, fma(_2022, cbSceneParam._m0[_2065].z, fma(_2018, cbSceneParam._m0[_2065].y, _2014 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2026, cbSceneParam._m0[_2081].w, fma(_2022, cbSceneParam._m0[_2081].z, fma(_2018, cbSceneParam._m0[_2081].y, _2014 * cbSceneParam._m0[_2081].x)));
        float _2109 = cbSceneParam._m0[33u].z * _2104;
        float _2111 = cbSceneParam._m0[33u].w * _2104;
        float _2114 = fma(_2026, cbSceneParam._m0[_2073].w, fma(_2022, cbSceneParam._m0[_2073].z, fma(_2018, cbSceneParam._m0[_2073].y, _2014 * cbSceneParam._m0[_2073].x))) / _2104;
        float _2161 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
        float _4423 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2168 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2092) / _2104, (_2111 + _2096) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 + _2092) / _2104, (_2096 - _2109) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2109) / _2104, (_2096 - _2111) / _2104), _2114), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 - _2111) / _2104, (_2109 + _2096) / _2104), _2114), 0.0)).x), vec4(0.25)));
        _2175 = 1.0 - (_2168 * cbSceneParam._m0[34u].x);
        _2176 = 1.0 - (_2168 * cbSceneParam._m0[34u].y);
        _2177 = 1.0 - (_2168 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2175 = 1.0;
        _2176 = 1.0;
        _2177 = 1.0;
    }
    float _2241;
    float _2243;
    float _2245;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2229 = fma(_2026, cbSceneParam._m0[63u].w, fma(_2022, cbSceneParam._m0[63u].z, fma(_2018, cbSceneParam._m0[63u].y, _2014 * cbSceneParam._m0[63u].x)));
        float _2230 = fma(_2026, cbSceneParam._m0[60u].w, fma(_2022, cbSceneParam._m0[60u].z, fma(_2018, cbSceneParam._m0[60u].y, _2014 * cbSceneParam._m0[60u].x))) / _2229;
        float _2231 = fma(_2026, cbSceneParam._m0[61u].w, fma(_2022, cbSceneParam._m0[61u].z, fma(_2018, cbSceneParam._m0[61u].y, _2014 * cbSceneParam._m0[61u].x))) / _2229;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2230 >= cbSceneParam._m0[64u].x) && (_2231 >= cbSceneParam._m0[64u].y)) && (_2230 <= cbSceneParam._m0[64u].z)) && (_2231 <= cbSceneParam._m0[64u].w))
        {
            float _2369 = fma(_2026, cbSceneParam._m0[62u].w, fma(_2022, cbSceneParam._m0[62u].z, fma(_2018, cbSceneParam._m0[62u].y, _2014 * cbSceneParam._m0[62u].x))) / _2229;
            float _2373 = isnan(cbSceneParam._m0[41u].w) ? _2369 : (isnan(_2369) ? cbSceneParam._m0[41u].w : max(_2369, cbSceneParam._m0[41u].w));
            float _2416 = (cbSceneParam._m0[33u].x - sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029))) * cbSceneParam._m0[33u].y;
            float _4439 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
            float _2423 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2230, cbSceneParam._m0[33u].w + _2231), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2230, _2231 - cbSceneParam._m0[33u].z), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2230 - cbSceneParam._m0[33u].z, _2231 - cbSceneParam._m0[33u].w), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2230 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2231), _2373), 0.0)).x), vec4(0.25)));
            float _2427 = 1.0 - (_2423 * cbSceneParam._m0[34u].x);
            float _2428 = 1.0 - (_2423 * cbSceneParam._m0[34u].y);
            float _2429 = 1.0 - (_2423 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_36_35_ladder_1 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
            frontier_phi_36_35_ladder_2 = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
        }
        else
        {
            frontier_phi_36_35_ladder = _2176;
            frontier_phi_36_35_ladder_1 = _2177;
            frontier_phi_36_35_ladder_2 = _2175;
        }
        _2241 = frontier_phi_36_35_ladder_2;
        _2243 = frontier_phi_36_35_ladder;
        _2245 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2241 = _2175;
        _2243 = _2176;
        _2245 = _2177;
    }
    uvec4 _2250 = floatBitsToUint(cbInstanceData._m0[_880 + 5u]);
    uint _2252 = _2250.x * 14u;
    uint _2253 = _2252 + 13u;
    float _2260 = _952 + (-1.0);
    float _2265 = (cbLight._m0[_2253].x * _2260) + 1.0;
    float _2266 = (cbLight._m0[_2253].y * _2260) + 1.0;
    float _2267 = (cbLight._m0[_2253].z * _2260) + 1.0;
    float _2268 = (cbLight._m0[_2253].w * _2260) + 1.0;
    uint _2269 = _2252 + 5u;
    float _2275 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2279 = _2252 + 4u;
    float _2288 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2292 = _2252 | 1u;
    float _2303 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_736, _737, _738));
    float _2306 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_736, _737, _738));
    float _4475 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _4486 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2311 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2313 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2320 = ((cbLight._m0[_2269].x * _2275) * _2313) + (((cbLight._m0[_2279].x * _2241) * _2288) * _2311);
    float _2321 = ((_2275 * cbLight._m0[_2269].y) * _2313) + (((cbLight._m0[_2279].y * _2243) * _2288) * _2311);
    float _2322 = ((_2275 * cbLight._m0[_2269].z) * _2313) + (((cbLight._m0[_2279].z * _2245) * _2288) * _2311);
    uvec4 _2326 = floatBitsToUint(cbLight._m0[_2252 + 12u]);
    bool _2328 = _2326.x == 0u;
    float _2430;
    float _2432;
    float _2434;
    if (_2328)
    {
        _2430 = _2320;
        _2432 = _2321;
        _2434 = _2322;
    }
    else
    {
        uint _2438 = _2252 + 6u;
        float _2454 = (dot(vec3(cbLight._m0[_2252 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2455 = _2454 * _2454;
        float _4497 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2456 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2457 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2430 = (((cbLight._m0[_2438].x * 0.3183098733425140380859375) * _2456) * _2457) + _2320;
        _2432 = (((cbLight._m0[_2438].y * 0.3183098733425140380859375) * _2456) * _2457) + _2321;
        _2434 = (((cbLight._m0[_2438].z * 0.3183098733425140380859375) * _2456) * _2457) + _2322;
    }
    bool _2437 = _2326.y == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2437)
    {
        _2492 = _2430;
        _2494 = _2432;
        _2496 = _2434;
    }
    else
    {
        uint _2665 = _2252 + 7u;
        float _2681 = (dot(vec3(cbLight._m0[_2252 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2682 = _2681 * _2681;
        float _4513 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2683 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2684 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2492 = (((cbLight._m0[_2665].x * 0.3183098733425140380859375) * _2683) * _2684) + _2430;
        _2494 = (((cbLight._m0[_2665].y * 0.3183098733425140380859375) * _2683) * _2684) + _2432;
        _2496 = (((cbLight._m0[_2665].z * 0.3183098733425140380859375) * _2683) * _2684) + _2434;
    }
    uint _2499 = _2252 + 8u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _867) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2252].x + _816;
    float _2515 = cbLight._m0[_2252].y + _817;
    float _2516 = cbLight._m0[_2252].z + _818;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2252].xyz));
    float _4529 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2528 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2529 = dot(vec3(_736, _737, _738), vec3(_2521, _2522, _2523));
    float _4551 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2521, _2522, _2523));
    float _4562 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2513 * _2513;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
    float _2550 = 0.959999978542327880859375 - _934;
    float _2552 = 0.959999978542327880859375 - _935;
    float _2553 = 0.959999978542327880859375 - _936;
    float _2560 = 1.0 - _2513;
    float _2571 = (0.5 / (((_2528 * ((_2527 * _2560) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2528 * _2560) + _2513) * _2527))) * _2527;
    float _4573 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    uint _2587 = _2252 + 9u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _867) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2292].x + _816;
    float _2601 = cbLight._m0[_2292].y + _817;
    float _2602 = cbLight._m0[_2292].z + _818;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2292].xyz));
    float _4584 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2614 = dot(vec3(_736, _737, _738), vec3(_2607, _2608, _2609));
    float _4595 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2607, _2608, _2609));
    float _4606 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2599 * _2599;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2640 = 1.0 - _2599;
    float _2650 = (0.5 / (((_2528 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2528 * _2640) + _2599) * _2613))) * _2613;
    float _4617 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2652 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    float _2662 = (((((_2633 * _2550) + _937) * cbLight._m0[_2587].x) * _2652) * _2275) + ((((cbLight._m0[_2499].x * _2241) * ((_2549 * _2550) + _937)) * _2573) * _2288);
    float _2663 = (((((_2633 * _2552) + _939) * cbLight._m0[_2587].y) * _2652) * _2275) + ((((cbLight._m0[_2499].y * _2243) * ((_2549 * _2552) + _939)) * _2573) * _2288);
    float _2664 = (((((_2633 * _2553) + _940) * cbLight._m0[_2587].z) * _2652) * _2275) + ((((cbLight._m0[_2499].z * _2245) * ((_2549 * _2553) + _940)) * _2573) * _2288);
    float _2720;
    float _2722;
    float _2724;
    if (_2328)
    {
        _2720 = _2662;
        _2722 = _2663;
        _2724 = _2664;
    }
    else
    {
        uint _2726 = _2252 + 2u;
        uint _2730 = _2252 + 10u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _867) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _816;
        float _2747 = cbLight._m0[_2726].y + _817;
        float _2748 = cbLight._m0[_2726].z + _818;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2726].xyz));
        float _4628 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2760 = dot(vec3(_736, _737, _738), vec3(_2753, _2754, _2755));
        float _4639 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4650 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
        float _2786 = 1.0 - _2745;
        float _2796 = (0.5 / (((_2528 * ((_2759 * _2786) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2528 * _2786) + _2745) * _2759))) * _2759;
        float _4661 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2798 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2799 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2720 = (((((_2779 * _2550) + _937) * cbLight._m0[_2730].x) * _2798) * _2799) + _2662;
        _2722 = (((((_2779 * _2552) + _939) * cbLight._m0[_2730].y) * _2798) * _2799) + _2663;
        _2724 = (((((_2779 * _2553) + _940) * cbLight._m0[_2730].z) * _2798) * _2799) + _2664;
    }
    float _2830;
    float _2832;
    float _2834;
    if (_2437)
    {
        _2830 = _2720;
        _2832 = _2722;
        _2834 = _2724;
    }
    else
    {
        uint _2841 = _2252 + 3u;
        uint _2845 = _2252 + 11u;
        float _2859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2841].w)) * _867) * 0.949999988079071044921875);
        float _2860 = _2859 * _2859;
        float _2861 = cbLight._m0[_2841].x + _816;
        float _2862 = cbLight._m0[_2841].y + _817;
        float _2863 = cbLight._m0[_2841].z + _818;
        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
        float _2868 = _2867 * _2861;
        float _2869 = _2867 * _2862;
        float _2870 = _2867 * _2863;
        float _2871 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2841].xyz));
        float _4677 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2875 = dot(vec3(_736, _737, _738), vec3(_2868, _2869, _2870));
        float _4688 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2879 = dot(vec3(cbLight._m0[_2841].xyz), vec3(_2868, _2869, _2870));
        float _4699 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2883 = _2860 * _2860;
        float _2887 = ((_2878 * _2878) * (_2883 + (-1.0))) + 1.0;
        float _2894 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2901 = 1.0 - _2860;
        float _2911 = (0.5 / (((_2528 * ((_2874 * _2901) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2528 * _2901) + _2860) * _2874))) * _2874;
        float _4710 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2913 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2883 / ((_2887 * _2887) * 3.141590118408203125));
        float _2914 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2830 = (((((_2894 * _2550) + _937) * cbLight._m0[_2845].x) * _2913) * _2914) + _2720;
        _2832 = (((((_2894 * _2552) + _939) * cbLight._m0[_2845].y) * _2913) * _2914) + _2722;
        _2834 = (((((_2894 * _2553) + _940) * cbLight._m0[_2845].z) * _2913) * _2914) + _2724;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2250.y == 0u)
    {
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.x;
        uint _2947 = uint((float(_2935.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2936))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2936)));
        float _2957 = (log2(_2029 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2958 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        uint _2961 = uint(isnan(14.0) ? _2958 : (isnan(_2958) ? 14.0 : min(_2958, 14.0)));
        uvec4 _2966 = texelFetch(g_lightClusterGridBuffer, int(((_2961 << 2u) + (_2947 << 6u)) >> 2u));
        uint _2967 = _2966.x;
        uint _2968 = _2935.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2968 >> 4u) & 15u)) + 4294967295u) & _2967) == 0u) || ((_2968 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            uint _3196 = 0u;
            uint _3205;
            bool _3206;
            for (;;)
            {
                _3205 = texelFetch(g_lightClassification, int((((_2961 << 5u) + (_2947 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                _3206 = _3205 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3206)
                {
                    frontier_phi_68_pred = _3195;
                    frontier_phi_68_pred_1 = _3194;
                    frontier_phi_68_pred_2 = _3193;
                    frontier_phi_68_pred_3 = _3191;
                    frontier_phi_68_pred_4 = _3190;
                    frontier_phi_68_pred_5 = _3192;
                }
                else
                {
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    uint _3320;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3205;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    for (;;)
                    {
                        uint _3324 = uint(findLSB(_3320)) + (_3196 << 5u);
                        uint _3321 = (_3320 + 4294967295u) & _3320;
                        uint _3326 = _3324 * 48u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3346 = (_3324 * 48u) + 4u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3365 = (_3324 * 48u) + 8u;
                        vec3 _3376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x));
                        float _3380 = _3340.x - _2027;
                        float _3381 = _3340.y - _2028;
                        float _3382 = _3340.z - _2029;
                        float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                        float _3386 = inversesqrt(_3383);
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3390 = dot(vec3(_848, _851, _854), vec3(_3387, _3388, _3389));
                        float _3395 = 1.0 - (_3383 * _3340.w);
                        float _4736 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3397 = sqrt(_3383) * _3359.w;
                        float _3400 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3390) + _3401;
                        float _3407 = _3397 * _3397;
                        float _3411 = ((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3396) / ((_3407 * 0.699999988079071044921875) + 1.0);
                        float _3415 = (-0.0) - _2027;
                        float _3416 = (-0.0) - _2028;
                        float _3417 = (-0.0) - _2029;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3431 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                        float _3432 = 1.0 - _968;
                        float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                        float _3440 = _3439 * _3439;
                        float _3441 = _3440 * _3440;
                        float _3442 = _3422 + _3387;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3452 = dot(vec3(_848, _851, _854), vec3(_3422, _3423, _3424));
                        float _4752 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3456 = dot(vec3(_848, _851, _854), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                        float _4763 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                        float _3464 = _3400 * _3440;
                        float _3465 = _3464 * _3464;
                        float _3468 = ((1.0 - _3465) * _3390) + _3465;
                        float _4774 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3470 = 1.0 - _3440;
                        float _3480 = (0.5 / (((_3469 * ((_3455 * _3470) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3440) * _3455))) * _3469;
                        float _4785 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3491 = (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3463 * _3463) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125))) * _3396;
                        _3249 = (_3411 * _3359.x) + _3317;
                        _3250 = (_3411 * _3359.y) + _3318;
                        _3251 = (_3411 * _3359.z) + _3319;
                        _3246 = (_3491 * _3376.x) + _3314;
                        _3247 = (_3491 * _3376.y) + _3315;
                        _3248 = (_3491 * _3376.z) + _3316;
                        if (_3321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3321;
                        }
                    }
                    frontier_phi_68_pred = _3251;
                    frontier_phi_68_pred_1 = _3250;
                    frontier_phi_68_pred_2 = _3249;
                    frontier_phi_68_pred_3 = _3247;
                    frontier_phi_68_pred_4 = _3246;
                    frontier_phi_68_pred_5 = _3248;
                }
                _3057 = frontier_phi_68_pred;
                _3055 = frontier_phi_68_pred_1;
                _3053 = frontier_phi_68_pred_2;
                _3049 = frontier_phi_68_pred_3;
                _3047 = frontier_phi_68_pred_4;
                _3051 = frontier_phi_68_pred_5;
                uint _3197 = _3196 + 1u;
                if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3190 = _3047;
                    _3191 = _3049;
                    _3192 = _3051;
                    _3193 = _3053;
                    _3194 = _3055;
                    _3195 = _3057;
                    _3196 = _3197;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        if (((4294967295u << _3063) & _2967) == 0u)
        {
            _3158 = _3046;
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
            _3166 = _3054;
            _3168 = _3056;
        }
        else
        {
            float _3183 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
            float _3184 = _3183 * _2027;
            float _3185 = _3183 * _2028;
            float _3186 = _3183 * _2029;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3297 = _3046;
                float _3298 = _3048;
                float _3299 = _3050;
                float _3300 = _3052;
                float _3301 = _3054;
                float _3302 = _3056;
                uint _3303 = _3063;
                uint _3312;
                bool _3313;
                for (;;)
                {
                    _3312 = texelFetch(g_lightClassification, int((((_2961 << 5u) + (_2947 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                    _3313 = _3312 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3313)
                    {
                        frontier_phi_74_pred = _3299;
                        frontier_phi_74_pred_1 = _3298;
                        frontier_phi_74_pred_2 = _3297;
                        frontier_phi_74_pred_3 = _3302;
                        frontier_phi_74_pred_4 = _3301;
                        frontier_phi_74_pred_5 = _3300;
                    }
                    else
                    {
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        float _3512 = _3300;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        uint _3515 = _3312;
                        uint _3516;
                        vec4 _3541;
                        float _3542;
                        vec4 _3557;
                        vec3 _3569;
                        vec4 _3584;
                        vec4 _3599;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3526 = ((_3303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3515));
                            _3516 = (_3515 + 4294967295u) & _3515;
                            uint _3528 = _3526 * 40u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3542 = _3541.w;
                            uint _3544 = (_3526 * 40u) + 4u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3526 * 40u) + 8u;
                            _3569 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x));
                            uint _3571 = (_3526 * 40u) + 16u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3586 = (_3526 * 40u) + 20u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3602 = (_3526 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3526 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2029, _3634.z, fma(_2028, _3634.y, _3634.x * _2027)) + _3634.w;
                            _3647 = !((fma(_2029, _3615.z, fma(_2028, _3615.y, _3615.x * _2027)) + _3615.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3541.x - _2027;
                                float _3675 = _3541.y - _2028;
                                float _3676 = _3541.z - _2029;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3542 * _3542));
                                float _4796 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3692 = sqrt(_3677) * _3557.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_848, _851, _854))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2029, _3584.z, fma(_2028, _3584.y, _3584.x * _2027)) + _3584.w) / _3646;
                                float _3706 = (fma(_2029, _3599.z, fma(_2028, _3599.y, _3599.x * _2027)) + _3599.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4812 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _968;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3184;
                                float _3736 = _3682 - _3185;
                                float _3737 = _3683 - _3186;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_848, _851, _854), vec3((-0.0) - _3184, (-0.0) - _3185, (-0.0) - _3186));
                                float _4823 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3749 = dot(vec3(_848, _851, _854), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4834 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_848, _851, _854), vec3(_3681, _3682, _3683))) + _3758;
                                float _4845 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4856 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3786 * _3569.z;
                                frontier_phi_80_pred_1 = _3786 * _3569.y;
                                frontier_phi_80_pred_2 = _3786 * _3569.x;
                                frontier_phi_80_pred_3 = _3712 * _3557.z;
                                frontier_phi_80_pred_4 = _3712 * _3557.y;
                                frontier_phi_80_pred_5 = _3712 * _3557.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_80_pred;
                            _3791 = frontier_phi_80_pred_1;
                            _3790 = frontier_phi_80_pred_2;
                            _3795 = frontier_phi_80_pred_3;
                            _3794 = frontier_phi_80_pred_4;
                            _3793 = frontier_phi_80_pred_5;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            _3496 = _3790 + _3509;
                            _3497 = _3791 + _3510;
                            _3498 = _3792 + _3511;
                            if (_3516 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3516;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3498;
                        frontier_phi_74_pred_1 = _3497;
                        frontier_phi_74_pred_2 = _3496;
                        frontier_phi_74_pred_3 = _3501;
                        frontier_phi_74_pred_4 = _3500;
                        frontier_phi_74_pred_5 = _3499;
                    }
                    _3163 = frontier_phi_74_pred;
                    _3161 = frontier_phi_74_pred_1;
                    _3159 = frontier_phi_74_pred_2;
                    _3169 = frontier_phi_74_pred_3;
                    _3167 = frontier_phi_74_pred_4;
                    _3165 = frontier_phi_74_pred_5;
                    uint _3304 = _3303 + 1u;
                    if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3297 = _3159;
                        _3298 = _3161;
                        _3299 = _3163;
                        _3300 = _3165;
                        _3301 = _3167;
                        _3302 = _3169;
                        _3303 = _3304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3167;
                frontier_phi_62_63_ladder_1 = _3165;
                frontier_phi_62_63_ladder_2 = _3163;
                frontier_phi_62_63_ladder_3 = _3169;
                frontier_phi_62_63_ladder_4 = _3161;
                frontier_phi_62_63_ladder_5 = _3159;
            }
            else
            {
                frontier_phi_62_63_ladder = _3054;
                frontier_phi_62_63_ladder_1 = _3052;
                frontier_phi_62_63_ladder_2 = _3050;
                frontier_phi_62_63_ladder_3 = _3056;
                frontier_phi_62_63_ladder_4 = _3048;
                frontier_phi_62_63_ladder_5 = _3046;
            }
            _3158 = frontier_phi_62_63_ladder_5;
            _3160 = frontier_phi_62_63_ladder_4;
            _3162 = frontier_phi_62_63_ladder_2;
            _3164 = frontier_phi_62_63_ladder_1;
            _3166 = frontier_phi_62_63_ladder;
            _3168 = frontier_phi_62_63_ladder_3;
        }
        float _3173 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2979 = (_3173 * _3164) + _2492;
        _2981 = (_3173 * _3166) + _2494;
        _2983 = (_3173 * _3168) + _2496;
        _2985 = ((_3158 * _937) * _3173) + _2830;
        _2987 = ((_3160 * _939) * _3173) + _2832;
        _2989 = ((_3162 * _940) * _3173) + _2834;
    }
    else
    {
        _2979 = _2492;
        _2981 = _2494;
        _2983 = _2496;
        _2985 = _2830;
        _2987 = _2832;
        _2989 = _2834;
    }
    float _4872 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4883 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4894 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    uint _3009 = _880 + 6u;
    float _3017 = _824 / cbSceneParam._m0[86u].x;
    float _3018 = _825 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _3072 = _3071 / _759;
        float _3083 = _3072 * _809;
        float _3084 = _810 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3086 = _3072 * _811;
        float _3088 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3084;
        float _3096 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3259;
        if (abs((_3085 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3259 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3219 = 1.0 / cbSceneParam._m0[80u].x;
            float _3220 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3221 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3230 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : min(_3220, 0.0));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            _3259 = ((abs(_3096 / _3085) * cbSceneParam._m0[80u].y) * ((((_3230 - _3231) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))))) * _3219)) - ((exp2(_3106 * _3230) - exp2(_3106 * _3231)) * _3219))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3270 = exp2((_3259 * (-1.44269502162933349609375)) * (1.0 - _3261.w));
        float _3271 = log2(_3270);
        float _3287 = log2(_3037);
        _3108 = (exp2(_3287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].x)) * _3261.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3110 = (exp2(_3287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].y)) * _3261.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3112 = (exp2(_3287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].z)) * _3261.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3114 = _3270 * _3037;
    }
    else
    {
        _3108 = _3034;
        _3110 = _3035;
        _3112 = _3036;
        _3114 = _3037;
    }
    float _3126 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3127 = _3126 == 3.0;
    float _3128 = log2(_3114);
    float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2979 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _952))) + ((_2985 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2981 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _952))) + ((_2987 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2983 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _952))) + ((_2989 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _3146 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3146 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.y = _3146 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
    SV_Target.z = _3146 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
    SV_Target.w = cbInstanceData._m0[_3009].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
}


