#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3772;
float _3773;
float _3774;
float _3775;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _272 = log2(0.0);
    float _274 = exp2(_272 * cbMtdParam._m0[20u].y);
    float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _276 = isnan(1.0) ? _275 : (isnan(_275) ? 1.0 : min(_275, 1.0));
    vec4 _290 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _295 = _290.w;
    float _303 = exp2(log2(_294 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _341 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _341.x;
    float _344 = _341.y;
    float _349 = _343 - ((_343 * _341.z) * cbMtdParam._m0[19u].w);
    bool _385 = _349 >= 0.25;
    bool _390 = _349 >= 0.3499999940395355224609375;
    bool _395 = _349 >= 0.5;
    bool _400 = _349 >= 0.64999997615814208984375;
    bool _405 = _349 >= 0.75;
    vec4 _433 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _444 = cbMtdParam._m0[9u].x * _433.x;
    float _445 = cbMtdParam._m0[9u].y * _433.y;
    float _446 = cbMtdParam._m0[9u].z * _433.z;
    float _453 = (((((((_405 ? cbMtdParam._m0[13u].x : (_400 ? cbMtdParam._m0[18u].x : (_395 ? cbMtdParam._m0[17u].x : (_390 ? cbMtdParam._m0[16u].x : (_385 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _344) + cbMtdParam._m0[10u].x) * _318.x) - _444) * _305) + _444;
    float _454 = (((((((_405 ? cbMtdParam._m0[13u].y : (_400 ? cbMtdParam._m0[18u].y : (_395 ? cbMtdParam._m0[17u].y : (_390 ? cbMtdParam._m0[16u].y : (_385 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _344) + cbMtdParam._m0[10u].y) * _318.y) - _445) * _305) + _445;
    float _455 = (((((((_405 ? cbMtdParam._m0[13u].z : (_400 ? cbMtdParam._m0[18u].z : (_395 ? cbMtdParam._m0[17u].z : (_390 ? cbMtdParam._m0[16u].z : (_385 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _344) + cbMtdParam._m0[10u].z) * _318.z) - _446) * _305) + _446;
    float _462 = exp2(log2(_295) * cbMtdParam._m0[21u].y);
    vec4 _475 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _495 = (((cbMtdParam._m0[11u].x * _475.x) - _453) * _462) + _453;
    float _496 = (((cbMtdParam._m0[11u].y * _475.y) - _454) * _462) + _454;
    float _497 = (((cbMtdParam._m0[11u].z * _475.z) - _455) * _462) + _455;
    vec4 _509 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _533 = (_262.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _509.x) - _495) * _276) + _495);
    float _535 = (_262.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _509.y) - _496) * _276) + _496);
    float _537 = (_262.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _509.z) - _497) * _276) + _497);
    float _542 = exp2(log2(1.0 - _295) * 0.00999999977648258209228515625);
    float _560 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _542) + cbMtdParam._m0[21u].z;
    float _579 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _560) + cbMtdParam._m0[20u].z) * _462) + _560;
    float _602 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _579) + cbMtdParam._m0[22u].z) * _276) + _579;
    vec4 _614 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _632 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _638 = cbMtdParam._m0[19u].x + _632.z;
    float _641 = (((cbMtdParam._m0[20u].x + _614.z) - _638) * _542) + _638;
    vec4 _653 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _665 = (_294 * 2.0) * ((((_653.z - _641) + cbMtdParam._m0[22u].x) * _462) + _641);
    vec4 _677 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _686 = (((_677.z - _665) + cbMtdParam._m0[21u].x) * _276) + _665;
    float _697 = ((_614.x - _634) * _542) + _634;
    float _698 = ((_614.y - _635) * _542) + _635;
    float _703 = ((_653.x - _697) * _462) + _697;
    float _704 = ((_653.y - _698) * _462) + _698;
    float _713 = ((((_677.x - _703) * _276) + _703) * 2.0) + (-1.0);
    float _714 = ((((_677.y - _704) * _276) + _704) * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3804 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    float _723 = _713 + (cbMtdParam._m0[21u].w * ((_290.x * 2.0) + (-1.0)));
    float _724 = _714 + (cbMtdParam._m0[21u].w * ((_290.y * 2.0) + (-1.0)));
    float _727 = fma(_720, _245, fma(_724, _237 * TANGENT.x, (_223 * _215) * _723));
    float _730 = fma(_720, _246, fma(_724, _237 * TANGENT.y, (_223 * _216) * _723));
    float _733 = fma(_720, _247, fma(_724, _237 * TANGENT.z, (_223 * _217) * _723));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    float _738 = _737 * _727;
    float _739 = _737 * _730;
    float _740 = _737 * _733;
    float _3815 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _741 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3837 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3848 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3859 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _745 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _811 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _801);
    float _812 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _801);
    float _813 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _801);
    float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
    float _818 = _811 * _817;
    float _819 = _812 * _817;
    float _820 = _813 * _817;
    vec4 _825 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _827 = _825.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_811 * _811) + (_812 * _812)) + (_813 * _813));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _3870 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _3881 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) - _1056)) + _1056) < ((_827 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _842 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _844 = _842.w;
    float _862 = fma(_740, cbSceneParam._m0[5u].z, fma(_739, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _738));
    float _865 = fma(_740, cbSceneParam._m0[6u].z, fma(_739, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _738));
    float _868 = fma(_740, cbSceneParam._m0[7u].z, fma(_739, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _738));
    vec4 _870 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _881 = (((_870.y - _741) + (_870.w * _741)) * cbMtdParam._m0[3u].x) + _741;
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _895 = _894 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3892 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _908 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _913 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _924 = (((_913.x - _745) + (_913.w * _745)) * cbMtdParam._m0[3u].x) + _745;
    float _937 = (cbMtdParam._m0[3u].x * (((_905 * _844) - _905) + _908.x)) + _905;
    float _938 = (cbMtdParam._m0[3u].x * (((_906 * _844) - _906) + _908.y)) + _906;
    float _939 = (cbMtdParam._m0[3u].x * (((_907 * _844) - _907) + _908.z)) + _907;
    float _940 = 1.0 - _924;
    float _941 = _940 * _937;
    float _942 = _940 * _938;
    float _943 = _940 * _939;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _924;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _924;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _924;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _966 = _963.x * TEXCOORD_4;
    float _967 = dot(vec3(_738, _739, _740), vec3(_818, _819, _820));
    float _970 = _967 * 2.0;
    float _974 = (_970 * _738) - _818;
    float _975 = (_970 * _739) - _819;
    float _976 = (_970 * _740) - _820;
    float _980 = abs(dot(vec3(_818, _819, _820), vec3(_738, _739, _740)));
    float _3925 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = sqrt(_881);
    float _995 = exp2((_982 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_982 * 3.0));
    float _1001 = (1.0 - _995) * ((_982 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _982;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1097 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1101 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1125 = _1030 + _738;
        float _1126 = _1034 + _739;
        float _1127 = _1038 + _740;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1093;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1097;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1101;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_738, _739, _740), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3973 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_738, _739, _740), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4006 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_738, _739, _740), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4039 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1411 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1415 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1419 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1442 = _1030 + _738;
        float _1443 = _1034 + _739;
        float _1444 = _1038 + _740;
        float _1454 = fma(_1444, cbModelParam._m0[30u].z, fma(_1443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1442)) - _1411;
        float _1455 = fma(_1444, cbModelParam._m0[31u].z, fma(_1443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1442)) - _1415;
        float _1456 = fma(_1444, cbModelParam._m0[32u].z, fma(_1443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1442)) - _1419;
        float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
        float _1473 = ((_1460 * _1454) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1411 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1460 * _1455) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1415 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1460 * _1456) / cbModelParam._m0[35u].z) + ((((((_1419 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        float _1510 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1477.x + (-0.5));
        float _1512 = _1510 * (_1477.y + (-0.5));
        float _1513 = _1510 * (_1477.z + (-0.5));
        float _1520 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1484.x + (-0.5));
        float _1522 = _1520 * (_1484.y + (-0.5));
        float _1523 = _1520 * (_1484.z + (-0.5));
        float _1530 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1491.x + (-0.5));
        float _1532 = _1530 * (_1491.y + (-0.5));
        float _1533 = _1530 * (_1491.z + (-0.5));
        float _1540 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1498.x + (-0.5));
        float _1542 = _1540 * (_1498.y + (-0.5));
        float _1543 = _1540 * (_1498.z + (-0.5));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = _1511 * 0.5;
        float _1548 = _1521 * 0.5;
        float _1549 = _1531 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_738, _739, _740), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4102 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1574 + 1.0))) + _1579) * _1544;
        float _1589 = _1512 * 0.5;
        float _1590 = _1522 * 0.5;
        float _1591 = _1532 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_738, _739, _740), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4135 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1616 + 1.0))) + _1621) * _1545;
        float _1631 = _1513 * 0.5;
        float _1632 = _1523 * 0.5;
        float _1633 = _1533 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_738, _739, _740), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4168 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1658 + 1.0))) + _1663) * _1546;
        _1680 = _1513;
        _1681 = _1512;
        _1682 = _1511;
        _1683 = _1523;
        _1684 = _1522;
        _1685 = _1521;
        _1686 = _1533;
        _1687 = _1532;
        _1688 = _1531;
        _1689 = _1546;
        _1690 = _1545;
        _1691 = _1544;
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
    }
    else
    {
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = _1368;
        _1692 = 0.0;
        _1693 = 0.0;
        _1694 = 0.0;
    }
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1727 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1704));
    float _1748 = _974 * 0.5;
    float _1749 = _975 * 0.5;
    float _1750 = _976 * 0.5;
    float _1751 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1754 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1757 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1791;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1764 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1768 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1772 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1779 = dot(vec4(cbModelParam._m0[39u]), vec4(_1748, _1749, _1750, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1802;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1793 = dot(vec4(cbModelParam._m0[40u]), vec4(_1748, _1749, _1750, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1806 = (_1802 * cbModelParam._m0[1u].x) + (_1791 * (1.0 - cbModelParam._m0[1u].x));
    float _1816 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _881);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1816 : min(cbModelParam._m0[25u].z, _1816));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1864 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1868 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1872 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1875 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1878 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1881 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1909;
        if (_1875 > 0.0)
        {
            _1909 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1909 = frontier_phi_19_17_ladder;
        }
        float _2132;
        if (_1878 > 0.0)
        {
            _2132 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2132 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1881 > 0.0)
        {
            _2389 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2391 = isnan(_2132) ? _1909 : (isnan(_1909) ? _2132 : min(_1909, _2132));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1875) + _1864;
        float _2397 = (_2392 * _1878) + _1868;
        float _2398 = (_2392 * _1881) + _1872;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1817);
            frontier_phi_18_40_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1897 = frontier_phi_18_40_ladder_2;
        _1899 = frontier_phi_18_40_ladder_1;
        _1901 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1817);
        _1897 = _1885.x * cbModelParam._m0[1u].y;
        _1899 = _1885.y * cbModelParam._m0[1u].y;
        _1901 = _1885.z * cbModelParam._m0[1u].y;
    }
    float _1905 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _881);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1905 : min(cbModelParam._m0[25u].w, _1905));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1973 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1976 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _2137;
        if (_1970 > 0.0)
        {
            _2137 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2137 = frontier_phi_30_26_ladder;
        }
        float _2416;
        if (_1973 > 0.0)
        {
            _2416 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2416 = frontier_phi_42_37_ladder;
        }
        float _2629;
        if (_1976 > 0.0)
        {
            _2629 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2629 = frontier_phi_51_48_ladder;
        }
        float _2631 = isnan(_2416) ? _2137 : (isnan(_2137) ? _2416 : min(_2137, _2416));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _1970) + _1959;
        float _2637 = (_2632 * _1973) + _1963;
        float _2638 = (_2632 * _1976) + _1967;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2639;
        float _2642 = _2639 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2638 > _2642) || ((_2638 < _2640) || ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 < _2640) || (_2636 > _2642))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2638, cbModelParam._m0[17u].z, fma(_2637, cbModelParam._m0[17u].y, _2636 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2638, cbModelParam._m0[18u].z, fma(_2637, cbModelParam._m0[18u].y, _2636 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2638, cbModelParam._m0[19u].z, fma(_2637, cbModelParam._m0[19u].y, _2636 * cbModelParam._m0[19u].x))), _1906);
            frontier_phi_27_51_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_27_51_ladder_2;
        _1997 = frontier_phi_27_51_ladder_1;
        _1999 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1906);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2012 = (((_1001 * _951) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2014 = (((_1001 * _953) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2016 = (((_1001 * _954) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    vec4 _2033 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_839, _840));
    float _2035 = _2033.w;
    float _2047 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2035);
    float _2048 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2035);
    float _2049 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2035);
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2063 = _966 + (-1.0);
    float _2068 = (cbLight._m0[_2056].x * _2063) + 1.0;
    float _2069 = (cbLight._m0[_2056].y * _2063) + 1.0;
    float _2070 = (cbLight._m0[_2056].z * _2063) + 1.0;
    float _2071 = (cbLight._m0[_2056].w * _2063) + 1.0;
    uint _2072 = _2055 + 5u;
    float _2078 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2082 = _2055 + 4u;
    float _2091 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2095 = _2055 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_738, _739, _740));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_738, _739, _740));
    float _4304 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4315 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2072].x * _2078) * _2116) + (((cbLight._m0[_2082].x * _2047) * _2091) * _2114);
    float _2124 = ((_2078 * cbLight._m0[_2072].y) * _2116) + (((cbLight._m0[_2082].y * _2048) * _2091) * _2114);
    float _2125 = ((_2078 * cbLight._m0[_2072].z) * _2116) + (((cbLight._m0[_2082].z * _2049) * _2091) * _2114);
    uvec4 _2129 = floatBitsToUint(cbLight._m0[_2055 + 12u]);
    bool _2131 = _2129.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2131)
    {
        _2142 = _2123;
        _2144 = _2124;
        _2146 = _2125;
    }
    else
    {
        uint _2150 = _2055 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_2055 + 2u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4326 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2169 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2123;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2124;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2125;
    }
    bool _2149 = _2129.y == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2149)
    {
        _2187 = _2142;
        _2189 = _2144;
        _2191 = _2146;
    }
    else
    {
        uint _2360 = _2055 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2055 + 3u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4342 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2379 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2187 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2142;
        _2189 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2144;
        _2191 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2146;
    }
    uint _2194 = _2055 + 8u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _881) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2055].x + _818;
    float _2210 = cbLight._m0[_2055].y + _819;
    float _2211 = cbLight._m0[_2055].z + _820;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2055].xyz));
    float _4358 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2223 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2224 = dot(vec3(_738, _739, _740), vec3(_2216, _2217, _2218));
    float _4380 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2216, _2217, _2218));
    float _4391 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2208 * _2208;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2245 = 0.959999978542327880859375 - _948;
    float _2247 = 0.959999978542327880859375 - _949;
    float _2248 = 0.959999978542327880859375 - _950;
    float _2255 = 1.0 - _2208;
    float _2266 = (0.5 / (((_2223 * ((_2222 * _2255) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2255) + _2208) * _2222))) * _2222;
    float _4402 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    uint _2282 = _2055 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _881) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2095].x + _818;
    float _2296 = cbLight._m0[_2095].y + _819;
    float _2297 = cbLight._m0[_2095].z + _820;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2095].xyz));
    float _4413 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2309 = dot(vec3(_738, _739, _740), vec3(_2302, _2303, _2304));
    float _4424 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2302, _2303, _2304));
    float _4435 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2335 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2223 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2335) + _2294) * _2308))) * _2308;
    float _4446 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2357 = (((((_2328 * _2245) + _951) * cbLight._m0[_2282].x) * _2347) * _2078) + ((((cbLight._m0[_2194].x * _2047) * ((_2244 * _2245) + _951)) * _2268) * _2091);
    float _2358 = (((((_2328 * _2247) + _953) * cbLight._m0[_2282].y) * _2347) * _2078) + ((((cbLight._m0[_2194].y * _2048) * ((_2244 * _2247) + _953)) * _2268) * _2091);
    float _2359 = (((((_2328 * _2248) + _954) * cbLight._m0[_2282].z) * _2347) * _2078) + ((((cbLight._m0[_2194].z * _2049) * ((_2244 * _2248) + _954)) * _2268) * _2091);
    float _2421;
    float _2423;
    float _2425;
    if (_2131)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2055 + 2u;
        uint _2431 = _2055 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _881) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _818;
        float _2448 = cbLight._m0[_2427].y + _819;
        float _2449 = cbLight._m0[_2427].z + _820;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2427].xyz));
        float _4457 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2461 = dot(vec3(_738, _739, _740), vec3(_2454, _2455, _2456));
        float _4468 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4479 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2223 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2487) + _2446) * _2460))) * _2460;
        float _4490 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2421 = (((((_2480 * _2245) + _951) * cbLight._m0[_2431].x) * _2499) * _2500) + _2357;
        _2423 = (((((_2480 * _2247) + _953) * cbLight._m0[_2431].y) * _2499) * _2500) + _2358;
        _2425 = (((((_2480 * _2248) + _954) * cbLight._m0[_2431].z) * _2499) * _2500) + _2359;
    }
    float _2535;
    float _2537;
    float _2539;
    if (_2149)
    {
        _2535 = _2421;
        _2537 = _2423;
        _2539 = _2425;
    }
    else
    {
        uint _2546 = _2055 + 3u;
        uint _2550 = _2055 + 11u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _881) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _818;
        float _2567 = cbLight._m0[_2546].y + _819;
        float _2568 = cbLight._m0[_2546].z + _820;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2546].xyz));
        float _4506 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2580 = dot(vec3(_738, _739, _740), vec3(_2573, _2574, _2575));
        float _4517 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4528 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2223 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2606) + _2565) * _2579))) * _2579;
        float _4539 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2535 = (((((_2599 * _2245) + _951) * cbLight._m0[_2550].x) * _2618) * _2619) + _2421;
        _2537 = (((((_2599 * _2247) + _953) * cbLight._m0[_2550].y) * _2618) * _2619) + _2423;
        _2539 = (((((_2599 * _2248) + _954) * cbLight._m0[_2550].z) * _2618) * _2619) + _2425;
    }
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_2053.y == 0u)
    {
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2694;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2694;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2694;
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2710)));
        float _2731 = (log2(_2697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            uint _2999 = 0u;
            uint _3008;
            bool _3009;
            for (;;)
            {
                _3008 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                _3009 = _3008 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3009)
                {
                    frontier_phi_68_pred = _2995;
                    frontier_phi_68_pred_1 = _2998;
                    frontier_phi_68_pred_2 = _2997;
                    frontier_phi_68_pred_3 = _2996;
                    frontier_phi_68_pred_4 = _2994;
                    frontier_phi_68_pred_5 = _2993;
                }
                else
                {
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    uint _3144;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _3008;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3148 = uint(findLSB(_3144)) + (_2999 << 5u);
                        uint _3145 = (_3144 + 4294967295u) & _3144;
                        uint _3150 = _3148 * 48u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3170 = (_3148 * 48u) + 4u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3189 = (_3148 * 48u) + 8u;
                        vec3 _3200 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x));
                        float _3204 = _3164.x - _2695;
                        float _3205 = _3164.y - _2696;
                        float _3206 = _3164.z - _2697;
                        float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                        float _3210 = inversesqrt(_3207);
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3214 = dot(vec3(_862, _865, _868), vec3(_3211, _3212, _3213));
                        float _3219 = 1.0 - (_3207 * _3164.w);
                        float _4565 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3221 = sqrt(_3207) * _3183.w;
                        float _3224 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3214) + _3225;
                        float _3231 = _3221 * _3221;
                        float _3235 = ((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3220) / ((_3231 * 0.699999988079071044921875) + 1.0);
                        float _3239 = (-0.0) - _2695;
                        float _3240 = (-0.0) - _2696;
                        float _3241 = (-0.0) - _2697;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3255 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _982;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3246 + _3211;
                        float _3267 = _3247 + _3212;
                        float _3268 = _3248 + _3213;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_862, _865, _868), vec3(_3246, _3247, _3248));
                        float _4581 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3280 = dot(vec3(_862, _865, _868), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4592 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3224 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3214) + _3289;
                        float _4603 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4614 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3287 * _3287) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125))) * _3220;
                        _3068 = (_3235 * _3183.x) + _3141;
                        _3069 = (_3235 * _3183.y) + _3142;
                        _3070 = (_3235 * _3183.z) + _3143;
                        _3065 = (_3315 * _3200.x) + _3138;
                        _3066 = (_3315 * _3200.y) + _3139;
                        _3067 = (_3315 * _3200.z) + _3140;
                        if (_3145 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3145;
                        }
                    }
                    frontier_phi_68_pred = _3067;
                    frontier_phi_68_pred_1 = _3070;
                    frontier_phi_68_pred_2 = _3069;
                    frontier_phi_68_pred_3 = _3068;
                    frontier_phi_68_pred_4 = _3066;
                    frontier_phi_68_pred_5 = _3065;
                }
                _2846 = frontier_phi_68_pred;
                _2852 = frontier_phi_68_pred_1;
                _2850 = frontier_phi_68_pred_2;
                _2848 = frontier_phi_68_pred_3;
                _2844 = frontier_phi_68_pred_4;
                _2842 = frontier_phi_68_pred_5;
                uint _3000 = _2999 + 1u;
                if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2993 = _2842;
                    _2994 = _2844;
                    _2995 = _2846;
                    _2996 = _2848;
                    _2997 = _2850;
                    _2998 = _2852;
                    _2999 = _3000;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((4294967295u << _2858) & _2741) == 0u)
        {
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
            _2967 = _2847;
            _2969 = _2849;
            _2971 = _2851;
        }
        else
        {
            float _2986 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
            float _2987 = _2986 * _2695;
            float _2988 = _2986 * _2696;
            float _2989 = _2986 * _2697;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _3121 = _2841;
                float _3122 = _2843;
                float _3123 = _2845;
                float _3124 = _2847;
                float _3125 = _2849;
                float _3126 = _2851;
                uint _3127 = _2858;
                uint _3136;
                bool _3137;
                for (;;)
                {
                    _3136 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                    _3137 = _3136 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3137)
                    {
                        frontier_phi_79_pred = _3126;
                        frontier_phi_79_pred_1 = _3125;
                        frontier_phi_79_pred_2 = _3124;
                        frontier_phi_79_pred_3 = _3123;
                        frontier_phi_79_pred_4 = _3122;
                        frontier_phi_79_pred_5 = _3121;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        uint _3348 = _3136;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3359 = ((_3127 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3435 = (_3359 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3359 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_2697, _3467.z, fma(_2696, _3467.y, _3467.x * _2695)) + _3467.w;
                            _3480 = !((fma(_2697, _3448.z, fma(_2696, _3448.y, _3448.x * _2695)) + _3448.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3374.x - _2695;
                                float _3508 = _3374.y - _2696;
                                float _3509 = _3374.z - _2697;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3375 * _3375));
                                float _4625 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3525 = sqrt(_3510) * _3390.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_862, _865, _868))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_2697, _3417.z, fma(_2696, _3417.y, _3417.x * _2695)) + _3417.w) / _3479;
                                float _3539 = (fma(_2697, _3432.z, fma(_2696, _3432.y, _3432.x * _2695)) + _3432.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4641 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _982;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _2987;
                                float _3569 = _3515 - _2988;
                                float _3570 = _3516 - _2989;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2987, (-0.0) - _2988, (-0.0) - _2989));
                                float _4652 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3582 = dot(vec3(_862, _865, _868), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4663 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_862, _865, _868), vec3(_3514, _3515, _3516))) + _3591;
                                float _4674 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4685 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3545 * _3390.z;
                                frontier_phi_85_pred_1 = _3545 * _3390.y;
                                frontier_phi_85_pred_2 = _3545 * _3390.x;
                                frontier_phi_85_pred_3 = _3619 * _3402.z;
                                frontier_phi_85_pred_4 = _3619 * _3402.y;
                                frontier_phi_85_pred_5 = _3619 * _3402.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_85_pred;
                            _3627 = frontier_phi_85_pred_1;
                            _3626 = frontier_phi_85_pred_2;
                            _3625 = frontier_phi_85_pred_3;
                            _3624 = frontier_phi_85_pred_4;
                            _3623 = frontier_phi_85_pred_5;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            _3329 = _3623 + _3342;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3334;
                        frontier_phi_79_pred_1 = _3333;
                        frontier_phi_79_pred_2 = _3332;
                        frontier_phi_79_pred_3 = _3331;
                        frontier_phi_79_pred_4 = _3330;
                        frontier_phi_79_pred_5 = _3329;
                    }
                    _2972 = frontier_phi_79_pred;
                    _2970 = frontier_phi_79_pred_1;
                    _2968 = frontier_phi_79_pred_2;
                    _2966 = frontier_phi_79_pred_3;
                    _2964 = frontier_phi_79_pred_4;
                    _2962 = frontier_phi_79_pred_5;
                    uint _3128 = _3127 + 1u;
                    if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3121 = _2962;
                        _3122 = _2964;
                        _3123 = _2966;
                        _3124 = _2968;
                        _3125 = _2970;
                        _3126 = _2972;
                        _3127 = _3128;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2968;
                frontier_phi_60_61_ladder_1 = _2972;
                frontier_phi_60_61_ladder_2 = _2970;
                frontier_phi_60_61_ladder_3 = _2966;
                frontier_phi_60_61_ladder_4 = _2964;
                frontier_phi_60_61_ladder_5 = _2962;
            }
            else
            {
                frontier_phi_60_61_ladder = _2847;
                frontier_phi_60_61_ladder_1 = _2851;
                frontier_phi_60_61_ladder_2 = _2849;
                frontier_phi_60_61_ladder_3 = _2845;
                frontier_phi_60_61_ladder_4 = _2843;
                frontier_phi_60_61_ladder_5 = _2841;
            }
            _2961 = frontier_phi_60_61_ladder_5;
            _2963 = frontier_phi_60_61_ladder_4;
            _2965 = frontier_phi_60_61_ladder_3;
            _2967 = frontier_phi_60_61_ladder;
            _2969 = frontier_phi_60_61_ladder_2;
            _2971 = frontier_phi_60_61_ladder_1;
        }
        float _2976 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
        _2753 = (_2976 * _2967) + _2187;
        _2755 = (_2976 * _2969) + _2189;
        _2757 = (_2976 * _2971) + _2191;
        _2759 = ((_2961 * _951) * _2976) + _2535;
        _2761 = ((_2963 * _953) * _2976) + _2537;
        _2763 = ((_2965 * _954) * _2976) + _2539;
    }
    else
    {
        _2753 = _2187;
        _2755 = _2189;
        _2757 = _2191;
        _2759 = _2535;
        _2761 = _2537;
        _2763 = _2539;
    }
    float _4701 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4712 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4723 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2780 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2753 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _966))) + ((_2759 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1806)) * cbPerFrame._m0[3u].x);
    float _2781 = ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2755 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _966))) + ((_2761 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1806)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2757 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _966))) + ((_2763 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1806)) * cbPerFrame._m0[3u].x);
    uint _2783 = _894 + 6u;
    float _2791 = _839 / cbSceneParam._m0[86u].x;
    float _2792 = _840 / cbSceneParam._m0[86u].y;
    vec4 _2806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2808 = _2806.x;
    float _2809 = _2806.y;
    float _2810 = _2806.z;
    float _2811 = _2806.w;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _2867 = _2866 / _761;
        float _2878 = _2867 * _811;
        float _2879 = _812 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2881 = _2867 * _813;
        float _2883 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2884 = _2883 + cbSceneParam._m0[79u].w;
        float _2885 = cbSceneParam._m0[79u].w - _2879;
        float _2891 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2881 * _2881));
        float _2894 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2891;
        float _2899 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2901 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2880 - _2883) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2884 > 0.0) ? exp2(_2899 * _2884) : (2.0 - exp2(_2901 * _2884))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2894;
        }
        else
        {
            float _3022 = 1.0 / cbSceneParam._m0[80u].x;
            float _3023 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : max(_2884, _2885));
            float _3024 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : min(_2884, _2885));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            _3078 = ((abs(_2891 / _2880) * cbSceneParam._m0[80u].y) * ((((_3033 - _3034) * 2.0) - ((exp2(_2899 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0)))) - exp2(_2899 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))))) * _3022)) - ((exp2(_2901 * _3033) - exp2(_2901 * _3034)) * _3022))) + (_2894 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2811);
        _2903 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2808;
        _2905 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2809;
        _2907 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2810;
        _2909 = _3089 * _2811;
    }
    else
    {
        _2903 = _2808;
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
    }
    bool _3116;
    vec4 _2919;
    vec4 _2941;
    float _2943;
    float _2947;
    float _2948;
    float _2949;
    float _2950;
    bool _2960;
    for (;;)
    {
        _2919 = cbMatDynParam._m0[0u];
        float _2921 = roundEven(_2919.y);
        bool _2922 = _2921 == 3.0;
        float _2923 = log2(_2909);
        float _2930 = exp2(_2923 * cbSceneParam._m0[78u].x) * _2780;
        float _2931 = exp2(_2923 * cbSceneParam._m0[78u].y) * _2781;
        float _2932 = exp2(_2923 * cbSceneParam._m0[78u].z) * _2782;
        float _2939 = _827 + (-0.5);
        _2941 = cbMtdParam._m0[1u];
        _2943 = _2941.y * _2939;
        float _2946 = (_2921 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2947 = _2946 * (_2922 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2903)));
        _2948 = _2946 * (_2922 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2905)));
        _2949 = _2946 * (_2922 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2907)));
        _2950 = _2939 * 0.999000012874603271484375;
        _2960 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2960)
        {
            if ((cbInstanceData._m0[_894 + 7u].x + _2950) < 0.5)
            {
                _3116 = true;
                break;
            }
        }
        uint _3057 = _895 + uint(_2919.w);
        if ((cbInstanceData._m0[_3057].w < 1.0) && ((cbInstanceData._m0[_3057].w + _2950) < 0.5))
        {
            _3116 = true;
            break;
        }
        if ((_2943 + 1.0) < _2941.x)
        {
            _3116 = true;
            break;
        }
        _3116 = false;
        break;
    }
    float _3320;
    if (_3116)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = cbInstanceData._m0[_2783].w;
    }
    SV_Target.x = _2947;
    SV_Target.y = _2948;
    SV_Target.z = _2949;
    SV_Target.w = _3320;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2783].w;
    discard_exit();
}


