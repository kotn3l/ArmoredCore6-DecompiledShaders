#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1283;
float _3691;
float _3692;
float _3693;
float _3694;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _278 = exp2(log2(_264.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _279 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _280 = isnan(1.0) ? _279 : (isnan(_279) ? 1.0 : min(_279, 1.0));
    vec4 _294 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _299 = _294.w;
    float _307 = exp2(log2(_298 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _347 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _358 = cbMtdParam._m0[9u].x * _347.x;
    float _359 = cbMtdParam._m0[9u].y * _347.y;
    float _360 = cbMtdParam._m0[9u].z * _347.z;
    float _367 = (((cbMtdParam._m0[10u].x * _322.x) - _358) * _309) + _358;
    float _368 = (((cbMtdParam._m0[10u].y * _322.y) - _359) * _309) + _359;
    float _369 = (((cbMtdParam._m0[10u].z * _322.z) - _360) * _309) + _360;
    float _376 = exp2(log2(_299) * cbMtdParam._m0[21u].y);
    vec4 _389 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _409 = (((cbMtdParam._m0[11u].x * _389.x) - _367) * _376) + _367;
    float _410 = (((cbMtdParam._m0[11u].y * _389.y) - _368) * _376) + _368;
    float _411 = (((cbMtdParam._m0[11u].z * _389.z) - _369) * _376) + _369;
    vec4 _423 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _447 = (_264.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _423.x) - _409) * _280) + _409);
    float _449 = (_264.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _423.y) - _410) * _280) + _410);
    float _451 = (_264.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _423.z) - _411) * _280) + _411);
    float _456 = exp2(log2(1.0 - _299) * 0.00999999977648258209228515625);
    float _474 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _456) + cbMtdParam._m0[21u].z;
    float _493 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _474) + cbMtdParam._m0[20u].z) * _376) + _474;
    float _513 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _493) + cbMtdParam._m0[22u].z) * _280) + _493;
    vec4 _525 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _543 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _549 = cbMtdParam._m0[19u].x + _543.z;
    float _552 = (((cbMtdParam._m0[20u].x + _525.z) - _549) * _456) + _549;
    vec4 _565 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _577 = (_298 * 2.0) * ((((_565.z - _552) + cbMtdParam._m0[22u].x) * _376) + _552);
    vec4 _590 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _599 = (((_590.z - _577) + cbMtdParam._m0[21u].x) * _280) + _577;
    float _610 = ((_525.x - _545) * _456) + _545;
    float _611 = ((_525.y - _546) * _456) + _546;
    float _616 = ((_565.x - _610) * _376) + _610;
    float _617 = ((_565.y - _611) * _376) + _611;
    float _626 = ((((_590.x - _616) * _280) + _616) * 2.0) + (-1.0);
    float _627 = ((((_590.y - _617) * _280) + _617) * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3723 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _633 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _636 = _626 + (cbMtdParam._m0[21u].w * ((_294.x * 2.0) + (-1.0)));
    float _637 = _627 + (cbMtdParam._m0[21u].w * ((_294.y * 2.0) + (-1.0)));
    float _640 = fma(_633, _243, fma(_637, _235 * TANGENT.x, (_221 * _213) * _636));
    float _643 = fma(_633, _244, fma(_637, _235 * TANGENT.y, (_221 * _214) * _636));
    float _646 = fma(_633, _245, fma(_637, _235 * TANGENT.z, (_221 * _215) * _636));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3734 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _654 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3756 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3767 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3778 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _658 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    vec4 _738 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _740 = _738.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _963 = sqrt(((_724 * _724) + (_725 * _725)) + (_726 * _726));
        float _969 = (cbMatDynParam._m0[5u].x * _963) + cbMatDynParam._m0[5u].y;
        float _3789 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _974 = (cbMatDynParam._m0[5u].z * _963) + cbMatDynParam._m0[5u].w;
        float _3800 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) - _970)) + _970) < ((_740 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _755 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _757 = _755.w;
    float _776 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _779 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _782 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    vec4 _784 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _795 = (((_784.y - _654) + (_784.w * _654)) * cbMtdParam._m0[3u].x) + _654;
    uint _808 = uint(roundEven(NORMAL.w)) * 13u;
    uint _809 = _808 + 9u;
    uint _810 = _809 + uint(cbMatDynParam._m0[0u].w);
    float _816 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_810].x;
    float _817 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_810].y;
    float _818 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_810].z;
    float _3811 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    vec4 _822 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _827 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _838 = (((_827.x - _658) + (_827.w * _658)) * cbMtdParam._m0[3u].x) + _658;
    float _851 = (cbMtdParam._m0[3u].x * (((_819 * _757) - _819) + _822.x)) + _819;
    float _852 = (cbMtdParam._m0[3u].x * (((_820 * _757) - _820) + _822.y)) + _820;
    float _853 = (cbMtdParam._m0[3u].x * (((_821 * _757) - _821) + _822.z)) + _821;
    float _854 = 1.0 - _838;
    float _855 = _854 * _851;
    float _856 = _854 * _852;
    float _857 = _854 * _853;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _838;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _838;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _838;
    float _865 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _880 = _877.x * TEXCOORD_4;
    float _881 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _651) - _731;
    float _889 = (_884 * _652) - _732;
    float _890 = (_884 * _653) - _733;
    float _894 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3844 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_795);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _915 = (1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _916 = _909 * _896;
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_952, cbModelParam._m0[26u].z, fma(_948, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944));
        float _1011 = fma(_952, cbModelParam._m0[27u].z, fma(_948, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944));
        float _1015 = fma(_952, cbModelParam._m0[28u].z, fma(_948, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944));
        float _1040 = _944 + _651;
        float _1041 = _948 + _652;
        float _1042 = _952 + _653;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1007;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1011;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1015;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_651, _652, _653), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3892 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_651, _652, _653), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3925 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_651, _652, _653), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3958 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_952, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944));
        float _1330 = fma(_952, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944));
        float _1334 = fma(_952, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944));
        float _1357 = _944 + _651;
        float _1358 = _948 + _652;
        float _1359 = _952 + _653;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_651, _652, _653), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4021 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_651, _652, _653), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4054 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_651, _652, _653), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4087 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = _1283;
        _1604 = _1283;
        _1605 = _1283;
        _1606 = _1283;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _888 * 0.5;
    float _1664 = _889 * 0.5;
    float _1665 = _890 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_952, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_952, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_952, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1794 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1797 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1825 = frontier_phi_19_17_ladder;
        }
        float _2049;
        if (_1794 > 0.0)
        {
            _2049 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2049 = frontier_phi_28_24_ladder;
        }
        float _2306;
        if (_1797 > 0.0)
        {
            _2306 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2306 = frontier_phi_40_35_ladder;
        }
        float _2308 = isnan(_2049) ? _1825 : (isnan(_1825) ? _2049 : min(_1825, _2049));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1791) + _1780;
        float _2314 = (_2309 * _1794) + _1784;
        float _2315 = (_2309 * _1797) + _1788;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_18_40_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_18_40_ladder_2;
        _1815 = frontier_phi_18_40_ladder_1;
        _1817 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1732);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1876 = fma(_952, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944)) + cbModelParam._m0[21u].w;
        float _1880 = fma(_952, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944)) + cbModelParam._m0[22u].w;
        float _1884 = fma(_952, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944)) + cbModelParam._m0[23u].w;
        float _1887 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1890 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1893 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _2054;
        if (_1887 > 0.0)
        {
            _2054 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2054 = frontier_phi_30_26_ladder;
        }
        float _2333;
        if (_1890 > 0.0)
        {
            _2333 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2333 = frontier_phi_42_37_ladder;
        }
        float _2546;
        if (_1893 > 0.0)
        {
            _2546 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2546 = frontier_phi_51_48_ladder;
        }
        float _2548 = isnan(_2333) ? _2054 : (isnan(_2054) ? _2333 : min(_2054, _2333));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1887) + _1876;
        float _2554 = (_2549 * _1890) + _1880;
        float _2555 = (_2549 * _1893) + _1884;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_27_51_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1912 = frontier_phi_27_51_ladder_2;
        _1914 = frontier_phi_27_51_ladder_1;
        _1916 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1822);
        _1912 = _1896.x * cbModelParam._m0[1u].z;
        _1914 = _1896.y * cbModelParam._m0[1u].z;
        _1916 = _1896.z * cbModelParam._m0[1u].z;
    }
    float _1929 = (((_915 * _865) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_915 * _867) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1933 = (((_915 * _868) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1936 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1929 * cbSceneParam._m0[91u].x));
    vec4 _1950 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_752, _753));
    float _1952 = _1950.w;
    float _1964 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1952);
    float _1965 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1952);
    float _1966 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1952);
    uvec4 _1970 = floatBitsToUint(cbInstanceData._m0[_808 + 5u]);
    uint _1972 = _1970.x * 14u;
    uint _1973 = _1972 + 13u;
    float _1980 = _880 + (-1.0);
    float _1985 = (cbLight._m0[_1973].x * _1980) + 1.0;
    float _1986 = (cbLight._m0[_1973].y * _1980) + 1.0;
    float _1987 = (cbLight._m0[_1973].z * _1980) + 1.0;
    float _1988 = (cbLight._m0[_1973].w * _1980) + 1.0;
    uint _1989 = _1972 + 5u;
    float _1995 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _1999 = _1972 + 4u;
    float _2008 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _2012 = _1972 | 1u;
    float _2023 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_651, _652, _653));
    float _2026 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_651, _652, _653));
    float _4223 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _4234 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2031 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2033 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2040 = ((cbLight._m0[_1989].x * _1995) * _2033) + (((cbLight._m0[_1999].x * _1964) * _2008) * _2031);
    float _2041 = ((_1995 * cbLight._m0[_1989].y) * _2033) + (((cbLight._m0[_1999].y * _1965) * _2008) * _2031);
    float _2042 = ((_1995 * cbLight._m0[_1989].z) * _2033) + (((cbLight._m0[_1999].z * _1966) * _2008) * _2031);
    uvec4 _2046 = floatBitsToUint(cbLight._m0[_1972 + 12u]);
    bool _2048 = _2046.x == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2048)
    {
        _2059 = _2040;
        _2061 = _2041;
        _2063 = _2042;
    }
    else
    {
        uint _2067 = _1972 + 6u;
        float _2083 = (dot(vec3(cbLight._m0[_1972 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4245 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2086 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2059 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _2040;
        _2061 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _2041;
        _2063 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _2042;
    }
    bool _2066 = _2046.y == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2066)
    {
        _2104 = _2059;
        _2106 = _2061;
        _2108 = _2063;
    }
    else
    {
        uint _2277 = _1972 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1972 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4261 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2296 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2104 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2059;
        _2106 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2061;
        _2108 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2063;
    }
    uint _2111 = _1972 + 8u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _795) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1972].x + _731;
    float _2127 = cbLight._m0[_1972].y + _732;
    float _2128 = cbLight._m0[_1972].z + _733;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1972].xyz));
    float _4277 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2140 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2141 = dot(vec3(_651, _652, _653), vec3(_2133, _2134, _2135));
    float _4299 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2133, _2134, _2135));
    float _4310 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2125 * _2125;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
    float _2162 = 0.959999978542327880859375 - _862;
    float _2164 = 0.959999978542327880859375 - _863;
    float _2165 = 0.959999978542327880859375 - _864;
    float _2172 = 1.0 - _2125;
    float _2183 = (0.5 / (((_2140 * ((_2139 * _2172) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2172) + _2125) * _2139))) * _2139;
    float _4321 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    uint _2199 = _1972 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _795) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2012].x + _731;
    float _2213 = cbLight._m0[_2012].y + _732;
    float _2214 = cbLight._m0[_2012].z + _733;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2012].xyz));
    float _4332 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2226 = dot(vec3(_651, _652, _653), vec3(_2219, _2220, _2221));
    float _4343 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2219, _2220, _2221));
    float _4354 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2252 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2140 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2252) + _2211) * _2225))) * _2225;
    float _4365 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2274 = (((((_2245 * _2162) + _865) * cbLight._m0[_2199].x) * _2264) * _1995) + ((((cbLight._m0[_2111].x * _1964) * ((_2161 * _2162) + _865)) * _2185) * _2008);
    float _2275 = (((((_2245 * _2164) + _867) * cbLight._m0[_2199].y) * _2264) * _1995) + ((((cbLight._m0[_2111].y * _1965) * ((_2161 * _2164) + _867)) * _2185) * _2008);
    float _2276 = (((((_2245 * _2165) + _868) * cbLight._m0[_2199].z) * _2264) * _1995) + ((((cbLight._m0[_2111].z * _1966) * ((_2161 * _2165) + _868)) * _2185) * _2008);
    float _2338;
    float _2340;
    float _2342;
    if (_2048)
    {
        _2338 = _2274;
        _2340 = _2275;
        _2342 = _2276;
    }
    else
    {
        uint _2344 = _1972 + 2u;
        uint _2348 = _1972 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _795) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _731;
        float _2365 = cbLight._m0[_2344].y + _732;
        float _2366 = cbLight._m0[_2344].z + _733;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2344].xyz));
        float _4376 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2378 = dot(vec3(_651, _652, _653), vec3(_2371, _2372, _2373));
        float _4387 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4398 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2404 = 1.0 - _2363;
        float _2414 = (0.5 / (((_2140 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2404) + _2363) * _2377))) * _2377;
        float _4409 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2338 = (((((_2397 * _2162) + _865) * cbLight._m0[_2348].x) * _2416) * _2417) + _2274;
        _2340 = (((((_2397 * _2164) + _867) * cbLight._m0[_2348].y) * _2416) * _2417) + _2275;
        _2342 = (((((_2397 * _2165) + _868) * cbLight._m0[_2348].z) * _2416) * _2417) + _2276;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2066)
    {
        _2452 = _2338;
        _2454 = _2340;
        _2456 = _2342;
    }
    else
    {
        uint _2463 = _1972 + 3u;
        uint _2467 = _1972 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _795) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _731;
        float _2484 = cbLight._m0[_2463].y + _732;
        float _2485 = cbLight._m0[_2463].z + _733;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2463].xyz));
        float _4425 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2497 = dot(vec3(_651, _652, _653), vec3(_2490, _2491, _2492));
        float _4436 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4447 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2140 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2523) + _2482) * _2496))) * _2496;
        float _4458 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2452 = (((((_2516 * _2162) + _865) * cbLight._m0[_2467].x) * _2535) * _2536) + _2338;
        _2454 = (((((_2516 * _2164) + _867) * cbLight._m0[_2467].y) * _2535) * _2536) + _2340;
        _2456 = (((((_2516 * _2165) + _868) * cbLight._m0[_2467].z) * _2535) * _2536) + _2342;
    }
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_1970.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
        }
        else
        {
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2926)
                {
                    frontier_phi_68_pred = _2912;
                    frontier_phi_68_pred_1 = _2915;
                    frontier_phi_68_pred_2 = _2914;
                    frontier_phi_68_pred_3 = _2913;
                    frontier_phi_68_pred_4 = _2911;
                    frontier_phi_68_pred_5 = _2910;
                }
                else
                {
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    uint _3061;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2925;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    for (;;)
                    {
                        uint _3065 = uint(findLSB(_3061)) + (_2916 << 5u);
                        uint _3062 = (_3061 + 4294967295u) & _3061;
                        uint _3067 = _3065 * 48u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3087 = (_3065 * 48u) + 4u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3106 = (_3065 * 48u) + 8u;
                        vec3 _3117 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x));
                        float _3121 = _3081.x - _2612;
                        float _3122 = _3081.y - _2613;
                        float _3123 = _3081.z - _2614;
                        float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                        float _3127 = inversesqrt(_3124);
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3131 = dot(vec3(_776, _779, _782), vec3(_3128, _3129, _3130));
                        float _3136 = 1.0 - (_3124 * _3081.w);
                        float _4484 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3138 = sqrt(_3124) * _3100.w;
                        float _3141 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3131) + _3142;
                        float _3148 = _3138 * _3138;
                        float _3152 = ((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3137) / ((_3148 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _2612;
                        float _3157 = (-0.0) - _2613;
                        float _3158 = (-0.0) - _2614;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3173 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _896;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_776, _779, _782), vec3(_3163, _3164, _3165));
                        float _4500 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3198 = dot(vec3(_776, _779, _782), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4511 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3141 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3131) + _3207;
                        float _4522 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4533 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3205 * _3205) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125))) * _3137;
                        _2985 = (_3152 * _3100.x) + _3058;
                        _2986 = (_3152 * _3100.y) + _3059;
                        _2987 = (_3152 * _3100.z) + _3060;
                        _2982 = (_3233 * _3117.x) + _3055;
                        _2983 = (_3233 * _3117.y) + _3056;
                        _2984 = (_3233 * _3117.z) + _3057;
                        if (_3062 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _3062;
                        }
                    }
                    frontier_phi_68_pred = _2984;
                    frontier_phi_68_pred_1 = _2987;
                    frontier_phi_68_pred_2 = _2986;
                    frontier_phi_68_pred_3 = _2985;
                    frontier_phi_68_pred_4 = _2983;
                    frontier_phi_68_pred_5 = _2982;
                }
                _2763 = frontier_phi_68_pred;
                _2769 = frontier_phi_68_pred_1;
                _2767 = frontier_phi_68_pred_2;
                _2765 = frontier_phi_68_pred_3;
                _2761 = frontier_phi_68_pred_4;
                _2759 = frontier_phi_68_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2759;
                    _2911 = _2761;
                    _2912 = _2763;
                    _2913 = _2765;
                    _2914 = _2767;
                    _2915 = _2769;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
        }
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.z;
        uint _2775 = (_2773 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2775) & _2658) == 0u)
        {
            _2878 = _2758;
            _2880 = _2760;
            _2882 = _2762;
            _2884 = _2764;
            _2886 = _2766;
            _2888 = _2768;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2904 = _2903 * _2612;
            float _2905 = _2903 * _2613;
            float _2906 = _2903 * _2614;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2775 < ((_2773 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3038 = _2758;
                float _3039 = _2760;
                float _3040 = _2762;
                float _3041 = _2764;
                float _3042 = _2766;
                float _3043 = _2768;
                uint _3044 = _2775;
                uint _3053;
                bool _3054;
                for (;;)
                {
                    _3053 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                    _3054 = _3053 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3054)
                    {
                        frontier_phi_79_pred = _3043;
                        frontier_phi_79_pred_1 = _3042;
                        frontier_phi_79_pred_2 = _3041;
                        frontier_phi_79_pred_3 = _3040;
                        frontier_phi_79_pred_4 = _3039;
                        frontier_phi_79_pred_5 = _3038;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        uint _3266 = _3053;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3336;
                        vec4 _3351;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3277 = ((_3044 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3323 = (_3277 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3277 * 40u) + 20u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3354 = (_3277 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3277 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_2614, _3386.z, fma(_2613, _3386.y, _3386.x * _2612)) + _3386.w;
                            _3399 = !((fma(_2614, _3367.z, fma(_2613, _3367.y, _3367.x * _2612)) + _3367.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3292.x - _2612;
                                float _3427 = _3292.y - _2613;
                                float _3428 = _3292.z - _2614;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3293 * _3293));
                                float _4544 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3444 = sqrt(_3429) * _3308.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_776, _779, _782))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_2614, _3336.z, fma(_2613, _3336.y, _3336.x * _2612)) + _3336.w) / _3398;
                                float _3458 = (fma(_2614, _3351.z, fma(_2613, _3351.y, _3351.x * _2612)) + _3351.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4560 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _896;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2904;
                                float _3488 = _3434 - _2905;
                                float _3489 = _3435 - _2906;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_776, _779, _782), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4571 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3501 = dot(vec3(_776, _779, _782), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4582 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_776, _779, _782), vec3(_3433, _3434, _3435))) + _3510;
                                float _4593 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4604 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3464 * _3308.z;
                                frontier_phi_85_pred_1 = _3464 * _3308.y;
                                frontier_phi_85_pred_2 = _3464 * _3308.x;
                                frontier_phi_85_pred_3 = _3538 * _3320.z;
                                frontier_phi_85_pred_4 = _3538 * _3320.y;
                                frontier_phi_85_pred_5 = _3538 * _3320.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3547 = frontier_phi_85_pred;
                            _3546 = frontier_phi_85_pred_1;
                            _3545 = frontier_phi_85_pred_2;
                            _3544 = frontier_phi_85_pred_3;
                            _3543 = frontier_phi_85_pred_4;
                            _3542 = frontier_phi_85_pred_5;
                            _3250 = _3545 + _3263;
                            _3251 = _3546 + _3264;
                            _3252 = _3547 + _3265;
                            _3247 = _3542 + _3260;
                            _3248 = _3543 + _3261;
                            _3249 = _3544 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3252;
                        frontier_phi_79_pred_1 = _3251;
                        frontier_phi_79_pred_2 = _3250;
                        frontier_phi_79_pred_3 = _3249;
                        frontier_phi_79_pred_4 = _3248;
                        frontier_phi_79_pred_5 = _3247;
                    }
                    _2889 = frontier_phi_79_pred;
                    _2887 = frontier_phi_79_pred_1;
                    _2885 = frontier_phi_79_pred_2;
                    _2883 = frontier_phi_79_pred_3;
                    _2881 = frontier_phi_79_pred_4;
                    _2879 = frontier_phi_79_pred_5;
                    uint _3045 = _3044 + 1u;
                    if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3038 = _2879;
                        _3039 = _2881;
                        _3040 = _2883;
                        _3041 = _2885;
                        _3042 = _2887;
                        _3043 = _2889;
                        _3044 = _3045;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2885;
                frontier_phi_60_61_ladder_1 = _2889;
                frontier_phi_60_61_ladder_2 = _2887;
                frontier_phi_60_61_ladder_3 = _2883;
                frontier_phi_60_61_ladder_4 = _2881;
                frontier_phi_60_61_ladder_5 = _2879;
            }
            else
            {
                frontier_phi_60_61_ladder = _2764;
                frontier_phi_60_61_ladder_1 = _2768;
                frontier_phi_60_61_ladder_2 = _2766;
                frontier_phi_60_61_ladder_3 = _2762;
                frontier_phi_60_61_ladder_4 = _2760;
                frontier_phi_60_61_ladder_5 = _2758;
            }
            _2878 = frontier_phi_60_61_ladder_5;
            _2880 = frontier_phi_60_61_ladder_4;
            _2882 = frontier_phi_60_61_ladder_3;
            _2884 = frontier_phi_60_61_ladder;
            _2886 = frontier_phi_60_61_ladder_2;
            _2888 = frontier_phi_60_61_ladder_1;
        }
        float _2893 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2670 = (_2893 * _2884) + _2104;
        _2672 = (_2893 * _2886) + _2106;
        _2674 = (_2893 * _2888) + _2108;
        _2676 = ((_2878 * _865) * _2893) + _2452;
        _2678 = ((_2880 * _867) * _2893) + _2454;
        _2680 = ((_2882 * _868) * _2893) + _2456;
    }
    else
    {
        _2670 = _2104;
        _2672 = _2106;
        _2674 = _2108;
        _2676 = _2452;
        _2678 = _2454;
        _2680 = _2456;
    }
    float _4620 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4631 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4642 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2697 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2670 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _880))) + ((_2676 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2698 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2672 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _880))) + ((_2678 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2699 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2674 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _880))) + ((_2680 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2700 = _808 + 6u;
    float _2708 = _752 / cbSceneParam._m0[86u].x;
    float _2709 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2723 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2725 = _2723.x;
    float _2726 = _2723.y;
    float _2727 = _2723.z;
    float _2728 = _2723.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2783 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2784 = _2783 / _674;
        float _2795 = _2784 * _724;
        float _2796 = _725 * _2784;
        float _2797 = (-0.0) - _2796;
        float _2798 = _2784 * _726;
        float _2800 = (cbSceneParam._m0[77u].w * _2797) / _2783;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2796;
        float _2808 = sqrt(((_2795 * _2795) + (_2796 * _2796)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2783)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2995;
        if (abs((_2797 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2995 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2941 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2995 = ((abs(_2808 / _2797) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2818 * _2950) - exp2(_2818 * _2951)) * _2939))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2997 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, 1.0), 0.0);
        float _3006 = exp2((_2995 * (-1.44269502162933349609375)) * (1.0 - _2997.w));
        float _3007 = log2(_3006);
        float _3023 = log2(_2728);
        _2820 = (exp2(_3023 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].x)) * _2997.x) / cbSceneParam._m0[78u].x)) + _2725;
        _2822 = (exp2(_3023 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].y)) * _2997.y) / cbSceneParam._m0[78u].y)) + _2726;
        _2824 = (exp2(_3023 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].z)) * _2997.z) / cbSceneParam._m0[78u].z)) + _2727;
        _2826 = _3006 * _2728;
    }
    else
    {
        _2820 = _2725;
        _2822 = _2726;
        _2824 = _2727;
        _2826 = _2728;
    }
    bool _3033;
    vec4 _2836;
    vec4 _2858;
    float _2860;
    float _2864;
    float _2865;
    float _2866;
    float _2867;
    bool _2877;
    for (;;)
    {
        _2836 = cbMatDynParam._m0[0u];
        float _2838 = roundEven(_2836.y);
        bool _2839 = _2838 == 3.0;
        float _2840 = log2(_2826);
        float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * _2697;
        float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * _2698;
        float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * _2699;
        float _2856 = _740 + (-0.5);
        _2858 = cbMtdParam._m0[1u];
        _2860 = _2858.y * _2856;
        float _2863 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2864 = _2863 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
        _2865 = _2863 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
        _2866 = _2863 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
        _2867 = _2856 * 0.999000012874603271484375;
        _2877 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2877)
        {
            if ((cbInstanceData._m0[_808 + 7u].x + _2867) < 0.5)
            {
                _3033 = true;
                break;
            }
        }
        uint _2974 = _809 + uint(_2836.w);
        if ((cbInstanceData._m0[_2974].w < 1.0) && ((cbInstanceData._m0[_2974].w + _2867) < 0.5))
        {
            _3033 = true;
            break;
        }
        if ((_2860 + 1.0) < _2858.x)
        {
            _3033 = true;
            break;
        }
        _3033 = false;
        break;
    }
    float _3238;
    if (_3033)
    {
        discard_state = true;
        _3238 = 0.0;
    }
    else
    {
        _3238 = cbInstanceData._m0[_2700].w;
    }
    SV_Target.x = _2864;
    SV_Target.y = _2865;
    SV_Target.z = _2866;
    SV_Target.w = _3238;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2700].w;
    discard_exit();
}


