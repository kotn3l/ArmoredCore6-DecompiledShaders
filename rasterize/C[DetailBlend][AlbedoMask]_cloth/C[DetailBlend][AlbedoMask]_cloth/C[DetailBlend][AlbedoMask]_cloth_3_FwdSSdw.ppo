#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1239;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _260 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _274 = exp2(log2(_260.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _275 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _276 = isnan(1.0) ? _275 : (isnan(_275) ? 1.0 : min(_275, 1.0));
    vec4 _290 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _295 = _290.w;
    float _303 = exp2(log2(_294 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _354 = cbMtdParam._m0[9u].x * _343.x;
    float _355 = cbMtdParam._m0[9u].y * _343.y;
    float _356 = cbMtdParam._m0[9u].z * _343.z;
    float _363 = (((cbMtdParam._m0[10u].x * _318.x) - _354) * _305) + _354;
    float _364 = (((cbMtdParam._m0[10u].y * _318.y) - _355) * _305) + _355;
    float _365 = (((cbMtdParam._m0[10u].z * _318.z) - _356) * _305) + _356;
    float _372 = exp2(log2(_295) * cbMtdParam._m0[21u].y);
    vec4 _385 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _405 = (((cbMtdParam._m0[11u].x * _385.x) - _363) * _372) + _363;
    float _406 = (((cbMtdParam._m0[11u].y * _385.y) - _364) * _372) + _364;
    float _407 = (((cbMtdParam._m0[11u].z * _385.z) - _365) * _372) + _365;
    vec4 _419 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = (_260.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _419.x) - _405) * _276) + _405);
    float _445 = (_260.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _419.y) - _406) * _276) + _406);
    float _447 = (_260.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _419.z) - _407) * _276) + _407);
    float _452 = exp2(log2(1.0 - _295) * 0.00999999977648258209228515625);
    float _470 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _452) + cbMtdParam._m0[21u].z;
    float _489 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _470) + cbMtdParam._m0[20u].z) * _372) + _470;
    float _509 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _489) + cbMtdParam._m0[22u].z) * _276) + _489;
    vec4 _521 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _539 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _545 = cbMtdParam._m0[19u].x + _539.z;
    float _548 = (((cbMtdParam._m0[20u].x + _521.z) - _545) * _452) + _545;
    vec4 _561 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _573 = (_294 * 2.0) * ((((_561.z - _548) + cbMtdParam._m0[22u].x) * _372) + _548);
    vec4 _586 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _595 = (((_586.z - _573) + cbMtdParam._m0[21u].x) * _276) + _573;
    float _606 = ((_521.x - _541) * _452) + _541;
    float _607 = ((_521.y - _542) * _452) + _542;
    float _612 = ((_561.x - _606) * _372) + _606;
    float _613 = ((_561.y - _607) * _372) + _607;
    float _622 = ((((_586.x - _612) * _276) + _612) * 2.0) + (-1.0);
    float _623 = ((((_586.y - _613) * _276) + _613) * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3613 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))));
    float _632 = _622 + (cbMtdParam._m0[21u].w * ((_290.x * 2.0) + (-1.0)));
    float _633 = _623 + (cbMtdParam._m0[21u].w * ((_290.y * 2.0) + (-1.0)));
    float _636 = fma(_629, _239, fma(_633, _231 * TANGENT.x, (_217 * _209) * _632));
    float _639 = fma(_629, _240, fma(_633, _231 * TANGENT.y, (_217 * _210) * _632));
    float _642 = fma(_629, _241, fma(_633, _231 * TANGENT.z, (_217 * _211) * _632));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3624 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _650 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3646 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3657 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3668 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _654 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _670 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _720 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _710);
    float _721 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _710);
    float _722 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _710);
    float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
    float _727 = _720 * _726;
    float _728 = _721 * _726;
    float _729 = _722 * _726;
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _738 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _740 = _738.w;
    float _760 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _763 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _766 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    vec4 _768 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _779 = (((_768.y - _650) + (_768.w * _650)) * cbMtdParam._m0[3u].x) + _650;
    uint _792 = uint(roundEven(NORMAL.w)) * 13u;
    uint _794 = (_792 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3679 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    vec4 _806 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _811 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _822 = (((_811.x - _654) + (_811.w * _654)) * cbMtdParam._m0[3u].x) + _654;
    float _835 = (cbMtdParam._m0[3u].x * (((_803 * _740) - _803) + _806.x)) + _803;
    float _836 = (cbMtdParam._m0[3u].x * (((_804 * _740) - _804) + _806.y)) + _804;
    float _837 = (cbMtdParam._m0[3u].x * (((_805 * _740) - _805) + _806.z)) + _805;
    float _838 = 1.0 - _822;
    float _839 = _838 * _835;
    float _840 = _838 * _836;
    float _841 = _838 * _837;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _822;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _822;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _822;
    float _849 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _864 = _861.x * TEXCOORD_4;
    float _865 = dot(vec3(_647, _648, _649), vec3(_727, _728, _729));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _647) - _727;
    float _873 = (_868 * _648) - _728;
    float _874 = (_868 * _649) - _729;
    float _878 = abs(dot(vec3(_727, _728, _729), vec3(_647, _648, _649)));
    float _3712 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_779);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _899 = (1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _900 = _893 * _880;
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _967 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _971 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _996 = _928 + _647;
        float _997 = _932 + _648;
        float _998 = _936 + _649;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_647, _648, _649), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3760 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_647, _648, _649), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3793 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_647, _648, _649), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3826 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1283 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1287 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1310 = _928 + _647;
        float _1311 = _932 + _648;
        float _1312 = _936 + _649;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_647, _648, _649), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3889 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_647, _648, _649), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3922 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_647, _648, _649), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3955 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1239;
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _872 * 0.5;
    float _1617 = _873 * 0.5;
    float _1618 = _874 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _779);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1747 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1750 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1778 = frontier_phi_16_14_ladder;
        }
        float _2002;
        if (_1747 > 0.0)
        {
            _2002 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2002 = frontier_phi_25_21_ladder;
        }
        float _2259;
        if (_1750 > 0.0)
        {
            _2259 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2259 = frontier_phi_37_32_ladder;
        }
        float _2261 = isnan(_2002) ? _1778 : (isnan(_1778) ? _2002 : min(_1778, _2002));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1744) + _1733;
        float _2267 = (_2262 * _1747) + _1737;
        float _2268 = (_2262 * _1750) + _1741;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2269;
        float _2273 = _2269 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 > _2273) || ((_2267 < _2271) || ((_2266 < _2271) || (_2266 > _2273))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_15_37_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_15_37_ladder_2;
        _1768 = frontier_phi_15_37_ladder_1;
        _1770 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1685);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _779);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1843 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1846 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _2007;
        if (_1840 > 0.0)
        {
            _2007 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2007 = frontier_phi_27_23_ladder;
        }
        float _2286;
        if (_1843 > 0.0)
        {
            _2286 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2286 = frontier_phi_39_34_ladder;
        }
        float _2499;
        if (_1846 > 0.0)
        {
            _2499 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2499 = frontier_phi_48_45_ladder;
        }
        float _2501 = isnan(_2286) ? _2007 : (isnan(_2007) ? _2286 : min(_2007, _2286));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1840) + _1829;
        float _2507 = (_2502 * _1843) + _1833;
        float _2508 = (_2502 * _1846) + _1837;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2509;
        float _2512 = _2509 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2508 > _2512) || ((_2508 < _2510) || ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 < _2510) || (_2506 > _2512))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2508, cbModelParam._m0[17u].z, fma(_2507, cbModelParam._m0[17u].y, _2506 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2508, cbModelParam._m0[18u].z, fma(_2507, cbModelParam._m0[18u].y, _2506 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2508, cbModelParam._m0[19u].z, fma(_2507, cbModelParam._m0[19u].y, _2506 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_24_48_ladder = _2706.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2706.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2706.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_24_48_ladder_2;
        _1867 = frontier_phi_24_48_ladder_1;
        _1869 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1775);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1882 = (((_899 * _849) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1884 = (((_899 * _851) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_899 * _852) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    vec4 _1903 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_735, _736));
    float _1905 = _1903.w;
    float _1917 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1905);
    float _1918 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1905);
    float _1919 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1905);
    uvec4 _1923 = floatBitsToUint(cbInstanceData._m0[_792 + 5u]);
    uint _1925 = _1923.x * 14u;
    uint _1926 = _1925 + 13u;
    float _1933 = _864 + (-1.0);
    float _1938 = (cbLight._m0[_1926].x * _1933) + 1.0;
    float _1939 = (cbLight._m0[_1926].y * _1933) + 1.0;
    float _1940 = (cbLight._m0[_1926].z * _1933) + 1.0;
    float _1941 = (cbLight._m0[_1926].w * _1933) + 1.0;
    uint _1942 = _1925 + 5u;
    float _1948 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1952 = _1925 + 4u;
    float _1961 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1965 = _1925 | 1u;
    float _1976 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_647, _648, _649));
    float _1979 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_647, _648, _649));
    float _4091 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _4102 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1984 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1986 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1993 = ((cbLight._m0[_1942].x * _1948) * _1986) + (((cbLight._m0[_1952].x * _1917) * _1961) * _1984);
    float _1994 = ((_1948 * cbLight._m0[_1942].y) * _1986) + (((cbLight._m0[_1952].y * _1918) * _1961) * _1984);
    float _1995 = ((_1948 * cbLight._m0[_1942].z) * _1986) + (((cbLight._m0[_1952].z * _1919) * _1961) * _1984);
    uvec4 _1999 = floatBitsToUint(cbLight._m0[_1925 + 12u]);
    bool _2001 = _1999.x == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_2001)
    {
        _2012 = _1993;
        _2014 = _1994;
        _2016 = _1995;
    }
    else
    {
        uint _2020 = _1925 + 6u;
        float _2036 = (dot(vec3(cbLight._m0[_1925 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4113 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2039 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2012 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1993;
        _2014 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1994;
        _2016 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1995;
    }
    bool _2019 = _1999.y == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2019)
    {
        _2057 = _2012;
        _2059 = _2014;
        _2061 = _2016;
    }
    else
    {
        uint _2230 = _1925 + 7u;
        float _2246 = (dot(vec3(cbLight._m0[_1925 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4129 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2249 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2057 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2012;
        _2059 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2014;
        _2061 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2016;
    }
    uint _2064 = _1925 + 8u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _779) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1925].x + _727;
    float _2080 = cbLight._m0[_1925].y + _728;
    float _2081 = cbLight._m0[_1925].z + _729;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1925].xyz));
    float _4145 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2093 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2094 = dot(vec3(_647, _648, _649), vec3(_2086, _2087, _2088));
    float _4167 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2086, _2087, _2088));
    float _4178 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2078 * _2078;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
    float _2115 = 0.959999978542327880859375 - _846;
    float _2117 = 0.959999978542327880859375 - _847;
    float _2118 = 0.959999978542327880859375 - _848;
    float _2125 = 1.0 - _2078;
    float _2136 = (0.5 / (((_2093 * ((_2092 * _2125) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2125) + _2078) * _2092))) * _2092;
    float _4189 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    uint _2152 = _1925 + 9u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _779) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_1965].x + _727;
    float _2166 = cbLight._m0[_1965].y + _728;
    float _2167 = cbLight._m0[_1965].z + _729;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1965].xyz));
    float _4200 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2179 = dot(vec3(_647, _648, _649), vec3(_2172, _2173, _2174));
    float _4211 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2172, _2173, _2174));
    float _4222 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2164 * _2164;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
    float _2205 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2093 * ((_2178 * _2205) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2205) + _2164) * _2178))) * _2178;
    float _4233 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    float _2227 = (((((_2198 * _2115) + _849) * cbLight._m0[_2152].x) * _2217) * _1948) + ((((cbLight._m0[_2064].x * _1917) * ((_2114 * _2115) + _849)) * _2138) * _1961);
    float _2228 = (((((_2198 * _2117) + _851) * cbLight._m0[_2152].y) * _2217) * _1948) + ((((cbLight._m0[_2064].y * _1918) * ((_2114 * _2117) + _851)) * _2138) * _1961);
    float _2229 = (((((_2198 * _2118) + _852) * cbLight._m0[_2152].z) * _2217) * _1948) + ((((cbLight._m0[_2064].z * _1919) * ((_2114 * _2118) + _852)) * _2138) * _1961);
    float _2291;
    float _2293;
    float _2295;
    if (_2001)
    {
        _2291 = _2227;
        _2293 = _2228;
        _2295 = _2229;
    }
    else
    {
        uint _2297 = _1925 + 2u;
        uint _2301 = _1925 + 10u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _779) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _727;
        float _2318 = cbLight._m0[_2297].y + _728;
        float _2319 = cbLight._m0[_2297].z + _729;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2297].xyz));
        float _4244 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2331 = dot(vec3(_647, _648, _649), vec3(_2324, _2325, _2326));
        float _4255 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4266 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2357 = 1.0 - _2316;
        float _2367 = (0.5 / (((_2093 * ((_2330 * _2357) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2357) + _2316) * _2330))) * _2330;
        float _4277 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2369 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2370 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2291 = (((((_2350 * _2115) + _849) * cbLight._m0[_2301].x) * _2369) * _2370) + _2227;
        _2293 = (((((_2350 * _2117) + _851) * cbLight._m0[_2301].y) * _2369) * _2370) + _2228;
        _2295 = (((((_2350 * _2118) + _852) * cbLight._m0[_2301].z) * _2369) * _2370) + _2229;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2019)
    {
        _2405 = _2291;
        _2407 = _2293;
        _2409 = _2295;
    }
    else
    {
        uint _2416 = _1925 + 3u;
        uint _2420 = _1925 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _779) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _727;
        float _2437 = cbLight._m0[_2416].y + _728;
        float _2438 = cbLight._m0[_2416].z + _729;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2416].xyz));
        float _4293 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2450 = dot(vec3(_647, _648, _649), vec3(_2443, _2444, _2445));
        float _4304 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4315 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2093 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2093 * _2476) + _2435) * _2449))) * _2449;
        float _4326 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2405 = (((((_2469 * _2115) + _849) * cbLight._m0[_2420].x) * _2488) * _2489) + _2291;
        _2407 = (((((_2469 * _2117) + _851) * cbLight._m0[_2420].y) * _2488) * _2489) + _2293;
        _2409 = (((((_2469 * _2118) + _852) * cbLight._m0[_2420].z) * _2488) * _2489) + _2295;
    }
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_1923.y == 0u)
    {
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2564;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2564;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2564;
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.x;
        uint _2591 = uint((float(_2579.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2580))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2580)));
        float _2601 = (log2(_2567 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2602 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        uint _2605 = uint(isnan(14.0) ? _2602 : (isnan(_2602) ? 14.0 : min(_2602, 14.0)));
        uvec4 _2610 = texelFetch(g_lightClusterGridBuffer, int(((_2605 << 2u) + (_2591 << 6u)) >> 2u));
        uint _2611 = _2610.x;
        uint _2612 = _2579.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2612 >> 4u) & 15u)) + 4294967295u) & _2611) == 0u) || ((_2612 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2871)
                {
                    frontier_phi_63_pred = _2860;
                    frontier_phi_63_pred_1 = _2859;
                    frontier_phi_63_pred_2 = _2858;
                    frontier_phi_63_pred_3 = _2857;
                    frontier_phi_63_pred_4 = _2856;
                    frontier_phi_63_pred_5 = _2855;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2870;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2861 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _2565;
                        float _3046 = _3005.y - _2566;
                        float _3047 = _3005.z - _2567;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_760, _763, _766), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4352 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2565;
                        float _3081 = (-0.0) - _2566;
                        float _3082 = (-0.0) - _2567;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _880;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_760, _763, _766), vec3(_3087, _3088, _3089));
                        float _4368 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3122 = dot(vec3(_760, _763, _766), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4379 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3065 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3055) + _3131;
                        float _4390 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4401 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3129 * _3129) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2914 = (_3076 * _3024.x) + _2982;
                        _2915 = (_3076 * _3024.y) + _2983;
                        _2916 = (_3076 * _3024.z) + _2984;
                        _2911 = (_3157 * _3041.x) + _2979;
                        _2912 = (_3157 * _3041.y) + _2980;
                        _2913 = (_3157 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_63_pred = _2916;
                    frontier_phi_63_pred_1 = _2915;
                    frontier_phi_63_pred_2 = _2914;
                    frontier_phi_63_pred_3 = _2913;
                    frontier_phi_63_pred_4 = _2912;
                    frontier_phi_63_pred_5 = _2911;
                }
                _2722 = frontier_phi_63_pred;
                _2720 = frontier_phi_63_pred_1;
                _2718 = frontier_phi_63_pred_2;
                _2716 = frontier_phi_63_pred_3;
                _2714 = frontier_phi_63_pred_4;
                _2712 = frontier_phi_63_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2712;
                    _2856 = _2714;
                    _2857 = _2716;
                    _2858 = _2718;
                    _2859 = _2720;
                    _2860 = _2722;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2728) & _2611) == 0u)
        {
            _2823 = _2711;
            _2825 = _2713;
            _2827 = _2715;
            _2829 = _2717;
            _2831 = _2719;
            _2833 = _2721;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
            float _2849 = _2848 * _2565;
            float _2850 = _2848 * _2566;
            float _2851 = _2848 * _2567;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2962 = _2711;
                float _2963 = _2713;
                float _2964 = _2715;
                float _2965 = _2717;
                float _2966 = _2719;
                float _2967 = _2721;
                uint _2968 = _2728;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2978)
                    {
                        frontier_phi_69_pred = _2967;
                        frontier_phi_69_pred_1 = _2966;
                        frontier_phi_69_pred_2 = _2965;
                        frontier_phi_69_pred_3 = _2964;
                        frontier_phi_69_pred_4 = _2963;
                        frontier_phi_69_pred_5 = _2962;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        uint _3181 = _2977;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3251;
                        vec4 _3266;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3192 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3238 = (_3192 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3192 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3192 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3192 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_2567, _3301.z, fma(_2566, _3301.y, _3301.x * _2565)) + _3301.w;
                            _3314 = !((fma(_2567, _3282.z, fma(_2566, _3282.y, _3282.x * _2565)) + _3282.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3207.x - _2565;
                                float _3342 = _3207.y - _2566;
                                float _3343 = _3207.z - _2567;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3208 * _3208));
                                float _4412 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3359 = sqrt(_3344) * _3223.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_760, _763, _766))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_2567, _3251.z, fma(_2566, _3251.y, _3251.x * _2565)) + _3251.w) / _3313;
                                float _3373 = (fma(_2567, _3266.z, fma(_2566, _3266.y, _3266.x * _2565)) + _3266.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4428 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _880;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2849;
                                float _3403 = _3349 - _2850;
                                float _3404 = _3350 - _2851;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4439 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3416 = dot(vec3(_760, _763, _766), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4450 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_760, _763, _766), vec3(_3348, _3349, _3350))) + _3425;
                                float _4461 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4472 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3379 * _3223.z;
                                frontier_phi_75_pred_1 = _3379 * _3223.y;
                                frontier_phi_75_pred_2 = _3379 * _3223.x;
                                frontier_phi_75_pred_3 = _3453 * _3235.z;
                                frontier_phi_75_pred_4 = _3453 * _3235.y;
                                frontier_phi_75_pred_5 = _3453 * _3235.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_75_pred;
                            _3461 = frontier_phi_75_pred_1;
                            _3460 = frontier_phi_75_pred_2;
                            _3459 = frontier_phi_75_pred_3;
                            _3458 = frontier_phi_75_pred_4;
                            _3457 = frontier_phi_75_pred_5;
                            _3165 = _3460 + _3178;
                            _3166 = _3461 + _3179;
                            _3167 = _3462 + _3180;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3164 = _3459 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3167;
                        frontier_phi_69_pred_1 = _3166;
                        frontier_phi_69_pred_2 = _3165;
                        frontier_phi_69_pred_3 = _3164;
                        frontier_phi_69_pred_4 = _3163;
                        frontier_phi_69_pred_5 = _3162;
                    }
                    _2834 = frontier_phi_69_pred;
                    _2832 = frontier_phi_69_pred_1;
                    _2830 = frontier_phi_69_pred_2;
                    _2828 = frontier_phi_69_pred_3;
                    _2826 = frontier_phi_69_pred_4;
                    _2824 = frontier_phi_69_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2824;
                        _2963 = _2826;
                        _2964 = _2828;
                        _2965 = _2830;
                        _2966 = _2832;
                        _2967 = _2834;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2834;
                frontier_phi_57_58_ladder_1 = _2832;
                frontier_phi_57_58_ladder_2 = _2830;
                frontier_phi_57_58_ladder_3 = _2828;
                frontier_phi_57_58_ladder_4 = _2826;
                frontier_phi_57_58_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_57_58_ladder = _2721;
                frontier_phi_57_58_ladder_1 = _2719;
                frontier_phi_57_58_ladder_2 = _2717;
                frontier_phi_57_58_ladder_3 = _2715;
                frontier_phi_57_58_ladder_4 = _2713;
                frontier_phi_57_58_ladder_5 = _2711;
            }
            _2823 = frontier_phi_57_58_ladder_5;
            _2825 = frontier_phi_57_58_ladder_4;
            _2827 = frontier_phi_57_58_ladder_3;
            _2829 = frontier_phi_57_58_ladder_2;
            _2831 = frontier_phi_57_58_ladder_1;
            _2833 = frontier_phi_57_58_ladder;
        }
        float _2838 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2623 = (_2838 * _2829) + _2057;
        _2625 = (_2838 * _2831) + _2059;
        _2627 = (_2838 * _2833) + _2061;
        _2629 = ((_2823 * _849) * _2838) + _2405;
        _2631 = ((_2825 * _851) * _2838) + _2407;
        _2633 = ((_2827 * _852) * _2838) + _2409;
    }
    else
    {
        _2623 = _2057;
        _2625 = _2059;
        _2627 = _2061;
        _2629 = _2405;
        _2631 = _2407;
        _2633 = _2409;
    }
    float _4488 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4499 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4510 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    uint _2653 = _792 + 6u;
    float _2661 = _735 / cbSceneParam._m0[86u].x;
    float _2662 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _670 : (isnan(_670) ? cbSceneParam._m0[77u].w : min(_670, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_670 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_670) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _670 : min(cbSceneParam._m0[80u].w, _670));
        float _2737 = _2736 / _670;
        float _2748 = _2737 * _720;
        float _2749 = _721 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2751 = _2737 * _722;
        float _2753 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2749;
        float _2761 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2750 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2886 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2924 = ((abs(_2761 / _2750) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2771 * _2895) - exp2(_2771 * _2896)) * _2884))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2681);
        _2773 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2775 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2777 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2779 = _2935 * _2681;
    }
    else
    {
        _2773 = _2678;
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
    }
    float _2791 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2792 = _2791 == 3.0;
    float _2793 = log2(_2779);
    float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2623 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _864))) + ((_2629 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2625 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _864))) + ((_2631 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2627 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _864))) + ((_2633 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2811 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2811 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.y = _2811 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.z = _2811 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.w = cbInstanceData._m0[_2653].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2653].w;
}


