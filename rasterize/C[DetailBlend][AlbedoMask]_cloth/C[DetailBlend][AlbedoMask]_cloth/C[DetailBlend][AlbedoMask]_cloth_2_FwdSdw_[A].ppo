#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _4033;
float _4034;
float _4035;
float _4036;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _274 = log2(0.0);
    float _276 = exp2(_274 * cbMtdParam._m0[20u].y);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _297 = _292.w;
    float _305 = exp2(log2(_296 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _351 = _345 - ((_345 * _343.z) * cbMtdParam._m0[19u].w);
    bool _387 = _351 >= 0.25;
    bool _392 = _351 >= 0.3499999940395355224609375;
    bool _397 = _351 >= 0.5;
    bool _402 = _351 >= 0.64999997615814208984375;
    bool _407 = _351 >= 0.75;
    vec4 _435 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _446 = cbMtdParam._m0[9u].x * _435.x;
    float _447 = cbMtdParam._m0[9u].y * _435.y;
    float _448 = cbMtdParam._m0[9u].z * _435.z;
    float _455 = (((((((_407 ? cbMtdParam._m0[13u].x : (_402 ? cbMtdParam._m0[18u].x : (_397 ? cbMtdParam._m0[17u].x : (_392 ? cbMtdParam._m0[16u].x : (_387 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _346) + cbMtdParam._m0[10u].x) * _320.x) - _446) * _307) + _446;
    float _456 = (((((((_407 ? cbMtdParam._m0[13u].y : (_402 ? cbMtdParam._m0[18u].y : (_397 ? cbMtdParam._m0[17u].y : (_392 ? cbMtdParam._m0[16u].y : (_387 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _346) + cbMtdParam._m0[10u].y) * _320.y) - _447) * _307) + _447;
    float _457 = (((((((_407 ? cbMtdParam._m0[13u].z : (_402 ? cbMtdParam._m0[18u].z : (_397 ? cbMtdParam._m0[17u].z : (_392 ? cbMtdParam._m0[16u].z : (_387 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _346) + cbMtdParam._m0[10u].z) * _320.z) - _448) * _307) + _448;
    float _464 = exp2(log2(_297) * cbMtdParam._m0[21u].y);
    vec4 _477 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _497 = (((cbMtdParam._m0[11u].x * _477.x) - _455) * _464) + _455;
    float _498 = (((cbMtdParam._m0[11u].y * _477.y) - _456) * _464) + _456;
    float _499 = (((cbMtdParam._m0[11u].z * _477.z) - _457) * _464) + _457;
    vec4 _511 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _535 = (_264.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _511.x) - _497) * _278) + _497);
    float _537 = (_264.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _511.y) - _498) * _278) + _498);
    float _539 = (_264.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _511.z) - _499) * _278) + _499);
    float _544 = exp2(log2(1.0 - _297) * 0.00999999977648258209228515625);
    float _562 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _544) + cbMtdParam._m0[21u].z;
    float _581 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _562) + cbMtdParam._m0[20u].z) * _464) + _562;
    float _604 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _581) + cbMtdParam._m0[22u].z) * _278) + _581;
    vec4 _616 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _634 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _640 = cbMtdParam._m0[19u].x + _634.z;
    float _643 = (((cbMtdParam._m0[20u].x + _616.z) - _640) * _544) + _640;
    vec4 _655 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _667 = (_296 * 2.0) * ((((_655.z - _643) + cbMtdParam._m0[22u].x) * _464) + _643);
    vec4 _679 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _688 = (((_679.z - _667) + cbMtdParam._m0[21u].x) * _278) + _667;
    float _699 = ((_616.x - _636) * _544) + _636;
    float _700 = ((_616.y - _637) * _544) + _637;
    float _705 = ((_655.x - _699) * _464) + _699;
    float _706 = ((_655.y - _700) * _464) + _700;
    float _715 = ((((_679.x - _705) * _278) + _705) * 2.0) + (-1.0);
    float _716 = ((((_679.y - _706) * _278) + _706) * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _4065 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _722 = sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))));
    float _725 = _715 + (cbMtdParam._m0[21u].w * ((_292.x * 2.0) + (-1.0)));
    float _726 = _716 + (cbMtdParam._m0[21u].w * ((_292.y * 2.0) + (-1.0)));
    float _729 = fma(_722, _247, fma(_726, _239 * TANGENT.x, (_225 * _217) * _725));
    float _732 = fma(_722, _248, fma(_726, _239 * TANGENT.y, (_225 * _218) * _725));
    float _735 = fma(_722, _249, fma(_726, _239 * TANGENT.z, (_225 * _219) * _725));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _4076 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _743 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4098 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4109 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4120 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _747 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _813 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _803);
    float _814 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _803);
    float _815 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _803);
    float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
    float _820 = _813 * _819;
    float _821 = _814 * _819;
    float _822 = _815 * _819;
    vec4 _827 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _829 = _827.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_813 * _813) + (_814 * _814)) + (_815 * _815));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _4131 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _4142 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) - _1058)) + _1058) < ((_829 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _844 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _846 = _844.w;
    float _864 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _867 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _870 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    vec4 _872 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _883 = (((_872.y - _743) + (_872.w * _743)) * cbMtdParam._m0[3u].x) + _743;
    uint _896 = uint(roundEven(NORMAL.w)) * 13u;
    uint _897 = _896 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_898].z;
    float _4153 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    vec4 _910 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _915 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _926 = (((_915.x - _747) + (_915.w * _747)) * cbMtdParam._m0[3u].x) + _747;
    float _939 = (cbMtdParam._m0[3u].x * (((_907 * _846) - _907) + _910.x)) + _907;
    float _940 = (cbMtdParam._m0[3u].x * (((_908 * _846) - _908) + _910.y)) + _908;
    float _941 = (cbMtdParam._m0[3u].x * (((_909 * _846) - _909) + _910.z)) + _909;
    float _942 = 1.0 - _926;
    float _943 = _942 * _939;
    float _944 = _942 * _940;
    float _945 = _942 * _941;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _926;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _926;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _926;
    float _953 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _968 = _965.x * TEXCOORD_4;
    float _969 = dot(vec3(_740, _741, _742), vec3(_820, _821, _822));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _740) - _820;
    float _977 = (_972 * _741) - _821;
    float _978 = (_972 * _742) - _822;
    float _982 = abs(dot(vec3(_820, _821, _822), vec3(_740, _741, _742)));
    float _4186 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_883);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1099 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1103 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1127 = _1032 + _740;
        float _1128 = _1036 + _741;
        float _1129 = _1040 + _742;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1095;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1099;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1103;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_740, _741, _742), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4234 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_740, _741, _742), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4267 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_740, _741, _742), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4300 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1413 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1417 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1421 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1444 = _1032 + _740;
        float _1445 = _1036 + _741;
        float _1446 = _1040 + _742;
        float _1456 = fma(_1446, cbModelParam._m0[30u].z, fma(_1445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1444)) - _1413;
        float _1457 = fma(_1446, cbModelParam._m0[31u].z, fma(_1445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1444)) - _1417;
        float _1458 = fma(_1446, cbModelParam._m0[32u].z, fma(_1445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1444)) - _1421;
        float _1462 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
        float _1475 = ((_1462 * _1456) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1413 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1462 * _1457) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1417 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1462 * _1458) / cbModelParam._m0[35u].z) + ((((((_1421 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1475, _1476, _1477), 0.0);
        float _1512 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1479.x + (-0.5));
        float _1514 = _1512 * (_1479.y + (-0.5));
        float _1515 = _1512 * (_1479.z + (-0.5));
        float _1522 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1486.x + (-0.5));
        float _1524 = _1522 * (_1486.y + (-0.5));
        float _1525 = _1522 * (_1486.z + (-0.5));
        float _1532 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1493.x + (-0.5));
        float _1534 = _1532 * (_1493.y + (-0.5));
        float _1535 = _1532 * (_1493.z + (-0.5));
        float _1542 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1500.x + (-0.5));
        float _1544 = _1542 * (_1500.y + (-0.5));
        float _1545 = _1542 * (_1500.z + (-0.5));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = _1513 * 0.5;
        float _1550 = _1523 * 0.5;
        float _1551 = _1533 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_740, _741, _742), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4363 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1576 + 1.0))) + _1581) * _1546;
        float _1591 = _1514 * 0.5;
        float _1592 = _1524 * 0.5;
        float _1593 = _1534 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_740, _741, _742), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4396 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1618 + 1.0))) + _1623) * _1547;
        float _1633 = _1515 * 0.5;
        float _1634 = _1525 * 0.5;
        float _1635 = _1535 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_740, _741, _742), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4429 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1660 + 1.0))) + _1665) * _1548;
        _1682 = _1515;
        _1683 = _1514;
        _1684 = _1513;
        _1685 = _1525;
        _1686 = _1524;
        _1687 = _1523;
        _1688 = _1535;
        _1689 = _1534;
        _1690 = _1533;
        _1691 = _1548;
        _1692 = _1547;
        _1693 = _1546;
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    }
    else
    {
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = _1370;
        _1692 = _1370;
        _1693 = _1370;
        _1694 = 0.0;
        _1695 = 0.0;
        _1696 = 0.0;
    }
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1729 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1706));
    float _1750 = _976 * 0.5;
    float _1751 = _977 * 0.5;
    float _1752 = _978 * 0.5;
    float _1753 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1756 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1759 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1766 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1770 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1774 = dot(vec4(_1750, _1751, _1752, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1781 = dot(vec4(cbModelParam._m0[39u]), vec4(_1750, _1751, _1752, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1750, _1751, _1752, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1818 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1818 : min(cbModelParam._m0[25u].z, _1818));
    float _1899;
    float _1901;
    float _1903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1866 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1870 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1874 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1877 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1880 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1883 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1911;
        if (_1877 > 0.0)
        {
            _1911 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1911 = frontier_phi_19_17_ladder;
        }
        float _2082;
        if (_1880 > 0.0)
        {
            _2082 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2082 = frontier_phi_28_24_ladder;
        }
        float _2376;
        if (_1883 > 0.0)
        {
            _2376 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2376 = frontier_phi_40_35_ladder;
        }
        float _2378 = isnan(_2082) ? _1911 : (isnan(_1911) ? _2082 : min(_1911, _2082));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1877) + _1866;
        float _2384 = (_2379 * _1880) + _1870;
        float _2385 = (_2379 * _1883) + _1874;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1819);
            frontier_phi_18_40_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1899 = frontier_phi_18_40_ladder_2;
        _1901 = frontier_phi_18_40_ladder_1;
        _1903 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1819);
        _1899 = _1887.x * cbModelParam._m0[1u].y;
        _1901 = _1887.y * cbModelParam._m0[1u].y;
        _1903 = _1887.z * cbModelParam._m0[1u].y;
    }
    float _1907 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1907 : min(cbModelParam._m0[25u].w, _1907));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1961 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1965 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1969 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1972 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1975 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1978 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2087;
        if (_1972 > 0.0)
        {
            _2087 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2087 = frontier_phi_30_26_ladder;
        }
        float _2403;
        if (_1975 > 0.0)
        {
            _2403 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2403 = frontier_phi_42_37_ladder;
        }
        float _2741;
        if (_1978 > 0.0)
        {
            _2741 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2741 = frontier_phi_52_49_ladder;
        }
        float _2743 = isnan(_2403) ? _2087 : (isnan(_2087) ? _2403 : min(_2087, _2403));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1972) + _1961;
        float _2749 = (_2744 * _1975) + _1965;
        float _2750 = (_2744 * _1978) + _1969;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1908);
            frontier_phi_27_52_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1997 = frontier_phi_27_52_ladder_2;
        _1999 = frontier_phi_27_52_ladder_1;
        _2001 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1908);
        _1997 = _1981.x * cbModelParam._m0[1u].z;
        _1999 = _1981.y * cbModelParam._m0[1u].z;
        _2001 = _1981.z * cbModelParam._m0[1u].z;
    }
    float _2014 = (((_1003 * _953) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2016 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2018 = (((_1003 * _956) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2021 = fma(_2018, cbSceneParam._m0[89u].z, fma(_2016, cbSceneParam._m0[89u].y, _2014 * cbSceneParam._m0[89u].x));
    float _2024 = fma(_2018, cbSceneParam._m0[90u].z, fma(_2016, cbSceneParam._m0[90u].y, _2014 * cbSceneParam._m0[90u].x));
    float _2027 = fma(_2018, cbSceneParam._m0[91u].z, fma(_2016, cbSceneParam._m0[91u].y, _2014 * cbSceneParam._m0[91u].x));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2074 = _2061 / _2073;
    float _2075 = _2065 / _2073;
    float _2076 = _2069 / _2073;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2103 = ((uint(_2076 > cbSceneParam._m0[59u].y) + uint(_2076 > cbSceneParam._m0[59u].x)) + uint(_2076 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2104 = _2103 + 43u;
        uint _2112 = _2103 + 44u;
        uint _2120 = _2103 + 45u;
        uint _2128 = _2103 + 46u;
        float _2139 = fma(_2073, cbSceneParam._m0[_2104].w, fma(_2069, cbSceneParam._m0[_2104].z, fma(_2065, cbSceneParam._m0[_2104].y, _2061 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2073, cbSceneParam._m0[_2112].w, fma(_2069, cbSceneParam._m0[_2112].z, fma(_2065, cbSceneParam._m0[_2112].y, _2061 * cbSceneParam._m0[_2112].x)));
        float _2151 = fma(_2073, cbSceneParam._m0[_2128].w, fma(_2069, cbSceneParam._m0[_2128].z, fma(_2065, cbSceneParam._m0[_2128].y, _2061 * cbSceneParam._m0[_2128].x)));
        float _2156 = cbSceneParam._m0[33u].z * _2151;
        float _2158 = cbSceneParam._m0[33u].w * _2151;
        float _2161 = fma(_2073, cbSceneParam._m0[_2120].w, fma(_2069, cbSceneParam._m0[_2120].z, fma(_2065, cbSceneParam._m0[_2120].y, _2061 * cbSceneParam._m0[_2120].x))) / _2151;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2075 * _2075) + (_2074 * _2074)) + (_2076 * _2076))) * cbSceneParam._m0[33u].y;
        float _4555 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 + _2139) / _2151, (_2158 + _2143) / _2151), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 + _2139) / _2151, (_2143 - _2156) / _2151), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 - _2156) / _2151, (_2143 - _2158) / _2151), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 - _2158) / _2151, (_2156 + _2143) / _2151), _2161), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2073, cbSceneParam._m0[63u].w, fma(_2069, cbSceneParam._m0[63u].z, fma(_2065, cbSceneParam._m0[63u].y, _2061 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2073, cbSceneParam._m0[60u].w, fma(_2069, cbSceneParam._m0[60u].z, fma(_2065, cbSceneParam._m0[60u].y, _2061 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2073, cbSceneParam._m0[61u].w, fma(_2069, cbSceneParam._m0[61u].z, fma(_2065, cbSceneParam._m0[61u].y, _2061 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2416 = fma(_2073, cbSceneParam._m0[62u].w, fma(_2069, cbSceneParam._m0[62u].z, fma(_2065, cbSceneParam._m0[62u].y, _2061 * cbSceneParam._m0[62u].x))) / _2276;
            float _2420 = isnan(cbSceneParam._m0[41u].w) ? _2416 : (isnan(_2416) ? cbSceneParam._m0[41u].w : max(_2416, cbSceneParam._m0[41u].w));
            float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2075 * _2075) + (_2074 * _2074)) + (_2076 * _2076))) * cbSceneParam._m0[33u].y;
            float _4571 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
            float _2470 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2420), 0.0)).x), vec4(0.25)));
            float _2474 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
            float _2475 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
            float _2476 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_39_38_ladder_1 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_39_38_ladder_2 = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
        }
        else
        {
            frontier_phi_39_38_ladder = _2223;
            frontier_phi_39_38_ladder_1 = _2222;
            frontier_phi_39_38_ladder_2 = _2224;
        }
        _2288 = frontier_phi_39_38_ladder_1;
        _2290 = frontier_phi_39_38_ladder;
        _2292 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_896 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _968 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2335 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2339 = _2299 | 1u;
    float _2350 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_740, _741, _742));
    float _2353 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_740, _741, _742));
    float _4607 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _4618 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2358 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2360 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * 0.3183098733425140380859375;
    float _2367 = ((cbLight._m0[_2316].x * _2322) * _2360) + (((cbLight._m0[_2326].x * _2288) * _2335) * _2358);
    float _2368 = ((_2322 * cbLight._m0[_2316].y) * _2360) + (((cbLight._m0[_2326].y * _2290) * _2335) * _2358);
    float _2369 = ((_2322 * cbLight._m0[_2316].z) * _2360) + (((cbLight._m0[_2326].z * _2292) * _2335) * _2358);
    uvec4 _2373 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2375 = _2373.x == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2375)
    {
        _2477 = _2367;
        _2479 = _2368;
        _2481 = _2369;
    }
    else
    {
        uint _2485 = _2299 + 6u;
        float _2501 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4629 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2504 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2477 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2367;
        _2479 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2368;
        _2481 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2369;
    }
    bool _2484 = _2373.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2484)
    {
        _2539 = _2477;
        _2541 = _2479;
        _2543 = _2481;
    }
    else
    {
        uint _2712 = _2299 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4645 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2731 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2477;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2479;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2481;
    }
    uint _2546 = _2299 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _883) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2299].x + _820;
    float _2562 = cbLight._m0[_2299].y + _821;
    float _2563 = cbLight._m0[_2299].z + _822;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2299].xyz));
    float _4661 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _4672 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2575 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2576 = dot(vec3(_740, _741, _742), vec3(_2568, _2569, _2570));
    float _4683 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2568, _2569, _2570));
    float _4694 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _950;
    float _2599 = 0.959999978542327880859375 - _951;
    float _2600 = 0.959999978542327880859375 - _952;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4705 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2299 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _883) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2339].x + _820;
    float _2648 = cbLight._m0[_2339].y + _821;
    float _2649 = cbLight._m0[_2339].z + _822;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2339].xyz));
    float _4716 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2661 = dot(vec3(_740, _741, _742), vec3(_2654, _2655, _2656));
    float _4727 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2654, _2655, _2656));
    float _4738 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4749 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _953) * cbLight._m0[_2634].x) * _2699) * _2322) + ((((cbLight._m0[_2546].x * _2288) * ((_2596 * _2597) + _953)) * _2620) * _2335);
    float _2710 = (((((_2680 * _2599) + _955) * cbLight._m0[_2634].y) * _2699) * _2322) + ((((cbLight._m0[_2546].y * _2290) * ((_2596 * _2599) + _955)) * _2620) * _2335);
    float _2711 = (((((_2680 * _2600) + _956) * cbLight._m0[_2634].z) * _2699) * _2322) + ((((cbLight._m0[_2546].z * _2292) * ((_2596 * _2600) + _956)) * _2620) * _2335);
    float _2767;
    float _2769;
    float _2771;
    if (_2375)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2299 + 2u;
        uint _2777 = _2299 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _883) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _820;
        float _2794 = cbLight._m0[_2773].y + _821;
        float _2795 = cbLight._m0[_2773].z + _822;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2773].xyz));
        float _4760 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2807 = dot(vec3(_740, _741, _742), vec3(_2800, _2801, _2802));
        float _4771 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4782 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2575 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2833) + _2792) * _2806))) * _2806;
        float _4793 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2767 = (((((_2826 * _2597) + _953) * cbLight._m0[_2777].x) * _2845) * _2846) + _2709;
        _2769 = (((((_2826 * _2599) + _955) * cbLight._m0[_2777].y) * _2845) * _2846) + _2710;
        _2771 = (((((_2826 * _2600) + _956) * cbLight._m0[_2777].z) * _2845) * _2846) + _2711;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2484)
    {
        _2877 = _2767;
        _2879 = _2769;
        _2881 = _2771;
    }
    else
    {
        uint _2888 = _2299 + 3u;
        uint _2892 = _2299 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _883) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _820;
        float _2909 = cbLight._m0[_2888].y + _821;
        float _2910 = cbLight._m0[_2888].z + _822;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2888].xyz));
        float _4809 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2922 = dot(vec3(_740, _741, _742), vec3(_2915, _2916, _2917));
        float _4820 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4831 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2575 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2948) + _2907) * _2921))) * _2921;
        float _4842 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2877 = (((((_2941 * _2597) + _953) * cbLight._m0[_2892].x) * _2960) * _2961) + _2767;
        _2879 = (((((_2941 * _2599) + _955) * cbLight._m0[_2892].y) * _2960) * _2961) + _2769;
        _2881 = (((((_2941 * _2600) + _956) * cbLight._m0[_2892].z) * _2960) * _2961) + _2771;
    }
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_2297.y == 0u)
    {
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2983)));
        float _3004 = (log2(_2076 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
        }
        else
        {
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            uint _3251 = 0u;
            uint _3260;
            bool _3261;
            for (;;)
            {
                _3260 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                _3261 = _3260 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3261)
                {
                    frontier_phi_73_pred = _3250;
                    frontier_phi_73_pred_1 = _3249;
                    frontier_phi_73_pred_2 = _3248;
                    frontier_phi_73_pred_3 = _3247;
                    frontier_phi_73_pred_4 = _3246;
                    frontier_phi_73_pred_5 = _3245;
                }
                else
                {
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    uint _3396;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3260;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3400 = uint(findLSB(_3396)) + (_3251 << 5u);
                        uint _3397 = (_3396 + 4294967295u) & _3396;
                        uint _3402 = _3400 * 48u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3422 = (_3400 * 48u) + 4u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3441 = (_3400 * 48u) + 8u;
                        vec3 _3452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x));
                        float _3456 = _3416.x - _2074;
                        float _3457 = _3416.y - _2075;
                        float _3458 = _3416.z - _2076;
                        float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                        float _3462 = inversesqrt(_3459);
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3466 = dot(vec3(_864, _867, _870), vec3(_3463, _3464, _3465));
                        float _3471 = 1.0 - (_3459 * _3416.w);
                        float _4868 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3473 = sqrt(_3459) * _3435.w;
                        float _3476 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3466) + _3477;
                        float _3483 = _3473 * _3473;
                        float _3487 = ((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3472) / ((_3483 * 0.699999988079071044921875) + 1.0);
                        float _3491 = (-0.0) - _2074;
                        float _3492 = (-0.0) - _2075;
                        float _3493 = (-0.0) - _2076;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3507 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                        float _3508 = 1.0 - _984;
                        float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                        float _3516 = _3515 * _3515;
                        float _3517 = _3516 * _3516;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3520 = _3500 + _3465;
                        float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                        float _3528 = dot(vec3(_864, _867, _870), vec3(_3498, _3499, _3500));
                        float _4884 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3532 = dot(vec3(_864, _867, _870), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                        float _4895 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                        float _3540 = _3476 * _3516;
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3466) + _3541;
                        float _4906 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3546 = 1.0 - _3516;
                        float _3556 = (0.5 / (((_3545 * ((_3531 * _3546) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3516) * _3531))) * _3545;
                        float _4917 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3567 = (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3539 * _3539) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125))) * _3472;
                        _3320 = (_3487 * _3435.x) + _3393;
                        _3321 = (_3487 * _3435.y) + _3394;
                        _3322 = (_3487 * _3435.z) + _3395;
                        _3317 = (_3567 * _3452.x) + _3390;
                        _3318 = (_3567 * _3452.y) + _3391;
                        _3319 = (_3567 * _3452.z) + _3392;
                        if (_3397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3397;
                        }
                    }
                    frontier_phi_73_pred = _3322;
                    frontier_phi_73_pred_1 = _3321;
                    frontier_phi_73_pred_2 = _3320;
                    frontier_phi_73_pred_3 = _3319;
                    frontier_phi_73_pred_4 = _3318;
                    frontier_phi_73_pred_5 = _3317;
                }
                _3104 = frontier_phi_73_pred;
                _3102 = frontier_phi_73_pred_1;
                _3100 = frontier_phi_73_pred_2;
                _3098 = frontier_phi_73_pred_3;
                _3096 = frontier_phi_73_pred_4;
                _3094 = frontier_phi_73_pred_5;
                uint _3252 = _3251 + 1u;
                if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3245 = _3094;
                    _3246 = _3096;
                    _3247 = _3098;
                    _3248 = _3100;
                    _3249 = _3102;
                    _3250 = _3104;
                    _3251 = _3252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
        }
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.z;
        uint _3110 = (_3108 >> 8u) & 15u;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        if (((4294967295u << _3110) & _3014) == 0u)
        {
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
            _3223 = _3103;
        }
        else
        {
            float _3238 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
            float _3239 = _3238 * _2074;
            float _3240 = _3238 * _2075;
            float _3241 = _3238 * _2076;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3110 < ((_3108 >> 12u) & 15u))
            {
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3373 = _3093;
                float _3374 = _3095;
                float _3375 = _3097;
                float _3376 = _3099;
                float _3377 = _3101;
                float _3378 = _3103;
                uint _3379 = _3110;
                uint _3388;
                bool _3389;
                for (;;)
                {
                    _3388 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                    _3389 = _3388 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3389)
                    {
                        frontier_phi_84_pred = _3377;
                        frontier_phi_84_pred_1 = _3376;
                        frontier_phi_84_pred_2 = _3375;
                        frontier_phi_84_pred_3 = _3374;
                        frontier_phi_84_pred_4 = _3373;
                        frontier_phi_84_pred_5 = _3378;
                    }
                    else
                    {
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        uint _3600 = _3388;
                        uint _3601;
                        vec4 _3626;
                        float _3627;
                        vec4 _3642;
                        vec3 _3654;
                        vec4 _3669;
                        vec4 _3684;
                        float _3731;
                        bool _3732;
                        for (;;)
                        {
                            uint _3611 = ((_3379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3600));
                            _3601 = (_3600 + 4294967295u) & _3600;
                            uint _3613 = _3611 * 40u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            _3627 = _3626.w;
                            uint _3629 = (_3611 * 40u) + 4u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3611 * 40u) + 8u;
                            _3654 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x));
                            uint _3656 = (_3611 * 40u) + 16u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3611 * 40u) + 20u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3687 = (_3611 * 40u) + 24u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3706 = (_3611 * 40u) + 28u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3731 = fma(_2076, _3719.z, fma(_2075, _3719.y, _3719.x * _2074)) + _3719.w;
                            _3732 = !((fma(_2076, _3700.z, fma(_2075, _3700.y, _3700.x * _2074)) + _3700.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3732)
                            {
                                float _3759 = _3626.x - _2074;
                                float _3760 = _3626.y - _2075;
                                float _3761 = _3626.z - _2076;
                                float _3762 = dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761));
                                float _3765 = inversesqrt(_3762);
                                float _3766 = _3765 * _3759;
                                float _3767 = _3765 * _3760;
                                float _3768 = _3765 * _3761;
                                float _3772 = 1.0 - (_3762 / (_3627 * _3627));
                                float _4928 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3777 = sqrt(_3762) * _3642.w;
                                float _3779 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                                float _3780 = _3779 * _3779;
                                float _3783 = ((1.0 - _3780) * dot(vec3(_3766, _3767, _3768), vec3(_864, _867, _870))) + _3780;
                                float _3786 = _3777 * _3777;
                                float _3790 = (fma(_2076, _3669.z, fma(_2075, _3669.y, _3669.x * _2074)) + _3669.w) / _3731;
                                float _3791 = (fma(_2076, _3684.z, fma(_2075, _3684.y, _3684.x * _2074)) + _3684.w) / _3731;
                                float _3795 = 1.0 - dot(vec2(_3790, _3791), vec2(_3790, _3791));
                                float _4944 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3797 = _3796 * (((isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0))) * _3773) / ((_3786 * 0.699999988079071044921875) + 1.0));
                                float _3809 = exp2(log2(1.0 / ((_3786 * 3.5) + 5.0)) * 0.25);
                                float _3810 = 1.0 - _984;
                                float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                                float _3818 = _3817 * _3817;
                                float _3819 = _3818 * _3818;
                                float _3820 = _3766 - _3239;
                                float _3821 = _3767 - _3240;
                                float _3822 = _3768 - _3241;
                                float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                                float _3830 = dot(vec3(_864, _867, _870), vec3((-0.0) - _3239, (-0.0) - _3240, (-0.0) - _3241));
                                float _4955 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3834 = dot(vec3(_864, _867, _870), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                                float _4966 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                                float _3842 = _3779 * _3818;
                                float _3843 = _3842 * _3842;
                                float _3849 = ((1.0 - _3843) * dot(vec3(_864, _867, _870), vec3(_3766, _3767, _3768))) + _3843;
                                float _4977 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3851 = 1.0 - _3818;
                                float _3861 = (0.5 / (((_3850 * ((_3833 * _3851) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3818) * _3833))) * _3850;
                                float _4988 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3871 = (_3796 * _3773) * (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3841 * _3841) * ((_3786 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3797 * _3642.y;
                                frontier_phi_90_pred_1 = _3797 * _3642.x;
                                frontier_phi_90_pred_2 = _3871 * _3654.z;
                                frontier_phi_90_pred_3 = _3871 * _3654.y;
                                frontier_phi_90_pred_4 = _3871 * _3654.x;
                                frontier_phi_90_pred_5 = _3797 * _3642.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3879 = frontier_phi_90_pred;
                            _3878 = frontier_phi_90_pred_1;
                            _3877 = frontier_phi_90_pred_2;
                            _3876 = frontier_phi_90_pred_3;
                            _3875 = frontier_phi_90_pred_4;
                            _3880 = frontier_phi_90_pred_5;
                            _3584 = _3878 + _3597;
                            _3585 = _3879 + _3598;
                            _3586 = _3880 + _3599;
                            _3581 = _3875 + _3594;
                            _3582 = _3876 + _3595;
                            _3583 = _3877 + _3596;
                            if (_3601 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3601;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3585;
                        frontier_phi_84_pred_1 = _3584;
                        frontier_phi_84_pred_2 = _3583;
                        frontier_phi_84_pred_3 = _3582;
                        frontier_phi_84_pred_4 = _3581;
                        frontier_phi_84_pred_5 = _3586;
                    }
                    _3222 = frontier_phi_84_pred;
                    _3220 = frontier_phi_84_pred_1;
                    _3218 = frontier_phi_84_pred_2;
                    _3216 = frontier_phi_84_pred_3;
                    _3214 = frontier_phi_84_pred_4;
                    _3224 = frontier_phi_84_pred_5;
                    uint _3380 = _3379 + 1u;
                    if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3373 = _3214;
                        _3374 = _3216;
                        _3375 = _3218;
                        _3376 = _3220;
                        _3377 = _3222;
                        _3378 = _3224;
                        _3379 = _3380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3224;
                frontier_phi_65_66_ladder_1 = _3220;
                frontier_phi_65_66_ladder_2 = _3222;
                frontier_phi_65_66_ladder_3 = _3216;
                frontier_phi_65_66_ladder_4 = _3214;
                frontier_phi_65_66_ladder_5 = _3218;
            }
            else
            {
                frontier_phi_65_66_ladder = _3103;
                frontier_phi_65_66_ladder_1 = _3099;
                frontier_phi_65_66_ladder_2 = _3101;
                frontier_phi_65_66_ladder_3 = _3095;
                frontier_phi_65_66_ladder_4 = _3093;
                frontier_phi_65_66_ladder_5 = _3097;
            }
            _3213 = frontier_phi_65_66_ladder_4;
            _3215 = frontier_phi_65_66_ladder_3;
            _3217 = frontier_phi_65_66_ladder_5;
            _3219 = frontier_phi_65_66_ladder_1;
            _3221 = frontier_phi_65_66_ladder_2;
            _3223 = frontier_phi_65_66_ladder;
        }
        float _3228 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _3026 = (_3228 * _3219) + _2539;
        _3028 = (_3228 * _3221) + _2541;
        _3030 = (_3228 * _3223) + _2543;
        _3032 = ((_3213 * _953) * _3228) + _2877;
        _3034 = ((_3215 * _955) * _3228) + _2879;
        _3036 = ((_3217 * _956) * _3228) + _2881;
    }
    else
    {
        _3026 = _2539;
        _3028 = _2541;
        _3030 = _2543;
        _3032 = _2877;
        _3034 = _2879;
        _3036 = _2881;
    }
    float _5004 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _5015 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5026 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _3053 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3026 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _968))) + ((_3032 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1808)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_3028 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _968))) + ((_3034 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1808)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_3030 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _968))) + ((_3036 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1808)) * cbPerFrame._m0[3u].x);
    uint _3056 = _896 + 6u;
    float _3064 = _841 / cbSceneParam._m0[86u].x;
    float _3065 = _842 / cbSceneParam._m0[86u].y;
    vec4 _3079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3081 = _3079.x;
    float _3082 = _3079.y;
    float _3083 = _3079.z;
    float _3084 = _3079.w;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _3118 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _3119 = _3118 / _763;
        float _3130 = _3119 * _813;
        float _3131 = _814 * _3119;
        float _3132 = (-0.0) - _3131;
        float _3133 = _3119 * _815;
        float _3135 = (cbSceneParam._m0[77u].w * _3132) / _3118;
        float _3136 = _3135 + cbSceneParam._m0[79u].w;
        float _3137 = cbSceneParam._m0[79u].w - _3131;
        float _3143 = sqrt(((_3130 * _3130) + (_3131 * _3131)) + (_3133 * _3133));
        float _3146 = (1.0 - (cbSceneParam._m0[77u].w / _3118)) * _3143;
        float _3151 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3153 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3132 - _3135) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3136 > 0.0) ? exp2(_3151 * _3136) : (2.0 - exp2(_3153 * _3136))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3146;
        }
        else
        {
            float _3274 = 1.0 / cbSceneParam._m0[80u].x;
            float _3275 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : max(_3136, _3137));
            float _3276 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : min(_3136, _3137));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            float _3286 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : min(_3276, 0.0));
            _3330 = ((abs(_3143 / _3132) * cbSceneParam._m0[80u].y) * ((((_3285 - _3286) * 2.0) - ((exp2(_3151 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0)))) - exp2(_3151 * (isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))))) * _3274)) - ((exp2(_3153 * _3285) - exp2(_3153 * _3286)) * _3274))) + (_3146 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3084);
        _3155 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3081;
        _3157 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3082;
        _3159 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3083;
        _3161 = _3341 * _3084;
    }
    else
    {
        _3155 = _3081;
        _3157 = _3082;
        _3159 = _3083;
        _3161 = _3084;
    }
    bool _3368;
    vec4 _3171;
    vec4 _3193;
    float _3195;
    float _3199;
    float _3200;
    float _3201;
    float _3202;
    bool _3212;
    for (;;)
    {
        _3171 = cbMatDynParam._m0[0u];
        float _3173 = roundEven(_3171.y);
        bool _3174 = _3173 == 3.0;
        float _3175 = log2(_3161);
        float _3182 = exp2(_3175 * cbSceneParam._m0[78u].x) * _3053;
        float _3183 = exp2(_3175 * cbSceneParam._m0[78u].y) * _3054;
        float _3184 = exp2(_3175 * cbSceneParam._m0[78u].z) * _3055;
        float _3191 = _829 + (-0.5);
        _3193 = cbMtdParam._m0[1u];
        _3195 = _3193.y * _3191;
        float _3198 = (_3173 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3199 = _3198 * (_3174 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3155)));
        _3200 = _3198 * (_3174 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3157)));
        _3201 = _3198 * (_3174 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3159)));
        _3202 = _3191 * 0.999000012874603271484375;
        _3212 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3212)
        {
            if ((cbInstanceData._m0[_896 + 7u].x + _3202) < 0.5)
            {
                _3368 = true;
                break;
            }
        }
        uint _3309 = _897 + uint(_3171.w);
        if ((cbInstanceData._m0[_3309].w < 1.0) && ((cbInstanceData._m0[_3309].w + _3202) < 0.5))
        {
            _3368 = true;
            break;
        }
        if ((_3195 + 1.0) < _3193.x)
        {
            _3368 = true;
            break;
        }
        _3368 = false;
        break;
    }
    float _3572;
    if (_3368)
    {
        discard_state = true;
        _3572 = 0.0;
    }
    else
    {
        _3572 = cbInstanceData._m0[_3056].w;
    }
    SV_Target.x = _3199;
    SV_Target.y = _3200;
    SV_Target.z = _3201;
    SV_Target.w = _3572;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3056].w;
    discard_exit();
}


