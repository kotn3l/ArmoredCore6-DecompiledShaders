#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1241;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _262 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _276 = exp2(log2(_262.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _297 = _292.w;
    float _305 = exp2(log2(_296 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _345 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _356 = cbMtdParam._m0[9u].x * _345.x;
    float _357 = cbMtdParam._m0[9u].y * _345.y;
    float _358 = cbMtdParam._m0[9u].z * _345.z;
    float _365 = (((cbMtdParam._m0[10u].x * _320.x) - _356) * _307) + _356;
    float _366 = (((cbMtdParam._m0[10u].y * _320.y) - _357) * _307) + _357;
    float _367 = (((cbMtdParam._m0[10u].z * _320.z) - _358) * _307) + _358;
    float _374 = exp2(log2(_297) * cbMtdParam._m0[21u].y);
    vec4 _387 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _407 = (((cbMtdParam._m0[11u].x * _387.x) - _365) * _374) + _365;
    float _408 = (((cbMtdParam._m0[11u].y * _387.y) - _366) * _374) + _366;
    float _409 = (((cbMtdParam._m0[11u].z * _387.z) - _367) * _374) + _367;
    vec4 _421 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _445 = (_262.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _421.x) - _407) * _278) + _407);
    float _447 = (_262.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _421.y) - _408) * _278) + _408);
    float _449 = (_262.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _421.z) - _409) * _278) + _409);
    float _454 = exp2(log2(1.0 - _297) * 0.00999999977648258209228515625);
    float _472 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _454) + cbMtdParam._m0[21u].z;
    float _491 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _472) + cbMtdParam._m0[20u].z) * _374) + _472;
    float _511 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _491) + cbMtdParam._m0[22u].z) * _278) + _491;
    vec4 _523 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _541 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _547 = cbMtdParam._m0[19u].x + _541.z;
    float _550 = (((cbMtdParam._m0[20u].x + _523.z) - _547) * _454) + _547;
    vec4 _563 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _575 = (_296 * 2.0) * ((((_563.z - _550) + cbMtdParam._m0[22u].x) * _374) + _550);
    vec4 _588 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _597 = (((_588.z - _575) + cbMtdParam._m0[21u].x) * _278) + _575;
    float _608 = ((_523.x - _543) * _454) + _543;
    float _609 = ((_523.y - _544) * _454) + _544;
    float _614 = ((_563.x - _608) * _374) + _608;
    float _615 = ((_563.y - _609) * _374) + _609;
    float _624 = ((((_588.x - _614) * _278) + _614) * 2.0) + (-1.0);
    float _625 = ((((_588.y - _615) * _278) + _615) * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3874 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))));
    float _634 = _624 + (cbMtdParam._m0[21u].w * ((_292.x * 2.0) + (-1.0)));
    float _635 = _625 + (cbMtdParam._m0[21u].w * ((_292.y * 2.0) + (-1.0)));
    float _638 = fma(_631, _241, fma(_635, _233 * TANGENT.x, (_219 * _211) * _634));
    float _641 = fma(_631, _242, fma(_635, _233 * TANGENT.y, (_219 * _212) * _634));
    float _644 = fma(_631, _243, fma(_635, _233 * TANGENT.z, (_219 * _213) * _634));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3885 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _652 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3907 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3918 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3929 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _656 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _672 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _740 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _742 = _740.w;
    float _762 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _765 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _768 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    vec4 _770 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _781 = (((_770.y - _652) + (_770.w * _652)) * cbMtdParam._m0[3u].x) + _652;
    uint _794 = uint(roundEven(NORMAL.w)) * 13u;
    uint _796 = (_794 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3940 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    vec4 _808 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _813 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _824 = (((_813.x - _656) + (_813.w * _656)) * cbMtdParam._m0[3u].x) + _656;
    float _837 = (cbMtdParam._m0[3u].x * (((_805 * _742) - _805) + _808.x)) + _805;
    float _838 = (cbMtdParam._m0[3u].x * (((_806 * _742) - _806) + _808.y)) + _806;
    float _839 = (cbMtdParam._m0[3u].x * (((_807 * _742) - _807) + _808.z)) + _807;
    float _840 = 1.0 - _824;
    float _841 = _840 * _837;
    float _842 = _840 * _838;
    float _843 = _840 * _839;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _824;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _824;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _824;
    float _851 = _848 + 0.039999999105930328369140625;
    float _853 = _849 + 0.039999999105930328369140625;
    float _854 = _850 + 0.039999999105930328369140625;
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _866 = _863.x * TEXCOORD_4;
    float _867 = dot(vec3(_649, _650, _651), vec3(_729, _730, _731));
    float _870 = _867 * 2.0;
    float _874 = (_870 * _649) - _729;
    float _875 = (_870 * _650) - _730;
    float _876 = (_870 * _651) - _731;
    float _880 = abs(dot(vec3(_729, _730, _731), vec3(_649, _650, _651)));
    float _3973 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _882 = sqrt(_781);
    float _895 = exp2((_882 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _901 = (1.0 - _895) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _902 = _895 * _882;
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _969 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _973 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _998 = _930 + _649;
        float _999 = _934 + _650;
        float _1000 = _938 + _651;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_649, _650, _651), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4021 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_649, _650, _651), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4054 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_649, _650, _651), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4087 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1285 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1289 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1312 = _930 + _649;
        float _1313 = _934 + _650;
        float _1314 = _938 + _651;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_649, _650, _651), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4150 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_649, _650, _651), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4183 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_649, _650, _651), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4216 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1241;
        _1551 = _1241;
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1255)) + _1255;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _874 * 0.5;
    float _1619 = _875 * 0.5;
    float _1620 = _876 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1749 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1752 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1780 = frontier_phi_16_14_ladder;
        }
        float _1952;
        if (_1749 > 0.0)
        {
            _1952 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1952 = frontier_phi_25_21_ladder;
        }
        float _2247;
        if (_1752 > 0.0)
        {
            _2247 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2247 = frontier_phi_37_32_ladder;
        }
        float _2249 = isnan(_1952) ? _1780 : (isnan(_1780) ? _1952 : min(_1780, _1952));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1746) + _1735;
        float _2255 = (_2250 * _1749) + _1739;
        float _2256 = (_2250 * _1752) + _1743;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_15_37_ladder = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2401.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2401.z * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_15_37_ladder_1;
        _1770 = frontier_phi_15_37_ladder;
        _1772 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1687);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1845 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1848 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _1957;
        if (_1842 > 0.0)
        {
            _1957 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1957 = frontier_phi_27_23_ladder;
        }
        float _2274;
        if (_1845 > 0.0)
        {
            _2274 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2274 = frontier_phi_39_34_ladder;
        }
        float _2612;
        if (_1848 > 0.0)
        {
            _2612 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2612 = frontier_phi_49_46_ladder;
        }
        float _2614 = isnan(_2274) ? _1957 : (isnan(_1957) ? _2274 : min(_1957, _2274));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1842) + _1831;
        float _2620 = (_2615 * _1845) + _1835;
        float _2621 = (_2615 * _1848) + _1839;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_24_49_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_24_49_ladder_2;
        _1869 = frontier_phi_24_49_ladder_1;
        _1871 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1777);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_901 * _851) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_901 * _853) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_901 * _854) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1944 = _1931 / _1943;
    float _1945 = _1935 / _1943;
    float _1946 = _1939 / _1943;
    float _2093;
    float _2094;
    float _2095;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1973 = ((uint(_1946 > cbSceneParam._m0[59u].y) + uint(_1946 > cbSceneParam._m0[59u].x)) + uint(_1946 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1974 = _1973 + 43u;
        uint _1982 = _1973 + 44u;
        uint _1990 = _1973 + 45u;
        uint _1998 = _1973 + 46u;
        float _2009 = fma(_1943, cbSceneParam._m0[_1974].w, fma(_1939, cbSceneParam._m0[_1974].z, fma(_1935, cbSceneParam._m0[_1974].y, _1931 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1943, cbSceneParam._m0[_1982].w, fma(_1939, cbSceneParam._m0[_1982].z, fma(_1935, cbSceneParam._m0[_1982].y, _1931 * cbSceneParam._m0[_1982].x)));
        float _2021 = fma(_1943, cbSceneParam._m0[_1998].w, fma(_1939, cbSceneParam._m0[_1998].z, fma(_1935, cbSceneParam._m0[_1998].y, _1931 * cbSceneParam._m0[_1998].x)));
        float _2026 = cbSceneParam._m0[33u].z * _2021;
        float _2028 = cbSceneParam._m0[33u].w * _2021;
        float _2031 = fma(_1943, cbSceneParam._m0[_1990].w, fma(_1939, cbSceneParam._m0[_1990].z, fma(_1935, cbSceneParam._m0[_1990].y, _1931 * cbSceneParam._m0[_1990].x))) / _2021;
        float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
        float _4342 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2086 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2009) / _2021, (_2028 + _2013) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 + _2009) / _2021, (_2013 - _2026) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2026) / _2021, (_2013 - _2028) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2028) / _2021, (_2026 + _2013) / _2021), _2031), 0.0)).x), vec4(0.25)));
        _2093 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
        _2094 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
        _2095 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2093 = 1.0;
        _2094 = 1.0;
        _2095 = 1.0;
    }
    float _2159;
    float _2161;
    float _2163;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2147 = fma(_1943, cbSceneParam._m0[63u].w, fma(_1939, cbSceneParam._m0[63u].z, fma(_1935, cbSceneParam._m0[63u].y, _1931 * cbSceneParam._m0[63u].x)));
        float _2148 = fma(_1943, cbSceneParam._m0[60u].w, fma(_1939, cbSceneParam._m0[60u].z, fma(_1935, cbSceneParam._m0[60u].y, _1931 * cbSceneParam._m0[60u].x))) / _2147;
        float _2149 = fma(_1943, cbSceneParam._m0[61u].w, fma(_1939, cbSceneParam._m0[61u].z, fma(_1935, cbSceneParam._m0[61u].y, _1931 * cbSceneParam._m0[61u].x))) / _2147;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2148 >= cbSceneParam._m0[64u].x) && (_2149 >= cbSceneParam._m0[64u].y)) && (_2148 <= cbSceneParam._m0[64u].z)) && (_2149 <= cbSceneParam._m0[64u].w))
        {
            float _2287 = fma(_1943, cbSceneParam._m0[62u].w, fma(_1939, cbSceneParam._m0[62u].z, fma(_1935, cbSceneParam._m0[62u].y, _1931 * cbSceneParam._m0[62u].x))) / _2147;
            float _2291 = isnan(cbSceneParam._m0[41u].w) ? _2287 : (isnan(_2287) ? cbSceneParam._m0[41u].w : max(_2287, cbSceneParam._m0[41u].w));
            float _2334 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
            float _4358 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
            float _2341 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2148, cbSceneParam._m0[33u].w + _2149), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2148, _2149 - cbSceneParam._m0[33u].z), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].z, _2149 - cbSceneParam._m0[33u].w), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2149), _2291), 0.0)).x), vec4(0.25)));
            float _2345 = 1.0 - (_2341 * cbSceneParam._m0[34u].x);
            float _2346 = 1.0 - (_2341 * cbSceneParam._m0[34u].y);
            float _2347 = 1.0 - (_2341 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2346) ? _2094 : (isnan(_2094) ? _2346 : min(_2094, _2346));
            frontier_phi_36_35_ladder_1 = isnan(_2347) ? _2095 : (isnan(_2095) ? _2347 : min(_2095, _2347));
            frontier_phi_36_35_ladder_2 = isnan(_2345) ? _2093 : (isnan(_2093) ? _2345 : min(_2093, _2345));
        }
        else
        {
            frontier_phi_36_35_ladder = _2094;
            frontier_phi_36_35_ladder_1 = _2095;
            frontier_phi_36_35_ladder_2 = _2093;
        }
        _2159 = frontier_phi_36_35_ladder_2;
        _2161 = frontier_phi_36_35_ladder;
        _2163 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2159 = _2093;
        _2161 = _2094;
        _2163 = _2095;
    }
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_794 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _866 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2206 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2210 = _2170 | 1u;
    float _2221 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_649, _650, _651));
    float _2224 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_649, _650, _651));
    float _4394 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _4405 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2229 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2231 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2238 = ((cbLight._m0[_2187].x * _2193) * _2231) + (((cbLight._m0[_2197].x * _2159) * _2206) * _2229);
    float _2239 = ((_2193 * cbLight._m0[_2187].y) * _2231) + (((cbLight._m0[_2197].y * _2161) * _2206) * _2229);
    float _2240 = ((_2193 * cbLight._m0[_2187].z) * _2231) + (((cbLight._m0[_2197].z * _2163) * _2206) * _2229);
    uvec4 _2244 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2246 = _2244.x == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2246)
    {
        _2348 = _2238;
        _2350 = _2239;
        _2352 = _2240;
    }
    else
    {
        uint _2356 = _2170 + 6u;
        float _2372 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4416 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2375 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2348 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2238;
        _2350 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2239;
        _2352 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2240;
    }
    bool _2355 = _2244.y == 0u;
    float _2410;
    float _2412;
    float _2414;
    if (_2355)
    {
        _2410 = _2348;
        _2412 = _2350;
        _2414 = _2352;
    }
    else
    {
        uint _2583 = _2170 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4432 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2602 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2410 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2348;
        _2412 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2350;
        _2414 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2352;
    }
    uint _2417 = _2170 + 8u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _781) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2170].x + _729;
    float _2433 = cbLight._m0[_2170].y + _730;
    float _2434 = cbLight._m0[_2170].z + _731;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2170].xyz));
    float _4448 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2446 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2447 = dot(vec3(_649, _650, _651), vec3(_2439, _2440, _2441));
    float _4470 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2451 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2439, _2440, _2441));
    float _4481 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2455 = _2431 * _2431;
    float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
    float _2467 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2468 = 0.959999978542327880859375 - _848;
    float _2470 = 0.959999978542327880859375 - _849;
    float _2471 = 0.959999978542327880859375 - _850;
    float _2478 = 1.0 - _2431;
    float _2489 = (0.5 / (((_2446 * ((_2445 * _2478) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2478) + _2431) * _2445))) * _2445;
    float _4492 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
    uint _2505 = _2170 + 9u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _781) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2210].x + _729;
    float _2519 = cbLight._m0[_2210].y + _730;
    float _2520 = cbLight._m0[_2210].z + _731;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2210].xyz));
    float _4503 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2532 = dot(vec3(_649, _650, _651), vec3(_2525, _2526, _2527));
    float _4514 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2525, _2526, _2527));
    float _4525 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2517 * _2517;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2558 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2446 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2558) + _2517) * _2531))) * _2531;
    float _4536 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    float _2580 = (((((_2551 * _2468) + _851) * cbLight._m0[_2505].x) * _2570) * _2193) + ((((cbLight._m0[_2417].x * _2159) * ((_2467 * _2468) + _851)) * _2491) * _2206);
    float _2581 = (((((_2551 * _2470) + _853) * cbLight._m0[_2505].y) * _2570) * _2193) + ((((cbLight._m0[_2417].y * _2161) * ((_2467 * _2470) + _853)) * _2491) * _2206);
    float _2582 = (((((_2551 * _2471) + _854) * cbLight._m0[_2505].z) * _2570) * _2193) + ((((cbLight._m0[_2417].z * _2163) * ((_2467 * _2471) + _854)) * _2491) * _2206);
    float _2638;
    float _2640;
    float _2642;
    if (_2246)
    {
        _2638 = _2580;
        _2640 = _2581;
        _2642 = _2582;
    }
    else
    {
        uint _2644 = _2170 + 2u;
        uint _2648 = _2170 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _781) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _729;
        float _2665 = cbLight._m0[_2644].y + _730;
        float _2666 = cbLight._m0[_2644].z + _731;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2644].xyz));
        float _4547 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2678 = dot(vec3(_649, _650, _651), vec3(_2671, _2672, _2673));
        float _4558 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4569 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2446 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2704) + _2663) * _2677))) * _2677;
        float _4580 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2638 = (((((_2697 * _2468) + _851) * cbLight._m0[_2648].x) * _2716) * _2717) + _2580;
        _2640 = (((((_2697 * _2470) + _853) * cbLight._m0[_2648].y) * _2716) * _2717) + _2581;
        _2642 = (((((_2697 * _2471) + _854) * cbLight._m0[_2648].z) * _2716) * _2717) + _2582;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2355)
    {
        _2748 = _2638;
        _2750 = _2640;
        _2752 = _2642;
    }
    else
    {
        uint _2759 = _2170 + 3u;
        uint _2763 = _2170 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _781) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _729;
        float _2780 = cbLight._m0[_2759].y + _730;
        float _2781 = cbLight._m0[_2759].z + _731;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2759].xyz));
        float _4596 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2793 = dot(vec3(_649, _650, _651), vec3(_2786, _2787, _2788));
        float _4607 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4618 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2446 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2819) + _2778) * _2792))) * _2792;
        float _4629 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2748 = (((((_2812 * _2468) + _851) * cbLight._m0[_2763].x) * _2831) * _2832) + _2638;
        _2750 = (((((_2812 * _2470) + _853) * cbLight._m0[_2763].y) * _2831) * _2832) + _2640;
        _2752 = (((((_2812 * _2471) + _854) * cbLight._m0[_2763].z) * _2831) * _2832) + _2642;
    }
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_2168.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2854)));
        float _2875 = (log2(_1946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
        }
        else
        {
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            uint _3114 = 0u;
            uint _3123;
            bool _3124;
            for (;;)
            {
                _3123 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                _3124 = _3123 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3124)
                {
                    frontier_phi_68_pred = _3113;
                    frontier_phi_68_pred_1 = _3112;
                    frontier_phi_68_pred_2 = _3111;
                    frontier_phi_68_pred_3 = _3109;
                    frontier_phi_68_pred_4 = _3108;
                    frontier_phi_68_pred_5 = _3110;
                }
                else
                {
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    uint _3238;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3123;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    for (;;)
                    {
                        uint _3242 = uint(findLSB(_3238)) + (_3114 << 5u);
                        uint _3239 = (_3238 + 4294967295u) & _3238;
                        uint _3244 = _3242 * 48u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3264 = (_3242 * 48u) + 4u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3283 = (_3242 * 48u) + 8u;
                        vec3 _3294 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x));
                        float _3298 = _3258.x - _1944;
                        float _3299 = _3258.y - _1945;
                        float _3300 = _3258.z - _1946;
                        float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                        float _3304 = inversesqrt(_3301);
                        float _3305 = _3304 * _3298;
                        float _3306 = _3304 * _3299;
                        float _3307 = _3304 * _3300;
                        float _3308 = dot(vec3(_762, _765, _768), vec3(_3305, _3306, _3307));
                        float _3313 = 1.0 - (_3301 * _3258.w);
                        float _4655 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3315 = sqrt(_3301) * _3277.w;
                        float _3318 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3308) + _3319;
                        float _3325 = _3315 * _3315;
                        float _3329 = ((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3314) / ((_3325 * 0.699999988079071044921875) + 1.0);
                        float _3333 = (-0.0) - _1944;
                        float _3334 = (-0.0) - _1945;
                        float _3335 = (-0.0) - _1946;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3349 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                        float _3350 = 1.0 - _882;
                        float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                        float _3358 = _3357 * _3357;
                        float _3359 = _3358 * _3358;
                        float _3360 = _3340 + _3305;
                        float _3361 = _3341 + _3306;
                        float _3362 = _3342 + _3307;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3370 = dot(vec3(_762, _765, _768), vec3(_3340, _3341, _3342));
                        float _4671 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3374 = dot(vec3(_762, _765, _768), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                        float _4682 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                        float _3382 = _3318 * _3358;
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3308) + _3383;
                        float _4693 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3388 = 1.0 - _3358;
                        float _3398 = (0.5 / (((_3387 * ((_3373 * _3388) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3358) * _3373))) * _3387;
                        float _4704 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3409 = (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3381 * _3381) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125))) * _3314;
                        _3167 = (_3329 * _3277.x) + _3235;
                        _3168 = (_3329 * _3277.y) + _3236;
                        _3169 = (_3329 * _3277.z) + _3237;
                        _3164 = (_3409 * _3294.x) + _3232;
                        _3165 = (_3409 * _3294.y) + _3233;
                        _3166 = (_3409 * _3294.z) + _3234;
                        if (_3239 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3239;
                        }
                    }
                    frontier_phi_68_pred = _3169;
                    frontier_phi_68_pred_1 = _3168;
                    frontier_phi_68_pred_2 = _3167;
                    frontier_phi_68_pred_3 = _3165;
                    frontier_phi_68_pred_4 = _3164;
                    frontier_phi_68_pred_5 = _3166;
                }
                _2975 = frontier_phi_68_pred;
                _2973 = frontier_phi_68_pred_1;
                _2971 = frontier_phi_68_pred_2;
                _2967 = frontier_phi_68_pred_3;
                _2965 = frontier_phi_68_pred_4;
                _2969 = frontier_phi_68_pred_5;
                uint _3115 = _3114 + 1u;
                if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3108 = _2965;
                    _3109 = _2967;
                    _3110 = _2969;
                    _3111 = _2971;
                    _3112 = _2973;
                    _3113 = _2975;
                    _3114 = _3115;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
        }
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.z;
        uint _2981 = (_2979 >> 8u) & 15u;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((4294967295u << _2981) & _2885) == 0u)
        {
            _3076 = _2964;
            _3078 = _2966;
            _3080 = _2968;
            _3082 = _2970;
            _3084 = _2972;
            _3086 = _2974;
        }
        else
        {
            float _3101 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
            float _3102 = _3101 * _1944;
            float _3103 = _3101 * _1945;
            float _3104 = _3101 * _1946;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2981 < ((_2979 >> 12u) & 15u))
            {
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3215 = _2964;
                float _3216 = _2966;
                float _3217 = _2968;
                float _3218 = _2970;
                float _3219 = _2972;
                float _3220 = _2974;
                uint _3221 = _2981;
                uint _3230;
                bool _3231;
                for (;;)
                {
                    _3230 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                    _3231 = _3230 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3231)
                    {
                        frontier_phi_74_pred = _3217;
                        frontier_phi_74_pred_1 = _3216;
                        frontier_phi_74_pred_2 = _3215;
                        frontier_phi_74_pred_3 = _3220;
                        frontier_phi_74_pred_4 = _3219;
                        frontier_phi_74_pred_5 = _3218;
                    }
                    else
                    {
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        float _3430 = _3218;
                        float _3431 = _3219;
                        float _3432 = _3220;
                        uint _3433 = _3230;
                        uint _3434;
                        vec4 _3459;
                        float _3460;
                        vec4 _3475;
                        vec3 _3487;
                        vec4 _3503;
                        vec4 _3518;
                        float _3565;
                        bool _3566;
                        for (;;)
                        {
                            uint _3444 = ((_3221 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3433));
                            _3434 = (_3433 + 4294967295u) & _3433;
                            uint _3446 = _3444 * 40u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3460 = _3459.w;
                            uint _3462 = (_3444 * 40u) + 4u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3444 * 40u) + 8u;
                            _3487 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x));
                            uint _3490 = (_3444 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3444 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3521 = (_3444 * 40u) + 24u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3540 = (_3444 * 40u) + 28u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3565 = fma(_1946, _3553.z, fma(_1945, _3553.y, _3553.x * _1944)) + _3553.w;
                            _3566 = !((fma(_1946, _3534.z, fma(_1945, _3534.y, _3534.x * _1944)) + _3534.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3566)
                            {
                                float _3593 = _3459.x - _1944;
                                float _3594 = _3459.y - _1945;
                                float _3595 = _3459.z - _1946;
                                float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                                float _3599 = inversesqrt(_3596);
                                float _3600 = _3599 * _3593;
                                float _3601 = _3599 * _3594;
                                float _3602 = _3599 * _3595;
                                float _3606 = 1.0 - (_3596 / (_3460 * _3460));
                                float _4715 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3611 = sqrt(_3596) * _3475.w;
                                float _3613 = 1.39999997615814208984375 / (_3611 + 1.39999997615814208984375);
                                float _3614 = _3613 * _3613;
                                float _3617 = ((1.0 - _3614) * dot(vec3(_3600, _3601, _3602), vec3(_762, _765, _768))) + _3614;
                                float _3620 = _3611 * _3611;
                                float _3624 = (fma(_1946, _3503.z, fma(_1945, _3503.y, _3503.x * _1944)) + _3503.w) / _3565;
                                float _3625 = (fma(_1946, _3518.z, fma(_1945, _3518.y, _3518.x * _1944)) + _3518.w) / _3565;
                                float _3629 = 1.0 - dot(vec2(_3624, _3625), vec2(_3624, _3625));
                                float _4731 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3631 = _3630 * (((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3607) / ((_3620 * 0.699999988079071044921875) + 1.0));
                                float _3643 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                                float _3644 = 1.0 - _882;
                                float _3651 = sqrt(1.0 - ((1.0 - (_3644 * _3644)) * (1.0 - (_3643 * _3643))));
                                float _3652 = _3651 * _3651;
                                float _3653 = _3652 * _3652;
                                float _3654 = _3600 - _3102;
                                float _3655 = _3601 - _3103;
                                float _3656 = _3602 - _3104;
                                float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                                float _3664 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104));
                                float _4742 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3668 = dot(vec3(_762, _765, _768), vec3(_3660 * _3654, _3660 * _3655, _3660 * _3656));
                                float _4753 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3675 = ((_3671 * _3671) * (_3653 + (-1.0))) + 1.0;
                                float _3676 = _3613 * _3652;
                                float _3677 = _3676 * _3676;
                                float _3683 = ((1.0 - _3677) * dot(vec3(_762, _765, _768), vec3(_3600, _3601, _3602))) + _3677;
                                float _4764 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3685 = 1.0 - _3652;
                                float _3695 = (0.5 / (((_3684 * ((_3667 * _3685) + _3652)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3652) * _3667))) * _3684;
                                float _4775 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3705 = (_3630 * _3607) * (((_3653 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3675 * _3675) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3705 * _3487.z;
                                frontier_phi_80_pred_1 = _3705 * _3487.y;
                                frontier_phi_80_pred_2 = _3705 * _3487.x;
                                frontier_phi_80_pred_3 = _3631 * _3475.z;
                                frontier_phi_80_pred_4 = _3631 * _3475.y;
                                frontier_phi_80_pred_5 = _3631 * _3475.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3711 = frontier_phi_80_pred;
                            _3710 = frontier_phi_80_pred_1;
                            _3709 = frontier_phi_80_pred_2;
                            _3714 = frontier_phi_80_pred_3;
                            _3713 = frontier_phi_80_pred_4;
                            _3712 = frontier_phi_80_pred_5;
                            _3417 = _3712 + _3430;
                            _3418 = _3713 + _3431;
                            _3419 = _3714 + _3432;
                            _3414 = _3709 + _3427;
                            _3415 = _3710 + _3428;
                            _3416 = _3711 + _3429;
                            if (_3434 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3434;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3416;
                        frontier_phi_74_pred_1 = _3415;
                        frontier_phi_74_pred_2 = _3414;
                        frontier_phi_74_pred_3 = _3419;
                        frontier_phi_74_pred_4 = _3418;
                        frontier_phi_74_pred_5 = _3417;
                    }
                    _3081 = frontier_phi_74_pred;
                    _3079 = frontier_phi_74_pred_1;
                    _3077 = frontier_phi_74_pred_2;
                    _3087 = frontier_phi_74_pred_3;
                    _3085 = frontier_phi_74_pred_4;
                    _3083 = frontier_phi_74_pred_5;
                    uint _3222 = _3221 + 1u;
                    if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3215 = _3077;
                        _3216 = _3079;
                        _3217 = _3081;
                        _3218 = _3083;
                        _3219 = _3085;
                        _3220 = _3087;
                        _3221 = _3222;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3085;
                frontier_phi_62_63_ladder_1 = _3083;
                frontier_phi_62_63_ladder_2 = _3081;
                frontier_phi_62_63_ladder_3 = _3087;
                frontier_phi_62_63_ladder_4 = _3079;
                frontier_phi_62_63_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_62_63_ladder = _2972;
                frontier_phi_62_63_ladder_1 = _2970;
                frontier_phi_62_63_ladder_2 = _2968;
                frontier_phi_62_63_ladder_3 = _2974;
                frontier_phi_62_63_ladder_4 = _2966;
                frontier_phi_62_63_ladder_5 = _2964;
            }
            _3076 = frontier_phi_62_63_ladder_5;
            _3078 = frontier_phi_62_63_ladder_4;
            _3080 = frontier_phi_62_63_ladder_2;
            _3082 = frontier_phi_62_63_ladder_1;
            _3084 = frontier_phi_62_63_ladder;
            _3086 = frontier_phi_62_63_ladder_3;
        }
        float _3091 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2897 = (_3091 * _3082) + _2410;
        _2899 = (_3091 * _3084) + _2412;
        _2901 = (_3091 * _3086) + _2414;
        _2903 = ((_3076 * _851) * _3091) + _2748;
        _2905 = ((_3078 * _853) * _3091) + _2750;
        _2907 = ((_3080 * _854) * _3091) + _2752;
    }
    else
    {
        _2897 = _2410;
        _2899 = _2412;
        _2901 = _2414;
        _2903 = _2748;
        _2905 = _2750;
        _2907 = _2752;
    }
    float _4791 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4802 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4813 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    uint _2927 = _794 + 6u;
    float _2935 = _737 / cbSceneParam._m0[86u].x;
    float _2936 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _672 : (isnan(_672) ? cbSceneParam._m0[77u].w : min(_672, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_672 > cbSceneParam._m0[78u].w)
    {
        float _2989 = isnan(_672) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _672 : min(cbSceneParam._m0[80u].w, _672));
        float _2990 = _2989 / _672;
        float _3001 = _2990 * _722;
        float _3002 = _723 * _2990;
        float _3003 = (-0.0) - _3002;
        float _3004 = _2990 * _724;
        float _3006 = (cbSceneParam._m0[77u].w * _3003) / _2989;
        float _3007 = _3006 + cbSceneParam._m0[79u].w;
        float _3008 = cbSceneParam._m0[79u].w - _3002;
        float _3014 = sqrt(((_3001 * _3001) + (_3002 * _3002)) + (_3004 * _3004));
        float _3017 = (1.0 - (cbSceneParam._m0[77u].w / _2989)) * _3014;
        float _3022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3177;
        if (abs((_3003 - _3006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3177 = ((((_3007 > 0.0) ? exp2(_3022 * _3007) : (2.0 - exp2(_3024 * _3007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3017;
        }
        else
        {
            float _3137 = 1.0 / cbSceneParam._m0[80u].x;
            float _3138 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : max(_3007, _3008));
            float _3139 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : min(_3007, _3008));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            _3177 = ((abs(_3014 / _3003) * cbSceneParam._m0[80u].y) * ((((_3148 - _3149) * 2.0) - ((exp2(_3022 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0)))) - exp2(_3022 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))))) * _3137)) - ((exp2(_3024 * _3148) - exp2(_3024 * _3149)) * _3137))) + (_3017 * cbSceneParam._m0[80u].z);
        }
        vec4 _3179 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3188 = exp2((_3177 * (-1.44269502162933349609375)) * (1.0 - _3179.w));
        float _3189 = log2(_3188);
        float _3205 = log2(_2955);
        _3026 = (exp2(_3205 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].x)) * _3179.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3028 = (exp2(_3205 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].y)) * _3179.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3030 = (exp2(_3205 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].z)) * _3179.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3032 = _3188 * _2955;
    }
    else
    {
        _3026 = _2952;
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
    }
    float _3044 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3045 = _3044 == 3.0;
    float _3046 = log2(_3032);
    float _3053 = exp2(_3046 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2897 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _866))) + ((_2903 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3054 = exp2(_3046 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2899 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _866))) + ((_2905 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3055 = exp2(_3046 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2901 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _866))) + ((_2907 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3064 = (_3044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3064 * (_3045 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3026)));
    SV_Target.y = _3064 * (_3045 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3028)));
    SV_Target.z = _3064 * (_3045 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3030)));
    SV_Target.w = cbInstanceData._m0[_2927].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
}


