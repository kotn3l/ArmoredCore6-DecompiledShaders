#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1349;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _266 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _280 = exp2(log2(_266.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _281 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _282 = isnan(1.0) ? _281 : (isnan(_281) ? 1.0 : min(_281, 1.0));
    vec4 _296 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _300 = _296.z;
    float _301 = _296.w;
    float _309 = exp2(log2(_300 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _324 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _347 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _347.x;
    float _350 = _347.y;
    float _374 = ((cbMtdParam._m0[19u].w * _347.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _349)) + _349;
    bool _410 = _374 >= 0.25;
    bool _415 = _374 >= 0.3499999940395355224609375;
    bool _420 = _374 >= 0.5;
    bool _425 = _374 >= 0.64999997615814208984375;
    bool _430 = _374 >= 0.75;
    vec4 _458 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _469 = cbMtdParam._m0[9u].x * _458.x;
    float _470 = cbMtdParam._m0[9u].y * _458.y;
    float _471 = cbMtdParam._m0[9u].z * _458.z;
    float _478 = (((((((_430 ? cbMtdParam._m0[13u].x : (_425 ? cbMtdParam._m0[18u].x : (_420 ? cbMtdParam._m0[17u].x : (_415 ? cbMtdParam._m0[16u].x : (_410 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _350) + cbMtdParam._m0[10u].x) * _324.x) - _469) * _311) + _469;
    float _479 = (((((((_430 ? cbMtdParam._m0[13u].y : (_425 ? cbMtdParam._m0[18u].y : (_420 ? cbMtdParam._m0[17u].y : (_415 ? cbMtdParam._m0[16u].y : (_410 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _350) + cbMtdParam._m0[10u].y) * _324.y) - _470) * _311) + _470;
    float _480 = (((((((_430 ? cbMtdParam._m0[13u].z : (_425 ? cbMtdParam._m0[18u].z : (_420 ? cbMtdParam._m0[17u].z : (_415 ? cbMtdParam._m0[16u].z : (_410 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _350) + cbMtdParam._m0[10u].z) * _324.z) - _471) * _311) + _471;
    float _487 = exp2(log2(_301) * cbMtdParam._m0[21u].y);
    vec4 _500 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _520 = (((cbMtdParam._m0[11u].x * _500.x) - _478) * _487) + _478;
    float _521 = (((cbMtdParam._m0[11u].y * _500.y) - _479) * _487) + _479;
    float _522 = (((cbMtdParam._m0[11u].z * _500.z) - _480) * _487) + _480;
    vec4 _534 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _558 = (_266.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _534.x) - _520) * _282) + _520);
    float _560 = (_266.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _534.y) - _521) * _282) + _521);
    float _562 = (_266.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _534.z) - _522) * _282) + _522);
    float _567 = exp2(log2(1.0 - _301) * 0.00999999977648258209228515625);
    float _585 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _567) + cbMtdParam._m0[21u].z;
    float _604 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _585) + cbMtdParam._m0[20u].z) * _487) + _585;
    float _624 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _604) + cbMtdParam._m0[22u].z) * _282) + _604;
    vec4 _636 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _654 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _656 = _654.x;
    float _657 = _654.y;
    float _660 = cbMtdParam._m0[19u].x + _654.z;
    float _663 = (((cbMtdParam._m0[20u].x + _636.z) - _660) * _567) + _660;
    vec4 _675 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _687 = (_300 * 2.0) * ((((_675.z - _663) + cbMtdParam._m0[22u].x) * _487) + _663);
    vec4 _699 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _708 = (((_699.z - _687) + cbMtdParam._m0[21u].x) * _282) + _687;
    float _719 = ((_636.x - _656) * _567) + _656;
    float _720 = ((_636.y - _657) * _567) + _657;
    float _725 = ((_675.x - _719) * _487) + _719;
    float _726 = ((_675.y - _720) * _487) + _720;
    float _735 = ((((_699.x - _725) * _282) + _725) * 2.0) + (-1.0);
    float _736 = ((((_699.y - _726) * _282) + _726) * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _3978 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _742 = sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))));
    float _745 = _735 + (cbMtdParam._m0[21u].w * ((_296.x * 2.0) + (-1.0)));
    float _746 = _736 + (cbMtdParam._m0[21u].w * ((_296.y * 2.0) + (-1.0)));
    float _749 = fma(_742, _245, fma(_746, _237 * TANGENT.x, (_223 * _215) * _745));
    float _752 = fma(_742, _246, fma(_746, _237 * TANGENT.y, (_223 * _216) * _745));
    float _755 = fma(_742, _247, fma(_746, _237 * TANGENT.z, (_223 * _217) * _745));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3989 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _763 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4011 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4022 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4033 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _767 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _851 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _853 = _851.w;
    float _871 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _874 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _877 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    vec4 _879 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _890 = (((_879.y - _763) + (_879.w * _763)) * cbMtdParam._m0[3u].x) + _763;
    uint _903 = uint(roundEven(NORMAL.w)) * 13u;
    uint _905 = (_903 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_905].z;
    float _4044 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    vec4 _917 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.x - _767) + (_922.w * _767)) * cbMtdParam._m0[3u].x) + _767;
    float _946 = (cbMtdParam._m0[3u].x * (((_914 * _853) - _914) + _917.x)) + _914;
    float _947 = (cbMtdParam._m0[3u].x * (((_915 * _853) - _915) + _917.y)) + _915;
    float _948 = (cbMtdParam._m0[3u].x * (((_916 * _853) - _916) + _917.z)) + _916;
    float _949 = 1.0 - _933;
    float _950 = _949 * _946;
    float _951 = _949 * _947;
    float _952 = _949 * _948;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _933;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _933;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _933;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _975 = _972.x * TEXCOORD_4;
    float _976 = dot(vec3(_760, _761, _762), vec3(_840, _841, _842));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _760) - _840;
    float _984 = (_979 * _761) - _841;
    float _985 = (_979 * _762) - _842;
    float _989 = abs(dot(vec3(_840, _841, _842), vec3(_760, _761, _762)));
    float _4077 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_890);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1074 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1078 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1082 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1106 = _1039 + _760;
        float _1107 = _1043 + _761;
        float _1108 = _1047 + _762;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1074;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1078;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1082;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1074 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1078 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1082 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_760, _761, _762), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4125 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_760, _761, _762), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4158 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_760, _761, _762), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4191 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1393 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1397 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1420 = _1039 + _760;
        float _1421 = _1043 + _761;
        float _1422 = _1047 + _762;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_760, _761, _762), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4254 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_760, _761, _762), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4287 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_760, _761, _762), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4320 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1349;
        _1659 = _1349;
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = _1349;
        _1669 = _1349;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1361)) + _1361;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1362)) + _1362;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1363)) + _1363;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _983 * 0.5;
    float _1727 = _984 * 0.5;
    float _1728 = _985 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _890);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1856 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1859 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1887 = frontier_phi_16_14_ladder;
        }
        float _2058;
        if (_1856 > 0.0)
        {
            _2058 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2058 = frontier_phi_25_21_ladder;
        }
        float _2352;
        if (_1859 > 0.0)
        {
            _2352 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2352 = frontier_phi_37_32_ladder;
        }
        float _2354 = isnan(_2058) ? _1887 : (isnan(_1887) ? _2058 : min(_1887, _2058));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1853) + _1842;
        float _2360 = (_2355 * _1856) + _1846;
        float _2361 = (_2355 * _1859) + _1850;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_15_37_ladder = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2506.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2506.z * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_15_37_ladder_1;
        _1877 = frontier_phi_15_37_ladder;
        _1879 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1795);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _890);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1951 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1954 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2063;
        if (_1948 > 0.0)
        {
            _2063 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2063 = frontier_phi_27_23_ladder;
        }
        float _2379;
        if (_1951 > 0.0)
        {
            _2379 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2379 = frontier_phi_39_34_ladder;
        }
        float _2717;
        if (_1954 > 0.0)
        {
            _2717 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2717 = frontier_phi_49_46_ladder;
        }
        float _2719 = isnan(_2379) ? _2063 : (isnan(_2063) ? _2379 : min(_2063, _2379));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1948) + _1937;
        float _2725 = (_2720 * _1951) + _1941;
        float _2726 = (_2720 * _1954) + _1945;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_24_49_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_24_49_ladder_2;
        _1975 = frontier_phi_24_49_ladder_1;
        _1977 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1884);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_1010 * _960) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1992 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1994 = (((_1010 * _963) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2050 = _2037 / _2049;
    float _2051 = _2041 / _2049;
    float _2052 = _2045 / _2049;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2079 = ((uint(_2052 > cbSceneParam._m0[59u].y) + uint(_2052 > cbSceneParam._m0[59u].x)) + uint(_2052 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2080 = _2079 + 43u;
        uint _2088 = _2079 + 44u;
        uint _2096 = _2079 + 45u;
        uint _2104 = _2079 + 46u;
        float _2115 = fma(_2049, cbSceneParam._m0[_2080].w, fma(_2045, cbSceneParam._m0[_2080].z, fma(_2041, cbSceneParam._m0[_2080].y, _2037 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2049, cbSceneParam._m0[_2088].w, fma(_2045, cbSceneParam._m0[_2088].z, fma(_2041, cbSceneParam._m0[_2088].y, _2037 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2049, cbSceneParam._m0[_2104].w, fma(_2045, cbSceneParam._m0[_2104].z, fma(_2041, cbSceneParam._m0[_2104].y, _2037 * cbSceneParam._m0[_2104].x)));
        float _2132 = cbSceneParam._m0[33u].z * _2127;
        float _2134 = cbSceneParam._m0[33u].w * _2127;
        float _2137 = fma(_2049, cbSceneParam._m0[_2096].w, fma(_2045, cbSceneParam._m0[_2096].z, fma(_2041, cbSceneParam._m0[_2096].y, _2037 * cbSceneParam._m0[_2096].x))) / _2127;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
        float _4446 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2132 + _2115) / _2127, (_2134 + _2119) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2115) / _2127, (_2119 - _2132) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2132) / _2127, (_2119 - _2134) / _2127), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 - _2134) / _2127, (_2132 + _2119) / _2127), _2137), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2049, cbSceneParam._m0[63u].w, fma(_2045, cbSceneParam._m0[63u].z, fma(_2041, cbSceneParam._m0[63u].y, _2037 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2049, cbSceneParam._m0[60u].w, fma(_2045, cbSceneParam._m0[60u].z, fma(_2041, cbSceneParam._m0[60u].y, _2037 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2049, cbSceneParam._m0[61u].w, fma(_2045, cbSceneParam._m0[61u].z, fma(_2041, cbSceneParam._m0[61u].y, _2037 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2392 = fma(_2049, cbSceneParam._m0[62u].w, fma(_2045, cbSceneParam._m0[62u].z, fma(_2041, cbSceneParam._m0[62u].y, _2037 * cbSceneParam._m0[62u].x))) / _2252;
            float _2396 = isnan(cbSceneParam._m0[41u].w) ? _2392 : (isnan(_2392) ? cbSceneParam._m0[41u].w : max(_2392, cbSceneParam._m0[41u].w));
            float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2051 * _2051) + (_2050 * _2050)) + (_2052 * _2052))) * cbSceneParam._m0[33u].y;
            float _4462 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
            float _2446 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2396), 0.0)).x), vec4(0.25)));
            float _2450 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
            float _2451 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
            float _2452 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_36_35_ladder_1 = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_36_35_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_36_35_ladder = _2199;
            frontier_phi_36_35_ladder_1 = _2200;
            frontier_phi_36_35_ladder_2 = _2198;
        }
        _2264 = frontier_phi_36_35_ladder_2;
        _2266 = frontier_phi_36_35_ladder;
        _2268 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_903 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _975 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_760, _761, _762));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_760, _761, _762));
    float _4498 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4509 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2264) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2266) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2268) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2351)
    {
        _2453 = _2343;
        _2455 = _2344;
        _2457 = _2345;
    }
    else
    {
        uint _2461 = _2275 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4520 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2480 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2343;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2344;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2345;
    }
    bool _2460 = _2349.y == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2460)
    {
        _2515 = _2453;
        _2517 = _2455;
        _2519 = _2457;
    }
    else
    {
        uint _2688 = _2275 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4536 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2707 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2515 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2453;
        _2517 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2455;
        _2519 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2457;
    }
    uint _2522 = _2275 + 8u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _890) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2275].x + _840;
    float _2538 = cbLight._m0[_2275].y + _841;
    float _2539 = cbLight._m0[_2275].z + _842;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2275].xyz));
    float _4552 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2551 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2552 = dot(vec3(_760, _761, _762), vec3(_2544, _2545, _2546));
    float _4574 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2544, _2545, _2546));
    float _4585 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2536 * _2536;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
    float _2573 = 0.959999978542327880859375 - _957;
    float _2575 = 0.959999978542327880859375 - _958;
    float _2576 = 0.959999978542327880859375 - _959;
    float _2583 = 1.0 - _2536;
    float _2594 = (0.5 / (((_2551 * ((_2550 * _2583) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2583) + _2536) * _2550))) * _2550;
    float _4596 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    uint _2610 = _2275 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _890) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2315].x + _840;
    float _2624 = cbLight._m0[_2315].y + _841;
    float _2625 = cbLight._m0[_2315].z + _842;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2315].xyz));
    float _4607 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2637 = dot(vec3(_760, _761, _762), vec3(_2630, _2631, _2632));
    float _4618 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2630, _2631, _2632));
    float _4629 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2663 = 1.0 - _2622;
    float _2673 = (0.5 / (((_2551 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2663) + _2622) * _2636))) * _2636;
    float _4640 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2685 = (((((_2656 * _2573) + _960) * cbLight._m0[_2610].x) * _2675) * _2298) + ((((cbLight._m0[_2522].x * _2264) * ((_2572 * _2573) + _960)) * _2596) * _2311);
    float _2686 = (((((_2656 * _2575) + _962) * cbLight._m0[_2610].y) * _2675) * _2298) + ((((cbLight._m0[_2522].y * _2266) * ((_2572 * _2575) + _962)) * _2596) * _2311);
    float _2687 = (((((_2656 * _2576) + _963) * cbLight._m0[_2610].z) * _2675) * _2298) + ((((cbLight._m0[_2522].z * _2268) * ((_2572 * _2576) + _963)) * _2596) * _2311);
    float _2743;
    float _2745;
    float _2747;
    if (_2351)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2275 + 2u;
        uint _2753 = _2275 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _890) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _840;
        float _2770 = cbLight._m0[_2749].y + _841;
        float _2771 = cbLight._m0[_2749].z + _842;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2749].xyz));
        float _4651 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2783 = dot(vec3(_760, _761, _762), vec3(_2776, _2777, _2778));
        float _4662 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4673 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2551 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2809) + _2768) * _2782))) * _2782;
        float _4684 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2743 = (((((_2802 * _2573) + _960) * cbLight._m0[_2753].x) * _2821) * _2822) + _2685;
        _2745 = (((((_2802 * _2575) + _962) * cbLight._m0[_2753].y) * _2821) * _2822) + _2686;
        _2747 = (((((_2802 * _2576) + _963) * cbLight._m0[_2753].z) * _2821) * _2822) + _2687;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2460)
    {
        _2853 = _2743;
        _2855 = _2745;
        _2857 = _2747;
    }
    else
    {
        uint _2864 = _2275 + 3u;
        uint _2868 = _2275 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _890) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _840;
        float _2885 = cbLight._m0[_2864].y + _841;
        float _2886 = cbLight._m0[_2864].z + _842;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2864].xyz));
        float _4700 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2898 = dot(vec3(_760, _761, _762), vec3(_2891, _2892, _2893));
        float _4711 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4722 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2924 = 1.0 - _2883;
        float _2934 = (0.5 / (((_2551 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2924) + _2883) * _2897))) * _2897;
        float _4733 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2853 = (((((_2917 * _2573) + _960) * cbLight._m0[_2868].x) * _2936) * _2937) + _2743;
        _2855 = (((((_2917 * _2575) + _962) * cbLight._m0[_2868].y) * _2936) * _2937) + _2745;
        _2857 = (((((_2917 * _2576) + _963) * cbLight._m0[_2868].z) * _2936) * _2937) + _2747;
    }
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_2273.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2959)));
        float _2980 = (log2(_2052 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            uint _3219 = 0u;
            uint _3228;
            bool _3229;
            for (;;)
            {
                _3228 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                _3229 = _3228 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3229)
                {
                    frontier_phi_68_pred = _3218;
                    frontier_phi_68_pred_1 = _3217;
                    frontier_phi_68_pred_2 = _3216;
                    frontier_phi_68_pred_3 = _3214;
                    frontier_phi_68_pred_4 = _3213;
                    frontier_phi_68_pred_5 = _3215;
                }
                else
                {
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    uint _3343;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3228;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    for (;;)
                    {
                        uint _3347 = uint(findLSB(_3343)) + (_3219 << 5u);
                        uint _3344 = (_3343 + 4294967295u) & _3343;
                        uint _3349 = _3347 * 48u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3369 = (_3347 * 48u) + 4u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3388 = (_3347 * 48u) + 8u;
                        vec3 _3399 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x));
                        float _3403 = _3363.x - _2050;
                        float _3404 = _3363.y - _2051;
                        float _3405 = _3363.z - _2052;
                        float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                        float _3409 = inversesqrt(_3406);
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3413 = dot(vec3(_871, _874, _877), vec3(_3410, _3411, _3412));
                        float _3418 = 1.0 - (_3406 * _3363.w);
                        float _4759 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3419 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3420 = sqrt(_3406) * _3382.w;
                        float _3423 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3413) + _3424;
                        float _3430 = _3420 * _3420;
                        float _3434 = ((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3419) / ((_3430 * 0.699999988079071044921875) + 1.0);
                        float _3438 = (-0.0) - _2050;
                        float _3439 = (-0.0) - _2051;
                        float _3440 = (-0.0) - _2052;
                        float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                        float _3445 = _3444 * _3438;
                        float _3446 = _3444 * _3439;
                        float _3447 = _3444 * _3440;
                        float _3454 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                        float _3455 = 1.0 - _991;
                        float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                        float _3463 = _3462 * _3462;
                        float _3464 = _3463 * _3463;
                        float _3465 = _3445 + _3410;
                        float _3466 = _3446 + _3411;
                        float _3467 = _3447 + _3412;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3475 = dot(vec3(_871, _874, _877), vec3(_3445, _3446, _3447));
                        float _4775 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3479 = dot(vec3(_871, _874, _877), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                        float _4786 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3482 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                        float _3487 = _3423 * _3463;
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3413) + _3488;
                        float _4797 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3492 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3493 = 1.0 - _3463;
                        float _3503 = (0.5 / (((_3492 * ((_3478 * _3493) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3463) * _3478))) * _3492;
                        float _4808 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3514 = (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3486 * _3486) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125))) * _3419;
                        _3272 = (_3434 * _3382.x) + _3340;
                        _3273 = (_3434 * _3382.y) + _3341;
                        _3274 = (_3434 * _3382.z) + _3342;
                        _3269 = (_3514 * _3399.x) + _3337;
                        _3270 = (_3514 * _3399.y) + _3338;
                        _3271 = (_3514 * _3399.z) + _3339;
                        if (_3344 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3344;
                        }
                    }
                    frontier_phi_68_pred = _3274;
                    frontier_phi_68_pred_1 = _3273;
                    frontier_phi_68_pred_2 = _3272;
                    frontier_phi_68_pred_3 = _3270;
                    frontier_phi_68_pred_4 = _3269;
                    frontier_phi_68_pred_5 = _3271;
                }
                _3080 = frontier_phi_68_pred;
                _3078 = frontier_phi_68_pred_1;
                _3076 = frontier_phi_68_pred_2;
                _3072 = frontier_phi_68_pred_3;
                _3070 = frontier_phi_68_pred_4;
                _3074 = frontier_phi_68_pred_5;
                uint _3220 = _3219 + 1u;
                if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3213 = _3070;
                    _3214 = _3072;
                    _3215 = _3074;
                    _3216 = _3076;
                    _3217 = _3078;
                    _3218 = _3080;
                    _3219 = _3220;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        if (((4294967295u << _3086) & _2990) == 0u)
        {
            _3181 = _3069;
            _3183 = _3071;
            _3185 = _3073;
            _3187 = _3075;
            _3189 = _3077;
            _3191 = _3079;
        }
        else
        {
            float _3206 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
            float _3207 = _3206 * _2050;
            float _3208 = _3206 * _2051;
            float _3209 = _3206 * _2052;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3320 = _3069;
                float _3321 = _3071;
                float _3322 = _3073;
                float _3323 = _3075;
                float _3324 = _3077;
                float _3325 = _3079;
                uint _3326 = _3086;
                uint _3335;
                bool _3336;
                for (;;)
                {
                    _3335 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                    _3336 = _3335 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3336)
                    {
                        frontier_phi_74_pred = _3322;
                        frontier_phi_74_pred_1 = _3321;
                        frontier_phi_74_pred_2 = _3320;
                        frontier_phi_74_pred_3 = _3325;
                        frontier_phi_74_pred_4 = _3324;
                        frontier_phi_74_pred_5 = _3323;
                    }
                    else
                    {
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        float _3536 = _3324;
                        float _3537 = _3325;
                        uint _3538 = _3335;
                        uint _3539;
                        vec4 _3564;
                        float _3565;
                        vec4 _3580;
                        vec3 _3592;
                        vec4 _3607;
                        vec4 _3622;
                        float _3669;
                        bool _3670;
                        for (;;)
                        {
                            uint _3549 = ((_3326 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3538));
                            _3539 = (_3538 + 4294967295u) & _3538;
                            uint _3551 = _3549 * 40u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3565 = _3564.w;
                            uint _3567 = (_3549 * 40u) + 4u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3549 * 40u) + 8u;
                            _3592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x));
                            uint _3594 = (_3549 * 40u) + 16u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3609 = (_3549 * 40u) + 20u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3625 = (_3549 * 40u) + 24u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3644 = (_3549 * 40u) + 28u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3669 = fma(_2052, _3657.z, fma(_2051, _3657.y, _3657.x * _2050)) + _3657.w;
                            _3670 = !((fma(_2052, _3638.z, fma(_2051, _3638.y, _3638.x * _2050)) + _3638.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3670)
                            {
                                float _3697 = _3564.x - _2050;
                                float _3698 = _3564.y - _2051;
                                float _3699 = _3564.z - _2052;
                                float _3700 = dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699));
                                float _3703 = inversesqrt(_3700);
                                float _3704 = _3703 * _3697;
                                float _3705 = _3703 * _3698;
                                float _3706 = _3703 * _3699;
                                float _3710 = 1.0 - (_3700 / (_3565 * _3565));
                                float _4819 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3715 = sqrt(_3700) * _3580.w;
                                float _3717 = 1.39999997615814208984375 / (_3715 + 1.39999997615814208984375);
                                float _3718 = _3717 * _3717;
                                float _3721 = ((1.0 - _3718) * dot(vec3(_3704, _3705, _3706), vec3(_871, _874, _877))) + _3718;
                                float _3724 = _3715 * _3715;
                                float _3728 = (fma(_2052, _3607.z, fma(_2051, _3607.y, _3607.x * _2050)) + _3607.w) / _3669;
                                float _3729 = (fma(_2052, _3622.z, fma(_2051, _3622.y, _3622.x * _2050)) + _3622.w) / _3669;
                                float _3733 = 1.0 - dot(vec2(_3728, _3729), vec2(_3728, _3729));
                                float _4835 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3735 = _3734 * (((isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0))) * _3711) / ((_3724 * 0.699999988079071044921875) + 1.0));
                                float _3747 = exp2(log2(1.0 / ((_3724 * 3.5) + 5.0)) * 0.25);
                                float _3748 = 1.0 - _991;
                                float _3755 = sqrt(1.0 - ((1.0 - (_3748 * _3748)) * (1.0 - (_3747 * _3747))));
                                float _3756 = _3755 * _3755;
                                float _3757 = _3756 * _3756;
                                float _3758 = _3704 - _3207;
                                float _3759 = _3705 - _3208;
                                float _3760 = _3706 - _3209;
                                float _3764 = inversesqrt(dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760)));
                                float _3768 = dot(vec3(_871, _874, _877), vec3((-0.0) - _3207, (-0.0) - _3208, (-0.0) - _3209));
                                float _4846 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3772 = dot(vec3(_871, _874, _877), vec3(_3764 * _3758, _3764 * _3759, _3764 * _3760));
                                float _4857 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3779 = ((_3775 * _3775) * (_3757 + (-1.0))) + 1.0;
                                float _3780 = _3717 * _3756;
                                float _3781 = _3780 * _3780;
                                float _3787 = ((1.0 - _3781) * dot(vec3(_871, _874, _877), vec3(_3704, _3705, _3706))) + _3781;
                                float _4868 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3789 = 1.0 - _3756;
                                float _3799 = (0.5 / (((_3788 * ((_3771 * _3789) + _3756)) + 9.9999999392252902907785028219223e-09) + (((_3788 * _3789) + _3756) * _3771))) * _3788;
                                float _4879 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3809 = (_3734 * _3711) * (((_3757 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3779 * _3779) * ((_3724 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3809 * _3592.z;
                                frontier_phi_80_pred_1 = _3809 * _3592.y;
                                frontier_phi_80_pred_2 = _3809 * _3592.x;
                                frontier_phi_80_pred_3 = _3735 * _3580.z;
                                frontier_phi_80_pred_4 = _3735 * _3580.y;
                                frontier_phi_80_pred_5 = _3735 * _3580.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3815 = frontier_phi_80_pred;
                            _3814 = frontier_phi_80_pred_1;
                            _3813 = frontier_phi_80_pred_2;
                            _3818 = frontier_phi_80_pred_3;
                            _3817 = frontier_phi_80_pred_4;
                            _3816 = frontier_phi_80_pred_5;
                            _3522 = _3816 + _3535;
                            _3523 = _3817 + _3536;
                            _3524 = _3818 + _3537;
                            _3519 = _3813 + _3532;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            if (_3539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3539;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3521;
                        frontier_phi_74_pred_1 = _3520;
                        frontier_phi_74_pred_2 = _3519;
                        frontier_phi_74_pred_3 = _3524;
                        frontier_phi_74_pred_4 = _3523;
                        frontier_phi_74_pred_5 = _3522;
                    }
                    _3186 = frontier_phi_74_pred;
                    _3184 = frontier_phi_74_pred_1;
                    _3182 = frontier_phi_74_pred_2;
                    _3192 = frontier_phi_74_pred_3;
                    _3190 = frontier_phi_74_pred_4;
                    _3188 = frontier_phi_74_pred_5;
                    uint _3327 = _3326 + 1u;
                    if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3320 = _3182;
                        _3321 = _3184;
                        _3322 = _3186;
                        _3323 = _3188;
                        _3324 = _3190;
                        _3325 = _3192;
                        _3326 = _3327;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3190;
                frontier_phi_62_63_ladder_1 = _3188;
                frontier_phi_62_63_ladder_2 = _3186;
                frontier_phi_62_63_ladder_3 = _3192;
                frontier_phi_62_63_ladder_4 = _3184;
                frontier_phi_62_63_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_62_63_ladder = _3077;
                frontier_phi_62_63_ladder_1 = _3075;
                frontier_phi_62_63_ladder_2 = _3073;
                frontier_phi_62_63_ladder_3 = _3079;
                frontier_phi_62_63_ladder_4 = _3071;
                frontier_phi_62_63_ladder_5 = _3069;
            }
            _3181 = frontier_phi_62_63_ladder_5;
            _3183 = frontier_phi_62_63_ladder_4;
            _3185 = frontier_phi_62_63_ladder_2;
            _3187 = frontier_phi_62_63_ladder_1;
            _3189 = frontier_phi_62_63_ladder;
            _3191 = frontier_phi_62_63_ladder_3;
        }
        float _3196 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _3002 = (_3196 * _3187) + _2515;
        _3004 = (_3196 * _3189) + _2517;
        _3006 = (_3196 * _3191) + _2519;
        _3008 = ((_3181 * _960) * _3196) + _2853;
        _3010 = ((_3183 * _962) * _3196) + _2855;
        _3012 = ((_3185 * _963) * _3196) + _2857;
    }
    else
    {
        _3002 = _2515;
        _3004 = _2517;
        _3006 = _2519;
        _3008 = _2853;
        _3010 = _2855;
        _3012 = _2857;
    }
    float _4895 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4906 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4917 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    uint _3032 = _903 + 6u;
    float _3040 = _848 / cbSceneParam._m0[86u].x;
    float _3041 = _849 / cbSceneParam._m0[86u].y;
    vec4 _3055 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3057 = _3055.x;
    float _3058 = _3055.y;
    float _3059 = _3055.z;
    float _3060 = _3055.w;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3095 = _3094 / _783;
        float _3106 = _3095 * _833;
        float _3107 = _834 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3109 = _3095 * _835;
        float _3111 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3112 = _3111 + cbSceneParam._m0[79u].w;
        float _3113 = cbSceneParam._m0[79u].w - _3107;
        float _3119 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3109 * _3109));
        float _3122 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3119;
        float _3127 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3129 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3282;
        if (abs((_3108 - _3111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3282 = ((((_3112 > 0.0) ? exp2(_3127 * _3112) : (2.0 - exp2(_3129 * _3112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3122;
        }
        else
        {
            float _3242 = 1.0 / cbSceneParam._m0[80u].x;
            float _3243 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : max(_3112, _3113));
            float _3244 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : min(_3112, _3113));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            _3282 = ((abs(_3119 / _3108) * cbSceneParam._m0[80u].y) * ((((_3253 - _3254) * 2.0) - ((exp2(_3127 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0)))) - exp2(_3127 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))))) * _3242)) - ((exp2(_3129 * _3253) - exp2(_3129 * _3254)) * _3242))) + (_3122 * cbSceneParam._m0[80u].z);
        }
        vec4 _3284 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, 1.0), 0.0);
        float _3293 = exp2((_3282 * (-1.44269502162933349609375)) * (1.0 - _3284.w));
        float _3294 = log2(_3293);
        float _3310 = log2(_3060);
        _3131 = (exp2(_3310 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].x)) * _3284.x) / cbSceneParam._m0[78u].x)) + _3057;
        _3133 = (exp2(_3310 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].y)) * _3284.y) / cbSceneParam._m0[78u].y)) + _3058;
        _3135 = (exp2(_3310 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3294 * cbSceneParam._m0[78u].z)) * _3284.z) / cbSceneParam._m0[78u].z)) + _3059;
        _3137 = _3293 * _3060;
    }
    else
    {
        _3131 = _3057;
        _3133 = _3058;
        _3135 = _3059;
        _3137 = _3060;
    }
    float _3149 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3150 = _3149 == 3.0;
    float _3151 = log2(_3137);
    float _3158 = exp2(_3151 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_3002 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _975))) + ((_3008 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3159 = exp2(_3151 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_3004 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _975))) + ((_3010 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3160 = exp2(_3151 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_3006 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _975))) + ((_3012 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _3169 = (_3149 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3169 * (_3150 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3131)));
    SV_Target.y = _3169 * (_3150 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3133)));
    SV_Target.z = _3169 * (_3150 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3135)));
    SV_Target.w = cbInstanceData._m0[_3032].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3032].w;
}


