#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1236;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _266 = log2(0.0);
    float _268 = exp2(_266 * cbMtdParam._m0[20u].y);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _289 = _284.w;
    float _297 = exp2(log2(_288 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _298 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    vec4 _312 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _337 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _348 = cbMtdParam._m0[9u].x * _337.x;
    float _349 = cbMtdParam._m0[9u].y * _337.y;
    float _350 = cbMtdParam._m0[9u].z * _337.z;
    float _357 = (((cbMtdParam._m0[10u].x * _312.x) - _348) * _299) + _348;
    float _358 = (((cbMtdParam._m0[10u].y * _312.y) - _349) * _299) + _349;
    float _359 = (((cbMtdParam._m0[10u].z * _312.z) - _350) * _299) + _350;
    float _366 = exp2(log2(_289) * cbMtdParam._m0[21u].y);
    vec4 _379 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _399 = (((cbMtdParam._m0[11u].x * _379.x) - _357) * _366) + _357;
    float _400 = (((cbMtdParam._m0[11u].y * _379.y) - _358) * _366) + _358;
    float _401 = (((cbMtdParam._m0[11u].z * _379.z) - _359) * _366) + _359;
    vec4 _413 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _437 = (_256.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _413.x) - _399) * _270) + _399);
    float _439 = (_256.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _413.y) - _400) * _270) + _400);
    float _441 = (_256.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _413.z) - _401) * _270) + _401);
    float _446 = exp2(log2(1.0 - _289) * 0.00999999977648258209228515625);
    float _464 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _446) + cbMtdParam._m0[21u].z;
    float _483 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _464) + cbMtdParam._m0[20u].z) * _366) + _464;
    float _506 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _483) + cbMtdParam._m0[22u].z) * _270) + _483;
    vec4 _518 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _536 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _542 = cbMtdParam._m0[19u].x + _536.z;
    float _545 = (((cbMtdParam._m0[20u].x + _518.z) - _542) * _446) + _542;
    vec4 _558 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _570 = (_288 * 2.0) * ((((_558.z - _545) + cbMtdParam._m0[22u].x) * _366) + _545);
    vec4 _583 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _592 = (((_583.z - _570) + cbMtdParam._m0[21u].x) * _270) + _570;
    float _603 = ((_518.x - _538) * _446) + _538;
    float _604 = ((_518.y - _539) * _446) + _539;
    float _609 = ((_558.x - _603) * _366) + _603;
    float _610 = ((_558.y - _604) * _366) + _604;
    float _619 = ((((_583.x - _609) * _270) + _609) * 2.0) + (-1.0);
    float _620 = ((((_583.y - _610) * _270) + _610) * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3610 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    float _629 = _619 + (cbMtdParam._m0[21u].w * ((_284.x * 2.0) + (-1.0)));
    float _630 = _620 + (cbMtdParam._m0[21u].w * ((_284.y * 2.0) + (-1.0)));
    float _633 = fma(_626, _239, fma(_630, _231 * TANGENT.x, (_217 * _209) * _629));
    float _636 = fma(_626, _240, fma(_630, _231 * TANGENT.y, (_217 * _210) * _629));
    float _639 = fma(_626, _241, fma(_630, _231 * TANGENT.z, (_217 * _211) * _629));
    float _643 = inversesqrt(dot(vec3(_633, _636, _639), vec3(_633, _636, _639)));
    float _644 = _643 * _633;
    float _645 = _643 * _636;
    float _646 = _643 * _639;
    float _3621 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _647 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3643 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3654 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3665 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _651 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _667 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _717 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _707);
    float _718 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _707);
    float _719 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _707);
    float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
    float _724 = _717 * _723;
    float _725 = _718 * _723;
    float _726 = _719 * _723;
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _735 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _737 = _735.w;
    float _757 = fma(_646, cbSceneParam._m0[5u].z, fma(_645, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _644));
    float _760 = fma(_646, cbSceneParam._m0[6u].z, fma(_645, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _644));
    float _763 = fma(_646, cbSceneParam._m0[7u].z, fma(_645, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _644));
    vec4 _765 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _776 = (((_765.y - _647) + (_765.w * _647)) * cbMtdParam._m0[3u].x) + _647;
    uint _789 = uint(roundEven(NORMAL.w)) * 13u;
    uint _791 = (_789 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_791].z;
    float _3676 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    vec4 _803 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _819 = (((_808.x - _651) + (_808.w * _651)) * cbMtdParam._m0[3u].x) + _651;
    float _832 = (cbMtdParam._m0[3u].x * (((_800 * _737) - _800) + _803.x)) + _800;
    float _833 = (cbMtdParam._m0[3u].x * (((_801 * _737) - _801) + _803.y)) + _801;
    float _834 = (cbMtdParam._m0[3u].x * (((_802 * _737) - _802) + _803.z)) + _802;
    float _835 = 1.0 - _819;
    float _836 = _835 * _832;
    float _837 = _835 * _833;
    float _838 = _835 * _834;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _819;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _819;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _819;
    float _846 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _861 = _858.x * TEXCOORD_4;
    float _862 = dot(vec3(_644, _645, _646), vec3(_724, _725, _726));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _644) - _724;
    float _870 = (_865 * _645) - _725;
    float _871 = (_865 * _646) - _726;
    float _875 = abs(dot(vec3(_724, _725, _726), vec3(_644, _645, _646)));
    float _3709 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _877 = sqrt(_776);
    float _890 = exp2((_877 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _896 = (1.0 - _890) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _897 = _890 * _877;
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _964 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _968 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _993 = _925 + _644;
        float _994 = _929 + _645;
        float _995 = _933 + _646;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_644, _645, _646), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3757 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_644, _645, _646), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3790 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_644, _645, _646), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3823 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1276 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1280 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1284 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1307 = _925 + _644;
        float _1308 = _929 + _645;
        float _1309 = _933 + _646;
        float _1319 = fma(_1309, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307)) - _1276;
        float _1320 = fma(_1309, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307)) - _1280;
        float _1321 = fma(_1309, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307)) - _1284;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1276 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1280 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[35u].z) + ((((((_1284 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1375 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1342.x + (-0.5));
        float _1377 = _1375 * (_1342.y + (-0.5));
        float _1378 = _1375 * (_1342.z + (-0.5));
        float _1385 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1349.x + (-0.5));
        float _1387 = _1385 * (_1349.y + (-0.5));
        float _1388 = _1385 * (_1349.z + (-0.5));
        float _1395 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1356.x + (-0.5));
        float _1397 = _1395 * (_1356.y + (-0.5));
        float _1398 = _1395 * (_1356.z + (-0.5));
        float _1405 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1363.x + (-0.5));
        float _1407 = _1405 * (_1363.y + (-0.5));
        float _1408 = _1405 * (_1363.z + (-0.5));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = _1376 * 0.5;
        float _1413 = _1386 * 0.5;
        float _1414 = _1396 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_644, _645, _646), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3886 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1439 + 1.0))) + _1444) * _1409;
        float _1454 = _1377 * 0.5;
        float _1455 = _1387 * 0.5;
        float _1456 = _1397 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_644, _645, _646), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3919 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1481 + 1.0))) + _1486) * _1410;
        float _1496 = _1378 * 0.5;
        float _1497 = _1388 * 0.5;
        float _1498 = _1398 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_644, _645, _646), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3952 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1523 + 1.0))) + _1528) * _1411;
        _1545 = _1378;
        _1546 = _1377;
        _1547 = _1376;
        _1548 = _1388;
        _1549 = _1387;
        _1550 = _1386;
        _1551 = _1398;
        _1552 = _1397;
        _1553 = _1396;
        _1554 = _1411;
        _1555 = _1410;
        _1556 = _1409;
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
    }
    else
    {
        _1545 = _1236;
        _1546 = _1236;
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = _1236;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1248)) + _1248;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1249)) + _1249;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1592 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1569));
    float _1613 = _869 * 0.5;
    float _1614 = _870 * 0.5;
    float _1615 = _871 * 0.5;
    float _1616 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1619 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1622 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1656;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1629 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1633 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1637 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1644 = dot(vec4(cbModelParam._m0[39u]), vec4(_1613, _1614, _1615, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1667;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1658 = dot(vec4(cbModelParam._m0[40u]), vec4(_1613, _1614, _1615, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1671 = (_1667 * cbModelParam._m0[1u].x) + (_1656 * (1.0 - cbModelParam._m0[1u].x));
    float _1681 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1681 : min(cbModelParam._m0[25u].z, _1681));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1744 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1747 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1775 = frontier_phi_16_14_ladder;
        }
        float _1999;
        if (_1744 > 0.0)
        {
            _1999 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1999 = frontier_phi_25_21_ladder;
        }
        float _2256;
        if (_1747 > 0.0)
        {
            _2256 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2256 = frontier_phi_37_32_ladder;
        }
        float _2258 = isnan(_1999) ? _1775 : (isnan(_1775) ? _1999 : min(_1775, _1999));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1741) + _1730;
        float _2264 = (_2259 * _1744) + _1734;
        float _2265 = (_2259 * _1747) + _1738;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2266;
        float _2270 = _2266 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 > _2270) || ((_2264 < _2268) || ((_2263 < _2268) || (_2263 > _2270))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2265, cbModelParam._m0[9u].z, fma(_2264, cbModelParam._m0[9u].y, _2263 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2265, cbModelParam._m0[10u].z, fma(_2264, cbModelParam._m0[10u].y, _2263 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2265, cbModelParam._m0[11u].z, fma(_2264, cbModelParam._m0[11u].y, _2263 * cbModelParam._m0[11u].x))), _1682);
            frontier_phi_15_37_ladder = _2393.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2393.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2393.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_15_37_ladder_2;
        _1765 = frontier_phi_15_37_ladder_1;
        _1767 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1682);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1840 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1843 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _2004;
        if (_1837 > 0.0)
        {
            _2004 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2004 = frontier_phi_27_23_ladder;
        }
        float _2283;
        if (_1840 > 0.0)
        {
            _2283 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2283 = frontier_phi_39_34_ladder;
        }
        float _2496;
        if (_1843 > 0.0)
        {
            _2496 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2496 = frontier_phi_48_45_ladder;
        }
        float _2498 = isnan(_2283) ? _2004 : (isnan(_2004) ? _2283 : min(_2004, _2283));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1837) + _1826;
        float _2504 = (_2499 * _1840) + _1830;
        float _2505 = (_2499 * _1843) + _1834;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2505, cbModelParam._m0[17u].z, fma(_2504, cbModelParam._m0[17u].y, _2503 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2505, cbModelParam._m0[18u].z, fma(_2504, cbModelParam._m0[18u].y, _2503 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2505, cbModelParam._m0[19u].z, fma(_2504, cbModelParam._m0[19u].y, _2503 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_24_48_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_24_48_ladder_2;
        _1864 = frontier_phi_24_48_ladder_1;
        _1866 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1772);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1879 = (((_896 * _846) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_896 * _848) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1883 = (((_896 * _849) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    vec4 _1900 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_732, _733));
    float _1902 = _1900.w;
    float _1914 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1902);
    float _1915 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1902);
    float _1916 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1902);
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_789 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1930 = _861 + (-1.0);
    float _1935 = (cbLight._m0[_1923].x * _1930) + 1.0;
    float _1936 = (cbLight._m0[_1923].y * _1930) + 1.0;
    float _1937 = (cbLight._m0[_1923].z * _1930) + 1.0;
    float _1938 = (cbLight._m0[_1923].w * _1930) + 1.0;
    uint _1939 = _1922 + 5u;
    float _1945 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1949 = _1922 + 4u;
    float _1958 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1962 = _1922 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_644, _645, _646));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_644, _645, _646));
    float _4088 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _4099 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1939].x * _1945) * _1983) + (((cbLight._m0[_1949].x * _1914) * _1958) * _1981);
    float _1991 = ((_1945 * cbLight._m0[_1939].y) * _1983) + (((cbLight._m0[_1949].y * _1915) * _1958) * _1981);
    float _1992 = ((_1945 * cbLight._m0[_1939].z) * _1983) + (((cbLight._m0[_1949].z * _1916) * _1958) * _1981);
    uvec4 _1996 = floatBitsToUint(cbLight._m0[_1922 + 12u]);
    bool _1998 = _1996.x == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1998)
    {
        _2009 = _1990;
        _2011 = _1991;
        _2013 = _1992;
    }
    else
    {
        uint _2017 = _1922 + 6u;
        float _2033 = (dot(vec3(cbLight._m0[_1922 + 2u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4110 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2036 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2009 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1990;
        _2011 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1991;
        _2013 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1992;
    }
    bool _2016 = _1996.y == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2016)
    {
        _2054 = _2009;
        _2056 = _2011;
        _2058 = _2013;
    }
    else
    {
        uint _2227 = _1922 + 7u;
        float _2243 = (dot(vec3(cbLight._m0[_1922 + 3u].xyz), vec3(_644, _645, _646)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4126 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2246 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2054 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2009;
        _2056 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2011;
        _2058 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2013;
    }
    uint _2061 = _1922 + 8u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _776) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1922].x + _724;
    float _2077 = cbLight._m0[_1922].y + _725;
    float _2078 = cbLight._m0[_1922].z + _726;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_1922].xyz));
    float _4142 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2090 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2091 = dot(vec3(_644, _645, _646), vec3(_2083, _2084, _2085));
    float _4164 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2083, _2084, _2085));
    float _4175 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2075 * _2075;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
    float _2112 = 0.959999978542327880859375 - _843;
    float _2114 = 0.959999978542327880859375 - _844;
    float _2115 = 0.959999978542327880859375 - _845;
    float _2122 = 1.0 - _2075;
    float _2133 = (0.5 / (((_2090 * ((_2089 * _2122) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2122) + _2075) * _2089))) * _2089;
    float _4186 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    uint _2149 = _1922 + 9u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _776) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1962].x + _724;
    float _2163 = cbLight._m0[_1962].y + _725;
    float _2164 = cbLight._m0[_1962].z + _726;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_1962].xyz));
    float _4197 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2176 = dot(vec3(_644, _645, _646), vec3(_2169, _2170, _2171));
    float _4208 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2169, _2170, _2171));
    float _4219 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2161 * _2161;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2195 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
    float _2202 = 1.0 - _2161;
    float _2212 = (0.5 / (((_2090 * ((_2175 * _2202) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2202) + _2161) * _2175))) * _2175;
    float _4230 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    float _2224 = (((((_2195 * _2112) + _846) * cbLight._m0[_2149].x) * _2214) * _1945) + ((((cbLight._m0[_2061].x * _1914) * ((_2111 * _2112) + _846)) * _2135) * _1958);
    float _2225 = (((((_2195 * _2114) + _848) * cbLight._m0[_2149].y) * _2214) * _1945) + ((((cbLight._m0[_2061].y * _1915) * ((_2111 * _2114) + _848)) * _2135) * _1958);
    float _2226 = (((((_2195 * _2115) + _849) * cbLight._m0[_2149].z) * _2214) * _1945) + ((((cbLight._m0[_2061].z * _1916) * ((_2111 * _2115) + _849)) * _2135) * _1958);
    float _2288;
    float _2290;
    float _2292;
    if (_1998)
    {
        _2288 = _2224;
        _2290 = _2225;
        _2292 = _2226;
    }
    else
    {
        uint _2294 = _1922 + 2u;
        uint _2298 = _1922 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _776) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _724;
        float _2315 = cbLight._m0[_2294].y + _725;
        float _2316 = cbLight._m0[_2294].z + _726;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2294].xyz));
        float _4241 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2328 = dot(vec3(_644, _645, _646), vec3(_2321, _2322, _2323));
        float _4252 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4263 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_2090 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2354) + _2313) * _2327))) * _2327;
        float _4274 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2288 = (((((_2347 * _2112) + _846) * cbLight._m0[_2298].x) * _2366) * _2367) + _2224;
        _2290 = (((((_2347 * _2114) + _848) * cbLight._m0[_2298].y) * _2366) * _2367) + _2225;
        _2292 = (((((_2347 * _2115) + _849) * cbLight._m0[_2298].z) * _2366) * _2367) + _2226;
    }
    float _2402;
    float _2404;
    float _2406;
    if (_2016)
    {
        _2402 = _2288;
        _2404 = _2290;
        _2406 = _2292;
    }
    else
    {
        uint _2413 = _1922 + 3u;
        uint _2417 = _1922 + 11u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _776) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _724;
        float _2434 = cbLight._m0[_2413].y + _725;
        float _2435 = cbLight._m0[_2413].z + _726;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2413].xyz));
        float _4290 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2447 = dot(vec3(_644, _645, _646), vec3(_2440, _2441, _2442));
        float _4301 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4312 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2090 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2473) + _2432) * _2446))) * _2446;
        float _4323 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2402 = (((((_2466 * _2112) + _846) * cbLight._m0[_2417].x) * _2485) * _2486) + _2288;
        _2404 = (((((_2466 * _2114) + _848) * cbLight._m0[_2417].y) * _2485) * _2486) + _2290;
        _2406 = (((((_2466 * _2115) + _849) * cbLight._m0[_2417].z) * _2485) * _2486) + _2292;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1920.y == 0u)
    {
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2561;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2561;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2561;
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2577)));
        float _2598 = (log2(_2564 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2868)
                {
                    frontier_phi_63_pred = _2857;
                    frontier_phi_63_pred_1 = _2856;
                    frontier_phi_63_pred_2 = _2855;
                    frontier_phi_63_pred_3 = _2854;
                    frontier_phi_63_pred_4 = _2853;
                    frontier_phi_63_pred_5 = _2852;
                }
                else
                {
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    uint _2982;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2867;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2986 = uint(findLSB(_2982)) + (_2858 << 5u);
                        uint _2983 = (_2982 + 4294967295u) & _2982;
                        uint _2988 = _2986 * 48u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3008 = (_2986 * 48u) + 4u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3027 = (_2986 * 48u) + 8u;
                        vec3 _3038 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x));
                        float _3042 = _3002.x - _2562;
                        float _3043 = _3002.y - _2563;
                        float _3044 = _3002.z - _2564;
                        float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                        float _3048 = inversesqrt(_3045);
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3052 = dot(vec3(_757, _760, _763), vec3(_3049, _3050, _3051));
                        float _3057 = 1.0 - (_3045 * _3002.w);
                        float _4349 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3059 = sqrt(_3045) * _3021.w;
                        float _3062 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _3052) + _3063;
                        float _3069 = _3059 * _3059;
                        float _3073 = ((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3058) / ((_3069 * 0.699999988079071044921875) + 1.0);
                        float _3077 = (-0.0) - _2562;
                        float _3078 = (-0.0) - _2563;
                        float _3079 = (-0.0) - _2564;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3094 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3095 = 1.0 - _877;
                        float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                        float _3103 = _3102 * _3102;
                        float _3104 = _3103 * _3103;
                        float _3105 = _3084 + _3049;
                        float _3106 = _3085 + _3050;
                        float _3107 = _3086 + _3051;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3115 = dot(vec3(_757, _760, _763), vec3(_3084, _3085, _3086));
                        float _4365 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3119 = dot(vec3(_757, _760, _763), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                        float _4376 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                        float _3127 = _3062 * _3103;
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3052) + _3128;
                        float _4387 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3133 = 1.0 - _3103;
                        float _3143 = (0.5 / (((_3132 * ((_3118 * _3133) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3103) * _3118))) * _3132;
                        float _4398 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3154 = (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3126 * _3126) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3058;
                        _2911 = (_3073 * _3021.x) + _2979;
                        _2912 = (_3073 * _3021.y) + _2980;
                        _2913 = (_3073 * _3021.z) + _2981;
                        _2908 = (_3154 * _3038.x) + _2976;
                        _2909 = (_3154 * _3038.y) + _2977;
                        _2910 = (_3154 * _3038.z) + _2978;
                        if (_2983 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2983;
                        }
                    }
                    frontier_phi_63_pred = _2913;
                    frontier_phi_63_pred_1 = _2912;
                    frontier_phi_63_pred_2 = _2911;
                    frontier_phi_63_pred_3 = _2910;
                    frontier_phi_63_pred_4 = _2909;
                    frontier_phi_63_pred_5 = _2908;
                }
                _2719 = frontier_phi_63_pred;
                _2717 = frontier_phi_63_pred_1;
                _2715 = frontier_phi_63_pred_2;
                _2713 = frontier_phi_63_pred_3;
                _2711 = frontier_phi_63_pred_4;
                _2709 = frontier_phi_63_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2709;
                    _2853 = _2711;
                    _2854 = _2713;
                    _2855 = _2715;
                    _2856 = _2717;
                    _2857 = _2719;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2725) & _2608) == 0u)
        {
            _2820 = _2708;
            _2822 = _2710;
            _2824 = _2712;
            _2826 = _2714;
            _2828 = _2716;
            _2830 = _2718;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
            float _2846 = _2845 * _2562;
            float _2847 = _2845 * _2563;
            float _2848 = _2845 * _2564;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2959 = _2708;
                float _2960 = _2710;
                float _2961 = _2712;
                float _2962 = _2714;
                float _2963 = _2716;
                float _2964 = _2718;
                uint _2965 = _2725;
                uint _2974;
                bool _2975;
                for (;;)
                {
                    _2974 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                    _2975 = _2974 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2975)
                    {
                        frontier_phi_69_pred = _2964;
                        frontier_phi_69_pred_1 = _2963;
                        frontier_phi_69_pred_2 = _2962;
                        frontier_phi_69_pred_3 = _2961;
                        frontier_phi_69_pred_4 = _2960;
                        frontier_phi_69_pred_5 = _2959;
                    }
                    else
                    {
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        uint _3178 = _2974;
                        uint _3179;
                        vec4 _3204;
                        float _3205;
                        vec4 _3220;
                        vec3 _3232;
                        vec4 _3248;
                        vec4 _3263;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3189 = ((_2965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3178));
                            _3179 = (_3178 + 4294967295u) & _3178;
                            uint _3191 = _3189 * 40u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3205 = _3204.w;
                            uint _3207 = (_3189 * 40u) + 4u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3189 * 40u) + 8u;
                            _3232 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x));
                            uint _3235 = (_3189 * 40u) + 16u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3189 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3189 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3189 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_2564, _3298.z, fma(_2563, _3298.y, _3298.x * _2562)) + _3298.w;
                            _3311 = !((fma(_2564, _3279.z, fma(_2563, _3279.y, _3279.x * _2562)) + _3279.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3204.x - _2562;
                                float _3339 = _3204.y - _2563;
                                float _3340 = _3204.z - _2564;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3205 * _3205));
                                float _4409 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3356 = sqrt(_3341) * _3220.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_757, _760, _763))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_2564, _3248.z, fma(_2563, _3248.y, _3248.x * _2562)) + _3248.w) / _3310;
                                float _3370 = (fma(_2564, _3263.z, fma(_2563, _3263.y, _3263.x * _2562)) + _3263.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4425 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _877;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2846;
                                float _3400 = _3346 - _2847;
                                float _3401 = _3347 - _2848;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_757, _760, _763), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4436 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3413 = dot(vec3(_757, _760, _763), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4447 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_757, _760, _763), vec3(_3345, _3346, _3347))) + _3422;
                                float _4458 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4469 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3376 * _3220.z;
                                frontier_phi_75_pred_1 = _3376 * _3220.y;
                                frontier_phi_75_pred_2 = _3376 * _3220.x;
                                frontier_phi_75_pred_3 = _3450 * _3232.z;
                                frontier_phi_75_pred_4 = _3450 * _3232.y;
                                frontier_phi_75_pred_5 = _3450 * _3232.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_75_pred;
                            _3458 = frontier_phi_75_pred_1;
                            _3457 = frontier_phi_75_pred_2;
                            _3456 = frontier_phi_75_pred_3;
                            _3455 = frontier_phi_75_pred_4;
                            _3454 = frontier_phi_75_pred_5;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3164 = _3459 + _3177;
                            _3159 = _3454 + _3172;
                            _3160 = _3455 + _3173;
                            _3161 = _3456 + _3174;
                            if (_3179 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3179;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3164;
                        frontier_phi_69_pred_1 = _3163;
                        frontier_phi_69_pred_2 = _3162;
                        frontier_phi_69_pred_3 = _3161;
                        frontier_phi_69_pred_4 = _3160;
                        frontier_phi_69_pred_5 = _3159;
                    }
                    _2831 = frontier_phi_69_pred;
                    _2829 = frontier_phi_69_pred_1;
                    _2827 = frontier_phi_69_pred_2;
                    _2825 = frontier_phi_69_pred_3;
                    _2823 = frontier_phi_69_pred_4;
                    _2821 = frontier_phi_69_pred_5;
                    uint _2966 = _2965 + 1u;
                    if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2959 = _2821;
                        _2960 = _2823;
                        _2961 = _2825;
                        _2962 = _2827;
                        _2963 = _2829;
                        _2964 = _2831;
                        _2965 = _2966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2831;
                frontier_phi_57_58_ladder_1 = _2829;
                frontier_phi_57_58_ladder_2 = _2827;
                frontier_phi_57_58_ladder_3 = _2825;
                frontier_phi_57_58_ladder_4 = _2823;
                frontier_phi_57_58_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_57_58_ladder = _2718;
                frontier_phi_57_58_ladder_1 = _2716;
                frontier_phi_57_58_ladder_2 = _2714;
                frontier_phi_57_58_ladder_3 = _2712;
                frontier_phi_57_58_ladder_4 = _2710;
                frontier_phi_57_58_ladder_5 = _2708;
            }
            _2820 = frontier_phi_57_58_ladder_5;
            _2822 = frontier_phi_57_58_ladder_4;
            _2824 = frontier_phi_57_58_ladder_3;
            _2826 = frontier_phi_57_58_ladder_2;
            _2828 = frontier_phi_57_58_ladder_1;
            _2830 = frontier_phi_57_58_ladder;
        }
        float _2835 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2620 = (_2835 * _2826) + _2054;
        _2622 = (_2835 * _2828) + _2056;
        _2624 = (_2835 * _2830) + _2058;
        _2626 = ((_2820 * _846) * _2835) + _2402;
        _2628 = ((_2822 * _848) * _2835) + _2404;
        _2630 = ((_2824 * _849) * _2835) + _2406;
    }
    else
    {
        _2620 = _2054;
        _2622 = _2056;
        _2624 = _2058;
        _2626 = _2402;
        _2628 = _2404;
        _2630 = _2406;
    }
    float _4485 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4496 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4507 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    uint _2650 = _789 + 6u;
    float _2658 = _732 / cbSceneParam._m0[86u].x;
    float _2659 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _667 : (isnan(_667) ? cbSceneParam._m0[77u].w : min(_667, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_667 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_667) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _667 : min(cbSceneParam._m0[80u].w, _667));
        float _2734 = _2733 / _667;
        float _2745 = _2734 * _717;
        float _2746 = _718 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _719;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2883 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2921 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2768 * _2892) - exp2(_2768 * _2893)) * _2881))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2678);
        _2770 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2772 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2774 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2776 = _2932 * _2678;
    }
    else
    {
        _2770 = _2675;
        _2772 = _2676;
        _2774 = _2677;
        _2776 = _2678;
    }
    float _2788 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2789 = _2788 == 3.0;
    float _2790 = log2(_2776);
    float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2620 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _861))) + ((_2626 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2622 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _861))) + ((_2628 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2624 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _861))) + ((_2630 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2808 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2808 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.y = _2808 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.z = _2808 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.w = cbInstanceData._m0[_2650].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
}


