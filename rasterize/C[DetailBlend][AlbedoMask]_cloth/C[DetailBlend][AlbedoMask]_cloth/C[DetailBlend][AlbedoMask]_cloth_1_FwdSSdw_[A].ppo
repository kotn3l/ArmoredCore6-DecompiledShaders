#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1388;
float _3792;
float _3793;
float _3794;
float _3795;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _274 = log2(0.0);
    float _276 = exp2(_274 * cbMtdParam._m0[20u].y);
    float _277 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _278 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
    vec4 _292 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _297 = _292.w;
    float _305 = exp2(log2(_296 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _320 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _343 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _343.x;
    float _346 = _343.y;
    float _370 = ((cbMtdParam._m0[19u].w * _343.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _345)) + _345;
    bool _406 = _370 >= 0.25;
    bool _411 = _370 >= 0.3499999940395355224609375;
    bool _416 = _370 >= 0.5;
    bool _421 = _370 >= 0.64999997615814208984375;
    bool _426 = _370 >= 0.75;
    vec4 _454 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _465 = cbMtdParam._m0[9u].x * _454.x;
    float _466 = cbMtdParam._m0[9u].y * _454.y;
    float _467 = cbMtdParam._m0[9u].z * _454.z;
    float _474 = (((((((_426 ? cbMtdParam._m0[13u].x : (_421 ? cbMtdParam._m0[18u].x : (_416 ? cbMtdParam._m0[17u].x : (_411 ? cbMtdParam._m0[16u].x : (_406 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _346) + cbMtdParam._m0[10u].x) * _320.x) - _465) * _307) + _465;
    float _475 = (((((((_426 ? cbMtdParam._m0[13u].y : (_421 ? cbMtdParam._m0[18u].y : (_416 ? cbMtdParam._m0[17u].y : (_411 ? cbMtdParam._m0[16u].y : (_406 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _346) + cbMtdParam._m0[10u].y) * _320.y) - _466) * _307) + _466;
    float _476 = (((((((_426 ? cbMtdParam._m0[13u].z : (_421 ? cbMtdParam._m0[18u].z : (_416 ? cbMtdParam._m0[17u].z : (_411 ? cbMtdParam._m0[16u].z : (_406 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _346) + cbMtdParam._m0[10u].z) * _320.z) - _467) * _307) + _467;
    float _483 = exp2(log2(_297) * cbMtdParam._m0[21u].y);
    vec4 _496 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _516 = (((cbMtdParam._m0[11u].x * _496.x) - _474) * _483) + _474;
    float _517 = (((cbMtdParam._m0[11u].y * _496.y) - _475) * _483) + _475;
    float _518 = (((cbMtdParam._m0[11u].z * _496.z) - _476) * _483) + _476;
    vec4 _530 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _554 = (_264.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _530.x) - _516) * _278) + _516);
    float _556 = (_264.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _530.y) - _517) * _278) + _517);
    float _558 = (_264.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _530.z) - _518) * _278) + _518);
    float _563 = exp2(log2(1.0 - _297) * 0.00999999977648258209228515625);
    float _581 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _563) + cbMtdParam._m0[21u].z;
    float _600 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _581) + cbMtdParam._m0[20u].z) * _483) + _581;
    float _623 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _600) + cbMtdParam._m0[22u].z) * _278) + _600;
    vec4 _635 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _653 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _655 = _653.x;
    float _656 = _653.y;
    float _659 = cbMtdParam._m0[19u].x + _653.z;
    float _662 = (((cbMtdParam._m0[20u].x + _635.z) - _659) * _563) + _659;
    vec4 _674 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _686 = (_296 * 2.0) * ((((_674.z - _662) + cbMtdParam._m0[22u].x) * _483) + _662);
    vec4 _698 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _707 = (((_698.z - _686) + cbMtdParam._m0[21u].x) * _278) + _686;
    float _718 = ((_635.x - _655) * _563) + _655;
    float _719 = ((_635.y - _656) * _563) + _656;
    float _724 = ((_674.x - _718) * _483) + _718;
    float _725 = ((_674.y - _719) * _483) + _719;
    float _734 = ((((_698.x - _724) * _278) + _724) * 2.0) + (-1.0);
    float _735 = ((((_698.y - _725) * _278) + _725) * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3824 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _744 = _734 + (cbMtdParam._m0[21u].w * ((_292.x * 2.0) + (-1.0)));
    float _745 = _735 + (cbMtdParam._m0[21u].w * ((_292.y * 2.0) + (-1.0)));
    float _748 = fma(_741, _247, fma(_745, _239 * TANGENT.x, (_225 * _217) * _744));
    float _751 = fma(_741, _248, fma(_745, _239 * TANGENT.y, (_225 * _218) * _744));
    float _754 = fma(_741, _249, fma(_745, _239 * TANGENT.z, (_225 * _219) * _744));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3835 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _762 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3857 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3868 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3879 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _766 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    vec4 _846 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _848 = _846.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1069 = sqrt(((_832 * _832) + (_833 * _833)) + (_834 * _834));
        float _1075 = (cbMatDynParam._m0[5u].x * _1069) + cbMatDynParam._m0[5u].y;
        float _3890 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1080 = (cbMatDynParam._m0[5u].z * _1069) + cbMatDynParam._m0[5u].w;
        float _3901 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) - _1076)) + _1076) < ((_848 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _859 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _860 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _862 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _864 = _862.w;
    float _882 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _885 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _888 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    vec4 _890 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _901 = (((_890.y - _762) + (_890.w * _762)) * cbMtdParam._m0[3u].x) + _762;
    uint _914 = uint(roundEven(NORMAL.w)) * 13u;
    uint _915 = _914 + 9u;
    uint _916 = _915 + uint(cbMatDynParam._m0[0u].w);
    float _922 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_916].x;
    float _923 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_916].y;
    float _924 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_916].z;
    float _3912 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _928 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _933 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _944 = (((_933.x - _766) + (_933.w * _766)) * cbMtdParam._m0[3u].x) + _766;
    float _957 = (cbMtdParam._m0[3u].x * (((_925 * _864) - _925) + _928.x)) + _925;
    float _958 = (cbMtdParam._m0[3u].x * (((_926 * _864) - _926) + _928.y)) + _926;
    float _959 = (cbMtdParam._m0[3u].x * (((_927 * _864) - _927) + _928.z)) + _927;
    float _960 = 1.0 - _944;
    float _961 = _960 * _957;
    float _962 = _960 * _958;
    float _963 = _960 * _959;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _944;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _944;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _944;
    float _971 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    float _974 = _970 + 0.039999999105930328369140625;
    vec4 _983 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _859, cbSceneParam._m0[86u].y * _860));
    float _986 = _983.x * TEXCOORD_4;
    float _987 = dot(vec3(_759, _760, _761), vec3(_839, _840, _841));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _759) - _839;
    float _995 = (_990 * _760) - _840;
    float _996 = (_990 * _761) - _841;
    float _1000 = abs(dot(vec3(_839, _840, _841), vec3(_759, _760, _761)));
    float _3945 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_901);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1021 = (1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1022 = _1015 * _1002;
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1387;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1117 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1121 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1145 = _1050 + _759;
        float _1146 = _1054 + _760;
        float _1147 = _1058 + _761;
        float _1157 = fma(_1147, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145)) - _1113;
        float _1158 = fma(_1147, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145)) - _1117;
        float _1159 = fma(_1147, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145)) - _1121;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1215 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1181.x + (-0.5));
        float _1217 = _1215 * (_1181.y + (-0.5));
        float _1218 = _1215 * (_1181.z + (-0.5));
        float _1225 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1188.x + (-0.5));
        float _1227 = _1225 * (_1188.y + (-0.5));
        float _1228 = _1225 * (_1188.z + (-0.5));
        float _1235 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1195.x + (-0.5));
        float _1237 = _1235 * (_1195.y + (-0.5));
        float _1238 = _1235 * (_1195.z + (-0.5));
        float _1245 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1202.x + (-0.5));
        float _1247 = _1245 * (_1202.y + (-0.5));
        float _1248 = _1245 * (_1202.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1269 = (dot(vec3(_759, _760, _761), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1279 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3993 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1281 + 1.0))) + _1286) * _1249;
        float _1296 = _1217 * 0.5;
        float _1297 = _1227 * 0.5;
        float _1298 = _1237 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_759, _760, _761), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4026 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1323 + 1.0))) + _1328) * _1250;
        float _1338 = _1218 * 0.5;
        float _1339 = _1228 * 0.5;
        float _1340 = _1238 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_759, _760, _761), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4059 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1365 + 1.0))) + _1370) * _1251;
        _1387 = _1218;
        _1389 = _1217;
        _1390 = _1216;
        _1391 = _1228;
        _1392 = _1227;
        _1393 = _1226;
        _1394 = _1238;
        _1395 = _1237;
        _1396 = _1236;
        _1397 = _1251;
        _1398 = _1250;
        _1399 = _1249;
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1388;
        _1389 = _1388;
        _1390 = _1388;
        _1391 = _1388;
        _1392 = _1388;
        _1393 = _1388;
        _1394 = _1388;
        _1395 = _1388;
        _1396 = _1388;
        _1397 = _1388;
        _1398 = _1388;
        _1399 = _1388;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1435 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1439 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1462 = _1050 + _759;
        float _1463 = _1054 + _760;
        float _1464 = _1058 + _761;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_759, _760, _761), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4122 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_759, _760, _761), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4155 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_759, _760, _761), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4188 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1388;
        _1701 = _1388;
        _1702 = _1388;
        _1703 = _1388;
        _1704 = _1388;
        _1705 = _1388;
        _1706 = _1388;
        _1707 = _1388;
        _1708 = _1388;
        _1709 = _1388;
        _1710 = _1388;
        _1711 = _1388;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1400)) + _1400;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1401)) + _1401;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1402)) + _1402;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _994 * 0.5;
    float _1769 = _995 * 0.5;
    float _1770 = _996 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1387, _1391, _1394, _1397));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1898 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1901 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1929 = frontier_phi_19_17_ladder;
        }
        float _2152;
        if (_1898 > 0.0)
        {
            _2152 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2152 = frontier_phi_28_24_ladder;
        }
        float _2409;
        if (_1901 > 0.0)
        {
            _2409 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2409 = frontier_phi_40_35_ladder;
        }
        float _2411 = isnan(_2152) ? _1929 : (isnan(_1929) ? _2152 : min(_1929, _2152));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1895) + _1884;
        float _2417 = (_2412 * _1898) + _1888;
        float _2418 = (_2412 * _1901) + _1892;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_18_40_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_18_40_ladder_2;
        _1919 = frontier_phi_18_40_ladder_1;
        _1921 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1837);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1993 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1996 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2157;
        if (_1990 > 0.0)
        {
            _2157 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2157 = frontier_phi_30_26_ladder;
        }
        float _2436;
        if (_1993 > 0.0)
        {
            _2436 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2436 = frontier_phi_42_37_ladder;
        }
        float _2649;
        if (_1996 > 0.0)
        {
            _2649 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2649 = frontier_phi_51_48_ladder;
        }
        float _2651 = isnan(_2436) ? _2157 : (isnan(_2157) ? _2436 : min(_2157, _2436));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _1990) + _1979;
        float _2657 = (_2652 * _1993) + _1983;
        float _2658 = (_2652 * _1996) + _1987;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_27_51_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_27_51_ladder_2;
        _2017 = frontier_phi_27_51_ladder_1;
        _2019 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1926);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1021 * _971) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2034 = (((_1021 * _973) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1021 * _974) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    vec4 _2053 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_859, _860));
    float _2055 = _2053.w;
    float _2067 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2055);
    float _2068 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2055);
    float _2069 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2055);
    uvec4 _2073 = floatBitsToUint(cbInstanceData._m0[_914 + 5u]);
    uint _2075 = _2073.x * 14u;
    uint _2076 = _2075 + 13u;
    float _2083 = _986 + (-1.0);
    float _2088 = (cbLight._m0[_2076].x * _2083) + 1.0;
    float _2089 = (cbLight._m0[_2076].y * _2083) + 1.0;
    float _2090 = (cbLight._m0[_2076].z * _2083) + 1.0;
    float _2091 = (cbLight._m0[_2076].w * _2083) + 1.0;
    uint _2092 = _2075 + 5u;
    float _2098 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
    uint _2102 = _2075 + 4u;
    float _2111 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2115 = _2075 | 1u;
    float _2126 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_759, _760, _761));
    float _2129 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_759, _760, _761));
    float _4324 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _4335 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2134 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2136 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2143 = ((cbLight._m0[_2092].x * _2098) * _2136) + (((cbLight._m0[_2102].x * _2067) * _2111) * _2134);
    float _2144 = ((_2098 * cbLight._m0[_2092].y) * _2136) + (((cbLight._m0[_2102].y * _2068) * _2111) * _2134);
    float _2145 = ((_2098 * cbLight._m0[_2092].z) * _2136) + (((cbLight._m0[_2102].z * _2069) * _2111) * _2134);
    uvec4 _2149 = floatBitsToUint(cbLight._m0[_2075 + 12u]);
    bool _2151 = _2149.x == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2151)
    {
        _2162 = _2143;
        _2164 = _2144;
        _2166 = _2145;
    }
    else
    {
        uint _2170 = _2075 + 6u;
        float _2186 = (dot(vec3(cbLight._m0[_2075 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4346 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2189 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2162 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _2143;
        _2164 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _2144;
        _2166 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _2145;
    }
    bool _2169 = _2149.y == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2169)
    {
        _2207 = _2162;
        _2209 = _2164;
        _2211 = _2166;
    }
    else
    {
        uint _2380 = _2075 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_2075 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4362 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2399 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2207 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2162;
        _2209 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2164;
        _2211 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2166;
    }
    uint _2214 = _2075 + 8u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _901) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2075].x + _839;
    float _2230 = cbLight._m0[_2075].y + _840;
    float _2231 = cbLight._m0[_2075].z + _841;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2075].xyz));
    float _4378 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2243 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2244 = dot(vec3(_759, _760, _761), vec3(_2236, _2237, _2238));
    float _4400 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2236, _2237, _2238));
    float _4411 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2228 * _2228;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2265 = 0.959999978542327880859375 - _968;
    float _2267 = 0.959999978542327880859375 - _969;
    float _2268 = 0.959999978542327880859375 - _970;
    float _2275 = 1.0 - _2228;
    float _2286 = (0.5 / (((_2243 * ((_2242 * _2275) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2275) + _2228) * _2242))) * _2242;
    float _4422 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    uint _2302 = _2075 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _901) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2115].x + _839;
    float _2316 = cbLight._m0[_2115].y + _840;
    float _2317 = cbLight._m0[_2115].z + _841;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2115].xyz));
    float _4433 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2329 = dot(vec3(_759, _760, _761), vec3(_2322, _2323, _2324));
    float _4444 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2322, _2323, _2324));
    float _4455 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2355 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2243 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2355) + _2314) * _2328))) * _2328;
    float _4466 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2377 = (((((_2348 * _2265) + _971) * cbLight._m0[_2302].x) * _2367) * _2098) + ((((cbLight._m0[_2214].x * _2067) * ((_2264 * _2265) + _971)) * _2288) * _2111);
    float _2378 = (((((_2348 * _2267) + _973) * cbLight._m0[_2302].y) * _2367) * _2098) + ((((cbLight._m0[_2214].y * _2068) * ((_2264 * _2267) + _973)) * _2288) * _2111);
    float _2379 = (((((_2348 * _2268) + _974) * cbLight._m0[_2302].z) * _2367) * _2098) + ((((cbLight._m0[_2214].z * _2069) * ((_2264 * _2268) + _974)) * _2288) * _2111);
    float _2441;
    float _2443;
    float _2445;
    if (_2151)
    {
        _2441 = _2377;
        _2443 = _2378;
        _2445 = _2379;
    }
    else
    {
        uint _2447 = _2075 + 2u;
        uint _2451 = _2075 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _901) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _839;
        float _2468 = cbLight._m0[_2447].y + _840;
        float _2469 = cbLight._m0[_2447].z + _841;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2447].xyz));
        float _4477 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2481 = dot(vec3(_759, _760, _761), vec3(_2474, _2475, _2476));
        float _4488 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4499 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2243 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2507) + _2466) * _2480))) * _2480;
        float _4510 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2441 = (((((_2500 * _2265) + _971) * cbLight._m0[_2451].x) * _2519) * _2520) + _2377;
        _2443 = (((((_2500 * _2267) + _973) * cbLight._m0[_2451].y) * _2519) * _2520) + _2378;
        _2445 = (((((_2500 * _2268) + _974) * cbLight._m0[_2451].z) * _2519) * _2520) + _2379;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2169)
    {
        _2555 = _2441;
        _2557 = _2443;
        _2559 = _2445;
    }
    else
    {
        uint _2566 = _2075 + 3u;
        uint _2570 = _2075 + 11u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _901) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _839;
        float _2587 = cbLight._m0[_2566].y + _840;
        float _2588 = cbLight._m0[_2566].z + _841;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2566].xyz));
        float _4526 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2600 = dot(vec3(_759, _760, _761), vec3(_2593, _2594, _2595));
        float _4537 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4548 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2626 = 1.0 - _2585;
        float _2636 = (0.5 / (((_2243 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2243 * _2626) + _2585) * _2599))) * _2599;
        float _4559 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
        _2555 = (((((_2619 * _2265) + _971) * cbLight._m0[_2570].x) * _2638) * _2639) + _2441;
        _2557 = (((((_2619 * _2267) + _973) * cbLight._m0[_2570].y) * _2638) * _2639) + _2443;
        _2559 = (((((_2619 * _2268) + _974) * cbLight._m0[_2570].z) * _2638) * _2639) + _2445;
    }
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    if (_2073.y == 0u)
    {
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2714;
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2714;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2714;
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.x;
        uint _2741 = uint((float(_2729.y) * floor(float(uint(cbSceneParam._m0[85u].y * _860) / _2730))) + floor(float(uint(cbSceneParam._m0[85u].x * _859) / _2730)));
        float _2751 = (log2(_2717 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2752 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        uint _2755 = uint(isnan(14.0) ? _2752 : (isnan(_2752) ? 14.0 : min(_2752, 14.0)));
        uvec4 _2760 = texelFetch(g_lightClusterGridBuffer, int(((_2755 << 2u) + (_2741 << 6u)) >> 2u));
        uint _2761 = _2760.x;
        uint _2762 = _2729.z;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        if (((((1u << ((_2762 >> 4u) & 15u)) + 4294967295u) & _2761) == 0u) || ((_2762 & 240u) == 0u))
        {
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
        }
        else
        {
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3029)
                {
                    frontier_phi_68_pred = _3015;
                    frontier_phi_68_pred_1 = _3018;
                    frontier_phi_68_pred_2 = _3017;
                    frontier_phi_68_pred_3 = _3016;
                    frontier_phi_68_pred_4 = _3014;
                    frontier_phi_68_pred_5 = _3013;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2715;
                        float _3225 = _3184.y - _2716;
                        float _3226 = _3184.z - _2717;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_882, _885, _888), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4585 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2715;
                        float _3260 = (-0.0) - _2716;
                        float _3261 = (-0.0) - _2717;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3275 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _1002;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3266 + _3231;
                        float _3287 = _3267 + _3232;
                        float _3288 = _3268 + _3233;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_882, _885, _888), vec3(_3266, _3267, _3268));
                        float _4601 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3300 = dot(vec3(_882, _885, _888), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4612 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3244 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3234) + _3309;
                        float _4623 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4634 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3307 * _3307) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3255 * _3203.x) + _3161;
                        _3089 = (_3255 * _3203.y) + _3162;
                        _3090 = (_3255 * _3203.z) + _3163;
                        _3085 = (_3335 * _3220.x) + _3158;
                        _3086 = (_3335 * _3220.y) + _3159;
                        _3087 = (_3335 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_68_pred = _3087;
                    frontier_phi_68_pred_1 = _3090;
                    frontier_phi_68_pred_2 = _3089;
                    frontier_phi_68_pred_3 = _3088;
                    frontier_phi_68_pred_4 = _3086;
                    frontier_phi_68_pred_5 = _3085;
                }
                _2866 = frontier_phi_68_pred;
                _2872 = frontier_phi_68_pred_1;
                _2870 = frontier_phi_68_pred_2;
                _2868 = frontier_phi_68_pred_3;
                _2864 = frontier_phi_68_pred_4;
                _2862 = frontier_phi_68_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2862;
                    _3014 = _2864;
                    _3015 = _2866;
                    _3016 = _2868;
                    _3017 = _2870;
                    _3018 = _2872;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
        }
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.z;
        uint _2878 = (_2876 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2878) & _2761) == 0u)
        {
            _2981 = _2861;
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
            _2989 = _2869;
            _2991 = _2871;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
            float _3007 = _3006 * _2715;
            float _3008 = _3006 * _2716;
            float _3009 = _3006 * _2717;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2878 < ((_2876 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2861;
                float _3142 = _2863;
                float _3143 = _2865;
                float _3144 = _2867;
                float _3145 = _2869;
                float _3146 = _2871;
                uint _3147 = _2878;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3157)
                    {
                        frontier_phi_79_pred = _3146;
                        frontier_phi_79_pred_1 = _3145;
                        frontier_phi_79_pred_2 = _3144;
                        frontier_phi_79_pred_3 = _3143;
                        frontier_phi_79_pred_4 = _3142;
                        frontier_phi_79_pred_5 = _3141;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3362 = _3141;
                        float _3363 = _3142;
                        float _3364 = _3143;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        uint _3368 = _3156;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3379 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3455 = (_3379 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3379 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2717, _3487.z, fma(_2716, _3487.y, _3487.x * _2715)) + _3487.w;
                            _3500 = !((fma(_2717, _3468.z, fma(_2716, _3468.y, _3468.x * _2715)) + _3468.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3394.x - _2715;
                                float _3528 = _3394.y - _2716;
                                float _3529 = _3394.z - _2717;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3395 * _3395));
                                float _4645 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3545 = sqrt(_3530) * _3410.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_882, _885, _888))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2717, _3437.z, fma(_2716, _3437.y, _3437.x * _2715)) + _3437.w) / _3499;
                                float _3559 = (fma(_2717, _3452.z, fma(_2716, _3452.y, _3452.x * _2715)) + _3452.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4661 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1002;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3007;
                                float _3589 = _3535 - _3008;
                                float _3590 = _3536 - _3009;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_882, _885, _888), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4672 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3602 = dot(vec3(_882, _885, _888), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4683 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_882, _885, _888), vec3(_3534, _3535, _3536))) + _3611;
                                float _4694 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4705 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3565 * _3410.z;
                                frontier_phi_85_pred_1 = _3565 * _3410.y;
                                frontier_phi_85_pred_2 = _3565 * _3410.x;
                                frontier_phi_85_pred_3 = _3639 * _3422.z;
                                frontier_phi_85_pred_4 = _3639 * _3422.y;
                                frontier_phi_85_pred_5 = _3639 * _3422.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_85_pred;
                            _3647 = frontier_phi_85_pred_1;
                            _3646 = frontier_phi_85_pred_2;
                            _3645 = frontier_phi_85_pred_3;
                            _3644 = frontier_phi_85_pred_4;
                            _3643 = frontier_phi_85_pred_5;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3354;
                        frontier_phi_79_pred_1 = _3353;
                        frontier_phi_79_pred_2 = _3352;
                        frontier_phi_79_pred_3 = _3351;
                        frontier_phi_79_pred_4 = _3350;
                        frontier_phi_79_pred_5 = _3349;
                    }
                    _2992 = frontier_phi_79_pred;
                    _2990 = frontier_phi_79_pred_1;
                    _2988 = frontier_phi_79_pred_2;
                    _2986 = frontier_phi_79_pred_3;
                    _2984 = frontier_phi_79_pred_4;
                    _2982 = frontier_phi_79_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2988;
                frontier_phi_60_61_ladder_1 = _2992;
                frontier_phi_60_61_ladder_2 = _2990;
                frontier_phi_60_61_ladder_3 = _2986;
                frontier_phi_60_61_ladder_4 = _2984;
                frontier_phi_60_61_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_60_61_ladder = _2867;
                frontier_phi_60_61_ladder_1 = _2871;
                frontier_phi_60_61_ladder_2 = _2869;
                frontier_phi_60_61_ladder_3 = _2865;
                frontier_phi_60_61_ladder_4 = _2863;
                frontier_phi_60_61_ladder_5 = _2861;
            }
            _2981 = frontier_phi_60_61_ladder_5;
            _2983 = frontier_phi_60_61_ladder_4;
            _2985 = frontier_phi_60_61_ladder_3;
            _2987 = frontier_phi_60_61_ladder;
            _2989 = frontier_phi_60_61_ladder_2;
            _2991 = frontier_phi_60_61_ladder_1;
        }
        float _2996 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2773 = (_2996 * _2987) + _2207;
        _2775 = (_2996 * _2989) + _2209;
        _2777 = (_2996 * _2991) + _2211;
        _2779 = ((_2981 * _971) * _2996) + _2555;
        _2781 = ((_2983 * _973) * _2996) + _2557;
        _2783 = ((_2985 * _974) * _2996) + _2559;
    }
    else
    {
        _2773 = _2207;
        _2775 = _2209;
        _2777 = _2211;
        _2779 = _2555;
        _2781 = _2557;
        _2783 = _2559;
    }
    float _4721 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4732 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4743 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2800 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2773 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _986))) + ((_2779 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2775 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _986))) + ((_2781 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    float _2802 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2777 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _986))) + ((_2783 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1826)) * cbPerFrame._m0[3u].x);
    uint _2803 = _914 + 6u;
    float _2811 = _859 / cbSceneParam._m0[86u].x;
    float _2812 = _860 / cbSceneParam._m0[86u].y;
    vec4 _2826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2828 = _2826.x;
    float _2829 = _2826.y;
    float _2830 = _2826.z;
    float _2831 = _2826.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2886 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2887 = _2886 / _782;
        float _2898 = _2887 * _832;
        float _2899 = _833 * _2887;
        float _2900 = (-0.0) - _2899;
        float _2901 = _2887 * _834;
        float _2903 = (cbSceneParam._m0[77u].w * _2900) / _2886;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2899;
        float _2911 = sqrt(((_2898 * _2898) + (_2899 * _2899)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2886)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2900 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3044 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2911 / _2900) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2921 * _3053) - exp2(_2921 * _3054)) * _3042))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2811, _2812, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2831);
        _2923 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2828;
        _2925 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2829;
        _2927 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2830;
        _2929 = _3109 * _2831;
    }
    else
    {
        _2923 = _2828;
        _2925 = _2829;
        _2927 = _2830;
        _2929 = _2831;
    }
    bool _3136;
    vec4 _2939;
    vec4 _2961;
    float _2963;
    float _2967;
    float _2968;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2939 = cbMatDynParam._m0[0u];
        float _2941 = roundEven(_2939.y);
        bool _2942 = _2941 == 3.0;
        float _2943 = log2(_2929);
        float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * _2800;
        float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * _2801;
        float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * _2802;
        float _2959 = _848 + (-0.5);
        _2961 = cbMtdParam._m0[1u];
        _2963 = _2961.y * _2959;
        float _2966 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2967 = _2966 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = _2966 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
        _2969 = _2966 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
        _2970 = _2959 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_914 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _915 + uint(_2939.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2963 + 1.0) < _2961.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3340;
    if (_3136)
    {
        discard_state = true;
        _3340 = 0.0;
    }
    else
    {
        _3340 = cbInstanceData._m0[_2803].w;
    }
    SV_Target.x = _2967;
    SV_Target.y = _2968;
    SV_Target.z = _2969;
    SV_Target.w = _3340;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2803].w;
    discard_exit();
}


