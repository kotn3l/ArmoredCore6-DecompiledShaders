#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1238;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _268 = log2(0.0);
    float _270 = exp2(_268 * cbMtdParam._m0[20u].y);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _291 = _286.w;
    float _299 = exp2(log2(_290 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _301 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    vec4 _314 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _339 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _350 = cbMtdParam._m0[9u].x * _339.x;
    float _351 = cbMtdParam._m0[9u].y * _339.y;
    float _352 = cbMtdParam._m0[9u].z * _339.z;
    float _359 = (((cbMtdParam._m0[10u].x * _314.x) - _350) * _301) + _350;
    float _360 = (((cbMtdParam._m0[10u].y * _314.y) - _351) * _301) + _351;
    float _361 = (((cbMtdParam._m0[10u].z * _314.z) - _352) * _301) + _352;
    float _368 = exp2(log2(_291) * cbMtdParam._m0[21u].y);
    vec4 _381 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _401 = (((cbMtdParam._m0[11u].x * _381.x) - _359) * _368) + _359;
    float _402 = (((cbMtdParam._m0[11u].y * _381.y) - _360) * _368) + _360;
    float _403 = (((cbMtdParam._m0[11u].z * _381.z) - _361) * _368) + _361;
    vec4 _415 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _439 = (_258.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _415.x) - _401) * _272) + _401);
    float _441 = (_258.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _415.y) - _402) * _272) + _402);
    float _443 = (_258.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _415.z) - _403) * _272) + _403);
    float _448 = exp2(log2(1.0 - _291) * 0.00999999977648258209228515625);
    float _466 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _448) + cbMtdParam._m0[21u].z;
    float _485 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _466) + cbMtdParam._m0[20u].z) * _368) + _466;
    float _508 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _485) + cbMtdParam._m0[22u].z) * _272) + _485;
    vec4 _520 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _538 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _544 = cbMtdParam._m0[19u].x + _538.z;
    float _547 = (((cbMtdParam._m0[20u].x + _520.z) - _544) * _448) + _544;
    vec4 _560 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _572 = (_290 * 2.0) * ((((_560.z - _547) + cbMtdParam._m0[22u].x) * _368) + _547);
    vec4 _585 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _594 = (((_585.z - _572) + cbMtdParam._m0[21u].x) * _272) + _572;
    float _605 = ((_520.x - _540) * _448) + _540;
    float _606 = ((_520.y - _541) * _448) + _541;
    float _611 = ((_560.x - _605) * _368) + _605;
    float _612 = ((_560.y - _606) * _368) + _606;
    float _621 = ((((_585.x - _611) * _272) + _611) * 2.0) + (-1.0);
    float _622 = ((((_585.y - _612) * _272) + _612) * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3871 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))));
    float _631 = _621 + (cbMtdParam._m0[21u].w * ((_286.x * 2.0) + (-1.0)));
    float _632 = _622 + (cbMtdParam._m0[21u].w * ((_286.y * 2.0) + (-1.0)));
    float _635 = fma(_628, _241, fma(_632, _233 * TANGENT.x, (_219 * _211) * _631));
    float _638 = fma(_628, _242, fma(_632, _233 * TANGENT.y, (_219 * _212) * _631));
    float _641 = fma(_628, _243, fma(_632, _233 * TANGENT.z, (_219 * _213) * _631));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    float _646 = _645 * _635;
    float _647 = _645 * _638;
    float _648 = _645 * _641;
    float _3882 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _649 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3904 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3915 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3926 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _653 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _737 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _739 = _737.w;
    float _759 = fma(_648, cbSceneParam._m0[5u].z, fma(_647, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _646));
    float _762 = fma(_648, cbSceneParam._m0[6u].z, fma(_647, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _646));
    float _765 = fma(_648, cbSceneParam._m0[7u].z, fma(_647, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _646));
    vec4 _767 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _778 = (((_767.y - _649) + (_767.w * _649)) * cbMtdParam._m0[3u].x) + _649;
    uint _791 = uint(roundEven(NORMAL.w)) * 13u;
    uint _793 = (_791 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3937 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    vec4 _805 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _810 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((_810.x - _653) + (_810.w * _653)) * cbMtdParam._m0[3u].x) + _653;
    float _834 = (cbMtdParam._m0[3u].x * (((_802 * _739) - _802) + _805.x)) + _802;
    float _835 = (cbMtdParam._m0[3u].x * (((_803 * _739) - _803) + _805.y)) + _803;
    float _836 = (cbMtdParam._m0[3u].x * (((_804 * _739) - _804) + _805.z)) + _804;
    float _837 = 1.0 - _821;
    float _838 = _837 * _834;
    float _839 = _837 * _835;
    float _840 = _837 * _836;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _821;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _821;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _821;
    float _848 = _845 + 0.039999999105930328369140625;
    float _850 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _863 = _860.x * TEXCOORD_4;
    float _864 = dot(vec3(_646, _647, _648), vec3(_726, _727, _728));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _646) - _726;
    float _872 = (_867 * _647) - _727;
    float _873 = (_867 * _648) - _728;
    float _877 = abs(dot(vec3(_726, _727, _728), vec3(_646, _647, _648)));
    float _3970 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_778);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _898 = (1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _899 = _892 * _879;
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_935, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927));
        float _966 = fma(_935, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927));
        float _970 = fma(_935, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927));
        float _995 = _927 + _646;
        float _996 = _931 + _647;
        float _997 = _935 + _648;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _962;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _966;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _970;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_646, _647, _648), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4018 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_646, _647, _648), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4051 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_646, _647, _648), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4084 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_935, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927));
        float _1282 = fma(_935, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927));
        float _1286 = fma(_935, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927));
        float _1309 = _927 + _646;
        float _1310 = _931 + _647;
        float _1311 = _935 + _648;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_646, _647, _648), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4147 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_646, _647, _648), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4180 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_646, _647, _648), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4213 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1238;
        _1548 = _1238;
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = _1238;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _871 * 0.5;
    float _1616 = _872 * 0.5;
    float _1617 = _873 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_935, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_935, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_935, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1746 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1749 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1777 = frontier_phi_16_14_ladder;
        }
        float _1949;
        if (_1746 > 0.0)
        {
            _1949 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1949 = frontier_phi_25_21_ladder;
        }
        float _2244;
        if (_1749 > 0.0)
        {
            _2244 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2244 = frontier_phi_37_32_ladder;
        }
        float _2246 = isnan(_1949) ? _1777 : (isnan(_1777) ? _1949 : min(_1777, _1949));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1743) + _1732;
        float _2252 = (_2247 * _1746) + _1736;
        float _2253 = (_2247 * _1749) + _1740;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_15_37_ladder = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2398.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2398.z * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_15_37_ladder_1;
        _1767 = frontier_phi_15_37_ladder;
        _1769 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1684);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1828 = fma(_935, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927)) + cbModelParam._m0[21u].w;
        float _1832 = fma(_935, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927)) + cbModelParam._m0[22u].w;
        float _1836 = fma(_935, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927)) + cbModelParam._m0[23u].w;
        float _1839 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1842 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1845 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _1954;
        if (_1839 > 0.0)
        {
            _1954 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1954 = frontier_phi_27_23_ladder;
        }
        float _2271;
        if (_1842 > 0.0)
        {
            _2271 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2271 = frontier_phi_39_34_ladder;
        }
        float _2609;
        if (_1845 > 0.0)
        {
            _2609 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2609 = frontier_phi_49_46_ladder;
        }
        float _2611 = isnan(_2271) ? _1954 : (isnan(_1954) ? _2271 : min(_1954, _2271));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1839) + _1828;
        float _2617 = (_2612 * _1842) + _1832;
        float _2618 = (_2612 * _1845) + _1836;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_24_49_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1864 = frontier_phi_24_49_ladder_2;
        _1866 = frontier_phi_24_49_ladder_1;
        _1868 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1774);
        _1864 = _1848.x * cbModelParam._m0[1u].z;
        _1866 = _1848.y * cbModelParam._m0[1u].z;
        _1868 = _1848.z * cbModelParam._m0[1u].z;
    }
    float _1881 = (((_898 * _848) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1883 = (((_898 * _850) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1885 = (((_898 * _851) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1881 * cbSceneParam._m0[91u].x));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1941 = _1928 / _1940;
    float _1942 = _1932 / _1940;
    float _1943 = _1936 / _1940;
    float _2090;
    float _2091;
    float _2092;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1970 = ((uint(_1943 > cbSceneParam._m0[59u].y) + uint(_1943 > cbSceneParam._m0[59u].x)) + uint(_1943 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1971 = _1970 + 43u;
        uint _1979 = _1970 + 44u;
        uint _1987 = _1970 + 45u;
        uint _1995 = _1970 + 46u;
        float _2006 = fma(_1940, cbSceneParam._m0[_1971].w, fma(_1936, cbSceneParam._m0[_1971].z, fma(_1932, cbSceneParam._m0[_1971].y, _1928 * cbSceneParam._m0[_1971].x)));
        float _2010 = fma(_1940, cbSceneParam._m0[_1979].w, fma(_1936, cbSceneParam._m0[_1979].z, fma(_1932, cbSceneParam._m0[_1979].y, _1928 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1940, cbSceneParam._m0[_1995].w, fma(_1936, cbSceneParam._m0[_1995].z, fma(_1932, cbSceneParam._m0[_1995].y, _1928 * cbSceneParam._m0[_1995].x)));
        float _2023 = cbSceneParam._m0[33u].z * _2018;
        float _2025 = cbSceneParam._m0[33u].w * _2018;
        float _2028 = fma(_1940, cbSceneParam._m0[_1987].w, fma(_1936, cbSceneParam._m0[_1987].z, fma(_1932, cbSceneParam._m0[_1987].y, _1928 * cbSceneParam._m0[_1987].x))) / _2018;
        float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
        float _4339 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2083 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2006) / _2018, (_2025 + _2010) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 + _2006) / _2018, (_2010 - _2023) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2023) / _2018, (_2010 - _2025) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2025) / _2018, (_2023 + _2010) / _2018), _2028), 0.0)).x), vec4(0.25)));
        _2090 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
        _2091 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
        _2092 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2090 = 1.0;
        _2091 = 1.0;
        _2092 = 1.0;
    }
    float _2156;
    float _2158;
    float _2160;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2144 = fma(_1940, cbSceneParam._m0[63u].w, fma(_1936, cbSceneParam._m0[63u].z, fma(_1932, cbSceneParam._m0[63u].y, _1928 * cbSceneParam._m0[63u].x)));
        float _2145 = fma(_1940, cbSceneParam._m0[60u].w, fma(_1936, cbSceneParam._m0[60u].z, fma(_1932, cbSceneParam._m0[60u].y, _1928 * cbSceneParam._m0[60u].x))) / _2144;
        float _2146 = fma(_1940, cbSceneParam._m0[61u].w, fma(_1936, cbSceneParam._m0[61u].z, fma(_1932, cbSceneParam._m0[61u].y, _1928 * cbSceneParam._m0[61u].x))) / _2144;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2145 >= cbSceneParam._m0[64u].x) && (_2146 >= cbSceneParam._m0[64u].y)) && (_2145 <= cbSceneParam._m0[64u].z)) && (_2146 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1940, cbSceneParam._m0[62u].w, fma(_1936, cbSceneParam._m0[62u].z, fma(_1932, cbSceneParam._m0[62u].y, _1928 * cbSceneParam._m0[62u].x))) / _2144;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
            float _4355 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2145, cbSceneParam._m0[33u].w + _2146), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2145, _2146 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].z, _2146 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2146), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_36_35_ladder_1 = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
            frontier_phi_36_35_ladder_2 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
        }
        else
        {
            frontier_phi_36_35_ladder = _2091;
            frontier_phi_36_35_ladder_1 = _2092;
            frontier_phi_36_35_ladder_2 = _2090;
        }
        _2156 = frontier_phi_36_35_ladder_2;
        _2158 = frontier_phi_36_35_ladder;
        _2160 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2156 = _2090;
        _2158 = _2091;
        _2160 = _2092;
    }
    uvec4 _2165 = floatBitsToUint(cbInstanceData._m0[_791 + 5u]);
    uint _2167 = _2165.x * 14u;
    uint _2168 = _2167 + 13u;
    float _2175 = _863 + (-1.0);
    float _2180 = (cbLight._m0[_2168].x * _2175) + 1.0;
    float _2181 = (cbLight._m0[_2168].y * _2175) + 1.0;
    float _2182 = (cbLight._m0[_2168].z * _2175) + 1.0;
    float _2183 = (cbLight._m0[_2168].w * _2175) + 1.0;
    uint _2184 = _2167 + 5u;
    float _2190 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2194 = _2167 + 4u;
    float _2203 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2207 = _2167 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_646, _647, _648));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_646, _647, _648));
    float _4391 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4402 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2184].x * _2190) * _2228) + (((cbLight._m0[_2194].x * _2156) * _2203) * _2226);
    float _2236 = ((_2190 * cbLight._m0[_2184].y) * _2228) + (((cbLight._m0[_2194].y * _2158) * _2203) * _2226);
    float _2237 = ((_2190 * cbLight._m0[_2184].z) * _2228) + (((cbLight._m0[_2194].z * _2160) * _2203) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2167 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2243)
    {
        _2345 = _2235;
        _2347 = _2236;
        _2349 = _2237;
    }
    else
    {
        uint _2353 = _2167 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2167 + 2u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4413 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2372 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2235;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2236;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2237;
    }
    bool _2352 = _2241.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2352)
    {
        _2407 = _2345;
        _2409 = _2347;
        _2411 = _2349;
    }
    else
    {
        uint _2580 = _2167 + 7u;
        float _2596 = (dot(vec3(cbLight._m0[_2167 + 3u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4429 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2599 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2407 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2345;
        _2409 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2347;
        _2411 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2349;
    }
    uint _2414 = _2167 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _778) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2167].x + _726;
    float _2430 = cbLight._m0[_2167].y + _727;
    float _2431 = cbLight._m0[_2167].z + _728;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2167].xyz));
    float _4445 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2443 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2444 = dot(vec3(_646, _647, _648), vec3(_2436, _2437, _2438));
    float _4467 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2436, _2437, _2438));
    float _4478 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2465 = 0.959999978542327880859375 - _845;
    float _2467 = 0.959999978542327880859375 - _846;
    float _2468 = 0.959999978542327880859375 - _847;
    float _2475 = 1.0 - _2428;
    float _2486 = (0.5 / (((_2443 * ((_2442 * _2475) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2475) + _2428) * _2442))) * _2442;
    float _4489 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2502 = _2167 + 9u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _778) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2207].x + _726;
    float _2516 = cbLight._m0[_2207].y + _727;
    float _2517 = cbLight._m0[_2207].z + _728;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2207].xyz));
    float _4500 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2529 = dot(vec3(_646, _647, _648), vec3(_2522, _2523, _2524));
    float _4511 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2522, _2523, _2524));
    float _4522 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2514 * _2514;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
    float _2555 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2443 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2555) + _2514) * _2528))) * _2528;
    float _4533 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    float _2577 = (((((_2548 * _2465) + _848) * cbLight._m0[_2502].x) * _2567) * _2190) + ((((cbLight._m0[_2414].x * _2156) * ((_2464 * _2465) + _848)) * _2488) * _2203);
    float _2578 = (((((_2548 * _2467) + _850) * cbLight._m0[_2502].y) * _2567) * _2190) + ((((cbLight._m0[_2414].y * _2158) * ((_2464 * _2467) + _850)) * _2488) * _2203);
    float _2579 = (((((_2548 * _2468) + _851) * cbLight._m0[_2502].z) * _2567) * _2190) + ((((cbLight._m0[_2414].z * _2160) * ((_2464 * _2468) + _851)) * _2488) * _2203);
    float _2635;
    float _2637;
    float _2639;
    if (_2243)
    {
        _2635 = _2577;
        _2637 = _2578;
        _2639 = _2579;
    }
    else
    {
        uint _2641 = _2167 + 2u;
        uint _2645 = _2167 + 10u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _778) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _726;
        float _2662 = cbLight._m0[_2641].y + _727;
        float _2663 = cbLight._m0[_2641].z + _728;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2641].xyz));
        float _4544 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2675 = dot(vec3(_646, _647, _648), vec3(_2668, _2669, _2670));
        float _4555 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4566 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2443 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2701) + _2660) * _2674))) * _2674;
        float _4577 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2635 = (((((_2694 * _2465) + _848) * cbLight._m0[_2645].x) * _2713) * _2714) + _2577;
        _2637 = (((((_2694 * _2467) + _850) * cbLight._m0[_2645].y) * _2713) * _2714) + _2578;
        _2639 = (((((_2694 * _2468) + _851) * cbLight._m0[_2645].z) * _2713) * _2714) + _2579;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2352)
    {
        _2745 = _2635;
        _2747 = _2637;
        _2749 = _2639;
    }
    else
    {
        uint _2756 = _2167 + 3u;
        uint _2760 = _2167 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _778) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _726;
        float _2777 = cbLight._m0[_2756].y + _727;
        float _2778 = cbLight._m0[_2756].z + _728;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2756].xyz));
        float _4593 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2790 = dot(vec3(_646, _647, _648), vec3(_2783, _2784, _2785));
        float _4604 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4615 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2443 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2816) + _2775) * _2789))) * _2789;
        float _4626 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2745 = (((((_2809 * _2465) + _848) * cbLight._m0[_2760].x) * _2828) * _2829) + _2635;
        _2747 = (((((_2809 * _2467) + _850) * cbLight._m0[_2760].y) * _2828) * _2829) + _2637;
        _2749 = (((((_2809 * _2468) + _851) * cbLight._m0[_2760].z) * _2828) * _2829) + _2639;
    }
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_2165.y == 0u)
    {
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.x;
        uint _2862 = uint((float(_2850.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2851))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2851)));
        float _2872 = (log2(_1943 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2873 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        uint _2876 = uint(isnan(14.0) ? _2873 : (isnan(_2873) ? 14.0 : min(_2873, 14.0)));
        uvec4 _2881 = texelFetch(g_lightClusterGridBuffer, int(((_2876 << 2u) + (_2862 << 6u)) >> 2u));
        uint _2882 = _2881.x;
        uint _2883 = _2850.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2883 >> 4u) & 15u)) + 4294967295u) & _2882) == 0u) || ((_2883 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3121)
                {
                    frontier_phi_68_pred = _3110;
                    frontier_phi_68_pred_1 = _3109;
                    frontier_phi_68_pred_2 = _3108;
                    frontier_phi_68_pred_3 = _3106;
                    frontier_phi_68_pred_4 = _3105;
                    frontier_phi_68_pred_5 = _3107;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3120;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3111 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _1941;
                        float _3296 = _3255.y - _1942;
                        float _3297 = _3255.z - _1943;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_759, _762, _765), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4652 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _1941;
                        float _3331 = (-0.0) - _1942;
                        float _3332 = (-0.0) - _1943;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _879;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_759, _762, _765), vec3(_3337, _3338, _3339));
                        float _4668 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3371 = dot(vec3(_759, _762, _765), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4679 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4690 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4701 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3164 = (_3326 * _3274.x) + _3232;
                        _3165 = (_3326 * _3274.y) + _3233;
                        _3166 = (_3326 * _3274.z) + _3234;
                        _3161 = (_3406 * _3291.x) + _3229;
                        _3162 = (_3406 * _3291.y) + _3230;
                        _3163 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_68_pred = _3166;
                    frontier_phi_68_pred_1 = _3165;
                    frontier_phi_68_pred_2 = _3164;
                    frontier_phi_68_pred_3 = _3162;
                    frontier_phi_68_pred_4 = _3161;
                    frontier_phi_68_pred_5 = _3163;
                }
                _2972 = frontier_phi_68_pred;
                _2970 = frontier_phi_68_pred_1;
                _2968 = frontier_phi_68_pred_2;
                _2964 = frontier_phi_68_pred_3;
                _2962 = frontier_phi_68_pred_4;
                _2966 = frontier_phi_68_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2962;
                    _3106 = _2964;
                    _3107 = _2966;
                    _3108 = _2968;
                    _3109 = _2970;
                    _3110 = _2972;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2978) & _2882) == 0u)
        {
            _3073 = _2961;
            _3075 = _2963;
            _3077 = _2965;
            _3079 = _2967;
            _3081 = _2969;
            _3083 = _2971;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
            float _3099 = _3098 * _1941;
            float _3100 = _3098 * _1942;
            float _3101 = _3098 * _1943;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3212 = _2961;
                float _3213 = _2963;
                float _3214 = _2965;
                float _3215 = _2967;
                float _3216 = _2969;
                float _3217 = _2971;
                uint _3218 = _2978;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3228)
                    {
                        frontier_phi_74_pred = _3214;
                        frontier_phi_74_pred_1 = _3213;
                        frontier_phi_74_pred_2 = _3212;
                        frontier_phi_74_pred_3 = _3217;
                        frontier_phi_74_pred_4 = _3216;
                        frontier_phi_74_pred_5 = _3215;
                    }
                    else
                    {
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        uint _3430 = _3227;
                        uint _3431;
                        vec4 _3456;
                        float _3457;
                        vec4 _3472;
                        vec3 _3484;
                        vec4 _3500;
                        vec4 _3515;
                        float _3562;
                        bool _3563;
                        for (;;)
                        {
                            uint _3441 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3430));
                            _3431 = (_3430 + 4294967295u) & _3430;
                            uint _3443 = _3441 * 40u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3457 = _3456.w;
                            uint _3459 = (_3441 * 40u) + 4u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3441 * 40u) + 8u;
                            _3484 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x));
                            uint _3487 = (_3441 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3441 * 40u) + 20u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3518 = (_3441 * 40u) + 24u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3537 = (_3441 * 40u) + 28u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3562 = fma(_1943, _3550.z, fma(_1942, _3550.y, _3550.x * _1941)) + _3550.w;
                            _3563 = !((fma(_1943, _3531.z, fma(_1942, _3531.y, _3531.x * _1941)) + _3531.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3563)
                            {
                                float _3590 = _3456.x - _1941;
                                float _3591 = _3456.y - _1942;
                                float _3592 = _3456.z - _1943;
                                float _3593 = dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592));
                                float _3596 = inversesqrt(_3593);
                                float _3597 = _3596 * _3590;
                                float _3598 = _3596 * _3591;
                                float _3599 = _3596 * _3592;
                                float _3603 = 1.0 - (_3593 / (_3457 * _3457));
                                float _4712 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3608 = sqrt(_3593) * _3472.w;
                                float _3610 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                                float _3611 = _3610 * _3610;
                                float _3614 = ((1.0 - _3611) * dot(vec3(_3597, _3598, _3599), vec3(_759, _762, _765))) + _3611;
                                float _3617 = _3608 * _3608;
                                float _3621 = (fma(_1943, _3500.z, fma(_1942, _3500.y, _3500.x * _1941)) + _3500.w) / _3562;
                                float _3622 = (fma(_1943, _3515.z, fma(_1942, _3515.y, _3515.x * _1941)) + _3515.w) / _3562;
                                float _3626 = 1.0 - dot(vec2(_3621, _3622), vec2(_3621, _3622));
                                float _4728 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3628 = _3627 * (((isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0))) * _3604) / ((_3617 * 0.699999988079071044921875) + 1.0));
                                float _3640 = exp2(log2(1.0 / ((_3617 * 3.5) + 5.0)) * 0.25);
                                float _3641 = 1.0 - _879;
                                float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                                float _3649 = _3648 * _3648;
                                float _3650 = _3649 * _3649;
                                float _3651 = _3597 - _3099;
                                float _3652 = _3598 - _3100;
                                float _3653 = _3599 - _3101;
                                float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                                float _3661 = dot(vec3(_759, _762, _765), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4739 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3665 = dot(vec3(_759, _762, _765), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                                float _4750 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                                float _3673 = _3610 * _3649;
                                float _3674 = _3673 * _3673;
                                float _3680 = ((1.0 - _3674) * dot(vec3(_759, _762, _765), vec3(_3597, _3598, _3599))) + _3674;
                                float _4761 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3682 = 1.0 - _3649;
                                float _3692 = (0.5 / (((_3681 * ((_3664 * _3682) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3681 * _3682) + _3649) * _3664))) * _3681;
                                float _4772 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3702 = (_3627 * _3604) * (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3672 * _3672) * ((_3617 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3702 * _3484.z;
                                frontier_phi_80_pred_1 = _3702 * _3484.y;
                                frontier_phi_80_pred_2 = _3702 * _3484.x;
                                frontier_phi_80_pred_3 = _3628 * _3472.z;
                                frontier_phi_80_pred_4 = _3628 * _3472.y;
                                frontier_phi_80_pred_5 = _3628 * _3472.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3708 = frontier_phi_80_pred;
                            _3707 = frontier_phi_80_pred_1;
                            _3706 = frontier_phi_80_pred_2;
                            _3711 = frontier_phi_80_pred_3;
                            _3710 = frontier_phi_80_pred_4;
                            _3709 = frontier_phi_80_pred_5;
                            _3414 = _3709 + _3427;
                            _3415 = _3710 + _3428;
                            _3416 = _3711 + _3429;
                            _3411 = _3706 + _3424;
                            _3412 = _3707 + _3425;
                            _3413 = _3708 + _3426;
                            if (_3431 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3431;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3413;
                        frontier_phi_74_pred_1 = _3412;
                        frontier_phi_74_pred_2 = _3411;
                        frontier_phi_74_pred_3 = _3416;
                        frontier_phi_74_pred_4 = _3415;
                        frontier_phi_74_pred_5 = _3414;
                    }
                    _3078 = frontier_phi_74_pred;
                    _3076 = frontier_phi_74_pred_1;
                    _3074 = frontier_phi_74_pred_2;
                    _3084 = frontier_phi_74_pred_3;
                    _3082 = frontier_phi_74_pred_4;
                    _3080 = frontier_phi_74_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3074;
                        _3213 = _3076;
                        _3214 = _3078;
                        _3215 = _3080;
                        _3216 = _3082;
                        _3217 = _3084;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3082;
                frontier_phi_62_63_ladder_1 = _3080;
                frontier_phi_62_63_ladder_2 = _3078;
                frontier_phi_62_63_ladder_3 = _3084;
                frontier_phi_62_63_ladder_4 = _3076;
                frontier_phi_62_63_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_62_63_ladder = _2969;
                frontier_phi_62_63_ladder_1 = _2967;
                frontier_phi_62_63_ladder_2 = _2965;
                frontier_phi_62_63_ladder_3 = _2971;
                frontier_phi_62_63_ladder_4 = _2963;
                frontier_phi_62_63_ladder_5 = _2961;
            }
            _3073 = frontier_phi_62_63_ladder_5;
            _3075 = frontier_phi_62_63_ladder_4;
            _3077 = frontier_phi_62_63_ladder_2;
            _3079 = frontier_phi_62_63_ladder_1;
            _3081 = frontier_phi_62_63_ladder;
            _3083 = frontier_phi_62_63_ladder_3;
        }
        float _3088 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2894 = (_3088 * _3079) + _2407;
        _2896 = (_3088 * _3081) + _2409;
        _2898 = (_3088 * _3083) + _2411;
        _2900 = ((_3073 * _848) * _3088) + _2745;
        _2902 = ((_3075 * _850) * _3088) + _2747;
        _2904 = ((_3077 * _851) * _3088) + _2749;
    }
    else
    {
        _2894 = _2407;
        _2896 = _2409;
        _2898 = _2411;
        _2900 = _2745;
        _2902 = _2747;
        _2904 = _2749;
    }
    float _4788 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4799 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4810 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    uint _2924 = _791 + 6u;
    float _2932 = _734 / cbSceneParam._m0[86u].x;
    float _2933 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2987 = _2986 / _669;
        float _2998 = _2987 * _719;
        float _2999 = _720 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3001 = _2987 * _721;
        float _3003 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3004 = _3003 + cbSceneParam._m0[79u].w;
        float _3005 = cbSceneParam._m0[79u].w - _2999;
        float _3011 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3001 * _3001));
        float _3014 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3011;
        float _3019 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3021 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3174;
        if (abs((_3000 - _3003) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3174 = ((((_3004 > 0.0) ? exp2(_3019 * _3004) : (2.0 - exp2(_3021 * _3004))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3014;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : max(_3004, _3005));
            float _3136 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : min(_3004, _3005));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3174 = ((abs(_3011 / _3000) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_3019 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_3019 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_3021 * _3145) - exp2(_3021 * _3146)) * _3134))) + (_3014 * cbSceneParam._m0[80u].z);
        }
        vec4 _3176 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3185 = exp2((_3174 * (-1.44269502162933349609375)) * (1.0 - _3176.w));
        float _3186 = log2(_3185);
        float _3202 = log2(_2952);
        _3023 = (exp2(_3202 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].x)) * _3176.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3025 = (exp2(_3202 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].y)) * _3176.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3027 = (exp2(_3202 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].z)) * _3176.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3029 = _3185 * _2952;
    }
    else
    {
        _3023 = _2949;
        _3025 = _2950;
        _3027 = _2951;
        _3029 = _2952;
    }
    float _3041 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3042 = _3041 == 3.0;
    float _3043 = log2(_3029);
    float _3050 = exp2(_3043 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2894 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _863))) + ((_2900 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3051 = exp2(_3043 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2896 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _863))) + ((_2902 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3052 = exp2(_3043 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2898 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _863))) + ((_2904 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _3061 = (_3041 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3061 * (_3042 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.y = _3061 * (_3042 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.z = _3061 * (_3042 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.w = cbInstanceData._m0[_2924].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2924].w;
}


