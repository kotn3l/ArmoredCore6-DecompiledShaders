#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_AlbedoMask_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1347;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _264 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _278 = exp2(log2(_264.w * cbMtdParam._m0[22u].y) * cbMtdParam._m0[20u].y);
    float _279 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _280 = isnan(1.0) ? _279 : (isnan(_279) ? 1.0 : min(_279, 1.0));
    vec4 _294 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _299 = _294.w;
    float _307 = exp2(log2(_298 * cbMtdParam._m0[20u].w) * cbMtdParam._m0[19u].y);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _345 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _345.x;
    float _348 = _345.y;
    float _372 = ((cbMtdParam._m0[19u].w * _345.z) * (texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_15, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((cbMtdParam._m0[19u].z * TEXCOORD.y) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w)).x - _347)) + _347;
    bool _408 = _372 >= 0.25;
    bool _413 = _372 >= 0.3499999940395355224609375;
    bool _418 = _372 >= 0.5;
    bool _423 = _372 >= 0.64999997615814208984375;
    bool _428 = _372 >= 0.75;
    vec4 _456 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _467 = cbMtdParam._m0[9u].x * _456.x;
    float _468 = cbMtdParam._m0[9u].y * _456.y;
    float _469 = cbMtdParam._m0[9u].z * _456.z;
    float _476 = (((((((_428 ? cbMtdParam._m0[13u].x : (_423 ? cbMtdParam._m0[18u].x : (_418 ? cbMtdParam._m0[17u].x : (_413 ? cbMtdParam._m0[16u].x : (_408 ? cbMtdParam._m0[15u].x : cbMtdParam._m0[14u].x))))) - cbMtdParam._m0[10u].x) * _348) + cbMtdParam._m0[10u].x) * _322.x) - _467) * _309) + _467;
    float _477 = (((((((_428 ? cbMtdParam._m0[13u].y : (_423 ? cbMtdParam._m0[18u].y : (_418 ? cbMtdParam._m0[17u].y : (_413 ? cbMtdParam._m0[16u].y : (_408 ? cbMtdParam._m0[15u].y : cbMtdParam._m0[14u].y))))) - cbMtdParam._m0[10u].y) * _348) + cbMtdParam._m0[10u].y) * _322.y) - _468) * _309) + _468;
    float _478 = (((((((_428 ? cbMtdParam._m0[13u].z : (_423 ? cbMtdParam._m0[18u].z : (_418 ? cbMtdParam._m0[17u].z : (_413 ? cbMtdParam._m0[16u].z : (_408 ? cbMtdParam._m0[15u].z : cbMtdParam._m0[14u].z))))) - cbMtdParam._m0[10u].z) * _348) + cbMtdParam._m0[10u].z) * _322.z) - _469) * _309) + _469;
    float _485 = exp2(log2(_299) * cbMtdParam._m0[21u].y);
    vec4 _498 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _518 = (((cbMtdParam._m0[11u].x * _498.x) - _476) * _485) + _476;
    float _519 = (((cbMtdParam._m0[11u].y * _498.y) - _477) * _485) + _477;
    float _520 = (((cbMtdParam._m0[11u].z * _498.z) - _478) * _485) + _478;
    vec4 _532 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _556 = (_264.x * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].x * _532.x) - _518) * _280) + _518);
    float _558 = (_264.y * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].y * _532.y) - _519) * _280) + _519);
    float _560 = (_264.z * 4.55000019073486328125) * ((((cbMtdParam._m0[12u].z * _532.z) - _520) * _280) + _520);
    float _565 = exp2(log2(1.0 - _299) * 0.00999999977648258209228515625);
    float _583 = ((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_11, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x - cbMtdParam._m0[21u].z) * _565) + cbMtdParam._m0[21u].z;
    float _602 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w)).x - _583) + cbMtdParam._m0[20u].z) * _485) + _583;
    float _622 = (((texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w)).x - _602) + cbMtdParam._m0[22u].z) * _280) + _602;
    vec4 _634 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _652 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _658 = cbMtdParam._m0[19u].x + _652.z;
    float _661 = (((cbMtdParam._m0[20u].x + _634.z) - _658) * _565) + _658;
    vec4 _673 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _685 = (_298 * 2.0) * ((((_673.z - _661) + cbMtdParam._m0[22u].x) * _485) + _661);
    vec4 _697 = texture(sampler2D(C_DetailBlend_AlbedoMask_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _706 = (((_697.z - _685) + cbMtdParam._m0[21u].x) * _280) + _685;
    float _717 = ((_634.x - _654) * _565) + _654;
    float _718 = ((_634.y - _655) * _565) + _655;
    float _723 = ((_673.x - _717) * _485) + _717;
    float _724 = ((_673.y - _718) * _485) + _718;
    float _733 = ((((_697.x - _723) * _280) + _723) * 2.0) + (-1.0);
    float _734 = ((((_697.y - _724) * _280) + _724) * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3717 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _740 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _743 = _733 + (cbMtdParam._m0[21u].w * ((_294.x * 2.0) + (-1.0)));
    float _744 = _734 + (cbMtdParam._m0[21u].w * ((_294.y * 2.0) + (-1.0)));
    float _747 = fma(_740, _243, fma(_744, _235 * TANGENT.x, (_221 * _213) * _743));
    float _750 = fma(_740, _244, fma(_744, _235 * TANGENT.y, (_221 * _214) * _743));
    float _753 = fma(_740, _245, fma(_744, _235 * TANGENT.z, (_221 * _215) * _743));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3728 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _761 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3750 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3761 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3772 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _765 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _849 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _851 = _849.w;
    float _869 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _872 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _875 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    vec4 _877 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _888 = (((_877.y - _761) + (_877.w * _761)) * cbMtdParam._m0[3u].x) + _761;
    uint _901 = uint(roundEven(NORMAL.w)) * 13u;
    uint _903 = (_901 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_903].z;
    float _3783 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    vec4 _915 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _920 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _931 = (((_920.x - _765) + (_920.w * _765)) * cbMtdParam._m0[3u].x) + _765;
    float _944 = (cbMtdParam._m0[3u].x * (((_912 * _851) - _912) + _915.x)) + _912;
    float _945 = (cbMtdParam._m0[3u].x * (((_913 * _851) - _913) + _915.y)) + _913;
    float _946 = (cbMtdParam._m0[3u].x * (((_914 * _851) - _914) + _915.z)) + _914;
    float _947 = 1.0 - _931;
    float _948 = _947 * _944;
    float _949 = _947 * _945;
    float _950 = _947 * _946;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _931;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _931;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _931;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _973 = _970.x * TEXCOORD_4;
    float _974 = dot(vec3(_758, _759, _760), vec3(_838, _839, _840));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _758) - _838;
    float _982 = (_977 * _759) - _839;
    float _983 = (_977 * _760) - _840;
    float _987 = abs(dot(vec3(_838, _839, _840), vec3(_758, _759, _760)));
    float _3816 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_888);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1008 = (1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _989;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1076 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1080 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1104 = _1037 + _758;
        float _1105 = _1041 + _759;
        float _1106 = _1045 + _760;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1072;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1076;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1080;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_758, _759, _760), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3864 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_758, _759, _760), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3897 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_758, _759, _760), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3930 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1391 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1395 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1418 = _1037 + _758;
        float _1419 = _1041 + _759;
        float _1420 = _1045 + _760;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_758, _759, _760), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _3993 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_758, _759, _760), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4026 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_758, _759, _760), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4059 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1347;
        _1657 = _1347;
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1359)) + _1359;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1360)) + _1360;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1361)) + _1361;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _981 * 0.5;
    float _1725 = _982 * 0.5;
    float _1726 = _983 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1854 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1857 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1885 = frontier_phi_16_14_ladder;
        }
        float _2108;
        if (_1854 > 0.0)
        {
            _2108 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2108 = frontier_phi_25_21_ladder;
        }
        float _2365;
        if (_1857 > 0.0)
        {
            _2365 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2365 = frontier_phi_37_32_ladder;
        }
        float _2367 = isnan(_2108) ? _1885 : (isnan(_1885) ? _2108 : min(_1885, _2108));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1851) + _1840;
        float _2373 = (_2368 * _1854) + _1844;
        float _2374 = (_2368 * _1857) + _1848;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_15_37_ladder = _2502.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2502.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2502.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_15_37_ladder_2;
        _1875 = frontier_phi_15_37_ladder_1;
        _1877 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1793);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1935 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1939 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1943 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1946 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1949 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1952 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2113;
        if (_1946 > 0.0)
        {
            _2113 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2113 = frontier_phi_27_23_ladder;
        }
        float _2392;
        if (_1949 > 0.0)
        {
            _2392 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2392 = frontier_phi_39_34_ladder;
        }
        float _2605;
        if (_1952 > 0.0)
        {
            _2605 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2605 = frontier_phi_48_45_ladder;
        }
        float _2607 = isnan(_2392) ? _2113 : (isnan(_2113) ? _2392 : min(_2113, _2392));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1946) + _1935;
        float _2613 = (_2608 * _1949) + _1939;
        float _2614 = (_2608 * _1952) + _1943;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_24_48_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1971 = frontier_phi_24_48_ladder_2;
        _1973 = frontier_phi_24_48_ladder_1;
        _1975 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1882);
        _1971 = _1955.x * cbModelParam._m0[1u].z;
        _1973 = _1955.y * cbModelParam._m0[1u].z;
        _1975 = _1955.z * cbModelParam._m0[1u].z;
    }
    float _1988 = (((_1008 * _958) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1990 = (((_1008 * _960) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1992 = (((_1008 * _961) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1995 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1990, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _1998 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1990, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _2001 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1990, cbSceneParam._m0[91u].y, _1988 * cbSceneParam._m0[91u].x));
    vec4 _2009 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_846, _847));
    float _2011 = _2009.w;
    float _2023 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2011);
    float _2024 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2011);
    float _2025 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2011);
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_901 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _973 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2067 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2071 = _2031 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_758, _759, _760));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_758, _759, _760));
    float _4195 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4206 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2048].x * _2054) * _2092) + (((cbLight._m0[_2058].x * _2023) * _2067) * _2090);
    float _2100 = ((_2054 * cbLight._m0[_2048].y) * _2092) + (((cbLight._m0[_2058].y * _2024) * _2067) * _2090);
    float _2101 = ((_2054 * cbLight._m0[_2048].z) * _2092) + (((cbLight._m0[_2058].z * _2025) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2031 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4217 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2145 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2336 = _2031 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4233 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2355 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2163 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2118;
        _2165 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2120;
        _2167 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2122;
    }
    uint _2170 = _2031 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _888) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2031].x + _838;
    float _2186 = cbLight._m0[_2031].y + _839;
    float _2187 = cbLight._m0[_2031].z + _840;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2031].xyz));
    float _4249 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2199 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2200 = dot(vec3(_758, _759, _760), vec3(_2192, _2193, _2194));
    float _4271 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2192, _2193, _2194));
    float _4282 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _955;
    float _2223 = 0.959999978542327880859375 - _956;
    float _2224 = 0.959999978542327880859375 - _957;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4293 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2258 = _2031 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _888) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2071].x + _838;
    float _2272 = cbLight._m0[_2071].y + _839;
    float _2273 = cbLight._m0[_2071].z + _840;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2071].xyz));
    float _4304 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2285 = dot(vec3(_758, _759, _760), vec3(_2278, _2279, _2280));
    float _4315 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2278, _2279, _2280));
    float _4326 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2311 = 1.0 - _2270;
    float _2321 = (0.5 / (((_2199 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2311) + _2270) * _2284))) * _2284;
    float _4337 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2333 = (((((_2304 * _2221) + _958) * cbLight._m0[_2258].x) * _2323) * _2054) + ((((cbLight._m0[_2170].x * _2023) * ((_2220 * _2221) + _958)) * _2244) * _2067);
    float _2334 = (((((_2304 * _2223) + _960) * cbLight._m0[_2258].y) * _2323) * _2054) + ((((cbLight._m0[_2170].y * _2024) * ((_2220 * _2223) + _960)) * _2244) * _2067);
    float _2335 = (((((_2304 * _2224) + _961) * cbLight._m0[_2258].z) * _2323) * _2054) + ((((cbLight._m0[_2170].z * _2025) * ((_2220 * _2224) + _961)) * _2244) * _2067);
    float _2397;
    float _2399;
    float _2401;
    if (_2107)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2031 + 2u;
        uint _2407 = _2031 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _888) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _838;
        float _2424 = cbLight._m0[_2403].y + _839;
        float _2425 = cbLight._m0[_2403].z + _840;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2403].xyz));
        float _4348 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2437 = dot(vec3(_758, _759, _760), vec3(_2430, _2431, _2432));
        float _4359 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4370 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2199 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2463) + _2422) * _2436))) * _2436;
        float _4381 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2397 = (((((_2456 * _2221) + _958) * cbLight._m0[_2407].x) * _2475) * _2476) + _2333;
        _2399 = (((((_2456 * _2223) + _960) * cbLight._m0[_2407].y) * _2475) * _2476) + _2334;
        _2401 = (((((_2456 * _2224) + _961) * cbLight._m0[_2407].z) * _2475) * _2476) + _2335;
    }
    float _2511;
    float _2513;
    float _2515;
    if (_2125)
    {
        _2511 = _2397;
        _2513 = _2399;
        _2515 = _2401;
    }
    else
    {
        uint _2522 = _2031 + 3u;
        uint _2526 = _2031 + 11u;
        float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _888) * 0.949999988079071044921875);
        float _2541 = _2540 * _2540;
        float _2542 = cbLight._m0[_2522].x + _838;
        float _2543 = cbLight._m0[_2522].y + _839;
        float _2544 = cbLight._m0[_2522].z + _840;
        float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
        float _2549 = _2548 * _2542;
        float _2550 = _2548 * _2543;
        float _2551 = _2548 * _2544;
        float _2552 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2522].xyz));
        float _4397 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2556 = dot(vec3(_758, _759, _760), vec3(_2549, _2550, _2551));
        float _4408 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2560 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2549, _2550, _2551));
        float _4419 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2564 = _2541 * _2541;
        float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
        float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2582 = 1.0 - _2541;
        float _2592 = (0.5 / (((_2199 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2582) + _2541) * _2555))) * _2555;
        float _4430 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2511 = (((((_2575 * _2221) + _958) * cbLight._m0[_2526].x) * _2594) * _2595) + _2397;
        _2513 = (((((_2575 * _2223) + _960) * cbLight._m0[_2526].y) * _2594) * _2595) + _2399;
        _2515 = (((((_2575 * _2224) + _961) * cbLight._m0[_2526].z) * _2594) * _2595) + _2401;
    }
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_2029.y == 0u)
    {
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2670;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2670;
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2670;
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2686)));
        float _2707 = (log2(_2673 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2977)
                {
                    frontier_phi_63_pred = _2966;
                    frontier_phi_63_pred_1 = _2965;
                    frontier_phi_63_pred_2 = _2964;
                    frontier_phi_63_pred_3 = _2963;
                    frontier_phi_63_pred_4 = _2962;
                    frontier_phi_63_pred_5 = _2961;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2976;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2967 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _2671;
                        float _3152 = _3111.y - _2672;
                        float _3153 = _3111.z - _2673;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_869, _872, _875), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4456 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _2671;
                        float _3187 = (-0.0) - _2672;
                        float _3188 = (-0.0) - _2673;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3202 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3203 = 1.0 - _989;
                        float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                        float _3211 = _3210 * _3210;
                        float _3212 = _3211 * _3211;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3223 = dot(vec3(_869, _872, _875), vec3(_3193, _3194, _3195));
                        float _4472 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3227 = dot(vec3(_869, _872, _875), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                        float _4483 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                        float _3235 = _3171 * _3211;
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3161) + _3236;
                        float _4494 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3241 = 1.0 - _3211;
                        float _3251 = (0.5 / (((_3240 * ((_3226 * _3241) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3211) * _3226))) * _3240;
                        float _4505 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3262 = (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3234 * _3234) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3020 = (_3182 * _3130.x) + _3088;
                        _3021 = (_3182 * _3130.y) + _3089;
                        _3022 = (_3182 * _3130.z) + _3090;
                        _3017 = (_3262 * _3147.x) + _3085;
                        _3018 = (_3262 * _3147.y) + _3086;
                        _3019 = (_3262 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_63_pred = _3022;
                    frontier_phi_63_pred_1 = _3021;
                    frontier_phi_63_pred_2 = _3020;
                    frontier_phi_63_pred_3 = _3019;
                    frontier_phi_63_pred_4 = _3018;
                    frontier_phi_63_pred_5 = _3017;
                }
                _2828 = frontier_phi_63_pred;
                _2826 = frontier_phi_63_pred_1;
                _2824 = frontier_phi_63_pred_2;
                _2822 = frontier_phi_63_pred_3;
                _2820 = frontier_phi_63_pred_4;
                _2818 = frontier_phi_63_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2818;
                    _2962 = _2820;
                    _2963 = _2822;
                    _2964 = _2824;
                    _2965 = _2826;
                    _2966 = _2828;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2834) & _2717) == 0u)
        {
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
            _2935 = _2823;
            _2937 = _2825;
            _2939 = _2827;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
            float _2955 = _2954 * _2671;
            float _2956 = _2954 * _2672;
            float _2957 = _2954 * _2673;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3068 = _2817;
                float _3069 = _2819;
                float _3070 = _2821;
                float _3071 = _2823;
                float _3072 = _2825;
                float _3073 = _2827;
                uint _3074 = _2834;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3084)
                    {
                        frontier_phi_69_pred = _3073;
                        frontier_phi_69_pred_1 = _3072;
                        frontier_phi_69_pred_2 = _3071;
                        frontier_phi_69_pred_3 = _3070;
                        frontier_phi_69_pred_4 = _3069;
                        frontier_phi_69_pred_5 = _3068;
                    }
                    else
                    {
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        uint _3286 = _3083;
                        uint _3287;
                        vec4 _3312;
                        float _3313;
                        vec4 _3328;
                        vec3 _3340;
                        vec4 _3355;
                        vec4 _3370;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3297 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3286));
                            _3287 = (_3286 + 4294967295u) & _3286;
                            uint _3299 = _3297 * 40u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3313 = _3312.w;
                            uint _3315 = (_3297 * 40u) + 4u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3297 * 40u) + 8u;
                            _3340 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x));
                            uint _3342 = (_3297 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3297 * 40u) + 20u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3373 = (_3297 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3297 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_2673, _3405.z, fma(_2672, _3405.y, _3405.x * _2671)) + _3405.w;
                            _3418 = !((fma(_2673, _3386.z, fma(_2672, _3386.y, _3386.x * _2671)) + _3386.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3312.x - _2671;
                                float _3446 = _3312.y - _2672;
                                float _3447 = _3312.z - _2673;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3313 * _3313));
                                float _4516 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3463 = sqrt(_3448) * _3328.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_869, _872, _875))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_2673, _3355.z, fma(_2672, _3355.y, _3355.x * _2671)) + _3355.w) / _3417;
                                float _3477 = (fma(_2673, _3370.z, fma(_2672, _3370.y, _3370.x * _2671)) + _3370.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4532 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _989;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2955;
                                float _3507 = _3453 - _2956;
                                float _3508 = _3454 - _2957;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4543 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3520 = dot(vec3(_869, _872, _875), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4554 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_869, _872, _875), vec3(_3452, _3453, _3454))) + _3529;
                                float _4565 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4576 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3483 * _3328.z;
                                frontier_phi_75_pred_1 = _3483 * _3328.y;
                                frontier_phi_75_pred_2 = _3483 * _3328.x;
                                frontier_phi_75_pred_3 = _3557 * _3340.z;
                                frontier_phi_75_pred_4 = _3557 * _3340.y;
                                frontier_phi_75_pred_5 = _3557 * _3340.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_75_pred;
                            _3565 = frontier_phi_75_pred_1;
                            _3564 = frontier_phi_75_pred_2;
                            _3563 = frontier_phi_75_pred_3;
                            _3562 = frontier_phi_75_pred_4;
                            _3561 = frontier_phi_75_pred_5;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            _3267 = _3561 + _3280;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            if (_3287 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3287;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3272;
                        frontier_phi_69_pred_1 = _3271;
                        frontier_phi_69_pred_2 = _3270;
                        frontier_phi_69_pred_3 = _3269;
                        frontier_phi_69_pred_4 = _3268;
                        frontier_phi_69_pred_5 = _3267;
                    }
                    _2940 = frontier_phi_69_pred;
                    _2938 = frontier_phi_69_pred_1;
                    _2936 = frontier_phi_69_pred_2;
                    _2934 = frontier_phi_69_pred_3;
                    _2932 = frontier_phi_69_pred_4;
                    _2930 = frontier_phi_69_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2930;
                        _3069 = _2932;
                        _3070 = _2934;
                        _3071 = _2936;
                        _3072 = _2938;
                        _3073 = _2940;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2940;
                frontier_phi_57_58_ladder_1 = _2938;
                frontier_phi_57_58_ladder_2 = _2936;
                frontier_phi_57_58_ladder_3 = _2934;
                frontier_phi_57_58_ladder_4 = _2932;
                frontier_phi_57_58_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_57_58_ladder = _2827;
                frontier_phi_57_58_ladder_1 = _2825;
                frontier_phi_57_58_ladder_2 = _2823;
                frontier_phi_57_58_ladder_3 = _2821;
                frontier_phi_57_58_ladder_4 = _2819;
                frontier_phi_57_58_ladder_5 = _2817;
            }
            _2929 = frontier_phi_57_58_ladder_5;
            _2931 = frontier_phi_57_58_ladder_4;
            _2933 = frontier_phi_57_58_ladder_3;
            _2935 = frontier_phi_57_58_ladder_2;
            _2937 = frontier_phi_57_58_ladder_1;
            _2939 = frontier_phi_57_58_ladder;
        }
        float _2944 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2729 = (_2944 * _2935) + _2163;
        _2731 = (_2944 * _2937) + _2165;
        _2733 = (_2944 * _2939) + _2167;
        _2735 = ((_2929 * _958) * _2944) + _2511;
        _2737 = ((_2931 * _960) * _2944) + _2513;
        _2739 = ((_2933 * _961) * _2944) + _2515;
    }
    else
    {
        _2729 = _2163;
        _2731 = _2165;
        _2733 = _2167;
        _2735 = _2511;
        _2737 = _2513;
        _2739 = _2515;
    }
    float _4592 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4603 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4614 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    uint _2759 = _901 + 6u;
    float _2767 = _846 / cbSceneParam._m0[86u].x;
    float _2768 = _847 / cbSceneParam._m0[86u].y;
    vec4 _2782 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2784 = _2782.x;
    float _2785 = _2782.y;
    float _2786 = _2782.z;
    float _2787 = _2782.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2843 = _2842 / _781;
        float _2854 = _2843 * _831;
        float _2855 = _832 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2857 = _2843 * _833;
        float _2859 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2855;
        float _2867 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2856 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _2992 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3030 = ((abs(_2867 / _2856) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2877 * _3001) - exp2(_2877 * _3002)) * _2990))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2767, _2768, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2787);
        _2879 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2784;
        _2881 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2785;
        _2883 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2786;
        _2885 = _3041 * _2787;
    }
    else
    {
        _2879 = _2784;
        _2881 = _2785;
        _2883 = _2786;
        _2885 = _2787;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2729 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _973))) + ((_2735 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2731 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _973))) + ((_2737 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2733 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _973))) + ((_2739 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2759].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2759].w;
}


