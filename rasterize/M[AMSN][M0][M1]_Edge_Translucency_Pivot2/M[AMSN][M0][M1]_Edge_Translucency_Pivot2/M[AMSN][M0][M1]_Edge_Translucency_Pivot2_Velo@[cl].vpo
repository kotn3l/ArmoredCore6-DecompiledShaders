#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _725;

void main()
{
    uint _85 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    float _186 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _189 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _199 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _207 = _85 * 13u;
    uint _212 = _207 + 1u;
    uint _216 = _207 + 2u;
    uvec4 _224 = floatBitsToUint(cbInstanceData._m0[_207 + 7u]);
    uint _226 = _224.w;
    uint _228 = min(_224.y, 8u);
    precise float _232 = POSITION.x + 0.0;
    precise float _233 = POSITION.y + 0.0;
    precise float _234 = POSITION.z + 0.0;
    uint _239 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _85;
    uvec4 _241 = texelFetch(g_InstanceIndexBuffer, int(_239));
    uint _242 = _241.x;
    uint _251 = (floatBitsToUint(cbInstanceData._m0[(_242 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _258 = _251 + 1u;
    uint _265 = _251 + 2u;
    precise float _272 = _232 * cbObjMatrix._m0[_251].x;
    precise float _273 = _233 * cbObjMatrix._m0[_251].y;
    precise float _274 = _273 + _272;
    precise float _275 = _234 * cbObjMatrix._m0[_251].z;
    precise float _276 = _275 + _274;
    precise float _277 = 1.0 * cbObjMatrix._m0[_251].w;
    precise float _279 = _277 + _276;
    precise float _280 = _232 * cbObjMatrix._m0[_258].x;
    precise float _281 = _233 * cbObjMatrix._m0[_258].y;
    precise float _282 = _281 + _280;
    precise float _283 = _234 * cbObjMatrix._m0[_258].z;
    precise float _284 = _283 + _282;
    precise float _285 = 1.0 * cbObjMatrix._m0[_258].w;
    precise float _286 = _285 + _284;
    precise float _287 = _232 * cbObjMatrix._m0[_265].x;
    precise float _288 = _233 * cbObjMatrix._m0[_265].y;
    precise float _289 = _288 + _287;
    precise float _290 = _234 * cbObjMatrix._m0[_265].z;
    precise float _291 = _290 + _289;
    precise float _292 = 1.0 * cbObjMatrix._m0[_265].w;
    precise float _293 = _292 + _291;
    float _326 = fma(_189, cbObjMatrix._m0[_251].z, fma(_188, cbObjMatrix._m0[_251].y, cbObjMatrix._m0[_251].x * _186));
    float _329 = fma(_189, cbObjMatrix._m0[_258].z, fma(_188, cbObjMatrix._m0[_258].y, cbObjMatrix._m0[_258].x * _186));
    float _332 = fma(_189, cbObjMatrix._m0[_265].z, fma(_188, cbObjMatrix._m0[_265].y, cbObjMatrix._m0[_265].x * _186));
    precise float _344 = _279 * _279;
    precise float _345 = _286 * _286;
    precise float _346 = _344 + _345;
    precise float _347 = _293 * _293;
    precise float _348 = _346 + _347;
    precise float _350 = cbMtdParam._m0[10u].z * sqrt(_348);
    precise float _360 = cbInstanceData._m0[_207].x * 0.0;
    precise float _361 = 0.0 * cbInstanceData._m0[_207].y;
    precise float _362 = _361 + _360;
    precise float _363 = 0.0 * cbInstanceData._m0[_207].z;
    precise float _364 = _363 + _362;
    precise float _365 = 1.0 * cbInstanceData._m0[_207].w;
    precise float _366 = _365 + _364;
    precise float _367 = cbInstanceData._m0[_212].x * 0.0;
    precise float _368 = 0.0 * cbInstanceData._m0[_212].y;
    precise float _369 = _368 + _367;
    precise float _370 = 0.0 * cbInstanceData._m0[_212].z;
    precise float _371 = _370 + _369;
    precise float _372 = 1.0 * cbInstanceData._m0[_212].w;
    precise float _373 = _372 + _371;
    precise float _374 = cbInstanceData._m0[_216].x * 0.0;
    precise float _375 = 0.0 * cbInstanceData._m0[_216].y;
    precise float _376 = _375 + _374;
    precise float _377 = 0.0 * cbInstanceData._m0[_216].z;
    precise float _378 = _377 + _376;
    precise float _379 = 1.0 * cbInstanceData._m0[_216].w;
    precise float _380 = _379 + _378;
    precise float _381 = cbPerFrame._m0[22u].x + _350;
    float _382;
    float _384;
    float _386;
    if (_228 == 0u)
    {
        _382 = 0.0;
        _384 = 0.0;
        _386 = 0.0;
    }
    else
    {
        uint _655 = _224.z;
        precise float _383;
        precise float _385;
        precise float _387;
        float _798;
        float _800;
        float _802;
        float _656 = 0.0;
        float _657 = 0.0;
        float _658 = 0.0;
        uint _659 = _655;
        uint _661 = 0u;
        float _697;
        float _716;
        vec4 _730;
        float _731;
        float _732;
        float _746;
        float _747;
        float _748;
        float _765;
        float _766;
        float _767;
        float _768;
        bool _769;
        bool _770;
        bool _771;
        precise float _772;
        precise float _773;
        precise float _774;
        float _775;
        float _776;
        float _777;
        precise float _778;
        bool _781;
        for (;;)
        {
            uint _663 = _659 & 255u;
            uint _665 = _663 * 24u;
            uvec3 _675 = uvec3(texelFetch(g_forceParam, int(_665)).x, texelFetch(g_forceParam, int(_665 + 1u)).x, texelFetch(g_forceParam, int(_665 + 2u)).x);
            uint _680 = (_663 * 24u) + 4u;
            vec4 _693 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_680)).x, texelFetch(g_forceParam, int(_680 + 1u)).x, texelFetch(g_forceParam, int(_680 + 2u)).x, texelFetch(g_forceParam, int(_680 + 3u)).x));
            _697 = _693.w;
            uint _699 = (_663 * 24u) + 8u;
            vec4 _712 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_699)).x, texelFetch(g_forceParam, int(_699 + 1u)).x, texelFetch(g_forceParam, int(_699 + 2u)).x, texelFetch(g_forceParam, int(_699 + 3u)).x));
            _716 = _712.w;
            uint _719 = (_663 * 24u) + 12u;
            _730 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_719)).x, texelFetch(g_forceParam, int(_719 + 1u)).x, _725, texelFetch(g_forceParam, int(_719 + 3u)).x));
            _731 = _730.x;
            _732 = _730.w;
            uint _735 = (_663 * 24u) + 16u;
            vec3 _745 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_735)).x, texelFetch(g_forceParam, int(_735 + 1u)).x, texelFetch(g_forceParam, int(_735 + 2u)).x));
            _746 = _745.x;
            _747 = _745.y;
            _748 = _745.z;
            uint _751 = (_663 * 24u) + 20u;
            vec4 _764 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_751)).x, texelFetch(g_forceParam, int(_751 + 1u)).x, texelFetch(g_forceParam, int(_751 + 2u)).x, texelFetch(g_forceParam, int(_751 + 3u)).x));
            _765 = _764.x;
            _766 = _764.y;
            _767 = _764.z;
            _768 = _764.w;
            _769 = _675.x == 1u;
            _770 = _675.y == 1u;
            _771 = _675.z == 1u;
            _772 = _366 - _693.x;
            _773 = _373 - _693.y;
            _774 = _380 - _693.z;
            _775 = _769 ? _712.x : _772;
            _776 = _769 ? _712.y : _773;
            _777 = _769 ? _712.z : _774;
            _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
            _781 = _778 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_781)
            {
                precise float _783 = _772 * _772;
                precise float _784 = _773 * _773;
                precise float _785 = _783 + _784;
                precise float _786 = _774 * _774;
                precise float _787 = _786 + _785;
                float _788 = sqrt(_787);
                float _789 = inversesqrt(_778);
                precise float _790 = _775 * _789;
                precise float _791 = _776 * _789;
                precise float _792 = _777 * _789;
                precise float _795 = _788 / (isnan(0.001000000047497451305389404296875) ? _730.y : (isnan(_730.y) ? 0.001000000047497451305389404296875 : max(_730.y, 0.001000000047497451305389404296875)));
                precise float _796 = 1.0 - _795;
                float _960 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
                float _797 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
                float _823;
                if (_771)
                {
                    float _810 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
                    precise float _811 = _772 * _810;
                    precise float _812 = _773 * _810;
                    precise float _813 = _774 * _810;
                    precise float _817 = dot(vec3(_790, _791, _792), vec3(_811, _812, _813)) * 0.800000011920928955078125;
                    precise float _819 = _817 + 0.20000000298023223876953125;
                    float _971 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
                    precise float _822 = _797 * (isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0)));
                    _823 = _822;
                }
                else
                {
                    _823 = _797;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_823 > 0.0)
                {
                    bool _826 = _769 && (!_771);
                    precise float _828 = _788 * (-4.0);
                    precise float _832 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _731 : (isnan(_731) ? 0.001000000047497451305389404296875 : max(_731, 0.001000000047497451305389404296875)));
                    precise float _834 = dot(vec2(_790, _792), vec2(_772, _774));
                    precise float _838 = _832 * _834;
                    precise float _839 = float(_826) * _838;
                    precise float _840 = _381 * _832;
                    precise float _841 = _840 - _839;
                    precise float _842 = (_826 ? 0.0 : _828) + _841;
                    precise float _844 = _716 * sin(_842);
                    precise float _845 = _791 * 0.0;
                    precise float _846 = _845 - _792;
                    precise float _847 = _792 * 0.0;
                    precise float _848 = _790 * 0.0;
                    precise float _849 = _847 - _848;
                    precise float _850 = _790 - _845;
                    precise float _851 = _732 * _844;
                    float _852 = _769 ? _851 : 0.0;
                    float _895;
                    if (_770)
                    {
                        precise float _855 = _746 * 2.0;
                        precise float _857 = _766 + _767;
                        precise float _858 = _768 + _857;
                        precise float _860 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _746 : (isnan(_746) ? 0.001000000047497451305389404296875 : max(_746, 0.001000000047497451305389404296875)));
                        precise float _861 = _765 * _860;
                        precise float _862 = (-0.0) - _790;
                        precise float _867 = dot(vec2(_792, _862), vec2(_772, _774)) / _855;
                        precise float _868 = (-0.0) - _867;
                        float _871 = fract(abs(_867));
                        precise float _872 = (-0.0) - _871;
                        precise float _874 = _855 * ((_867 >= _868) ? _871 : _872);
                        precise float _875 = _874 * 6.283184051513671875;
                        precise float _876 = _875 / _855;
                        precise float _878 = (isnan(5.0) ? _746 : (isnan(_746) ? 5.0 : min(_746, 5.0))) * sin(_876);
                        precise float _879 = _834 + _878;
                        precise float _880 = _746 * 0.25;
                        precise float _882 = _381 * _765;
                        precise float _883 = _882 - _880;
                        precise float _884 = _883 - _879;
                        precise float _885 = _765 * _858;
                        precise float _887 = _884 / (isnan(0.001000000047497451305389404296875) ? _885 : (isnan(_885) ? 0.001000000047497451305389404296875 : max(_885, 0.001000000047497451305389404296875)));
                        float _888 = fract(_887);
                        precise float _890 = 1.0 - _888;
                        float _891 = (_887 < 0.0) ? _890 : _888;
                        precise float _892 = _857 / _858;
                        precise float _893 = _766 / _858;
                        float _914;
                        if (_891 < _893)
                        {
                            precise float _912 = _891 / _893;
                            _914 = _912;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_891 < _892)
                            {
                                precise float _924 = _891 - _893;
                                precise float _925 = _892 - _893;
                                precise float _926 = _924 / _925;
                                precise float _915 = 1.0 - _926;
                                frontier_phi_14_13_ladder = _915;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _914 = frontier_phi_14_13_ladder;
                        }
                        precise float _916 = _748 * _914;
                        precise float _917 = _860 * _834;
                        precise float _918 = _381 * _861;
                        precise float _919 = _918 - _917;
                        precise float _921 = _747 + sin(_919);
                        precise float _923 = _916 * abs(_921);
                        precise float _896 = _923 + 0.0;
                        _895 = _896;
                    }
                    else
                    {
                        _895 = 0.0;
                    }
                    precise float _897 = _697 + _844;
                    precise float _898 = _897 + _895;
                    precise float _899 = _790 * _898;
                    precise float _900 = _791 * _898;
                    precise float _901 = _792 * _898;
                    precise float _902 = _846 * _852;
                    precise float _903 = _849 * _852;
                    precise float _904 = _850 * _852;
                    precise float _905 = _902 + _899;
                    precise float _906 = _903 + _900;
                    precise float _907 = _904 + _901;
                    precise float _908 = _823 * _905;
                    precise float _909 = _823 * _906;
                    precise float _910 = _823 * _907;
                    precise float _799 = _908 * 0.0500000007450580596923828125;
                    precise float _801 = _909 * 0.0500000007450580596923828125;
                    precise float _803 = _910 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _799;
                    frontier_phi_5_pred_7_ladder_1 = _801;
                    frontier_phi_5_pred_7_ladder_2 = _803;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _798 = frontier_phi_5_pred;
            _800 = frontier_phi_5_pred_1;
            _802 = frontier_phi_5_pred_2;
            _383 = _656 + _798;
            _385 = _657 + _800;
            _387 = _658 + _802;
            uint _662 = _661 + 1u;
            if (_662 == _228)
            {
                break;
            }
            else
            {
                _656 = _383;
                _657 = _385;
                _658 = _387;
                _659 = (_661 != 3u) ? (_659 >> 8u) : _226;
                _661 = _662;
                continue;
            }
        }
        _382 = _383;
        _384 = _385;
        _386 = _387;
    }
    precise float _388 = _382 * _382;
    precise float _389 = _384 * _384;
    precise float _390 = _388 + _389;
    precise float _391 = _386 * _386;
    precise float _392 = _390 + _391;
    float _393 = sqrt(_392);
    bool _394 = _393 < 0.00011000000085914507508277893066406;
    float _399 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].x, cbInstanceData._m0[_212].x, cbInstanceData._m0[_216].x), vec3(cbInstanceData._m0[_207].x, cbInstanceData._m0[_212].x, cbInstanceData._m0[_216].x)));
    precise float _400 = cbInstanceData._m0[_207].x * _399;
    precise float _401 = cbInstanceData._m0[_212].x * _399;
    precise float _402 = cbInstanceData._m0[_216].x * _399;
    float _406 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].y, cbInstanceData._m0[_212].y, cbInstanceData._m0[_216].y), vec3(cbInstanceData._m0[_207].y, cbInstanceData._m0[_212].y, cbInstanceData._m0[_216].y)));
    precise float _407 = cbInstanceData._m0[_207].y * _406;
    precise float _408 = cbInstanceData._m0[_212].y * _406;
    precise float _409 = cbInstanceData._m0[_216].y * _406;
    float _413 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].z, cbInstanceData._m0[_212].z, cbInstanceData._m0[_216].z), vec3(cbInstanceData._m0[_207].z, cbInstanceData._m0[_212].z, cbInstanceData._m0[_216].z)));
    precise float _414 = cbInstanceData._m0[_207].z * _413;
    precise float _415 = cbInstanceData._m0[_212].z * _413;
    precise float _416 = cbInstanceData._m0[_216].z * _413;
    precise float _417 = _400 * 0.0;
    precise float _418 = 1.0 * _407;
    precise float _419 = _418 + _417;
    precise float _420 = 0.0 * _414;
    precise float _421 = _420 + _419;
    precise float _422 = _401 * 0.0;
    precise float _423 = 1.0 * _408;
    precise float _424 = _423 + _422;
    precise float _425 = 0.0 * _415;
    precise float _426 = _425 + _424;
    precise float _427 = _402 * 0.0;
    precise float _428 = 1.0 * _409;
    precise float _429 = _428 + _427;
    precise float _430 = 0.0 * _416;
    precise float _431 = _430 + _429;
    float _435 = inversesqrt(dot(vec3(_382, _384, _386), vec3(_382, _384, _386)));
    precise float _436 = _382 * _435;
    precise float _437 = _384 * _435;
    precise float _438 = _386 * _435;
    precise float _439 = _426 * _438;
    precise float _440 = _431 * _437;
    precise float _441 = _439 - _440;
    precise float _442 = _431 * _436;
    precise float _443 = _421 * _438;
    precise float _444 = _442 - _443;
    precise float _445 = _421 * _437;
    precise float _446 = _426 * _436;
    precise float _447 = _445 - _446;
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    precise float _452 = _451 * _441;
    precise float _453 = _451 * _444;
    precise float _454 = _451 * _447;
    precise float _455 = _393 + 1.0;
    precise float _457 = cbMtdParam._m0[10u].y * log2(_455);
    precise float _458 = _279 - _366;
    precise float _459 = _286 - _373;
    precise float _460 = _293 - _380;
    precise float _461 = dot(vec3(_452, _453, _454), vec3(_458, _459, _460));
    precise float _464 = _452 * _461;
    precise float _465 = _453 * _461;
    precise float _466 = _454 * _461;
    precise float _467 = _366 + _464;
    precise float _468 = _373 + _465;
    precise float _469 = _380 + _466;
    precise float _470 = _279 - _467;
    precise float _471 = _286 - _468;
    precise float _472 = _293 - _469;
    precise float _473 = _453 * _472;
    precise float _474 = _454 * _471;
    precise float _475 = _473 - _474;
    precise float _476 = _454 * _470;
    precise float _477 = _452 * _472;
    precise float _478 = _476 - _477;
    precise float _479 = _452 * _471;
    precise float _480 = _453 * _470;
    precise float _481 = _479 - _480;
    float _482 = sin(_457);
    float _483 = cos(_457);
    precise float _484 = _470 * _483;
    precise float _485 = _471 * _483;
    precise float _486 = _472 * _483;
    precise float _487 = _482 * _475;
    precise float _488 = _482 * _478;
    precise float _489 = _482 * _481;
    precise float _490 = _484 + _487;
    precise float _491 = _485 + _488;
    precise float _492 = _489 + _486;
    precise float _493 = _467 + _490;
    precise float _494 = _468 + _491;
    precise float _495 = _469 + _492;
    precise float _496 = _493 - _279;
    precise float _497 = _494 - _286;
    precise float _498 = _495 - _293;
    float _499 = _394 ? 0.0 : _496;
    float _500 = _394 ? 0.0 : _497;
    float _501 = _394 ? 0.0 : _498;
    precise float _502 = _279 + _499;
    precise float _503 = _286 + _500;
    precise float _504 = _293 + _501;
    float _514 = ((fma(_234, cbPrevObjMatrix._m0[_251].z, fma(_233, cbPrevObjMatrix._m0[_251].y, cbPrevObjMatrix._m0[_251].x * _232)) + cbPrevObjMatrix._m0[_251].w) + _499) - cbSceneParam._m0[28u].x;
    float _515 = ((fma(_234, cbPrevObjMatrix._m0[_258].z, fma(_233, cbPrevObjMatrix._m0[_258].y, cbPrevObjMatrix._m0[_258].x * _232)) + cbPrevObjMatrix._m0[_258].w) + _500) - cbSceneParam._m0[28u].y;
    float _516 = ((fma(_234, cbPrevObjMatrix._m0[_265].z, fma(_233, cbPrevObjMatrix._m0[_265].y, cbPrevObjMatrix._m0[_265].x * _232)) + cbPrevObjMatrix._m0[_265].w) + _501) - cbSceneParam._m0[28u].z;
    precise float _566 = _502 - cbSceneParam._m0[3u].x;
    precise float _567 = _503 - cbSceneParam._m0[3u].y;
    precise float _568 = _504 - cbSceneParam._m0[3u].z;
    precise float _596 = _566 * cbSceneParam._m0[24u].x;
    precise float _597 = _567 * cbSceneParam._m0[24u].y;
    precise float _598 = _597 + _596;
    precise float _599 = _568 * cbSceneParam._m0[24u].z;
    precise float _600 = _599 + _598;
    precise float _601 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _602 = _601 + _600;
    precise float _603 = _566 * cbSceneParam._m0[25u].x;
    precise float _604 = _567 * cbSceneParam._m0[25u].y;
    precise float _605 = _604 + _603;
    precise float _606 = _568 * cbSceneParam._m0[25u].z;
    precise float _607 = _606 + _605;
    precise float _608 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _609 = _608 + _607;
    precise float _610 = _566 * cbSceneParam._m0[26u].x;
    precise float _611 = _567 * cbSceneParam._m0[26u].y;
    precise float _612 = _611 + _610;
    precise float _613 = _568 * cbSceneParam._m0[26u].z;
    precise float _614 = _613 + _612;
    precise float _615 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _616 = _615 + _614;
    precise float _617 = _566 * cbSceneParam._m0[27u].x;
    precise float _618 = _567 * cbSceneParam._m0[27u].y;
    precise float _619 = _618 + _617;
    precise float _620 = _568 * cbSceneParam._m0[27u].z;
    precise float _621 = _620 + _619;
    precise float _622 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _623 = _622 + _621;
    gl_Position.x = _602;
    gl_Position.y = _609;
    gl_Position.z = _616;
    gl_Position.w = _623;
    POSITION_1.x = _602;
    POSITION_1.y = _609;
    POSITION_1.z = _616;
    POSITION_1.w = _623;
    NORMAL_1.x = _326;
    NORMAL_1.y = _329;
    NORMAL_1.z = _332;
    NORMAL_1.w = float(_242);
    TANGENT_1.x = fma(_201, cbObjMatrix._m0[_251].z, fma(_200, cbObjMatrix._m0[_251].y, cbObjMatrix._m0[_251].x * _199));
    TANGENT_1.y = fma(_201, cbObjMatrix._m0[_258].z, fma(_200, cbObjMatrix._m0[_258].y, cbObjMatrix._m0[_258].x * _199));
    TANGENT_1.z = fma(_201, cbObjMatrix._m0[_265].z, fma(_200, cbObjMatrix._m0[_265].y, cbObjMatrix._m0[_265].x * _199));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _602;
    TEXCOORD_8.y = _609;
    TEXCOORD_8.z = _616;
    TEXCOORD_8.w = _623;
    TEXCOORD_9.x = fma(_516, cbSceneParam._m0[29u].z, fma(_515, cbSceneParam._m0[29u].y, _514 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_516, cbSceneParam._m0[30u].z, fma(_515, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _514)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_516, cbSceneParam._m0[31u].z, fma(_515, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _514)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_516, cbSceneParam._m0[32u].z, fma(_515, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _514)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _326;
    TEXCOORD_10.y = _329;
    TEXCOORD_10.z = _332;
}


