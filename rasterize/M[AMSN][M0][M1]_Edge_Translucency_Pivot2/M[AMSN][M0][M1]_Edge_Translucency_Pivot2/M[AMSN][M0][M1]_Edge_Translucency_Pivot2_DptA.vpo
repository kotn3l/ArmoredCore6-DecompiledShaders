#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _643;

void main()
{
    uint _84 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _173 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _188 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _194 = _84 * 13u;
    uint _199 = _194 + 1u;
    uint _203 = _194 + 2u;
    uvec4 _211 = floatBitsToUint(cbInstanceData._m0[_194 + 7u]);
    uint _213 = _211.w;
    uint _215 = min(_211.y, 8u);
    precise float _219 = POSITION.x + 0.0;
    precise float _220 = POSITION.y + 0.0;
    precise float _221 = POSITION.z + 0.0;
    uint _226 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _84;
    uvec4 _228 = texelFetch(g_InstanceIndexBuffer, int(_226));
    uint _229 = _228.x;
    uint _231 = _229 * 13u;
    uint _238 = (floatBitsToUint(cbInstanceData._m0[_231 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _245 = _238 + 1u;
    uint _252 = _238 + 2u;
    precise float _259 = _219 * cbObjMatrix._m0[_238].x;
    precise float _260 = _220 * cbObjMatrix._m0[_238].y;
    precise float _261 = _260 + _259;
    precise float _262 = _221 * cbObjMatrix._m0[_238].z;
    precise float _263 = _262 + _261;
    precise float _264 = 1.0 * cbObjMatrix._m0[_238].w;
    precise float _266 = _264 + _263;
    precise float _267 = _219 * cbObjMatrix._m0[_245].x;
    precise float _268 = _220 * cbObjMatrix._m0[_245].y;
    precise float _269 = _268 + _267;
    precise float _270 = _221 * cbObjMatrix._m0[_245].z;
    precise float _271 = _270 + _269;
    precise float _272 = 1.0 * cbObjMatrix._m0[_245].w;
    precise float _273 = _272 + _271;
    precise float _274 = _219 * cbObjMatrix._m0[_252].x;
    precise float _275 = _220 * cbObjMatrix._m0[_252].y;
    precise float _276 = _275 + _274;
    precise float _277 = _221 * cbObjMatrix._m0[_252].z;
    precise float _278 = _277 + _276;
    precise float _279 = 1.0 * cbObjMatrix._m0[_252].w;
    precise float _280 = _279 + _278;
    float _286 = cbSceneParam._m0[3u].x - _266;
    float _287 = cbSceneParam._m0[3u].y - _273;
    float _288 = cbSceneParam._m0[3u].z - _280;
    precise float _315 = _266 * _266;
    precise float _316 = _273 * _273;
    precise float _317 = _315 + _316;
    precise float _318 = _280 * _280;
    precise float _319 = _317 + _318;
    precise float _321 = cbMtdParam._m0[10u].z * sqrt(_319);
    precise float _331 = cbInstanceData._m0[_194].x * 0.0;
    precise float _332 = 0.0 * cbInstanceData._m0[_194].y;
    precise float _333 = _332 + _331;
    precise float _334 = 0.0 * cbInstanceData._m0[_194].z;
    precise float _335 = _334 + _333;
    precise float _336 = 1.0 * cbInstanceData._m0[_194].w;
    precise float _337 = _336 + _335;
    precise float _338 = cbInstanceData._m0[_199].x * 0.0;
    precise float _339 = 0.0 * cbInstanceData._m0[_199].y;
    precise float _340 = _339 + _338;
    precise float _341 = 0.0 * cbInstanceData._m0[_199].z;
    precise float _342 = _341 + _340;
    precise float _343 = 1.0 * cbInstanceData._m0[_199].w;
    precise float _344 = _343 + _342;
    precise float _345 = cbInstanceData._m0[_203].x * 0.0;
    precise float _346 = 0.0 * cbInstanceData._m0[_203].y;
    precise float _347 = _346 + _345;
    precise float _348 = 0.0 * cbInstanceData._m0[_203].z;
    precise float _349 = _348 + _347;
    precise float _350 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _351 = _350 + _349;
    precise float _352 = cbPerFrame._m0[22u].x + _321;
    float _353;
    float _355;
    float _357;
    if (_215 == 0u)
    {
        _353 = 0.0;
        _355 = 0.0;
        _357 = 0.0;
    }
    else
    {
        uint _573 = _211.z;
        precise float _354;
        precise float _356;
        precise float _358;
        float _716;
        float _718;
        float _720;
        float _574 = 0.0;
        float _575 = 0.0;
        float _576 = 0.0;
        uint _577 = _573;
        uint _579 = 0u;
        float _615;
        float _634;
        vec4 _648;
        float _649;
        float _650;
        float _664;
        float _665;
        float _666;
        float _683;
        float _684;
        float _685;
        float _686;
        bool _687;
        bool _688;
        bool _689;
        precise float _690;
        precise float _691;
        precise float _692;
        float _693;
        float _694;
        float _695;
        precise float _696;
        bool _699;
        for (;;)
        {
            uint _581 = _577 & 255u;
            uint _583 = _581 * 24u;
            uvec3 _593 = uvec3(texelFetch(g_forceParam, int(_583)).x, texelFetch(g_forceParam, int(_583 + 1u)).x, texelFetch(g_forceParam, int(_583 + 2u)).x);
            uint _598 = (_581 * 24u) + 4u;
            vec4 _611 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_598)).x, texelFetch(g_forceParam, int(_598 + 1u)).x, texelFetch(g_forceParam, int(_598 + 2u)).x, texelFetch(g_forceParam, int(_598 + 3u)).x));
            _615 = _611.w;
            uint _617 = (_581 * 24u) + 8u;
            vec4 _630 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_617)).x, texelFetch(g_forceParam, int(_617 + 1u)).x, texelFetch(g_forceParam, int(_617 + 2u)).x, texelFetch(g_forceParam, int(_617 + 3u)).x));
            _634 = _630.w;
            uint _637 = (_581 * 24u) + 12u;
            _648 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_637)).x, texelFetch(g_forceParam, int(_637 + 1u)).x, _643, texelFetch(g_forceParam, int(_637 + 3u)).x));
            _649 = _648.x;
            _650 = _648.w;
            uint _653 = (_581 * 24u) + 16u;
            vec3 _663 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_653)).x, texelFetch(g_forceParam, int(_653 + 1u)).x, texelFetch(g_forceParam, int(_653 + 2u)).x));
            _664 = _663.x;
            _665 = _663.y;
            _666 = _663.z;
            uint _669 = (_581 * 24u) + 20u;
            vec4 _682 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_669)).x, texelFetch(g_forceParam, int(_669 + 1u)).x, texelFetch(g_forceParam, int(_669 + 2u)).x, texelFetch(g_forceParam, int(_669 + 3u)).x));
            _683 = _682.x;
            _684 = _682.y;
            _685 = _682.z;
            _686 = _682.w;
            _687 = _593.x == 1u;
            _688 = _593.y == 1u;
            _689 = _593.z == 1u;
            _690 = _337 - _611.x;
            _691 = _344 - _611.y;
            _692 = _351 - _611.z;
            _693 = _687 ? _630.x : _690;
            _694 = _687 ? _630.y : _691;
            _695 = _687 ? _630.z : _692;
            _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
            _699 = _696 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_699)
            {
                precise float _701 = _690 * _690;
                precise float _702 = _691 * _691;
                precise float _703 = _701 + _702;
                precise float _704 = _692 * _692;
                precise float _705 = _704 + _703;
                float _706 = sqrt(_705);
                float _707 = inversesqrt(_696);
                precise float _708 = _693 * _707;
                precise float _709 = _694 * _707;
                precise float _710 = _695 * _707;
                precise float _713 = _706 / (isnan(0.001000000047497451305389404296875) ? _648.y : (isnan(_648.y) ? 0.001000000047497451305389404296875 : max(_648.y, 0.001000000047497451305389404296875)));
                precise float _714 = 1.0 - _713;
                float _877 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
                float _715 = isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0));
                float _741;
                if (_689)
                {
                    float _728 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
                    precise float _729 = _690 * _728;
                    precise float _730 = _691 * _728;
                    precise float _731 = _692 * _728;
                    precise float _735 = dot(vec3(_708, _709, _710), vec3(_729, _730, _731)) * 0.800000011920928955078125;
                    precise float _737 = _735 + 0.20000000298023223876953125;
                    float _888 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
                    precise float _740 = _715 * (isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0)));
                    _741 = _740;
                }
                else
                {
                    _741 = _715;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_741 > 0.0)
                {
                    bool _744 = _687 && (!_689);
                    precise float _746 = _706 * (-4.0);
                    precise float _750 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _649 : (isnan(_649) ? 0.001000000047497451305389404296875 : max(_649, 0.001000000047497451305389404296875)));
                    precise float _752 = dot(vec2(_708, _710), vec2(_690, _692));
                    precise float _755 = _750 * _752;
                    precise float _756 = float(_744) * _755;
                    precise float _757 = _352 * _750;
                    precise float _758 = _757 - _756;
                    precise float _759 = (_744 ? 0.0 : _746) + _758;
                    precise float _761 = _634 * sin(_759);
                    precise float _762 = _709 * 0.0;
                    precise float _763 = _762 - _710;
                    precise float _764 = _710 * 0.0;
                    precise float _765 = _708 * 0.0;
                    precise float _766 = _764 - _765;
                    precise float _767 = _708 - _762;
                    precise float _768 = _650 * _761;
                    float _769 = _687 ? _768 : 0.0;
                    float _812;
                    if (_688)
                    {
                        precise float _772 = _664 * 2.0;
                        precise float _774 = _684 + _685;
                        precise float _775 = _686 + _774;
                        precise float _777 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _664 : (isnan(_664) ? 0.001000000047497451305389404296875 : max(_664, 0.001000000047497451305389404296875)));
                        precise float _778 = _683 * _777;
                        precise float _779 = (-0.0) - _708;
                        precise float _784 = dot(vec2(_710, _779), vec2(_690, _692)) / _772;
                        precise float _785 = (-0.0) - _784;
                        float _788 = fract(abs(_784));
                        precise float _789 = (-0.0) - _788;
                        precise float _791 = _772 * ((_784 >= _785) ? _788 : _789);
                        precise float _792 = _791 * 6.283184051513671875;
                        precise float _793 = _792 / _772;
                        precise float _795 = (isnan(5.0) ? _664 : (isnan(_664) ? 5.0 : min(_664, 5.0))) * sin(_793);
                        precise float _796 = _752 + _795;
                        precise float _797 = _664 * 0.25;
                        precise float _799 = _352 * _683;
                        precise float _800 = _799 - _797;
                        precise float _801 = _800 - _796;
                        precise float _802 = _683 * _775;
                        precise float _804 = _801 / (isnan(0.001000000047497451305389404296875) ? _802 : (isnan(_802) ? 0.001000000047497451305389404296875 : max(_802, 0.001000000047497451305389404296875)));
                        float _805 = fract(_804);
                        precise float _807 = 1.0 - _805;
                        float _808 = (_804 < 0.0) ? _807 : _805;
                        precise float _809 = _774 / _775;
                        precise float _810 = _684 / _775;
                        float _831;
                        if (_808 < _810)
                        {
                            precise float _829 = _808 / _810;
                            _831 = _829;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_808 < _809)
                            {
                                precise float _841 = _808 - _810;
                                precise float _842 = _809 - _810;
                                precise float _843 = _841 / _842;
                                precise float _832 = 1.0 - _843;
                                frontier_phi_14_13_ladder = _832;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _831 = frontier_phi_14_13_ladder;
                        }
                        precise float _833 = _666 * _831;
                        precise float _834 = _777 * _752;
                        precise float _835 = _352 * _778;
                        precise float _836 = _835 - _834;
                        precise float _838 = _665 + sin(_836);
                        precise float _840 = _833 * abs(_838);
                        precise float _813 = _840 + 0.0;
                        _812 = _813;
                    }
                    else
                    {
                        _812 = 0.0;
                    }
                    precise float _814 = _615 + _761;
                    precise float _815 = _814 + _812;
                    precise float _816 = _708 * _815;
                    precise float _817 = _709 * _815;
                    precise float _818 = _710 * _815;
                    precise float _819 = _763 * _769;
                    precise float _820 = _766 * _769;
                    precise float _821 = _767 * _769;
                    precise float _822 = _819 + _816;
                    precise float _823 = _820 + _817;
                    precise float _824 = _821 + _818;
                    precise float _825 = _741 * _822;
                    precise float _826 = _741 * _823;
                    precise float _827 = _741 * _824;
                    precise float _717 = _825 * 0.0500000007450580596923828125;
                    precise float _719 = _826 * 0.0500000007450580596923828125;
                    precise float _721 = _827 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _717;
                    frontier_phi_5_pred_7_ladder_1 = _719;
                    frontier_phi_5_pred_7_ladder_2 = _721;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _716 = frontier_phi_5_pred;
            _718 = frontier_phi_5_pred_1;
            _720 = frontier_phi_5_pred_2;
            _354 = _574 + _716;
            _356 = _575 + _718;
            _358 = _576 + _720;
            uint _580 = _579 + 1u;
            if (_580 == _215)
            {
                break;
            }
            else
            {
                _574 = _354;
                _575 = _356;
                _576 = _358;
                _577 = (_579 != 3u) ? (_577 >> 8u) : _213;
                _579 = _580;
                continue;
            }
        }
        _353 = _354;
        _355 = _356;
        _357 = _358;
    }
    precise float _359 = _353 * _353;
    precise float _360 = _355 * _355;
    precise float _361 = _359 + _360;
    precise float _362 = _357 * _357;
    precise float _363 = _361 + _362;
    float _364 = sqrt(_363);
    bool _365 = _364 < 0.00011000000085914507508277893066406;
    float _370 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].x, cbInstanceData._m0[_199].x, cbInstanceData._m0[_203].x), vec3(cbInstanceData._m0[_194].x, cbInstanceData._m0[_199].x, cbInstanceData._m0[_203].x)));
    precise float _371 = cbInstanceData._m0[_194].x * _370;
    precise float _372 = cbInstanceData._m0[_199].x * _370;
    precise float _373 = cbInstanceData._m0[_203].x * _370;
    float _377 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].y, cbInstanceData._m0[_199].y, cbInstanceData._m0[_203].y), vec3(cbInstanceData._m0[_194].y, cbInstanceData._m0[_199].y, cbInstanceData._m0[_203].y)));
    precise float _378 = cbInstanceData._m0[_194].y * _377;
    precise float _379 = cbInstanceData._m0[_199].y * _377;
    precise float _380 = cbInstanceData._m0[_203].y * _377;
    float _384 = inversesqrt(dot(vec3(cbInstanceData._m0[_194].z, cbInstanceData._m0[_199].z, cbInstanceData._m0[_203].z), vec3(cbInstanceData._m0[_194].z, cbInstanceData._m0[_199].z, cbInstanceData._m0[_203].z)));
    precise float _385 = cbInstanceData._m0[_194].z * _384;
    precise float _386 = cbInstanceData._m0[_199].z * _384;
    precise float _387 = cbInstanceData._m0[_203].z * _384;
    precise float _388 = _371 * 0.0;
    precise float _389 = 1.0 * _378;
    precise float _390 = _389 + _388;
    precise float _391 = 0.0 * _385;
    precise float _392 = _391 + _390;
    precise float _393 = _372 * 0.0;
    precise float _394 = 1.0 * _379;
    precise float _395 = _394 + _393;
    precise float _396 = 0.0 * _386;
    precise float _397 = _396 + _395;
    precise float _398 = _373 * 0.0;
    precise float _399 = 1.0 * _380;
    precise float _400 = _399 + _398;
    precise float _401 = 0.0 * _387;
    precise float _402 = _401 + _400;
    float _406 = inversesqrt(dot(vec3(_353, _355, _357), vec3(_353, _355, _357)));
    precise float _407 = _353 * _406;
    precise float _408 = _355 * _406;
    precise float _409 = _357 * _406;
    precise float _410 = _397 * _409;
    precise float _411 = _402 * _408;
    precise float _412 = _410 - _411;
    precise float _413 = _402 * _407;
    precise float _414 = _392 * _409;
    precise float _415 = _413 - _414;
    precise float _416 = _392 * _408;
    precise float _417 = _397 * _407;
    precise float _418 = _416 - _417;
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    precise float _423 = _422 * _412;
    precise float _424 = _422 * _415;
    precise float _425 = _422 * _418;
    precise float _426 = _364 + 1.0;
    precise float _428 = cbMtdParam._m0[10u].y * log2(_426);
    precise float _429 = _266 - _337;
    precise float _430 = _273 - _344;
    precise float _431 = _280 - _351;
    precise float _432 = dot(vec3(_423, _424, _425), vec3(_429, _430, _431));
    precise float _435 = _423 * _432;
    precise float _436 = _424 * _432;
    precise float _437 = _425 * _432;
    precise float _438 = _337 + _435;
    precise float _439 = _344 + _436;
    precise float _440 = _351 + _437;
    precise float _441 = _266 - _438;
    precise float _442 = _273 - _439;
    precise float _443 = _280 - _440;
    precise float _444 = _424 * _443;
    precise float _445 = _425 * _442;
    precise float _446 = _444 - _445;
    precise float _447 = _425 * _441;
    precise float _448 = _423 * _443;
    precise float _449 = _447 - _448;
    precise float _450 = _423 * _442;
    precise float _451 = _424 * _441;
    precise float _452 = _450 - _451;
    float _453 = sin(_428);
    float _454 = cos(_428);
    precise float _455 = _441 * _454;
    precise float _456 = _442 * _454;
    precise float _457 = _443 * _454;
    precise float _458 = _453 * _446;
    precise float _459 = _453 * _449;
    precise float _460 = _453 * _452;
    precise float _461 = _455 + _458;
    precise float _462 = _456 + _459;
    precise float _463 = _460 + _457;
    precise float _464 = _438 + _461;
    precise float _465 = _439 + _462;
    precise float _466 = _440 + _463;
    precise float _467 = _464 - _266;
    precise float _468 = _465 - _273;
    precise float _469 = _466 - _280;
    precise float _473 = _266 + (_365 ? 0.0 : _467);
    precise float _474 = _273 + (_365 ? 0.0 : _468);
    precise float _475 = _280 + (_365 ? 0.0 : _469);
    precise float _476 = _473 - cbSceneParam._m0[3u].x;
    precise float _477 = _474 - cbSceneParam._m0[3u].y;
    precise float _478 = _475 - cbSceneParam._m0[3u].z;
    precise float _506 = _476 * cbSceneParam._m0[24u].x;
    precise float _507 = _477 * cbSceneParam._m0[24u].y;
    precise float _508 = _507 + _506;
    precise float _509 = _478 * cbSceneParam._m0[24u].z;
    precise float _510 = _509 + _508;
    precise float _511 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _512 = _511 + _510;
    precise float _513 = _476 * cbSceneParam._m0[25u].x;
    precise float _514 = _477 * cbSceneParam._m0[25u].y;
    precise float _515 = _514 + _513;
    precise float _516 = _478 * cbSceneParam._m0[25u].z;
    precise float _517 = _516 + _515;
    precise float _518 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _519 = _518 + _517;
    precise float _520 = _476 * cbSceneParam._m0[26u].x;
    precise float _521 = _477 * cbSceneParam._m0[26u].y;
    precise float _522 = _521 + _520;
    precise float _523 = _478 * cbSceneParam._m0[26u].z;
    precise float _524 = _523 + _522;
    precise float _525 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _526 = _525 + _524;
    precise float _527 = _476 * cbSceneParam._m0[27u].x;
    precise float _528 = _477 * cbSceneParam._m0[27u].y;
    precise float _529 = _528 + _527;
    precise float _530 = _478 * cbSceneParam._m0[27u].z;
    precise float _531 = _530 + _529;
    precise float _532 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _533 = _532 + _531;
    gl_Position.x = _512;
    gl_Position.y = _519;
    gl_Position.z = _526;
    gl_Position.w = _533;
    NORMAL_1.x = fma(_176, cbObjMatrix._m0[_238].z, fma(_175, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_238].x * _173));
    NORMAL_1.y = fma(_176, cbObjMatrix._m0[_245].z, fma(_175, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _173));
    NORMAL_1.z = fma(_176, cbObjMatrix._m0[_252].z, fma(_175, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_252].x * _173));
    NORMAL_1.w = float(_229);
    TANGENT_1.x = fma(_188, cbObjMatrix._m0[_238].z, fma(_187, cbObjMatrix._m0[_238].y, cbObjMatrix._m0[_238].x * _186));
    TANGENT_1.y = fma(_188, cbObjMatrix._m0[_245].z, fma(_187, cbObjMatrix._m0[_245].y, cbObjMatrix._m0[_245].x * _186));
    TANGENT_1.z = fma(_188, cbObjMatrix._m0[_252].z, fma(_187, cbObjMatrix._m0[_252].y, cbObjMatrix._m0[_252].x * _186));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _526;
    TEXCOORD_7.y = _533;
    TEXCOORD_11 = sqrt(((_286 * _286) + (_287 * _287)) + (_288 * _288));
    gl_ClipDistance[0u] = dot(vec4(_512, _519, _526, _533), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_512, _519, _526, _533), vec4(cbInstanceData._m0[_231 + 3u]));
}


