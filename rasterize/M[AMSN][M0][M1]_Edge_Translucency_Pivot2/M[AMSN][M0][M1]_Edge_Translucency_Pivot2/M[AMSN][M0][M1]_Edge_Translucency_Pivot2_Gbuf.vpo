#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _636;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _168 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _183 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _189 = _81 * 13u;
    uint _194 = _189 + 1u;
    uint _198 = _189 + 2u;
    uvec4 _206 = floatBitsToUint(cbInstanceData._m0[_189 + 7u]);
    uint _208 = _206.w;
    uint _210 = min(_206.y, 8u);
    precise float _214 = POSITION.x + 0.0;
    precise float _215 = POSITION.y + 0.0;
    precise float _216 = POSITION.z + 0.0;
    uint _221 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _223 = texelFetch(g_InstanceIndexBuffer, int(_221));
    uint _224 = _223.x;
    uint _226 = _224 * 13u;
    uint _233 = (floatBitsToUint(cbInstanceData._m0[_226 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _240 = _233 + 1u;
    uint _247 = _233 + 2u;
    precise float _254 = _214 * cbObjMatrix._m0[_233].x;
    precise float _255 = _215 * cbObjMatrix._m0[_233].y;
    precise float _256 = _255 + _254;
    precise float _257 = _216 * cbObjMatrix._m0[_233].z;
    precise float _258 = _257 + _256;
    precise float _259 = 1.0 * cbObjMatrix._m0[_233].w;
    precise float _261 = _259 + _258;
    precise float _262 = _214 * cbObjMatrix._m0[_240].x;
    precise float _263 = _215 * cbObjMatrix._m0[_240].y;
    precise float _264 = _263 + _262;
    precise float _265 = _216 * cbObjMatrix._m0[_240].z;
    precise float _266 = _265 + _264;
    precise float _267 = 1.0 * cbObjMatrix._m0[_240].w;
    precise float _268 = _267 + _266;
    precise float _269 = _214 * cbObjMatrix._m0[_247].x;
    precise float _270 = _215 * cbObjMatrix._m0[_247].y;
    precise float _271 = _270 + _269;
    precise float _272 = _216 * cbObjMatrix._m0[_247].z;
    precise float _273 = _272 + _271;
    precise float _274 = 1.0 * cbObjMatrix._m0[_247].w;
    precise float _275 = _274 + _273;
    float _281 = cbSceneParam._m0[3u].x - _261;
    float _282 = cbSceneParam._m0[3u].y - _268;
    float _283 = cbSceneParam._m0[3u].z - _275;
    precise float _310 = _261 * _261;
    precise float _311 = _268 * _268;
    precise float _312 = _310 + _311;
    precise float _313 = _275 * _275;
    precise float _314 = _312 + _313;
    precise float _316 = cbMtdParam._m0[10u].z * sqrt(_314);
    precise float _326 = cbInstanceData._m0[_189].x * 0.0;
    precise float _327 = 0.0 * cbInstanceData._m0[_189].y;
    precise float _328 = _327 + _326;
    precise float _329 = 0.0 * cbInstanceData._m0[_189].z;
    precise float _330 = _329 + _328;
    precise float _331 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _332 = _331 + _330;
    precise float _333 = cbInstanceData._m0[_194].x * 0.0;
    precise float _334 = 0.0 * cbInstanceData._m0[_194].y;
    precise float _335 = _334 + _333;
    precise float _336 = 0.0 * cbInstanceData._m0[_194].z;
    precise float _337 = _336 + _335;
    precise float _338 = 1.0 * cbInstanceData._m0[_194].w;
    precise float _339 = _338 + _337;
    precise float _340 = cbInstanceData._m0[_198].x * 0.0;
    precise float _341 = 0.0 * cbInstanceData._m0[_198].y;
    precise float _342 = _341 + _340;
    precise float _343 = 0.0 * cbInstanceData._m0[_198].z;
    precise float _344 = _343 + _342;
    precise float _345 = 1.0 * cbInstanceData._m0[_198].w;
    precise float _346 = _345 + _344;
    precise float _347 = cbPerFrame._m0[22u].x + _316;
    float _348;
    float _350;
    float _352;
    if (_210 == 0u)
    {
        _348 = 0.0;
        _350 = 0.0;
        _352 = 0.0;
    }
    else
    {
        uint _566 = _206.z;
        precise float _349;
        precise float _351;
        precise float _353;
        float _709;
        float _711;
        float _713;
        float _567 = 0.0;
        float _568 = 0.0;
        float _569 = 0.0;
        uint _570 = _566;
        uint _572 = 0u;
        float _608;
        float _627;
        vec4 _641;
        float _642;
        float _643;
        float _657;
        float _658;
        float _659;
        float _676;
        float _677;
        float _678;
        float _679;
        bool _680;
        bool _681;
        bool _682;
        precise float _683;
        precise float _684;
        precise float _685;
        float _686;
        float _687;
        float _688;
        precise float _689;
        bool _692;
        for (;;)
        {
            uint _574 = _570 & 255u;
            uint _576 = _574 * 24u;
            uvec3 _586 = uvec3(texelFetch(g_forceParam, int(_576)).x, texelFetch(g_forceParam, int(_576 + 1u)).x, texelFetch(g_forceParam, int(_576 + 2u)).x);
            uint _591 = (_574 * 24u) + 4u;
            vec4 _604 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_591)).x, texelFetch(g_forceParam, int(_591 + 1u)).x, texelFetch(g_forceParam, int(_591 + 2u)).x, texelFetch(g_forceParam, int(_591 + 3u)).x));
            _608 = _604.w;
            uint _610 = (_574 * 24u) + 8u;
            vec4 _623 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_610)).x, texelFetch(g_forceParam, int(_610 + 1u)).x, texelFetch(g_forceParam, int(_610 + 2u)).x, texelFetch(g_forceParam, int(_610 + 3u)).x));
            _627 = _623.w;
            uint _630 = (_574 * 24u) + 12u;
            _641 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_630)).x, texelFetch(g_forceParam, int(_630 + 1u)).x, _636, texelFetch(g_forceParam, int(_630 + 3u)).x));
            _642 = _641.x;
            _643 = _641.w;
            uint _646 = (_574 * 24u) + 16u;
            vec3 _656 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_646)).x, texelFetch(g_forceParam, int(_646 + 1u)).x, texelFetch(g_forceParam, int(_646 + 2u)).x));
            _657 = _656.x;
            _658 = _656.y;
            _659 = _656.z;
            uint _662 = (_574 * 24u) + 20u;
            vec4 _675 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_662)).x, texelFetch(g_forceParam, int(_662 + 1u)).x, texelFetch(g_forceParam, int(_662 + 2u)).x, texelFetch(g_forceParam, int(_662 + 3u)).x));
            _676 = _675.x;
            _677 = _675.y;
            _678 = _675.z;
            _679 = _675.w;
            _680 = _586.x == 1u;
            _681 = _586.y == 1u;
            _682 = _586.z == 1u;
            _683 = _332 - _604.x;
            _684 = _339 - _604.y;
            _685 = _346 - _604.z;
            _686 = _680 ? _623.x : _683;
            _687 = _680 ? _623.y : _684;
            _688 = _680 ? _623.z : _685;
            _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
            _692 = _689 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_692)
            {
                precise float _694 = _683 * _683;
                precise float _695 = _684 * _684;
                precise float _696 = _694 + _695;
                precise float _697 = _685 * _685;
                precise float _698 = _697 + _696;
                float _699 = sqrt(_698);
                float _700 = inversesqrt(_689);
                precise float _701 = _686 * _700;
                precise float _702 = _687 * _700;
                precise float _703 = _688 * _700;
                precise float _706 = _699 / (isnan(0.001000000047497451305389404296875) ? _641.y : (isnan(_641.y) ? 0.001000000047497451305389404296875 : max(_641.y, 0.001000000047497451305389404296875)));
                precise float _707 = 1.0 - _706;
                float _871 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
                float _708 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
                float _734;
                if (_682)
                {
                    float _721 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
                    precise float _722 = _683 * _721;
                    precise float _723 = _684 * _721;
                    precise float _724 = _685 * _721;
                    precise float _728 = dot(vec3(_701, _702, _703), vec3(_722, _723, _724)) * 0.800000011920928955078125;
                    precise float _730 = _728 + 0.20000000298023223876953125;
                    float _882 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
                    precise float _733 = _708 * (isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0)));
                    _734 = _733;
                }
                else
                {
                    _734 = _708;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_734 > 0.0)
                {
                    bool _737 = _680 && (!_682);
                    precise float _739 = _699 * (-4.0);
                    precise float _743 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _642 : (isnan(_642) ? 0.001000000047497451305389404296875 : max(_642, 0.001000000047497451305389404296875)));
                    precise float _745 = dot(vec2(_701, _703), vec2(_683, _685));
                    precise float _749 = _743 * _745;
                    precise float _750 = float(_737) * _749;
                    precise float _751 = _347 * _743;
                    precise float _752 = _751 - _750;
                    precise float _753 = (_737 ? 0.0 : _739) + _752;
                    precise float _755 = _627 * sin(_753);
                    precise float _756 = _702 * 0.0;
                    precise float _757 = _756 - _703;
                    precise float _758 = _703 * 0.0;
                    precise float _759 = _701 * 0.0;
                    precise float _760 = _758 - _759;
                    precise float _761 = _701 - _756;
                    precise float _762 = _643 * _755;
                    float _763 = _680 ? _762 : 0.0;
                    float _806;
                    if (_681)
                    {
                        precise float _766 = _657 * 2.0;
                        precise float _768 = _677 + _678;
                        precise float _769 = _679 + _768;
                        precise float _771 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _657 : (isnan(_657) ? 0.001000000047497451305389404296875 : max(_657, 0.001000000047497451305389404296875)));
                        precise float _772 = _676 * _771;
                        precise float _773 = (-0.0) - _701;
                        precise float _778 = dot(vec2(_703, _773), vec2(_683, _685)) / _766;
                        precise float _779 = (-0.0) - _778;
                        float _782 = fract(abs(_778));
                        precise float _783 = (-0.0) - _782;
                        precise float _785 = _766 * ((_778 >= _779) ? _782 : _783);
                        precise float _786 = _785 * 6.283184051513671875;
                        precise float _787 = _786 / _766;
                        precise float _789 = (isnan(5.0) ? _657 : (isnan(_657) ? 5.0 : min(_657, 5.0))) * sin(_787);
                        precise float _790 = _745 + _789;
                        precise float _791 = _657 * 0.25;
                        precise float _793 = _347 * _676;
                        precise float _794 = _793 - _791;
                        precise float _795 = _794 - _790;
                        precise float _796 = _676 * _769;
                        precise float _798 = _795 / (isnan(0.001000000047497451305389404296875) ? _796 : (isnan(_796) ? 0.001000000047497451305389404296875 : max(_796, 0.001000000047497451305389404296875)));
                        float _799 = fract(_798);
                        precise float _801 = 1.0 - _799;
                        float _802 = (_798 < 0.0) ? _801 : _799;
                        precise float _803 = _768 / _769;
                        precise float _804 = _677 / _769;
                        float _825;
                        if (_802 < _804)
                        {
                            precise float _823 = _802 / _804;
                            _825 = _823;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_802 < _803)
                            {
                                precise float _835 = _802 - _804;
                                precise float _836 = _803 - _804;
                                precise float _837 = _835 / _836;
                                precise float _826 = 1.0 - _837;
                                frontier_phi_14_13_ladder = _826;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _825 = frontier_phi_14_13_ladder;
                        }
                        precise float _827 = _659 * _825;
                        precise float _828 = _771 * _745;
                        precise float _829 = _347 * _772;
                        precise float _830 = _829 - _828;
                        precise float _832 = _658 + sin(_830);
                        precise float _834 = _827 * abs(_832);
                        precise float _807 = _834 + 0.0;
                        _806 = _807;
                    }
                    else
                    {
                        _806 = 0.0;
                    }
                    precise float _808 = _608 + _755;
                    precise float _809 = _808 + _806;
                    precise float _810 = _701 * _809;
                    precise float _811 = _702 * _809;
                    precise float _812 = _703 * _809;
                    precise float _813 = _757 * _763;
                    precise float _814 = _760 * _763;
                    precise float _815 = _761 * _763;
                    precise float _816 = _813 + _810;
                    precise float _817 = _814 + _811;
                    precise float _818 = _815 + _812;
                    precise float _819 = _734 * _816;
                    precise float _820 = _734 * _817;
                    precise float _821 = _734 * _818;
                    precise float _710 = _819 * 0.0500000007450580596923828125;
                    precise float _712 = _820 * 0.0500000007450580596923828125;
                    precise float _714 = _821 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _710;
                    frontier_phi_5_pred_7_ladder_1 = _712;
                    frontier_phi_5_pred_7_ladder_2 = _714;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _709 = frontier_phi_5_pred;
            _711 = frontier_phi_5_pred_1;
            _713 = frontier_phi_5_pred_2;
            _349 = _567 + _709;
            _351 = _568 + _711;
            _353 = _569 + _713;
            uint _573 = _572 + 1u;
            if (_573 == _210)
            {
                break;
            }
            else
            {
                _567 = _349;
                _568 = _351;
                _569 = _353;
                _570 = (_572 != 3u) ? (_570 >> 8u) : _208;
                _572 = _573;
                continue;
            }
        }
        _348 = _349;
        _350 = _351;
        _352 = _353;
    }
    precise float _354 = _348 * _348;
    precise float _355 = _350 * _350;
    precise float _356 = _354 + _355;
    precise float _357 = _352 * _352;
    precise float _358 = _356 + _357;
    float _359 = sqrt(_358);
    bool _360 = _359 < 0.00011000000085914507508277893066406;
    float _365 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_194].x, cbInstanceData._m0[_198].x), vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_194].x, cbInstanceData._m0[_198].x)));
    precise float _366 = cbInstanceData._m0[_189].x * _365;
    precise float _367 = cbInstanceData._m0[_194].x * _365;
    precise float _368 = cbInstanceData._m0[_198].x * _365;
    float _372 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_194].y, cbInstanceData._m0[_198].y), vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_194].y, cbInstanceData._m0[_198].y)));
    precise float _373 = cbInstanceData._m0[_189].y * _372;
    precise float _374 = cbInstanceData._m0[_194].y * _372;
    precise float _375 = cbInstanceData._m0[_198].y * _372;
    float _379 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_194].z, cbInstanceData._m0[_198].z), vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_194].z, cbInstanceData._m0[_198].z)));
    precise float _380 = cbInstanceData._m0[_189].z * _379;
    precise float _381 = cbInstanceData._m0[_194].z * _379;
    precise float _382 = cbInstanceData._m0[_198].z * _379;
    precise float _383 = _366 * 0.0;
    precise float _384 = 1.0 * _373;
    precise float _385 = _384 + _383;
    precise float _386 = 0.0 * _380;
    precise float _387 = _386 + _385;
    precise float _388 = _367 * 0.0;
    precise float _389 = 1.0 * _374;
    precise float _390 = _389 + _388;
    precise float _391 = 0.0 * _381;
    precise float _392 = _391 + _390;
    precise float _393 = _368 * 0.0;
    precise float _394 = 1.0 * _375;
    precise float _395 = _394 + _393;
    precise float _396 = 0.0 * _382;
    precise float _397 = _396 + _395;
    float _401 = inversesqrt(dot(vec3(_348, _350, _352), vec3(_348, _350, _352)));
    precise float _402 = _348 * _401;
    precise float _403 = _350 * _401;
    precise float _404 = _352 * _401;
    precise float _405 = _392 * _404;
    precise float _406 = _397 * _403;
    precise float _407 = _405 - _406;
    precise float _408 = _397 * _402;
    precise float _409 = _387 * _404;
    precise float _410 = _408 - _409;
    precise float _411 = _387 * _403;
    precise float _412 = _392 * _402;
    precise float _413 = _411 - _412;
    float _417 = inversesqrt(dot(vec3(_407, _410, _413), vec3(_407, _410, _413)));
    precise float _418 = _417 * _407;
    precise float _419 = _417 * _410;
    precise float _420 = _417 * _413;
    precise float _421 = _359 + 1.0;
    precise float _423 = cbMtdParam._m0[10u].y * log2(_421);
    precise float _424 = _261 - _332;
    precise float _425 = _268 - _339;
    precise float _426 = _275 - _346;
    precise float _427 = dot(vec3(_418, _419, _420), vec3(_424, _425, _426));
    precise float _430 = _418 * _427;
    precise float _431 = _419 * _427;
    precise float _432 = _420 * _427;
    precise float _433 = _332 + _430;
    precise float _434 = _339 + _431;
    precise float _435 = _346 + _432;
    precise float _436 = _261 - _433;
    precise float _437 = _268 - _434;
    precise float _438 = _275 - _435;
    precise float _439 = _419 * _438;
    precise float _440 = _420 * _437;
    precise float _441 = _439 - _440;
    precise float _442 = _420 * _436;
    precise float _443 = _418 * _438;
    precise float _444 = _442 - _443;
    precise float _445 = _418 * _437;
    precise float _446 = _419 * _436;
    precise float _447 = _445 - _446;
    float _448 = sin(_423);
    float _449 = cos(_423);
    precise float _450 = _436 * _449;
    precise float _451 = _437 * _449;
    precise float _452 = _438 * _449;
    precise float _453 = _448 * _441;
    precise float _454 = _448 * _444;
    precise float _455 = _448 * _447;
    precise float _456 = _450 + _453;
    precise float _457 = _451 + _454;
    precise float _458 = _455 + _452;
    precise float _459 = _433 + _456;
    precise float _460 = _434 + _457;
    precise float _461 = _435 + _458;
    precise float _462 = _459 - _261;
    precise float _463 = _460 - _268;
    precise float _464 = _461 - _275;
    precise float _468 = _261 + (_360 ? 0.0 : _462);
    precise float _469 = _268 + (_360 ? 0.0 : _463);
    precise float _470 = _275 + (_360 ? 0.0 : _464);
    precise float _471 = _468 - cbSceneParam._m0[3u].x;
    precise float _472 = _469 - cbSceneParam._m0[3u].y;
    precise float _473 = _470 - cbSceneParam._m0[3u].z;
    precise float _501 = _471 * cbSceneParam._m0[24u].x;
    precise float _502 = _472 * cbSceneParam._m0[24u].y;
    precise float _503 = _502 + _501;
    precise float _504 = _473 * cbSceneParam._m0[24u].z;
    precise float _505 = _504 + _503;
    precise float _506 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _507 = _506 + _505;
    precise float _508 = _471 * cbSceneParam._m0[25u].x;
    precise float _509 = _472 * cbSceneParam._m0[25u].y;
    precise float _510 = _509 + _508;
    precise float _511 = _473 * cbSceneParam._m0[25u].z;
    precise float _512 = _511 + _510;
    precise float _513 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _514 = _513 + _512;
    precise float _515 = _471 * cbSceneParam._m0[26u].x;
    precise float _516 = _472 * cbSceneParam._m0[26u].y;
    precise float _517 = _516 + _515;
    precise float _518 = _473 * cbSceneParam._m0[26u].z;
    precise float _519 = _518 + _517;
    precise float _520 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _521 = _520 + _519;
    precise float _522 = _471 * cbSceneParam._m0[27u].x;
    precise float _523 = _472 * cbSceneParam._m0[27u].y;
    precise float _524 = _523 + _522;
    precise float _525 = _473 * cbSceneParam._m0[27u].z;
    precise float _526 = _525 + _524;
    precise float _527 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _528 = _527 + _526;
    gl_Position.x = _507;
    gl_Position.y = _514;
    gl_Position.z = _521;
    gl_Position.w = _528;
    NORMAL_1.x = fma(_171, cbObjMatrix._m0[_233].z, fma(_170, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _168));
    NORMAL_1.y = fma(_171, cbObjMatrix._m0[_240].z, fma(_170, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _168));
    NORMAL_1.z = fma(_171, cbObjMatrix._m0[_247].z, fma(_170, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _168));
    NORMAL_1.w = float(_224);
    TANGENT_1.x = fma(_183, cbObjMatrix._m0[_233].z, fma(_182, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _181));
    TANGENT_1.y = fma(_183, cbObjMatrix._m0[_240].z, fma(_182, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _181));
    TANGENT_1.z = fma(_183, cbObjMatrix._m0[_247].z, fma(_182, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _181));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283));
    gl_ClipDistance[0u] = dot(vec4(_507, _514, _521, _528), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_507, _514, _521, _528), vec4(cbInstanceData._m0[_226 + 3u]));
}


