#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _485;

void main()
{
    uint _65 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _94 = _65 * 13u;
    uint _99 = _94 + 1u;
    uint _103 = _94 + 2u;
    uvec4 _111 = floatBitsToUint(cbInstanceData._m0[_94 + 7u]);
    uint _113 = _111.w;
    uint _115 = min(_111.y, 8u);
    precise float _119 = POSITION.x + 0.0;
    precise float _120 = POSITION.y + 0.0;
    precise float _121 = POSITION.z + 0.0;
    uint _126 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _65;
    uint _139 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_126)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _146 = _139 + 1u;
    uint _153 = _139 + 2u;
    precise float _160 = _119 * cbObjMatrix._m0[_139].x;
    precise float _161 = _120 * cbObjMatrix._m0[_139].y;
    precise float _162 = _161 + _160;
    precise float _163 = _121 * cbObjMatrix._m0[_139].z;
    precise float _164 = _163 + _162;
    precise float _165 = 1.0 * cbObjMatrix._m0[_139].w;
    precise float _167 = _165 + _164;
    precise float _168 = _119 * cbObjMatrix._m0[_146].x;
    precise float _169 = _120 * cbObjMatrix._m0[_146].y;
    precise float _170 = _169 + _168;
    precise float _171 = _121 * cbObjMatrix._m0[_146].z;
    precise float _172 = _171 + _170;
    precise float _173 = 1.0 * cbObjMatrix._m0[_146].w;
    precise float _174 = _173 + _172;
    precise float _175 = _119 * cbObjMatrix._m0[_153].x;
    precise float _176 = _120 * cbObjMatrix._m0[_153].y;
    precise float _177 = _176 + _175;
    precise float _178 = _121 * cbObjMatrix._m0[_153].z;
    precise float _179 = _178 + _177;
    precise float _180 = 1.0 * cbObjMatrix._m0[_153].w;
    precise float _181 = _180 + _179;
    precise float _183 = _167 * _167;
    precise float _184 = _174 * _174;
    precise float _185 = _183 + _184;
    precise float _186 = _181 * _181;
    precise float _187 = _185 + _186;
    precise float _189 = cbMtdParam._m0[10u].z * sqrt(_187);
    precise float _199 = cbInstanceData._m0[_94].x * 0.0;
    precise float _200 = 0.0 * cbInstanceData._m0[_94].y;
    precise float _201 = _200 + _199;
    precise float _202 = 0.0 * cbInstanceData._m0[_94].z;
    precise float _203 = _202 + _201;
    precise float _204 = 1.0 * cbInstanceData._m0[_94].w;
    precise float _205 = _204 + _203;
    precise float _206 = cbInstanceData._m0[_99].x * 0.0;
    precise float _207 = 0.0 * cbInstanceData._m0[_99].y;
    precise float _208 = _207 + _206;
    precise float _209 = 0.0 * cbInstanceData._m0[_99].z;
    precise float _210 = _209 + _208;
    precise float _211 = 1.0 * cbInstanceData._m0[_99].w;
    precise float _212 = _211 + _210;
    precise float _213 = cbInstanceData._m0[_103].x * 0.0;
    precise float _214 = 0.0 * cbInstanceData._m0[_103].y;
    precise float _215 = _214 + _213;
    precise float _216 = 0.0 * cbInstanceData._m0[_103].z;
    precise float _217 = _216 + _215;
    precise float _218 = 1.0 * cbInstanceData._m0[_103].w;
    precise float _219 = _218 + _217;
    precise float _220 = cbPerFrame._m0[22u].x + _189;
    float _221;
    float _223;
    float _225;
    if (_115 == 0u)
    {
        _221 = 0.0;
        _223 = 0.0;
        _225 = 0.0;
    }
    else
    {
        uint _415 = _111.z;
        precise float _222;
        precise float _224;
        precise float _226;
        float _558;
        float _560;
        float _562;
        float _416 = 0.0;
        float _417 = 0.0;
        float _418 = 0.0;
        uint _419 = _415;
        uint _421 = 0u;
        float _457;
        float _476;
        vec4 _490;
        float _491;
        float _492;
        float _506;
        float _507;
        float _508;
        float _525;
        float _526;
        float _527;
        float _528;
        bool _529;
        bool _530;
        bool _531;
        precise float _532;
        precise float _533;
        precise float _534;
        float _535;
        float _536;
        float _537;
        precise float _538;
        bool _541;
        for (;;)
        {
            uint _423 = _419 & 255u;
            uint _425 = _423 * 24u;
            uvec3 _435 = uvec3(texelFetch(g_forceParam, int(_425)).x, texelFetch(g_forceParam, int(_425 + 1u)).x, texelFetch(g_forceParam, int(_425 + 2u)).x);
            uint _440 = (_423 * 24u) + 4u;
            vec4 _453 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_440)).x, texelFetch(g_forceParam, int(_440 + 1u)).x, texelFetch(g_forceParam, int(_440 + 2u)).x, texelFetch(g_forceParam, int(_440 + 3u)).x));
            _457 = _453.w;
            uint _459 = (_423 * 24u) + 8u;
            vec4 _472 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_459)).x, texelFetch(g_forceParam, int(_459 + 1u)).x, texelFetch(g_forceParam, int(_459 + 2u)).x, texelFetch(g_forceParam, int(_459 + 3u)).x));
            _476 = _472.w;
            uint _479 = (_423 * 24u) + 12u;
            _490 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_479)).x, texelFetch(g_forceParam, int(_479 + 1u)).x, _485, texelFetch(g_forceParam, int(_479 + 3u)).x));
            _491 = _490.x;
            _492 = _490.w;
            uint _495 = (_423 * 24u) + 16u;
            vec3 _505 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_495)).x, texelFetch(g_forceParam, int(_495 + 1u)).x, texelFetch(g_forceParam, int(_495 + 2u)).x));
            _506 = _505.x;
            _507 = _505.y;
            _508 = _505.z;
            uint _511 = (_423 * 24u) + 20u;
            vec4 _524 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_511)).x, texelFetch(g_forceParam, int(_511 + 1u)).x, texelFetch(g_forceParam, int(_511 + 2u)).x, texelFetch(g_forceParam, int(_511 + 3u)).x));
            _525 = _524.x;
            _526 = _524.y;
            _527 = _524.z;
            _528 = _524.w;
            _529 = _435.x == 1u;
            _530 = _435.y == 1u;
            _531 = _435.z == 1u;
            _532 = _205 - _453.x;
            _533 = _212 - _453.y;
            _534 = _219 - _453.z;
            _535 = _529 ? _472.x : _532;
            _536 = _529 ? _472.y : _533;
            _537 = _529 ? _472.z : _534;
            _538 = dot(vec3(_535, _536, _537), vec3(_535, _536, _537));
            _541 = _538 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_541)
            {
                precise float _543 = _532 * _532;
                precise float _544 = _533 * _533;
                precise float _545 = _543 + _544;
                precise float _546 = _534 * _534;
                precise float _547 = _546 + _545;
                float _548 = sqrt(_547);
                float _549 = inversesqrt(_538);
                precise float _550 = _535 * _549;
                precise float _551 = _536 * _549;
                precise float _552 = _537 * _549;
                precise float _555 = _548 / (isnan(0.001000000047497451305389404296875) ? _490.y : (isnan(_490.y) ? 0.001000000047497451305389404296875 : max(_490.y, 0.001000000047497451305389404296875)));
                precise float _556 = 1.0 - _555;
                float _720 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
                float _557 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
                float _583;
                if (_531)
                {
                    float _570 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
                    precise float _571 = _532 * _570;
                    precise float _572 = _533 * _570;
                    precise float _573 = _534 * _570;
                    precise float _577 = dot(vec3(_550, _551, _552), vec3(_571, _572, _573)) * 0.800000011920928955078125;
                    precise float _579 = _577 + 0.20000000298023223876953125;
                    float _731 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
                    precise float _582 = _557 * (isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0)));
                    _583 = _582;
                }
                else
                {
                    _583 = _557;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_583 > 0.0)
                {
                    bool _586 = _529 && (!_531);
                    precise float _588 = _548 * (-4.0);
                    precise float _592 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _491 : (isnan(_491) ? 0.001000000047497451305389404296875 : max(_491, 0.001000000047497451305389404296875)));
                    precise float _594 = dot(vec2(_550, _552), vec2(_532, _534));
                    precise float _598 = _592 * _594;
                    precise float _599 = float(_586) * _598;
                    precise float _600 = _220 * _592;
                    precise float _601 = _600 - _599;
                    precise float _602 = (_586 ? 0.0 : _588) + _601;
                    precise float _604 = _476 * sin(_602);
                    precise float _605 = _551 * 0.0;
                    precise float _606 = _605 - _552;
                    precise float _607 = _552 * 0.0;
                    precise float _608 = _550 * 0.0;
                    precise float _609 = _607 - _608;
                    precise float _610 = _550 - _605;
                    precise float _611 = _492 * _604;
                    float _612 = _529 ? _611 : 0.0;
                    float _655;
                    if (_530)
                    {
                        precise float _615 = _506 * 2.0;
                        precise float _617 = _526 + _527;
                        precise float _618 = _528 + _617;
                        precise float _620 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _506 : (isnan(_506) ? 0.001000000047497451305389404296875 : max(_506, 0.001000000047497451305389404296875)));
                        precise float _621 = _525 * _620;
                        precise float _622 = (-0.0) - _550;
                        precise float _627 = dot(vec2(_552, _622), vec2(_532, _534)) / _615;
                        precise float _628 = (-0.0) - _627;
                        float _631 = fract(abs(_627));
                        precise float _632 = (-0.0) - _631;
                        precise float _634 = _615 * ((_627 >= _628) ? _631 : _632);
                        precise float _635 = _634 * 6.283184051513671875;
                        precise float _636 = _635 / _615;
                        precise float _638 = (isnan(5.0) ? _506 : (isnan(_506) ? 5.0 : min(_506, 5.0))) * sin(_636);
                        precise float _639 = _594 + _638;
                        precise float _640 = _506 * 0.25;
                        precise float _642 = _220 * _525;
                        precise float _643 = _642 - _640;
                        precise float _644 = _643 - _639;
                        precise float _645 = _525 * _618;
                        precise float _647 = _644 / (isnan(0.001000000047497451305389404296875) ? _645 : (isnan(_645) ? 0.001000000047497451305389404296875 : max(_645, 0.001000000047497451305389404296875)));
                        float _648 = fract(_647);
                        precise float _650 = 1.0 - _648;
                        float _651 = (_647 < 0.0) ? _650 : _648;
                        precise float _652 = _617 / _618;
                        precise float _653 = _526 / _618;
                        float _674;
                        if (_651 < _653)
                        {
                            precise float _672 = _651 / _653;
                            _674 = _672;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_651 < _652)
                            {
                                precise float _684 = _651 - _653;
                                precise float _685 = _652 - _653;
                                precise float _686 = _684 / _685;
                                precise float _675 = 1.0 - _686;
                                frontier_phi_14_13_ladder = _675;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _674 = frontier_phi_14_13_ladder;
                        }
                        precise float _676 = _508 * _674;
                        precise float _677 = _620 * _594;
                        precise float _678 = _220 * _621;
                        precise float _679 = _678 - _677;
                        precise float _681 = _507 + sin(_679);
                        precise float _683 = _676 * abs(_681);
                        precise float _656 = _683 + 0.0;
                        _655 = _656;
                    }
                    else
                    {
                        _655 = 0.0;
                    }
                    precise float _657 = _457 + _604;
                    precise float _658 = _657 + _655;
                    precise float _659 = _550 * _658;
                    precise float _660 = _551 * _658;
                    precise float _661 = _552 * _658;
                    precise float _662 = _606 * _612;
                    precise float _663 = _609 * _612;
                    precise float _664 = _610 * _612;
                    precise float _665 = _662 + _659;
                    precise float _666 = _663 + _660;
                    precise float _667 = _664 + _661;
                    precise float _668 = _583 * _665;
                    precise float _669 = _583 * _666;
                    precise float _670 = _583 * _667;
                    precise float _559 = _668 * 0.0500000007450580596923828125;
                    precise float _561 = _669 * 0.0500000007450580596923828125;
                    precise float _563 = _670 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _559;
                    frontier_phi_5_pred_7_ladder_1 = _561;
                    frontier_phi_5_pred_7_ladder_2 = _563;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _558 = frontier_phi_5_pred;
            _560 = frontier_phi_5_pred_1;
            _562 = frontier_phi_5_pred_2;
            _222 = _416 + _558;
            _224 = _417 + _560;
            _226 = _418 + _562;
            uint _422 = _421 + 1u;
            if (_422 == _115)
            {
                break;
            }
            else
            {
                _416 = _222;
                _417 = _224;
                _418 = _226;
                _419 = (_421 != 3u) ? (_419 >> 8u) : _113;
                _421 = _422;
                continue;
            }
        }
        _221 = _222;
        _223 = _224;
        _225 = _226;
    }
    precise float _227 = _221 * _221;
    precise float _228 = _223 * _223;
    precise float _229 = _227 + _228;
    precise float _230 = _225 * _225;
    precise float _231 = _229 + _230;
    float _232 = sqrt(_231);
    bool _233 = _232 < 0.00011000000085914507508277893066406;
    float _238 = inversesqrt(dot(vec3(cbInstanceData._m0[_94].x, cbInstanceData._m0[_99].x, cbInstanceData._m0[_103].x), vec3(cbInstanceData._m0[_94].x, cbInstanceData._m0[_99].x, cbInstanceData._m0[_103].x)));
    precise float _239 = cbInstanceData._m0[_94].x * _238;
    precise float _240 = cbInstanceData._m0[_99].x * _238;
    precise float _241 = cbInstanceData._m0[_103].x * _238;
    float _245 = inversesqrt(dot(vec3(cbInstanceData._m0[_94].y, cbInstanceData._m0[_99].y, cbInstanceData._m0[_103].y), vec3(cbInstanceData._m0[_94].y, cbInstanceData._m0[_99].y, cbInstanceData._m0[_103].y)));
    precise float _246 = cbInstanceData._m0[_94].y * _245;
    precise float _247 = cbInstanceData._m0[_99].y * _245;
    precise float _248 = cbInstanceData._m0[_103].y * _245;
    float _252 = inversesqrt(dot(vec3(cbInstanceData._m0[_94].z, cbInstanceData._m0[_99].z, cbInstanceData._m0[_103].z), vec3(cbInstanceData._m0[_94].z, cbInstanceData._m0[_99].z, cbInstanceData._m0[_103].z)));
    precise float _253 = cbInstanceData._m0[_94].z * _252;
    precise float _254 = cbInstanceData._m0[_99].z * _252;
    precise float _255 = cbInstanceData._m0[_103].z * _252;
    precise float _256 = _239 * 0.0;
    precise float _257 = 1.0 * _246;
    precise float _258 = _257 + _256;
    precise float _259 = 0.0 * _253;
    precise float _260 = _259 + _258;
    precise float _261 = _240 * 0.0;
    precise float _262 = 1.0 * _247;
    precise float _263 = _262 + _261;
    precise float _264 = 0.0 * _254;
    precise float _265 = _264 + _263;
    precise float _266 = _241 * 0.0;
    precise float _267 = 1.0 * _248;
    precise float _268 = _267 + _266;
    precise float _269 = 0.0 * _255;
    precise float _270 = _269 + _268;
    float _274 = inversesqrt(dot(vec3(_221, _223, _225), vec3(_221, _223, _225)));
    precise float _275 = _221 * _274;
    precise float _276 = _223 * _274;
    precise float _277 = _225 * _274;
    precise float _278 = _265 * _277;
    precise float _279 = _270 * _276;
    precise float _280 = _278 - _279;
    precise float _281 = _270 * _275;
    precise float _282 = _260 * _277;
    precise float _283 = _281 - _282;
    precise float _284 = _260 * _276;
    precise float _285 = _265 * _275;
    precise float _286 = _284 - _285;
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    precise float _291 = _290 * _280;
    precise float _292 = _290 * _283;
    precise float _293 = _290 * _286;
    precise float _294 = _232 + 1.0;
    precise float _296 = cbMtdParam._m0[10u].y * log2(_294);
    precise float _297 = _167 - _205;
    precise float _298 = _174 - _212;
    precise float _299 = _181 - _219;
    precise float _300 = dot(vec3(_291, _292, _293), vec3(_297, _298, _299));
    precise float _303 = _291 * _300;
    precise float _304 = _292 * _300;
    precise float _305 = _293 * _300;
    precise float _306 = _205 + _303;
    precise float _307 = _212 + _304;
    precise float _308 = _219 + _305;
    precise float _309 = _167 - _306;
    precise float _310 = _174 - _307;
    precise float _311 = _181 - _308;
    precise float _312 = _292 * _311;
    precise float _313 = _293 * _310;
    precise float _314 = _312 - _313;
    precise float _315 = _293 * _309;
    precise float _316 = _291 * _311;
    precise float _317 = _315 - _316;
    precise float _318 = _291 * _310;
    precise float _319 = _292 * _309;
    precise float _320 = _318 - _319;
    float _321 = sin(_296);
    float _322 = cos(_296);
    precise float _323 = _309 * _322;
    precise float _324 = _310 * _322;
    precise float _325 = _311 * _322;
    precise float _326 = _321 * _314;
    precise float _327 = _321 * _317;
    precise float _328 = _321 * _320;
    precise float _329 = _323 + _326;
    precise float _330 = _324 + _327;
    precise float _331 = _328 + _325;
    precise float _332 = _306 + _329;
    precise float _333 = _307 + _330;
    precise float _334 = _308 + _331;
    precise float _335 = _332 - _167;
    precise float _336 = _333 - _174;
    precise float _337 = _334 - _181;
    precise float _341 = _167 + (_233 ? 0.0 : _335);
    precise float _342 = _174 + (_233 ? 0.0 : _336);
    precise float _343 = _181 + (_233 ? 0.0 : _337);
    precise float _349 = _341 - cbSceneParam._m0[3u].x;
    precise float _350 = _342 - cbSceneParam._m0[3u].y;
    precise float _351 = _343 - cbSceneParam._m0[3u].z;
    precise float _379 = _349 * cbSceneParam._m0[24u].x;
    precise float _380 = _350 * cbSceneParam._m0[24u].y;
    precise float _381 = _380 + _379;
    precise float _382 = _351 * cbSceneParam._m0[24u].z;
    precise float _383 = _382 + _381;
    precise float _384 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _385 = _384 + _383;
    precise float _386 = _349 * cbSceneParam._m0[25u].x;
    precise float _387 = _350 * cbSceneParam._m0[25u].y;
    precise float _388 = _387 + _386;
    precise float _389 = _351 * cbSceneParam._m0[25u].z;
    precise float _390 = _389 + _388;
    precise float _391 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _392 = _391 + _390;
    precise float _393 = _349 * cbSceneParam._m0[26u].x;
    precise float _394 = _350 * cbSceneParam._m0[26u].y;
    precise float _395 = _394 + _393;
    precise float _396 = _351 * cbSceneParam._m0[26u].z;
    precise float _397 = _396 + _395;
    precise float _398 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _399 = _398 + _397;
    precise float _400 = _349 * cbSceneParam._m0[27u].x;
    precise float _401 = _350 * cbSceneParam._m0[27u].y;
    precise float _402 = _401 + _400;
    precise float _403 = _351 * cbSceneParam._m0[27u].z;
    precise float _404 = _403 + _402;
    precise float _405 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _406 = _405 + _404;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _385;
    gl_Position.y = _392;
    gl_Position.z = _399;
    gl_Position.w = _406;
}


