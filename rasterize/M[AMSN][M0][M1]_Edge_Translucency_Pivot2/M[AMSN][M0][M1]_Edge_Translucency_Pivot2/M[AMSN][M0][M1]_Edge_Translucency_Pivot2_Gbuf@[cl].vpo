#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _610;

void main()
{
    uint _77 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    float _163 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _165 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _166 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _177 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _178 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _184 = _77 * 13u;
    uint _189 = _184 + 1u;
    uint _193 = _184 + 2u;
    uvec4 _201 = floatBitsToUint(cbInstanceData._m0[_184 + 7u]);
    uint _203 = _201.w;
    uint _205 = min(_201.y, 8u);
    precise float _209 = POSITION.x + 0.0;
    precise float _210 = POSITION.y + 0.0;
    precise float _211 = POSITION.z + 0.0;
    uint _216 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _77;
    uvec4 _218 = texelFetch(g_InstanceIndexBuffer, int(_216));
    uint _219 = _218.x;
    uint _228 = (floatBitsToUint(cbInstanceData._m0[(_219 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _235 = _228 + 1u;
    uint _242 = _228 + 2u;
    precise float _249 = _209 * cbObjMatrix._m0[_228].x;
    precise float _250 = _210 * cbObjMatrix._m0[_228].y;
    precise float _251 = _250 + _249;
    precise float _252 = _211 * cbObjMatrix._m0[_228].z;
    precise float _253 = _252 + _251;
    precise float _254 = 1.0 * cbObjMatrix._m0[_228].w;
    precise float _256 = _254 + _253;
    precise float _257 = _209 * cbObjMatrix._m0[_235].x;
    precise float _258 = _210 * cbObjMatrix._m0[_235].y;
    precise float _259 = _258 + _257;
    precise float _260 = _211 * cbObjMatrix._m0[_235].z;
    precise float _261 = _260 + _259;
    precise float _262 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _263 = _262 + _261;
    precise float _264 = _209 * cbObjMatrix._m0[_242].x;
    precise float _265 = _210 * cbObjMatrix._m0[_242].y;
    precise float _266 = _265 + _264;
    precise float _267 = _211 * cbObjMatrix._m0[_242].z;
    precise float _268 = _267 + _266;
    precise float _269 = 1.0 * cbObjMatrix._m0[_242].w;
    precise float _270 = _269 + _268;
    float _276 = cbSceneParam._m0[3u].x - _256;
    float _277 = cbSceneParam._m0[3u].y - _263;
    float _278 = cbSceneParam._m0[3u].z - _270;
    precise float _305 = _256 * _256;
    precise float _306 = _263 * _263;
    precise float _307 = _305 + _306;
    precise float _308 = _270 * _270;
    precise float _309 = _307 + _308;
    precise float _311 = cbMtdParam._m0[10u].z * sqrt(_309);
    precise float _321 = cbInstanceData._m0[_184].x * 0.0;
    precise float _322 = 0.0 * cbInstanceData._m0[_184].y;
    precise float _323 = _322 + _321;
    precise float _324 = 0.0 * cbInstanceData._m0[_184].z;
    precise float _325 = _324 + _323;
    precise float _326 = 1.0 * cbInstanceData._m0[_184].w;
    precise float _327 = _326 + _325;
    precise float _328 = cbInstanceData._m0[_189].x * 0.0;
    precise float _329 = 0.0 * cbInstanceData._m0[_189].y;
    precise float _330 = _329 + _328;
    precise float _331 = 0.0 * cbInstanceData._m0[_189].z;
    precise float _332 = _331 + _330;
    precise float _333 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _334 = _333 + _332;
    precise float _335 = cbInstanceData._m0[_193].x * 0.0;
    precise float _336 = 0.0 * cbInstanceData._m0[_193].y;
    precise float _337 = _336 + _335;
    precise float _338 = 0.0 * cbInstanceData._m0[_193].z;
    precise float _339 = _338 + _337;
    precise float _340 = 1.0 * cbInstanceData._m0[_193].w;
    precise float _341 = _340 + _339;
    precise float _342 = cbPerFrame._m0[22u].x + _311;
    float _343;
    float _345;
    float _347;
    if (_205 == 0u)
    {
        _343 = 0.0;
        _345 = 0.0;
        _347 = 0.0;
    }
    else
    {
        uint _540 = _201.z;
        precise float _344;
        precise float _346;
        precise float _348;
        float _683;
        float _685;
        float _687;
        float _541 = 0.0;
        float _542 = 0.0;
        float _543 = 0.0;
        uint _544 = _540;
        uint _546 = 0u;
        float _582;
        float _601;
        vec4 _615;
        float _616;
        float _617;
        float _631;
        float _632;
        float _633;
        float _650;
        float _651;
        float _652;
        float _653;
        bool _654;
        bool _655;
        bool _656;
        precise float _657;
        precise float _658;
        precise float _659;
        float _660;
        float _661;
        float _662;
        precise float _663;
        bool _666;
        for (;;)
        {
            uint _548 = _544 & 255u;
            uint _550 = _548 * 24u;
            uvec3 _560 = uvec3(texelFetch(g_forceParam, int(_550)).x, texelFetch(g_forceParam, int(_550 + 1u)).x, texelFetch(g_forceParam, int(_550 + 2u)).x);
            uint _565 = (_548 * 24u) + 4u;
            vec4 _578 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_565)).x, texelFetch(g_forceParam, int(_565 + 1u)).x, texelFetch(g_forceParam, int(_565 + 2u)).x, texelFetch(g_forceParam, int(_565 + 3u)).x));
            _582 = _578.w;
            uint _584 = (_548 * 24u) + 8u;
            vec4 _597 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_584)).x, texelFetch(g_forceParam, int(_584 + 1u)).x, texelFetch(g_forceParam, int(_584 + 2u)).x, texelFetch(g_forceParam, int(_584 + 3u)).x));
            _601 = _597.w;
            uint _604 = (_548 * 24u) + 12u;
            _615 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_604)).x, texelFetch(g_forceParam, int(_604 + 1u)).x, _610, texelFetch(g_forceParam, int(_604 + 3u)).x));
            _616 = _615.x;
            _617 = _615.w;
            uint _620 = (_548 * 24u) + 16u;
            vec3 _630 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_620)).x, texelFetch(g_forceParam, int(_620 + 1u)).x, texelFetch(g_forceParam, int(_620 + 2u)).x));
            _631 = _630.x;
            _632 = _630.y;
            _633 = _630.z;
            uint _636 = (_548 * 24u) + 20u;
            vec4 _649 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_636)).x, texelFetch(g_forceParam, int(_636 + 1u)).x, texelFetch(g_forceParam, int(_636 + 2u)).x, texelFetch(g_forceParam, int(_636 + 3u)).x));
            _650 = _649.x;
            _651 = _649.y;
            _652 = _649.z;
            _653 = _649.w;
            _654 = _560.x == 1u;
            _655 = _560.y == 1u;
            _656 = _560.z == 1u;
            _657 = _327 - _578.x;
            _658 = _334 - _578.y;
            _659 = _341 - _578.z;
            _660 = _654 ? _597.x : _657;
            _661 = _654 ? _597.y : _658;
            _662 = _654 ? _597.z : _659;
            _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
            _666 = _663 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_666)
            {
                precise float _668 = _657 * _657;
                precise float _669 = _658 * _658;
                precise float _670 = _668 + _669;
                precise float _671 = _659 * _659;
                precise float _672 = _671 + _670;
                float _673 = sqrt(_672);
                float _674 = inversesqrt(_663);
                precise float _675 = _660 * _674;
                precise float _676 = _661 * _674;
                precise float _677 = _662 * _674;
                precise float _680 = _673 / (isnan(0.001000000047497451305389404296875) ? _615.y : (isnan(_615.y) ? 0.001000000047497451305389404296875 : max(_615.y, 0.001000000047497451305389404296875)));
                precise float _681 = 1.0 - _680;
                float _845 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
                float _682 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
                float _708;
                if (_656)
                {
                    float _695 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
                    precise float _696 = _657 * _695;
                    precise float _697 = _658 * _695;
                    precise float _698 = _659 * _695;
                    precise float _702 = dot(vec3(_675, _676, _677), vec3(_696, _697, _698)) * 0.800000011920928955078125;
                    precise float _704 = _702 + 0.20000000298023223876953125;
                    float _856 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
                    precise float _707 = _682 * (isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0)));
                    _708 = _707;
                }
                else
                {
                    _708 = _682;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_708 > 0.0)
                {
                    bool _711 = _654 && (!_656);
                    precise float _713 = _673 * (-4.0);
                    precise float _717 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _616 : (isnan(_616) ? 0.001000000047497451305389404296875 : max(_616, 0.001000000047497451305389404296875)));
                    precise float _719 = dot(vec2(_675, _677), vec2(_657, _659));
                    precise float _723 = _717 * _719;
                    precise float _724 = float(_711) * _723;
                    precise float _725 = _342 * _717;
                    precise float _726 = _725 - _724;
                    precise float _727 = (_711 ? 0.0 : _713) + _726;
                    precise float _729 = _601 * sin(_727);
                    precise float _730 = _676 * 0.0;
                    precise float _731 = _730 - _677;
                    precise float _732 = _677 * 0.0;
                    precise float _733 = _675 * 0.0;
                    precise float _734 = _732 - _733;
                    precise float _735 = _675 - _730;
                    precise float _736 = _617 * _729;
                    float _737 = _654 ? _736 : 0.0;
                    float _780;
                    if (_655)
                    {
                        precise float _740 = _631 * 2.0;
                        precise float _742 = _651 + _652;
                        precise float _743 = _653 + _742;
                        precise float _745 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _631 : (isnan(_631) ? 0.001000000047497451305389404296875 : max(_631, 0.001000000047497451305389404296875)));
                        precise float _746 = _650 * _745;
                        precise float _747 = (-0.0) - _675;
                        precise float _752 = dot(vec2(_677, _747), vec2(_657, _659)) / _740;
                        precise float _753 = (-0.0) - _752;
                        float _756 = fract(abs(_752));
                        precise float _757 = (-0.0) - _756;
                        precise float _759 = _740 * ((_752 >= _753) ? _756 : _757);
                        precise float _760 = _759 * 6.283184051513671875;
                        precise float _761 = _760 / _740;
                        precise float _763 = (isnan(5.0) ? _631 : (isnan(_631) ? 5.0 : min(_631, 5.0))) * sin(_761);
                        precise float _764 = _719 + _763;
                        precise float _765 = _631 * 0.25;
                        precise float _767 = _342 * _650;
                        precise float _768 = _767 - _765;
                        precise float _769 = _768 - _764;
                        precise float _770 = _650 * _743;
                        precise float _772 = _769 / (isnan(0.001000000047497451305389404296875) ? _770 : (isnan(_770) ? 0.001000000047497451305389404296875 : max(_770, 0.001000000047497451305389404296875)));
                        float _773 = fract(_772);
                        precise float _775 = 1.0 - _773;
                        float _776 = (_772 < 0.0) ? _775 : _773;
                        precise float _777 = _742 / _743;
                        precise float _778 = _651 / _743;
                        float _799;
                        if (_776 < _778)
                        {
                            precise float _797 = _776 / _778;
                            _799 = _797;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_776 < _777)
                            {
                                precise float _809 = _776 - _778;
                                precise float _810 = _777 - _778;
                                precise float _811 = _809 / _810;
                                precise float _800 = 1.0 - _811;
                                frontier_phi_14_13_ladder = _800;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _799 = frontier_phi_14_13_ladder;
                        }
                        precise float _801 = _633 * _799;
                        precise float _802 = _745 * _719;
                        precise float _803 = _342 * _746;
                        precise float _804 = _803 - _802;
                        precise float _806 = _632 + sin(_804);
                        precise float _808 = _801 * abs(_806);
                        precise float _781 = _808 + 0.0;
                        _780 = _781;
                    }
                    else
                    {
                        _780 = 0.0;
                    }
                    precise float _782 = _582 + _729;
                    precise float _783 = _782 + _780;
                    precise float _784 = _675 * _783;
                    precise float _785 = _676 * _783;
                    precise float _786 = _677 * _783;
                    precise float _787 = _731 * _737;
                    precise float _788 = _734 * _737;
                    precise float _789 = _735 * _737;
                    precise float _790 = _787 + _784;
                    precise float _791 = _788 + _785;
                    precise float _792 = _789 + _786;
                    precise float _793 = _708 * _790;
                    precise float _794 = _708 * _791;
                    precise float _795 = _708 * _792;
                    precise float _684 = _793 * 0.0500000007450580596923828125;
                    precise float _686 = _794 * 0.0500000007450580596923828125;
                    precise float _688 = _795 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _684;
                    frontier_phi_5_pred_7_ladder_1 = _686;
                    frontier_phi_5_pred_7_ladder_2 = _688;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _683 = frontier_phi_5_pred;
            _685 = frontier_phi_5_pred_1;
            _687 = frontier_phi_5_pred_2;
            _344 = _541 + _683;
            _346 = _542 + _685;
            _348 = _543 + _687;
            uint _547 = _546 + 1u;
            if (_547 == _205)
            {
                break;
            }
            else
            {
                _541 = _344;
                _542 = _346;
                _543 = _348;
                _544 = (_546 != 3u) ? (_544 >> 8u) : _203;
                _546 = _547;
                continue;
            }
        }
        _343 = _344;
        _345 = _346;
        _347 = _348;
    }
    precise float _349 = _343 * _343;
    precise float _350 = _345 * _345;
    precise float _351 = _349 + _350;
    precise float _352 = _347 * _347;
    precise float _353 = _351 + _352;
    float _354 = sqrt(_353);
    bool _355 = _354 < 0.00011000000085914507508277893066406;
    float _360 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].x, cbInstanceData._m0[_189].x, cbInstanceData._m0[_193].x), vec3(cbInstanceData._m0[_184].x, cbInstanceData._m0[_189].x, cbInstanceData._m0[_193].x)));
    precise float _361 = cbInstanceData._m0[_184].x * _360;
    precise float _362 = cbInstanceData._m0[_189].x * _360;
    precise float _363 = cbInstanceData._m0[_193].x * _360;
    float _367 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].y, cbInstanceData._m0[_189].y, cbInstanceData._m0[_193].y), vec3(cbInstanceData._m0[_184].y, cbInstanceData._m0[_189].y, cbInstanceData._m0[_193].y)));
    precise float _368 = cbInstanceData._m0[_184].y * _367;
    precise float _369 = cbInstanceData._m0[_189].y * _367;
    precise float _370 = cbInstanceData._m0[_193].y * _367;
    float _374 = inversesqrt(dot(vec3(cbInstanceData._m0[_184].z, cbInstanceData._m0[_189].z, cbInstanceData._m0[_193].z), vec3(cbInstanceData._m0[_184].z, cbInstanceData._m0[_189].z, cbInstanceData._m0[_193].z)));
    precise float _375 = cbInstanceData._m0[_184].z * _374;
    precise float _376 = cbInstanceData._m0[_189].z * _374;
    precise float _377 = cbInstanceData._m0[_193].z * _374;
    precise float _378 = _361 * 0.0;
    precise float _379 = 1.0 * _368;
    precise float _380 = _379 + _378;
    precise float _381 = 0.0 * _375;
    precise float _382 = _381 + _380;
    precise float _383 = _362 * 0.0;
    precise float _384 = 1.0 * _369;
    precise float _385 = _384 + _383;
    precise float _386 = 0.0 * _376;
    precise float _387 = _386 + _385;
    precise float _388 = _363 * 0.0;
    precise float _389 = 1.0 * _370;
    precise float _390 = _389 + _388;
    precise float _391 = 0.0 * _377;
    precise float _392 = _391 + _390;
    float _396 = inversesqrt(dot(vec3(_343, _345, _347), vec3(_343, _345, _347)));
    precise float _397 = _343 * _396;
    precise float _398 = _345 * _396;
    precise float _399 = _347 * _396;
    precise float _400 = _387 * _399;
    precise float _401 = _392 * _398;
    precise float _402 = _400 - _401;
    precise float _403 = _392 * _397;
    precise float _404 = _382 * _399;
    precise float _405 = _403 - _404;
    precise float _406 = _382 * _398;
    precise float _407 = _387 * _397;
    precise float _408 = _406 - _407;
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    precise float _413 = _412 * _402;
    precise float _414 = _412 * _405;
    precise float _415 = _412 * _408;
    precise float _416 = _354 + 1.0;
    precise float _418 = cbMtdParam._m0[10u].y * log2(_416);
    precise float _419 = _256 - _327;
    precise float _420 = _263 - _334;
    precise float _421 = _270 - _341;
    precise float _422 = dot(vec3(_413, _414, _415), vec3(_419, _420, _421));
    precise float _425 = _413 * _422;
    precise float _426 = _414 * _422;
    precise float _427 = _415 * _422;
    precise float _428 = _327 + _425;
    precise float _429 = _334 + _426;
    precise float _430 = _341 + _427;
    precise float _431 = _256 - _428;
    precise float _432 = _263 - _429;
    precise float _433 = _270 - _430;
    precise float _434 = _414 * _433;
    precise float _435 = _415 * _432;
    precise float _436 = _434 - _435;
    precise float _437 = _415 * _431;
    precise float _438 = _413 * _433;
    precise float _439 = _437 - _438;
    precise float _440 = _413 * _432;
    precise float _441 = _414 * _431;
    precise float _442 = _440 - _441;
    float _443 = sin(_418);
    float _444 = cos(_418);
    precise float _445 = _431 * _444;
    precise float _446 = _432 * _444;
    precise float _447 = _433 * _444;
    precise float _448 = _443 * _436;
    precise float _449 = _443 * _439;
    precise float _450 = _443 * _442;
    precise float _451 = _445 + _448;
    precise float _452 = _446 + _449;
    precise float _453 = _450 + _447;
    precise float _454 = _428 + _451;
    precise float _455 = _429 + _452;
    precise float _456 = _430 + _453;
    precise float _457 = _454 - _256;
    precise float _458 = _455 - _263;
    precise float _459 = _456 - _270;
    precise float _463 = _256 + (_355 ? 0.0 : _457);
    precise float _464 = _263 + (_355 ? 0.0 : _458);
    precise float _465 = _270 + (_355 ? 0.0 : _459);
    precise float _466 = _463 - cbSceneParam._m0[3u].x;
    precise float _467 = _464 - cbSceneParam._m0[3u].y;
    precise float _468 = _465 - cbSceneParam._m0[3u].z;
    precise float _496 = _466 * cbSceneParam._m0[24u].x;
    precise float _497 = _467 * cbSceneParam._m0[24u].y;
    precise float _498 = _497 + _496;
    precise float _499 = _468 * cbSceneParam._m0[24u].z;
    precise float _500 = _499 + _498;
    precise float _501 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _502 = _501 + _500;
    precise float _503 = _466 * cbSceneParam._m0[25u].x;
    precise float _504 = _467 * cbSceneParam._m0[25u].y;
    precise float _505 = _504 + _503;
    precise float _506 = _468 * cbSceneParam._m0[25u].z;
    precise float _507 = _506 + _505;
    precise float _508 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _509 = _508 + _507;
    precise float _510 = _466 * cbSceneParam._m0[26u].x;
    precise float _511 = _467 * cbSceneParam._m0[26u].y;
    precise float _512 = _511 + _510;
    precise float _513 = _468 * cbSceneParam._m0[26u].z;
    precise float _514 = _513 + _512;
    precise float _515 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _516 = _515 + _514;
    precise float _517 = _466 * cbSceneParam._m0[27u].x;
    precise float _518 = _467 * cbSceneParam._m0[27u].y;
    precise float _519 = _518 + _517;
    precise float _520 = _468 * cbSceneParam._m0[27u].z;
    precise float _521 = _520 + _519;
    precise float _522 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _523 = _522 + _521;
    gl_Position.x = _502;
    gl_Position.y = _509;
    gl_Position.z = _516;
    gl_Position.w = _523;
    NORMAL_1.x = fma(_166, cbObjMatrix._m0[_228].z, fma(_165, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _163));
    NORMAL_1.y = fma(_166, cbObjMatrix._m0[_235].z, fma(_165, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _163));
    NORMAL_1.z = fma(_166, cbObjMatrix._m0[_242].z, fma(_165, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * _163));
    NORMAL_1.w = float(_219);
    TANGENT_1.x = fma(_178, cbObjMatrix._m0[_228].z, fma(_177, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * _176));
    TANGENT_1.y = fma(_178, cbObjMatrix._m0[_235].z, fma(_177, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * _176));
    TANGENT_1.z = fma(_178, cbObjMatrix._m0[_242].z, fma(_177, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * _176));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_276 * _276) + (_277 * _277)) + (_278 * _278));
}


