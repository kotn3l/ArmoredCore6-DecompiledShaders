#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _816;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _188 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _190 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _212 = _83 * 13u;
    uint _217 = _212 + 1u;
    uint _221 = _212 + 2u;
    uvec4 _229 = floatBitsToUint(cbInstanceData._m0[_212 + 7u]);
    uint _231 = _229.w;
    uint _233 = min(_229.y, 8u);
    precise float _237 = POSITION.x + 0.0;
    precise float _238 = POSITION.y + 0.0;
    precise float _239 = POSITION.z + 0.0;
    uint _244 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _246 = texelFetch(g_InstanceIndexBuffer, int(_244));
    uint _247 = _246.x;
    precise float _248 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _252 = isnan(_248) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _248 : max(0.001000000047497451305389404296875, _248));
    precise float _254 = BLENDWEIGHT.x / _252;
    precise float _255 = BLENDWEIGHT.y / _252;
    precise float _256 = BLENDWEIGHT.z / _252;
    precise float _257 = BLENDWEIGHT.w / _252;
    uint _259 = _247 * 13u;
    uvec4 _263 = floatBitsToUint(cbInstanceData._m0[_259 + 4u]);
    uint _264 = _263.x;
    uint _266 = (_264 + uint(float(BLENDINDICES.x))) * 3u;
    uint _273 = _266 + 1u;
    uint _280 = _266 + 2u;
    precise float _287 = _254 * cbObjMatrix._m0[_266].x;
    precise float _288 = _254 * cbObjMatrix._m0[_273].x;
    precise float _289 = _254 * cbObjMatrix._m0[_280].x;
    precise float _290 = _254 * cbObjMatrix._m0[_266].y;
    precise float _291 = _254 * cbObjMatrix._m0[_273].y;
    precise float _292 = _254 * cbObjMatrix._m0[_280].y;
    precise float _293 = _254 * cbObjMatrix._m0[_266].z;
    precise float _294 = _254 * cbObjMatrix._m0[_273].z;
    precise float _295 = _254 * cbObjMatrix._m0[_280].z;
    precise float _296 = _254 * cbObjMatrix._m0[_266].w;
    precise float _297 = _254 * cbObjMatrix._m0[_273].w;
    precise float _298 = _254 * cbObjMatrix._m0[_280].w;
    uint _301 = (_264 + uint(float(BLENDINDICES.y))) * 3u;
    uint _308 = _301 + 1u;
    uint _315 = _301 + 2u;
    precise float _322 = _255 * cbObjMatrix._m0[_301].x;
    precise float _323 = _255 * cbObjMatrix._m0[_308].x;
    precise float _324 = _255 * cbObjMatrix._m0[_315].x;
    precise float _325 = _255 * cbObjMatrix._m0[_301].y;
    precise float _326 = _255 * cbObjMatrix._m0[_308].y;
    precise float _327 = _255 * cbObjMatrix._m0[_315].y;
    precise float _328 = _255 * cbObjMatrix._m0[_301].z;
    precise float _329 = _255 * cbObjMatrix._m0[_308].z;
    precise float _330 = _255 * cbObjMatrix._m0[_315].z;
    precise float _331 = _255 * cbObjMatrix._m0[_301].w;
    precise float _332 = _255 * cbObjMatrix._m0[_308].w;
    precise float _333 = _255 * cbObjMatrix._m0[_315].w;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    uint _348 = (_264 + uint(float(BLENDINDICES.z))) * 3u;
    uint _355 = _348 + 1u;
    uint _362 = _348 + 2u;
    precise float _369 = _256 * cbObjMatrix._m0[_348].x;
    precise float _370 = _256 * cbObjMatrix._m0[_355].x;
    precise float _371 = _256 * cbObjMatrix._m0[_362].x;
    precise float _372 = _256 * cbObjMatrix._m0[_348].y;
    precise float _373 = _256 * cbObjMatrix._m0[_355].y;
    precise float _374 = _256 * cbObjMatrix._m0[_362].y;
    precise float _375 = _256 * cbObjMatrix._m0[_348].z;
    precise float _376 = _256 * cbObjMatrix._m0[_355].z;
    precise float _377 = _256 * cbObjMatrix._m0[_362].z;
    precise float _378 = _256 * cbObjMatrix._m0[_348].w;
    precise float _379 = _256 * cbObjMatrix._m0[_355].w;
    precise float _380 = _256 * cbObjMatrix._m0[_362].w;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    uint _395 = (_264 + uint(float(BLENDINDICES.w))) * 3u;
    uint _402 = _395 + 1u;
    uint _409 = _395 + 2u;
    precise float _416 = _257 * cbObjMatrix._m0[_395].x;
    precise float _417 = _257 * cbObjMatrix._m0[_402].x;
    precise float _418 = _257 * cbObjMatrix._m0[_409].x;
    precise float _419 = _257 * cbObjMatrix._m0[_395].y;
    precise float _420 = _257 * cbObjMatrix._m0[_402].y;
    precise float _421 = _257 * cbObjMatrix._m0[_409].y;
    precise float _422 = _257 * cbObjMatrix._m0[_395].z;
    precise float _423 = _257 * cbObjMatrix._m0[_402].z;
    precise float _424 = _257 * cbObjMatrix._m0[_409].z;
    precise float _425 = _257 * cbObjMatrix._m0[_395].w;
    precise float _426 = _257 * cbObjMatrix._m0[_402].w;
    precise float _427 = _257 * cbObjMatrix._m0[_409].w;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    precise float _440 = _237 * _428;
    precise float _441 = _238 * _431;
    precise float _442 = _441 + _440;
    precise float _443 = _239 * _434;
    precise float _444 = _443 + _442;
    precise float _445 = 1.0 * _437;
    precise float _446 = _445 + _444;
    precise float _447 = _237 * _429;
    precise float _448 = _238 * _432;
    precise float _449 = _448 + _447;
    precise float _450 = _239 * _435;
    precise float _451 = _450 + _449;
    precise float _452 = 1.0 * _438;
    precise float _453 = _452 + _451;
    precise float _454 = _237 * _430;
    precise float _455 = _238 * _433;
    precise float _456 = _455 + _454;
    precise float _457 = _239 * _436;
    precise float _458 = _457 + _456;
    precise float _459 = 1.0 * _439;
    precise float _460 = _459 + _458;
    precise float _481 = _446 * _446;
    precise float _482 = _453 * _453;
    precise float _483 = _481 + _482;
    precise float _484 = _460 * _460;
    precise float _485 = _483 + _484;
    precise float _487 = cbMtdParam._m0[10u].z * sqrt(_485);
    precise float _497 = cbInstanceData._m0[_212].x * 0.0;
    precise float _498 = 0.0 * cbInstanceData._m0[_212].y;
    precise float _499 = _498 + _497;
    precise float _500 = 0.0 * cbInstanceData._m0[_212].z;
    precise float _501 = _500 + _499;
    precise float _502 = 1.0 * cbInstanceData._m0[_212].w;
    precise float _503 = _502 + _501;
    precise float _504 = cbInstanceData._m0[_217].x * 0.0;
    precise float _505 = 0.0 * cbInstanceData._m0[_217].y;
    precise float _506 = _505 + _504;
    precise float _507 = 0.0 * cbInstanceData._m0[_217].z;
    precise float _508 = _507 + _506;
    precise float _509 = 1.0 * cbInstanceData._m0[_217].w;
    precise float _510 = _509 + _508;
    precise float _511 = cbInstanceData._m0[_221].x * 0.0;
    precise float _512 = 0.0 * cbInstanceData._m0[_221].y;
    precise float _513 = _512 + _511;
    precise float _514 = 0.0 * cbInstanceData._m0[_221].z;
    precise float _515 = _514 + _513;
    precise float _516 = 1.0 * cbInstanceData._m0[_221].w;
    precise float _517 = _516 + _515;
    precise float _518 = cbPerFrame._m0[22u].x + _487;
    float _519;
    float _521;
    float _523;
    if (_233 == 0u)
    {
        _519 = 0.0;
        _521 = 0.0;
        _523 = 0.0;
    }
    else
    {
        uint _746 = _229.z;
        precise float _520;
        precise float _522;
        precise float _524;
        float _888;
        float _890;
        float _892;
        float _747 = 0.0;
        float _748 = 0.0;
        float _749 = 0.0;
        uint _750 = _746;
        uint _752 = 0u;
        float _788;
        float _807;
        vec4 _821;
        float _822;
        float _823;
        float _837;
        float _838;
        float _839;
        float _856;
        float _857;
        float _858;
        float _859;
        bool _860;
        bool _861;
        bool _862;
        precise float _863;
        precise float _864;
        precise float _865;
        float _866;
        float _867;
        float _868;
        precise float _869;
        bool _872;
        for (;;)
        {
            uint _754 = _750 & 255u;
            uint _756 = _754 * 24u;
            uvec3 _766 = uvec3(texelFetch(g_forceParam, int(_756)).x, texelFetch(g_forceParam, int(_756 + 1u)).x, texelFetch(g_forceParam, int(_756 + 2u)).x);
            uint _771 = (_754 * 24u) + 4u;
            vec4 _784 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_771)).x, texelFetch(g_forceParam, int(_771 + 1u)).x, texelFetch(g_forceParam, int(_771 + 2u)).x, texelFetch(g_forceParam, int(_771 + 3u)).x));
            _788 = _784.w;
            uint _790 = (_754 * 24u) + 8u;
            vec4 _803 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_790)).x, texelFetch(g_forceParam, int(_790 + 1u)).x, texelFetch(g_forceParam, int(_790 + 2u)).x, texelFetch(g_forceParam, int(_790 + 3u)).x));
            _807 = _803.w;
            uint _810 = (_754 * 24u) + 12u;
            _821 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_810)).x, texelFetch(g_forceParam, int(_810 + 1u)).x, _816, texelFetch(g_forceParam, int(_810 + 3u)).x));
            _822 = _821.x;
            _823 = _821.w;
            uint _826 = (_754 * 24u) + 16u;
            vec3 _836 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_826)).x, texelFetch(g_forceParam, int(_826 + 1u)).x, texelFetch(g_forceParam, int(_826 + 2u)).x));
            _837 = _836.x;
            _838 = _836.y;
            _839 = _836.z;
            uint _842 = (_754 * 24u) + 20u;
            vec4 _855 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_842)).x, texelFetch(g_forceParam, int(_842 + 1u)).x, texelFetch(g_forceParam, int(_842 + 2u)).x, texelFetch(g_forceParam, int(_842 + 3u)).x));
            _856 = _855.x;
            _857 = _855.y;
            _858 = _855.z;
            _859 = _855.w;
            _860 = _766.x == 1u;
            _861 = _766.y == 1u;
            _862 = _766.z == 1u;
            _863 = _503 - _784.x;
            _864 = _510 - _784.y;
            _865 = _517 - _784.z;
            _866 = _860 ? _803.x : _863;
            _867 = _860 ? _803.y : _864;
            _868 = _860 ? _803.z : _865;
            _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
            _872 = _869 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_872)
            {
                precise float _874 = _863 * _863;
                precise float _875 = _864 * _864;
                precise float _876 = _874 + _875;
                precise float _877 = _865 * _865;
                precise float _878 = _877 + _876;
                float _879 = sqrt(_878);
                float _880 = inversesqrt(_869);
                precise float _881 = _866 * _880;
                precise float _882 = _867 * _880;
                precise float _883 = _868 * _880;
                precise float _885 = _879 / (isnan(0.001000000047497451305389404296875) ? _821.y : (isnan(_821.y) ? 0.001000000047497451305389404296875 : max(_821.y, 0.001000000047497451305389404296875)));
                precise float _886 = 1.0 - _885;
                float _1055 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
                float _887 = isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0));
                float _913;
                if (_862)
                {
                    float _900 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
                    precise float _901 = _863 * _900;
                    precise float _902 = _864 * _900;
                    precise float _903 = _865 * _900;
                    precise float _907 = dot(vec3(_881, _882, _883), vec3(_901, _902, _903)) * 0.800000011920928955078125;
                    precise float _909 = _907 + 0.20000000298023223876953125;
                    float _1066 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
                    precise float _912 = _887 * (isnan(1.0) ? _1066 : (isnan(_1066) ? 1.0 : min(_1066, 1.0)));
                    _913 = _912;
                }
                else
                {
                    _913 = _887;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_913 > 0.0)
                {
                    bool _916 = _860 && (!_862);
                    precise float _918 = _879 * (-4.0);
                    precise float _922 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _822 : (isnan(_822) ? 0.001000000047497451305389404296875 : max(_822, 0.001000000047497451305389404296875)));
                    precise float _924 = dot(vec2(_881, _883), vec2(_863, _865));
                    precise float _928 = _922 * _924;
                    precise float _929 = float(_916) * _928;
                    precise float _930 = _518 * _922;
                    precise float _931 = _930 - _929;
                    precise float _932 = (_916 ? 0.0 : _918) + _931;
                    precise float _934 = _807 * sin(_932);
                    precise float _935 = _882 * 0.0;
                    precise float _936 = _935 - _883;
                    precise float _937 = _883 * 0.0;
                    precise float _938 = _881 * 0.0;
                    precise float _939 = _937 - _938;
                    precise float _940 = _881 - _935;
                    precise float _941 = _823 * _934;
                    float _942 = _860 ? _941 : 0.0;
                    float _985;
                    if (_861)
                    {
                        precise float _945 = _837 * 2.0;
                        precise float _947 = _857 + _858;
                        precise float _948 = _859 + _947;
                        precise float _950 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _837 : (isnan(_837) ? 0.001000000047497451305389404296875 : max(_837, 0.001000000047497451305389404296875)));
                        precise float _951 = _856 * _950;
                        precise float _952 = (-0.0) - _881;
                        precise float _957 = dot(vec2(_883, _952), vec2(_863, _865)) / _945;
                        precise float _958 = (-0.0) - _957;
                        float _961 = fract(abs(_957));
                        precise float _962 = (-0.0) - _961;
                        precise float _964 = _945 * ((_957 >= _958) ? _961 : _962);
                        precise float _965 = _964 * 6.283184051513671875;
                        precise float _966 = _965 / _945;
                        precise float _968 = (isnan(5.0) ? _837 : (isnan(_837) ? 5.0 : min(_837, 5.0))) * sin(_966);
                        precise float _969 = _924 + _968;
                        precise float _970 = _837 * 0.25;
                        precise float _972 = _518 * _856;
                        precise float _973 = _972 - _970;
                        precise float _974 = _973 - _969;
                        precise float _975 = _856 * _948;
                        precise float _977 = _974 / (isnan(0.001000000047497451305389404296875) ? _975 : (isnan(_975) ? 0.001000000047497451305389404296875 : max(_975, 0.001000000047497451305389404296875)));
                        float _978 = fract(_977);
                        precise float _980 = 1.0 - _978;
                        float _981 = (_977 < 0.0) ? _980 : _978;
                        precise float _982 = _947 / _948;
                        precise float _983 = _857 / _948;
                        float _1004;
                        if (_981 < _983)
                        {
                            precise float _1002 = _981 / _983;
                            _1004 = _1002;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_981 < _982)
                            {
                                precise float _1014 = _981 - _983;
                                precise float _1015 = _982 - _983;
                                precise float _1016 = _1014 / _1015;
                                precise float _1005 = 1.0 - _1016;
                                frontier_phi_14_13_ladder = _1005;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1004 = frontier_phi_14_13_ladder;
                        }
                        precise float _1006 = _839 * _1004;
                        precise float _1007 = _950 * _924;
                        precise float _1008 = _518 * _951;
                        precise float _1009 = _1008 - _1007;
                        precise float _1011 = _838 + sin(_1009);
                        precise float _1013 = _1006 * abs(_1011);
                        precise float _986 = _1013 + 0.0;
                        _985 = _986;
                    }
                    else
                    {
                        _985 = 0.0;
                    }
                    precise float _987 = _788 + _934;
                    precise float _988 = _987 + _985;
                    precise float _989 = _881 * _988;
                    precise float _990 = _882 * _988;
                    precise float _991 = _883 * _988;
                    precise float _992 = _936 * _942;
                    precise float _993 = _939 * _942;
                    precise float _994 = _940 * _942;
                    precise float _995 = _992 + _989;
                    precise float _996 = _993 + _990;
                    precise float _997 = _994 + _991;
                    precise float _998 = _913 * _995;
                    precise float _999 = _913 * _996;
                    precise float _1000 = _913 * _997;
                    precise float _889 = _998 * 0.0500000007450580596923828125;
                    precise float _891 = _999 * 0.0500000007450580596923828125;
                    precise float _893 = _1000 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _889;
                    frontier_phi_5_pred_7_ladder_1 = _891;
                    frontier_phi_5_pred_7_ladder_2 = _893;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _888 = frontier_phi_5_pred;
            _890 = frontier_phi_5_pred_1;
            _892 = frontier_phi_5_pred_2;
            _520 = _747 + _888;
            _522 = _748 + _890;
            _524 = _749 + _892;
            uint _753 = _752 + 1u;
            if (_753 == _233)
            {
                break;
            }
            else
            {
                _747 = _520;
                _748 = _522;
                _749 = _524;
                _750 = (_752 != 3u) ? (_750 >> 8u) : _231;
                _752 = _753;
                continue;
            }
        }
        _519 = _520;
        _521 = _522;
        _523 = _524;
    }
    precise float _525 = _519 * _519;
    precise float _526 = _521 * _521;
    precise float _527 = _525 + _526;
    precise float _528 = _523 * _523;
    precise float _529 = _527 + _528;
    float _530 = sqrt(_529);
    bool _531 = _530 < 0.00011000000085914507508277893066406;
    float _536 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].x, cbInstanceData._m0[_217].x, cbInstanceData._m0[_221].x), vec3(cbInstanceData._m0[_212].x, cbInstanceData._m0[_217].x, cbInstanceData._m0[_221].x)));
    precise float _537 = cbInstanceData._m0[_212].x * _536;
    precise float _538 = cbInstanceData._m0[_217].x * _536;
    precise float _539 = cbInstanceData._m0[_221].x * _536;
    float _543 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].y, cbInstanceData._m0[_217].y, cbInstanceData._m0[_221].y), vec3(cbInstanceData._m0[_212].y, cbInstanceData._m0[_217].y, cbInstanceData._m0[_221].y)));
    precise float _544 = cbInstanceData._m0[_212].y * _543;
    precise float _545 = cbInstanceData._m0[_217].y * _543;
    precise float _546 = cbInstanceData._m0[_221].y * _543;
    float _550 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].z, cbInstanceData._m0[_217].z, cbInstanceData._m0[_221].z), vec3(cbInstanceData._m0[_212].z, cbInstanceData._m0[_217].z, cbInstanceData._m0[_221].z)));
    precise float _551 = cbInstanceData._m0[_212].z * _550;
    precise float _552 = cbInstanceData._m0[_217].z * _550;
    precise float _553 = cbInstanceData._m0[_221].z * _550;
    precise float _554 = _537 * 0.0;
    precise float _555 = 1.0 * _544;
    precise float _556 = _555 + _554;
    precise float _557 = 0.0 * _551;
    precise float _558 = _557 + _556;
    precise float _559 = _538 * 0.0;
    precise float _560 = 1.0 * _545;
    precise float _561 = _560 + _559;
    precise float _562 = 0.0 * _552;
    precise float _563 = _562 + _561;
    precise float _564 = _539 * 0.0;
    precise float _565 = 1.0 * _546;
    precise float _566 = _565 + _564;
    precise float _567 = 0.0 * _553;
    precise float _568 = _567 + _566;
    float _572 = inversesqrt(dot(vec3(_519, _521, _523), vec3(_519, _521, _523)));
    precise float _573 = _519 * _572;
    precise float _574 = _521 * _572;
    precise float _575 = _523 * _572;
    precise float _576 = _563 * _575;
    precise float _577 = _568 * _574;
    precise float _578 = _576 - _577;
    precise float _579 = _568 * _573;
    precise float _580 = _558 * _575;
    precise float _581 = _579 - _580;
    precise float _582 = _558 * _574;
    precise float _583 = _563 * _573;
    precise float _584 = _582 - _583;
    float _588 = inversesqrt(dot(vec3(_578, _581, _584), vec3(_578, _581, _584)));
    precise float _589 = _588 * _578;
    precise float _590 = _588 * _581;
    precise float _591 = _588 * _584;
    precise float _592 = _530 + 1.0;
    precise float _594 = cbMtdParam._m0[10u].y * log2(_592);
    precise float _595 = _446 - _503;
    precise float _596 = _453 - _510;
    precise float _597 = _460 - _517;
    precise float _598 = dot(vec3(_589, _590, _591), vec3(_595, _596, _597));
    precise float _601 = _589 * _598;
    precise float _602 = _590 * _598;
    precise float _603 = _591 * _598;
    precise float _604 = _503 + _601;
    precise float _605 = _510 + _602;
    precise float _606 = _517 + _603;
    precise float _607 = _446 - _604;
    precise float _608 = _453 - _605;
    precise float _609 = _460 - _606;
    precise float _610 = _590 * _609;
    precise float _611 = _591 * _608;
    precise float _612 = _610 - _611;
    precise float _613 = _591 * _607;
    precise float _614 = _589 * _609;
    precise float _615 = _613 - _614;
    precise float _616 = _589 * _608;
    precise float _617 = _590 * _607;
    precise float _618 = _616 - _617;
    float _619 = sin(_594);
    float _620 = cos(_594);
    precise float _621 = _607 * _620;
    precise float _622 = _608 * _620;
    precise float _623 = _609 * _620;
    precise float _624 = _619 * _612;
    precise float _625 = _619 * _615;
    precise float _626 = _619 * _618;
    precise float _627 = _621 + _624;
    precise float _628 = _622 + _625;
    precise float _629 = _626 + _623;
    precise float _630 = _604 + _627;
    precise float _631 = _605 + _628;
    precise float _632 = _606 + _629;
    precise float _633 = _630 - _446;
    precise float _634 = _631 - _453;
    precise float _635 = _632 - _460;
    precise float _639 = _446 + (_531 ? 0.0 : _633);
    precise float _640 = _453 + (_531 ? 0.0 : _634);
    precise float _641 = _460 + (_531 ? 0.0 : _635);
    precise float _647 = _639 - cbSceneParam._m0[3u].x;
    precise float _648 = _640 - cbSceneParam._m0[3u].y;
    precise float _649 = _641 - cbSceneParam._m0[3u].z;
    precise float _677 = _647 * cbSceneParam._m0[24u].x;
    precise float _678 = _648 * cbSceneParam._m0[24u].y;
    precise float _679 = _678 + _677;
    precise float _680 = _649 * cbSceneParam._m0[24u].z;
    precise float _681 = _680 + _679;
    precise float _682 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _683 = _682 + _681;
    precise float _684 = _647 * cbSceneParam._m0[25u].x;
    precise float _685 = _648 * cbSceneParam._m0[25u].y;
    precise float _686 = _685 + _684;
    precise float _687 = _649 * cbSceneParam._m0[25u].z;
    precise float _688 = _687 + _686;
    precise float _689 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _690 = _689 + _688;
    precise float _691 = _647 * cbSceneParam._m0[26u].x;
    precise float _692 = _648 * cbSceneParam._m0[26u].y;
    precise float _693 = _692 + _691;
    precise float _694 = _649 * cbSceneParam._m0[26u].z;
    precise float _695 = _694 + _693;
    precise float _696 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _697 = _696 + _695;
    precise float _698 = _647 * cbSceneParam._m0[27u].x;
    precise float _699 = _648 * cbSceneParam._m0[27u].y;
    precise float _700 = _699 + _698;
    precise float _701 = _649 * cbSceneParam._m0[27u].z;
    precise float _702 = _701 + _700;
    precise float _703 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _704 = _703 + _702;
    gl_Position.x = _683;
    gl_Position.y = _690;
    gl_Position.z = _697;
    gl_Position.w = _704;
    POSITION_1.x = _683;
    POSITION_1.y = _690;
    POSITION_1.z = _697;
    POSITION_1.w = _704;
    NORMAL_1.x = fma(_191, _434, fma(_190, _431, _428 * _188));
    NORMAL_1.y = fma(_191, _435, fma(_190, _432, _429 * _188));
    NORMAL_1.z = fma(_191, _436, fma(_190, _433, _430 * _188));
    NORMAL_1.w = float(_247);
    TANGENT_1.x = fma(_202, _434, fma(_201, _431, _428 * _200));
    TANGENT_1.y = fma(_202, _435, fma(_201, _432, _429 * _200));
    TANGENT_1.z = fma(_202, _436, fma(_201, _433, _430 * _200));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_683, _690, _697, _704), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_683, _690, _697, _704), vec4(cbInstanceData._m0[_259 + 3u]));
}


