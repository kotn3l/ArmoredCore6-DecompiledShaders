#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;

uint _666;

void main()
{
    uint _67 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _113 = _67 * 13u;
    uint _118 = _113 + 1u;
    uint _122 = _113 + 2u;
    uvec4 _130 = floatBitsToUint(cbInstanceData._m0[_113 + 7u]);
    uint _132 = _130.w;
    uint _134 = min(_130.y, 8u);
    precise float _138 = POSITION.x + 0.0;
    precise float _139 = POSITION.y + 0.0;
    precise float _140 = POSITION.z + 0.0;
    uint _145 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _67;
    precise float _149 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _153 = isnan(_149) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _149 : max(0.001000000047497451305389404296875, _149));
    precise float _155 = BLENDWEIGHT.x / _153;
    precise float _156 = BLENDWEIGHT.y / _153;
    precise float _157 = BLENDWEIGHT.z / _153;
    precise float _158 = BLENDWEIGHT.w / _153;
    uvec4 _165 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_145)).x * 13u) + 4u]);
    uint _166 = _165.x;
    uint _168 = (_166 + uint(float(BLENDINDICES.x))) * 3u;
    uint _175 = _168 + 1u;
    uint _182 = _168 + 2u;
    precise float _189 = _155 * cbObjMatrix._m0[_168].x;
    precise float _190 = _155 * cbObjMatrix._m0[_175].x;
    precise float _191 = _155 * cbObjMatrix._m0[_182].x;
    precise float _192 = _155 * cbObjMatrix._m0[_168].y;
    precise float _193 = _155 * cbObjMatrix._m0[_175].y;
    precise float _194 = _155 * cbObjMatrix._m0[_182].y;
    precise float _195 = _155 * cbObjMatrix._m0[_168].z;
    precise float _196 = _155 * cbObjMatrix._m0[_175].z;
    precise float _197 = _155 * cbObjMatrix._m0[_182].z;
    precise float _198 = _155 * cbObjMatrix._m0[_168].w;
    precise float _199 = _155 * cbObjMatrix._m0[_175].w;
    precise float _200 = _155 * cbObjMatrix._m0[_182].w;
    uint _203 = (_166 + uint(float(BLENDINDICES.y))) * 3u;
    uint _210 = _203 + 1u;
    uint _217 = _203 + 2u;
    precise float _224 = _156 * cbObjMatrix._m0[_203].x;
    precise float _225 = _156 * cbObjMatrix._m0[_210].x;
    precise float _226 = _156 * cbObjMatrix._m0[_217].x;
    precise float _227 = _156 * cbObjMatrix._m0[_203].y;
    precise float _228 = _156 * cbObjMatrix._m0[_210].y;
    precise float _229 = _156 * cbObjMatrix._m0[_217].y;
    precise float _230 = _156 * cbObjMatrix._m0[_203].z;
    precise float _231 = _156 * cbObjMatrix._m0[_210].z;
    precise float _232 = _156 * cbObjMatrix._m0[_217].z;
    precise float _233 = _156 * cbObjMatrix._m0[_203].w;
    precise float _234 = _156 * cbObjMatrix._m0[_210].w;
    precise float _235 = _156 * cbObjMatrix._m0[_217].w;
    precise float _236 = _189 + _224;
    precise float _237 = _190 + _225;
    precise float _238 = _191 + _226;
    precise float _239 = _192 + _227;
    precise float _240 = _193 + _228;
    precise float _241 = _194 + _229;
    precise float _242 = _195 + _230;
    precise float _243 = _196 + _231;
    precise float _244 = _197 + _232;
    precise float _245 = _198 + _233;
    precise float _246 = _199 + _234;
    precise float _247 = _200 + _235;
    uint _250 = (_166 + uint(float(BLENDINDICES.z))) * 3u;
    uint _257 = _250 + 1u;
    uint _264 = _250 + 2u;
    precise float _271 = _157 * cbObjMatrix._m0[_250].x;
    precise float _272 = _157 * cbObjMatrix._m0[_257].x;
    precise float _273 = _157 * cbObjMatrix._m0[_264].x;
    precise float _274 = _157 * cbObjMatrix._m0[_250].y;
    precise float _275 = _157 * cbObjMatrix._m0[_257].y;
    precise float _276 = _157 * cbObjMatrix._m0[_264].y;
    precise float _277 = _157 * cbObjMatrix._m0[_250].z;
    precise float _278 = _157 * cbObjMatrix._m0[_257].z;
    precise float _279 = _157 * cbObjMatrix._m0[_264].z;
    precise float _280 = _157 * cbObjMatrix._m0[_250].w;
    precise float _281 = _157 * cbObjMatrix._m0[_257].w;
    precise float _282 = _157 * cbObjMatrix._m0[_264].w;
    precise float _283 = _236 + _271;
    precise float _284 = _237 + _272;
    precise float _285 = _238 + _273;
    precise float _286 = _239 + _274;
    precise float _287 = _240 + _275;
    precise float _288 = _241 + _276;
    precise float _289 = _242 + _277;
    precise float _290 = _243 + _278;
    precise float _291 = _244 + _279;
    precise float _292 = _245 + _280;
    precise float _293 = _246 + _281;
    precise float _294 = _247 + _282;
    uint _297 = (_166 + uint(float(BLENDINDICES.w))) * 3u;
    uint _304 = _297 + 1u;
    uint _311 = _297 + 2u;
    precise float _318 = _158 * cbObjMatrix._m0[_297].x;
    precise float _319 = _158 * cbObjMatrix._m0[_304].x;
    precise float _320 = _158 * cbObjMatrix._m0[_311].x;
    precise float _321 = _158 * cbObjMatrix._m0[_297].y;
    precise float _322 = _158 * cbObjMatrix._m0[_304].y;
    precise float _323 = _158 * cbObjMatrix._m0[_311].y;
    precise float _324 = _158 * cbObjMatrix._m0[_297].z;
    precise float _325 = _158 * cbObjMatrix._m0[_304].z;
    precise float _326 = _158 * cbObjMatrix._m0[_311].z;
    precise float _327 = _158 * cbObjMatrix._m0[_297].w;
    precise float _328 = _158 * cbObjMatrix._m0[_304].w;
    precise float _329 = _158 * cbObjMatrix._m0[_311].w;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _138 * _330;
    precise float _343 = _139 * _333;
    precise float _344 = _343 + _342;
    precise float _345 = _140 * _336;
    precise float _346 = _345 + _344;
    precise float _347 = 1.0 * _339;
    precise float _348 = _347 + _346;
    precise float _349 = _138 * _331;
    precise float _350 = _139 * _334;
    precise float _351 = _350 + _349;
    precise float _352 = _140 * _337;
    precise float _353 = _352 + _351;
    precise float _354 = 1.0 * _340;
    precise float _355 = _354 + _353;
    precise float _356 = _138 * _332;
    precise float _357 = _139 * _335;
    precise float _358 = _357 + _356;
    precise float _359 = _140 * _338;
    precise float _360 = _359 + _358;
    precise float _361 = 1.0 * _341;
    precise float _362 = _361 + _360;
    precise float _364 = _348 * _348;
    precise float _365 = _355 * _355;
    precise float _366 = _364 + _365;
    precise float _367 = _362 * _362;
    precise float _368 = _366 + _367;
    precise float _370 = cbMtdParam._m0[10u].z * sqrt(_368);
    precise float _380 = cbInstanceData._m0[_113].x * 0.0;
    precise float _381 = 0.0 * cbInstanceData._m0[_113].y;
    precise float _382 = _381 + _380;
    precise float _383 = 0.0 * cbInstanceData._m0[_113].z;
    precise float _384 = _383 + _382;
    precise float _385 = 1.0 * cbInstanceData._m0[_113].w;
    precise float _386 = _385 + _384;
    precise float _387 = cbInstanceData._m0[_118].x * 0.0;
    precise float _388 = 0.0 * cbInstanceData._m0[_118].y;
    precise float _389 = _388 + _387;
    precise float _390 = 0.0 * cbInstanceData._m0[_118].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbInstanceData._m0[_118].w;
    precise float _393 = _392 + _391;
    precise float _394 = cbInstanceData._m0[_122].x * 0.0;
    precise float _395 = 0.0 * cbInstanceData._m0[_122].y;
    precise float _396 = _395 + _394;
    precise float _397 = 0.0 * cbInstanceData._m0[_122].z;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * cbInstanceData._m0[_122].w;
    precise float _400 = _399 + _398;
    precise float _401 = cbPerFrame._m0[22u].x + _370;
    float _402;
    float _404;
    float _406;
    if (_134 == 0u)
    {
        _402 = 0.0;
        _404 = 0.0;
        _406 = 0.0;
    }
    else
    {
        uint _596 = _130.z;
        precise float _403;
        precise float _405;
        precise float _407;
        float _738;
        float _740;
        float _742;
        float _597 = 0.0;
        float _598 = 0.0;
        float _599 = 0.0;
        uint _600 = _596;
        uint _602 = 0u;
        float _638;
        float _657;
        vec4 _671;
        float _672;
        float _673;
        float _687;
        float _688;
        float _689;
        float _706;
        float _707;
        float _708;
        float _709;
        bool _710;
        bool _711;
        bool _712;
        precise float _713;
        precise float _714;
        precise float _715;
        float _716;
        float _717;
        float _718;
        precise float _719;
        bool _722;
        for (;;)
        {
            uint _604 = _600 & 255u;
            uint _606 = _604 * 24u;
            uvec3 _616 = uvec3(texelFetch(g_forceParam, int(_606)).x, texelFetch(g_forceParam, int(_606 + 1u)).x, texelFetch(g_forceParam, int(_606 + 2u)).x);
            uint _621 = (_604 * 24u) + 4u;
            vec4 _634 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_621)).x, texelFetch(g_forceParam, int(_621 + 1u)).x, texelFetch(g_forceParam, int(_621 + 2u)).x, texelFetch(g_forceParam, int(_621 + 3u)).x));
            _638 = _634.w;
            uint _640 = (_604 * 24u) + 8u;
            vec4 _653 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_640)).x, texelFetch(g_forceParam, int(_640 + 1u)).x, texelFetch(g_forceParam, int(_640 + 2u)).x, texelFetch(g_forceParam, int(_640 + 3u)).x));
            _657 = _653.w;
            uint _660 = (_604 * 24u) + 12u;
            _671 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_660)).x, texelFetch(g_forceParam, int(_660 + 1u)).x, _666, texelFetch(g_forceParam, int(_660 + 3u)).x));
            _672 = _671.x;
            _673 = _671.w;
            uint _676 = (_604 * 24u) + 16u;
            vec3 _686 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_676)).x, texelFetch(g_forceParam, int(_676 + 1u)).x, texelFetch(g_forceParam, int(_676 + 2u)).x));
            _687 = _686.x;
            _688 = _686.y;
            _689 = _686.z;
            uint _692 = (_604 * 24u) + 20u;
            vec4 _705 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_692)).x, texelFetch(g_forceParam, int(_692 + 1u)).x, texelFetch(g_forceParam, int(_692 + 2u)).x, texelFetch(g_forceParam, int(_692 + 3u)).x));
            _706 = _705.x;
            _707 = _705.y;
            _708 = _705.z;
            _709 = _705.w;
            _710 = _616.x == 1u;
            _711 = _616.y == 1u;
            _712 = _616.z == 1u;
            _713 = _386 - _634.x;
            _714 = _393 - _634.y;
            _715 = _400 - _634.z;
            _716 = _710 ? _653.x : _713;
            _717 = _710 ? _653.y : _714;
            _718 = _710 ? _653.z : _715;
            _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
            _722 = _719 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_722)
            {
                precise float _724 = _713 * _713;
                precise float _725 = _714 * _714;
                precise float _726 = _724 + _725;
                precise float _727 = _715 * _715;
                precise float _728 = _727 + _726;
                float _729 = sqrt(_728);
                float _730 = inversesqrt(_719);
                precise float _731 = _716 * _730;
                precise float _732 = _717 * _730;
                precise float _733 = _718 * _730;
                precise float _735 = _729 / (isnan(0.001000000047497451305389404296875) ? _671.y : (isnan(_671.y) ? 0.001000000047497451305389404296875 : max(_671.y, 0.001000000047497451305389404296875)));
                precise float _736 = 1.0 - _735;
                float _905 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
                float _737 = isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0));
                float _763;
                if (_712)
                {
                    float _750 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
                    precise float _751 = _713 * _750;
                    precise float _752 = _714 * _750;
                    precise float _753 = _715 * _750;
                    precise float _757 = dot(vec3(_731, _732, _733), vec3(_751, _752, _753)) * 0.800000011920928955078125;
                    precise float _759 = _757 + 0.20000000298023223876953125;
                    float _916 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
                    precise float _762 = _737 * (isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0)));
                    _763 = _762;
                }
                else
                {
                    _763 = _737;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_763 > 0.0)
                {
                    bool _766 = _710 && (!_712);
                    precise float _768 = _729 * (-4.0);
                    precise float _772 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _672 : (isnan(_672) ? 0.001000000047497451305389404296875 : max(_672, 0.001000000047497451305389404296875)));
                    precise float _774 = dot(vec2(_731, _733), vec2(_713, _715));
                    precise float _778 = _772 * _774;
                    precise float _779 = float(_766) * _778;
                    precise float _780 = _401 * _772;
                    precise float _781 = _780 - _779;
                    precise float _782 = (_766 ? 0.0 : _768) + _781;
                    precise float _784 = _657 * sin(_782);
                    precise float _785 = _732 * 0.0;
                    precise float _786 = _785 - _733;
                    precise float _787 = _733 * 0.0;
                    precise float _788 = _731 * 0.0;
                    precise float _789 = _787 - _788;
                    precise float _790 = _731 - _785;
                    precise float _791 = _673 * _784;
                    float _792 = _710 ? _791 : 0.0;
                    float _835;
                    if (_711)
                    {
                        precise float _795 = _687 * 2.0;
                        precise float _797 = _707 + _708;
                        precise float _798 = _709 + _797;
                        precise float _800 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _687 : (isnan(_687) ? 0.001000000047497451305389404296875 : max(_687, 0.001000000047497451305389404296875)));
                        precise float _801 = _706 * _800;
                        precise float _802 = (-0.0) - _731;
                        precise float _807 = dot(vec2(_733, _802), vec2(_713, _715)) / _795;
                        precise float _808 = (-0.0) - _807;
                        float _811 = fract(abs(_807));
                        precise float _812 = (-0.0) - _811;
                        precise float _814 = _795 * ((_807 >= _808) ? _811 : _812);
                        precise float _815 = _814 * 6.283184051513671875;
                        precise float _816 = _815 / _795;
                        precise float _818 = (isnan(5.0) ? _687 : (isnan(_687) ? 5.0 : min(_687, 5.0))) * sin(_816);
                        precise float _819 = _774 + _818;
                        precise float _820 = _687 * 0.25;
                        precise float _822 = _401 * _706;
                        precise float _823 = _822 - _820;
                        precise float _824 = _823 - _819;
                        precise float _825 = _706 * _798;
                        precise float _827 = _824 / (isnan(0.001000000047497451305389404296875) ? _825 : (isnan(_825) ? 0.001000000047497451305389404296875 : max(_825, 0.001000000047497451305389404296875)));
                        float _828 = fract(_827);
                        precise float _830 = 1.0 - _828;
                        float _831 = (_827 < 0.0) ? _830 : _828;
                        precise float _832 = _797 / _798;
                        precise float _833 = _707 / _798;
                        float _854;
                        if (_831 < _833)
                        {
                            precise float _852 = _831 / _833;
                            _854 = _852;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_831 < _832)
                            {
                                precise float _864 = _831 - _833;
                                precise float _865 = _832 - _833;
                                precise float _866 = _864 / _865;
                                precise float _855 = 1.0 - _866;
                                frontier_phi_14_13_ladder = _855;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _854 = frontier_phi_14_13_ladder;
                        }
                        precise float _856 = _689 * _854;
                        precise float _857 = _800 * _774;
                        precise float _858 = _401 * _801;
                        precise float _859 = _858 - _857;
                        precise float _861 = _688 + sin(_859);
                        precise float _863 = _856 * abs(_861);
                        precise float _836 = _863 + 0.0;
                        _835 = _836;
                    }
                    else
                    {
                        _835 = 0.0;
                    }
                    precise float _837 = _638 + _784;
                    precise float _838 = _837 + _835;
                    precise float _839 = _731 * _838;
                    precise float _840 = _732 * _838;
                    precise float _841 = _733 * _838;
                    precise float _842 = _786 * _792;
                    precise float _843 = _789 * _792;
                    precise float _844 = _790 * _792;
                    precise float _845 = _842 + _839;
                    precise float _846 = _843 + _840;
                    precise float _847 = _844 + _841;
                    precise float _848 = _763 * _845;
                    precise float _849 = _763 * _846;
                    precise float _850 = _763 * _847;
                    precise float _739 = _848 * 0.0500000007450580596923828125;
                    precise float _741 = _849 * 0.0500000007450580596923828125;
                    precise float _743 = _850 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _739;
                    frontier_phi_5_pred_7_ladder_1 = _741;
                    frontier_phi_5_pred_7_ladder_2 = _743;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _738 = frontier_phi_5_pred;
            _740 = frontier_phi_5_pred_1;
            _742 = frontier_phi_5_pred_2;
            _403 = _597 + _738;
            _405 = _598 + _740;
            _407 = _599 + _742;
            uint _603 = _602 + 1u;
            if (_603 == _134)
            {
                break;
            }
            else
            {
                _597 = _403;
                _598 = _405;
                _599 = _407;
                _600 = (_602 != 3u) ? (_600 >> 8u) : _132;
                _602 = _603;
                continue;
            }
        }
        _402 = _403;
        _404 = _405;
        _406 = _407;
    }
    precise float _408 = _402 * _402;
    precise float _409 = _404 * _404;
    precise float _410 = _408 + _409;
    precise float _411 = _406 * _406;
    precise float _412 = _410 + _411;
    float _413 = sqrt(_412);
    bool _414 = _413 < 0.00011000000085914507508277893066406;
    float _419 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].x, cbInstanceData._m0[_118].x, cbInstanceData._m0[_122].x), vec3(cbInstanceData._m0[_113].x, cbInstanceData._m0[_118].x, cbInstanceData._m0[_122].x)));
    precise float _420 = cbInstanceData._m0[_113].x * _419;
    precise float _421 = cbInstanceData._m0[_118].x * _419;
    precise float _422 = cbInstanceData._m0[_122].x * _419;
    float _426 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].y, cbInstanceData._m0[_118].y, cbInstanceData._m0[_122].y), vec3(cbInstanceData._m0[_113].y, cbInstanceData._m0[_118].y, cbInstanceData._m0[_122].y)));
    precise float _427 = cbInstanceData._m0[_113].y * _426;
    precise float _428 = cbInstanceData._m0[_118].y * _426;
    precise float _429 = cbInstanceData._m0[_122].y * _426;
    float _433 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].z, cbInstanceData._m0[_118].z, cbInstanceData._m0[_122].z), vec3(cbInstanceData._m0[_113].z, cbInstanceData._m0[_118].z, cbInstanceData._m0[_122].z)));
    precise float _434 = cbInstanceData._m0[_113].z * _433;
    precise float _435 = cbInstanceData._m0[_118].z * _433;
    precise float _436 = cbInstanceData._m0[_122].z * _433;
    precise float _437 = _420 * 0.0;
    precise float _438 = 1.0 * _427;
    precise float _439 = _438 + _437;
    precise float _440 = 0.0 * _434;
    precise float _441 = _440 + _439;
    precise float _442 = _421 * 0.0;
    precise float _443 = 1.0 * _428;
    precise float _444 = _443 + _442;
    precise float _445 = 0.0 * _435;
    precise float _446 = _445 + _444;
    precise float _447 = _422 * 0.0;
    precise float _448 = 1.0 * _429;
    precise float _449 = _448 + _447;
    precise float _450 = 0.0 * _436;
    precise float _451 = _450 + _449;
    float _455 = inversesqrt(dot(vec3(_402, _404, _406), vec3(_402, _404, _406)));
    precise float _456 = _402 * _455;
    precise float _457 = _404 * _455;
    precise float _458 = _406 * _455;
    precise float _459 = _446 * _458;
    precise float _460 = _451 * _457;
    precise float _461 = _459 - _460;
    precise float _462 = _451 * _456;
    precise float _463 = _441 * _458;
    precise float _464 = _462 - _463;
    precise float _465 = _441 * _457;
    precise float _466 = _446 * _456;
    precise float _467 = _465 - _466;
    float _471 = inversesqrt(dot(vec3(_461, _464, _467), vec3(_461, _464, _467)));
    precise float _472 = _471 * _461;
    precise float _473 = _471 * _464;
    precise float _474 = _471 * _467;
    precise float _475 = _413 + 1.0;
    precise float _477 = cbMtdParam._m0[10u].y * log2(_475);
    precise float _478 = _348 - _386;
    precise float _479 = _355 - _393;
    precise float _480 = _362 - _400;
    precise float _481 = dot(vec3(_472, _473, _474), vec3(_478, _479, _480));
    precise float _484 = _472 * _481;
    precise float _485 = _473 * _481;
    precise float _486 = _474 * _481;
    precise float _487 = _386 + _484;
    precise float _488 = _393 + _485;
    precise float _489 = _400 + _486;
    precise float _490 = _348 - _487;
    precise float _491 = _355 - _488;
    precise float _492 = _362 - _489;
    precise float _493 = _473 * _492;
    precise float _494 = _474 * _491;
    precise float _495 = _493 - _494;
    precise float _496 = _474 * _490;
    precise float _497 = _472 * _492;
    precise float _498 = _496 - _497;
    precise float _499 = _472 * _491;
    precise float _500 = _473 * _490;
    precise float _501 = _499 - _500;
    float _502 = sin(_477);
    float _503 = cos(_477);
    precise float _504 = _490 * _503;
    precise float _505 = _491 * _503;
    precise float _506 = _492 * _503;
    precise float _507 = _502 * _495;
    precise float _508 = _502 * _498;
    precise float _509 = _502 * _501;
    precise float _510 = _504 + _507;
    precise float _511 = _505 + _508;
    precise float _512 = _509 + _506;
    precise float _513 = _487 + _510;
    precise float _514 = _488 + _511;
    precise float _515 = _489 + _512;
    precise float _516 = _513 - _348;
    precise float _517 = _514 - _355;
    precise float _518 = _515 - _362;
    precise float _522 = _348 + (_414 ? 0.0 : _516);
    precise float _523 = _355 + (_414 ? 0.0 : _517);
    precise float _524 = _362 + (_414 ? 0.0 : _518);
    precise float _530 = _522 - cbSceneParam._m0[3u].x;
    precise float _531 = _523 - cbSceneParam._m0[3u].y;
    precise float _532 = _524 - cbSceneParam._m0[3u].z;
    precise float _560 = _530 * cbSceneParam._m0[24u].x;
    precise float _561 = _531 * cbSceneParam._m0[24u].y;
    precise float _562 = _561 + _560;
    precise float _563 = _532 * cbSceneParam._m0[24u].z;
    precise float _564 = _563 + _562;
    precise float _565 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _566 = _565 + _564;
    precise float _567 = _530 * cbSceneParam._m0[25u].x;
    precise float _568 = _531 * cbSceneParam._m0[25u].y;
    precise float _569 = _568 + _567;
    precise float _570 = _532 * cbSceneParam._m0[25u].z;
    precise float _571 = _570 + _569;
    precise float _572 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _573 = _572 + _571;
    precise float _574 = _530 * cbSceneParam._m0[26u].x;
    precise float _575 = _531 * cbSceneParam._m0[26u].y;
    precise float _576 = _575 + _574;
    precise float _577 = _532 * cbSceneParam._m0[26u].z;
    precise float _578 = _577 + _576;
    precise float _579 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _580 = _579 + _578;
    precise float _581 = _530 * cbSceneParam._m0[27u].x;
    precise float _582 = _531 * cbSceneParam._m0[27u].y;
    precise float _583 = _582 + _581;
    precise float _584 = _532 * cbSceneParam._m0[27u].z;
    precise float _585 = _584 + _583;
    precise float _586 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _587 = _586 + _585;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _566;
    gl_Position.y = _573;
    gl_Position.z = _580;
    gl_Position.w = _587;
}


