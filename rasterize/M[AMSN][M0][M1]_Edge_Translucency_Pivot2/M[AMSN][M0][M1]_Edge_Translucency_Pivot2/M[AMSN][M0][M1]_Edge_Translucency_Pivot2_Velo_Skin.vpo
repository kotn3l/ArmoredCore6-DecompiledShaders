#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _1070;

void main()
{
    uint _91 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _207 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _209 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _219 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _220 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _221 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _231 = _91 * 13u;
    uint _236 = _231 + 1u;
    uint _240 = _231 + 2u;
    uvec4 _248 = floatBitsToUint(cbInstanceData._m0[_231 + 7u]);
    uint _250 = _248.w;
    uint _252 = min(_248.y, 8u);
    precise float _256 = POSITION.x + 0.0;
    precise float _257 = POSITION.y + 0.0;
    precise float _258 = POSITION.z + 0.0;
    uint _263 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _91;
    uvec4 _265 = texelFetch(g_InstanceIndexBuffer, int(_263));
    uint _266 = _265.x;
    precise float _267 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _271 = isnan(_267) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _267 : max(0.001000000047497451305389404296875, _267));
    precise float _273 = BLENDWEIGHT.x / _271;
    precise float _274 = BLENDWEIGHT.y / _271;
    precise float _275 = BLENDWEIGHT.z / _271;
    precise float _276 = BLENDWEIGHT.w / _271;
    uint _278 = _266 * 13u;
    uvec4 _282 = floatBitsToUint(cbInstanceData._m0[_278 + 4u]);
    uint _283 = _282.x;
    uint _285 = (_283 + uint(float(BLENDINDICES.x))) * 3u;
    uint _292 = _285 + 1u;
    uint _299 = _285 + 2u;
    precise float _306 = _273 * cbObjMatrix._m0[_285].x;
    precise float _307 = _273 * cbObjMatrix._m0[_292].x;
    precise float _308 = _273 * cbObjMatrix._m0[_299].x;
    precise float _309 = _273 * cbObjMatrix._m0[_285].y;
    precise float _310 = _273 * cbObjMatrix._m0[_292].y;
    precise float _311 = _273 * cbObjMatrix._m0[_299].y;
    precise float _312 = _273 * cbObjMatrix._m0[_285].z;
    precise float _313 = _273 * cbObjMatrix._m0[_292].z;
    precise float _314 = _273 * cbObjMatrix._m0[_299].z;
    precise float _315 = _273 * cbObjMatrix._m0[_285].w;
    precise float _316 = _273 * cbObjMatrix._m0[_292].w;
    precise float _317 = _273 * cbObjMatrix._m0[_299].w;
    uint _320 = (_283 + uint(float(BLENDINDICES.y))) * 3u;
    uint _327 = _320 + 1u;
    uint _334 = _320 + 2u;
    precise float _341 = _274 * cbObjMatrix._m0[_320].x;
    precise float _342 = _274 * cbObjMatrix._m0[_327].x;
    precise float _343 = _274 * cbObjMatrix._m0[_334].x;
    precise float _344 = _274 * cbObjMatrix._m0[_320].y;
    precise float _345 = _274 * cbObjMatrix._m0[_327].y;
    precise float _346 = _274 * cbObjMatrix._m0[_334].y;
    precise float _347 = _274 * cbObjMatrix._m0[_320].z;
    precise float _348 = _274 * cbObjMatrix._m0[_327].z;
    precise float _349 = _274 * cbObjMatrix._m0[_334].z;
    precise float _350 = _274 * cbObjMatrix._m0[_320].w;
    precise float _351 = _274 * cbObjMatrix._m0[_327].w;
    precise float _352 = _274 * cbObjMatrix._m0[_334].w;
    precise float _353 = _306 + _341;
    precise float _354 = _307 + _342;
    precise float _355 = _308 + _343;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    uint _367 = (_283 + uint(float(BLENDINDICES.z))) * 3u;
    uint _374 = _367 + 1u;
    uint _381 = _367 + 2u;
    precise float _388 = _275 * cbObjMatrix._m0[_367].x;
    precise float _389 = _275 * cbObjMatrix._m0[_374].x;
    precise float _390 = _275 * cbObjMatrix._m0[_381].x;
    precise float _391 = _275 * cbObjMatrix._m0[_367].y;
    precise float _392 = _275 * cbObjMatrix._m0[_374].y;
    precise float _393 = _275 * cbObjMatrix._m0[_381].y;
    precise float _394 = _275 * cbObjMatrix._m0[_367].z;
    precise float _395 = _275 * cbObjMatrix._m0[_374].z;
    precise float _396 = _275 * cbObjMatrix._m0[_381].z;
    precise float _397 = _275 * cbObjMatrix._m0[_367].w;
    precise float _398 = _275 * cbObjMatrix._m0[_374].w;
    precise float _399 = _275 * cbObjMatrix._m0[_381].w;
    precise float _400 = _353 + _388;
    precise float _401 = _354 + _389;
    precise float _402 = _355 + _390;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    uint _414 = (_283 + uint(float(BLENDINDICES.w))) * 3u;
    uint _421 = _414 + 1u;
    uint _428 = _414 + 2u;
    precise float _435 = _276 * cbObjMatrix._m0[_414].x;
    precise float _436 = _276 * cbObjMatrix._m0[_421].x;
    precise float _437 = _276 * cbObjMatrix._m0[_428].x;
    precise float _438 = _276 * cbObjMatrix._m0[_414].y;
    precise float _439 = _276 * cbObjMatrix._m0[_421].y;
    precise float _440 = _276 * cbObjMatrix._m0[_428].y;
    precise float _441 = _276 * cbObjMatrix._m0[_414].z;
    precise float _442 = _276 * cbObjMatrix._m0[_421].z;
    precise float _443 = _276 * cbObjMatrix._m0[_428].z;
    precise float _444 = _276 * cbObjMatrix._m0[_414].w;
    precise float _445 = _276 * cbObjMatrix._m0[_421].w;
    precise float _446 = _276 * cbObjMatrix._m0[_428].w;
    precise float _447 = _400 + _435;
    precise float _448 = _401 + _436;
    precise float _449 = _402 + _437;
    precise float _450 = _403 + _438;
    precise float _451 = _404 + _439;
    precise float _452 = _405 + _440;
    precise float _453 = _406 + _441;
    precise float _454 = _407 + _442;
    precise float _455 = _408 + _443;
    precise float _456 = _409 + _444;
    precise float _457 = _410 + _445;
    precise float _458 = _411 + _446;
    precise float _459 = _256 * _447;
    precise float _460 = _257 * _450;
    precise float _461 = _460 + _459;
    precise float _462 = _258 * _453;
    precise float _463 = _462 + _461;
    precise float _464 = 1.0 * _456;
    precise float _465 = _464 + _463;
    precise float _466 = _256 * _448;
    precise float _467 = _257 * _451;
    precise float _468 = _467 + _466;
    precise float _469 = _258 * _454;
    precise float _470 = _469 + _468;
    precise float _471 = 1.0 * _457;
    precise float _472 = _471 + _470;
    precise float _473 = _256 * _449;
    precise float _474 = _257 * _452;
    precise float _475 = _474 + _473;
    precise float _476 = _258 * _455;
    precise float _477 = _476 + _475;
    precise float _478 = 1.0 * _458;
    precise float _479 = _478 + _477;
    float _650 = fma(_210, _453, fma(_209, _450, _447 * _207));
    float _653 = fma(_210, _454, fma(_209, _451, _448 * _207));
    float _656 = fma(_210, _455, fma(_209, _452, _449 * _207));
    precise float _668 = _465 * _465;
    precise float _669 = _472 * _472;
    precise float _670 = _668 + _669;
    precise float _671 = _479 * _479;
    precise float _672 = _670 + _671;
    precise float _674 = cbMtdParam._m0[10u].z * sqrt(_672);
    precise float _684 = cbInstanceData._m0[_231].x * 0.0;
    precise float _685 = 0.0 * cbInstanceData._m0[_231].y;
    precise float _686 = _685 + _684;
    precise float _687 = 0.0 * cbInstanceData._m0[_231].z;
    precise float _688 = _687 + _686;
    precise float _689 = 1.0 * cbInstanceData._m0[_231].w;
    precise float _690 = _689 + _688;
    precise float _691 = cbInstanceData._m0[_236].x * 0.0;
    precise float _692 = 0.0 * cbInstanceData._m0[_236].y;
    precise float _693 = _692 + _691;
    precise float _694 = 0.0 * cbInstanceData._m0[_236].z;
    precise float _695 = _694 + _693;
    precise float _696 = 1.0 * cbInstanceData._m0[_236].w;
    precise float _697 = _696 + _695;
    precise float _698 = cbInstanceData._m0[_240].x * 0.0;
    precise float _699 = 0.0 * cbInstanceData._m0[_240].y;
    precise float _700 = _699 + _698;
    precise float _701 = 0.0 * cbInstanceData._m0[_240].z;
    precise float _702 = _701 + _700;
    precise float _703 = 1.0 * cbInstanceData._m0[_240].w;
    precise float _704 = _703 + _702;
    precise float _705 = cbPerFrame._m0[22u].x + _674;
    float _706;
    float _708;
    float _710;
    if (_252 == 0u)
    {
        _706 = 0.0;
        _708 = 0.0;
        _710 = 0.0;
    }
    else
    {
        uint _1000 = _248.z;
        precise float _707;
        precise float _709;
        precise float _711;
        float _1142;
        float _1144;
        float _1146;
        float _1001 = 0.0;
        float _1002 = 0.0;
        float _1003 = 0.0;
        uint _1004 = _1000;
        uint _1006 = 0u;
        float _1042;
        float _1061;
        vec4 _1075;
        float _1076;
        float _1077;
        float _1091;
        float _1092;
        float _1093;
        float _1110;
        float _1111;
        float _1112;
        float _1113;
        bool _1114;
        bool _1115;
        bool _1116;
        precise float _1117;
        precise float _1118;
        precise float _1119;
        float _1120;
        float _1121;
        float _1122;
        precise float _1123;
        bool _1126;
        for (;;)
        {
            uint _1008 = _1004 & 255u;
            uint _1010 = _1008 * 24u;
            uvec3 _1020 = uvec3(texelFetch(g_forceParam, int(_1010)).x, texelFetch(g_forceParam, int(_1010 + 1u)).x, texelFetch(g_forceParam, int(_1010 + 2u)).x);
            uint _1025 = (_1008 * 24u) + 4u;
            vec4 _1038 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1025)).x, texelFetch(g_forceParam, int(_1025 + 1u)).x, texelFetch(g_forceParam, int(_1025 + 2u)).x, texelFetch(g_forceParam, int(_1025 + 3u)).x));
            _1042 = _1038.w;
            uint _1044 = (_1008 * 24u) + 8u;
            vec4 _1057 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1044)).x, texelFetch(g_forceParam, int(_1044 + 1u)).x, texelFetch(g_forceParam, int(_1044 + 2u)).x, texelFetch(g_forceParam, int(_1044 + 3u)).x));
            _1061 = _1057.w;
            uint _1064 = (_1008 * 24u) + 12u;
            _1075 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1064)).x, texelFetch(g_forceParam, int(_1064 + 1u)).x, _1070, texelFetch(g_forceParam, int(_1064 + 3u)).x));
            _1076 = _1075.x;
            _1077 = _1075.w;
            uint _1080 = (_1008 * 24u) + 16u;
            vec3 _1090 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1080)).x, texelFetch(g_forceParam, int(_1080 + 1u)).x, texelFetch(g_forceParam, int(_1080 + 2u)).x));
            _1091 = _1090.x;
            _1092 = _1090.y;
            _1093 = _1090.z;
            uint _1096 = (_1008 * 24u) + 20u;
            vec4 _1109 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1096)).x, texelFetch(g_forceParam, int(_1096 + 1u)).x, texelFetch(g_forceParam, int(_1096 + 2u)).x, texelFetch(g_forceParam, int(_1096 + 3u)).x));
            _1110 = _1109.x;
            _1111 = _1109.y;
            _1112 = _1109.z;
            _1113 = _1109.w;
            _1114 = _1020.x == 1u;
            _1115 = _1020.y == 1u;
            _1116 = _1020.z == 1u;
            _1117 = _690 - _1038.x;
            _1118 = _697 - _1038.y;
            _1119 = _704 - _1038.z;
            _1120 = _1114 ? _1057.x : _1117;
            _1121 = _1114 ? _1057.y : _1118;
            _1122 = _1114 ? _1057.z : _1119;
            _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
            _1126 = _1123 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_1126)
            {
                precise float _1128 = _1117 * _1117;
                precise float _1129 = _1118 * _1118;
                precise float _1130 = _1128 + _1129;
                precise float _1131 = _1119 * _1119;
                precise float _1132 = _1131 + _1130;
                float _1133 = sqrt(_1132);
                float _1134 = inversesqrt(_1123);
                precise float _1135 = _1120 * _1134;
                precise float _1136 = _1121 * _1134;
                precise float _1137 = _1122 * _1134;
                precise float _1139 = _1133 / (isnan(0.001000000047497451305389404296875) ? _1075.y : (isnan(_1075.y) ? 0.001000000047497451305389404296875 : max(_1075.y, 0.001000000047497451305389404296875)));
                precise float _1140 = 1.0 - _1139;
                float _1309 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
                float _1141 = isnan(1.0) ? _1309 : (isnan(_1309) ? 1.0 : min(_1309, 1.0));
                float _1167;
                if (_1116)
                {
                    float _1154 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
                    precise float _1155 = _1117 * _1154;
                    precise float _1156 = _1118 * _1154;
                    precise float _1157 = _1119 * _1154;
                    precise float _1161 = dot(vec3(_1135, _1136, _1137), vec3(_1155, _1156, _1157)) * 0.800000011920928955078125;
                    precise float _1163 = _1161 + 0.20000000298023223876953125;
                    float _1320 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
                    precise float _1166 = _1141 * (isnan(1.0) ? _1320 : (isnan(_1320) ? 1.0 : min(_1320, 1.0)));
                    _1167 = _1166;
                }
                else
                {
                    _1167 = _1141;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_1167 > 0.0)
                {
                    bool _1170 = _1114 && (!_1116);
                    precise float _1172 = _1133 * (-4.0);
                    precise float _1176 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1076 : (isnan(_1076) ? 0.001000000047497451305389404296875 : max(_1076, 0.001000000047497451305389404296875)));
                    precise float _1178 = dot(vec2(_1135, _1137), vec2(_1117, _1119));
                    precise float _1182 = _1176 * _1178;
                    precise float _1183 = float(_1170) * _1182;
                    precise float _1184 = _705 * _1176;
                    precise float _1185 = _1184 - _1183;
                    precise float _1186 = (_1170 ? 0.0 : _1172) + _1185;
                    precise float _1188 = _1061 * sin(_1186);
                    precise float _1189 = _1136 * 0.0;
                    precise float _1190 = _1189 - _1137;
                    precise float _1191 = _1137 * 0.0;
                    precise float _1192 = _1135 * 0.0;
                    precise float _1193 = _1191 - _1192;
                    precise float _1194 = _1135 - _1189;
                    precise float _1195 = _1077 * _1188;
                    float _1196 = _1114 ? _1195 : 0.0;
                    float _1239;
                    if (_1115)
                    {
                        precise float _1199 = _1091 * 2.0;
                        precise float _1201 = _1111 + _1112;
                        precise float _1202 = _1113 + _1201;
                        precise float _1204 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1091 : (isnan(_1091) ? 0.001000000047497451305389404296875 : max(_1091, 0.001000000047497451305389404296875)));
                        precise float _1205 = _1110 * _1204;
                        precise float _1206 = (-0.0) - _1135;
                        precise float _1211 = dot(vec2(_1137, _1206), vec2(_1117, _1119)) / _1199;
                        precise float _1212 = (-0.0) - _1211;
                        float _1215 = fract(abs(_1211));
                        precise float _1216 = (-0.0) - _1215;
                        precise float _1218 = _1199 * ((_1211 >= _1212) ? _1215 : _1216);
                        precise float _1219 = _1218 * 6.283184051513671875;
                        precise float _1220 = _1219 / _1199;
                        precise float _1222 = (isnan(5.0) ? _1091 : (isnan(_1091) ? 5.0 : min(_1091, 5.0))) * sin(_1220);
                        precise float _1223 = _1178 + _1222;
                        precise float _1224 = _1091 * 0.25;
                        precise float _1226 = _705 * _1110;
                        precise float _1227 = _1226 - _1224;
                        precise float _1228 = _1227 - _1223;
                        precise float _1229 = _1110 * _1202;
                        precise float _1231 = _1228 / (isnan(0.001000000047497451305389404296875) ? _1229 : (isnan(_1229) ? 0.001000000047497451305389404296875 : max(_1229, 0.001000000047497451305389404296875)));
                        float _1232 = fract(_1231);
                        precise float _1234 = 1.0 - _1232;
                        float _1235 = (_1231 < 0.0) ? _1234 : _1232;
                        precise float _1236 = _1201 / _1202;
                        precise float _1237 = _1111 / _1202;
                        float _1258;
                        if (_1235 < _1237)
                        {
                            precise float _1256 = _1235 / _1237;
                            _1258 = _1256;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1235 < _1236)
                            {
                                precise float _1268 = _1235 - _1237;
                                precise float _1269 = _1236 - _1237;
                                precise float _1270 = _1268 / _1269;
                                precise float _1259 = 1.0 - _1270;
                                frontier_phi_14_13_ladder = _1259;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1258 = frontier_phi_14_13_ladder;
                        }
                        precise float _1260 = _1093 * _1258;
                        precise float _1261 = _1204 * _1178;
                        precise float _1262 = _705 * _1205;
                        precise float _1263 = _1262 - _1261;
                        precise float _1265 = _1092 + sin(_1263);
                        precise float _1267 = _1260 * abs(_1265);
                        precise float _1240 = _1267 + 0.0;
                        _1239 = _1240;
                    }
                    else
                    {
                        _1239 = 0.0;
                    }
                    precise float _1241 = _1042 + _1188;
                    precise float _1242 = _1241 + _1239;
                    precise float _1243 = _1135 * _1242;
                    precise float _1244 = _1136 * _1242;
                    precise float _1245 = _1137 * _1242;
                    precise float _1246 = _1190 * _1196;
                    precise float _1247 = _1193 * _1196;
                    precise float _1248 = _1194 * _1196;
                    precise float _1249 = _1246 + _1243;
                    precise float _1250 = _1247 + _1244;
                    precise float _1251 = _1248 + _1245;
                    precise float _1252 = _1167 * _1249;
                    precise float _1253 = _1167 * _1250;
                    precise float _1254 = _1167 * _1251;
                    precise float _1143 = _1252 * 0.0500000007450580596923828125;
                    precise float _1145 = _1253 * 0.0500000007450580596923828125;
                    precise float _1147 = _1254 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _1143;
                    frontier_phi_5_pred_7_ladder_1 = _1145;
                    frontier_phi_5_pred_7_ladder_2 = _1147;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _1142 = frontier_phi_5_pred;
            _1144 = frontier_phi_5_pred_1;
            _1146 = frontier_phi_5_pred_2;
            _707 = _1001 + _1142;
            _709 = _1002 + _1144;
            _711 = _1003 + _1146;
            uint _1007 = _1006 + 1u;
            if (_1007 == _252)
            {
                break;
            }
            else
            {
                _1001 = _707;
                _1002 = _709;
                _1003 = _711;
                _1004 = (_1006 != 3u) ? (_1004 >> 8u) : _250;
                _1006 = _1007;
                continue;
            }
        }
        _706 = _707;
        _708 = _709;
        _710 = _711;
    }
    precise float _712 = _706 * _706;
    precise float _713 = _708 * _708;
    precise float _714 = _712 + _713;
    precise float _715 = _710 * _710;
    precise float _716 = _714 + _715;
    float _717 = sqrt(_716);
    bool _718 = _717 < 0.00011000000085914507508277893066406;
    float _723 = inversesqrt(dot(vec3(cbInstanceData._m0[_231].x, cbInstanceData._m0[_236].x, cbInstanceData._m0[_240].x), vec3(cbInstanceData._m0[_231].x, cbInstanceData._m0[_236].x, cbInstanceData._m0[_240].x)));
    precise float _724 = cbInstanceData._m0[_231].x * _723;
    precise float _725 = cbInstanceData._m0[_236].x * _723;
    precise float _726 = cbInstanceData._m0[_240].x * _723;
    float _730 = inversesqrt(dot(vec3(cbInstanceData._m0[_231].y, cbInstanceData._m0[_236].y, cbInstanceData._m0[_240].y), vec3(cbInstanceData._m0[_231].y, cbInstanceData._m0[_236].y, cbInstanceData._m0[_240].y)));
    precise float _731 = cbInstanceData._m0[_231].y * _730;
    precise float _732 = cbInstanceData._m0[_236].y * _730;
    precise float _733 = cbInstanceData._m0[_240].y * _730;
    float _737 = inversesqrt(dot(vec3(cbInstanceData._m0[_231].z, cbInstanceData._m0[_236].z, cbInstanceData._m0[_240].z), vec3(cbInstanceData._m0[_231].z, cbInstanceData._m0[_236].z, cbInstanceData._m0[_240].z)));
    precise float _738 = cbInstanceData._m0[_231].z * _737;
    precise float _739 = cbInstanceData._m0[_236].z * _737;
    precise float _740 = cbInstanceData._m0[_240].z * _737;
    precise float _741 = _724 * 0.0;
    precise float _742 = 1.0 * _731;
    precise float _743 = _742 + _741;
    precise float _744 = 0.0 * _738;
    precise float _745 = _744 + _743;
    precise float _746 = _725 * 0.0;
    precise float _747 = 1.0 * _732;
    precise float _748 = _747 + _746;
    precise float _749 = 0.0 * _739;
    precise float _750 = _749 + _748;
    precise float _751 = _726 * 0.0;
    precise float _752 = 1.0 * _733;
    precise float _753 = _752 + _751;
    precise float _754 = 0.0 * _740;
    precise float _755 = _754 + _753;
    float _759 = inversesqrt(dot(vec3(_706, _708, _710), vec3(_706, _708, _710)));
    precise float _760 = _706 * _759;
    precise float _761 = _708 * _759;
    precise float _762 = _710 * _759;
    precise float _763 = _750 * _762;
    precise float _764 = _755 * _761;
    precise float _765 = _763 - _764;
    precise float _766 = _755 * _760;
    precise float _767 = _745 * _762;
    precise float _768 = _766 - _767;
    precise float _769 = _745 * _761;
    precise float _770 = _750 * _760;
    precise float _771 = _769 - _770;
    float _775 = inversesqrt(dot(vec3(_765, _768, _771), vec3(_765, _768, _771)));
    precise float _776 = _775 * _765;
    precise float _777 = _775 * _768;
    precise float _778 = _775 * _771;
    precise float _779 = _717 + 1.0;
    precise float _781 = cbMtdParam._m0[10u].y * log2(_779);
    precise float _782 = _465 - _690;
    precise float _783 = _472 - _697;
    precise float _784 = _479 - _704;
    precise float _785 = dot(vec3(_776, _777, _778), vec3(_782, _783, _784));
    precise float _788 = _776 * _785;
    precise float _789 = _777 * _785;
    precise float _790 = _778 * _785;
    precise float _791 = _690 + _788;
    precise float _792 = _697 + _789;
    precise float _793 = _704 + _790;
    precise float _794 = _465 - _791;
    precise float _795 = _472 - _792;
    precise float _796 = _479 - _793;
    precise float _797 = _777 * _796;
    precise float _798 = _778 * _795;
    precise float _799 = _797 - _798;
    precise float _800 = _778 * _794;
    precise float _801 = _776 * _796;
    precise float _802 = _800 - _801;
    precise float _803 = _776 * _795;
    precise float _804 = _777 * _794;
    precise float _805 = _803 - _804;
    float _806 = sin(_781);
    float _807 = cos(_781);
    precise float _808 = _794 * _807;
    precise float _809 = _795 * _807;
    precise float _810 = _796 * _807;
    precise float _811 = _806 * _799;
    precise float _812 = _806 * _802;
    precise float _813 = _806 * _805;
    precise float _814 = _808 + _811;
    precise float _815 = _809 + _812;
    precise float _816 = _813 + _810;
    precise float _817 = _791 + _814;
    precise float _818 = _792 + _815;
    precise float _819 = _793 + _816;
    precise float _820 = _817 - _465;
    precise float _821 = _818 - _472;
    precise float _822 = _819 - _479;
    float _823 = _718 ? 0.0 : _820;
    float _824 = _718 ? 0.0 : _821;
    float _825 = _718 ? 0.0 : _822;
    precise float _826 = _465 + _823;
    precise float _827 = _472 + _824;
    precise float _828 = _479 + _825;
    float _829 = (((((cbPrevObjMatrix._m0[_320].w * _274) + (cbPrevObjMatrix._m0[_285].w * _273)) + (cbPrevObjMatrix._m0[_367].w * _275)) + (cbPrevObjMatrix._m0[_414].w * _276)) + fma(_258, (((cbPrevObjMatrix._m0[_320].z * _274) + (cbPrevObjMatrix._m0[_285].z * _273)) + (cbPrevObjMatrix._m0[_367].z * _275)) + (cbPrevObjMatrix._m0[_414].z * _276), fma(_257, (((cbPrevObjMatrix._m0[_320].y * _274) + (cbPrevObjMatrix._m0[_285].y * _273)) + (cbPrevObjMatrix._m0[_367].y * _275)) + (cbPrevObjMatrix._m0[_414].y * _276), ((((cbPrevObjMatrix._m0[_320].x * _274) + (cbPrevObjMatrix._m0[_285].x * _273)) + (cbPrevObjMatrix._m0[_367].x * _275)) + (cbPrevObjMatrix._m0[_414].x * _276)) * _256))) + _823;
    float _830 = (((((cbPrevObjMatrix._m0[_327].w * _274) + (cbPrevObjMatrix._m0[_292].w * _273)) + (cbPrevObjMatrix._m0[_374].w * _275)) + (cbPrevObjMatrix._m0[_421].w * _276)) + fma(_258, (((cbPrevObjMatrix._m0[_327].z * _274) + (cbPrevObjMatrix._m0[_292].z * _273)) + (cbPrevObjMatrix._m0[_374].z * _275)) + (cbPrevObjMatrix._m0[_421].z * _276), fma(_257, (((cbPrevObjMatrix._m0[_327].y * _274) + (cbPrevObjMatrix._m0[_292].y * _273)) + (cbPrevObjMatrix._m0[_374].y * _275)) + (cbPrevObjMatrix._m0[_421].y * _276), ((((cbPrevObjMatrix._m0[_327].x * _274) + (cbPrevObjMatrix._m0[_292].x * _273)) + (cbPrevObjMatrix._m0[_374].x * _275)) + (cbPrevObjMatrix._m0[_421].x * _276)) * _256))) + _824;
    float _831 = (((((cbPrevObjMatrix._m0[_334].w * _274) + (cbPrevObjMatrix._m0[_299].w * _273)) + (cbPrevObjMatrix._m0[_381].w * _275)) + (cbPrevObjMatrix._m0[_428].w * _276)) + fma(_258, (((cbPrevObjMatrix._m0[_334].z * _274) + (cbPrevObjMatrix._m0[_299].z * _273)) + (cbPrevObjMatrix._m0[_381].z * _275)) + (cbPrevObjMatrix._m0[_428].z * _276), fma(_257, (((cbPrevObjMatrix._m0[_334].y * _274) + (cbPrevObjMatrix._m0[_299].y * _273)) + (cbPrevObjMatrix._m0[_381].y * _275)) + (cbPrevObjMatrix._m0[_428].y * _276), ((((cbPrevObjMatrix._m0[_334].x * _274) + (cbPrevObjMatrix._m0[_299].x * _273)) + (cbPrevObjMatrix._m0[_381].x * _275)) + (cbPrevObjMatrix._m0[_428].x * _276)) * _256))) + _825;
    float _838 = _829 - cbSceneParam._m0[28u].x;
    float _839 = _830 - cbSceneParam._m0[28u].y;
    float _840 = _831 - cbSceneParam._m0[28u].z;
    precise float _890 = _826 - cbSceneParam._m0[3u].x;
    precise float _891 = _827 - cbSceneParam._m0[3u].y;
    precise float _892 = _828 - cbSceneParam._m0[3u].z;
    precise float _920 = _890 * cbSceneParam._m0[24u].x;
    precise float _921 = _891 * cbSceneParam._m0[24u].y;
    precise float _922 = _921 + _920;
    precise float _923 = _892 * cbSceneParam._m0[24u].z;
    precise float _924 = _923 + _922;
    precise float _925 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _926 = _925 + _924;
    precise float _927 = _890 * cbSceneParam._m0[25u].x;
    precise float _928 = _891 * cbSceneParam._m0[25u].y;
    precise float _929 = _928 + _927;
    precise float _930 = _892 * cbSceneParam._m0[25u].z;
    precise float _931 = _930 + _929;
    precise float _932 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _933 = _932 + _931;
    precise float _934 = _890 * cbSceneParam._m0[26u].x;
    precise float _935 = _891 * cbSceneParam._m0[26u].y;
    precise float _936 = _935 + _934;
    precise float _937 = _892 * cbSceneParam._m0[26u].z;
    precise float _938 = _937 + _936;
    precise float _939 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _940 = _939 + _938;
    precise float _941 = _890 * cbSceneParam._m0[27u].x;
    precise float _942 = _891 * cbSceneParam._m0[27u].y;
    precise float _943 = _942 + _941;
    precise float _944 = _892 * cbSceneParam._m0[27u].z;
    precise float _945 = _944 + _943;
    precise float _946 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _947 = _946 + _945;
    gl_Position.x = _926;
    gl_Position.y = _933;
    gl_Position.z = _940;
    gl_Position.w = _947;
    POSITION_1.x = _926;
    POSITION_1.y = _933;
    POSITION_1.z = _940;
    POSITION_1.w = _947;
    NORMAL_1.x = _650;
    NORMAL_1.y = _653;
    NORMAL_1.z = _656;
    NORMAL_1.w = float(_266);
    TANGENT_1.x = fma(_221, _453, fma(_220, _450, _447 * _219));
    TANGENT_1.y = fma(_221, _454, fma(_220, _451, _448 * _219));
    TANGENT_1.z = fma(_221, _455, fma(_220, _452, _449 * _219));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _926;
    TEXCOORD_8.y = _933;
    TEXCOORD_8.z = _940;
    TEXCOORD_8.w = _947;
    TEXCOORD_9.x = fma(_840, cbSceneParam._m0[29u].z, fma(_839, cbSceneParam._m0[29u].y, _838 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_840, cbSceneParam._m0[30u].z, fma(_839, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _838)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_840, cbSceneParam._m0[31u].z, fma(_839, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _838)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_840, cbSceneParam._m0[32u].z, fma(_839, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _838)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _650;
    TEXCOORD_10.y = _653;
    TEXCOORD_10.z = _656;
    gl_ClipDistance[0u] = dot(vec4(_926, _933, _940, _947), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_926, _933, _940, _947), vec4(cbInstanceData._m0[_278 + 3u]));
}


