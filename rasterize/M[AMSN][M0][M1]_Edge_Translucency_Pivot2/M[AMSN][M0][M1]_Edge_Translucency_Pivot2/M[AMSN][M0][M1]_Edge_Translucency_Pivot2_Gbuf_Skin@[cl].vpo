#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out float TEXCOORD_11;

uint _791;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_11 = 0.0;
    float _179 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _203 = _79 * 13u;
    uint _208 = _203 + 1u;
    uint _212 = _203 + 2u;
    uvec4 _220 = floatBitsToUint(cbInstanceData._m0[_203 + 7u]);
    uint _222 = _220.w;
    uint _224 = min(_220.y, 8u);
    precise float _228 = POSITION.x + 0.0;
    precise float _229 = POSITION.y + 0.0;
    precise float _230 = POSITION.z + 0.0;
    uint _235 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _237 = texelFetch(g_InstanceIndexBuffer, int(_235));
    uint _238 = _237.x;
    precise float _239 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _243 = isnan(_239) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _239 : max(0.001000000047497451305389404296875, _239));
    precise float _245 = BLENDWEIGHT.x / _243;
    precise float _246 = BLENDWEIGHT.y / _243;
    precise float _247 = BLENDWEIGHT.z / _243;
    precise float _248 = BLENDWEIGHT.w / _243;
    uvec4 _254 = floatBitsToUint(cbInstanceData._m0[(_238 * 13u) + 4u]);
    uint _255 = _254.x;
    uint _257 = (_255 + uint(float(BLENDINDICES.x))) * 3u;
    uint _264 = _257 + 1u;
    uint _271 = _257 + 2u;
    precise float _278 = _245 * cbObjMatrix._m0[_257].x;
    precise float _279 = _245 * cbObjMatrix._m0[_264].x;
    precise float _280 = _245 * cbObjMatrix._m0[_271].x;
    precise float _281 = _245 * cbObjMatrix._m0[_257].y;
    precise float _282 = _245 * cbObjMatrix._m0[_264].y;
    precise float _283 = _245 * cbObjMatrix._m0[_271].y;
    precise float _284 = _245 * cbObjMatrix._m0[_257].z;
    precise float _285 = _245 * cbObjMatrix._m0[_264].z;
    precise float _286 = _245 * cbObjMatrix._m0[_271].z;
    precise float _287 = _245 * cbObjMatrix._m0[_257].w;
    precise float _288 = _245 * cbObjMatrix._m0[_264].w;
    precise float _289 = _245 * cbObjMatrix._m0[_271].w;
    uint _292 = (_255 + uint(float(BLENDINDICES.y))) * 3u;
    uint _299 = _292 + 1u;
    uint _306 = _292 + 2u;
    precise float _313 = _246 * cbObjMatrix._m0[_292].x;
    precise float _314 = _246 * cbObjMatrix._m0[_299].x;
    precise float _315 = _246 * cbObjMatrix._m0[_306].x;
    precise float _316 = _246 * cbObjMatrix._m0[_292].y;
    precise float _317 = _246 * cbObjMatrix._m0[_299].y;
    precise float _318 = _246 * cbObjMatrix._m0[_306].y;
    precise float _319 = _246 * cbObjMatrix._m0[_292].z;
    precise float _320 = _246 * cbObjMatrix._m0[_299].z;
    precise float _321 = _246 * cbObjMatrix._m0[_306].z;
    precise float _322 = _246 * cbObjMatrix._m0[_292].w;
    precise float _323 = _246 * cbObjMatrix._m0[_299].w;
    precise float _324 = _246 * cbObjMatrix._m0[_306].w;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    uint _339 = (_255 + uint(float(BLENDINDICES.z))) * 3u;
    uint _346 = _339 + 1u;
    uint _353 = _339 + 2u;
    precise float _360 = _247 * cbObjMatrix._m0[_339].x;
    precise float _361 = _247 * cbObjMatrix._m0[_346].x;
    precise float _362 = _247 * cbObjMatrix._m0[_353].x;
    precise float _363 = _247 * cbObjMatrix._m0[_339].y;
    precise float _364 = _247 * cbObjMatrix._m0[_346].y;
    precise float _365 = _247 * cbObjMatrix._m0[_353].y;
    precise float _366 = _247 * cbObjMatrix._m0[_339].z;
    precise float _367 = _247 * cbObjMatrix._m0[_346].z;
    precise float _368 = _247 * cbObjMatrix._m0[_353].z;
    precise float _369 = _247 * cbObjMatrix._m0[_339].w;
    precise float _370 = _247 * cbObjMatrix._m0[_346].w;
    precise float _371 = _247 * cbObjMatrix._m0[_353].w;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    uint _386 = (_255 + uint(float(BLENDINDICES.w))) * 3u;
    uint _393 = _386 + 1u;
    uint _400 = _386 + 2u;
    precise float _407 = _248 * cbObjMatrix._m0[_386].x;
    precise float _408 = _248 * cbObjMatrix._m0[_393].x;
    precise float _409 = _248 * cbObjMatrix._m0[_400].x;
    precise float _410 = _248 * cbObjMatrix._m0[_386].y;
    precise float _411 = _248 * cbObjMatrix._m0[_393].y;
    precise float _412 = _248 * cbObjMatrix._m0[_400].y;
    precise float _413 = _248 * cbObjMatrix._m0[_386].z;
    precise float _414 = _248 * cbObjMatrix._m0[_393].z;
    precise float _415 = _248 * cbObjMatrix._m0[_400].z;
    precise float _416 = _248 * cbObjMatrix._m0[_386].w;
    precise float _417 = _248 * cbObjMatrix._m0[_393].w;
    precise float _418 = _248 * cbObjMatrix._m0[_400].w;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _228 * _419;
    precise float _432 = _229 * _422;
    precise float _433 = _432 + _431;
    precise float _434 = _230 * _425;
    precise float _435 = _434 + _433;
    precise float _436 = 1.0 * _428;
    precise float _437 = _436 + _435;
    precise float _438 = _228 * _420;
    precise float _439 = _229 * _423;
    precise float _440 = _439 + _438;
    precise float _441 = _230 * _426;
    precise float _442 = _441 + _440;
    precise float _443 = 1.0 * _429;
    precise float _444 = _443 + _442;
    precise float _445 = _228 * _421;
    precise float _446 = _229 * _424;
    precise float _447 = _446 + _445;
    precise float _448 = _230 * _427;
    precise float _449 = _448 + _447;
    precise float _450 = 1.0 * _430;
    precise float _451 = _450 + _449;
    float _457 = cbSceneParam._m0[3u].x - _437;
    float _458 = cbSceneParam._m0[3u].y - _444;
    float _459 = cbSceneParam._m0[3u].z - _451;
    precise float _486 = _437 * _437;
    precise float _487 = _444 * _444;
    precise float _488 = _486 + _487;
    precise float _489 = _451 * _451;
    precise float _490 = _488 + _489;
    precise float _492 = cbMtdParam._m0[10u].z * sqrt(_490);
    precise float _502 = cbInstanceData._m0[_203].x * 0.0;
    precise float _503 = 0.0 * cbInstanceData._m0[_203].y;
    precise float _504 = _503 + _502;
    precise float _505 = 0.0 * cbInstanceData._m0[_203].z;
    precise float _506 = _505 + _504;
    precise float _507 = 1.0 * cbInstanceData._m0[_203].w;
    precise float _508 = _507 + _506;
    precise float _509 = cbInstanceData._m0[_208].x * 0.0;
    precise float _510 = 0.0 * cbInstanceData._m0[_208].y;
    precise float _511 = _510 + _509;
    precise float _512 = 0.0 * cbInstanceData._m0[_208].z;
    precise float _513 = _512 + _511;
    precise float _514 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _515 = _514 + _513;
    precise float _516 = cbInstanceData._m0[_212].x * 0.0;
    precise float _517 = 0.0 * cbInstanceData._m0[_212].y;
    precise float _518 = _517 + _516;
    precise float _519 = 0.0 * cbInstanceData._m0[_212].z;
    precise float _520 = _519 + _518;
    precise float _521 = 1.0 * cbInstanceData._m0[_212].w;
    precise float _522 = _521 + _520;
    precise float _523 = cbPerFrame._m0[22u].x + _492;
    float _524;
    float _526;
    float _528;
    if (_224 == 0u)
    {
        _524 = 0.0;
        _526 = 0.0;
        _528 = 0.0;
    }
    else
    {
        uint _721 = _220.z;
        precise float _525;
        precise float _527;
        precise float _529;
        float _863;
        float _865;
        float _867;
        float _722 = 0.0;
        float _723 = 0.0;
        float _724 = 0.0;
        uint _725 = _721;
        uint _727 = 0u;
        float _763;
        float _782;
        vec4 _796;
        float _797;
        float _798;
        float _812;
        float _813;
        float _814;
        float _831;
        float _832;
        float _833;
        float _834;
        bool _835;
        bool _836;
        bool _837;
        precise float _838;
        precise float _839;
        precise float _840;
        float _841;
        float _842;
        float _843;
        precise float _844;
        bool _847;
        for (;;)
        {
            uint _729 = _725 & 255u;
            uint _731 = _729 * 24u;
            uvec3 _741 = uvec3(texelFetch(g_forceParam, int(_731)).x, texelFetch(g_forceParam, int(_731 + 1u)).x, texelFetch(g_forceParam, int(_731 + 2u)).x);
            uint _746 = (_729 * 24u) + 4u;
            vec4 _759 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_746)).x, texelFetch(g_forceParam, int(_746 + 1u)).x, texelFetch(g_forceParam, int(_746 + 2u)).x, texelFetch(g_forceParam, int(_746 + 3u)).x));
            _763 = _759.w;
            uint _765 = (_729 * 24u) + 8u;
            vec4 _778 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_765)).x, texelFetch(g_forceParam, int(_765 + 1u)).x, texelFetch(g_forceParam, int(_765 + 2u)).x, texelFetch(g_forceParam, int(_765 + 3u)).x));
            _782 = _778.w;
            uint _785 = (_729 * 24u) + 12u;
            _796 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_785)).x, texelFetch(g_forceParam, int(_785 + 1u)).x, _791, texelFetch(g_forceParam, int(_785 + 3u)).x));
            _797 = _796.x;
            _798 = _796.w;
            uint _801 = (_729 * 24u) + 16u;
            vec3 _811 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_801)).x, texelFetch(g_forceParam, int(_801 + 1u)).x, texelFetch(g_forceParam, int(_801 + 2u)).x));
            _812 = _811.x;
            _813 = _811.y;
            _814 = _811.z;
            uint _817 = (_729 * 24u) + 20u;
            vec4 _830 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_817)).x, texelFetch(g_forceParam, int(_817 + 1u)).x, texelFetch(g_forceParam, int(_817 + 2u)).x, texelFetch(g_forceParam, int(_817 + 3u)).x));
            _831 = _830.x;
            _832 = _830.y;
            _833 = _830.z;
            _834 = _830.w;
            _835 = _741.x == 1u;
            _836 = _741.y == 1u;
            _837 = _741.z == 1u;
            _838 = _508 - _759.x;
            _839 = _515 - _759.y;
            _840 = _522 - _759.z;
            _841 = _835 ? _778.x : _838;
            _842 = _835 ? _778.y : _839;
            _843 = _835 ? _778.z : _840;
            _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
            _847 = _844 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_847)
            {
                precise float _849 = _838 * _838;
                precise float _850 = _839 * _839;
                precise float _851 = _849 + _850;
                precise float _852 = _840 * _840;
                precise float _853 = _852 + _851;
                float _854 = sqrt(_853);
                float _855 = inversesqrt(_844);
                precise float _856 = _841 * _855;
                precise float _857 = _842 * _855;
                precise float _858 = _843 * _855;
                precise float _860 = _854 / (isnan(0.001000000047497451305389404296875) ? _796.y : (isnan(_796.y) ? 0.001000000047497451305389404296875 : max(_796.y, 0.001000000047497451305389404296875)));
                precise float _861 = 1.0 - _860;
                float _1030 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
                float _862 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
                float _888;
                if (_837)
                {
                    float _875 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
                    precise float _876 = _838 * _875;
                    precise float _877 = _839 * _875;
                    precise float _878 = _840 * _875;
                    precise float _882 = dot(vec3(_856, _857, _858), vec3(_876, _877, _878)) * 0.800000011920928955078125;
                    precise float _884 = _882 + 0.20000000298023223876953125;
                    float _1041 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
                    precise float _887 = _862 * (isnan(1.0) ? _1041 : (isnan(_1041) ? 1.0 : min(_1041, 1.0)));
                    _888 = _887;
                }
                else
                {
                    _888 = _862;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_888 > 0.0)
                {
                    bool _891 = _835 && (!_837);
                    precise float _893 = _854 * (-4.0);
                    precise float _897 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _797 : (isnan(_797) ? 0.001000000047497451305389404296875 : max(_797, 0.001000000047497451305389404296875)));
                    precise float _899 = dot(vec2(_856, _858), vec2(_838, _840));
                    precise float _903 = _897 * _899;
                    precise float _904 = float(_891) * _903;
                    precise float _905 = _523 * _897;
                    precise float _906 = _905 - _904;
                    precise float _907 = (_891 ? 0.0 : _893) + _906;
                    precise float _909 = _782 * sin(_907);
                    precise float _910 = _857 * 0.0;
                    precise float _911 = _910 - _858;
                    precise float _912 = _858 * 0.0;
                    precise float _913 = _856 * 0.0;
                    precise float _914 = _912 - _913;
                    precise float _915 = _856 - _910;
                    precise float _916 = _798 * _909;
                    float _917 = _835 ? _916 : 0.0;
                    float _960;
                    if (_836)
                    {
                        precise float _920 = _812 * 2.0;
                        precise float _922 = _832 + _833;
                        precise float _923 = _834 + _922;
                        precise float _925 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _812 : (isnan(_812) ? 0.001000000047497451305389404296875 : max(_812, 0.001000000047497451305389404296875)));
                        precise float _926 = _831 * _925;
                        precise float _927 = (-0.0) - _856;
                        precise float _932 = dot(vec2(_858, _927), vec2(_838, _840)) / _920;
                        precise float _933 = (-0.0) - _932;
                        float _936 = fract(abs(_932));
                        precise float _937 = (-0.0) - _936;
                        precise float _939 = _920 * ((_932 >= _933) ? _936 : _937);
                        precise float _940 = _939 * 6.283184051513671875;
                        precise float _941 = _940 / _920;
                        precise float _943 = (isnan(5.0) ? _812 : (isnan(_812) ? 5.0 : min(_812, 5.0))) * sin(_941);
                        precise float _944 = _899 + _943;
                        precise float _945 = _812 * 0.25;
                        precise float _947 = _523 * _831;
                        precise float _948 = _947 - _945;
                        precise float _949 = _948 - _944;
                        precise float _950 = _831 * _923;
                        precise float _952 = _949 / (isnan(0.001000000047497451305389404296875) ? _950 : (isnan(_950) ? 0.001000000047497451305389404296875 : max(_950, 0.001000000047497451305389404296875)));
                        float _953 = fract(_952);
                        precise float _955 = 1.0 - _953;
                        float _956 = (_952 < 0.0) ? _955 : _953;
                        precise float _957 = _922 / _923;
                        precise float _958 = _832 / _923;
                        float _979;
                        if (_956 < _958)
                        {
                            precise float _977 = _956 / _958;
                            _979 = _977;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_956 < _957)
                            {
                                precise float _989 = _956 - _958;
                                precise float _990 = _957 - _958;
                                precise float _991 = _989 / _990;
                                precise float _980 = 1.0 - _991;
                                frontier_phi_14_13_ladder = _980;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _979 = frontier_phi_14_13_ladder;
                        }
                        precise float _981 = _814 * _979;
                        precise float _982 = _925 * _899;
                        precise float _983 = _523 * _926;
                        precise float _984 = _983 - _982;
                        precise float _986 = _813 + sin(_984);
                        precise float _988 = _981 * abs(_986);
                        precise float _961 = _988 + 0.0;
                        _960 = _961;
                    }
                    else
                    {
                        _960 = 0.0;
                    }
                    precise float _962 = _763 + _909;
                    precise float _963 = _962 + _960;
                    precise float _964 = _856 * _963;
                    precise float _965 = _857 * _963;
                    precise float _966 = _858 * _963;
                    precise float _967 = _911 * _917;
                    precise float _968 = _914 * _917;
                    precise float _969 = _915 * _917;
                    precise float _970 = _967 + _964;
                    precise float _971 = _968 + _965;
                    precise float _972 = _969 + _966;
                    precise float _973 = _888 * _970;
                    precise float _974 = _888 * _971;
                    precise float _975 = _888 * _972;
                    precise float _864 = _973 * 0.0500000007450580596923828125;
                    precise float _866 = _974 * 0.0500000007450580596923828125;
                    precise float _868 = _975 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _864;
                    frontier_phi_5_pred_7_ladder_1 = _866;
                    frontier_phi_5_pred_7_ladder_2 = _868;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _863 = frontier_phi_5_pred;
            _865 = frontier_phi_5_pred_1;
            _867 = frontier_phi_5_pred_2;
            _525 = _722 + _863;
            _527 = _723 + _865;
            _529 = _724 + _867;
            uint _728 = _727 + 1u;
            if (_728 == _224)
            {
                break;
            }
            else
            {
                _722 = _525;
                _723 = _527;
                _724 = _529;
                _725 = (_727 != 3u) ? (_725 >> 8u) : _222;
                _727 = _728;
                continue;
            }
        }
        _524 = _525;
        _526 = _527;
        _528 = _529;
    }
    precise float _530 = _524 * _524;
    precise float _531 = _526 * _526;
    precise float _532 = _530 + _531;
    precise float _533 = _528 * _528;
    precise float _534 = _532 + _533;
    float _535 = sqrt(_534);
    bool _536 = _535 < 0.00011000000085914507508277893066406;
    float _541 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_208].x, cbInstanceData._m0[_212].x), vec3(cbInstanceData._m0[_203].x, cbInstanceData._m0[_208].x, cbInstanceData._m0[_212].x)));
    precise float _542 = cbInstanceData._m0[_203].x * _541;
    precise float _543 = cbInstanceData._m0[_208].x * _541;
    precise float _544 = cbInstanceData._m0[_212].x * _541;
    float _548 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_208].y, cbInstanceData._m0[_212].y), vec3(cbInstanceData._m0[_203].y, cbInstanceData._m0[_208].y, cbInstanceData._m0[_212].y)));
    precise float _549 = cbInstanceData._m0[_203].y * _548;
    precise float _550 = cbInstanceData._m0[_208].y * _548;
    precise float _551 = cbInstanceData._m0[_212].y * _548;
    float _555 = inversesqrt(dot(vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_208].z, cbInstanceData._m0[_212].z), vec3(cbInstanceData._m0[_203].z, cbInstanceData._m0[_208].z, cbInstanceData._m0[_212].z)));
    precise float _556 = cbInstanceData._m0[_203].z * _555;
    precise float _557 = cbInstanceData._m0[_208].z * _555;
    precise float _558 = cbInstanceData._m0[_212].z * _555;
    precise float _559 = _542 * 0.0;
    precise float _560 = 1.0 * _549;
    precise float _561 = _560 + _559;
    precise float _562 = 0.0 * _556;
    precise float _563 = _562 + _561;
    precise float _564 = _543 * 0.0;
    precise float _565 = 1.0 * _550;
    precise float _566 = _565 + _564;
    precise float _567 = 0.0 * _557;
    precise float _568 = _567 + _566;
    precise float _569 = _544 * 0.0;
    precise float _570 = 1.0 * _551;
    precise float _571 = _570 + _569;
    precise float _572 = 0.0 * _558;
    precise float _573 = _572 + _571;
    float _577 = inversesqrt(dot(vec3(_524, _526, _528), vec3(_524, _526, _528)));
    precise float _578 = _524 * _577;
    precise float _579 = _526 * _577;
    precise float _580 = _528 * _577;
    precise float _581 = _568 * _580;
    precise float _582 = _573 * _579;
    precise float _583 = _581 - _582;
    precise float _584 = _573 * _578;
    precise float _585 = _563 * _580;
    precise float _586 = _584 - _585;
    precise float _587 = _563 * _579;
    precise float _588 = _568 * _578;
    precise float _589 = _587 - _588;
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    precise float _594 = _593 * _583;
    precise float _595 = _593 * _586;
    precise float _596 = _593 * _589;
    precise float _597 = _535 + 1.0;
    precise float _599 = cbMtdParam._m0[10u].y * log2(_597);
    precise float _600 = _437 - _508;
    precise float _601 = _444 - _515;
    precise float _602 = _451 - _522;
    precise float _603 = dot(vec3(_594, _595, _596), vec3(_600, _601, _602));
    precise float _606 = _594 * _603;
    precise float _607 = _595 * _603;
    precise float _608 = _596 * _603;
    precise float _609 = _508 + _606;
    precise float _610 = _515 + _607;
    precise float _611 = _522 + _608;
    precise float _612 = _437 - _609;
    precise float _613 = _444 - _610;
    precise float _614 = _451 - _611;
    precise float _615 = _595 * _614;
    precise float _616 = _596 * _613;
    precise float _617 = _615 - _616;
    precise float _618 = _596 * _612;
    precise float _619 = _594 * _614;
    precise float _620 = _618 - _619;
    precise float _621 = _594 * _613;
    precise float _622 = _595 * _612;
    precise float _623 = _621 - _622;
    float _624 = sin(_599);
    float _625 = cos(_599);
    precise float _626 = _612 * _625;
    precise float _627 = _613 * _625;
    precise float _628 = _614 * _625;
    precise float _629 = _624 * _617;
    precise float _630 = _624 * _620;
    precise float _631 = _624 * _623;
    precise float _632 = _626 + _629;
    precise float _633 = _627 + _630;
    precise float _634 = _631 + _628;
    precise float _635 = _609 + _632;
    precise float _636 = _610 + _633;
    precise float _637 = _611 + _634;
    precise float _638 = _635 - _437;
    precise float _639 = _636 - _444;
    precise float _640 = _637 - _451;
    precise float _644 = _437 + (_536 ? 0.0 : _638);
    precise float _645 = _444 + (_536 ? 0.0 : _639);
    precise float _646 = _451 + (_536 ? 0.0 : _640);
    precise float _647 = _644 - cbSceneParam._m0[3u].x;
    precise float _648 = _645 - cbSceneParam._m0[3u].y;
    precise float _649 = _646 - cbSceneParam._m0[3u].z;
    precise float _677 = _647 * cbSceneParam._m0[24u].x;
    precise float _678 = _648 * cbSceneParam._m0[24u].y;
    precise float _679 = _678 + _677;
    precise float _680 = _649 * cbSceneParam._m0[24u].z;
    precise float _681 = _680 + _679;
    precise float _682 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _683 = _682 + _681;
    precise float _684 = _647 * cbSceneParam._m0[25u].x;
    precise float _685 = _648 * cbSceneParam._m0[25u].y;
    precise float _686 = _685 + _684;
    precise float _687 = _649 * cbSceneParam._m0[25u].z;
    precise float _688 = _687 + _686;
    precise float _689 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _690 = _689 + _688;
    precise float _691 = _647 * cbSceneParam._m0[26u].x;
    precise float _692 = _648 * cbSceneParam._m0[26u].y;
    precise float _693 = _692 + _691;
    precise float _694 = _649 * cbSceneParam._m0[26u].z;
    precise float _695 = _694 + _693;
    precise float _696 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _697 = _696 + _695;
    precise float _698 = _647 * cbSceneParam._m0[27u].x;
    precise float _699 = _648 * cbSceneParam._m0[27u].y;
    precise float _700 = _699 + _698;
    precise float _701 = _649 * cbSceneParam._m0[27u].z;
    precise float _702 = _701 + _700;
    precise float _703 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _704 = _703 + _702;
    gl_Position.x = _683;
    gl_Position.y = _690;
    gl_Position.z = _697;
    gl_Position.w = _704;
    NORMAL_1.x = fma(_182, _425, fma(_181, _422, _419 * _179));
    NORMAL_1.y = fma(_182, _426, fma(_181, _423, _420 * _179));
    NORMAL_1.z = fma(_182, _427, fma(_181, _424, _421 * _179));
    NORMAL_1.w = float(_238);
    TANGENT_1.x = fma(_193, _425, fma(_192, _422, _419 * _191));
    TANGENT_1.y = fma(_193, _426, fma(_192, _423, _420 * _191));
    TANGENT_1.z = fma(_193, _427, fma(_192, _424, _421 * _191));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_11 = sqrt(((_457 * _457) + (_458 * _458)) + (_459 * _459));
}


