#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _823;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.w;
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3653 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _280 = cbMtdParam._m0[10u].x * _273.x;
    float _283 = fma(_261, _193 * NORMAL.x, fma(_254, _200 * TANGENT.x, (_186 * _178) * _252));
    float _286 = fma(_261, _193 * NORMAL.y, fma(_254, _200 * TANGENT.y, (_186 * _179) * _252));
    float _289 = fma(_261, _193 * NORMAL.z, fma(_254, _200 * TANGENT.z, (_186 * _180) * _252));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3664 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _297 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _298 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _299 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3691 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3702 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3713 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _409 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _412 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _428 = (_425 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3724 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _451 = _448.x * TEXCOORD_3.w;
    float _452 = dot(vec3(_294, _295, _296), vec3(_376, _377, _378));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _294) - _376;
    float _460 = (_455 * _295) - _377;
    float _461 = (_455 * _296) - _378;
    float _462 = dot(vec3(_376, _377, _378), vec3(_294, _295, _296));
    float _465 = abs(_462);
    float _3757 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_298);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _822;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _547 = fma(_520, cbModelParam._m0[26u].z, fma(_516, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512));
        float _551 = fma(_520, cbModelParam._m0[27u].z, fma(_516, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512));
        float _555 = fma(_520, cbModelParam._m0[28u].z, fma(_516, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512));
        float _580 = _512 + _294;
        float _581 = _516 + _295;
        float _582 = _520 + _296;
        float _592 = fma(_582, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _580)) - _547;
        float _593 = fma(_582, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _580)) - _551;
        float _594 = fma(_582, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _580)) - _555;
        float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
        float _611 = ((_598 * _592) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_547 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_598 * _593) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_551 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_598 * _594) / cbModelParam._m0[34u].z) + ((((((_555 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_611, _612, _613), 0.0);
        float _650 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_616.x + (-0.5));
        float _652 = _650 * (_616.y + (-0.5));
        float _653 = _650 * (_616.z + (-0.5));
        float _660 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_623.x + (-0.5));
        float _662 = _660 * (_623.y + (-0.5));
        float _663 = _660 * (_623.z + (-0.5));
        float _670 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_630.x + (-0.5));
        float _672 = _670 * (_630.y + (-0.5));
        float _673 = _670 * (_630.z + (-0.5));
        float _680 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_637.x + (-0.5));
        float _682 = _680 * (_637.y + (-0.5));
        float _683 = _680 * (_637.z + (-0.5));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = _651 * 0.5;
        float _688 = _661 * 0.5;
        float _689 = _671 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _704 = (dot(vec3(_294, _295, _296), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _714 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3805 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_716 + 1.0))) + _721) * _684;
        float _731 = _652 * 0.5;
        float _732 = _662 * 0.5;
        float _733 = _672 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_294, _295, _296), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3838 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_758 + 1.0))) + _763) * _685;
        float _773 = _653 * 0.5;
        float _774 = _663 * 0.5;
        float _775 = _673 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_294, _295, _296), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3871 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_800 + 1.0))) + _805) * _686;
        _822 = _653;
        _824 = _652;
        _825 = _651;
        _826 = _663;
        _827 = _662;
        _828 = _661;
        _829 = _673;
        _830 = _672;
        _831 = _671;
        _832 = _686;
        _833 = _685;
        _834 = _684;
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
    }
    else
    {
        _822 = _823;
        _824 = _823;
        _825 = _823;
        _826 = _823;
        _827 = _823;
        _828 = _823;
        _829 = _823;
        _830 = _823;
        _831 = _823;
        _832 = _823;
        _833 = _823;
        _834 = _823;
        _835 = 0.0;
        _836 = 0.0;
        _837 = 0.0;
    }
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _863 = fma(_520, cbModelParam._m0[30u].z, fma(_516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _512));
        float _867 = fma(_520, cbModelParam._m0[31u].z, fma(_516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _512));
        float _871 = fma(_520, cbModelParam._m0[32u].z, fma(_516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _512));
        float _894 = _512 + _294;
        float _895 = _516 + _295;
        float _896 = _520 + _296;
        float _906 = fma(_896, cbModelParam._m0[30u].z, fma(_895, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894)) - _863;
        float _907 = fma(_896, cbModelParam._m0[31u].z, fma(_895, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894)) - _867;
        float _908 = fma(_896, cbModelParam._m0[32u].z, fma(_895, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894)) - _871;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_863 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_867 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[35u].z) + ((((((_871 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _962 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_929.x + (-0.5));
        float _964 = _962 * (_929.y + (-0.5));
        float _965 = _962 * (_929.z + (-0.5));
        float _972 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_936.x + (-0.5));
        float _974 = _972 * (_936.y + (-0.5));
        float _975 = _972 * (_936.z + (-0.5));
        float _982 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_943.x + (-0.5));
        float _984 = _982 * (_943.y + (-0.5));
        float _985 = _982 * (_943.z + (-0.5));
        float _992 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_950.x + (-0.5));
        float _994 = _992 * (_950.y + (-0.5));
        float _995 = _992 * (_950.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_294, _295, _296), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3934 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1026 + 1.0))) + _1031) * _996;
        float _1041 = _964 * 0.5;
        float _1042 = _974 * 0.5;
        float _1043 = _984 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_294, _295, _296), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3967 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1068 + 1.0))) + _1073) * _997;
        float _1083 = _965 * 0.5;
        float _1084 = _975 * 0.5;
        float _1085 = _985 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_294, _295, _296), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4000 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1110 + 1.0))) + _1115) * _998;
        _1132 = _965;
        _1133 = _964;
        _1134 = _963;
        _1135 = _975;
        _1136 = _974;
        _1137 = _973;
        _1138 = _985;
        _1139 = _984;
        _1140 = _983;
        _1141 = _998;
        _1142 = _997;
        _1143 = _996;
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _823;
        _1133 = _823;
        _1134 = _823;
        _1135 = _823;
        _1136 = _823;
        _1137 = _823;
        _1138 = _823;
        _1139 = _823;
        _1140 = _823;
        _1141 = _823;
        _1142 = _823;
        _1143 = _823;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _837)) + _837;
    float _1179 = fma(_1158, cbSceneParam._m0[89u].z, fma(_1157, cbSceneParam._m0[89u].y, _1156 * cbSceneParam._m0[89u].x));
    float _1182 = fma(_1158, cbSceneParam._m0[90u].z, fma(_1157, cbSceneParam._m0[90u].y, _1156 * cbSceneParam._m0[90u].x));
    float _1185 = fma(_1158, cbSceneParam._m0[91u].z, fma(_1157, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1156));
    float _1200 = _459 * 0.5;
    float _1201 = _460 * 0.5;
    float _1202 = _461 * 0.5;
    float _1203 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1206 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1209 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1243;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1216 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_822, _826, _829, _832));
        float _1220 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_824, _827, _830, _833));
        float _1224 = dot(vec4(_1200, _1201, _1202, 1.0), vec4(_825, _828, _831, _834));
        float _1231 = dot(vec4(cbModelParam._m0[39u]), vec4(_1200, _1201, _1202, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1254;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1245 = dot(vec4(cbModelParam._m0[40u]), vec4(_1200, _1201, _1202, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1245) ? 0.0 : (isnan(0.0) ? _1245 : max(0.0, _1245))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1258 = (_1254 * cbModelParam._m0[1u].x) + (_1243 * (1.0 - cbModelParam._m0[1u].x));
    float _1268 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _298);
    float _1269 = isnan(_1268) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1268 : min(cbModelParam._m0[25u].z, _1268));
    float _1351;
    float _1353;
    float _1355;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1318 = fma(_520, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512)) + cbModelParam._m0[13u].w;
        float _1322 = fma(_520, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512)) + cbModelParam._m0[14u].w;
        float _1326 = fma(_520, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512)) + cbModelParam._m0[15u].w;
        float _1329 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1332 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1335 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1363;
        if (_1329 > 0.0)
        {
            _1363 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1363 = frontier_phi_14_12_ladder;
        }
        float _1537;
        if (_1332 > 0.0)
        {
            _1537 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1537 = frontier_phi_23_19_ladder;
        }
        float _1808;
        if (_1335 > 0.0)
        {
            _1808 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1808 = frontier_phi_35_30_ladder;
        }
        float _1810 = isnan(_1537) ? _1363 : (isnan(_1363) ? _1537 : min(_1363, _1537));
        float _1811 = isnan(_1808) ? _1810 : (isnan(_1810) ? _1808 : min(_1810, _1808));
        float _1815 = (_1811 * _1329) + _1318;
        float _1816 = (_1811 * _1332) + _1322;
        float _1817 = (_1811 * _1335) + _1326;
        float _1818 = _1811 * 9.9999997473787516355514526367188e-05;
        float _1820 = (-1.0) - _1818;
        float _1822 = _1818 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1817 > _1822) || ((_1817 < _1820) || ((_1816 > _1822) || ((_1816 < _1820) || ((_1815 < _1820) || (_1815 > _1822))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1817, cbModelParam._m0[9u].z, fma(_1816, cbModelParam._m0[9u].y, _1815 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1817, cbModelParam._m0[10u].z, fma(_1816, cbModelParam._m0[10u].y, _1815 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1817, cbModelParam._m0[11u].z, fma(_1816, cbModelParam._m0[11u].y, _1815 * cbModelParam._m0[11u].x))), _1269);
            frontier_phi_13_35_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1351 = frontier_phi_13_35_ladder_2;
        _1353 = frontier_phi_13_35_ladder_1;
        _1355 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1269);
        _1351 = _1339.x * cbModelParam._m0[1u].y;
        _1353 = _1339.y * cbModelParam._m0[1u].y;
        _1355 = _1339.z * cbModelParam._m0[1u].y;
    }
    float _1359 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _298);
    float _1360 = isnan(_1359) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1359 : min(cbModelParam._m0[25u].w, _1359));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1417 = fma(_520, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512)) + cbModelParam._m0[21u].w;
        float _1421 = fma(_520, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512)) + cbModelParam._m0[22u].w;
        float _1425 = fma(_520, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512)) + cbModelParam._m0[23u].w;
        float _1428 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1431 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1434 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1542;
        if (_1428 > 0.0)
        {
            _1542 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1542 = frontier_phi_25_21_ladder;
        }
        float _1835;
        if (_1431 > 0.0)
        {
            _1835 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1835 = frontier_phi_37_32_ladder;
        }
        float _1989;
        if (_1434 > 0.0)
        {
            _1989 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _1989 = frontier_phi_46_44_ladder;
        }
        float _1991 = isnan(_1835) ? _1542 : (isnan(_1542) ? _1835 : min(_1542, _1835));
        float _1992 = isnan(_1989) ? _1991 : (isnan(_1991) ? _1989 : min(_1991, _1989));
        float _1996 = (_1992 * _1428) + _1417;
        float _1997 = (_1992 * _1431) + _1421;
        float _1998 = (_1992 * _1434) + _1425;
        float _1999 = _1992 * 9.9999997473787516355514526367188e-05;
        float _2000 = (-1.0) - _1999;
        float _2002 = _1999 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1998 > _2002) || ((_1998 < _2000) || ((_1997 > _2002) || ((_1997 < _2000) || ((_1996 < _2000) || (_1996 > _2002))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1998, cbModelParam._m0[17u].z, fma(_1997, cbModelParam._m0[17u].y, _1996 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1998, cbModelParam._m0[18u].z, fma(_1997, cbModelParam._m0[18u].y, _1996 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1998, cbModelParam._m0[19u].z, fma(_1997, cbModelParam._m0[19u].y, _1996 * cbModelParam._m0[19u].x))), _1360);
            frontier_phi_22_46_ladder = _2068.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2068.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2068.x * cbModelParam._m0[1u].z;
        }
        _1453 = frontier_phi_22_46_ladder_2;
        _1455 = frontier_phi_22_46_ladder_1;
        _1457 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1360);
        _1453 = _1437.x * cbModelParam._m0[1u].z;
        _1455 = _1437.y * cbModelParam._m0[1u].z;
        _1457 = _1437.z * cbModelParam._m0[1u].z;
    }
    float _1469 = ((((1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_480 * _467)) * _451;
    float _1470 = _1469 * ((cbModelParam._m0[1u].w * (_1453 - _1351)) + _1351);
    float _1471 = _1469 * ((cbModelParam._m0[1u].w * (_1455 - _1353)) + _1353);
    float _1472 = _1469 * ((cbModelParam._m0[1u].w * (_1457 - _1355)) + _1355);
    float _1475 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, _1470 * cbSceneParam._m0[91u].x));
    float _1516 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1524 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1528 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1529 = _1516 / _1528;
    float _1530 = _1520 / _1528;
    float _1531 = _1524 / _1528;
    float _1678;
    float _1679;
    float _1680;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1558 = ((uint(_1531 > cbSceneParam._m0[59u].y) + uint(_1531 > cbSceneParam._m0[59u].x)) + uint(_1531 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1559 = _1558 + 43u;
        uint _1567 = _1558 + 44u;
        uint _1575 = _1558 + 45u;
        uint _1583 = _1558 + 46u;
        float _1594 = fma(_1528, cbSceneParam._m0[_1559].w, fma(_1524, cbSceneParam._m0[_1559].z, fma(_1520, cbSceneParam._m0[_1559].y, _1516 * cbSceneParam._m0[_1559].x)));
        float _1598 = fma(_1528, cbSceneParam._m0[_1567].w, fma(_1524, cbSceneParam._m0[_1567].z, fma(_1520, cbSceneParam._m0[_1567].y, _1516 * cbSceneParam._m0[_1567].x)));
        float _1606 = fma(_1528, cbSceneParam._m0[_1583].w, fma(_1524, cbSceneParam._m0[_1583].z, fma(_1520, cbSceneParam._m0[_1583].y, _1516 * cbSceneParam._m0[_1583].x)));
        float _1611 = cbSceneParam._m0[33u].z * _1606;
        float _1613 = cbSceneParam._m0[33u].w * _1606;
        float _1616 = fma(_1528, cbSceneParam._m0[_1575].w, fma(_1524, cbSceneParam._m0[_1575].z, fma(_1520, cbSceneParam._m0[_1575].y, _1516 * cbSceneParam._m0[_1575].x))) / _1606;
        float _1664 = (cbSceneParam._m0[33u].x - sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531))) * cbSceneParam._m0[33u].y;
        float _4126 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1671 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1611 + _1594) / _1606, (_1613 + _1598) / _1606), _1616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 + _1594) / _1606, (_1598 - _1611) / _1606), _1616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1594 - _1611) / _1606, (_1598 - _1613) / _1606), _1616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1594 - _1613) / _1606, (_1611 + _1598) / _1606), _1616), 0.0)).x), vec4(0.25)));
        _1678 = 1.0 - (_1671 * cbSceneParam._m0[34u].x);
        _1679 = 1.0 - (_1671 * cbSceneParam._m0[34u].y);
        _1680 = 1.0 - (_1671 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1678 = 1.0;
        _1679 = 1.0;
        _1680 = 1.0;
    }
    float _1744;
    float _1746;
    float _1748;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1732 = fma(_1528, cbSceneParam._m0[63u].w, fma(_1524, cbSceneParam._m0[63u].z, fma(_1520, cbSceneParam._m0[63u].y, _1516 * cbSceneParam._m0[63u].x)));
        float _1733 = fma(_1528, cbSceneParam._m0[60u].w, fma(_1524, cbSceneParam._m0[60u].z, fma(_1520, cbSceneParam._m0[60u].y, _1516 * cbSceneParam._m0[60u].x))) / _1732;
        float _1734 = fma(_1528, cbSceneParam._m0[61u].w, fma(_1524, cbSceneParam._m0[61u].z, fma(_1520, cbSceneParam._m0[61u].y, _1516 * cbSceneParam._m0[61u].x))) / _1732;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1733 >= cbSceneParam._m0[64u].x) && (_1734 >= cbSceneParam._m0[64u].y)) && (_1733 <= cbSceneParam._m0[64u].z)) && (_1734 <= cbSceneParam._m0[64u].w))
        {
            float _1848 = fma(_1528, cbSceneParam._m0[62u].w, fma(_1524, cbSceneParam._m0[62u].z, fma(_1520, cbSceneParam._m0[62u].y, _1516 * cbSceneParam._m0[62u].x))) / _1732;
            float _1852 = isnan(cbSceneParam._m0[41u].w) ? _1848 : (isnan(_1848) ? cbSceneParam._m0[41u].w : max(_1848, cbSceneParam._m0[41u].w));
            float _1895 = (cbSceneParam._m0[33u].x - sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531))) * cbSceneParam._m0[33u].y;
            float _4142 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
            float _1902 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1733, cbSceneParam._m0[33u].w + _1734), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1733, _1734 - cbSceneParam._m0[33u].z), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1733 - cbSceneParam._m0[33u].z, _1734 - cbSceneParam._m0[33u].w), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1733 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1734), _1852), 0.0)).x), vec4(0.25)));
            float _1906 = 1.0 - (_1902 * cbSceneParam._m0[34u].x);
            float _1907 = 1.0 - (_1902 * cbSceneParam._m0[34u].y);
            float _1908 = 1.0 - (_1902 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1908) ? _1680 : (isnan(_1680) ? _1908 : min(_1680, _1908));
            frontier_phi_34_33_ladder_1 = isnan(_1907) ? _1679 : (isnan(_1679) ? _1907 : min(_1679, _1907));
            frontier_phi_34_33_ladder_2 = isnan(_1906) ? _1678 : (isnan(_1678) ? _1906 : min(_1678, _1906));
        }
        else
        {
            frontier_phi_34_33_ladder = _1680;
            frontier_phi_34_33_ladder_1 = _1679;
            frontier_phi_34_33_ladder_2 = _1678;
        }
        _1744 = frontier_phi_34_33_ladder_2;
        _1746 = frontier_phi_34_33_ladder_1;
        _1748 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1744 = _1678;
        _1746 = _1679;
        _1748 = _1680;
    }
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1763 = _451 + (-1.0);
    float _1768 = (cbLight._m0[_1756].x * _1763) + 1.0;
    float _1769 = (cbLight._m0[_1756].y * _1763) + 1.0;
    float _1770 = (cbLight._m0[_1756].z * _1763) + 1.0;
    float _1771 = (cbLight._m0[_1756].w * _1763) + 1.0;
    uint _1773 = _1755 + 4u;
    float _1785 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_294, _295, _296));
    float _1788 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    float _1789 = cbLight._m0[_1773].x * _1744;
    float _1790 = cbLight._m0[_1773].y * _1746;
    float _1791 = cbLight._m0[_1773].z * _1748;
    uint _1792 = _1755 + 5u;
    float _1804 = dot(vec3(cbLight._m0[_1755 | 1u].xyz), vec3(_294, _295, _296));
    float _1807 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    float _1980;
    float _1981;
    float _1982;
    if (_299 == 0.0)
    {
        float _4178 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _4189 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1917 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
        float _1919 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
        _1980 = ((cbLight._m0[_1792].x * _1807) * _1919) + ((_1789 * _1788) * _1917);
        _1981 = ((_1807 * cbLight._m0[_1792].y) * _1919) + ((_1790 * _1788) * _1917);
        _1982 = ((_1807 * cbLight._m0[_1792].z) * _1919) + ((_1791 * _1788) * _1917);
    }
    else
    {
        float _1929 = _1785 + _299;
        float _1932 = (_299 * 2.0) + 1.0;
        float _1933 = (isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) / _1932;
        float _1940 = _1804 + _299;
        float _1942 = (isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) / _1932;
        _1980 = (((_1942 * cbLight._m0[_1792].x) * _1807) + ((_1789 * _1933) * _1788)) * 0.3183098733425140380859375;
        _1981 = (((_1942 * cbLight._m0[_1792].y) * _1807) + ((_1790 * _1933) * _1788)) * 0.3183098733425140380859375;
        _1982 = (((_1942 * cbLight._m0[_1792].z) * _1807) + ((_1791 * _1933) * _1788)) * 0.3183098733425140380859375;
    }
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1755 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1988)
    {
        _2015 = _1980;
        _2017 = _1981;
        _2019 = _1982;
    }
    else
    {
        uint _2023 = _1755 + 6u;
        float _2039 = (dot(vec3(cbLight._m0[_1755 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4210 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2042 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2015 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1980;
        _2017 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1981;
        _2019 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1982;
    }
    bool _2022 = _1986.y == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2022)
    {
        _2073 = _2015;
        _2075 = _2017;
        _2077 = _2019;
    }
    else
    {
        uint _2248 = _1755 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1755 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4226 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2267 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2073 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2015;
        _2075 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2017;
        _2077 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2019;
    }
    uint _2082 = _1755 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _298) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1755].x + _376;
    float _2101 = cbLight._m0[_1755].y + _377;
    float _2102 = cbLight._m0[_1755].z + _378;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1755].xyz));
    float _4242 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2114 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2115 = dot(vec3(_294, _295, _296), vec3(_2107, _2108, _2109));
    float _4264 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_2107, _2108, _2109));
    float _4275 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2114 * ((_2113 * _2139) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2139) + _2099) * _2113))) * _2113;
    float _4286 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    float _2153 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _2166 = _1755 | 1u;
    uint _2170 = _1755 + 9u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _298) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_2166].x + _376;
    float _2187 = cbLight._m0[_2166].y + _377;
    float _2188 = cbLight._m0[_2166].z + _378;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2166].xyz));
    float _4302 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2200 = dot(vec3(_294, _295, _296), vec3(_2193, _2194, _2195));
    float _4313 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
    float _4324 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2185 * _2185;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2222 = 1.0 - _2185;
    float _2232 = (0.5 / (((_2114 * ((_2199 * _2222) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2222) + _2185) * _2199))) * _2199;
    float _4335 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2235 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    float _2245 = (((_2221 * cbLight._m0[_2170].x) * _2234) * _2235) + ((((cbLight._m0[_2082].x * _1744) * _2138) * _2152) * _2153);
    float _2246 = (((_2221 * cbLight._m0[_2170].y) * _2234) * _2235) + ((((cbLight._m0[_2082].y * _1746) * _2138) * _2152) * _2153);
    float _2247 = (((_2221 * cbLight._m0[_2170].z) * _2234) * _2235) + ((((cbLight._m0[_2082].z * _1748) * _2138) * _2152) * _2153);
    float _2277;
    float _2279;
    float _2281;
    if (_1988)
    {
        _2277 = _2245;
        _2279 = _2246;
        _2281 = _2247;
    }
    else
    {
        uint _2283 = _1755 + 2u;
        uint _2287 = _1755 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _298) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _376;
        float _2304 = cbLight._m0[_2283].y + _377;
        float _2305 = cbLight._m0[_2283].z + _378;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2283].xyz));
        float _4351 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2317 = dot(vec3(_294, _295, _296), vec3(_2310, _2311, _2312));
        float _4362 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4373 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2339 = 1.0 - _2302;
        float _2349 = (0.5 / (((_2114 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2339) + _2302) * _2316))) * _2316;
        float _4384 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2277 = (((_2338 * cbLight._m0[_2287].x) * _2351) * _2352) + _2245;
        _2279 = (((_2338 * cbLight._m0[_2287].y) * _2351) * _2352) + _2246;
        _2281 = (((_2338 * cbLight._m0[_2287].z) * _2351) * _2352) + _2247;
    }
    float _2362;
    float _2364;
    float _2366;
    if (_2022)
    {
        _2362 = _2277;
        _2364 = _2279;
        _2366 = _2281;
    }
    else
    {
        uint _2373 = _1755 + 3u;
        uint _2377 = _1755 + 11u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _298) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _376;
        float _2394 = cbLight._m0[_2373].y + _377;
        float _2395 = cbLight._m0[_2373].z + _378;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2373].xyz));
        float _4400 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2407 = dot(vec3(_294, _295, _296), vec3(_2400, _2401, _2402));
        float _4411 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4422 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2114 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2429) + _2392) * _2406))) * _2406;
        float _4433 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2362 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2277;
        _2364 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2279;
        _2366 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2281;
    }
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_1753.y == 0u)
    {
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2464)));
        float _2485 = (log2(_1531 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            uint _2711 = 0u;
            uint _2720;
            bool _2721;
            for (;;)
            {
                _2720 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                _2721 = _2720 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2721)
                {
                    frontier_phi_69_pred = _2710;
                    frontier_phi_69_pred_1 = _2709;
                    frontier_phi_69_pred_2 = _2708;
                    frontier_phi_69_pred_3 = _2707;
                    frontier_phi_69_pred_4 = _2706;
                    frontier_phi_69_pred_5 = _2705;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2705;
                    _2883 = _2706;
                    _2884 = _2707;
                    _2885 = _2708;
                    _2886 = _2709;
                    _2887 = _2710;
                    _2888 = _2720;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2711 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        float _2928 = _2927.x;
                        float _2929 = _2927.y;
                        float _2930 = _2927.z;
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        uint _2949 = (_2892 * 48u) + 12u;
                        vec2 _2957 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x));
                        float _2963 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
                        float _2964 = _2963 * _1529;
                        float _2965 = _2963 * _1530;
                        float _2966 = _2963 * _1531;
                        float _2967 = _2908.x - _1529;
                        float _2968 = _2908.y - _1530;
                        float _2969 = _2908.z - _1531;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_406, _409, _412), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2908.w);
                        float _4459 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _2984 = sqrt(_2970) * _2927.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2989 = 1.0 - _2988;
                        float _2991 = (_2989 * _2989) * _299;
                        float _2994 = ((_2989 * _2977) + _2988) + _2991;
                        float _2999 = _2984 * _2984;
                        float _3004 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2983) / (((_2991 * 2.0) + 1.0) * ((_2999 * 0.699999988079071044921875) + 1.0));
                        float _3008 = dot(vec3(_2974, _2975, _2976), vec3(_2964, _2965, _2966));
                        float _4475 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3015 = dot(vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966), vec3(_406, _409, _412)) + 1.0;
                        float _3017 = (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * 0.5;
                        float _3024 = ((_3017 * _3017) * _2957.x) * exp2((_2957.y * 32.0) * log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))));
                        float _3026 = _299 / (_299 + 1.0);
                        float _3042 = (-0.0) - _1529;
                        float _3043 = (-0.0) - _1530;
                        float _3044 = (-0.0) - _1531;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3058 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3059 = 1.0 - _467;
                        float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                        float _3067 = _3066 * _3066;
                        float _3068 = _3067 * _3067;
                        float _3069 = _3049 + _2974;
                        float _3070 = _3050 + _2975;
                        float _3071 = _3051 + _2976;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3079 = dot(vec3(_406, _409, _412), vec3(_3049, _3050, _3051));
                        float _4491 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3083 = dot(vec3(_406, _409, _412), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                        float _4502 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                        float _3091 = _2987 * _3067;
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _2977) + _3092;
                        float _4513 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3097 = 1.0 - _3067;
                        float _3107 = (0.5 / (((_3096 * ((_3082 * _3097) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3067) * _3082))) * _3096;
                        float _4524 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3118 = (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3090 * _3090) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2816 = (((((_2928 * 0.3183098733425140380859375) * _3026) * _3024) + _2928) * _3004) + _2885;
                        _2817 = (((((_2929 * 0.3183098733425140380859375) * _3026) * _3024) + _2929) * _3004) + _2886;
                        _2818 = (((((_2930 * 0.3183098733425140380859375) * _3026) * _3024) + _2930) * _3004) + _2887;
                        _2813 = (_3118 * _2944.x) + _2882;
                        _2814 = (_3118 * _2944.y) + _2883;
                        _2815 = (_3118 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2813;
                            _2883 = _2814;
                            _2884 = _2815;
                            _2885 = _2816;
                            _2886 = _2817;
                            _2887 = _2818;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_69_pred = _2818;
                    frontier_phi_69_pred_1 = _2817;
                    frontier_phi_69_pred_2 = _2816;
                    frontier_phi_69_pred_3 = _2815;
                    frontier_phi_69_pred_4 = _2814;
                    frontier_phi_69_pred_5 = _2813;
                }
                _2532 = frontier_phi_69_pred;
                _2530 = frontier_phi_69_pred_1;
                _2528 = frontier_phi_69_pred_2;
                _2526 = frontier_phi_69_pred_3;
                _2524 = frontier_phi_69_pred_4;
                _2522 = frontier_phi_69_pred_5;
                uint _2712 = _2711 + 1u;
                if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2705 = _2522;
                    _2706 = _2524;
                    _2707 = _2526;
                    _2708 = _2528;
                    _2709 = _2530;
                    _2710 = _2532;
                    _2711 = _2712;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((4294967295u << _2538) & _2495) == 0u)
        {
            _2673 = _2521;
            _2675 = _2523;
            _2677 = _2525;
            _2679 = _2527;
            _2681 = _2529;
            _2683 = _2531;
        }
        else
        {
            float _2698 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
            float _2699 = _2698 * _1529;
            float _2700 = _2698 * _1530;
            float _2701 = _2698 * _1531;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2865 = _2521;
                float _2866 = _2523;
                float _2867 = _2525;
                float _2868 = _2527;
                float _2869 = _2529;
                float _2870 = _2531;
                uint _2871 = _2538;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2881)
                    {
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3174 = _2865;
                        float _3175 = _2866;
                        float _3176 = _2867;
                        float _3177 = _2868;
                        float _3178 = _2869;
                        float _3179 = _2870;
                        uint _3180 = _2880;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        vec3 _3237;
                        vec2 _3246;
                        vec4 _3262;
                        vec4 _3278;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3191 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.x;
                            _3224 = _3222.y;
                            _3225 = _3222.z;
                            uint _3227 = (_3191 * 40u) + 8u;
                            _3237 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x));
                            uint _3239 = (_3191 * 40u) + 12u;
                            _3246 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x));
                            uint _3249 = (_3191 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3191 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3191 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3191 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_1531, _3313.z, fma(_1530, _3313.y, _3313.x * _1529)) + _3313.w;
                            _3326 = !((fma(_1531, _3294.z, fma(_1530, _3294.y, _3294.x * _1529)) + _3294.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3326)
                            {
                                float _3352 = _3206.x - _1529;
                                float _3353 = _3206.y - _1530;
                                float _3354 = _3206.z - _1531;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3207 * _3207));
                                float _4535 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3370 = sqrt(_3355) * _3222.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3374 = 1.0 - _3373;
                                float _3376 = (_3374 * _3374) * _299;
                                float _3379 = ((_3374 * dot(vec3(_3359, _3360, _3361), vec3(_406, _409, _412))) + _3373) + _3376;
                                float _3384 = _3370 * _3370;
                                float _3389 = (fma(_1531, _3262.z, fma(_1530, _3262.y, _3262.x * _1529)) + _3262.w) / _3325;
                                float _3390 = (fma(_1531, _3278.z, fma(_1530, _3278.y, _3278.x * _1529)) + _3278.w) / _3325;
                                float _3394 = 1.0 - dot(vec2(_3389, _3390), vec2(_3389, _3390));
                                float _4551 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3396 = _3395 * (((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3366) / (((_3376 * 2.0) + 1.0) * ((_3384 * 0.699999988079071044921875) + 1.0)));
                                float _3397 = (-0.0) - _2699;
                                float _3398 = (-0.0) - _2700;
                                float _3399 = (-0.0) - _2701;
                                float _3400 = dot(vec3(_3359, _3360, _3361), vec3(_2699, _2700, _2701));
                                float _4562 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3407 = dot(vec3(_3397, _3398, _3399), vec3(_406, _409, _412)) + 1.0;
                                float _3409 = (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * 0.5;
                                float _3416 = ((_3409 * _3409) * _3246.x) * exp2((_3246.y * 32.0) * log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))));
                                float _3418 = _299 / (_299 + 1.0);
                                float _3439 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3440 = 1.0 - _467;
                                float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                                float _3448 = _3447 * _3447;
                                float _3449 = _3448 * _3448;
                                float _3450 = _3359 - _2699;
                                float _3451 = _3360 - _2700;
                                float _3452 = _3361 - _2701;
                                float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                                float _3460 = dot(vec3(_406, _409, _412), vec3(_3397, _3398, _3399));
                                float _4578 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3464 = dot(vec3(_406, _409, _412), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                                float _4589 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                                float _3472 = _3372 * _3448;
                                float _3473 = _3472 * _3472;
                                float _3479 = ((1.0 - _3473) * dot(vec3(_406, _409, _412), vec3(_3359, _3360, _3361))) + _3473;
                                float _4600 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3481 = 1.0 - _3448;
                                float _3491 = (0.5 / (((_3480 * ((_3463 * _3481) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3448) * _3463))) * _3480;
                                float _4611 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3501 = (_3395 * _3366) * (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3471 * _3471) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = ((((_3224 * 0.3183098733425140380859375) * _3418) * _3416) + _3224) * _3396;
                                frontier_phi_83_pred_1 = ((((_3223 * 0.3183098733425140380859375) * _3418) * _3416) + _3223) * _3396;
                                frontier_phi_83_pred_2 = _3501 * _3237.z;
                                frontier_phi_83_pred_3 = _3501 * _3237.y;
                                frontier_phi_83_pred_4 = _3501 * _3237.x;
                                frontier_phi_83_pred_5 = ((((_3225 * 0.3183098733425140380859375) * _3418) * _3416) + _3225) * _3396;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3509 = frontier_phi_83_pred;
                            _3508 = frontier_phi_83_pred_1;
                            _3507 = frontier_phi_83_pred_2;
                            _3506 = frontier_phi_83_pred_3;
                            _3505 = frontier_phi_83_pred_4;
                            _3510 = frontier_phi_83_pred_5;
                            _3164 = _3508 + _3177;
                            _3165 = _3509 + _3178;
                            _3166 = _3510 + _3179;
                            _3161 = _3505 + _3174;
                            _3162 = _3506 + _3175;
                            _3163 = _3507 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3166;
                        frontier_phi_77_pred_1 = _3165;
                        frontier_phi_77_pred_2 = _3164;
                        frontier_phi_77_pred_3 = _3163;
                        frontier_phi_77_pred_4 = _3162;
                        frontier_phi_77_pred_5 = _3161;
                    }
                    _2684 = frontier_phi_77_pred;
                    _2682 = frontier_phi_77_pred_1;
                    _2680 = frontier_phi_77_pred_2;
                    _2678 = frontier_phi_77_pred_3;
                    _2676 = frontier_phi_77_pred_4;
                    _2674 = frontier_phi_77_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2674;
                        _2866 = _2676;
                        _2867 = _2678;
                        _2868 = _2680;
                        _2869 = _2682;
                        _2870 = _2684;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2684;
                frontier_phi_63_64_ladder_1 = _2682;
                frontier_phi_63_64_ladder_2 = _2680;
                frontier_phi_63_64_ladder_3 = _2676;
                frontier_phi_63_64_ladder_4 = _2674;
                frontier_phi_63_64_ladder_5 = _2678;
            }
            else
            {
                frontier_phi_63_64_ladder = _2531;
                frontier_phi_63_64_ladder_1 = _2529;
                frontier_phi_63_64_ladder_2 = _2527;
                frontier_phi_63_64_ladder_3 = _2523;
                frontier_phi_63_64_ladder_4 = _2521;
                frontier_phi_63_64_ladder_5 = _2525;
            }
            _2673 = frontier_phi_63_64_ladder_4;
            _2675 = frontier_phi_63_64_ladder_3;
            _2677 = frontier_phi_63_64_ladder_5;
            _2679 = frontier_phi_63_64_ladder_2;
            _2681 = frontier_phi_63_64_ladder_1;
            _2683 = frontier_phi_63_64_ladder;
        }
        float _2688 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2508 = (_2688 * _2679) + _2073;
        _2510 = (_2688 * _2681) + _2075;
        _2512 = (_2688 * _2683) + _2077;
        _2514 = ((_2673 * 0.039999999105930328369140625) * _2688) + _2362;
        _2516 = ((_2675 * 0.039999999105930328369140625) * _2688) + _2364;
        _2518 = ((_2677 * 0.039999999105930328369140625) * _2688) + _2366;
    }
    else
    {
        _2508 = _2073;
        _2510 = _2075;
        _2512 = _2077;
        _2514 = _2362;
        _2516 = _2364;
        _2518 = _2366;
    }
    float _2610;
    float _2611;
    float _2612;
    if (_299 > 0.0)
    {
        uint _2542 = _1755 + 4u;
        float _2548 = (-0.0) - _376;
        float _2550 = (-0.0) - _377;
        float _2551 = (-0.0) - _378;
        float _2552 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_2548, _2550, _2551));
        float _4627 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _462 + 1.0;
        float _2558 = (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))) * 0.5;
        float _2563 = _2558 * _2558;
        float _2564 = _2563 * exp2(log2(isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 32.0);
        float _2566 = _299 / (_299 + 1.0);
        float _2567 = isnan(_1768) ? 1.0 : (isnan(1.0) ? _1768 : min(1.0, _1768));
        uint _2580 = _1755 + 5u;
        float _2586 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2548, _2550, _2551));
        float _4648 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2593 = _2563 * exp2(log2(isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 32.0);
        float _2594 = isnan(_1769) ? 1.0 : (isnan(1.0) ? _1769 : min(1.0, _1769));
        _2610 = ((((_2593 * cbLight._m0[_2580].x) * _2566) * _2594) + ((((cbLight._m0[_2542].x * _1744) * _2564) * _2566) * _2567)) * 0.3183098733425140380859375;
        _2611 = ((((_2593 * cbLight._m0[_2580].y) * _2566) * _2594) + ((((cbLight._m0[_2542].y * _1746) * _2564) * _2566) * _2567)) * 0.3183098733425140380859375;
        _2612 = ((((_2593 * cbLight._m0[_2580].z) * _2566) * _2594) + ((((cbLight._m0[_2542].z * _1748) * _2564) * _2566) * _2567)) * 0.3183098733425140380859375;
    }
    else
    {
        _2610 = 0.0;
        _2611 = 0.0;
        _2612 = 0.0;
    }
    float _4664 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4675 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4686 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4697 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _2639 = cbInstanceData._m0[_425 + 6u].w * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)));
    float _2644 = _384 / cbSceneParam._m0[86u].x;
    float _2645 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2659 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2661 = _2659.x;
    float _2662 = _2659.y;
    float _2663 = _2659.z;
    float _2664 = _2659.w;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2726 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2727 = _2726 / _318;
        float _2738 = _2727 * _369;
        float _2739 = _370 * _2727;
        float _2740 = (-0.0) - _2739;
        float _2741 = _2727 * _371;
        float _2743 = (cbSceneParam._m0[77u].w * _2740) / _2726;
        float _2744 = _2743 + cbSceneParam._m0[79u].w;
        float _2745 = cbSceneParam._m0[79u].w - _2739;
        float _2751 = sqrt(((_2738 * _2738) + (_2739 * _2739)) + (_2741 * _2741));
        float _2754 = (1.0 - (cbSceneParam._m0[77u].w / _2726)) * _2751;
        float _2759 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2761 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2740 - _2743) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2744 > 0.0) ? exp2(_2759 * _2744) : (2.0 - exp2(_2761 * _2744))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2754;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : max(_2744, _2745));
            float _2840 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : min(_2744, _2745));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _3123 = ((abs(_2751 / _2740) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2759 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2759 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2761 * _2849) - exp2(_2761 * _2850)) * _2838))) + (_2754 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2664);
        _2763 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2661;
        _2765 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2662;
        _2767 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2663;
        _2769 = _3134 * _2664;
    }
    else
    {
        _2763 = _2661;
        _2765 = _2662;
        _2767 = _2663;
        _2769 = _2664;
    }
    float _2781 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2782 = _2781 == 3.0;
    float _2783 = log2(_2769);
    float _2790 = exp2(_2783 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * ((_2508 + ((isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))) * _451)) + _2610)) + ((_2514 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2791 = exp2(_2783 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * ((_2510 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _451)) + _2611)) + ((_2516 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2792 = exp2(_2783 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * ((_2512 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _451)) + _2612)) + ((_2518 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1258)) * cbPerFrame._m0[3u].x));
    float _2801 = (_2781 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2801 * (_2782 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.y = _2801 * (_2782 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.z = _2801 * (_2782 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.w = _2639;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2639;
}


