#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _1044;

void main()
{
    uint _87 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    float _202 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _215 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _216 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _226 = _87 * 13u;
    uint _231 = _226 + 1u;
    uint _235 = _226 + 2u;
    uvec4 _243 = floatBitsToUint(cbInstanceData._m0[_226 + 7u]);
    uint _245 = _243.w;
    uint _247 = min(_243.y, 8u);
    precise float _251 = POSITION.x + 0.0;
    precise float _252 = POSITION.y + 0.0;
    precise float _253 = POSITION.z + 0.0;
    uint _258 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _87;
    uvec4 _260 = texelFetch(g_InstanceIndexBuffer, int(_258));
    uint _261 = _260.x;
    precise float _262 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _266 = isnan(_262) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _262 : max(0.001000000047497451305389404296875, _262));
    precise float _268 = BLENDWEIGHT.x / _266;
    precise float _269 = BLENDWEIGHT.y / _266;
    precise float _270 = BLENDWEIGHT.z / _266;
    precise float _271 = BLENDWEIGHT.w / _266;
    uvec4 _277 = floatBitsToUint(cbInstanceData._m0[(_261 * 13u) + 4u]);
    uint _278 = _277.x;
    uint _280 = (_278 + uint(float(BLENDINDICES.x))) * 3u;
    uint _287 = _280 + 1u;
    uint _294 = _280 + 2u;
    precise float _301 = _268 * cbObjMatrix._m0[_280].x;
    precise float _302 = _268 * cbObjMatrix._m0[_287].x;
    precise float _303 = _268 * cbObjMatrix._m0[_294].x;
    precise float _304 = _268 * cbObjMatrix._m0[_280].y;
    precise float _305 = _268 * cbObjMatrix._m0[_287].y;
    precise float _306 = _268 * cbObjMatrix._m0[_294].y;
    precise float _307 = _268 * cbObjMatrix._m0[_280].z;
    precise float _308 = _268 * cbObjMatrix._m0[_287].z;
    precise float _309 = _268 * cbObjMatrix._m0[_294].z;
    precise float _310 = _268 * cbObjMatrix._m0[_280].w;
    precise float _311 = _268 * cbObjMatrix._m0[_287].w;
    precise float _312 = _268 * cbObjMatrix._m0[_294].w;
    uint _315 = (_278 + uint(float(BLENDINDICES.y))) * 3u;
    uint _322 = _315 + 1u;
    uint _329 = _315 + 2u;
    precise float _336 = _269 * cbObjMatrix._m0[_315].x;
    precise float _337 = _269 * cbObjMatrix._m0[_322].x;
    precise float _338 = _269 * cbObjMatrix._m0[_329].x;
    precise float _339 = _269 * cbObjMatrix._m0[_315].y;
    precise float _340 = _269 * cbObjMatrix._m0[_322].y;
    precise float _341 = _269 * cbObjMatrix._m0[_329].y;
    precise float _342 = _269 * cbObjMatrix._m0[_315].z;
    precise float _343 = _269 * cbObjMatrix._m0[_322].z;
    precise float _344 = _269 * cbObjMatrix._m0[_329].z;
    precise float _345 = _269 * cbObjMatrix._m0[_315].w;
    precise float _346 = _269 * cbObjMatrix._m0[_322].w;
    precise float _347 = _269 * cbObjMatrix._m0[_329].w;
    precise float _348 = _301 + _336;
    precise float _349 = _302 + _337;
    precise float _350 = _303 + _338;
    precise float _351 = _304 + _339;
    precise float _352 = _305 + _340;
    precise float _353 = _306 + _341;
    precise float _354 = _307 + _342;
    precise float _355 = _308 + _343;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    uint _362 = (_278 + uint(float(BLENDINDICES.z))) * 3u;
    uint _369 = _362 + 1u;
    uint _376 = _362 + 2u;
    precise float _383 = _270 * cbObjMatrix._m0[_362].x;
    precise float _384 = _270 * cbObjMatrix._m0[_369].x;
    precise float _385 = _270 * cbObjMatrix._m0[_376].x;
    precise float _386 = _270 * cbObjMatrix._m0[_362].y;
    precise float _387 = _270 * cbObjMatrix._m0[_369].y;
    precise float _388 = _270 * cbObjMatrix._m0[_376].y;
    precise float _389 = _270 * cbObjMatrix._m0[_362].z;
    precise float _390 = _270 * cbObjMatrix._m0[_369].z;
    precise float _391 = _270 * cbObjMatrix._m0[_376].z;
    precise float _392 = _270 * cbObjMatrix._m0[_362].w;
    precise float _393 = _270 * cbObjMatrix._m0[_369].w;
    precise float _394 = _270 * cbObjMatrix._m0[_376].w;
    precise float _395 = _348 + _383;
    precise float _396 = _349 + _384;
    precise float _397 = _350 + _385;
    precise float _398 = _351 + _386;
    precise float _399 = _352 + _387;
    precise float _400 = _353 + _388;
    precise float _401 = _354 + _389;
    precise float _402 = _355 + _390;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    uint _409 = (_278 + uint(float(BLENDINDICES.w))) * 3u;
    uint _416 = _409 + 1u;
    uint _423 = _409 + 2u;
    precise float _430 = _271 * cbObjMatrix._m0[_409].x;
    precise float _431 = _271 * cbObjMatrix._m0[_416].x;
    precise float _432 = _271 * cbObjMatrix._m0[_423].x;
    precise float _433 = _271 * cbObjMatrix._m0[_409].y;
    precise float _434 = _271 * cbObjMatrix._m0[_416].y;
    precise float _435 = _271 * cbObjMatrix._m0[_423].y;
    precise float _436 = _271 * cbObjMatrix._m0[_409].z;
    precise float _437 = _271 * cbObjMatrix._m0[_416].z;
    precise float _438 = _271 * cbObjMatrix._m0[_423].z;
    precise float _439 = _271 * cbObjMatrix._m0[_409].w;
    precise float _440 = _271 * cbObjMatrix._m0[_416].w;
    precise float _441 = _271 * cbObjMatrix._m0[_423].w;
    precise float _442 = _395 + _430;
    precise float _443 = _396 + _431;
    precise float _444 = _397 + _432;
    precise float _445 = _398 + _433;
    precise float _446 = _399 + _434;
    precise float _447 = _400 + _435;
    precise float _448 = _401 + _436;
    precise float _449 = _402 + _437;
    precise float _450 = _403 + _438;
    precise float _451 = _404 + _439;
    precise float _452 = _405 + _440;
    precise float _453 = _406 + _441;
    precise float _454 = _251 * _442;
    precise float _455 = _252 * _445;
    precise float _456 = _455 + _454;
    precise float _457 = _253 * _448;
    precise float _458 = _457 + _456;
    precise float _459 = 1.0 * _451;
    precise float _460 = _459 + _458;
    precise float _461 = _251 * _443;
    precise float _462 = _252 * _446;
    precise float _463 = _462 + _461;
    precise float _464 = _253 * _449;
    precise float _465 = _464 + _463;
    precise float _466 = 1.0 * _452;
    precise float _467 = _466 + _465;
    precise float _468 = _251 * _444;
    precise float _469 = _252 * _447;
    precise float _470 = _469 + _468;
    precise float _471 = _253 * _450;
    precise float _472 = _471 + _470;
    precise float _473 = 1.0 * _453;
    precise float _474 = _473 + _472;
    float _645 = fma(_205, _448, fma(_204, _445, _442 * _202));
    float _648 = fma(_205, _449, fma(_204, _446, _443 * _202));
    float _651 = fma(_205, _450, fma(_204, _447, _444 * _202));
    precise float _663 = _460 * _460;
    precise float _664 = _467 * _467;
    precise float _665 = _663 + _664;
    precise float _666 = _474 * _474;
    precise float _667 = _665 + _666;
    precise float _669 = cbMtdParam._m0[10u].z * sqrt(_667);
    precise float _679 = cbInstanceData._m0[_226].x * 0.0;
    precise float _680 = 0.0 * cbInstanceData._m0[_226].y;
    precise float _681 = _680 + _679;
    precise float _682 = 0.0 * cbInstanceData._m0[_226].z;
    precise float _683 = _682 + _681;
    precise float _684 = 1.0 * cbInstanceData._m0[_226].w;
    precise float _685 = _684 + _683;
    precise float _686 = cbInstanceData._m0[_231].x * 0.0;
    precise float _687 = 0.0 * cbInstanceData._m0[_231].y;
    precise float _688 = _687 + _686;
    precise float _689 = 0.0 * cbInstanceData._m0[_231].z;
    precise float _690 = _689 + _688;
    precise float _691 = 1.0 * cbInstanceData._m0[_231].w;
    precise float _692 = _691 + _690;
    precise float _693 = cbInstanceData._m0[_235].x * 0.0;
    precise float _694 = 0.0 * cbInstanceData._m0[_235].y;
    precise float _695 = _694 + _693;
    precise float _696 = 0.0 * cbInstanceData._m0[_235].z;
    precise float _697 = _696 + _695;
    precise float _698 = 1.0 * cbInstanceData._m0[_235].w;
    precise float _699 = _698 + _697;
    precise float _700 = cbPerFrame._m0[22u].x + _669;
    float _701;
    float _703;
    float _705;
    if (_247 == 0u)
    {
        _701 = 0.0;
        _703 = 0.0;
        _705 = 0.0;
    }
    else
    {
        uint _974 = _243.z;
        precise float _702;
        precise float _704;
        precise float _706;
        float _1116;
        float _1118;
        float _1120;
        float _975 = 0.0;
        float _976 = 0.0;
        float _977 = 0.0;
        uint _978 = _974;
        uint _980 = 0u;
        float _1016;
        float _1035;
        vec4 _1049;
        float _1050;
        float _1051;
        float _1065;
        float _1066;
        float _1067;
        float _1084;
        float _1085;
        float _1086;
        float _1087;
        bool _1088;
        bool _1089;
        bool _1090;
        precise float _1091;
        precise float _1092;
        precise float _1093;
        float _1094;
        float _1095;
        float _1096;
        precise float _1097;
        bool _1100;
        for (;;)
        {
            uint _982 = _978 & 255u;
            uint _984 = _982 * 24u;
            uvec3 _994 = uvec3(texelFetch(g_forceParam, int(_984)).x, texelFetch(g_forceParam, int(_984 + 1u)).x, texelFetch(g_forceParam, int(_984 + 2u)).x);
            uint _999 = (_982 * 24u) + 4u;
            vec4 _1012 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_999)).x, texelFetch(g_forceParam, int(_999 + 1u)).x, texelFetch(g_forceParam, int(_999 + 2u)).x, texelFetch(g_forceParam, int(_999 + 3u)).x));
            _1016 = _1012.w;
            uint _1018 = (_982 * 24u) + 8u;
            vec4 _1031 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1018)).x, texelFetch(g_forceParam, int(_1018 + 1u)).x, texelFetch(g_forceParam, int(_1018 + 2u)).x, texelFetch(g_forceParam, int(_1018 + 3u)).x));
            _1035 = _1031.w;
            uint _1038 = (_982 * 24u) + 12u;
            _1049 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1038)).x, texelFetch(g_forceParam, int(_1038 + 1u)).x, _1044, texelFetch(g_forceParam, int(_1038 + 3u)).x));
            _1050 = _1049.x;
            _1051 = _1049.w;
            uint _1054 = (_982 * 24u) + 16u;
            vec3 _1064 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1054)).x, texelFetch(g_forceParam, int(_1054 + 1u)).x, texelFetch(g_forceParam, int(_1054 + 2u)).x));
            _1065 = _1064.x;
            _1066 = _1064.y;
            _1067 = _1064.z;
            uint _1070 = (_982 * 24u) + 20u;
            vec4 _1083 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1070)).x, texelFetch(g_forceParam, int(_1070 + 1u)).x, texelFetch(g_forceParam, int(_1070 + 2u)).x, texelFetch(g_forceParam, int(_1070 + 3u)).x));
            _1084 = _1083.x;
            _1085 = _1083.y;
            _1086 = _1083.z;
            _1087 = _1083.w;
            _1088 = _994.x == 1u;
            _1089 = _994.y == 1u;
            _1090 = _994.z == 1u;
            _1091 = _685 - _1012.x;
            _1092 = _692 - _1012.y;
            _1093 = _699 - _1012.z;
            _1094 = _1088 ? _1031.x : _1091;
            _1095 = _1088 ? _1031.y : _1092;
            _1096 = _1088 ? _1031.z : _1093;
            _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
            _1100 = _1097 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_1100)
            {
                precise float _1102 = _1091 * _1091;
                precise float _1103 = _1092 * _1092;
                precise float _1104 = _1102 + _1103;
                precise float _1105 = _1093 * _1093;
                precise float _1106 = _1105 + _1104;
                float _1107 = sqrt(_1106);
                float _1108 = inversesqrt(_1097);
                precise float _1109 = _1094 * _1108;
                precise float _1110 = _1095 * _1108;
                precise float _1111 = _1096 * _1108;
                precise float _1113 = _1107 / (isnan(0.001000000047497451305389404296875) ? _1049.y : (isnan(_1049.y) ? 0.001000000047497451305389404296875 : max(_1049.y, 0.001000000047497451305389404296875)));
                precise float _1114 = 1.0 - _1113;
                float _1283 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
                float _1115 = isnan(1.0) ? _1283 : (isnan(_1283) ? 1.0 : min(_1283, 1.0));
                float _1141;
                if (_1090)
                {
                    float _1128 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
                    precise float _1129 = _1091 * _1128;
                    precise float _1130 = _1092 * _1128;
                    precise float _1131 = _1093 * _1128;
                    precise float _1135 = dot(vec3(_1109, _1110, _1111), vec3(_1129, _1130, _1131)) * 0.800000011920928955078125;
                    precise float _1137 = _1135 + 0.20000000298023223876953125;
                    float _1294 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
                    precise float _1140 = _1115 * (isnan(1.0) ? _1294 : (isnan(_1294) ? 1.0 : min(_1294, 1.0)));
                    _1141 = _1140;
                }
                else
                {
                    _1141 = _1115;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_1141 > 0.0)
                {
                    bool _1144 = _1088 && (!_1090);
                    precise float _1146 = _1107 * (-4.0);
                    precise float _1150 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1050 : (isnan(_1050) ? 0.001000000047497451305389404296875 : max(_1050, 0.001000000047497451305389404296875)));
                    precise float _1152 = dot(vec2(_1109, _1111), vec2(_1091, _1093));
                    precise float _1156 = _1150 * _1152;
                    precise float _1157 = float(_1144) * _1156;
                    precise float _1158 = _700 * _1150;
                    precise float _1159 = _1158 - _1157;
                    precise float _1160 = (_1144 ? 0.0 : _1146) + _1159;
                    precise float _1162 = _1035 * sin(_1160);
                    precise float _1163 = _1110 * 0.0;
                    precise float _1164 = _1163 - _1111;
                    precise float _1165 = _1111 * 0.0;
                    precise float _1166 = _1109 * 0.0;
                    precise float _1167 = _1165 - _1166;
                    precise float _1168 = _1109 - _1163;
                    precise float _1169 = _1051 * _1162;
                    float _1170 = _1088 ? _1169 : 0.0;
                    float _1213;
                    if (_1089)
                    {
                        precise float _1173 = _1065 * 2.0;
                        precise float _1175 = _1085 + _1086;
                        precise float _1176 = _1087 + _1175;
                        precise float _1178 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1065 : (isnan(_1065) ? 0.001000000047497451305389404296875 : max(_1065, 0.001000000047497451305389404296875)));
                        precise float _1179 = _1084 * _1178;
                        precise float _1180 = (-0.0) - _1109;
                        precise float _1185 = dot(vec2(_1111, _1180), vec2(_1091, _1093)) / _1173;
                        precise float _1186 = (-0.0) - _1185;
                        float _1189 = fract(abs(_1185));
                        precise float _1190 = (-0.0) - _1189;
                        precise float _1192 = _1173 * ((_1185 >= _1186) ? _1189 : _1190);
                        precise float _1193 = _1192 * 6.283184051513671875;
                        precise float _1194 = _1193 / _1173;
                        precise float _1196 = (isnan(5.0) ? _1065 : (isnan(_1065) ? 5.0 : min(_1065, 5.0))) * sin(_1194);
                        precise float _1197 = _1152 + _1196;
                        precise float _1198 = _1065 * 0.25;
                        precise float _1200 = _700 * _1084;
                        precise float _1201 = _1200 - _1198;
                        precise float _1202 = _1201 - _1197;
                        precise float _1203 = _1084 * _1176;
                        precise float _1205 = _1202 / (isnan(0.001000000047497451305389404296875) ? _1203 : (isnan(_1203) ? 0.001000000047497451305389404296875 : max(_1203, 0.001000000047497451305389404296875)));
                        float _1206 = fract(_1205);
                        precise float _1208 = 1.0 - _1206;
                        float _1209 = (_1205 < 0.0) ? _1208 : _1206;
                        precise float _1210 = _1175 / _1176;
                        precise float _1211 = _1085 / _1176;
                        float _1232;
                        if (_1209 < _1211)
                        {
                            precise float _1230 = _1209 / _1211;
                            _1232 = _1230;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1209 < _1210)
                            {
                                precise float _1242 = _1209 - _1211;
                                precise float _1243 = _1210 - _1211;
                                precise float _1244 = _1242 / _1243;
                                precise float _1233 = 1.0 - _1244;
                                frontier_phi_14_13_ladder = _1233;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1232 = frontier_phi_14_13_ladder;
                        }
                        precise float _1234 = _1067 * _1232;
                        precise float _1235 = _1178 * _1152;
                        precise float _1236 = _700 * _1179;
                        precise float _1237 = _1236 - _1235;
                        precise float _1239 = _1066 + sin(_1237);
                        precise float _1241 = _1234 * abs(_1239);
                        precise float _1214 = _1241 + 0.0;
                        _1213 = _1214;
                    }
                    else
                    {
                        _1213 = 0.0;
                    }
                    precise float _1215 = _1016 + _1162;
                    precise float _1216 = _1215 + _1213;
                    precise float _1217 = _1109 * _1216;
                    precise float _1218 = _1110 * _1216;
                    precise float _1219 = _1111 * _1216;
                    precise float _1220 = _1164 * _1170;
                    precise float _1221 = _1167 * _1170;
                    precise float _1222 = _1168 * _1170;
                    precise float _1223 = _1220 + _1217;
                    precise float _1224 = _1221 + _1218;
                    precise float _1225 = _1222 + _1219;
                    precise float _1226 = _1141 * _1223;
                    precise float _1227 = _1141 * _1224;
                    precise float _1228 = _1141 * _1225;
                    precise float _1117 = _1226 * 0.0500000007450580596923828125;
                    precise float _1119 = _1227 * 0.0500000007450580596923828125;
                    precise float _1121 = _1228 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _1117;
                    frontier_phi_5_pred_7_ladder_1 = _1119;
                    frontier_phi_5_pred_7_ladder_2 = _1121;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _1116 = frontier_phi_5_pred;
            _1118 = frontier_phi_5_pred_1;
            _1120 = frontier_phi_5_pred_2;
            _702 = _975 + _1116;
            _704 = _976 + _1118;
            _706 = _977 + _1120;
            uint _981 = _980 + 1u;
            if (_981 == _247)
            {
                break;
            }
            else
            {
                _975 = _702;
                _976 = _704;
                _977 = _706;
                _978 = (_980 != 3u) ? (_978 >> 8u) : _245;
                _980 = _981;
                continue;
            }
        }
        _701 = _702;
        _703 = _704;
        _705 = _706;
    }
    precise float _707 = _701 * _701;
    precise float _708 = _703 * _703;
    precise float _709 = _707 + _708;
    precise float _710 = _705 * _705;
    precise float _711 = _709 + _710;
    float _712 = sqrt(_711);
    bool _713 = _712 < 0.00011000000085914507508277893066406;
    float _718 = inversesqrt(dot(vec3(cbInstanceData._m0[_226].x, cbInstanceData._m0[_231].x, cbInstanceData._m0[_235].x), vec3(cbInstanceData._m0[_226].x, cbInstanceData._m0[_231].x, cbInstanceData._m0[_235].x)));
    precise float _719 = cbInstanceData._m0[_226].x * _718;
    precise float _720 = cbInstanceData._m0[_231].x * _718;
    precise float _721 = cbInstanceData._m0[_235].x * _718;
    float _725 = inversesqrt(dot(vec3(cbInstanceData._m0[_226].y, cbInstanceData._m0[_231].y, cbInstanceData._m0[_235].y), vec3(cbInstanceData._m0[_226].y, cbInstanceData._m0[_231].y, cbInstanceData._m0[_235].y)));
    precise float _726 = cbInstanceData._m0[_226].y * _725;
    precise float _727 = cbInstanceData._m0[_231].y * _725;
    precise float _728 = cbInstanceData._m0[_235].y * _725;
    float _732 = inversesqrt(dot(vec3(cbInstanceData._m0[_226].z, cbInstanceData._m0[_231].z, cbInstanceData._m0[_235].z), vec3(cbInstanceData._m0[_226].z, cbInstanceData._m0[_231].z, cbInstanceData._m0[_235].z)));
    precise float _733 = cbInstanceData._m0[_226].z * _732;
    precise float _734 = cbInstanceData._m0[_231].z * _732;
    precise float _735 = cbInstanceData._m0[_235].z * _732;
    precise float _736 = _719 * 0.0;
    precise float _737 = 1.0 * _726;
    precise float _738 = _737 + _736;
    precise float _739 = 0.0 * _733;
    precise float _740 = _739 + _738;
    precise float _741 = _720 * 0.0;
    precise float _742 = 1.0 * _727;
    precise float _743 = _742 + _741;
    precise float _744 = 0.0 * _734;
    precise float _745 = _744 + _743;
    precise float _746 = _721 * 0.0;
    precise float _747 = 1.0 * _728;
    precise float _748 = _747 + _746;
    precise float _749 = 0.0 * _735;
    precise float _750 = _749 + _748;
    float _754 = inversesqrt(dot(vec3(_701, _703, _705), vec3(_701, _703, _705)));
    precise float _755 = _701 * _754;
    precise float _756 = _703 * _754;
    precise float _757 = _705 * _754;
    precise float _758 = _745 * _757;
    precise float _759 = _750 * _756;
    precise float _760 = _758 - _759;
    precise float _761 = _750 * _755;
    precise float _762 = _740 * _757;
    precise float _763 = _761 - _762;
    precise float _764 = _740 * _756;
    precise float _765 = _745 * _755;
    precise float _766 = _764 - _765;
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    precise float _771 = _770 * _760;
    precise float _772 = _770 * _763;
    precise float _773 = _770 * _766;
    precise float _774 = _712 + 1.0;
    precise float _776 = cbMtdParam._m0[10u].y * log2(_774);
    precise float _777 = _460 - _685;
    precise float _778 = _467 - _692;
    precise float _779 = _474 - _699;
    precise float _780 = dot(vec3(_771, _772, _773), vec3(_777, _778, _779));
    precise float _783 = _771 * _780;
    precise float _784 = _772 * _780;
    precise float _785 = _773 * _780;
    precise float _786 = _685 + _783;
    precise float _787 = _692 + _784;
    precise float _788 = _699 + _785;
    precise float _789 = _460 - _786;
    precise float _790 = _467 - _787;
    precise float _791 = _474 - _788;
    precise float _792 = _772 * _791;
    precise float _793 = _773 * _790;
    precise float _794 = _792 - _793;
    precise float _795 = _773 * _789;
    precise float _796 = _771 * _791;
    precise float _797 = _795 - _796;
    precise float _798 = _771 * _790;
    precise float _799 = _772 * _789;
    precise float _800 = _798 - _799;
    float _801 = sin(_776);
    float _802 = cos(_776);
    precise float _803 = _789 * _802;
    precise float _804 = _790 * _802;
    precise float _805 = _791 * _802;
    precise float _806 = _801 * _794;
    precise float _807 = _801 * _797;
    precise float _808 = _801 * _800;
    precise float _809 = _803 + _806;
    precise float _810 = _804 + _807;
    precise float _811 = _808 + _805;
    precise float _812 = _786 + _809;
    precise float _813 = _787 + _810;
    precise float _814 = _788 + _811;
    precise float _815 = _812 - _460;
    precise float _816 = _813 - _467;
    precise float _817 = _814 - _474;
    float _818 = _713 ? 0.0 : _815;
    float _819 = _713 ? 0.0 : _816;
    float _820 = _713 ? 0.0 : _817;
    precise float _821 = _460 + _818;
    precise float _822 = _467 + _819;
    precise float _823 = _474 + _820;
    float _824 = (((((cbPrevObjMatrix._m0[_315].w * _269) + (cbPrevObjMatrix._m0[_280].w * _268)) + (cbPrevObjMatrix._m0[_362].w * _270)) + (cbPrevObjMatrix._m0[_409].w * _271)) + fma(_253, (((cbPrevObjMatrix._m0[_315].z * _269) + (cbPrevObjMatrix._m0[_280].z * _268)) + (cbPrevObjMatrix._m0[_362].z * _270)) + (cbPrevObjMatrix._m0[_409].z * _271), fma(_252, (((cbPrevObjMatrix._m0[_315].y * _269) + (cbPrevObjMatrix._m0[_280].y * _268)) + (cbPrevObjMatrix._m0[_362].y * _270)) + (cbPrevObjMatrix._m0[_409].y * _271), ((((cbPrevObjMatrix._m0[_315].x * _269) + (cbPrevObjMatrix._m0[_280].x * _268)) + (cbPrevObjMatrix._m0[_362].x * _270)) + (cbPrevObjMatrix._m0[_409].x * _271)) * _251))) + _818;
    float _825 = (((((cbPrevObjMatrix._m0[_322].w * _269) + (cbPrevObjMatrix._m0[_287].w * _268)) + (cbPrevObjMatrix._m0[_369].w * _270)) + (cbPrevObjMatrix._m0[_416].w * _271)) + fma(_253, (((cbPrevObjMatrix._m0[_322].z * _269) + (cbPrevObjMatrix._m0[_287].z * _268)) + (cbPrevObjMatrix._m0[_369].z * _270)) + (cbPrevObjMatrix._m0[_416].z * _271), fma(_252, (((cbPrevObjMatrix._m0[_322].y * _269) + (cbPrevObjMatrix._m0[_287].y * _268)) + (cbPrevObjMatrix._m0[_369].y * _270)) + (cbPrevObjMatrix._m0[_416].y * _271), ((((cbPrevObjMatrix._m0[_322].x * _269) + (cbPrevObjMatrix._m0[_287].x * _268)) + (cbPrevObjMatrix._m0[_369].x * _270)) + (cbPrevObjMatrix._m0[_416].x * _271)) * _251))) + _819;
    float _826 = (((((cbPrevObjMatrix._m0[_329].w * _269) + (cbPrevObjMatrix._m0[_294].w * _268)) + (cbPrevObjMatrix._m0[_376].w * _270)) + (cbPrevObjMatrix._m0[_423].w * _271)) + fma(_253, (((cbPrevObjMatrix._m0[_329].z * _269) + (cbPrevObjMatrix._m0[_294].z * _268)) + (cbPrevObjMatrix._m0[_376].z * _270)) + (cbPrevObjMatrix._m0[_423].z * _271), fma(_252, (((cbPrevObjMatrix._m0[_329].y * _269) + (cbPrevObjMatrix._m0[_294].y * _268)) + (cbPrevObjMatrix._m0[_376].y * _270)) + (cbPrevObjMatrix._m0[_423].y * _271), ((((cbPrevObjMatrix._m0[_329].x * _269) + (cbPrevObjMatrix._m0[_294].x * _268)) + (cbPrevObjMatrix._m0[_376].x * _270)) + (cbPrevObjMatrix._m0[_423].x * _271)) * _251))) + _820;
    float _833 = _824 - cbSceneParam._m0[28u].x;
    float _834 = _825 - cbSceneParam._m0[28u].y;
    float _835 = _826 - cbSceneParam._m0[28u].z;
    precise float _885 = _821 - cbSceneParam._m0[3u].x;
    precise float _886 = _822 - cbSceneParam._m0[3u].y;
    precise float _887 = _823 - cbSceneParam._m0[3u].z;
    precise float _915 = _885 * cbSceneParam._m0[24u].x;
    precise float _916 = _886 * cbSceneParam._m0[24u].y;
    precise float _917 = _916 + _915;
    precise float _918 = _887 * cbSceneParam._m0[24u].z;
    precise float _919 = _918 + _917;
    precise float _920 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _921 = _920 + _919;
    precise float _922 = _885 * cbSceneParam._m0[25u].x;
    precise float _923 = _886 * cbSceneParam._m0[25u].y;
    precise float _924 = _923 + _922;
    precise float _925 = _887 * cbSceneParam._m0[25u].z;
    precise float _926 = _925 + _924;
    precise float _927 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _928 = _927 + _926;
    precise float _929 = _885 * cbSceneParam._m0[26u].x;
    precise float _930 = _886 * cbSceneParam._m0[26u].y;
    precise float _931 = _930 + _929;
    precise float _932 = _887 * cbSceneParam._m0[26u].z;
    precise float _933 = _932 + _931;
    precise float _934 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _935 = _934 + _933;
    precise float _936 = _885 * cbSceneParam._m0[27u].x;
    precise float _937 = _886 * cbSceneParam._m0[27u].y;
    precise float _938 = _937 + _936;
    precise float _939 = _887 * cbSceneParam._m0[27u].z;
    precise float _940 = _939 + _938;
    precise float _941 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _942 = _941 + _940;
    gl_Position.x = _921;
    gl_Position.y = _928;
    gl_Position.z = _935;
    gl_Position.w = _942;
    POSITION_1.x = _921;
    POSITION_1.y = _928;
    POSITION_1.z = _935;
    POSITION_1.w = _942;
    NORMAL_1.x = _645;
    NORMAL_1.y = _648;
    NORMAL_1.z = _651;
    NORMAL_1.w = float(_261);
    TANGENT_1.x = fma(_216, _448, fma(_215, _445, _442 * _214));
    TANGENT_1.y = fma(_216, _449, fma(_215, _446, _443 * _214));
    TANGENT_1.z = fma(_216, _450, fma(_215, _447, _444 * _214));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _921;
    TEXCOORD_8.y = _928;
    TEXCOORD_8.z = _935;
    TEXCOORD_8.w = _942;
    TEXCOORD_9.x = fma(_835, cbSceneParam._m0[29u].z, fma(_834, cbSceneParam._m0[29u].y, _833 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_835, cbSceneParam._m0[30u].z, fma(_834, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _833)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_835, cbSceneParam._m0[31u].z, fma(_834, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _833)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_835, cbSceneParam._m0[32u].z, fma(_834, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _833)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _645;
    TEXCOORD_10.y = _648;
    TEXCOORD_10.z = _651;
}


