#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;

uint _694;

void main()
{
    uint _71 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    uint _118 = _71 * 13u;
    uint _123 = _118 + 1u;
    uint _127 = _118 + 2u;
    uvec4 _135 = floatBitsToUint(cbInstanceData._m0[_118 + 7u]);
    uint _137 = _135.w;
    uint _139 = min(_135.y, 8u);
    precise float _143 = POSITION.x + 0.0;
    precise float _144 = POSITION.y + 0.0;
    precise float _145 = POSITION.z + 0.0;
    uint _150 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _71;
    precise float _154 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _158 = isnan(_154) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _154 : max(0.001000000047497451305389404296875, _154));
    precise float _160 = BLENDWEIGHT.x / _158;
    precise float _161 = BLENDWEIGHT.y / _158;
    precise float _162 = BLENDWEIGHT.z / _158;
    precise float _163 = BLENDWEIGHT.w / _158;
    uint _165 = texelFetch(g_InstanceIndexBuffer, int(_150)).x * 13u;
    uvec4 _170 = floatBitsToUint(cbInstanceData._m0[_165 + 4u]);
    uint _171 = _170.x;
    uint _173 = (_171 + uint(float(BLENDINDICES.x))) * 3u;
    uint _180 = _173 + 1u;
    uint _187 = _173 + 2u;
    precise float _194 = _160 * cbObjMatrix._m0[_173].x;
    precise float _195 = _160 * cbObjMatrix._m0[_180].x;
    precise float _196 = _160 * cbObjMatrix._m0[_187].x;
    precise float _197 = _160 * cbObjMatrix._m0[_173].y;
    precise float _198 = _160 * cbObjMatrix._m0[_180].y;
    precise float _199 = _160 * cbObjMatrix._m0[_187].y;
    precise float _200 = _160 * cbObjMatrix._m0[_173].z;
    precise float _201 = _160 * cbObjMatrix._m0[_180].z;
    precise float _202 = _160 * cbObjMatrix._m0[_187].z;
    precise float _203 = _160 * cbObjMatrix._m0[_173].w;
    precise float _204 = _160 * cbObjMatrix._m0[_180].w;
    precise float _205 = _160 * cbObjMatrix._m0[_187].w;
    uint _208 = (_171 + uint(float(BLENDINDICES.y))) * 3u;
    uint _215 = _208 + 1u;
    uint _222 = _208 + 2u;
    precise float _229 = _161 * cbObjMatrix._m0[_208].x;
    precise float _230 = _161 * cbObjMatrix._m0[_215].x;
    precise float _231 = _161 * cbObjMatrix._m0[_222].x;
    precise float _232 = _161 * cbObjMatrix._m0[_208].y;
    precise float _233 = _161 * cbObjMatrix._m0[_215].y;
    precise float _234 = _161 * cbObjMatrix._m0[_222].y;
    precise float _235 = _161 * cbObjMatrix._m0[_208].z;
    precise float _236 = _161 * cbObjMatrix._m0[_215].z;
    precise float _237 = _161 * cbObjMatrix._m0[_222].z;
    precise float _238 = _161 * cbObjMatrix._m0[_208].w;
    precise float _239 = _161 * cbObjMatrix._m0[_215].w;
    precise float _240 = _161 * cbObjMatrix._m0[_222].w;
    precise float _241 = _194 + _229;
    precise float _242 = _195 + _230;
    precise float _243 = _196 + _231;
    precise float _244 = _197 + _232;
    precise float _245 = _198 + _233;
    precise float _246 = _199 + _234;
    precise float _247 = _200 + _235;
    precise float _248 = _201 + _236;
    precise float _249 = _202 + _237;
    precise float _250 = _203 + _238;
    precise float _251 = _204 + _239;
    precise float _252 = _205 + _240;
    uint _255 = (_171 + uint(float(BLENDINDICES.z))) * 3u;
    uint _262 = _255 + 1u;
    uint _269 = _255 + 2u;
    precise float _276 = _162 * cbObjMatrix._m0[_255].x;
    precise float _277 = _162 * cbObjMatrix._m0[_262].x;
    precise float _278 = _162 * cbObjMatrix._m0[_269].x;
    precise float _279 = _162 * cbObjMatrix._m0[_255].y;
    precise float _280 = _162 * cbObjMatrix._m0[_262].y;
    precise float _281 = _162 * cbObjMatrix._m0[_269].y;
    precise float _282 = _162 * cbObjMatrix._m0[_255].z;
    precise float _283 = _162 * cbObjMatrix._m0[_262].z;
    precise float _284 = _162 * cbObjMatrix._m0[_269].z;
    precise float _285 = _162 * cbObjMatrix._m0[_255].w;
    precise float _286 = _162 * cbObjMatrix._m0[_262].w;
    precise float _287 = _162 * cbObjMatrix._m0[_269].w;
    precise float _288 = _241 + _276;
    precise float _289 = _242 + _277;
    precise float _290 = _243 + _278;
    precise float _291 = _244 + _279;
    precise float _292 = _245 + _280;
    precise float _293 = _246 + _281;
    precise float _294 = _247 + _282;
    precise float _295 = _248 + _283;
    precise float _296 = _249 + _284;
    precise float _297 = _250 + _285;
    precise float _298 = _251 + _286;
    precise float _299 = _252 + _287;
    uint _302 = (_171 + uint(float(BLENDINDICES.w))) * 3u;
    uint _309 = _302 + 1u;
    uint _316 = _302 + 2u;
    precise float _323 = _163 * cbObjMatrix._m0[_302].x;
    precise float _324 = _163 * cbObjMatrix._m0[_309].x;
    precise float _325 = _163 * cbObjMatrix._m0[_316].x;
    precise float _326 = _163 * cbObjMatrix._m0[_302].y;
    precise float _327 = _163 * cbObjMatrix._m0[_309].y;
    precise float _328 = _163 * cbObjMatrix._m0[_316].y;
    precise float _329 = _163 * cbObjMatrix._m0[_302].z;
    precise float _330 = _163 * cbObjMatrix._m0[_309].z;
    precise float _331 = _163 * cbObjMatrix._m0[_316].z;
    precise float _332 = _163 * cbObjMatrix._m0[_302].w;
    precise float _333 = _163 * cbObjMatrix._m0[_309].w;
    precise float _334 = _163 * cbObjMatrix._m0[_316].w;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    precise float _347 = _143 * _335;
    precise float _348 = _144 * _338;
    precise float _349 = _348 + _347;
    precise float _350 = _145 * _341;
    precise float _351 = _350 + _349;
    precise float _352 = 1.0 * _344;
    precise float _353 = _352 + _351;
    precise float _354 = _143 * _336;
    precise float _355 = _144 * _339;
    precise float _356 = _355 + _354;
    precise float _357 = _145 * _342;
    precise float _358 = _357 + _356;
    precise float _359 = 1.0 * _345;
    precise float _360 = _359 + _358;
    precise float _361 = _143 * _337;
    precise float _362 = _144 * _340;
    precise float _363 = _362 + _361;
    precise float _364 = _145 * _343;
    precise float _365 = _364 + _363;
    precise float _366 = 1.0 * _346;
    precise float _367 = _366 + _365;
    precise float _369 = _353 * _353;
    precise float _370 = _360 * _360;
    precise float _371 = _369 + _370;
    precise float _372 = _367 * _367;
    precise float _373 = _371 + _372;
    precise float _375 = cbMtdParam._m0[10u].z * sqrt(_373);
    precise float _385 = cbInstanceData._m0[_118].x * 0.0;
    precise float _386 = 0.0 * cbInstanceData._m0[_118].y;
    precise float _387 = _386 + _385;
    precise float _388 = 0.0 * cbInstanceData._m0[_118].z;
    precise float _389 = _388 + _387;
    precise float _390 = 1.0 * cbInstanceData._m0[_118].w;
    precise float _391 = _390 + _389;
    precise float _392 = cbInstanceData._m0[_123].x * 0.0;
    precise float _393 = 0.0 * cbInstanceData._m0[_123].y;
    precise float _394 = _393 + _392;
    precise float _395 = 0.0 * cbInstanceData._m0[_123].z;
    precise float _396 = _395 + _394;
    precise float _397 = 1.0 * cbInstanceData._m0[_123].w;
    precise float _398 = _397 + _396;
    precise float _399 = cbInstanceData._m0[_127].x * 0.0;
    precise float _400 = 0.0 * cbInstanceData._m0[_127].y;
    precise float _401 = _400 + _399;
    precise float _402 = 0.0 * cbInstanceData._m0[_127].z;
    precise float _403 = _402 + _401;
    precise float _404 = 1.0 * cbInstanceData._m0[_127].w;
    precise float _405 = _404 + _403;
    precise float _406 = cbPerFrame._m0[22u].x + _375;
    float _407;
    float _409;
    float _411;
    if (_139 == 0u)
    {
        _407 = 0.0;
        _409 = 0.0;
        _411 = 0.0;
    }
    else
    {
        uint _624 = _135.z;
        precise float _408;
        precise float _410;
        precise float _412;
        float _766;
        float _768;
        float _770;
        float _625 = 0.0;
        float _626 = 0.0;
        float _627 = 0.0;
        uint _628 = _624;
        uint _630 = 0u;
        float _666;
        float _685;
        vec4 _699;
        float _700;
        float _701;
        float _715;
        float _716;
        float _717;
        float _734;
        float _735;
        float _736;
        float _737;
        bool _738;
        bool _739;
        bool _740;
        precise float _741;
        precise float _742;
        precise float _743;
        float _744;
        float _745;
        float _746;
        precise float _747;
        bool _750;
        for (;;)
        {
            uint _632 = _628 & 255u;
            uint _634 = _632 * 24u;
            uvec3 _644 = uvec3(texelFetch(g_forceParam, int(_634)).x, texelFetch(g_forceParam, int(_634 + 1u)).x, texelFetch(g_forceParam, int(_634 + 2u)).x);
            uint _649 = (_632 * 24u) + 4u;
            vec4 _662 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_649)).x, texelFetch(g_forceParam, int(_649 + 1u)).x, texelFetch(g_forceParam, int(_649 + 2u)).x, texelFetch(g_forceParam, int(_649 + 3u)).x));
            _666 = _662.w;
            uint _668 = (_632 * 24u) + 8u;
            vec4 _681 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_668)).x, texelFetch(g_forceParam, int(_668 + 1u)).x, texelFetch(g_forceParam, int(_668 + 2u)).x, texelFetch(g_forceParam, int(_668 + 3u)).x));
            _685 = _681.w;
            uint _688 = (_632 * 24u) + 12u;
            _699 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_688)).x, texelFetch(g_forceParam, int(_688 + 1u)).x, _694, texelFetch(g_forceParam, int(_688 + 3u)).x));
            _700 = _699.x;
            _701 = _699.w;
            uint _704 = (_632 * 24u) + 16u;
            vec3 _714 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_704)).x, texelFetch(g_forceParam, int(_704 + 1u)).x, texelFetch(g_forceParam, int(_704 + 2u)).x));
            _715 = _714.x;
            _716 = _714.y;
            _717 = _714.z;
            uint _720 = (_632 * 24u) + 20u;
            vec4 _733 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_720)).x, texelFetch(g_forceParam, int(_720 + 1u)).x, texelFetch(g_forceParam, int(_720 + 2u)).x, texelFetch(g_forceParam, int(_720 + 3u)).x));
            _734 = _733.x;
            _735 = _733.y;
            _736 = _733.z;
            _737 = _733.w;
            _738 = _644.x == 1u;
            _739 = _644.y == 1u;
            _740 = _644.z == 1u;
            _741 = _391 - _662.x;
            _742 = _398 - _662.y;
            _743 = _405 - _662.z;
            _744 = _738 ? _681.x : _741;
            _745 = _738 ? _681.y : _742;
            _746 = _738 ? _681.z : _743;
            _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
            _750 = _747 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_750)
            {
                precise float _752 = _741 * _741;
                precise float _753 = _742 * _742;
                precise float _754 = _752 + _753;
                precise float _755 = _743 * _743;
                precise float _756 = _755 + _754;
                float _757 = sqrt(_756);
                float _758 = inversesqrt(_747);
                precise float _759 = _744 * _758;
                precise float _760 = _745 * _758;
                precise float _761 = _746 * _758;
                precise float _763 = _757 / (isnan(0.001000000047497451305389404296875) ? _699.y : (isnan(_699.y) ? 0.001000000047497451305389404296875 : max(_699.y, 0.001000000047497451305389404296875)));
                precise float _764 = 1.0 - _763;
                float _933 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
                float _765 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
                float _791;
                if (_740)
                {
                    float _778 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
                    precise float _779 = _741 * _778;
                    precise float _780 = _742 * _778;
                    precise float _781 = _743 * _778;
                    precise float _785 = dot(vec3(_759, _760, _761), vec3(_779, _780, _781)) * 0.800000011920928955078125;
                    precise float _787 = _785 + 0.20000000298023223876953125;
                    float _944 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
                    precise float _790 = _765 * (isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0)));
                    _791 = _790;
                }
                else
                {
                    _791 = _765;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_791 > 0.0)
                {
                    bool _794 = _738 && (!_740);
                    precise float _796 = _757 * (-4.0);
                    precise float _800 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _700 : (isnan(_700) ? 0.001000000047497451305389404296875 : max(_700, 0.001000000047497451305389404296875)));
                    precise float _802 = dot(vec2(_759, _761), vec2(_741, _743));
                    precise float _806 = _800 * _802;
                    precise float _807 = float(_794) * _806;
                    precise float _808 = _406 * _800;
                    precise float _809 = _808 - _807;
                    precise float _810 = (_794 ? 0.0 : _796) + _809;
                    precise float _812 = _685 * sin(_810);
                    precise float _813 = _760 * 0.0;
                    precise float _814 = _813 - _761;
                    precise float _815 = _761 * 0.0;
                    precise float _816 = _759 * 0.0;
                    precise float _817 = _815 - _816;
                    precise float _818 = _759 - _813;
                    precise float _819 = _701 * _812;
                    float _820 = _738 ? _819 : 0.0;
                    float _863;
                    if (_739)
                    {
                        precise float _823 = _715 * 2.0;
                        precise float _825 = _735 + _736;
                        precise float _826 = _737 + _825;
                        precise float _828 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _715 : (isnan(_715) ? 0.001000000047497451305389404296875 : max(_715, 0.001000000047497451305389404296875)));
                        precise float _829 = _734 * _828;
                        precise float _830 = (-0.0) - _759;
                        precise float _835 = dot(vec2(_761, _830), vec2(_741, _743)) / _823;
                        precise float _836 = (-0.0) - _835;
                        float _839 = fract(abs(_835));
                        precise float _840 = (-0.0) - _839;
                        precise float _842 = _823 * ((_835 >= _836) ? _839 : _840);
                        precise float _843 = _842 * 6.283184051513671875;
                        precise float _844 = _843 / _823;
                        precise float _846 = (isnan(5.0) ? _715 : (isnan(_715) ? 5.0 : min(_715, 5.0))) * sin(_844);
                        precise float _847 = _802 + _846;
                        precise float _848 = _715 * 0.25;
                        precise float _850 = _406 * _734;
                        precise float _851 = _850 - _848;
                        precise float _852 = _851 - _847;
                        precise float _853 = _734 * _826;
                        precise float _855 = _852 / (isnan(0.001000000047497451305389404296875) ? _853 : (isnan(_853) ? 0.001000000047497451305389404296875 : max(_853, 0.001000000047497451305389404296875)));
                        float _856 = fract(_855);
                        precise float _858 = 1.0 - _856;
                        float _859 = (_855 < 0.0) ? _858 : _856;
                        precise float _860 = _825 / _826;
                        precise float _861 = _735 / _826;
                        float _882;
                        if (_859 < _861)
                        {
                            precise float _880 = _859 / _861;
                            _882 = _880;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_859 < _860)
                            {
                                precise float _892 = _859 - _861;
                                precise float _893 = _860 - _861;
                                precise float _894 = _892 / _893;
                                precise float _883 = 1.0 - _894;
                                frontier_phi_14_13_ladder = _883;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _882 = frontier_phi_14_13_ladder;
                        }
                        precise float _884 = _717 * _882;
                        precise float _885 = _828 * _802;
                        precise float _886 = _406 * _829;
                        precise float _887 = _886 - _885;
                        precise float _889 = _716 + sin(_887);
                        precise float _891 = _884 * abs(_889);
                        precise float _864 = _891 + 0.0;
                        _863 = _864;
                    }
                    else
                    {
                        _863 = 0.0;
                    }
                    precise float _865 = _666 + _812;
                    precise float _866 = _865 + _863;
                    precise float _867 = _759 * _866;
                    precise float _868 = _760 * _866;
                    precise float _869 = _761 * _866;
                    precise float _870 = _814 * _820;
                    precise float _871 = _817 * _820;
                    precise float _872 = _818 * _820;
                    precise float _873 = _870 + _867;
                    precise float _874 = _871 + _868;
                    precise float _875 = _872 + _869;
                    precise float _876 = _791 * _873;
                    precise float _877 = _791 * _874;
                    precise float _878 = _791 * _875;
                    precise float _767 = _876 * 0.0500000007450580596923828125;
                    precise float _769 = _877 * 0.0500000007450580596923828125;
                    precise float _771 = _878 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _767;
                    frontier_phi_5_pred_7_ladder_1 = _769;
                    frontier_phi_5_pred_7_ladder_2 = _771;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _766 = frontier_phi_5_pred;
            _768 = frontier_phi_5_pred_1;
            _770 = frontier_phi_5_pred_2;
            _408 = _625 + _766;
            _410 = _626 + _768;
            _412 = _627 + _770;
            uint _631 = _630 + 1u;
            if (_631 == _139)
            {
                break;
            }
            else
            {
                _625 = _408;
                _626 = _410;
                _627 = _412;
                _628 = (_630 != 3u) ? (_628 >> 8u) : _137;
                _630 = _631;
                continue;
            }
        }
        _407 = _408;
        _409 = _410;
        _411 = _412;
    }
    precise float _413 = _407 * _407;
    precise float _414 = _409 * _409;
    precise float _415 = _413 + _414;
    precise float _416 = _411 * _411;
    precise float _417 = _415 + _416;
    float _418 = sqrt(_417);
    bool _419 = _418 < 0.00011000000085914507508277893066406;
    float _424 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].x, cbInstanceData._m0[_123].x, cbInstanceData._m0[_127].x), vec3(cbInstanceData._m0[_118].x, cbInstanceData._m0[_123].x, cbInstanceData._m0[_127].x)));
    precise float _425 = cbInstanceData._m0[_118].x * _424;
    precise float _426 = cbInstanceData._m0[_123].x * _424;
    precise float _427 = cbInstanceData._m0[_127].x * _424;
    float _431 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].y, cbInstanceData._m0[_123].y, cbInstanceData._m0[_127].y), vec3(cbInstanceData._m0[_118].y, cbInstanceData._m0[_123].y, cbInstanceData._m0[_127].y)));
    precise float _432 = cbInstanceData._m0[_118].y * _431;
    precise float _433 = cbInstanceData._m0[_123].y * _431;
    precise float _434 = cbInstanceData._m0[_127].y * _431;
    float _438 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].z, cbInstanceData._m0[_123].z, cbInstanceData._m0[_127].z), vec3(cbInstanceData._m0[_118].z, cbInstanceData._m0[_123].z, cbInstanceData._m0[_127].z)));
    precise float _439 = cbInstanceData._m0[_118].z * _438;
    precise float _440 = cbInstanceData._m0[_123].z * _438;
    precise float _441 = cbInstanceData._m0[_127].z * _438;
    precise float _442 = _425 * 0.0;
    precise float _443 = 1.0 * _432;
    precise float _444 = _443 + _442;
    precise float _445 = 0.0 * _439;
    precise float _446 = _445 + _444;
    precise float _447 = _426 * 0.0;
    precise float _448 = 1.0 * _433;
    precise float _449 = _448 + _447;
    precise float _450 = 0.0 * _440;
    precise float _451 = _450 + _449;
    precise float _452 = _427 * 0.0;
    precise float _453 = 1.0 * _434;
    precise float _454 = _453 + _452;
    precise float _455 = 0.0 * _441;
    precise float _456 = _455 + _454;
    float _460 = inversesqrt(dot(vec3(_407, _409, _411), vec3(_407, _409, _411)));
    precise float _461 = _407 * _460;
    precise float _462 = _409 * _460;
    precise float _463 = _411 * _460;
    precise float _464 = _451 * _463;
    precise float _465 = _456 * _462;
    precise float _466 = _464 - _465;
    precise float _467 = _456 * _461;
    precise float _468 = _446 * _463;
    precise float _469 = _467 - _468;
    precise float _470 = _446 * _462;
    precise float _471 = _451 * _461;
    precise float _472 = _470 - _471;
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    precise float _477 = _476 * _466;
    precise float _478 = _476 * _469;
    precise float _479 = _476 * _472;
    precise float _480 = _418 + 1.0;
    precise float _482 = cbMtdParam._m0[10u].y * log2(_480);
    precise float _483 = _353 - _391;
    precise float _484 = _360 - _398;
    precise float _485 = _367 - _405;
    precise float _486 = dot(vec3(_477, _478, _479), vec3(_483, _484, _485));
    precise float _489 = _477 * _486;
    precise float _490 = _478 * _486;
    precise float _491 = _479 * _486;
    precise float _492 = _391 + _489;
    precise float _493 = _398 + _490;
    precise float _494 = _405 + _491;
    precise float _495 = _353 - _492;
    precise float _496 = _360 - _493;
    precise float _497 = _367 - _494;
    precise float _498 = _478 * _497;
    precise float _499 = _479 * _496;
    precise float _500 = _498 - _499;
    precise float _501 = _479 * _495;
    precise float _502 = _477 * _497;
    precise float _503 = _501 - _502;
    precise float _504 = _477 * _496;
    precise float _505 = _478 * _495;
    precise float _506 = _504 - _505;
    float _507 = sin(_482);
    float _508 = cos(_482);
    precise float _509 = _495 * _508;
    precise float _510 = _496 * _508;
    precise float _511 = _497 * _508;
    precise float _512 = _507 * _500;
    precise float _513 = _507 * _503;
    precise float _514 = _507 * _506;
    precise float _515 = _509 + _512;
    precise float _516 = _510 + _513;
    precise float _517 = _514 + _511;
    precise float _518 = _492 + _515;
    precise float _519 = _493 + _516;
    precise float _520 = _494 + _517;
    precise float _521 = _518 - _353;
    precise float _522 = _519 - _360;
    precise float _523 = _520 - _367;
    precise float _527 = _353 + (_419 ? 0.0 : _521);
    precise float _528 = _360 + (_419 ? 0.0 : _522);
    precise float _529 = _367 + (_419 ? 0.0 : _523);
    precise float _535 = _527 - cbSceneParam._m0[3u].x;
    precise float _536 = _528 - cbSceneParam._m0[3u].y;
    precise float _537 = _529 - cbSceneParam._m0[3u].z;
    precise float _565 = _535 * cbSceneParam._m0[24u].x;
    precise float _566 = _536 * cbSceneParam._m0[24u].y;
    precise float _567 = _566 + _565;
    precise float _568 = _537 * cbSceneParam._m0[24u].z;
    precise float _569 = _568 + _567;
    precise float _570 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _571 = _570 + _569;
    precise float _572 = _535 * cbSceneParam._m0[25u].x;
    precise float _573 = _536 * cbSceneParam._m0[25u].y;
    precise float _574 = _573 + _572;
    precise float _575 = _537 * cbSceneParam._m0[25u].z;
    precise float _576 = _575 + _574;
    precise float _577 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _578 = _577 + _576;
    precise float _579 = _535 * cbSceneParam._m0[26u].x;
    precise float _580 = _536 * cbSceneParam._m0[26u].y;
    precise float _581 = _580 + _579;
    precise float _582 = _537 * cbSceneParam._m0[26u].z;
    precise float _583 = _582 + _581;
    precise float _584 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _585 = _584 + _583;
    precise float _586 = _535 * cbSceneParam._m0[27u].x;
    precise float _587 = _536 * cbSceneParam._m0[27u].y;
    precise float _588 = _587 + _586;
    precise float _589 = _537 * cbSceneParam._m0[27u].z;
    precise float _590 = _589 + _588;
    precise float _591 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _592 = _591 + _590;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _571;
    gl_Position.y = _578;
    gl_Position.z = _585;
    gl_Position.w = _592;
    gl_ClipDistance[0u] = dot(vec4(_571, _578, _585, _592), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_571, _578, _585, _592), vec4(cbInstanceData._m0[_165 + 3u]));
}


