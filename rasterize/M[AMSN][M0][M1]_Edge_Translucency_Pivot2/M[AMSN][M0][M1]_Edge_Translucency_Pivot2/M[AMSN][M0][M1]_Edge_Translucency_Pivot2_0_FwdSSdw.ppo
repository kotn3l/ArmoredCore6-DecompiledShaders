#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _856;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _229 = _223.w;
    float _230 = _223.x * cbMtdParam._m0[9u].x;
    float _231 = _223.y * cbMtdParam._m0[9u].y;
    float _232 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3448 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))));
    vec4 _287 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _294 = cbMtdParam._m0[10u].x * _287.x;
    float _297 = fma(_275, _193 * NORMAL.x, fma(_268, _200 * TANGENT.x, (_186 * _178) * _266));
    float _300 = fma(_275, _193 * NORMAL.y, fma(_268, _200 * TANGENT.y, (_186 * _179) * _266));
    float _303 = fma(_275, _193 * NORMAL.z, fma(_268, _200 * TANGENT.z, (_186 * _180) * _266));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3459 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _311 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _313 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3486 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3497 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3508 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3519 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _317 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _421 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _424 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _427 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _440 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = (_440 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3530 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _455 = 1.0 - _317;
    float _456 = _452 * _455;
    float _457 = _453 * _455;
    float _458 = _454 * _455;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _317;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _317;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _317;
    float _466 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    vec4 _478 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _481 = _478.x * TEXCOORD_3.w;
    float _482 = dot(vec3(_308, _309, _310), vec3(_391, _392, _393));
    float _485 = _482 * 2.0;
    float _489 = (_485 * _308) - _391;
    float _490 = (_485 * _309) - _392;
    float _491 = (_485 * _310) - _393;
    float _492 = dot(vec3(_391, _392, _393), vec3(_308, _309, _310));
    float _495 = abs(_492);
    float _3563 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_312);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _516 = (1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _517 = _510 * _497;
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _584 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _588 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _613 = _545 + _308;
        float _614 = _549 + _309;
        float _615 = _553 + _310;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _580;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _584;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _588;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_649.x + (-0.5));
        float _685 = _683 * (_649.y + (-0.5));
        float _686 = _683 * (_649.z + (-0.5));
        float _693 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_656.x + (-0.5));
        float _695 = _693 * (_656.y + (-0.5));
        float _696 = _693 * (_656.z + (-0.5));
        float _703 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_663.x + (-0.5));
        float _705 = _703 * (_663.y + (-0.5));
        float _706 = _703 * (_663.z + (-0.5));
        float _713 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_670.x + (-0.5));
        float _715 = _713 * (_670.y + (-0.5));
        float _716 = _713 * (_670.z + (-0.5));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = _684 * 0.5;
        float _721 = _694 * 0.5;
        float _722 = _704 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _737 = (dot(vec3(_308, _309, _310), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _747 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3611 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_749 + 1.0))) + _754) * _717;
        float _764 = _685 * 0.5;
        float _765 = _695 * 0.5;
        float _766 = _705 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_308, _309, _310), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3644 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_791 + 1.0))) + _796) * _718;
        float _806 = _686 * 0.5;
        float _807 = _696 * 0.5;
        float _808 = _706 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_308, _309, _310), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3677 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_833 + 1.0))) + _838) * _719;
        _855 = _686;
        _857 = _685;
        _858 = _684;
        _859 = _696;
        _860 = _695;
        _861 = _694;
        _862 = _706;
        _863 = _705;
        _864 = _704;
        _865 = _719;
        _866 = _718;
        _867 = _717;
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = _856;
        _857 = _856;
        _858 = _856;
        _859 = _856;
        _860 = _856;
        _861 = _856;
        _862 = _856;
        _863 = _856;
        _864 = _856;
        _865 = _856;
        _866 = _856;
        _867 = _856;
        _868 = 0.0;
        _869 = 0.0;
        _870 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _900 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _904 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _927 = _545 + _308;
        float _928 = _549 + _309;
        float _929 = _553 + _310;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_308, _309, _310), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3740 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_308, _309, _310), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3773 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_308, _309, _310), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3806 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _856;
        _1166 = _856;
        _1167 = _856;
        _1168 = _856;
        _1169 = _856;
        _1170 = _856;
        _1171 = _856;
        _1172 = _856;
        _1173 = _856;
        _1174 = _856;
        _1175 = _856;
        _1176 = _856;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _859, _862, _865));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_857, _860, _863, _866));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_858, _861, _864, _867));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1301 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _312);
    float _1302 = isnan(_1301) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1301 : min(cbModelParam._m0[25u].z, _1301));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1365 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1368 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1396 = frontier_phi_14_12_ladder;
        }
        float _1599;
        if (_1365 > 0.0)
        {
            _1599 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1599 = frontier_phi_23_19_ladder;
        }
        float _1673;
        if (_1368 > 0.0)
        {
            _1673 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1673 = frontier_phi_34_30_ladder;
        }
        float _1675 = isnan(_1599) ? _1396 : (isnan(_1396) ? _1599 : min(_1396, _1599));
        float _1676 = isnan(_1673) ? _1675 : (isnan(_1675) ? _1673 : min(_1675, _1673));
        float _1680 = (_1676 * _1362) + _1351;
        float _1681 = (_1676 * _1365) + _1355;
        float _1682 = (_1676 * _1368) + _1359;
        float _1683 = _1676 * 9.9999997473787516355514526367188e-05;
        float _1685 = (-1.0) - _1683;
        float _1687 = _1683 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1682 > _1687) || ((_1682 < _1685) || ((_1681 > _1687) || ((_1681 < _1685) || ((_1680 < _1685) || (_1680 > _1687))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1682, cbModelParam._m0[9u].z, fma(_1681, cbModelParam._m0[9u].y, _1680 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1682, cbModelParam._m0[10u].z, fma(_1681, cbModelParam._m0[10u].y, _1680 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1682, cbModelParam._m0[11u].z, fma(_1681, cbModelParam._m0[11u].y, _1680 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_13_34_ladder = _1758.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1758.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1758.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_13_34_ladder_2;
        _1386 = frontier_phi_13_34_ladder_1;
        _1388 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1302);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _312);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1464 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1467 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1604;
        if (_1461 > 0.0)
        {
            _1604 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1604 = frontier_phi_25_21_ladder;
        }
        float _1700;
        if (_1464 > 0.0)
        {
            _1700 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1700 = frontier_phi_36_32_ladder;
        }
        float _1982;
        if (_1467 > 0.0)
        {
            _1982 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1982 = frontier_phi_45_42_ladder;
        }
        float _1984 = isnan(_1700) ? _1604 : (isnan(_1604) ? _1700 : min(_1604, _1700));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1461) + _1450;
        float _1990 = (_1985 * _1464) + _1454;
        float _1991 = (_1985 * _1467) + _1458;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1992;
        float _1995 = _1992 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1991 > _1995) || ((_1991 < _1993) || ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 < _1993) || (_1989 > _1995))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1991, cbModelParam._m0[17u].z, fma(_1990, cbModelParam._m0[17u].y, _1989 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1991, cbModelParam._m0[18u].z, fma(_1990, cbModelParam._m0[18u].y, _1989 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1991, cbModelParam._m0[19u].z, fma(_1990, cbModelParam._m0[19u].y, _1989 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_22_45_ladder = _2113.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2113.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2113.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_22_45_ladder_2;
        _1488 = frontier_phi_22_45_ladder_1;
        _1490 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1503 = (((_516 * _466) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1505 = (((_516 * _468) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1507 = (((_516 * _469) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    vec4 _1524 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_399, _400));
    float _1526 = _1524.w;
    float _1538 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1526);
    float _1539 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1526);
    float _1540 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1526);
    uvec4 _1544 = floatBitsToUint(cbInstanceData._m0[_440 + 5u]);
    uint _1546 = _1544.x * 14u;
    uint _1547 = _1546 + 13u;
    float _1554 = _481 + (-1.0);
    float _1559 = (cbLight._m0[_1547].x * _1554) + 1.0;
    float _1560 = (cbLight._m0[_1547].y * _1554) + 1.0;
    float _1561 = (cbLight._m0[_1547].z * _1554) + 1.0;
    float _1562 = (cbLight._m0[_1547].w * _1554) + 1.0;
    uint _1564 = _1546 + 4u;
    float _1576 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_308, _309, _310));
    float _1579 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    float _1580 = cbLight._m0[_1564].x * _1538;
    float _1581 = cbLight._m0[_1564].y * _1539;
    float _1582 = cbLight._m0[_1564].z * _1540;
    uint _1583 = _1546 + 5u;
    float _1595 = dot(vec3(cbLight._m0[_1546 | 1u].xyz), vec3(_308, _309, _310));
    float _1598 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    float _1663;
    float _1664;
    float _1665;
    if (_313 == 0.0)
    {
        float _3942 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _3953 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1617 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
        float _1619 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
        _1663 = ((cbLight._m0[_1583].x * _1598) * _1619) + ((_1580 * _1579) * _1617);
        _1664 = ((_1598 * cbLight._m0[_1583].y) * _1619) + ((_1581 * _1579) * _1617);
        _1665 = ((_1598 * cbLight._m0[_1583].z) * _1619) + ((_1582 * _1579) * _1617);
    }
    else
    {
        float _1629 = _1576 + _313;
        float _1632 = (_313 * 2.0) + 1.0;
        float _1633 = (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) / _1632;
        float _1640 = _1595 + _313;
        float _1642 = (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) / _1632;
        _1663 = (((_1642 * cbLight._m0[_1583].x) * _1598) + ((_1580 * _1633) * _1579)) * 0.3183098733425140380859375;
        _1664 = (((_1642 * cbLight._m0[_1583].y) * _1598) + ((_1581 * _1633) * _1579)) * 0.3183098733425140380859375;
        _1665 = (((_1642 * cbLight._m0[_1583].z) * _1598) + ((_1582 * _1633) * _1579)) * 0.3183098733425140380859375;
    }
    uvec4 _1670 = floatBitsToUint(cbLight._m0[_1546 + 12u]);
    bool _1672 = _1670.x == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1672)
    {
        _1705 = _1663;
        _1707 = _1664;
        _1709 = _1665;
    }
    else
    {
        uint _1713 = _1546 + 6u;
        float _1729 = (dot(vec3(cbLight._m0[_1546 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1730 = _1729 * _1729;
        float _3974 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1732 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1705 = (((cbLight._m0[_1713].x * 0.3183098733425140380859375) * _1731) * _1732) + _1663;
        _1707 = (((cbLight._m0[_1713].y * 0.3183098733425140380859375) * _1731) * _1732) + _1664;
        _1709 = (((cbLight._m0[_1713].z * 0.3183098733425140380859375) * _1731) * _1732) + _1665;
    }
    bool _1712 = _1670.y == 0u;
    float _1767;
    float _1769;
    float _1771;
    if (_1712)
    {
        _1767 = _1705;
        _1769 = _1707;
        _1771 = _1709;
    }
    else
    {
        uint _1953 = _1546 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1546 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3990 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1972 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1767 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1705;
        _1769 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1707;
        _1771 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1709;
    }
    uint _1776 = _1546 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _312) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1546].x + _391;
    float _1795 = cbLight._m0[_1546].y + _392;
    float _1796 = cbLight._m0[_1546].z + _393;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1546].xyz));
    float _4006 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1808 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1809 = dot(vec3(_308, _309, _310), vec3(_1801, _1802, _1803));
    float _4028 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1801, _1802, _1803));
    float _4039 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _463;
    float _1832 = 0.959999978542327880859375 - _464;
    float _1833 = 0.959999978542327880859375 - _465;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _4050 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    float _1854 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1867 = _1546 | 1u;
    uint _1871 = _1546 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _312) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1867].x + _391;
    float _1888 = cbLight._m0[_1867].y + _392;
    float _1889 = cbLight._m0[_1867].z + _393;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1867].xyz));
    float _4066 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1901 = dot(vec3(_308, _309, _310), vec3(_1894, _1895, _1896));
    float _4077 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_1894, _1895, _1896));
    float _4088 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
    float _1927 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1808 * ((_1900 * _1927) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1927) + _1886) * _1900))) * _1900;
    float _4099 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1940 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    float _1950 = (((((_1920 * _1830) + _466) * cbLight._m0[_1871].x) * _1939) * _1940) + ((((cbLight._m0[_1776].x * _1538) * ((_1829 * _1830) + _466)) * _1853) * _1854);
    float _1951 = (((((_1920 * _1832) + _468) * cbLight._m0[_1871].y) * _1939) * _1940) + ((((cbLight._m0[_1776].y * _1539) * ((_1829 * _1832) + _468)) * _1853) * _1854);
    float _1952 = (((((_1920 * _1833) + _469) * cbLight._m0[_1871].z) * _1939) * _1940) + ((((cbLight._m0[_1776].z * _1540) * ((_1829 * _1833) + _469)) * _1853) * _1854);
    float _2008;
    float _2010;
    float _2012;
    if (_1672)
    {
        _2008 = _1950;
        _2010 = _1951;
        _2012 = _1952;
    }
    else
    {
        uint _2014 = _1546 + 2u;
        uint _2018 = _1546 + 10u;
        float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _312) * 0.949999988079071044921875);
        float _2033 = _2032 * _2032;
        float _2034 = cbLight._m0[_2014].x + _391;
        float _2035 = cbLight._m0[_2014].y + _392;
        float _2036 = cbLight._m0[_2014].z + _393;
        float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
        float _2041 = _2040 * _2034;
        float _2042 = _2040 * _2035;
        float _2043 = _2040 * _2036;
        float _2044 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2014].xyz));
        float _4115 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2047 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2048 = dot(vec3(_308, _309, _310), vec3(_2041, _2042, _2043));
        float _4126 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2051 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2052 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2041, _2042, _2043));
        float _4137 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2056 = _2033 * _2033;
        float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
        float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
        float _2074 = 1.0 - _2033;
        float _2084 = (0.5 / (((_1808 * ((_2047 * _2074) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2074) + _2033) * _2047))) * _2047;
        float _4148 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2086 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
        float _2087 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _2008 = (((((_2067 * _1830) + _466) * cbLight._m0[_2018].x) * _2086) * _2087) + _1950;
        _2010 = (((((_2067 * _1832) + _468) * cbLight._m0[_2018].y) * _2086) * _2087) + _1951;
        _2012 = (((((_2067 * _1833) + _469) * cbLight._m0[_2018].z) * _2086) * _2087) + _1952;
    }
    float _2118;
    float _2120;
    float _2122;
    if (_1712)
    {
        _2118 = _2008;
        _2120 = _2010;
        _2122 = _2012;
    }
    else
    {
        uint _2129 = _1546 + 3u;
        uint _2133 = _1546 + 11u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _312) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _391;
        float _2150 = cbLight._m0[_2129].y + _392;
        float _2151 = cbLight._m0[_2129].z + _393;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2129].xyz));
        float _4164 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2163 = dot(vec3(_308, _309, _310), vec3(_2156, _2157, _2158));
        float _4175 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4186 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1808 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2189) + _2148) * _2162))) * _2162;
        float _4197 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _2118 = (((((_2182 * _1830) + _466) * cbLight._m0[_2133].x) * _2201) * _2202) + _2008;
        _2120 = (((((_2182 * _1832) + _468) * cbLight._m0[_2133].y) * _2201) * _2202) + _2010;
        _2122 = (((((_2182 * _1833) + _469) * cbLight._m0[_2133].z) * _2201) * _2202) + _2012;
    }
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1544.y == 0u)
    {
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2251;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2251;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2251;
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.x;
        uint _2278 = uint((float(_2266.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2267))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2267)));
        float _2288 = (log2(_2254 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2289 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        uint _2292 = uint(isnan(14.0) ? _2289 : (isnan(_2289) ? 14.0 : min(_2289, 14.0)));
        uvec4 _2297 = texelFetch(g_lightClusterGridBuffer, int(((_2292 << 2u) + (_2278 << 6u)) >> 2u));
        uint _2298 = _2297.x;
        uint _2299 = _2266.z;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        if (((((1u << ((_2299 >> 4u) & 15u)) + 4294967295u) & _2298) == 0u) || ((_2299 & 240u) == 0u))
        {
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
        }
        else
        {
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2524)
                {
                    frontier_phi_64_pred = _2511;
                    frontier_phi_64_pred_1 = _2513;
                    frontier_phi_64_pred_2 = _2512;
                    frontier_phi_64_pred_3 = _2510;
                    frontier_phi_64_pred_4 = _2509;
                    frontier_phi_64_pred_5 = _2508;
                }
                else
                {
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    uint _2691;
                    _2685 = _2508;
                    _2686 = _2509;
                    _2687 = _2510;
                    _2688 = _2511;
                    _2689 = _2512;
                    _2690 = _2513;
                    _2691 = _2523;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    for (;;)
                    {
                        uint _2695 = uint(findLSB(_2691)) + (_2514 << 5u);
                        uint _2692 = (_2691 + 4294967295u) & _2691;
                        uint _2697 = _2695 * 48u;
                        vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2717 = (_2695 * 48u) + 4u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        float _2731 = _2730.x;
                        float _2732 = _2730.y;
                        float _2733 = _2730.z;
                        uint _2736 = (_2695 * 48u) + 8u;
                        vec3 _2747 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x));
                        uint _2752 = (_2695 * 48u) + 12u;
                        vec2 _2760 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x));
                        float _2766 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
                        float _2767 = _2766 * _2252;
                        float _2768 = _2766 * _2253;
                        float _2769 = _2766 * _2254;
                        float _2770 = _2711.x - _2252;
                        float _2771 = _2711.y - _2253;
                        float _2772 = _2711.z - _2254;
                        float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                        float _2776 = inversesqrt(_2773);
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2780 = dot(vec3(_421, _424, _427), vec3(_2777, _2778, _2779));
                        float _2785 = 1.0 - (_2773 * _2711.w);
                        float _4223 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2787 = sqrt(_2773) * _2730.w;
                        float _2790 = 1.39999997615814208984375 / (_2787 + 1.39999997615814208984375);
                        float _2791 = _2790 * _2790;
                        float _2792 = 1.0 - _2791;
                        float _2794 = (_2792 * _2792) * _313;
                        float _2797 = ((_2792 * _2780) + _2791) + _2794;
                        float _2802 = _2787 * _2787;
                        float _2807 = ((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2786) / (((_2794 * 2.0) + 1.0) * ((_2802 * 0.699999988079071044921875) + 1.0));
                        float _2811 = dot(vec3(_2777, _2778, _2779), vec3(_2767, _2768, _2769));
                        float _4239 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2818 = dot(vec3((-0.0) - _2767, (-0.0) - _2768, (-0.0) - _2769), vec3(_421, _424, _427)) + 1.0;
                        float _2820 = (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))) * 0.5;
                        float _2827 = ((_2820 * _2820) * _2760.x) * exp2((_2760.y * 32.0) * log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))));
                        float _2829 = _313 / (_313 + 1.0);
                        float _2845 = (-0.0) - _2252;
                        float _2846 = (-0.0) - _2253;
                        float _2847 = (-0.0) - _2254;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2862 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _497;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2852 + _2777;
                        float _2874 = _2853 + _2778;
                        float _2875 = _2854 + _2779;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_421, _424, _427), vec3(_2852, _2853, _2854));
                        float _4255 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2887 = dot(vec3(_421, _424, _427), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4266 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2790 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2780) + _2896;
                        float _4277 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4288 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_2894 * _2894) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2786;
                        _2619 = (((((_2731 * 0.3183098733425140380859375) * _2829) * _2827) + _2731) * _2807) + _2688;
                        _2620 = (((((_2732 * 0.3183098733425140380859375) * _2829) * _2827) + _2732) * _2807) + _2689;
                        _2621 = (((((_2733 * 0.3183098733425140380859375) * _2829) * _2827) + _2733) * _2807) + _2690;
                        _2616 = (_2922 * _2747.x) + _2685;
                        _2617 = (_2922 * _2747.y) + _2686;
                        _2618 = (_2922 * _2747.z) + _2687;
                        if (_2692 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2685 = _2616;
                            _2686 = _2617;
                            _2687 = _2618;
                            _2688 = _2619;
                            _2689 = _2620;
                            _2690 = _2621;
                            _2691 = _2692;
                        }
                    }
                    frontier_phi_64_pred = _2619;
                    frontier_phi_64_pred_1 = _2621;
                    frontier_phi_64_pred_2 = _2620;
                    frontier_phi_64_pred_3 = _2618;
                    frontier_phi_64_pred_4 = _2617;
                    frontier_phi_64_pred_5 = _2616;
                }
                _2331 = frontier_phi_64_pred;
                _2335 = frontier_phi_64_pred_1;
                _2333 = frontier_phi_64_pred_2;
                _2329 = frontier_phi_64_pred_3;
                _2327 = frontier_phi_64_pred_4;
                _2325 = frontier_phi_64_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2325;
                    _2509 = _2327;
                    _2510 = _2329;
                    _2511 = _2331;
                    _2512 = _2333;
                    _2513 = _2335;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
        }
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.z;
        uint _2341 = (_2339 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2341) & _2298) == 0u)
        {
            _2476 = _2324;
            _2478 = _2326;
            _2480 = _2328;
            _2482 = _2330;
            _2484 = _2332;
            _2486 = _2334;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
            float _2502 = _2501 * _2252;
            float _2503 = _2501 * _2253;
            float _2504 = _2501 * _2254;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2341 < ((_2339 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2668 = _2324;
                float _2669 = _2326;
                float _2670 = _2328;
                float _2671 = _2330;
                float _2672 = _2332;
                float _2673 = _2334;
                uint _2674 = _2341;
                uint _2683;
                bool _2684;
                for (;;)
                {
                    _2683 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                    _2684 = _2683 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2684)
                    {
                        frontier_phi_72_pred = _2673;
                        frontier_phi_72_pred_1 = _2672;
                        frontier_phi_72_pred_2 = _2671;
                        frontier_phi_72_pred_3 = _2670;
                        frontier_phi_72_pred_4 = _2669;
                        frontier_phi_72_pred_5 = _2668;
                    }
                    else
                    {
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _2978 = _2668;
                        float _2979 = _2669;
                        float _2980 = _2670;
                        float _2981 = _2671;
                        float _2982 = _2672;
                        float _2983 = _2673;
                        uint _2984 = _2683;
                        uint _2985;
                        vec4 _3010;
                        float _3011;
                        vec4 _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        vec3 _3041;
                        vec2 _3050;
                        vec4 _3066;
                        vec4 _3082;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _2995 = ((_2674 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2984));
                            _2985 = (_2984 + 4294967295u) & _2984;
                            uint _2997 = _2995 * 40u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3011 = _3010.w;
                            uint _3013 = (_2995 * 40u) + 4u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.x;
                            _3028 = _3026.y;
                            _3029 = _3026.z;
                            uint _3031 = (_2995 * 40u) + 8u;
                            _3041 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x));
                            uint _3043 = (_2995 * 40u) + 12u;
                            _3050 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x));
                            uint _3053 = (_2995 * 40u) + 16u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3069 = (_2995 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_2995 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_2995 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2254, _3117.z, fma(_2253, _3117.y, _3117.x * _2252)) + _3117.w;
                            _3130 = !((fma(_2254, _3098.z, fma(_2253, _3098.y, _3098.x * _2252)) + _3098.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3130)
                            {
                                float _3156 = _3010.x - _2252;
                                float _3157 = _3010.y - _2253;
                                float _3158 = _3010.z - _2254;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3011 * _3011));
                                float _4299 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3174 = sqrt(_3159) * _3026.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3178 = 1.0 - _3177;
                                float _3180 = (_3178 * _3178) * _313;
                                float _3183 = ((_3178 * dot(vec3(_3163, _3164, _3165), vec3(_421, _424, _427))) + _3177) + _3180;
                                float _3188 = _3174 * _3174;
                                float _3193 = (fma(_2254, _3066.z, fma(_2253, _3066.y, _3066.x * _2252)) + _3066.w) / _3129;
                                float _3194 = (fma(_2254, _3082.z, fma(_2253, _3082.y, _3082.x * _2252)) + _3082.w) / _3129;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4315 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3170) / (((_3180 * 2.0) + 1.0) * ((_3188 * 0.699999988079071044921875) + 1.0)));
                                float _3201 = (-0.0) - _2502;
                                float _3202 = (-0.0) - _2503;
                                float _3203 = (-0.0) - _2504;
                                float _3204 = dot(vec3(_3163, _3164, _3165), vec3(_2502, _2503, _2504));
                                float _4326 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3211 = dot(vec3(_3201, _3202, _3203), vec3(_421, _424, _427)) + 1.0;
                                float _3213 = (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * 0.5;
                                float _3220 = ((_3213 * _3213) * _3050.x) * exp2((_3050.y * 32.0) * log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))));
                                float _3222 = _313 / (_313 + 1.0);
                                float _3243 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                                float _3244 = 1.0 - _497;
                                float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                                float _3252 = _3251 * _3251;
                                float _3253 = _3252 * _3252;
                                float _3254 = _3163 - _2502;
                                float _3255 = _3164 - _2503;
                                float _3256 = _3165 - _2504;
                                float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                                float _3264 = dot(vec3(_421, _424, _427), vec3(_3201, _3202, _3203));
                                float _4342 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3268 = dot(vec3(_421, _424, _427), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                                float _4353 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                                float _3276 = _3176 * _3252;
                                float _3277 = _3276 * _3276;
                                float _3283 = ((1.0 - _3277) * dot(vec3(_421, _424, _427), vec3(_3163, _3164, _3165))) + _3277;
                                float _4364 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3285 = 1.0 - _3252;
                                float _3295 = (0.5 / (((_3284 * ((_3267 * _3285) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3252) * _3267))) * _3284;
                                float _4375 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3305 = (_3199 * _3170) * (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3275 * _3275) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3029 * 0.3183098733425140380859375) * _3222) * _3220) + _3029) * _3200;
                                frontier_phi_78_pred_1 = ((((_3028 * 0.3183098733425140380859375) * _3222) * _3220) + _3028) * _3200;
                                frontier_phi_78_pred_2 = ((((_3027 * 0.3183098733425140380859375) * _3222) * _3220) + _3027) * _3200;
                                frontier_phi_78_pred_3 = _3305 * _3041.z;
                                frontier_phi_78_pred_4 = _3305 * _3041.y;
                                frontier_phi_78_pred_5 = _3305 * _3041.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3314 = frontier_phi_78_pred;
                            _3313 = frontier_phi_78_pred_1;
                            _3312 = frontier_phi_78_pred_2;
                            _3311 = frontier_phi_78_pred_3;
                            _3310 = frontier_phi_78_pred_4;
                            _3309 = frontier_phi_78_pred_5;
                            _2968 = _3312 + _2981;
                            _2969 = _3313 + _2982;
                            _2970 = _3314 + _2983;
                            _2965 = _3309 + _2978;
                            _2966 = _3310 + _2979;
                            _2967 = _3311 + _2980;
                            if (_2985 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2985;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2970;
                        frontier_phi_72_pred_1 = _2969;
                        frontier_phi_72_pred_2 = _2968;
                        frontier_phi_72_pred_3 = _2967;
                        frontier_phi_72_pred_4 = _2966;
                        frontier_phi_72_pred_5 = _2965;
                    }
                    _2487 = frontier_phi_72_pred;
                    _2485 = frontier_phi_72_pred_1;
                    _2483 = frontier_phi_72_pred_2;
                    _2481 = frontier_phi_72_pred_3;
                    _2479 = frontier_phi_72_pred_4;
                    _2477 = frontier_phi_72_pred_5;
                    uint _2675 = _2674 + 1u;
                    if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2668 = _2477;
                        _2669 = _2479;
                        _2670 = _2481;
                        _2671 = _2483;
                        _2672 = _2485;
                        _2673 = _2487;
                        _2674 = _2675;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2481;
                frontier_phi_58_59_ladder_1 = _2487;
                frontier_phi_58_59_ladder_2 = _2485;
                frontier_phi_58_59_ladder_3 = _2483;
                frontier_phi_58_59_ladder_4 = _2479;
                frontier_phi_58_59_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_58_59_ladder = _2328;
                frontier_phi_58_59_ladder_1 = _2334;
                frontier_phi_58_59_ladder_2 = _2332;
                frontier_phi_58_59_ladder_3 = _2330;
                frontier_phi_58_59_ladder_4 = _2326;
                frontier_phi_58_59_ladder_5 = _2324;
            }
            _2476 = frontier_phi_58_59_ladder_5;
            _2478 = frontier_phi_58_59_ladder_4;
            _2480 = frontier_phi_58_59_ladder;
            _2482 = frontier_phi_58_59_ladder_3;
            _2484 = frontier_phi_58_59_ladder_2;
            _2486 = frontier_phi_58_59_ladder_1;
        }
        float _2491 = isnan(1.0) ? _481 : (isnan(_481) ? 1.0 : min(_481, 1.0));
        _2311 = (_2491 * _2482) + _1767;
        _2313 = (_2491 * _2484) + _1769;
        _2315 = (_2491 * _2486) + _1771;
        _2317 = ((_2476 * _466) * _2491) + _2118;
        _2319 = ((_2478 * _468) * _2491) + _2120;
        _2321 = ((_2480 * _469) * _2491) + _2122;
    }
    else
    {
        _2311 = _1767;
        _2313 = _1769;
        _2315 = _1771;
        _2317 = _2118;
        _2319 = _2120;
        _2321 = _2122;
    }
    float _2413;
    float _2414;
    float _2415;
    if (_313 > 0.0)
    {
        uint _2345 = _1546 + 4u;
        float _2351 = (-0.0) - _391;
        float _2353 = (-0.0) - _392;
        float _2354 = (-0.0) - _393;
        float _2355 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_2351, _2353, _2354));
        float _4391 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _492 + 1.0;
        float _2361 = (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0))) * 0.5;
        float _2366 = _2361 * _2361;
        float _2367 = _2366 * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 32.0);
        float _2369 = _313 / (_313 + 1.0);
        float _2370 = isnan(_1559) ? 1.0 : (isnan(1.0) ? _1559 : min(1.0, _1559));
        uint _2383 = _1546 + 5u;
        float _2389 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2351, _2353, _2354));
        float _4412 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2396 = _2366 * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 32.0);
        float _2397 = isnan(_1560) ? 1.0 : (isnan(1.0) ? _1560 : min(1.0, _1560));
        _2413 = ((((_2396 * cbLight._m0[_2383].x) * _2369) * _2397) + ((((cbLight._m0[_2345].x * _1538) * _2367) * _2369) * _2370)) * 0.3183098733425140380859375;
        _2414 = ((((_2396 * cbLight._m0[_2383].y) * _2369) * _2397) + ((((cbLight._m0[_2345].y * _1539) * _2367) * _2369) * _2370)) * 0.3183098733425140380859375;
        _2415 = ((((_2396 * cbLight._m0[_2383].z) * _2369) * _2397) + ((((cbLight._m0[_2345].z * _1540) * _2367) * _2369) * _2370)) * 0.3183098733425140380859375;
    }
    else
    {
        _2413 = 0.0;
        _2414 = 0.0;
        _2415 = 0.0;
    }
    float _4428 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4439 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4450 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4461 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _2442 = cbInstanceData._m0[_440 + 6u].w * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)));
    float _2447 = _399 / cbSceneParam._m0[86u].x;
    float _2448 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2529 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2530 = _2529 / _333;
        float _2541 = _2530 * _384;
        float _2542 = _385 * _2530;
        float _2543 = (-0.0) - _2542;
        float _2544 = _2530 * _386;
        float _2546 = (cbSceneParam._m0[77u].w * _2543) / _2529;
        float _2547 = _2546 + cbSceneParam._m0[79u].w;
        float _2548 = cbSceneParam._m0[79u].w - _2542;
        float _2554 = sqrt(((_2541 * _2541) + (_2542 * _2542)) + (_2544 * _2544));
        float _2557 = (1.0 - (cbSceneParam._m0[77u].w / _2529)) * _2554;
        float _2562 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2564 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2543 - _2546) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2547 > 0.0) ? exp2(_2562 * _2547) : (2.0 - exp2(_2564 * _2547))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2557;
        }
        else
        {
            float _2641 = 1.0 / cbSceneParam._m0[80u].x;
            float _2642 = isnan(_2548) ? _2547 : (isnan(_2547) ? _2548 : max(_2547, _2548));
            float _2643 = isnan(_2548) ? _2547 : (isnan(_2547) ? _2548 : min(_2547, _2548));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            _2927 = ((abs(_2554 / _2543) * cbSceneParam._m0[80u].y) * ((((_2652 - _2653) * 2.0) - ((exp2(_2562 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0)))) - exp2(_2562 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0))))) * _2641)) - ((exp2(_2564 * _2652) - exp2(_2564 * _2653)) * _2641))) + (_2557 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2467);
        _2566 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2568 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2570 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2572 = _2938 * _2467;
    }
    else
    {
        _2566 = _2464;
        _2568 = _2465;
        _2570 = _2466;
        _2572 = _2467;
    }
    float _2584 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2585 = _2584 == 3.0;
    float _2586 = log2(_2572);
    float _2593 = exp2(_2586 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * ((_2311 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _481)) + _2413)) + ((_2317 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2594 = exp2(_2586 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * ((_2313 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _481)) + _2414)) + ((_2319 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2595 = exp2(_2586 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * ((_2315 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _481)) + _2415)) + ((_2321 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1291)) * cbPerFrame._m0[3u].x));
    float _2604 = (_2584 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2604 * (_2585 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.y = _2604 * (_2585 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.z = _2604 * (_2585 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.w = _2442;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2442;
}


