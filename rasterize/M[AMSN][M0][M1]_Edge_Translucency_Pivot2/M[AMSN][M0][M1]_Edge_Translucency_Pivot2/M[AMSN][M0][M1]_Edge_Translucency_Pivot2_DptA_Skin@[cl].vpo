#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _798;

void main()
{
    uint _82 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    float _184 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _198 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _208 = _82 * 13u;
    uint _213 = _208 + 1u;
    uint _217 = _208 + 2u;
    uvec4 _225 = floatBitsToUint(cbInstanceData._m0[_208 + 7u]);
    uint _227 = _225.w;
    uint _229 = min(_225.y, 8u);
    precise float _233 = POSITION.x + 0.0;
    precise float _234 = POSITION.y + 0.0;
    precise float _235 = POSITION.z + 0.0;
    uint _240 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _82;
    uvec4 _242 = texelFetch(g_InstanceIndexBuffer, int(_240));
    uint _243 = _242.x;
    precise float _244 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _248 = isnan(_244) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _244 : max(0.001000000047497451305389404296875, _244));
    precise float _250 = BLENDWEIGHT.x / _248;
    precise float _251 = BLENDWEIGHT.y / _248;
    precise float _252 = BLENDWEIGHT.z / _248;
    precise float _253 = BLENDWEIGHT.w / _248;
    uvec4 _259 = floatBitsToUint(cbInstanceData._m0[(_243 * 13u) + 4u]);
    uint _260 = _259.x;
    uint _262 = (_260 + uint(float(BLENDINDICES.x))) * 3u;
    uint _269 = _262 + 1u;
    uint _276 = _262 + 2u;
    precise float _283 = _250 * cbObjMatrix._m0[_262].x;
    precise float _284 = _250 * cbObjMatrix._m0[_269].x;
    precise float _285 = _250 * cbObjMatrix._m0[_276].x;
    precise float _286 = _250 * cbObjMatrix._m0[_262].y;
    precise float _287 = _250 * cbObjMatrix._m0[_269].y;
    precise float _288 = _250 * cbObjMatrix._m0[_276].y;
    precise float _289 = _250 * cbObjMatrix._m0[_262].z;
    precise float _290 = _250 * cbObjMatrix._m0[_269].z;
    precise float _291 = _250 * cbObjMatrix._m0[_276].z;
    precise float _292 = _250 * cbObjMatrix._m0[_262].w;
    precise float _293 = _250 * cbObjMatrix._m0[_269].w;
    precise float _294 = _250 * cbObjMatrix._m0[_276].w;
    uint _297 = (_260 + uint(float(BLENDINDICES.y))) * 3u;
    uint _304 = _297 + 1u;
    uint _311 = _297 + 2u;
    precise float _318 = _251 * cbObjMatrix._m0[_297].x;
    precise float _319 = _251 * cbObjMatrix._m0[_304].x;
    precise float _320 = _251 * cbObjMatrix._m0[_311].x;
    precise float _321 = _251 * cbObjMatrix._m0[_297].y;
    precise float _322 = _251 * cbObjMatrix._m0[_304].y;
    precise float _323 = _251 * cbObjMatrix._m0[_311].y;
    precise float _324 = _251 * cbObjMatrix._m0[_297].z;
    precise float _325 = _251 * cbObjMatrix._m0[_304].z;
    precise float _326 = _251 * cbObjMatrix._m0[_311].z;
    precise float _327 = _251 * cbObjMatrix._m0[_297].w;
    precise float _328 = _251 * cbObjMatrix._m0[_304].w;
    precise float _329 = _251 * cbObjMatrix._m0[_311].w;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    uint _344 = (_260 + uint(float(BLENDINDICES.z))) * 3u;
    uint _351 = _344 + 1u;
    uint _358 = _344 + 2u;
    precise float _365 = _252 * cbObjMatrix._m0[_344].x;
    precise float _366 = _252 * cbObjMatrix._m0[_351].x;
    precise float _367 = _252 * cbObjMatrix._m0[_358].x;
    precise float _368 = _252 * cbObjMatrix._m0[_344].y;
    precise float _369 = _252 * cbObjMatrix._m0[_351].y;
    precise float _370 = _252 * cbObjMatrix._m0[_358].y;
    precise float _371 = _252 * cbObjMatrix._m0[_344].z;
    precise float _372 = _252 * cbObjMatrix._m0[_351].z;
    precise float _373 = _252 * cbObjMatrix._m0[_358].z;
    precise float _374 = _252 * cbObjMatrix._m0[_344].w;
    precise float _375 = _252 * cbObjMatrix._m0[_351].w;
    precise float _376 = _252 * cbObjMatrix._m0[_358].w;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    uint _391 = (_260 + uint(float(BLENDINDICES.w))) * 3u;
    uint _398 = _391 + 1u;
    uint _405 = _391 + 2u;
    precise float _412 = _253 * cbObjMatrix._m0[_391].x;
    precise float _413 = _253 * cbObjMatrix._m0[_398].x;
    precise float _414 = _253 * cbObjMatrix._m0[_405].x;
    precise float _415 = _253 * cbObjMatrix._m0[_391].y;
    precise float _416 = _253 * cbObjMatrix._m0[_398].y;
    precise float _417 = _253 * cbObjMatrix._m0[_405].y;
    precise float _418 = _253 * cbObjMatrix._m0[_391].z;
    precise float _419 = _253 * cbObjMatrix._m0[_398].z;
    precise float _420 = _253 * cbObjMatrix._m0[_405].z;
    precise float _421 = _253 * cbObjMatrix._m0[_391].w;
    precise float _422 = _253 * cbObjMatrix._m0[_398].w;
    precise float _423 = _253 * cbObjMatrix._m0[_405].w;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _233 * _424;
    precise float _437 = _234 * _427;
    precise float _438 = _437 + _436;
    precise float _439 = _235 * _430;
    precise float _440 = _439 + _438;
    precise float _441 = 1.0 * _433;
    precise float _442 = _441 + _440;
    precise float _443 = _233 * _425;
    precise float _444 = _234 * _428;
    precise float _445 = _444 + _443;
    precise float _446 = _235 * _431;
    precise float _447 = _446 + _445;
    precise float _448 = 1.0 * _434;
    precise float _449 = _448 + _447;
    precise float _450 = _233 * _426;
    precise float _451 = _234 * _429;
    precise float _452 = _451 + _450;
    precise float _453 = _235 * _432;
    precise float _454 = _453 + _452;
    precise float _455 = 1.0 * _435;
    precise float _456 = _455 + _454;
    float _462 = cbSceneParam._m0[3u].x - _442;
    float _463 = cbSceneParam._m0[3u].y - _449;
    float _464 = cbSceneParam._m0[3u].z - _456;
    precise float _491 = _442 * _442;
    precise float _492 = _449 * _449;
    precise float _493 = _491 + _492;
    precise float _494 = _456 * _456;
    precise float _495 = _493 + _494;
    precise float _497 = cbMtdParam._m0[10u].z * sqrt(_495);
    precise float _507 = cbInstanceData._m0[_208].x * 0.0;
    precise float _508 = 0.0 * cbInstanceData._m0[_208].y;
    precise float _509 = _508 + _507;
    precise float _510 = 0.0 * cbInstanceData._m0[_208].z;
    precise float _511 = _510 + _509;
    precise float _512 = 1.0 * cbInstanceData._m0[_208].w;
    precise float _513 = _512 + _511;
    precise float _514 = cbInstanceData._m0[_213].x * 0.0;
    precise float _515 = 0.0 * cbInstanceData._m0[_213].y;
    precise float _516 = _515 + _514;
    precise float _517 = 0.0 * cbInstanceData._m0[_213].z;
    precise float _518 = _517 + _516;
    precise float _519 = 1.0 * cbInstanceData._m0[_213].w;
    precise float _520 = _519 + _518;
    precise float _521 = cbInstanceData._m0[_217].x * 0.0;
    precise float _522 = 0.0 * cbInstanceData._m0[_217].y;
    precise float _523 = _522 + _521;
    precise float _524 = 0.0 * cbInstanceData._m0[_217].z;
    precise float _525 = _524 + _523;
    precise float _526 = 1.0 * cbInstanceData._m0[_217].w;
    precise float _527 = _526 + _525;
    precise float _528 = cbPerFrame._m0[22u].x + _497;
    float _529;
    float _531;
    float _533;
    if (_229 == 0u)
    {
        _529 = 0.0;
        _531 = 0.0;
        _533 = 0.0;
    }
    else
    {
        uint _728 = _225.z;
        precise float _530;
        precise float _532;
        precise float _534;
        float _870;
        float _872;
        float _874;
        float _729 = 0.0;
        float _730 = 0.0;
        float _731 = 0.0;
        uint _732 = _728;
        uint _734 = 0u;
        float _770;
        float _789;
        vec4 _803;
        float _804;
        float _805;
        float _819;
        float _820;
        float _821;
        float _838;
        float _839;
        float _840;
        float _841;
        bool _842;
        bool _843;
        bool _844;
        precise float _845;
        precise float _846;
        precise float _847;
        float _848;
        float _849;
        float _850;
        precise float _851;
        bool _854;
        for (;;)
        {
            uint _736 = _732 & 255u;
            uint _738 = _736 * 24u;
            uvec3 _748 = uvec3(texelFetch(g_forceParam, int(_738)).x, texelFetch(g_forceParam, int(_738 + 1u)).x, texelFetch(g_forceParam, int(_738 + 2u)).x);
            uint _753 = (_736 * 24u) + 4u;
            vec4 _766 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_753)).x, texelFetch(g_forceParam, int(_753 + 1u)).x, texelFetch(g_forceParam, int(_753 + 2u)).x, texelFetch(g_forceParam, int(_753 + 3u)).x));
            _770 = _766.w;
            uint _772 = (_736 * 24u) + 8u;
            vec4 _785 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_772)).x, texelFetch(g_forceParam, int(_772 + 1u)).x, texelFetch(g_forceParam, int(_772 + 2u)).x, texelFetch(g_forceParam, int(_772 + 3u)).x));
            _789 = _785.w;
            uint _792 = (_736 * 24u) + 12u;
            _803 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_792)).x, texelFetch(g_forceParam, int(_792 + 1u)).x, _798, texelFetch(g_forceParam, int(_792 + 3u)).x));
            _804 = _803.x;
            _805 = _803.w;
            uint _808 = (_736 * 24u) + 16u;
            vec3 _818 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_808)).x, texelFetch(g_forceParam, int(_808 + 1u)).x, texelFetch(g_forceParam, int(_808 + 2u)).x));
            _819 = _818.x;
            _820 = _818.y;
            _821 = _818.z;
            uint _824 = (_736 * 24u) + 20u;
            vec4 _837 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_824)).x, texelFetch(g_forceParam, int(_824 + 1u)).x, texelFetch(g_forceParam, int(_824 + 2u)).x, texelFetch(g_forceParam, int(_824 + 3u)).x));
            _838 = _837.x;
            _839 = _837.y;
            _840 = _837.z;
            _841 = _837.w;
            _842 = _748.x == 1u;
            _843 = _748.y == 1u;
            _844 = _748.z == 1u;
            _845 = _513 - _766.x;
            _846 = _520 - _766.y;
            _847 = _527 - _766.z;
            _848 = _842 ? _785.x : _845;
            _849 = _842 ? _785.y : _846;
            _850 = _842 ? _785.z : _847;
            _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
            _854 = _851 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_854)
            {
                precise float _856 = _845 * _845;
                precise float _857 = _846 * _846;
                precise float _858 = _856 + _857;
                precise float _859 = _847 * _847;
                precise float _860 = _859 + _858;
                float _861 = sqrt(_860);
                float _862 = inversesqrt(_851);
                precise float _863 = _848 * _862;
                precise float _864 = _849 * _862;
                precise float _865 = _850 * _862;
                precise float _867 = _861 / (isnan(0.001000000047497451305389404296875) ? _803.y : (isnan(_803.y) ? 0.001000000047497451305389404296875 : max(_803.y, 0.001000000047497451305389404296875)));
                precise float _868 = 1.0 - _867;
                float _1036 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
                float _869 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
                float _895;
                if (_844)
                {
                    float _882 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
                    precise float _883 = _845 * _882;
                    precise float _884 = _846 * _882;
                    precise float _885 = _847 * _882;
                    precise float _889 = dot(vec3(_863, _864, _865), vec3(_883, _884, _885)) * 0.800000011920928955078125;
                    precise float _891 = _889 + 0.20000000298023223876953125;
                    float _1047 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
                    precise float _894 = _869 * (isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0)));
                    _895 = _894;
                }
                else
                {
                    _895 = _869;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_895 > 0.0)
                {
                    bool _898 = _842 && (!_844);
                    precise float _900 = _861 * (-4.0);
                    precise float _904 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _804 : (isnan(_804) ? 0.001000000047497451305389404296875 : max(_804, 0.001000000047497451305389404296875)));
                    precise float _906 = dot(vec2(_863, _865), vec2(_845, _847));
                    precise float _909 = _904 * _906;
                    precise float _910 = float(_898) * _909;
                    precise float _911 = _528 * _904;
                    precise float _912 = _911 - _910;
                    precise float _913 = (_898 ? 0.0 : _900) + _912;
                    precise float _915 = _789 * sin(_913);
                    precise float _916 = _864 * 0.0;
                    precise float _917 = _916 - _865;
                    precise float _918 = _865 * 0.0;
                    precise float _919 = _863 * 0.0;
                    precise float _920 = _918 - _919;
                    precise float _921 = _863 - _916;
                    precise float _922 = _805 * _915;
                    float _923 = _842 ? _922 : 0.0;
                    float _966;
                    if (_843)
                    {
                        precise float _926 = _819 * 2.0;
                        precise float _928 = _839 + _840;
                        precise float _929 = _841 + _928;
                        precise float _931 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _819 : (isnan(_819) ? 0.001000000047497451305389404296875 : max(_819, 0.001000000047497451305389404296875)));
                        precise float _932 = _838 * _931;
                        precise float _933 = (-0.0) - _863;
                        precise float _938 = dot(vec2(_865, _933), vec2(_845, _847)) / _926;
                        precise float _939 = (-0.0) - _938;
                        float _942 = fract(abs(_938));
                        precise float _943 = (-0.0) - _942;
                        precise float _945 = _926 * ((_938 >= _939) ? _942 : _943);
                        precise float _946 = _945 * 6.283184051513671875;
                        precise float _947 = _946 / _926;
                        precise float _949 = (isnan(5.0) ? _819 : (isnan(_819) ? 5.0 : min(_819, 5.0))) * sin(_947);
                        precise float _950 = _906 + _949;
                        precise float _951 = _819 * 0.25;
                        precise float _953 = _528 * _838;
                        precise float _954 = _953 - _951;
                        precise float _955 = _954 - _950;
                        precise float _956 = _838 * _929;
                        precise float _958 = _955 / (isnan(0.001000000047497451305389404296875) ? _956 : (isnan(_956) ? 0.001000000047497451305389404296875 : max(_956, 0.001000000047497451305389404296875)));
                        float _959 = fract(_958);
                        precise float _961 = 1.0 - _959;
                        float _962 = (_958 < 0.0) ? _961 : _959;
                        precise float _963 = _928 / _929;
                        precise float _964 = _839 / _929;
                        float _985;
                        if (_962 < _964)
                        {
                            precise float _983 = _962 / _964;
                            _985 = _983;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_962 < _963)
                            {
                                precise float _995 = _962 - _964;
                                precise float _996 = _963 - _964;
                                precise float _997 = _995 / _996;
                                precise float _986 = 1.0 - _997;
                                frontier_phi_14_13_ladder = _986;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _985 = frontier_phi_14_13_ladder;
                        }
                        precise float _987 = _821 * _985;
                        precise float _988 = _931 * _906;
                        precise float _989 = _528 * _932;
                        precise float _990 = _989 - _988;
                        precise float _992 = _820 + sin(_990);
                        precise float _994 = _987 * abs(_992);
                        precise float _967 = _994 + 0.0;
                        _966 = _967;
                    }
                    else
                    {
                        _966 = 0.0;
                    }
                    precise float _968 = _770 + _915;
                    precise float _969 = _968 + _966;
                    precise float _970 = _863 * _969;
                    precise float _971 = _864 * _969;
                    precise float _972 = _865 * _969;
                    precise float _973 = _917 * _923;
                    precise float _974 = _920 * _923;
                    precise float _975 = _921 * _923;
                    precise float _976 = _973 + _970;
                    precise float _977 = _974 + _971;
                    precise float _978 = _975 + _972;
                    precise float _979 = _895 * _976;
                    precise float _980 = _895 * _977;
                    precise float _981 = _895 * _978;
                    precise float _871 = _979 * 0.0500000007450580596923828125;
                    precise float _873 = _980 * 0.0500000007450580596923828125;
                    precise float _875 = _981 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _871;
                    frontier_phi_5_pred_7_ladder_1 = _873;
                    frontier_phi_5_pred_7_ladder_2 = _875;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _870 = frontier_phi_5_pred;
            _872 = frontier_phi_5_pred_1;
            _874 = frontier_phi_5_pred_2;
            _530 = _729 + _870;
            _532 = _730 + _872;
            _534 = _731 + _874;
            uint _735 = _734 + 1u;
            if (_735 == _229)
            {
                break;
            }
            else
            {
                _729 = _530;
                _730 = _532;
                _731 = _534;
                _732 = (_734 != 3u) ? (_732 >> 8u) : _227;
                _734 = _735;
                continue;
            }
        }
        _529 = _530;
        _531 = _532;
        _533 = _534;
    }
    precise float _535 = _529 * _529;
    precise float _536 = _531 * _531;
    precise float _537 = _535 + _536;
    precise float _538 = _533 * _533;
    precise float _539 = _537 + _538;
    float _540 = sqrt(_539);
    bool _541 = _540 < 0.00011000000085914507508277893066406;
    float _546 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_213].x, cbInstanceData._m0[_217].x), vec3(cbInstanceData._m0[_208].x, cbInstanceData._m0[_213].x, cbInstanceData._m0[_217].x)));
    precise float _547 = cbInstanceData._m0[_208].x * _546;
    precise float _548 = cbInstanceData._m0[_213].x * _546;
    precise float _549 = cbInstanceData._m0[_217].x * _546;
    float _553 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_213].y, cbInstanceData._m0[_217].y), vec3(cbInstanceData._m0[_208].y, cbInstanceData._m0[_213].y, cbInstanceData._m0[_217].y)));
    precise float _554 = cbInstanceData._m0[_208].y * _553;
    precise float _555 = cbInstanceData._m0[_213].y * _553;
    precise float _556 = cbInstanceData._m0[_217].y * _553;
    float _560 = inversesqrt(dot(vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_213].z, cbInstanceData._m0[_217].z), vec3(cbInstanceData._m0[_208].z, cbInstanceData._m0[_213].z, cbInstanceData._m0[_217].z)));
    precise float _561 = cbInstanceData._m0[_208].z * _560;
    precise float _562 = cbInstanceData._m0[_213].z * _560;
    precise float _563 = cbInstanceData._m0[_217].z * _560;
    precise float _564 = _547 * 0.0;
    precise float _565 = 1.0 * _554;
    precise float _566 = _565 + _564;
    precise float _567 = 0.0 * _561;
    precise float _568 = _567 + _566;
    precise float _569 = _548 * 0.0;
    precise float _570 = 1.0 * _555;
    precise float _571 = _570 + _569;
    precise float _572 = 0.0 * _562;
    precise float _573 = _572 + _571;
    precise float _574 = _549 * 0.0;
    precise float _575 = 1.0 * _556;
    precise float _576 = _575 + _574;
    precise float _577 = 0.0 * _563;
    precise float _578 = _577 + _576;
    float _582 = inversesqrt(dot(vec3(_529, _531, _533), vec3(_529, _531, _533)));
    precise float _583 = _529 * _582;
    precise float _584 = _531 * _582;
    precise float _585 = _533 * _582;
    precise float _586 = _573 * _585;
    precise float _587 = _578 * _584;
    precise float _588 = _586 - _587;
    precise float _589 = _578 * _583;
    precise float _590 = _568 * _585;
    precise float _591 = _589 - _590;
    precise float _592 = _568 * _584;
    precise float _593 = _573 * _583;
    precise float _594 = _592 - _593;
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    precise float _599 = _598 * _588;
    precise float _600 = _598 * _591;
    precise float _601 = _598 * _594;
    precise float _602 = _540 + 1.0;
    precise float _604 = cbMtdParam._m0[10u].y * log2(_602);
    precise float _605 = _442 - _513;
    precise float _606 = _449 - _520;
    precise float _607 = _456 - _527;
    precise float _608 = dot(vec3(_599, _600, _601), vec3(_605, _606, _607));
    precise float _611 = _599 * _608;
    precise float _612 = _600 * _608;
    precise float _613 = _601 * _608;
    precise float _614 = _513 + _611;
    precise float _615 = _520 + _612;
    precise float _616 = _527 + _613;
    precise float _617 = _442 - _614;
    precise float _618 = _449 - _615;
    precise float _619 = _456 - _616;
    precise float _620 = _600 * _619;
    precise float _621 = _601 * _618;
    precise float _622 = _620 - _621;
    precise float _623 = _601 * _617;
    precise float _624 = _599 * _619;
    precise float _625 = _623 - _624;
    precise float _626 = _599 * _618;
    precise float _627 = _600 * _617;
    precise float _628 = _626 - _627;
    float _629 = sin(_604);
    float _630 = cos(_604);
    precise float _631 = _617 * _630;
    precise float _632 = _618 * _630;
    precise float _633 = _619 * _630;
    precise float _634 = _629 * _622;
    precise float _635 = _629 * _625;
    precise float _636 = _629 * _628;
    precise float _637 = _631 + _634;
    precise float _638 = _632 + _635;
    precise float _639 = _636 + _633;
    precise float _640 = _614 + _637;
    precise float _641 = _615 + _638;
    precise float _642 = _616 + _639;
    precise float _643 = _640 - _442;
    precise float _644 = _641 - _449;
    precise float _645 = _642 - _456;
    precise float _649 = _442 + (_541 ? 0.0 : _643);
    precise float _650 = _449 + (_541 ? 0.0 : _644);
    precise float _651 = _456 + (_541 ? 0.0 : _645);
    precise float _652 = _649 - cbSceneParam._m0[3u].x;
    precise float _653 = _650 - cbSceneParam._m0[3u].y;
    precise float _654 = _651 - cbSceneParam._m0[3u].z;
    precise float _682 = _652 * cbSceneParam._m0[24u].x;
    precise float _683 = _653 * cbSceneParam._m0[24u].y;
    precise float _684 = _683 + _682;
    precise float _685 = _654 * cbSceneParam._m0[24u].z;
    precise float _686 = _685 + _684;
    precise float _687 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _688 = _687 + _686;
    precise float _689 = _652 * cbSceneParam._m0[25u].x;
    precise float _690 = _653 * cbSceneParam._m0[25u].y;
    precise float _691 = _690 + _689;
    precise float _692 = _654 * cbSceneParam._m0[25u].z;
    precise float _693 = _692 + _691;
    precise float _694 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _695 = _694 + _693;
    precise float _696 = _652 * cbSceneParam._m0[26u].x;
    precise float _697 = _653 * cbSceneParam._m0[26u].y;
    precise float _698 = _697 + _696;
    precise float _699 = _654 * cbSceneParam._m0[26u].z;
    precise float _700 = _699 + _698;
    precise float _701 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _702 = _701 + _700;
    precise float _703 = _652 * cbSceneParam._m0[27u].x;
    precise float _704 = _653 * cbSceneParam._m0[27u].y;
    precise float _705 = _704 + _703;
    precise float _706 = _654 * cbSceneParam._m0[27u].z;
    precise float _707 = _706 + _705;
    precise float _708 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _709 = _708 + _707;
    gl_Position.x = _688;
    gl_Position.y = _695;
    gl_Position.z = _702;
    gl_Position.w = _709;
    NORMAL_1.x = fma(_187, _430, fma(_186, _427, _424 * _184));
    NORMAL_1.y = fma(_187, _431, fma(_186, _428, _425 * _184));
    NORMAL_1.z = fma(_187, _432, fma(_186, _429, _426 * _184));
    NORMAL_1.w = float(_243);
    TANGENT_1.x = fma(_198, _430, fma(_197, _427, _424 * _196));
    TANGENT_1.y = fma(_198, _431, fma(_197, _428, _425 * _196));
    TANGENT_1.z = fma(_198, _432, fma(_197, _429, _426 * _196));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _702;
    TEXCOORD_7.y = _709;
    TEXCOORD_11 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
}


