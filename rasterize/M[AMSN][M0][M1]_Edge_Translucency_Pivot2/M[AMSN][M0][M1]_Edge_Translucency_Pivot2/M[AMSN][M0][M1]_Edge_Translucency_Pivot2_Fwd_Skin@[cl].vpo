#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _790;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    float _183 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _195 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _207 = _79 * 13u;
    uint _212 = _207 + 1u;
    uint _216 = _207 + 2u;
    uvec4 _224 = floatBitsToUint(cbInstanceData._m0[_207 + 7u]);
    uint _226 = _224.w;
    uint _228 = min(_224.y, 8u);
    precise float _232 = POSITION.x + 0.0;
    precise float _233 = POSITION.y + 0.0;
    precise float _234 = POSITION.z + 0.0;
    uint _239 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _241 = texelFetch(g_InstanceIndexBuffer, int(_239));
    uint _242 = _241.x;
    precise float _243 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _247 = isnan(_243) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _243 : max(0.001000000047497451305389404296875, _243));
    precise float _249 = BLENDWEIGHT.x / _247;
    precise float _250 = BLENDWEIGHT.y / _247;
    precise float _251 = BLENDWEIGHT.z / _247;
    precise float _252 = BLENDWEIGHT.w / _247;
    uvec4 _258 = floatBitsToUint(cbInstanceData._m0[(_242 * 13u) + 4u]);
    uint _259 = _258.x;
    uint _261 = (_259 + uint(float(BLENDINDICES.x))) * 3u;
    uint _268 = _261 + 1u;
    uint _275 = _261 + 2u;
    precise float _282 = _249 * cbObjMatrix._m0[_261].x;
    precise float _283 = _249 * cbObjMatrix._m0[_268].x;
    precise float _284 = _249 * cbObjMatrix._m0[_275].x;
    precise float _285 = _249 * cbObjMatrix._m0[_261].y;
    precise float _286 = _249 * cbObjMatrix._m0[_268].y;
    precise float _287 = _249 * cbObjMatrix._m0[_275].y;
    precise float _288 = _249 * cbObjMatrix._m0[_261].z;
    precise float _289 = _249 * cbObjMatrix._m0[_268].z;
    precise float _290 = _249 * cbObjMatrix._m0[_275].z;
    precise float _291 = _249 * cbObjMatrix._m0[_261].w;
    precise float _292 = _249 * cbObjMatrix._m0[_268].w;
    precise float _293 = _249 * cbObjMatrix._m0[_275].w;
    uint _296 = (_259 + uint(float(BLENDINDICES.y))) * 3u;
    uint _303 = _296 + 1u;
    uint _310 = _296 + 2u;
    precise float _317 = _250 * cbObjMatrix._m0[_296].x;
    precise float _318 = _250 * cbObjMatrix._m0[_303].x;
    precise float _319 = _250 * cbObjMatrix._m0[_310].x;
    precise float _320 = _250 * cbObjMatrix._m0[_296].y;
    precise float _321 = _250 * cbObjMatrix._m0[_303].y;
    precise float _322 = _250 * cbObjMatrix._m0[_310].y;
    precise float _323 = _250 * cbObjMatrix._m0[_296].z;
    precise float _324 = _250 * cbObjMatrix._m0[_303].z;
    precise float _325 = _250 * cbObjMatrix._m0[_310].z;
    precise float _326 = _250 * cbObjMatrix._m0[_296].w;
    precise float _327 = _250 * cbObjMatrix._m0[_303].w;
    precise float _328 = _250 * cbObjMatrix._m0[_310].w;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    uint _343 = (_259 + uint(float(BLENDINDICES.z))) * 3u;
    uint _350 = _343 + 1u;
    uint _357 = _343 + 2u;
    precise float _364 = _251 * cbObjMatrix._m0[_343].x;
    precise float _365 = _251 * cbObjMatrix._m0[_350].x;
    precise float _366 = _251 * cbObjMatrix._m0[_357].x;
    precise float _367 = _251 * cbObjMatrix._m0[_343].y;
    precise float _368 = _251 * cbObjMatrix._m0[_350].y;
    precise float _369 = _251 * cbObjMatrix._m0[_357].y;
    precise float _370 = _251 * cbObjMatrix._m0[_343].z;
    precise float _371 = _251 * cbObjMatrix._m0[_350].z;
    precise float _372 = _251 * cbObjMatrix._m0[_357].z;
    precise float _373 = _251 * cbObjMatrix._m0[_343].w;
    precise float _374 = _251 * cbObjMatrix._m0[_350].w;
    precise float _375 = _251 * cbObjMatrix._m0[_357].w;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    uint _390 = (_259 + uint(float(BLENDINDICES.w))) * 3u;
    uint _397 = _390 + 1u;
    uint _404 = _390 + 2u;
    precise float _411 = _252 * cbObjMatrix._m0[_390].x;
    precise float _412 = _252 * cbObjMatrix._m0[_397].x;
    precise float _413 = _252 * cbObjMatrix._m0[_404].x;
    precise float _414 = _252 * cbObjMatrix._m0[_390].y;
    precise float _415 = _252 * cbObjMatrix._m0[_397].y;
    precise float _416 = _252 * cbObjMatrix._m0[_404].y;
    precise float _417 = _252 * cbObjMatrix._m0[_390].z;
    precise float _418 = _252 * cbObjMatrix._m0[_397].z;
    precise float _419 = _252 * cbObjMatrix._m0[_404].z;
    precise float _420 = _252 * cbObjMatrix._m0[_390].w;
    precise float _421 = _252 * cbObjMatrix._m0[_397].w;
    precise float _422 = _252 * cbObjMatrix._m0[_404].w;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _232 * _423;
    precise float _436 = _233 * _426;
    precise float _437 = _436 + _435;
    precise float _438 = _234 * _429;
    precise float _439 = _438 + _437;
    precise float _440 = 1.0 * _432;
    precise float _441 = _440 + _439;
    precise float _442 = _232 * _424;
    precise float _443 = _233 * _427;
    precise float _444 = _443 + _442;
    precise float _445 = _234 * _430;
    precise float _446 = _445 + _444;
    precise float _447 = 1.0 * _433;
    precise float _448 = _447 + _446;
    precise float _449 = _232 * _425;
    precise float _450 = _233 * _428;
    precise float _451 = _450 + _449;
    precise float _452 = _234 * _431;
    precise float _453 = _452 + _451;
    precise float _454 = 1.0 * _434;
    precise float _455 = _454 + _453;
    precise float _476 = _441 * _441;
    precise float _477 = _448 * _448;
    precise float _478 = _476 + _477;
    precise float _479 = _455 * _455;
    precise float _480 = _478 + _479;
    precise float _482 = cbMtdParam._m0[10u].z * sqrt(_480);
    precise float _492 = cbInstanceData._m0[_207].x * 0.0;
    precise float _493 = 0.0 * cbInstanceData._m0[_207].y;
    precise float _494 = _493 + _492;
    precise float _495 = 0.0 * cbInstanceData._m0[_207].z;
    precise float _496 = _495 + _494;
    precise float _497 = 1.0 * cbInstanceData._m0[_207].w;
    precise float _498 = _497 + _496;
    precise float _499 = cbInstanceData._m0[_212].x * 0.0;
    precise float _500 = 0.0 * cbInstanceData._m0[_212].y;
    precise float _501 = _500 + _499;
    precise float _502 = 0.0 * cbInstanceData._m0[_212].z;
    precise float _503 = _502 + _501;
    precise float _504 = 1.0 * cbInstanceData._m0[_212].w;
    precise float _505 = _504 + _503;
    precise float _506 = cbInstanceData._m0[_216].x * 0.0;
    precise float _507 = 0.0 * cbInstanceData._m0[_216].y;
    precise float _508 = _507 + _506;
    precise float _509 = 0.0 * cbInstanceData._m0[_216].z;
    precise float _510 = _509 + _508;
    precise float _511 = 1.0 * cbInstanceData._m0[_216].w;
    precise float _512 = _511 + _510;
    precise float _513 = cbPerFrame._m0[22u].x + _482;
    float _514;
    float _516;
    float _518;
    if (_228 == 0u)
    {
        _514 = 0.0;
        _516 = 0.0;
        _518 = 0.0;
    }
    else
    {
        uint _720 = _224.z;
        precise float _515;
        precise float _517;
        precise float _519;
        float _862;
        float _864;
        float _866;
        float _721 = 0.0;
        float _722 = 0.0;
        float _723 = 0.0;
        uint _724 = _720;
        uint _726 = 0u;
        float _762;
        float _781;
        vec4 _795;
        float _796;
        float _797;
        float _811;
        float _812;
        float _813;
        float _830;
        float _831;
        float _832;
        float _833;
        bool _834;
        bool _835;
        bool _836;
        precise float _837;
        precise float _838;
        precise float _839;
        float _840;
        float _841;
        float _842;
        precise float _843;
        bool _846;
        for (;;)
        {
            uint _728 = _724 & 255u;
            uint _730 = _728 * 24u;
            uvec3 _740 = uvec3(texelFetch(g_forceParam, int(_730)).x, texelFetch(g_forceParam, int(_730 + 1u)).x, texelFetch(g_forceParam, int(_730 + 2u)).x);
            uint _745 = (_728 * 24u) + 4u;
            vec4 _758 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_745)).x, texelFetch(g_forceParam, int(_745 + 1u)).x, texelFetch(g_forceParam, int(_745 + 2u)).x, texelFetch(g_forceParam, int(_745 + 3u)).x));
            _762 = _758.w;
            uint _764 = (_728 * 24u) + 8u;
            vec4 _777 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_764)).x, texelFetch(g_forceParam, int(_764 + 1u)).x, texelFetch(g_forceParam, int(_764 + 2u)).x, texelFetch(g_forceParam, int(_764 + 3u)).x));
            _781 = _777.w;
            uint _784 = (_728 * 24u) + 12u;
            _795 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_784)).x, texelFetch(g_forceParam, int(_784 + 1u)).x, _790, texelFetch(g_forceParam, int(_784 + 3u)).x));
            _796 = _795.x;
            _797 = _795.w;
            uint _800 = (_728 * 24u) + 16u;
            vec3 _810 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_800)).x, texelFetch(g_forceParam, int(_800 + 1u)).x, texelFetch(g_forceParam, int(_800 + 2u)).x));
            _811 = _810.x;
            _812 = _810.y;
            _813 = _810.z;
            uint _816 = (_728 * 24u) + 20u;
            vec4 _829 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_816)).x, texelFetch(g_forceParam, int(_816 + 1u)).x, texelFetch(g_forceParam, int(_816 + 2u)).x, texelFetch(g_forceParam, int(_816 + 3u)).x));
            _830 = _829.x;
            _831 = _829.y;
            _832 = _829.z;
            _833 = _829.w;
            _834 = _740.x == 1u;
            _835 = _740.y == 1u;
            _836 = _740.z == 1u;
            _837 = _498 - _758.x;
            _838 = _505 - _758.y;
            _839 = _512 - _758.z;
            _840 = _834 ? _777.x : _837;
            _841 = _834 ? _777.y : _838;
            _842 = _834 ? _777.z : _839;
            _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
            _846 = _843 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_846)
            {
                precise float _848 = _837 * _837;
                precise float _849 = _838 * _838;
                precise float _850 = _848 + _849;
                precise float _851 = _839 * _839;
                precise float _852 = _851 + _850;
                float _853 = sqrt(_852);
                float _854 = inversesqrt(_843);
                precise float _855 = _840 * _854;
                precise float _856 = _841 * _854;
                precise float _857 = _842 * _854;
                precise float _859 = _853 / (isnan(0.001000000047497451305389404296875) ? _795.y : (isnan(_795.y) ? 0.001000000047497451305389404296875 : max(_795.y, 0.001000000047497451305389404296875)));
                precise float _860 = 1.0 - _859;
                float _1029 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
                float _861 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
                float _887;
                if (_836)
                {
                    float _874 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
                    precise float _875 = _837 * _874;
                    precise float _876 = _838 * _874;
                    precise float _877 = _839 * _874;
                    precise float _881 = dot(vec3(_855, _856, _857), vec3(_875, _876, _877)) * 0.800000011920928955078125;
                    precise float _883 = _881 + 0.20000000298023223876953125;
                    float _1040 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
                    precise float _886 = _861 * (isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0)));
                    _887 = _886;
                }
                else
                {
                    _887 = _861;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_887 > 0.0)
                {
                    bool _890 = _834 && (!_836);
                    precise float _892 = _853 * (-4.0);
                    precise float _896 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _796 : (isnan(_796) ? 0.001000000047497451305389404296875 : max(_796, 0.001000000047497451305389404296875)));
                    precise float _898 = dot(vec2(_855, _857), vec2(_837, _839));
                    precise float _902 = _896 * _898;
                    precise float _903 = float(_890) * _902;
                    precise float _904 = _513 * _896;
                    precise float _905 = _904 - _903;
                    precise float _906 = (_890 ? 0.0 : _892) + _905;
                    precise float _908 = _781 * sin(_906);
                    precise float _909 = _856 * 0.0;
                    precise float _910 = _909 - _857;
                    precise float _911 = _857 * 0.0;
                    precise float _912 = _855 * 0.0;
                    precise float _913 = _911 - _912;
                    precise float _914 = _855 - _909;
                    precise float _915 = _797 * _908;
                    float _916 = _834 ? _915 : 0.0;
                    float _959;
                    if (_835)
                    {
                        precise float _919 = _811 * 2.0;
                        precise float _921 = _831 + _832;
                        precise float _922 = _833 + _921;
                        precise float _924 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _811 : (isnan(_811) ? 0.001000000047497451305389404296875 : max(_811, 0.001000000047497451305389404296875)));
                        precise float _925 = _830 * _924;
                        precise float _926 = (-0.0) - _855;
                        precise float _931 = dot(vec2(_857, _926), vec2(_837, _839)) / _919;
                        precise float _932 = (-0.0) - _931;
                        float _935 = fract(abs(_931));
                        precise float _936 = (-0.0) - _935;
                        precise float _938 = _919 * ((_931 >= _932) ? _935 : _936);
                        precise float _939 = _938 * 6.283184051513671875;
                        precise float _940 = _939 / _919;
                        precise float _942 = (isnan(5.0) ? _811 : (isnan(_811) ? 5.0 : min(_811, 5.0))) * sin(_940);
                        precise float _943 = _898 + _942;
                        precise float _944 = _811 * 0.25;
                        precise float _946 = _513 * _830;
                        precise float _947 = _946 - _944;
                        precise float _948 = _947 - _943;
                        precise float _949 = _830 * _922;
                        precise float _951 = _948 / (isnan(0.001000000047497451305389404296875) ? _949 : (isnan(_949) ? 0.001000000047497451305389404296875 : max(_949, 0.001000000047497451305389404296875)));
                        float _952 = fract(_951);
                        precise float _954 = 1.0 - _952;
                        float _955 = (_951 < 0.0) ? _954 : _952;
                        precise float _956 = _921 / _922;
                        precise float _957 = _831 / _922;
                        float _978;
                        if (_955 < _957)
                        {
                            precise float _976 = _955 / _957;
                            _978 = _976;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_955 < _956)
                            {
                                precise float _988 = _955 - _957;
                                precise float _989 = _956 - _957;
                                precise float _990 = _988 / _989;
                                precise float _979 = 1.0 - _990;
                                frontier_phi_14_13_ladder = _979;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _978 = frontier_phi_14_13_ladder;
                        }
                        precise float _980 = _813 * _978;
                        precise float _981 = _924 * _898;
                        precise float _982 = _513 * _925;
                        precise float _983 = _982 - _981;
                        precise float _985 = _812 + sin(_983);
                        precise float _987 = _980 * abs(_985);
                        precise float _960 = _987 + 0.0;
                        _959 = _960;
                    }
                    else
                    {
                        _959 = 0.0;
                    }
                    precise float _961 = _762 + _908;
                    precise float _962 = _961 + _959;
                    precise float _963 = _855 * _962;
                    precise float _964 = _856 * _962;
                    precise float _965 = _857 * _962;
                    precise float _966 = _910 * _916;
                    precise float _967 = _913 * _916;
                    precise float _968 = _914 * _916;
                    precise float _969 = _966 + _963;
                    precise float _970 = _967 + _964;
                    precise float _971 = _968 + _965;
                    precise float _972 = _887 * _969;
                    precise float _973 = _887 * _970;
                    precise float _974 = _887 * _971;
                    precise float _863 = _972 * 0.0500000007450580596923828125;
                    precise float _865 = _973 * 0.0500000007450580596923828125;
                    precise float _867 = _974 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _863;
                    frontier_phi_5_pred_7_ladder_1 = _865;
                    frontier_phi_5_pred_7_ladder_2 = _867;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _862 = frontier_phi_5_pred;
            _864 = frontier_phi_5_pred_1;
            _866 = frontier_phi_5_pred_2;
            _515 = _721 + _862;
            _517 = _722 + _864;
            _519 = _723 + _866;
            uint _727 = _726 + 1u;
            if (_727 == _228)
            {
                break;
            }
            else
            {
                _721 = _515;
                _722 = _517;
                _723 = _519;
                _724 = (_726 != 3u) ? (_724 >> 8u) : _226;
                _726 = _727;
                continue;
            }
        }
        _514 = _515;
        _516 = _517;
        _518 = _519;
    }
    precise float _520 = _514 * _514;
    precise float _521 = _516 * _516;
    precise float _522 = _520 + _521;
    precise float _523 = _518 * _518;
    precise float _524 = _522 + _523;
    float _525 = sqrt(_524);
    bool _526 = _525 < 0.00011000000085914507508277893066406;
    float _531 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].x, cbInstanceData._m0[_212].x, cbInstanceData._m0[_216].x), vec3(cbInstanceData._m0[_207].x, cbInstanceData._m0[_212].x, cbInstanceData._m0[_216].x)));
    precise float _532 = cbInstanceData._m0[_207].x * _531;
    precise float _533 = cbInstanceData._m0[_212].x * _531;
    precise float _534 = cbInstanceData._m0[_216].x * _531;
    float _538 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].y, cbInstanceData._m0[_212].y, cbInstanceData._m0[_216].y), vec3(cbInstanceData._m0[_207].y, cbInstanceData._m0[_212].y, cbInstanceData._m0[_216].y)));
    precise float _539 = cbInstanceData._m0[_207].y * _538;
    precise float _540 = cbInstanceData._m0[_212].y * _538;
    precise float _541 = cbInstanceData._m0[_216].y * _538;
    float _545 = inversesqrt(dot(vec3(cbInstanceData._m0[_207].z, cbInstanceData._m0[_212].z, cbInstanceData._m0[_216].z), vec3(cbInstanceData._m0[_207].z, cbInstanceData._m0[_212].z, cbInstanceData._m0[_216].z)));
    precise float _546 = cbInstanceData._m0[_207].z * _545;
    precise float _547 = cbInstanceData._m0[_212].z * _545;
    precise float _548 = cbInstanceData._m0[_216].z * _545;
    precise float _549 = _532 * 0.0;
    precise float _550 = 1.0 * _539;
    precise float _551 = _550 + _549;
    precise float _552 = 0.0 * _546;
    precise float _553 = _552 + _551;
    precise float _554 = _533 * 0.0;
    precise float _555 = 1.0 * _540;
    precise float _556 = _555 + _554;
    precise float _557 = 0.0 * _547;
    precise float _558 = _557 + _556;
    precise float _559 = _534 * 0.0;
    precise float _560 = 1.0 * _541;
    precise float _561 = _560 + _559;
    precise float _562 = 0.0 * _548;
    precise float _563 = _562 + _561;
    float _567 = inversesqrt(dot(vec3(_514, _516, _518), vec3(_514, _516, _518)));
    precise float _568 = _514 * _567;
    precise float _569 = _516 * _567;
    precise float _570 = _518 * _567;
    precise float _571 = _558 * _570;
    precise float _572 = _563 * _569;
    precise float _573 = _571 - _572;
    precise float _574 = _563 * _568;
    precise float _575 = _553 * _570;
    precise float _576 = _574 - _575;
    precise float _577 = _553 * _569;
    precise float _578 = _558 * _568;
    precise float _579 = _577 - _578;
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    precise float _584 = _583 * _573;
    precise float _585 = _583 * _576;
    precise float _586 = _583 * _579;
    precise float _587 = _525 + 1.0;
    precise float _589 = cbMtdParam._m0[10u].y * log2(_587);
    precise float _590 = _441 - _498;
    precise float _591 = _448 - _505;
    precise float _592 = _455 - _512;
    precise float _593 = dot(vec3(_584, _585, _586), vec3(_590, _591, _592));
    precise float _596 = _584 * _593;
    precise float _597 = _585 * _593;
    precise float _598 = _586 * _593;
    precise float _599 = _498 + _596;
    precise float _600 = _505 + _597;
    precise float _601 = _512 + _598;
    precise float _602 = _441 - _599;
    precise float _603 = _448 - _600;
    precise float _604 = _455 - _601;
    precise float _605 = _585 * _604;
    precise float _606 = _586 * _603;
    precise float _607 = _605 - _606;
    precise float _608 = _586 * _602;
    precise float _609 = _584 * _604;
    precise float _610 = _608 - _609;
    precise float _611 = _584 * _603;
    precise float _612 = _585 * _602;
    precise float _613 = _611 - _612;
    float _614 = sin(_589);
    float _615 = cos(_589);
    precise float _616 = _602 * _615;
    precise float _617 = _603 * _615;
    precise float _618 = _604 * _615;
    precise float _619 = _614 * _607;
    precise float _620 = _614 * _610;
    precise float _621 = _614 * _613;
    precise float _622 = _616 + _619;
    precise float _623 = _617 + _620;
    precise float _624 = _621 + _618;
    precise float _625 = _599 + _622;
    precise float _626 = _600 + _623;
    precise float _627 = _601 + _624;
    precise float _628 = _625 - _441;
    precise float _629 = _626 - _448;
    precise float _630 = _627 - _455;
    precise float _634 = _441 + (_526 ? 0.0 : _628);
    precise float _635 = _448 + (_526 ? 0.0 : _629);
    precise float _636 = _455 + (_526 ? 0.0 : _630);
    precise float _642 = _634 - cbSceneParam._m0[3u].x;
    precise float _643 = _635 - cbSceneParam._m0[3u].y;
    precise float _644 = _636 - cbSceneParam._m0[3u].z;
    precise float _672 = _642 * cbSceneParam._m0[24u].x;
    precise float _673 = _643 * cbSceneParam._m0[24u].y;
    precise float _674 = _673 + _672;
    precise float _675 = _644 * cbSceneParam._m0[24u].z;
    precise float _676 = _675 + _674;
    precise float _677 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _678 = _677 + _676;
    precise float _679 = _642 * cbSceneParam._m0[25u].x;
    precise float _680 = _643 * cbSceneParam._m0[25u].y;
    precise float _681 = _680 + _679;
    precise float _682 = _644 * cbSceneParam._m0[25u].z;
    precise float _683 = _682 + _681;
    precise float _684 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _685 = _684 + _683;
    precise float _686 = _642 * cbSceneParam._m0[26u].x;
    precise float _687 = _643 * cbSceneParam._m0[26u].y;
    precise float _688 = _687 + _686;
    precise float _689 = _644 * cbSceneParam._m0[26u].z;
    precise float _690 = _689 + _688;
    precise float _691 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _692 = _691 + _690;
    precise float _693 = _642 * cbSceneParam._m0[27u].x;
    precise float _694 = _643 * cbSceneParam._m0[27u].y;
    precise float _695 = _694 + _693;
    precise float _696 = _644 * cbSceneParam._m0[27u].z;
    precise float _697 = _696 + _695;
    precise float _698 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _699 = _698 + _697;
    gl_Position.x = _678;
    gl_Position.y = _685;
    gl_Position.z = _692;
    gl_Position.w = _699;
    POSITION_1.x = _678;
    POSITION_1.y = _685;
    POSITION_1.z = _692;
    POSITION_1.w = _699;
    NORMAL_1.x = fma(_186, _429, fma(_185, _426, _423 * _183));
    NORMAL_1.y = fma(_186, _430, fma(_185, _427, _424 * _183));
    NORMAL_1.z = fma(_186, _431, fma(_185, _428, _425 * _183));
    NORMAL_1.w = float(_242);
    TANGENT_1.x = fma(_197, _429, fma(_196, _426, _423 * _195));
    TANGENT_1.y = fma(_197, _430, fma(_196, _427, _424 * _195));
    TANGENT_1.z = fma(_197, _431, fma(_196, _428, _425 * _195));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


