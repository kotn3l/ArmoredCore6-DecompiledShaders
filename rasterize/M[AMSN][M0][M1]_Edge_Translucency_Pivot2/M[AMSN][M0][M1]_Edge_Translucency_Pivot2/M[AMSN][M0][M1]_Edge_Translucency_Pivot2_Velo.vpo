#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_8;
layout(location = 7) out vec4 TEXCOORD_9;
layout(location = 8) out vec3 TEXCOORD_10;

uint _751;

void main()
{
    uint _89 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    TEXCOORD_8.z = 0.0;
    TEXCOORD_8.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_9.z = 0.0;
    TEXCOORD_9.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _191 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _193 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _194 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _206 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _212 = _89 * 13u;
    uint _217 = _212 + 1u;
    uint _221 = _212 + 2u;
    uvec4 _229 = floatBitsToUint(cbInstanceData._m0[_212 + 7u]);
    uint _231 = _229.w;
    uint _233 = min(_229.y, 8u);
    precise float _237 = POSITION.x + 0.0;
    precise float _238 = POSITION.y + 0.0;
    precise float _239 = POSITION.z + 0.0;
    uint _244 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _89;
    uvec4 _246 = texelFetch(g_InstanceIndexBuffer, int(_244));
    uint _247 = _246.x;
    uint _249 = _247 * 13u;
    uint _256 = (floatBitsToUint(cbInstanceData._m0[_249 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _263 = _256 + 1u;
    uint _270 = _256 + 2u;
    precise float _277 = _237 * cbObjMatrix._m0[_256].x;
    precise float _278 = _238 * cbObjMatrix._m0[_256].y;
    precise float _279 = _278 + _277;
    precise float _280 = _239 * cbObjMatrix._m0[_256].z;
    precise float _281 = _280 + _279;
    precise float _282 = 1.0 * cbObjMatrix._m0[_256].w;
    precise float _284 = _282 + _281;
    precise float _285 = _237 * cbObjMatrix._m0[_263].x;
    precise float _286 = _238 * cbObjMatrix._m0[_263].y;
    precise float _287 = _286 + _285;
    precise float _288 = _239 * cbObjMatrix._m0[_263].z;
    precise float _289 = _288 + _287;
    precise float _290 = 1.0 * cbObjMatrix._m0[_263].w;
    precise float _291 = _290 + _289;
    precise float _292 = _237 * cbObjMatrix._m0[_270].x;
    precise float _293 = _238 * cbObjMatrix._m0[_270].y;
    precise float _294 = _293 + _292;
    precise float _295 = _239 * cbObjMatrix._m0[_270].z;
    precise float _296 = _295 + _294;
    precise float _297 = 1.0 * cbObjMatrix._m0[_270].w;
    precise float _298 = _297 + _296;
    float _331 = fma(_194, cbObjMatrix._m0[_256].z, fma(_193, cbObjMatrix._m0[_256].y, cbObjMatrix._m0[_256].x * _191));
    float _334 = fma(_194, cbObjMatrix._m0[_263].z, fma(_193, cbObjMatrix._m0[_263].y, cbObjMatrix._m0[_263].x * _191));
    float _337 = fma(_194, cbObjMatrix._m0[_270].z, fma(_193, cbObjMatrix._m0[_270].y, cbObjMatrix._m0[_270].x * _191));
    precise float _349 = _284 * _284;
    precise float _350 = _291 * _291;
    precise float _351 = _349 + _350;
    precise float _352 = _298 * _298;
    precise float _353 = _351 + _352;
    precise float _355 = cbMtdParam._m0[10u].z * sqrt(_353);
    precise float _365 = cbInstanceData._m0[_212].x * 0.0;
    precise float _366 = 0.0 * cbInstanceData._m0[_212].y;
    precise float _367 = _366 + _365;
    precise float _368 = 0.0 * cbInstanceData._m0[_212].z;
    precise float _369 = _368 + _367;
    precise float _370 = 1.0 * cbInstanceData._m0[_212].w;
    precise float _371 = _370 + _369;
    precise float _372 = cbInstanceData._m0[_217].x * 0.0;
    precise float _373 = 0.0 * cbInstanceData._m0[_217].y;
    precise float _374 = _373 + _372;
    precise float _375 = 0.0 * cbInstanceData._m0[_217].z;
    precise float _376 = _375 + _374;
    precise float _377 = 1.0 * cbInstanceData._m0[_217].w;
    precise float _378 = _377 + _376;
    precise float _379 = cbInstanceData._m0[_221].x * 0.0;
    precise float _380 = 0.0 * cbInstanceData._m0[_221].y;
    precise float _381 = _380 + _379;
    precise float _382 = 0.0 * cbInstanceData._m0[_221].z;
    precise float _383 = _382 + _381;
    precise float _384 = 1.0 * cbInstanceData._m0[_221].w;
    precise float _385 = _384 + _383;
    precise float _386 = cbPerFrame._m0[22u].x + _355;
    float _387;
    float _389;
    float _391;
    if (_233 == 0u)
    {
        _387 = 0.0;
        _389 = 0.0;
        _391 = 0.0;
    }
    else
    {
        uint _681 = _229.z;
        precise float _388;
        precise float _390;
        precise float _392;
        float _824;
        float _826;
        float _828;
        float _682 = 0.0;
        float _683 = 0.0;
        float _684 = 0.0;
        uint _685 = _681;
        uint _687 = 0u;
        float _723;
        float _742;
        vec4 _756;
        float _757;
        float _758;
        float _772;
        float _773;
        float _774;
        float _791;
        float _792;
        float _793;
        float _794;
        bool _795;
        bool _796;
        bool _797;
        precise float _798;
        precise float _799;
        precise float _800;
        float _801;
        float _802;
        float _803;
        precise float _804;
        bool _807;
        for (;;)
        {
            uint _689 = _685 & 255u;
            uint _691 = _689 * 24u;
            uvec3 _701 = uvec3(texelFetch(g_forceParam, int(_691)).x, texelFetch(g_forceParam, int(_691 + 1u)).x, texelFetch(g_forceParam, int(_691 + 2u)).x);
            uint _706 = (_689 * 24u) + 4u;
            vec4 _719 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_706)).x, texelFetch(g_forceParam, int(_706 + 1u)).x, texelFetch(g_forceParam, int(_706 + 2u)).x, texelFetch(g_forceParam, int(_706 + 3u)).x));
            _723 = _719.w;
            uint _725 = (_689 * 24u) + 8u;
            vec4 _738 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_725)).x, texelFetch(g_forceParam, int(_725 + 1u)).x, texelFetch(g_forceParam, int(_725 + 2u)).x, texelFetch(g_forceParam, int(_725 + 3u)).x));
            _742 = _738.w;
            uint _745 = (_689 * 24u) + 12u;
            _756 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_745)).x, texelFetch(g_forceParam, int(_745 + 1u)).x, _751, texelFetch(g_forceParam, int(_745 + 3u)).x));
            _757 = _756.x;
            _758 = _756.w;
            uint _761 = (_689 * 24u) + 16u;
            vec3 _771 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_761)).x, texelFetch(g_forceParam, int(_761 + 1u)).x, texelFetch(g_forceParam, int(_761 + 2u)).x));
            _772 = _771.x;
            _773 = _771.y;
            _774 = _771.z;
            uint _777 = (_689 * 24u) + 20u;
            vec4 _790 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_777)).x, texelFetch(g_forceParam, int(_777 + 1u)).x, texelFetch(g_forceParam, int(_777 + 2u)).x, texelFetch(g_forceParam, int(_777 + 3u)).x));
            _791 = _790.x;
            _792 = _790.y;
            _793 = _790.z;
            _794 = _790.w;
            _795 = _701.x == 1u;
            _796 = _701.y == 1u;
            _797 = _701.z == 1u;
            _798 = _371 - _719.x;
            _799 = _378 - _719.y;
            _800 = _385 - _719.z;
            _801 = _795 ? _738.x : _798;
            _802 = _795 ? _738.y : _799;
            _803 = _795 ? _738.z : _800;
            _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
            _807 = _804 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_807)
            {
                precise float _809 = _798 * _798;
                precise float _810 = _799 * _799;
                precise float _811 = _809 + _810;
                precise float _812 = _800 * _800;
                precise float _813 = _812 + _811;
                float _814 = sqrt(_813);
                float _815 = inversesqrt(_804);
                precise float _816 = _801 * _815;
                precise float _817 = _802 * _815;
                precise float _818 = _803 * _815;
                precise float _821 = _814 / (isnan(0.001000000047497451305389404296875) ? _756.y : (isnan(_756.y) ? 0.001000000047497451305389404296875 : max(_756.y, 0.001000000047497451305389404296875)));
                precise float _822 = 1.0 - _821;
                float _986 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
                float _823 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
                float _849;
                if (_797)
                {
                    float _836 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
                    precise float _837 = _798 * _836;
                    precise float _838 = _799 * _836;
                    precise float _839 = _800 * _836;
                    precise float _843 = dot(vec3(_816, _817, _818), vec3(_837, _838, _839)) * 0.800000011920928955078125;
                    precise float _845 = _843 + 0.20000000298023223876953125;
                    float _997 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
                    precise float _848 = _823 * (isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0)));
                    _849 = _848;
                }
                else
                {
                    _849 = _823;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_849 > 0.0)
                {
                    bool _852 = _795 && (!_797);
                    precise float _854 = _814 * (-4.0);
                    precise float _858 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _757 : (isnan(_757) ? 0.001000000047497451305389404296875 : max(_757, 0.001000000047497451305389404296875)));
                    precise float _860 = dot(vec2(_816, _818), vec2(_798, _800));
                    precise float _864 = _858 * _860;
                    precise float _865 = float(_852) * _864;
                    precise float _866 = _386 * _858;
                    precise float _867 = _866 - _865;
                    precise float _868 = (_852 ? 0.0 : _854) + _867;
                    precise float _870 = _742 * sin(_868);
                    precise float _871 = _817 * 0.0;
                    precise float _872 = _871 - _818;
                    precise float _873 = _818 * 0.0;
                    precise float _874 = _816 * 0.0;
                    precise float _875 = _873 - _874;
                    precise float _876 = _816 - _871;
                    precise float _877 = _758 * _870;
                    float _878 = _795 ? _877 : 0.0;
                    float _921;
                    if (_796)
                    {
                        precise float _881 = _772 * 2.0;
                        precise float _883 = _792 + _793;
                        precise float _884 = _794 + _883;
                        precise float _886 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _772 : (isnan(_772) ? 0.001000000047497451305389404296875 : max(_772, 0.001000000047497451305389404296875)));
                        precise float _887 = _791 * _886;
                        precise float _888 = (-0.0) - _816;
                        precise float _893 = dot(vec2(_818, _888), vec2(_798, _800)) / _881;
                        precise float _894 = (-0.0) - _893;
                        float _897 = fract(abs(_893));
                        precise float _898 = (-0.0) - _897;
                        precise float _900 = _881 * ((_893 >= _894) ? _897 : _898);
                        precise float _901 = _900 * 6.283184051513671875;
                        precise float _902 = _901 / _881;
                        precise float _904 = (isnan(5.0) ? _772 : (isnan(_772) ? 5.0 : min(_772, 5.0))) * sin(_902);
                        precise float _905 = _860 + _904;
                        precise float _906 = _772 * 0.25;
                        precise float _908 = _386 * _791;
                        precise float _909 = _908 - _906;
                        precise float _910 = _909 - _905;
                        precise float _911 = _791 * _884;
                        precise float _913 = _910 / (isnan(0.001000000047497451305389404296875) ? _911 : (isnan(_911) ? 0.001000000047497451305389404296875 : max(_911, 0.001000000047497451305389404296875)));
                        float _914 = fract(_913);
                        precise float _916 = 1.0 - _914;
                        float _917 = (_913 < 0.0) ? _916 : _914;
                        precise float _918 = _883 / _884;
                        precise float _919 = _792 / _884;
                        float _940;
                        if (_917 < _919)
                        {
                            precise float _938 = _917 / _919;
                            _940 = _938;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_917 < _918)
                            {
                                precise float _950 = _917 - _919;
                                precise float _951 = _918 - _919;
                                precise float _952 = _950 / _951;
                                precise float _941 = 1.0 - _952;
                                frontier_phi_14_13_ladder = _941;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _940 = frontier_phi_14_13_ladder;
                        }
                        precise float _942 = _774 * _940;
                        precise float _943 = _886 * _860;
                        precise float _944 = _386 * _887;
                        precise float _945 = _944 - _943;
                        precise float _947 = _773 + sin(_945);
                        precise float _949 = _942 * abs(_947);
                        precise float _922 = _949 + 0.0;
                        _921 = _922;
                    }
                    else
                    {
                        _921 = 0.0;
                    }
                    precise float _923 = _723 + _870;
                    precise float _924 = _923 + _921;
                    precise float _925 = _816 * _924;
                    precise float _926 = _817 * _924;
                    precise float _927 = _818 * _924;
                    precise float _928 = _872 * _878;
                    precise float _929 = _875 * _878;
                    precise float _930 = _876 * _878;
                    precise float _931 = _928 + _925;
                    precise float _932 = _929 + _926;
                    precise float _933 = _930 + _927;
                    precise float _934 = _849 * _931;
                    precise float _935 = _849 * _932;
                    precise float _936 = _849 * _933;
                    precise float _825 = _934 * 0.0500000007450580596923828125;
                    precise float _827 = _935 * 0.0500000007450580596923828125;
                    precise float _829 = _936 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _825;
                    frontier_phi_5_pred_7_ladder_1 = _827;
                    frontier_phi_5_pred_7_ladder_2 = _829;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _824 = frontier_phi_5_pred;
            _826 = frontier_phi_5_pred_1;
            _828 = frontier_phi_5_pred_2;
            _388 = _682 + _824;
            _390 = _683 + _826;
            _392 = _684 + _828;
            uint _688 = _687 + 1u;
            if (_688 == _233)
            {
                break;
            }
            else
            {
                _682 = _388;
                _683 = _390;
                _684 = _392;
                _685 = (_687 != 3u) ? (_685 >> 8u) : _231;
                _687 = _688;
                continue;
            }
        }
        _387 = _388;
        _389 = _390;
        _391 = _392;
    }
    precise float _393 = _387 * _387;
    precise float _394 = _389 * _389;
    precise float _395 = _393 + _394;
    precise float _396 = _391 * _391;
    precise float _397 = _395 + _396;
    float _398 = sqrt(_397);
    bool _399 = _398 < 0.00011000000085914507508277893066406;
    float _404 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].x, cbInstanceData._m0[_217].x, cbInstanceData._m0[_221].x), vec3(cbInstanceData._m0[_212].x, cbInstanceData._m0[_217].x, cbInstanceData._m0[_221].x)));
    precise float _405 = cbInstanceData._m0[_212].x * _404;
    precise float _406 = cbInstanceData._m0[_217].x * _404;
    precise float _407 = cbInstanceData._m0[_221].x * _404;
    float _411 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].y, cbInstanceData._m0[_217].y, cbInstanceData._m0[_221].y), vec3(cbInstanceData._m0[_212].y, cbInstanceData._m0[_217].y, cbInstanceData._m0[_221].y)));
    precise float _412 = cbInstanceData._m0[_212].y * _411;
    precise float _413 = cbInstanceData._m0[_217].y * _411;
    precise float _414 = cbInstanceData._m0[_221].y * _411;
    float _418 = inversesqrt(dot(vec3(cbInstanceData._m0[_212].z, cbInstanceData._m0[_217].z, cbInstanceData._m0[_221].z), vec3(cbInstanceData._m0[_212].z, cbInstanceData._m0[_217].z, cbInstanceData._m0[_221].z)));
    precise float _419 = cbInstanceData._m0[_212].z * _418;
    precise float _420 = cbInstanceData._m0[_217].z * _418;
    precise float _421 = cbInstanceData._m0[_221].z * _418;
    precise float _422 = _405 * 0.0;
    precise float _423 = 1.0 * _412;
    precise float _424 = _423 + _422;
    precise float _425 = 0.0 * _419;
    precise float _426 = _425 + _424;
    precise float _427 = _406 * 0.0;
    precise float _428 = 1.0 * _413;
    precise float _429 = _428 + _427;
    precise float _430 = 0.0 * _420;
    precise float _431 = _430 + _429;
    precise float _432 = _407 * 0.0;
    precise float _433 = 1.0 * _414;
    precise float _434 = _433 + _432;
    precise float _435 = 0.0 * _421;
    precise float _436 = _435 + _434;
    float _440 = inversesqrt(dot(vec3(_387, _389, _391), vec3(_387, _389, _391)));
    precise float _441 = _387 * _440;
    precise float _442 = _389 * _440;
    precise float _443 = _391 * _440;
    precise float _444 = _431 * _443;
    precise float _445 = _436 * _442;
    precise float _446 = _444 - _445;
    precise float _447 = _436 * _441;
    precise float _448 = _426 * _443;
    precise float _449 = _447 - _448;
    precise float _450 = _426 * _442;
    precise float _451 = _431 * _441;
    precise float _452 = _450 - _451;
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    precise float _457 = _456 * _446;
    precise float _458 = _456 * _449;
    precise float _459 = _456 * _452;
    precise float _460 = _398 + 1.0;
    precise float _462 = cbMtdParam._m0[10u].y * log2(_460);
    precise float _463 = _284 - _371;
    precise float _464 = _291 - _378;
    precise float _465 = _298 - _385;
    precise float _466 = dot(vec3(_457, _458, _459), vec3(_463, _464, _465));
    precise float _469 = _457 * _466;
    precise float _470 = _458 * _466;
    precise float _471 = _459 * _466;
    precise float _472 = _371 + _469;
    precise float _473 = _378 + _470;
    precise float _474 = _385 + _471;
    precise float _475 = _284 - _472;
    precise float _476 = _291 - _473;
    precise float _477 = _298 - _474;
    precise float _478 = _458 * _477;
    precise float _479 = _459 * _476;
    precise float _480 = _478 - _479;
    precise float _481 = _459 * _475;
    precise float _482 = _457 * _477;
    precise float _483 = _481 - _482;
    precise float _484 = _457 * _476;
    precise float _485 = _458 * _475;
    precise float _486 = _484 - _485;
    float _487 = sin(_462);
    float _488 = cos(_462);
    precise float _489 = _475 * _488;
    precise float _490 = _476 * _488;
    precise float _491 = _477 * _488;
    precise float _492 = _487 * _480;
    precise float _493 = _487 * _483;
    precise float _494 = _487 * _486;
    precise float _495 = _489 + _492;
    precise float _496 = _490 + _493;
    precise float _497 = _494 + _491;
    precise float _498 = _472 + _495;
    precise float _499 = _473 + _496;
    precise float _500 = _474 + _497;
    precise float _501 = _498 - _284;
    precise float _502 = _499 - _291;
    precise float _503 = _500 - _298;
    float _504 = _399 ? 0.0 : _501;
    float _505 = _399 ? 0.0 : _502;
    float _506 = _399 ? 0.0 : _503;
    precise float _507 = _284 + _504;
    precise float _508 = _291 + _505;
    precise float _509 = _298 + _506;
    float _519 = ((fma(_239, cbPrevObjMatrix._m0[_256].z, fma(_238, cbPrevObjMatrix._m0[_256].y, cbPrevObjMatrix._m0[_256].x * _237)) + cbPrevObjMatrix._m0[_256].w) + _504) - cbSceneParam._m0[28u].x;
    float _520 = ((fma(_239, cbPrevObjMatrix._m0[_263].z, fma(_238, cbPrevObjMatrix._m0[_263].y, cbPrevObjMatrix._m0[_263].x * _237)) + cbPrevObjMatrix._m0[_263].w) + _505) - cbSceneParam._m0[28u].y;
    float _521 = ((fma(_239, cbPrevObjMatrix._m0[_270].z, fma(_238, cbPrevObjMatrix._m0[_270].y, cbPrevObjMatrix._m0[_270].x * _237)) + cbPrevObjMatrix._m0[_270].w) + _506) - cbSceneParam._m0[28u].z;
    precise float _571 = _507 - cbSceneParam._m0[3u].x;
    precise float _572 = _508 - cbSceneParam._m0[3u].y;
    precise float _573 = _509 - cbSceneParam._m0[3u].z;
    precise float _601 = _571 * cbSceneParam._m0[24u].x;
    precise float _602 = _572 * cbSceneParam._m0[24u].y;
    precise float _603 = _602 + _601;
    precise float _604 = _573 * cbSceneParam._m0[24u].z;
    precise float _605 = _604 + _603;
    precise float _606 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _607 = _606 + _605;
    precise float _608 = _571 * cbSceneParam._m0[25u].x;
    precise float _609 = _572 * cbSceneParam._m0[25u].y;
    precise float _610 = _609 + _608;
    precise float _611 = _573 * cbSceneParam._m0[25u].z;
    precise float _612 = _611 + _610;
    precise float _613 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _614 = _613 + _612;
    precise float _615 = _571 * cbSceneParam._m0[26u].x;
    precise float _616 = _572 * cbSceneParam._m0[26u].y;
    precise float _617 = _616 + _615;
    precise float _618 = _573 * cbSceneParam._m0[26u].z;
    precise float _619 = _618 + _617;
    precise float _620 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _621 = _620 + _619;
    precise float _622 = _571 * cbSceneParam._m0[27u].x;
    precise float _623 = _572 * cbSceneParam._m0[27u].y;
    precise float _624 = _623 + _622;
    precise float _625 = _573 * cbSceneParam._m0[27u].z;
    precise float _626 = _625 + _624;
    precise float _627 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _628 = _627 + _626;
    gl_Position.x = _607;
    gl_Position.y = _614;
    gl_Position.z = _621;
    gl_Position.w = _628;
    POSITION_1.x = _607;
    POSITION_1.y = _614;
    POSITION_1.z = _621;
    POSITION_1.w = _628;
    NORMAL_1.x = _331;
    NORMAL_1.y = _334;
    NORMAL_1.z = _337;
    NORMAL_1.w = float(_247);
    TANGENT_1.x = fma(_206, cbObjMatrix._m0[_256].z, fma(_205, cbObjMatrix._m0[_256].y, cbObjMatrix._m0[_256].x * _204));
    TANGENT_1.y = fma(_206, cbObjMatrix._m0[_263].z, fma(_205, cbObjMatrix._m0[_263].y, cbObjMatrix._m0[_263].x * _204));
    TANGENT_1.z = fma(_206, cbObjMatrix._m0[_270].z, fma(_205, cbObjMatrix._m0[_270].y, cbObjMatrix._m0[_270].x * _204));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_8.x = _607;
    TEXCOORD_8.y = _614;
    TEXCOORD_8.z = _621;
    TEXCOORD_8.w = _628;
    TEXCOORD_9.x = fma(_521, cbSceneParam._m0[29u].z, fma(_520, cbSceneParam._m0[29u].y, _519 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_9.y = fma(_521, cbSceneParam._m0[30u].z, fma(_520, cbSceneParam._m0[30u].y, cbSceneParam._m0[30u].x * _519)) + cbSceneParam._m0[30u].w;
    TEXCOORD_9.z = fma(_521, cbSceneParam._m0[31u].z, fma(_520, cbSceneParam._m0[31u].y, cbSceneParam._m0[31u].x * _519)) + cbSceneParam._m0[31u].w;
    TEXCOORD_9.w = fma(_521, cbSceneParam._m0[32u].z, fma(_520, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _519)) + cbSceneParam._m0[32u].w;
    TEXCOORD_10.x = _331;
    TEXCOORD_10.y = _334;
    TEXCOORD_10.z = _337;
    gl_ClipDistance[0u] = dot(vec4(_607, _614, _621, _628), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_607, _614, _621, _628), vec4(cbInstanceData._m0[_249 + 3u]));
}


