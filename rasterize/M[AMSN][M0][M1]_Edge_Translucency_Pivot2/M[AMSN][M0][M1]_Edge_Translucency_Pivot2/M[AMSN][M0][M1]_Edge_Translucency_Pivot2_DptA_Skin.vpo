#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec2 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _824;

void main()
{
    uint _86 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _189 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _213 = _86 * 13u;
    uint _218 = _213 + 1u;
    uint _222 = _213 + 2u;
    uvec4 _230 = floatBitsToUint(cbInstanceData._m0[_213 + 7u]);
    uint _232 = _230.w;
    uint _234 = min(_230.y, 8u);
    precise float _238 = POSITION.x + 0.0;
    precise float _239 = POSITION.y + 0.0;
    precise float _240 = POSITION.z + 0.0;
    uint _245 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _86;
    uvec4 _247 = texelFetch(g_InstanceIndexBuffer, int(_245));
    uint _248 = _247.x;
    precise float _249 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _253 = isnan(_249) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _249 : max(0.001000000047497451305389404296875, _249));
    precise float _255 = BLENDWEIGHT.x / _253;
    precise float _256 = BLENDWEIGHT.y / _253;
    precise float _257 = BLENDWEIGHT.z / _253;
    precise float _258 = BLENDWEIGHT.w / _253;
    uint _260 = _248 * 13u;
    uvec4 _264 = floatBitsToUint(cbInstanceData._m0[_260 + 4u]);
    uint _265 = _264.x;
    uint _267 = (_265 + uint(float(BLENDINDICES.x))) * 3u;
    uint _274 = _267 + 1u;
    uint _281 = _267 + 2u;
    precise float _288 = _255 * cbObjMatrix._m0[_267].x;
    precise float _289 = _255 * cbObjMatrix._m0[_274].x;
    precise float _290 = _255 * cbObjMatrix._m0[_281].x;
    precise float _291 = _255 * cbObjMatrix._m0[_267].y;
    precise float _292 = _255 * cbObjMatrix._m0[_274].y;
    precise float _293 = _255 * cbObjMatrix._m0[_281].y;
    precise float _294 = _255 * cbObjMatrix._m0[_267].z;
    precise float _295 = _255 * cbObjMatrix._m0[_274].z;
    precise float _296 = _255 * cbObjMatrix._m0[_281].z;
    precise float _297 = _255 * cbObjMatrix._m0[_267].w;
    precise float _298 = _255 * cbObjMatrix._m0[_274].w;
    precise float _299 = _255 * cbObjMatrix._m0[_281].w;
    uint _302 = (_265 + uint(float(BLENDINDICES.y))) * 3u;
    uint _309 = _302 + 1u;
    uint _316 = _302 + 2u;
    precise float _323 = _256 * cbObjMatrix._m0[_302].x;
    precise float _324 = _256 * cbObjMatrix._m0[_309].x;
    precise float _325 = _256 * cbObjMatrix._m0[_316].x;
    precise float _326 = _256 * cbObjMatrix._m0[_302].y;
    precise float _327 = _256 * cbObjMatrix._m0[_309].y;
    precise float _328 = _256 * cbObjMatrix._m0[_316].y;
    precise float _329 = _256 * cbObjMatrix._m0[_302].z;
    precise float _330 = _256 * cbObjMatrix._m0[_309].z;
    precise float _331 = _256 * cbObjMatrix._m0[_316].z;
    precise float _332 = _256 * cbObjMatrix._m0[_302].w;
    precise float _333 = _256 * cbObjMatrix._m0[_309].w;
    precise float _334 = _256 * cbObjMatrix._m0[_316].w;
    precise float _335 = _288 + _323;
    precise float _336 = _289 + _324;
    precise float _337 = _290 + _325;
    precise float _338 = _291 + _326;
    precise float _339 = _292 + _327;
    precise float _340 = _293 + _328;
    precise float _341 = _294 + _329;
    precise float _342 = _295 + _330;
    precise float _343 = _296 + _331;
    precise float _344 = _297 + _332;
    precise float _345 = _298 + _333;
    precise float _346 = _299 + _334;
    uint _349 = (_265 + uint(float(BLENDINDICES.z))) * 3u;
    uint _356 = _349 + 1u;
    uint _363 = _349 + 2u;
    precise float _370 = _257 * cbObjMatrix._m0[_349].x;
    precise float _371 = _257 * cbObjMatrix._m0[_356].x;
    precise float _372 = _257 * cbObjMatrix._m0[_363].x;
    precise float _373 = _257 * cbObjMatrix._m0[_349].y;
    precise float _374 = _257 * cbObjMatrix._m0[_356].y;
    precise float _375 = _257 * cbObjMatrix._m0[_363].y;
    precise float _376 = _257 * cbObjMatrix._m0[_349].z;
    precise float _377 = _257 * cbObjMatrix._m0[_356].z;
    precise float _378 = _257 * cbObjMatrix._m0[_363].z;
    precise float _379 = _257 * cbObjMatrix._m0[_349].w;
    precise float _380 = _257 * cbObjMatrix._m0[_356].w;
    precise float _381 = _257 * cbObjMatrix._m0[_363].w;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    uint _396 = (_265 + uint(float(BLENDINDICES.w))) * 3u;
    uint _403 = _396 + 1u;
    uint _410 = _396 + 2u;
    precise float _417 = _258 * cbObjMatrix._m0[_396].x;
    precise float _418 = _258 * cbObjMatrix._m0[_403].x;
    precise float _419 = _258 * cbObjMatrix._m0[_410].x;
    precise float _420 = _258 * cbObjMatrix._m0[_396].y;
    precise float _421 = _258 * cbObjMatrix._m0[_403].y;
    precise float _422 = _258 * cbObjMatrix._m0[_410].y;
    precise float _423 = _258 * cbObjMatrix._m0[_396].z;
    precise float _424 = _258 * cbObjMatrix._m0[_403].z;
    precise float _425 = _258 * cbObjMatrix._m0[_410].z;
    precise float _426 = _258 * cbObjMatrix._m0[_396].w;
    precise float _427 = _258 * cbObjMatrix._m0[_403].w;
    precise float _428 = _258 * cbObjMatrix._m0[_410].w;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    precise float _440 = _393 + _428;
    precise float _441 = _238 * _429;
    precise float _442 = _239 * _432;
    precise float _443 = _442 + _441;
    precise float _444 = _240 * _435;
    precise float _445 = _444 + _443;
    precise float _446 = 1.0 * _438;
    precise float _447 = _446 + _445;
    precise float _448 = _238 * _430;
    precise float _449 = _239 * _433;
    precise float _450 = _449 + _448;
    precise float _451 = _240 * _436;
    precise float _452 = _451 + _450;
    precise float _453 = 1.0 * _439;
    precise float _454 = _453 + _452;
    precise float _455 = _238 * _431;
    precise float _456 = _239 * _434;
    precise float _457 = _456 + _455;
    precise float _458 = _240 * _437;
    precise float _459 = _458 + _457;
    precise float _460 = 1.0 * _440;
    precise float _461 = _460 + _459;
    float _467 = cbSceneParam._m0[3u].x - _447;
    float _468 = cbSceneParam._m0[3u].y - _454;
    float _469 = cbSceneParam._m0[3u].z - _461;
    precise float _496 = _447 * _447;
    precise float _497 = _454 * _454;
    precise float _498 = _496 + _497;
    precise float _499 = _461 * _461;
    precise float _500 = _498 + _499;
    precise float _502 = cbMtdParam._m0[10u].z * sqrt(_500);
    precise float _512 = cbInstanceData._m0[_213].x * 0.0;
    precise float _513 = 0.0 * cbInstanceData._m0[_213].y;
    precise float _514 = _513 + _512;
    precise float _515 = 0.0 * cbInstanceData._m0[_213].z;
    precise float _516 = _515 + _514;
    precise float _517 = 1.0 * cbInstanceData._m0[_213].w;
    precise float _518 = _517 + _516;
    precise float _519 = cbInstanceData._m0[_218].x * 0.0;
    precise float _520 = 0.0 * cbInstanceData._m0[_218].y;
    precise float _521 = _520 + _519;
    precise float _522 = 0.0 * cbInstanceData._m0[_218].z;
    precise float _523 = _522 + _521;
    precise float _524 = 1.0 * cbInstanceData._m0[_218].w;
    precise float _525 = _524 + _523;
    precise float _526 = cbInstanceData._m0[_222].x * 0.0;
    precise float _527 = 0.0 * cbInstanceData._m0[_222].y;
    precise float _528 = _527 + _526;
    precise float _529 = 0.0 * cbInstanceData._m0[_222].z;
    precise float _530 = _529 + _528;
    precise float _531 = 1.0 * cbInstanceData._m0[_222].w;
    precise float _532 = _531 + _530;
    precise float _533 = cbPerFrame._m0[22u].x + _502;
    float _534;
    float _536;
    float _538;
    if (_234 == 0u)
    {
        _534 = 0.0;
        _536 = 0.0;
        _538 = 0.0;
    }
    else
    {
        uint _754 = _230.z;
        precise float _535;
        precise float _537;
        precise float _539;
        float _896;
        float _898;
        float _900;
        float _755 = 0.0;
        float _756 = 0.0;
        float _757 = 0.0;
        uint _758 = _754;
        uint _760 = 0u;
        float _796;
        float _815;
        vec4 _829;
        float _830;
        float _831;
        float _845;
        float _846;
        float _847;
        float _864;
        float _865;
        float _866;
        float _867;
        bool _868;
        bool _869;
        bool _870;
        precise float _871;
        precise float _872;
        precise float _873;
        float _874;
        float _875;
        float _876;
        precise float _877;
        bool _880;
        for (;;)
        {
            uint _762 = _758 & 255u;
            uint _764 = _762 * 24u;
            uvec3 _774 = uvec3(texelFetch(g_forceParam, int(_764)).x, texelFetch(g_forceParam, int(_764 + 1u)).x, texelFetch(g_forceParam, int(_764 + 2u)).x);
            uint _779 = (_762 * 24u) + 4u;
            vec4 _792 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_779)).x, texelFetch(g_forceParam, int(_779 + 1u)).x, texelFetch(g_forceParam, int(_779 + 2u)).x, texelFetch(g_forceParam, int(_779 + 3u)).x));
            _796 = _792.w;
            uint _798 = (_762 * 24u) + 8u;
            vec4 _811 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_798)).x, texelFetch(g_forceParam, int(_798 + 1u)).x, texelFetch(g_forceParam, int(_798 + 2u)).x, texelFetch(g_forceParam, int(_798 + 3u)).x));
            _815 = _811.w;
            uint _818 = (_762 * 24u) + 12u;
            _829 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_818)).x, texelFetch(g_forceParam, int(_818 + 1u)).x, _824, texelFetch(g_forceParam, int(_818 + 3u)).x));
            _830 = _829.x;
            _831 = _829.w;
            uint _834 = (_762 * 24u) + 16u;
            vec3 _844 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_834)).x, texelFetch(g_forceParam, int(_834 + 1u)).x, texelFetch(g_forceParam, int(_834 + 2u)).x));
            _845 = _844.x;
            _846 = _844.y;
            _847 = _844.z;
            uint _850 = (_762 * 24u) + 20u;
            vec4 _863 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_850)).x, texelFetch(g_forceParam, int(_850 + 1u)).x, texelFetch(g_forceParam, int(_850 + 2u)).x, texelFetch(g_forceParam, int(_850 + 3u)).x));
            _864 = _863.x;
            _865 = _863.y;
            _866 = _863.z;
            _867 = _863.w;
            _868 = _774.x == 1u;
            _869 = _774.y == 1u;
            _870 = _774.z == 1u;
            _871 = _518 - _792.x;
            _872 = _525 - _792.y;
            _873 = _532 - _792.z;
            _874 = _868 ? _811.x : _871;
            _875 = _868 ? _811.y : _872;
            _876 = _868 ? _811.z : _873;
            _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
            _880 = _877 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_880)
            {
                precise float _882 = _871 * _871;
                precise float _883 = _872 * _872;
                precise float _884 = _882 + _883;
                precise float _885 = _873 * _873;
                precise float _886 = _885 + _884;
                float _887 = sqrt(_886);
                float _888 = inversesqrt(_877);
                precise float _889 = _874 * _888;
                precise float _890 = _875 * _888;
                precise float _891 = _876 * _888;
                precise float _893 = _887 / (isnan(0.001000000047497451305389404296875) ? _829.y : (isnan(_829.y) ? 0.001000000047497451305389404296875 : max(_829.y, 0.001000000047497451305389404296875)));
                precise float _894 = 1.0 - _893;
                float _1062 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
                float _895 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
                float _921;
                if (_870)
                {
                    float _908 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
                    precise float _909 = _871 * _908;
                    precise float _910 = _872 * _908;
                    precise float _911 = _873 * _908;
                    precise float _915 = dot(vec3(_889, _890, _891), vec3(_909, _910, _911)) * 0.800000011920928955078125;
                    precise float _917 = _915 + 0.20000000298023223876953125;
                    float _1073 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
                    precise float _920 = _895 * (isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0)));
                    _921 = _920;
                }
                else
                {
                    _921 = _895;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_921 > 0.0)
                {
                    bool _924 = _868 && (!_870);
                    precise float _926 = _887 * (-4.0);
                    precise float _930 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _830 : (isnan(_830) ? 0.001000000047497451305389404296875 : max(_830, 0.001000000047497451305389404296875)));
                    precise float _932 = dot(vec2(_889, _891), vec2(_871, _873));
                    precise float _935 = _930 * _932;
                    precise float _936 = float(_924) * _935;
                    precise float _937 = _533 * _930;
                    precise float _938 = _937 - _936;
                    precise float _939 = (_924 ? 0.0 : _926) + _938;
                    precise float _941 = _815 * sin(_939);
                    precise float _942 = _890 * 0.0;
                    precise float _943 = _942 - _891;
                    precise float _944 = _891 * 0.0;
                    precise float _945 = _889 * 0.0;
                    precise float _946 = _944 - _945;
                    precise float _947 = _889 - _942;
                    precise float _948 = _831 * _941;
                    float _949 = _868 ? _948 : 0.0;
                    float _992;
                    if (_869)
                    {
                        precise float _952 = _845 * 2.0;
                        precise float _954 = _865 + _866;
                        precise float _955 = _867 + _954;
                        precise float _957 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _845 : (isnan(_845) ? 0.001000000047497451305389404296875 : max(_845, 0.001000000047497451305389404296875)));
                        precise float _958 = _864 * _957;
                        precise float _959 = (-0.0) - _889;
                        precise float _964 = dot(vec2(_891, _959), vec2(_871, _873)) / _952;
                        precise float _965 = (-0.0) - _964;
                        float _968 = fract(abs(_964));
                        precise float _969 = (-0.0) - _968;
                        precise float _971 = _952 * ((_964 >= _965) ? _968 : _969);
                        precise float _972 = _971 * 6.283184051513671875;
                        precise float _973 = _972 / _952;
                        precise float _975 = (isnan(5.0) ? _845 : (isnan(_845) ? 5.0 : min(_845, 5.0))) * sin(_973);
                        precise float _976 = _932 + _975;
                        precise float _977 = _845 * 0.25;
                        precise float _979 = _533 * _864;
                        precise float _980 = _979 - _977;
                        precise float _981 = _980 - _976;
                        precise float _982 = _864 * _955;
                        precise float _984 = _981 / (isnan(0.001000000047497451305389404296875) ? _982 : (isnan(_982) ? 0.001000000047497451305389404296875 : max(_982, 0.001000000047497451305389404296875)));
                        float _985 = fract(_984);
                        precise float _987 = 1.0 - _985;
                        float _988 = (_984 < 0.0) ? _987 : _985;
                        precise float _989 = _954 / _955;
                        precise float _990 = _865 / _955;
                        float _1011;
                        if (_988 < _990)
                        {
                            precise float _1009 = _988 / _990;
                            _1011 = _1009;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_988 < _989)
                            {
                                precise float _1021 = _988 - _990;
                                precise float _1022 = _989 - _990;
                                precise float _1023 = _1021 / _1022;
                                precise float _1012 = 1.0 - _1023;
                                frontier_phi_14_13_ladder = _1012;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1011 = frontier_phi_14_13_ladder;
                        }
                        precise float _1013 = _847 * _1011;
                        precise float _1014 = _957 * _932;
                        precise float _1015 = _533 * _958;
                        precise float _1016 = _1015 - _1014;
                        precise float _1018 = _846 + sin(_1016);
                        precise float _1020 = _1013 * abs(_1018);
                        precise float _993 = _1020 + 0.0;
                        _992 = _993;
                    }
                    else
                    {
                        _992 = 0.0;
                    }
                    precise float _994 = _796 + _941;
                    precise float _995 = _994 + _992;
                    precise float _996 = _889 * _995;
                    precise float _997 = _890 * _995;
                    precise float _998 = _891 * _995;
                    precise float _999 = _943 * _949;
                    precise float _1000 = _946 * _949;
                    precise float _1001 = _947 * _949;
                    precise float _1002 = _999 + _996;
                    precise float _1003 = _1000 + _997;
                    precise float _1004 = _1001 + _998;
                    precise float _1005 = _921 * _1002;
                    precise float _1006 = _921 * _1003;
                    precise float _1007 = _921 * _1004;
                    precise float _897 = _1005 * 0.0500000007450580596923828125;
                    precise float _899 = _1006 * 0.0500000007450580596923828125;
                    precise float _901 = _1007 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _897;
                    frontier_phi_5_pred_7_ladder_1 = _899;
                    frontier_phi_5_pred_7_ladder_2 = _901;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _896 = frontier_phi_5_pred;
            _898 = frontier_phi_5_pred_1;
            _900 = frontier_phi_5_pred_2;
            _535 = _755 + _896;
            _537 = _756 + _898;
            _539 = _757 + _900;
            uint _761 = _760 + 1u;
            if (_761 == _234)
            {
                break;
            }
            else
            {
                _755 = _535;
                _756 = _537;
                _757 = _539;
                _758 = (_760 != 3u) ? (_758 >> 8u) : _232;
                _760 = _761;
                continue;
            }
        }
        _534 = _535;
        _536 = _537;
        _538 = _539;
    }
    precise float _540 = _534 * _534;
    precise float _541 = _536 * _536;
    precise float _542 = _540 + _541;
    precise float _543 = _538 * _538;
    precise float _544 = _542 + _543;
    float _545 = sqrt(_544);
    bool _546 = _545 < 0.00011000000085914507508277893066406;
    float _551 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].x, cbInstanceData._m0[_218].x, cbInstanceData._m0[_222].x), vec3(cbInstanceData._m0[_213].x, cbInstanceData._m0[_218].x, cbInstanceData._m0[_222].x)));
    precise float _552 = cbInstanceData._m0[_213].x * _551;
    precise float _553 = cbInstanceData._m0[_218].x * _551;
    precise float _554 = cbInstanceData._m0[_222].x * _551;
    float _558 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].y, cbInstanceData._m0[_218].y, cbInstanceData._m0[_222].y), vec3(cbInstanceData._m0[_213].y, cbInstanceData._m0[_218].y, cbInstanceData._m0[_222].y)));
    precise float _559 = cbInstanceData._m0[_213].y * _558;
    precise float _560 = cbInstanceData._m0[_218].y * _558;
    precise float _561 = cbInstanceData._m0[_222].y * _558;
    float _565 = inversesqrt(dot(vec3(cbInstanceData._m0[_213].z, cbInstanceData._m0[_218].z, cbInstanceData._m0[_222].z), vec3(cbInstanceData._m0[_213].z, cbInstanceData._m0[_218].z, cbInstanceData._m0[_222].z)));
    precise float _566 = cbInstanceData._m0[_213].z * _565;
    precise float _567 = cbInstanceData._m0[_218].z * _565;
    precise float _568 = cbInstanceData._m0[_222].z * _565;
    precise float _569 = _552 * 0.0;
    precise float _570 = 1.0 * _559;
    precise float _571 = _570 + _569;
    precise float _572 = 0.0 * _566;
    precise float _573 = _572 + _571;
    precise float _574 = _553 * 0.0;
    precise float _575 = 1.0 * _560;
    precise float _576 = _575 + _574;
    precise float _577 = 0.0 * _567;
    precise float _578 = _577 + _576;
    precise float _579 = _554 * 0.0;
    precise float _580 = 1.0 * _561;
    precise float _581 = _580 + _579;
    precise float _582 = 0.0 * _568;
    precise float _583 = _582 + _581;
    float _587 = inversesqrt(dot(vec3(_534, _536, _538), vec3(_534, _536, _538)));
    precise float _588 = _534 * _587;
    precise float _589 = _536 * _587;
    precise float _590 = _538 * _587;
    precise float _591 = _578 * _590;
    precise float _592 = _583 * _589;
    precise float _593 = _591 - _592;
    precise float _594 = _583 * _588;
    precise float _595 = _573 * _590;
    precise float _596 = _594 - _595;
    precise float _597 = _573 * _589;
    precise float _598 = _578 * _588;
    precise float _599 = _597 - _598;
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    precise float _604 = _603 * _593;
    precise float _605 = _603 * _596;
    precise float _606 = _603 * _599;
    precise float _607 = _545 + 1.0;
    precise float _609 = cbMtdParam._m0[10u].y * log2(_607);
    precise float _610 = _447 - _518;
    precise float _611 = _454 - _525;
    precise float _612 = _461 - _532;
    precise float _613 = dot(vec3(_604, _605, _606), vec3(_610, _611, _612));
    precise float _616 = _604 * _613;
    precise float _617 = _605 * _613;
    precise float _618 = _606 * _613;
    precise float _619 = _518 + _616;
    precise float _620 = _525 + _617;
    precise float _621 = _532 + _618;
    precise float _622 = _447 - _619;
    precise float _623 = _454 - _620;
    precise float _624 = _461 - _621;
    precise float _625 = _605 * _624;
    precise float _626 = _606 * _623;
    precise float _627 = _625 - _626;
    precise float _628 = _606 * _622;
    precise float _629 = _604 * _624;
    precise float _630 = _628 - _629;
    precise float _631 = _604 * _623;
    precise float _632 = _605 * _622;
    precise float _633 = _631 - _632;
    float _634 = sin(_609);
    float _635 = cos(_609);
    precise float _636 = _622 * _635;
    precise float _637 = _623 * _635;
    precise float _638 = _624 * _635;
    precise float _639 = _634 * _627;
    precise float _640 = _634 * _630;
    precise float _641 = _634 * _633;
    precise float _642 = _636 + _639;
    precise float _643 = _637 + _640;
    precise float _644 = _641 + _638;
    precise float _645 = _619 + _642;
    precise float _646 = _620 + _643;
    precise float _647 = _621 + _644;
    precise float _648 = _645 - _447;
    precise float _649 = _646 - _454;
    precise float _650 = _647 - _461;
    precise float _654 = _447 + (_546 ? 0.0 : _648);
    precise float _655 = _454 + (_546 ? 0.0 : _649);
    precise float _656 = _461 + (_546 ? 0.0 : _650);
    precise float _657 = _654 - cbSceneParam._m0[3u].x;
    precise float _658 = _655 - cbSceneParam._m0[3u].y;
    precise float _659 = _656 - cbSceneParam._m0[3u].z;
    precise float _687 = _657 * cbSceneParam._m0[24u].x;
    precise float _688 = _658 * cbSceneParam._m0[24u].y;
    precise float _689 = _688 + _687;
    precise float _690 = _659 * cbSceneParam._m0[24u].z;
    precise float _691 = _690 + _689;
    precise float _692 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _693 = _692 + _691;
    precise float _694 = _657 * cbSceneParam._m0[25u].x;
    precise float _695 = _658 * cbSceneParam._m0[25u].y;
    precise float _696 = _695 + _694;
    precise float _697 = _659 * cbSceneParam._m0[25u].z;
    precise float _698 = _697 + _696;
    precise float _699 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _700 = _699 + _698;
    precise float _701 = _657 * cbSceneParam._m0[26u].x;
    precise float _702 = _658 * cbSceneParam._m0[26u].y;
    precise float _703 = _702 + _701;
    precise float _704 = _659 * cbSceneParam._m0[26u].z;
    precise float _705 = _704 + _703;
    precise float _706 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _707 = _706 + _705;
    precise float _708 = _657 * cbSceneParam._m0[27u].x;
    precise float _709 = _658 * cbSceneParam._m0[27u].y;
    precise float _710 = _709 + _708;
    precise float _711 = _659 * cbSceneParam._m0[27u].z;
    precise float _712 = _711 + _710;
    precise float _713 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _714 = _713 + _712;
    gl_Position.x = _693;
    gl_Position.y = _700;
    gl_Position.z = _707;
    gl_Position.w = _714;
    NORMAL_1.x = fma(_192, _435, fma(_191, _432, _429 * _189));
    NORMAL_1.y = fma(_192, _436, fma(_191, _433, _430 * _189));
    NORMAL_1.z = fma(_192, _437, fma(_191, _434, _431 * _189));
    NORMAL_1.w = float(_248);
    TANGENT_1.x = fma(_203, _435, fma(_202, _432, _429 * _201));
    TANGENT_1.y = fma(_203, _436, fma(_202, _433, _430 * _201));
    TANGENT_1.z = fma(_203, _437, fma(_202, _434, _431 * _201));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _707;
    TEXCOORD_7.y = _714;
    TEXCOORD_11 = sqrt(((_467 * _467) + (_468 * _468)) + (_469 * _469));
    gl_ClipDistance[0u] = dot(vec4(_693, _700, _707, _714), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_693, _700, _707, _714), vec4(cbInstanceData._m0[_260 + 3u]));
}


