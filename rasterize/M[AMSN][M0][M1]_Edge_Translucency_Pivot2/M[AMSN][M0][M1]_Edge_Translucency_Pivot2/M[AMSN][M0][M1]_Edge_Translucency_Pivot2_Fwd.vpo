#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _635;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _172 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _185 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _186 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _187 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _193 = _81 * 13u;
    uint _198 = _193 + 1u;
    uint _202 = _193 + 2u;
    uvec4 _210 = floatBitsToUint(cbInstanceData._m0[_193 + 7u]);
    uint _212 = _210.w;
    uint _214 = min(_210.y, 8u);
    precise float _218 = POSITION.x + 0.0;
    precise float _219 = POSITION.y + 0.0;
    precise float _220 = POSITION.z + 0.0;
    uint _225 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _227 = texelFetch(g_InstanceIndexBuffer, int(_225));
    uint _228 = _227.x;
    uint _230 = _228 * 13u;
    uint _237 = (floatBitsToUint(cbInstanceData._m0[_230 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _244 = _237 + 1u;
    uint _251 = _237 + 2u;
    precise float _258 = _218 * cbObjMatrix._m0[_237].x;
    precise float _259 = _219 * cbObjMatrix._m0[_237].y;
    precise float _260 = _259 + _258;
    precise float _261 = _220 * cbObjMatrix._m0[_237].z;
    precise float _262 = _261 + _260;
    precise float _263 = 1.0 * cbObjMatrix._m0[_237].w;
    precise float _265 = _263 + _262;
    precise float _266 = _218 * cbObjMatrix._m0[_244].x;
    precise float _267 = _219 * cbObjMatrix._m0[_244].y;
    precise float _268 = _267 + _266;
    precise float _269 = _220 * cbObjMatrix._m0[_244].z;
    precise float _270 = _269 + _268;
    precise float _271 = 1.0 * cbObjMatrix._m0[_244].w;
    precise float _272 = _271 + _270;
    precise float _273 = _218 * cbObjMatrix._m0[_251].x;
    precise float _274 = _219 * cbObjMatrix._m0[_251].y;
    precise float _275 = _274 + _273;
    precise float _276 = _220 * cbObjMatrix._m0[_251].z;
    precise float _277 = _276 + _275;
    precise float _278 = 1.0 * cbObjMatrix._m0[_251].w;
    precise float _279 = _278 + _277;
    precise float _300 = _265 * _265;
    precise float _301 = _272 * _272;
    precise float _302 = _300 + _301;
    precise float _303 = _279 * _279;
    precise float _304 = _302 + _303;
    precise float _306 = cbMtdParam._m0[10u].z * sqrt(_304);
    precise float _316 = cbInstanceData._m0[_193].x * 0.0;
    precise float _317 = 0.0 * cbInstanceData._m0[_193].y;
    precise float _318 = _317 + _316;
    precise float _319 = 0.0 * cbInstanceData._m0[_193].z;
    precise float _320 = _319 + _318;
    precise float _321 = 1.0 * cbInstanceData._m0[_193].w;
    precise float _322 = _321 + _320;
    precise float _323 = cbInstanceData._m0[_198].x * 0.0;
    precise float _324 = 0.0 * cbInstanceData._m0[_198].y;
    precise float _325 = _324 + _323;
    precise float _326 = 0.0 * cbInstanceData._m0[_198].z;
    precise float _327 = _326 + _325;
    precise float _328 = 1.0 * cbInstanceData._m0[_198].w;
    precise float _329 = _328 + _327;
    precise float _330 = cbInstanceData._m0[_202].x * 0.0;
    precise float _331 = 0.0 * cbInstanceData._m0[_202].y;
    precise float _332 = _331 + _330;
    precise float _333 = 0.0 * cbInstanceData._m0[_202].z;
    precise float _334 = _333 + _332;
    precise float _335 = 1.0 * cbInstanceData._m0[_202].w;
    precise float _336 = _335 + _334;
    precise float _337 = cbPerFrame._m0[22u].x + _306;
    float _338;
    float _340;
    float _342;
    if (_214 == 0u)
    {
        _338 = 0.0;
        _340 = 0.0;
        _342 = 0.0;
    }
    else
    {
        uint _565 = _210.z;
        precise float _339;
        precise float _341;
        precise float _343;
        float _708;
        float _710;
        float _712;
        float _566 = 0.0;
        float _567 = 0.0;
        float _568 = 0.0;
        uint _569 = _565;
        uint _571 = 0u;
        float _607;
        float _626;
        vec4 _640;
        float _641;
        float _642;
        float _656;
        float _657;
        float _658;
        float _675;
        float _676;
        float _677;
        float _678;
        bool _679;
        bool _680;
        bool _681;
        precise float _682;
        precise float _683;
        precise float _684;
        float _685;
        float _686;
        float _687;
        precise float _688;
        bool _691;
        for (;;)
        {
            uint _573 = _569 & 255u;
            uint _575 = _573 * 24u;
            uvec3 _585 = uvec3(texelFetch(g_forceParam, int(_575)).x, texelFetch(g_forceParam, int(_575 + 1u)).x, texelFetch(g_forceParam, int(_575 + 2u)).x);
            uint _590 = (_573 * 24u) + 4u;
            vec4 _603 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_590)).x, texelFetch(g_forceParam, int(_590 + 1u)).x, texelFetch(g_forceParam, int(_590 + 2u)).x, texelFetch(g_forceParam, int(_590 + 3u)).x));
            _607 = _603.w;
            uint _609 = (_573 * 24u) + 8u;
            vec4 _622 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_609)).x, texelFetch(g_forceParam, int(_609 + 1u)).x, texelFetch(g_forceParam, int(_609 + 2u)).x, texelFetch(g_forceParam, int(_609 + 3u)).x));
            _626 = _622.w;
            uint _629 = (_573 * 24u) + 12u;
            _640 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_629)).x, texelFetch(g_forceParam, int(_629 + 1u)).x, _635, texelFetch(g_forceParam, int(_629 + 3u)).x));
            _641 = _640.x;
            _642 = _640.w;
            uint _645 = (_573 * 24u) + 16u;
            vec3 _655 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_645)).x, texelFetch(g_forceParam, int(_645 + 1u)).x, texelFetch(g_forceParam, int(_645 + 2u)).x));
            _656 = _655.x;
            _657 = _655.y;
            _658 = _655.z;
            uint _661 = (_573 * 24u) + 20u;
            vec4 _674 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_661)).x, texelFetch(g_forceParam, int(_661 + 1u)).x, texelFetch(g_forceParam, int(_661 + 2u)).x, texelFetch(g_forceParam, int(_661 + 3u)).x));
            _675 = _674.x;
            _676 = _674.y;
            _677 = _674.z;
            _678 = _674.w;
            _679 = _585.x == 1u;
            _680 = _585.y == 1u;
            _681 = _585.z == 1u;
            _682 = _322 - _603.x;
            _683 = _329 - _603.y;
            _684 = _336 - _603.z;
            _685 = _679 ? _622.x : _682;
            _686 = _679 ? _622.y : _683;
            _687 = _679 ? _622.z : _684;
            _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
            _691 = _688 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_691)
            {
                precise float _693 = _682 * _682;
                precise float _694 = _683 * _683;
                precise float _695 = _693 + _694;
                precise float _696 = _684 * _684;
                precise float _697 = _696 + _695;
                float _698 = sqrt(_697);
                float _699 = inversesqrt(_688);
                precise float _700 = _685 * _699;
                precise float _701 = _686 * _699;
                precise float _702 = _687 * _699;
                precise float _705 = _698 / (isnan(0.001000000047497451305389404296875) ? _640.y : (isnan(_640.y) ? 0.001000000047497451305389404296875 : max(_640.y, 0.001000000047497451305389404296875)));
                precise float _706 = 1.0 - _705;
                float _870 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
                float _707 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
                float _733;
                if (_681)
                {
                    float _720 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
                    precise float _721 = _682 * _720;
                    precise float _722 = _683 * _720;
                    precise float _723 = _684 * _720;
                    precise float _727 = dot(vec3(_700, _701, _702), vec3(_721, _722, _723)) * 0.800000011920928955078125;
                    precise float _729 = _727 + 0.20000000298023223876953125;
                    float _881 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
                    precise float _732 = _707 * (isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0)));
                    _733 = _732;
                }
                else
                {
                    _733 = _707;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_733 > 0.0)
                {
                    bool _736 = _679 && (!_681);
                    precise float _738 = _698 * (-4.0);
                    precise float _742 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _641 : (isnan(_641) ? 0.001000000047497451305389404296875 : max(_641, 0.001000000047497451305389404296875)));
                    precise float _744 = dot(vec2(_700, _702), vec2(_682, _684));
                    precise float _748 = _742 * _744;
                    precise float _749 = float(_736) * _748;
                    precise float _750 = _337 * _742;
                    precise float _751 = _750 - _749;
                    precise float _752 = (_736 ? 0.0 : _738) + _751;
                    precise float _754 = _626 * sin(_752);
                    precise float _755 = _701 * 0.0;
                    precise float _756 = _755 - _702;
                    precise float _757 = _702 * 0.0;
                    precise float _758 = _700 * 0.0;
                    precise float _759 = _757 - _758;
                    precise float _760 = _700 - _755;
                    precise float _761 = _642 * _754;
                    float _762 = _679 ? _761 : 0.0;
                    float _805;
                    if (_680)
                    {
                        precise float _765 = _656 * 2.0;
                        precise float _767 = _676 + _677;
                        precise float _768 = _678 + _767;
                        precise float _770 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _656 : (isnan(_656) ? 0.001000000047497451305389404296875 : max(_656, 0.001000000047497451305389404296875)));
                        precise float _771 = _675 * _770;
                        precise float _772 = (-0.0) - _700;
                        precise float _777 = dot(vec2(_702, _772), vec2(_682, _684)) / _765;
                        precise float _778 = (-0.0) - _777;
                        float _781 = fract(abs(_777));
                        precise float _782 = (-0.0) - _781;
                        precise float _784 = _765 * ((_777 >= _778) ? _781 : _782);
                        precise float _785 = _784 * 6.283184051513671875;
                        precise float _786 = _785 / _765;
                        precise float _788 = (isnan(5.0) ? _656 : (isnan(_656) ? 5.0 : min(_656, 5.0))) * sin(_786);
                        precise float _789 = _744 + _788;
                        precise float _790 = _656 * 0.25;
                        precise float _792 = _337 * _675;
                        precise float _793 = _792 - _790;
                        precise float _794 = _793 - _789;
                        precise float _795 = _675 * _768;
                        precise float _797 = _794 / (isnan(0.001000000047497451305389404296875) ? _795 : (isnan(_795) ? 0.001000000047497451305389404296875 : max(_795, 0.001000000047497451305389404296875)));
                        float _798 = fract(_797);
                        precise float _800 = 1.0 - _798;
                        float _801 = (_797 < 0.0) ? _800 : _798;
                        precise float _802 = _767 / _768;
                        precise float _803 = _676 / _768;
                        float _824;
                        if (_801 < _803)
                        {
                            precise float _822 = _801 / _803;
                            _824 = _822;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_801 < _802)
                            {
                                precise float _834 = _801 - _803;
                                precise float _835 = _802 - _803;
                                precise float _836 = _834 / _835;
                                precise float _825 = 1.0 - _836;
                                frontier_phi_14_13_ladder = _825;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _824 = frontier_phi_14_13_ladder;
                        }
                        precise float _826 = _658 * _824;
                        precise float _827 = _770 * _744;
                        precise float _828 = _337 * _771;
                        precise float _829 = _828 - _827;
                        precise float _831 = _657 + sin(_829);
                        precise float _833 = _826 * abs(_831);
                        precise float _806 = _833 + 0.0;
                        _805 = _806;
                    }
                    else
                    {
                        _805 = 0.0;
                    }
                    precise float _807 = _607 + _754;
                    precise float _808 = _807 + _805;
                    precise float _809 = _700 * _808;
                    precise float _810 = _701 * _808;
                    precise float _811 = _702 * _808;
                    precise float _812 = _756 * _762;
                    precise float _813 = _759 * _762;
                    precise float _814 = _760 * _762;
                    precise float _815 = _812 + _809;
                    precise float _816 = _813 + _810;
                    precise float _817 = _814 + _811;
                    precise float _818 = _733 * _815;
                    precise float _819 = _733 * _816;
                    precise float _820 = _733 * _817;
                    precise float _709 = _818 * 0.0500000007450580596923828125;
                    precise float _711 = _819 * 0.0500000007450580596923828125;
                    precise float _713 = _820 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _709;
                    frontier_phi_5_pred_7_ladder_1 = _711;
                    frontier_phi_5_pred_7_ladder_2 = _713;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _708 = frontier_phi_5_pred;
            _710 = frontier_phi_5_pred_1;
            _712 = frontier_phi_5_pred_2;
            _339 = _566 + _708;
            _341 = _567 + _710;
            _343 = _568 + _712;
            uint _572 = _571 + 1u;
            if (_572 == _214)
            {
                break;
            }
            else
            {
                _566 = _339;
                _567 = _341;
                _568 = _343;
                _569 = (_571 != 3u) ? (_569 >> 8u) : _212;
                _571 = _572;
                continue;
            }
        }
        _338 = _339;
        _340 = _341;
        _342 = _343;
    }
    precise float _344 = _338 * _338;
    precise float _345 = _340 * _340;
    precise float _346 = _344 + _345;
    precise float _347 = _342 * _342;
    precise float _348 = _346 + _347;
    float _349 = sqrt(_348);
    bool _350 = _349 < 0.00011000000085914507508277893066406;
    float _355 = inversesqrt(dot(vec3(cbInstanceData._m0[_193].x, cbInstanceData._m0[_198].x, cbInstanceData._m0[_202].x), vec3(cbInstanceData._m0[_193].x, cbInstanceData._m0[_198].x, cbInstanceData._m0[_202].x)));
    precise float _356 = cbInstanceData._m0[_193].x * _355;
    precise float _357 = cbInstanceData._m0[_198].x * _355;
    precise float _358 = cbInstanceData._m0[_202].x * _355;
    float _362 = inversesqrt(dot(vec3(cbInstanceData._m0[_193].y, cbInstanceData._m0[_198].y, cbInstanceData._m0[_202].y), vec3(cbInstanceData._m0[_193].y, cbInstanceData._m0[_198].y, cbInstanceData._m0[_202].y)));
    precise float _363 = cbInstanceData._m0[_193].y * _362;
    precise float _364 = cbInstanceData._m0[_198].y * _362;
    precise float _365 = cbInstanceData._m0[_202].y * _362;
    float _369 = inversesqrt(dot(vec3(cbInstanceData._m0[_193].z, cbInstanceData._m0[_198].z, cbInstanceData._m0[_202].z), vec3(cbInstanceData._m0[_193].z, cbInstanceData._m0[_198].z, cbInstanceData._m0[_202].z)));
    precise float _370 = cbInstanceData._m0[_193].z * _369;
    precise float _371 = cbInstanceData._m0[_198].z * _369;
    precise float _372 = cbInstanceData._m0[_202].z * _369;
    precise float _373 = _356 * 0.0;
    precise float _374 = 1.0 * _363;
    precise float _375 = _374 + _373;
    precise float _376 = 0.0 * _370;
    precise float _377 = _376 + _375;
    precise float _378 = _357 * 0.0;
    precise float _379 = 1.0 * _364;
    precise float _380 = _379 + _378;
    precise float _381 = 0.0 * _371;
    precise float _382 = _381 + _380;
    precise float _383 = _358 * 0.0;
    precise float _384 = 1.0 * _365;
    precise float _385 = _384 + _383;
    precise float _386 = 0.0 * _372;
    precise float _387 = _386 + _385;
    float _391 = inversesqrt(dot(vec3(_338, _340, _342), vec3(_338, _340, _342)));
    precise float _392 = _338 * _391;
    precise float _393 = _340 * _391;
    precise float _394 = _342 * _391;
    precise float _395 = _382 * _394;
    precise float _396 = _387 * _393;
    precise float _397 = _395 - _396;
    precise float _398 = _387 * _392;
    precise float _399 = _377 * _394;
    precise float _400 = _398 - _399;
    precise float _401 = _377 * _393;
    precise float _402 = _382 * _392;
    precise float _403 = _401 - _402;
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    precise float _408 = _407 * _397;
    precise float _409 = _407 * _400;
    precise float _410 = _407 * _403;
    precise float _411 = _349 + 1.0;
    precise float _413 = cbMtdParam._m0[10u].y * log2(_411);
    precise float _414 = _265 - _322;
    precise float _415 = _272 - _329;
    precise float _416 = _279 - _336;
    precise float _417 = dot(vec3(_408, _409, _410), vec3(_414, _415, _416));
    precise float _420 = _408 * _417;
    precise float _421 = _409 * _417;
    precise float _422 = _410 * _417;
    precise float _423 = _322 + _420;
    precise float _424 = _329 + _421;
    precise float _425 = _336 + _422;
    precise float _426 = _265 - _423;
    precise float _427 = _272 - _424;
    precise float _428 = _279 - _425;
    precise float _429 = _409 * _428;
    precise float _430 = _410 * _427;
    precise float _431 = _429 - _430;
    precise float _432 = _410 * _426;
    precise float _433 = _408 * _428;
    precise float _434 = _432 - _433;
    precise float _435 = _408 * _427;
    precise float _436 = _409 * _426;
    precise float _437 = _435 - _436;
    float _438 = sin(_413);
    float _439 = cos(_413);
    precise float _440 = _426 * _439;
    precise float _441 = _427 * _439;
    precise float _442 = _428 * _439;
    precise float _443 = _438 * _431;
    precise float _444 = _438 * _434;
    precise float _445 = _438 * _437;
    precise float _446 = _440 + _443;
    precise float _447 = _441 + _444;
    precise float _448 = _445 + _442;
    precise float _449 = _423 + _446;
    precise float _450 = _424 + _447;
    precise float _451 = _425 + _448;
    precise float _452 = _449 - _265;
    precise float _453 = _450 - _272;
    precise float _454 = _451 - _279;
    precise float _458 = _265 + (_350 ? 0.0 : _452);
    precise float _459 = _272 + (_350 ? 0.0 : _453);
    precise float _460 = _279 + (_350 ? 0.0 : _454);
    precise float _466 = _458 - cbSceneParam._m0[3u].x;
    precise float _467 = _459 - cbSceneParam._m0[3u].y;
    precise float _468 = _460 - cbSceneParam._m0[3u].z;
    precise float _496 = _466 * cbSceneParam._m0[24u].x;
    precise float _497 = _467 * cbSceneParam._m0[24u].y;
    precise float _498 = _497 + _496;
    precise float _499 = _468 * cbSceneParam._m0[24u].z;
    precise float _500 = _499 + _498;
    precise float _501 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _502 = _501 + _500;
    precise float _503 = _466 * cbSceneParam._m0[25u].x;
    precise float _504 = _467 * cbSceneParam._m0[25u].y;
    precise float _505 = _504 + _503;
    precise float _506 = _468 * cbSceneParam._m0[25u].z;
    precise float _507 = _506 + _505;
    precise float _508 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _509 = _508 + _507;
    precise float _510 = _466 * cbSceneParam._m0[26u].x;
    precise float _511 = _467 * cbSceneParam._m0[26u].y;
    precise float _512 = _511 + _510;
    precise float _513 = _468 * cbSceneParam._m0[26u].z;
    precise float _514 = _513 + _512;
    precise float _515 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _516 = _515 + _514;
    precise float _517 = _466 * cbSceneParam._m0[27u].x;
    precise float _518 = _467 * cbSceneParam._m0[27u].y;
    precise float _519 = _518 + _517;
    precise float _520 = _468 * cbSceneParam._m0[27u].z;
    precise float _521 = _520 + _519;
    precise float _522 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _523 = _522 + _521;
    gl_Position.x = _502;
    gl_Position.y = _509;
    gl_Position.z = _516;
    gl_Position.w = _523;
    POSITION_1.x = _502;
    POSITION_1.y = _509;
    POSITION_1.z = _516;
    POSITION_1.w = _523;
    NORMAL_1.x = fma(_175, cbObjMatrix._m0[_237].z, fma(_174, cbObjMatrix._m0[_237].y, cbObjMatrix._m0[_237].x * _172));
    NORMAL_1.y = fma(_175, cbObjMatrix._m0[_244].z, fma(_174, cbObjMatrix._m0[_244].y, cbObjMatrix._m0[_244].x * _172));
    NORMAL_1.z = fma(_175, cbObjMatrix._m0[_251].z, fma(_174, cbObjMatrix._m0[_251].y, cbObjMatrix._m0[_251].x * _172));
    NORMAL_1.w = float(_228);
    TANGENT_1.x = fma(_187, cbObjMatrix._m0[_237].z, fma(_186, cbObjMatrix._m0[_237].y, cbObjMatrix._m0[_237].x * _185));
    TANGENT_1.y = fma(_187, cbObjMatrix._m0[_244].z, fma(_186, cbObjMatrix._m0[_244].y, cbObjMatrix._m0[_244].x * _185));
    TANGENT_1.z = fma(_187, cbObjMatrix._m0[_251].z, fma(_186, cbObjMatrix._m0[_251].y, cbObjMatrix._m0[_251].x * _185));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_502, _509, _516, _523), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_502, _509, _516, _523), vec4(cbInstanceData._m0[_230 + 3u]));
}


