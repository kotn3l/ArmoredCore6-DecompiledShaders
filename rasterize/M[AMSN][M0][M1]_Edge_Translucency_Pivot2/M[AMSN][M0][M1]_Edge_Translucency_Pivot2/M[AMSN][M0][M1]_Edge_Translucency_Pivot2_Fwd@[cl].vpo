#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out float TEXCOORD_2;
layout(location = 4, component = 1) out float TEXCOORD_1_1;
layout(location = 5) out vec4 TEXCOORD_3;

uint _609;

void main()
{
    uint _77 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    float _167 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _169 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _180 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _188 = _77 * 13u;
    uint _193 = _188 + 1u;
    uint _197 = _188 + 2u;
    uvec4 _205 = floatBitsToUint(cbInstanceData._m0[_188 + 7u]);
    uint _207 = _205.w;
    uint _209 = min(_205.y, 8u);
    precise float _213 = POSITION.x + 0.0;
    precise float _214 = POSITION.y + 0.0;
    precise float _215 = POSITION.z + 0.0;
    uint _220 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _77;
    uvec4 _222 = texelFetch(g_InstanceIndexBuffer, int(_220));
    uint _223 = _222.x;
    uint _232 = (floatBitsToUint(cbInstanceData._m0[(_223 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _239 = _232 + 1u;
    uint _246 = _232 + 2u;
    precise float _253 = _213 * cbObjMatrix._m0[_232].x;
    precise float _254 = _214 * cbObjMatrix._m0[_232].y;
    precise float _255 = _254 + _253;
    precise float _256 = _215 * cbObjMatrix._m0[_232].z;
    precise float _257 = _256 + _255;
    precise float _258 = 1.0 * cbObjMatrix._m0[_232].w;
    precise float _260 = _258 + _257;
    precise float _261 = _213 * cbObjMatrix._m0[_239].x;
    precise float _262 = _214 * cbObjMatrix._m0[_239].y;
    precise float _263 = _262 + _261;
    precise float _264 = _215 * cbObjMatrix._m0[_239].z;
    precise float _265 = _264 + _263;
    precise float _266 = 1.0 * cbObjMatrix._m0[_239].w;
    precise float _267 = _266 + _265;
    precise float _268 = _213 * cbObjMatrix._m0[_246].x;
    precise float _269 = _214 * cbObjMatrix._m0[_246].y;
    precise float _270 = _269 + _268;
    precise float _271 = _215 * cbObjMatrix._m0[_246].z;
    precise float _272 = _271 + _270;
    precise float _273 = 1.0 * cbObjMatrix._m0[_246].w;
    precise float _274 = _273 + _272;
    precise float _295 = _260 * _260;
    precise float _296 = _267 * _267;
    precise float _297 = _295 + _296;
    precise float _298 = _274 * _274;
    precise float _299 = _297 + _298;
    precise float _301 = cbMtdParam._m0[10u].z * sqrt(_299);
    precise float _311 = cbInstanceData._m0[_188].x * 0.0;
    precise float _312 = 0.0 * cbInstanceData._m0[_188].y;
    precise float _313 = _312 + _311;
    precise float _314 = 0.0 * cbInstanceData._m0[_188].z;
    precise float _315 = _314 + _313;
    precise float _316 = 1.0 * cbInstanceData._m0[_188].w;
    precise float _317 = _316 + _315;
    precise float _318 = cbInstanceData._m0[_193].x * 0.0;
    precise float _319 = 0.0 * cbInstanceData._m0[_193].y;
    precise float _320 = _319 + _318;
    precise float _321 = 0.0 * cbInstanceData._m0[_193].z;
    precise float _322 = _321 + _320;
    precise float _323 = 1.0 * cbInstanceData._m0[_193].w;
    precise float _324 = _323 + _322;
    precise float _325 = cbInstanceData._m0[_197].x * 0.0;
    precise float _326 = 0.0 * cbInstanceData._m0[_197].y;
    precise float _327 = _326 + _325;
    precise float _328 = 0.0 * cbInstanceData._m0[_197].z;
    precise float _329 = _328 + _327;
    precise float _330 = 1.0 * cbInstanceData._m0[_197].w;
    precise float _331 = _330 + _329;
    precise float _332 = cbPerFrame._m0[22u].x + _301;
    float _333;
    float _335;
    float _337;
    if (_209 == 0u)
    {
        _333 = 0.0;
        _335 = 0.0;
        _337 = 0.0;
    }
    else
    {
        uint _539 = _205.z;
        precise float _334;
        precise float _336;
        precise float _338;
        float _682;
        float _684;
        float _686;
        float _540 = 0.0;
        float _541 = 0.0;
        float _542 = 0.0;
        uint _543 = _539;
        uint _545 = 0u;
        float _581;
        float _600;
        vec4 _614;
        float _615;
        float _616;
        float _630;
        float _631;
        float _632;
        float _649;
        float _650;
        float _651;
        float _652;
        bool _653;
        bool _654;
        bool _655;
        precise float _656;
        precise float _657;
        precise float _658;
        float _659;
        float _660;
        float _661;
        precise float _662;
        bool _665;
        for (;;)
        {
            uint _547 = _543 & 255u;
            uint _549 = _547 * 24u;
            uvec3 _559 = uvec3(texelFetch(g_forceParam, int(_549)).x, texelFetch(g_forceParam, int(_549 + 1u)).x, texelFetch(g_forceParam, int(_549 + 2u)).x);
            uint _564 = (_547 * 24u) + 4u;
            vec4 _577 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_564)).x, texelFetch(g_forceParam, int(_564 + 1u)).x, texelFetch(g_forceParam, int(_564 + 2u)).x, texelFetch(g_forceParam, int(_564 + 3u)).x));
            _581 = _577.w;
            uint _583 = (_547 * 24u) + 8u;
            vec4 _596 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_583)).x, texelFetch(g_forceParam, int(_583 + 1u)).x, texelFetch(g_forceParam, int(_583 + 2u)).x, texelFetch(g_forceParam, int(_583 + 3u)).x));
            _600 = _596.w;
            uint _603 = (_547 * 24u) + 12u;
            _614 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_603)).x, texelFetch(g_forceParam, int(_603 + 1u)).x, _609, texelFetch(g_forceParam, int(_603 + 3u)).x));
            _615 = _614.x;
            _616 = _614.w;
            uint _619 = (_547 * 24u) + 16u;
            vec3 _629 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_619)).x, texelFetch(g_forceParam, int(_619 + 1u)).x, texelFetch(g_forceParam, int(_619 + 2u)).x));
            _630 = _629.x;
            _631 = _629.y;
            _632 = _629.z;
            uint _635 = (_547 * 24u) + 20u;
            vec4 _648 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_635)).x, texelFetch(g_forceParam, int(_635 + 1u)).x, texelFetch(g_forceParam, int(_635 + 2u)).x, texelFetch(g_forceParam, int(_635 + 3u)).x));
            _649 = _648.x;
            _650 = _648.y;
            _651 = _648.z;
            _652 = _648.w;
            _653 = _559.x == 1u;
            _654 = _559.y == 1u;
            _655 = _559.z == 1u;
            _656 = _317 - _577.x;
            _657 = _324 - _577.y;
            _658 = _331 - _577.z;
            _659 = _653 ? _596.x : _656;
            _660 = _653 ? _596.y : _657;
            _661 = _653 ? _596.z : _658;
            _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
            _665 = _662 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_665)
            {
                precise float _667 = _656 * _656;
                precise float _668 = _657 * _657;
                precise float _669 = _667 + _668;
                precise float _670 = _658 * _658;
                precise float _671 = _670 + _669;
                float _672 = sqrt(_671);
                float _673 = inversesqrt(_662);
                precise float _674 = _659 * _673;
                precise float _675 = _660 * _673;
                precise float _676 = _661 * _673;
                precise float _679 = _672 / (isnan(0.001000000047497451305389404296875) ? _614.y : (isnan(_614.y) ? 0.001000000047497451305389404296875 : max(_614.y, 0.001000000047497451305389404296875)));
                precise float _680 = 1.0 - _679;
                float _844 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
                float _681 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
                float _707;
                if (_655)
                {
                    float _694 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
                    precise float _695 = _656 * _694;
                    precise float _696 = _657 * _694;
                    precise float _697 = _658 * _694;
                    precise float _701 = dot(vec3(_674, _675, _676), vec3(_695, _696, _697)) * 0.800000011920928955078125;
                    precise float _703 = _701 + 0.20000000298023223876953125;
                    float _855 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
                    precise float _706 = _681 * (isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0)));
                    _707 = _706;
                }
                else
                {
                    _707 = _681;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_707 > 0.0)
                {
                    bool _710 = _653 && (!_655);
                    precise float _712 = _672 * (-4.0);
                    precise float _716 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _615 : (isnan(_615) ? 0.001000000047497451305389404296875 : max(_615, 0.001000000047497451305389404296875)));
                    precise float _718 = dot(vec2(_674, _676), vec2(_656, _658));
                    precise float _722 = _716 * _718;
                    precise float _723 = float(_710) * _722;
                    precise float _724 = _332 * _716;
                    precise float _725 = _724 - _723;
                    precise float _726 = (_710 ? 0.0 : _712) + _725;
                    precise float _728 = _600 * sin(_726);
                    precise float _729 = _675 * 0.0;
                    precise float _730 = _729 - _676;
                    precise float _731 = _676 * 0.0;
                    precise float _732 = _674 * 0.0;
                    precise float _733 = _731 - _732;
                    precise float _734 = _674 - _729;
                    precise float _735 = _616 * _728;
                    float _736 = _653 ? _735 : 0.0;
                    float _779;
                    if (_654)
                    {
                        precise float _739 = _630 * 2.0;
                        precise float _741 = _650 + _651;
                        precise float _742 = _652 + _741;
                        precise float _744 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _630 : (isnan(_630) ? 0.001000000047497451305389404296875 : max(_630, 0.001000000047497451305389404296875)));
                        precise float _745 = _649 * _744;
                        precise float _746 = (-0.0) - _674;
                        precise float _751 = dot(vec2(_676, _746), vec2(_656, _658)) / _739;
                        precise float _752 = (-0.0) - _751;
                        float _755 = fract(abs(_751));
                        precise float _756 = (-0.0) - _755;
                        precise float _758 = _739 * ((_751 >= _752) ? _755 : _756);
                        precise float _759 = _758 * 6.283184051513671875;
                        precise float _760 = _759 / _739;
                        precise float _762 = (isnan(5.0) ? _630 : (isnan(_630) ? 5.0 : min(_630, 5.0))) * sin(_760);
                        precise float _763 = _718 + _762;
                        precise float _764 = _630 * 0.25;
                        precise float _766 = _332 * _649;
                        precise float _767 = _766 - _764;
                        precise float _768 = _767 - _763;
                        precise float _769 = _649 * _742;
                        precise float _771 = _768 / (isnan(0.001000000047497451305389404296875) ? _769 : (isnan(_769) ? 0.001000000047497451305389404296875 : max(_769, 0.001000000047497451305389404296875)));
                        float _772 = fract(_771);
                        precise float _774 = 1.0 - _772;
                        float _775 = (_771 < 0.0) ? _774 : _772;
                        precise float _776 = _741 / _742;
                        precise float _777 = _650 / _742;
                        float _798;
                        if (_775 < _777)
                        {
                            precise float _796 = _775 / _777;
                            _798 = _796;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_775 < _776)
                            {
                                precise float _808 = _775 - _777;
                                precise float _809 = _776 - _777;
                                precise float _810 = _808 / _809;
                                precise float _799 = 1.0 - _810;
                                frontier_phi_14_13_ladder = _799;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _798 = frontier_phi_14_13_ladder;
                        }
                        precise float _800 = _632 * _798;
                        precise float _801 = _744 * _718;
                        precise float _802 = _332 * _745;
                        precise float _803 = _802 - _801;
                        precise float _805 = _631 + sin(_803);
                        precise float _807 = _800 * abs(_805);
                        precise float _780 = _807 + 0.0;
                        _779 = _780;
                    }
                    else
                    {
                        _779 = 0.0;
                    }
                    precise float _781 = _581 + _728;
                    precise float _782 = _781 + _779;
                    precise float _783 = _674 * _782;
                    precise float _784 = _675 * _782;
                    precise float _785 = _676 * _782;
                    precise float _786 = _730 * _736;
                    precise float _787 = _733 * _736;
                    precise float _788 = _734 * _736;
                    precise float _789 = _786 + _783;
                    precise float _790 = _787 + _784;
                    precise float _791 = _788 + _785;
                    precise float _792 = _707 * _789;
                    precise float _793 = _707 * _790;
                    precise float _794 = _707 * _791;
                    precise float _683 = _792 * 0.0500000007450580596923828125;
                    precise float _685 = _793 * 0.0500000007450580596923828125;
                    precise float _687 = _794 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _683;
                    frontier_phi_5_pred_7_ladder_1 = _685;
                    frontier_phi_5_pred_7_ladder_2 = _687;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _682 = frontier_phi_5_pred;
            _684 = frontier_phi_5_pred_1;
            _686 = frontier_phi_5_pred_2;
            _334 = _540 + _682;
            _336 = _541 + _684;
            _338 = _542 + _686;
            uint _546 = _545 + 1u;
            if (_546 == _209)
            {
                break;
            }
            else
            {
                _540 = _334;
                _541 = _336;
                _542 = _338;
                _543 = (_545 != 3u) ? (_543 >> 8u) : _207;
                _545 = _546;
                continue;
            }
        }
        _333 = _334;
        _335 = _336;
        _337 = _338;
    }
    precise float _339 = _333 * _333;
    precise float _340 = _335 * _335;
    precise float _341 = _339 + _340;
    precise float _342 = _337 * _337;
    precise float _343 = _341 + _342;
    float _344 = sqrt(_343);
    bool _345 = _344 < 0.00011000000085914507508277893066406;
    float _350 = inversesqrt(dot(vec3(cbInstanceData._m0[_188].x, cbInstanceData._m0[_193].x, cbInstanceData._m0[_197].x), vec3(cbInstanceData._m0[_188].x, cbInstanceData._m0[_193].x, cbInstanceData._m0[_197].x)));
    precise float _351 = cbInstanceData._m0[_188].x * _350;
    precise float _352 = cbInstanceData._m0[_193].x * _350;
    precise float _353 = cbInstanceData._m0[_197].x * _350;
    float _357 = inversesqrt(dot(vec3(cbInstanceData._m0[_188].y, cbInstanceData._m0[_193].y, cbInstanceData._m0[_197].y), vec3(cbInstanceData._m0[_188].y, cbInstanceData._m0[_193].y, cbInstanceData._m0[_197].y)));
    precise float _358 = cbInstanceData._m0[_188].y * _357;
    precise float _359 = cbInstanceData._m0[_193].y * _357;
    precise float _360 = cbInstanceData._m0[_197].y * _357;
    float _364 = inversesqrt(dot(vec3(cbInstanceData._m0[_188].z, cbInstanceData._m0[_193].z, cbInstanceData._m0[_197].z), vec3(cbInstanceData._m0[_188].z, cbInstanceData._m0[_193].z, cbInstanceData._m0[_197].z)));
    precise float _365 = cbInstanceData._m0[_188].z * _364;
    precise float _366 = cbInstanceData._m0[_193].z * _364;
    precise float _367 = cbInstanceData._m0[_197].z * _364;
    precise float _368 = _351 * 0.0;
    precise float _369 = 1.0 * _358;
    precise float _370 = _369 + _368;
    precise float _371 = 0.0 * _365;
    precise float _372 = _371 + _370;
    precise float _373 = _352 * 0.0;
    precise float _374 = 1.0 * _359;
    precise float _375 = _374 + _373;
    precise float _376 = 0.0 * _366;
    precise float _377 = _376 + _375;
    precise float _378 = _353 * 0.0;
    precise float _379 = 1.0 * _360;
    precise float _380 = _379 + _378;
    precise float _381 = 0.0 * _367;
    precise float _382 = _381 + _380;
    float _386 = inversesqrt(dot(vec3(_333, _335, _337), vec3(_333, _335, _337)));
    precise float _387 = _333 * _386;
    precise float _388 = _335 * _386;
    precise float _389 = _337 * _386;
    precise float _390 = _377 * _389;
    precise float _391 = _382 * _388;
    precise float _392 = _390 - _391;
    precise float _393 = _382 * _387;
    precise float _394 = _372 * _389;
    precise float _395 = _393 - _394;
    precise float _396 = _372 * _388;
    precise float _397 = _377 * _387;
    precise float _398 = _396 - _397;
    float _402 = inversesqrt(dot(vec3(_392, _395, _398), vec3(_392, _395, _398)));
    precise float _403 = _402 * _392;
    precise float _404 = _402 * _395;
    precise float _405 = _402 * _398;
    precise float _406 = _344 + 1.0;
    precise float _408 = cbMtdParam._m0[10u].y * log2(_406);
    precise float _409 = _260 - _317;
    precise float _410 = _267 - _324;
    precise float _411 = _274 - _331;
    precise float _412 = dot(vec3(_403, _404, _405), vec3(_409, _410, _411));
    precise float _415 = _403 * _412;
    precise float _416 = _404 * _412;
    precise float _417 = _405 * _412;
    precise float _418 = _317 + _415;
    precise float _419 = _324 + _416;
    precise float _420 = _331 + _417;
    precise float _421 = _260 - _418;
    precise float _422 = _267 - _419;
    precise float _423 = _274 - _420;
    precise float _424 = _404 * _423;
    precise float _425 = _405 * _422;
    precise float _426 = _424 - _425;
    precise float _427 = _405 * _421;
    precise float _428 = _403 * _423;
    precise float _429 = _427 - _428;
    precise float _430 = _403 * _422;
    precise float _431 = _404 * _421;
    precise float _432 = _430 - _431;
    float _433 = sin(_408);
    float _434 = cos(_408);
    precise float _435 = _421 * _434;
    precise float _436 = _422 * _434;
    precise float _437 = _423 * _434;
    precise float _438 = _433 * _426;
    precise float _439 = _433 * _429;
    precise float _440 = _433 * _432;
    precise float _441 = _435 + _438;
    precise float _442 = _436 + _439;
    precise float _443 = _440 + _437;
    precise float _444 = _418 + _441;
    precise float _445 = _419 + _442;
    precise float _446 = _420 + _443;
    precise float _447 = _444 - _260;
    precise float _448 = _445 - _267;
    precise float _449 = _446 - _274;
    precise float _453 = _260 + (_345 ? 0.0 : _447);
    precise float _454 = _267 + (_345 ? 0.0 : _448);
    precise float _455 = _274 + (_345 ? 0.0 : _449);
    precise float _461 = _453 - cbSceneParam._m0[3u].x;
    precise float _462 = _454 - cbSceneParam._m0[3u].y;
    precise float _463 = _455 - cbSceneParam._m0[3u].z;
    precise float _491 = _461 * cbSceneParam._m0[24u].x;
    precise float _492 = _462 * cbSceneParam._m0[24u].y;
    precise float _493 = _492 + _491;
    precise float _494 = _463 * cbSceneParam._m0[24u].z;
    precise float _495 = _494 + _493;
    precise float _496 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _497 = _496 + _495;
    precise float _498 = _461 * cbSceneParam._m0[25u].x;
    precise float _499 = _462 * cbSceneParam._m0[25u].y;
    precise float _500 = _499 + _498;
    precise float _501 = _463 * cbSceneParam._m0[25u].z;
    precise float _502 = _501 + _500;
    precise float _503 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _504 = _503 + _502;
    precise float _505 = _461 * cbSceneParam._m0[26u].x;
    precise float _506 = _462 * cbSceneParam._m0[26u].y;
    precise float _507 = _506 + _505;
    precise float _508 = _463 * cbSceneParam._m0[26u].z;
    precise float _509 = _508 + _507;
    precise float _510 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _511 = _510 + _509;
    precise float _512 = _461 * cbSceneParam._m0[27u].x;
    precise float _513 = _462 * cbSceneParam._m0[27u].y;
    precise float _514 = _513 + _512;
    precise float _515 = _463 * cbSceneParam._m0[27u].z;
    precise float _516 = _515 + _514;
    precise float _517 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _518 = _517 + _516;
    gl_Position.x = _497;
    gl_Position.y = _504;
    gl_Position.z = _511;
    gl_Position.w = _518;
    POSITION_1.x = _497;
    POSITION_1.y = _504;
    POSITION_1.z = _511;
    POSITION_1.w = _518;
    NORMAL_1.x = fma(_170, cbObjMatrix._m0[_232].z, fma(_169, cbObjMatrix._m0[_232].y, cbObjMatrix._m0[_232].x * _167));
    NORMAL_1.y = fma(_170, cbObjMatrix._m0[_239].z, fma(_169, cbObjMatrix._m0[_239].y, cbObjMatrix._m0[_239].x * _167));
    NORMAL_1.z = fma(_170, cbObjMatrix._m0[_246].z, fma(_169, cbObjMatrix._m0[_246].y, cbObjMatrix._m0[_246].x * _167));
    NORMAL_1.w = float(_223);
    TANGENT_1.x = fma(_182, cbObjMatrix._m0[_232].z, fma(_181, cbObjMatrix._m0[_232].y, cbObjMatrix._m0[_232].x * _180));
    TANGENT_1.y = fma(_182, cbObjMatrix._m0[_239].z, fma(_181, cbObjMatrix._m0[_239].y, cbObjMatrix._m0[_239].x * _180));
    TANGENT_1.z = fma(_182, cbObjMatrix._m0[_246].z, fma(_181, cbObjMatrix._m0[_246].y, cbObjMatrix._m0[_246].x * _180));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


