#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _858;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.w;
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3709 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))));
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_Pivot2_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _296 = cbMtdParam._m0[10u].x * _289.x;
    float _299 = fma(_277, _195 * NORMAL.x, fma(_270, _202 * TANGENT.x, (_188 * _180) * _268));
    float _302 = fma(_277, _195 * NORMAL.y, fma(_270, _202 * TANGENT.y, (_188 * _181) * _268));
    float _305 = fma(_277, _195 * NORMAL.z, fma(_270, _202 * TANGENT.z, (_188 * _182) * _268));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3720 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _313 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _314 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _315 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3747 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3758 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3769 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3780 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _319 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _376 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _386 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _376);
    float _387 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _376);
    float _388 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _376);
    float _392 = inversesqrt(dot(vec3(_386, _387, _388), vec3(_386, _387, _388)));
    float _393 = _386 * _392;
    float _394 = _387 * _392;
    float _395 = _388 * _392;
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _423 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _426 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _429 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = (_442 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3791 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _457 = 1.0 - _319;
    float _458 = _454 * _457;
    float _459 = _455 * _457;
    float _460 = _456 * _457;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _319;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _319;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _319;
    float _468 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    vec4 _480 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _483 = _480.x * TEXCOORD_3.w;
    float _484 = dot(vec3(_310, _311, _312), vec3(_393, _394, _395));
    float _487 = _484 * 2.0;
    float _491 = (_487 * _310) - _393;
    float _492 = (_487 * _311) - _394;
    float _493 = (_487 * _312) - _395;
    float _494 = dot(vec3(_393, _394, _395), vec3(_310, _311, _312));
    float _497 = abs(_494);
    float _3824 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = sqrt(_314);
    float _512 = exp2((_499 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_499 * 3.0));
    float _518 = (1.0 - _512) * ((_499 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _499;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _586 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _590 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _615 = _547 + _310;
        float _616 = _551 + _311;
        float _617 = _555 + _312;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_310, _311, _312), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3872 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_310, _311, _312), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3905 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_310, _311, _312), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3938 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _902 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _906 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _929 = _547 + _310;
        float _930 = _551 + _311;
        float _931 = _555 + _312;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_310, _311, _312), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _4001 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_310, _311, _312), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _4034 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_310, _311, _312), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _4067 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _858;
        _1168 = _858;
        _1169 = _858;
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _861, _864, _867));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_859, _862, _865, _868));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_860, _863, _866, _869));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1303 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _314);
    float _1304 = isnan(_1303) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1303 : min(cbModelParam._m0[25u].z, _1303));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1367 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1370 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1398;
        if (_1364 > 0.0)
        {
            _1398 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1398 = frontier_phi_14_12_ladder;
        }
        float _1574;
        if (_1367 > 0.0)
        {
            _1574 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1574 = frontier_phi_23_19_ladder;
        }
        float _1845;
        if (_1370 > 0.0)
        {
            _1845 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1845 = frontier_phi_35_30_ladder;
        }
        float _1847 = isnan(_1574) ? _1398 : (isnan(_1398) ? _1574 : min(_1398, _1574));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1364) + _1353;
        float _1853 = (_1848 * _1367) + _1357;
        float _1854 = (_1848 * _1370) + _1361;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_13_35_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_13_35_ladder_2;
        _1388 = frontier_phi_13_35_ladder_1;
        _1390 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1304);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1394 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _314);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1394 : min(cbModelParam._m0[25u].w, _1394));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1452 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1456 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1460 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1463 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1466 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1469 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1579;
        if (_1463 > 0.0)
        {
            _1579 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1579 = frontier_phi_25_21_ladder;
        }
        float _1872;
        if (_1466 > 0.0)
        {
            _1872 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1872 = frontier_phi_37_32_ladder;
        }
        float _2026;
        if (_1469 > 0.0)
        {
            _2026 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2026 = frontier_phi_46_44_ladder;
        }
        float _2028 = isnan(_1872) ? _1579 : (isnan(_1579) ? _1872 : min(_1579, _1872));
        float _2029 = isnan(_2026) ? _2028 : (isnan(_2028) ? _2026 : min(_2028, _2026));
        float _2033 = (_2029 * _1463) + _1452;
        float _2034 = (_2029 * _1466) + _1456;
        float _2035 = (_2029 * _1469) + _1460;
        float _2036 = _2029 * 9.9999997473787516355514526367188e-05;
        float _2037 = (-1.0) - _2036;
        float _2039 = _2036 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2035 > _2039) || ((_2035 < _2037) || ((_2034 > _2039) || ((_2034 < _2037) || ((_2033 < _2037) || (_2033 > _2039))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2035, cbModelParam._m0[17u].z, fma(_2034, cbModelParam._m0[17u].y, _2033 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2035, cbModelParam._m0[18u].z, fma(_2034, cbModelParam._m0[18u].y, _2033 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2035, cbModelParam._m0[19u].z, fma(_2034, cbModelParam._m0[19u].y, _2033 * cbModelParam._m0[19u].x))), _1395);
            frontier_phi_22_46_ladder = _2105.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2105.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2105.x * cbModelParam._m0[1u].z;
        }
        _1488 = frontier_phi_22_46_ladder_2;
        _1490 = frontier_phi_22_46_ladder_1;
        _1492 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1395);
        _1488 = _1472.x * cbModelParam._m0[1u].z;
        _1490 = _1472.y * cbModelParam._m0[1u].z;
        _1492 = _1472.z * cbModelParam._m0[1u].z;
    }
    float _1505 = (((_518 * _468) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1507 = (((_518 * _470) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1509 = (((_518 * _471) + _519) * _483) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1512 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, _1505 * cbSceneParam._m0[91u].x));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1565 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1566 = _1553 / _1565;
    float _1567 = _1557 / _1565;
    float _1568 = _1561 / _1565;
    float _1715;
    float _1716;
    float _1717;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1595 = ((uint(_1568 > cbSceneParam._m0[59u].y) + uint(_1568 > cbSceneParam._m0[59u].x)) + uint(_1568 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1596 = _1595 + 43u;
        uint _1604 = _1595 + 44u;
        uint _1612 = _1595 + 45u;
        uint _1620 = _1595 + 46u;
        float _1631 = fma(_1565, cbSceneParam._m0[_1596].w, fma(_1561, cbSceneParam._m0[_1596].z, fma(_1557, cbSceneParam._m0[_1596].y, _1553 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1565, cbSceneParam._m0[_1604].w, fma(_1561, cbSceneParam._m0[_1604].z, fma(_1557, cbSceneParam._m0[_1604].y, _1553 * cbSceneParam._m0[_1604].x)));
        float _1643 = fma(_1565, cbSceneParam._m0[_1620].w, fma(_1561, cbSceneParam._m0[_1620].z, fma(_1557, cbSceneParam._m0[_1620].y, _1553 * cbSceneParam._m0[_1620].x)));
        float _1648 = cbSceneParam._m0[33u].z * _1643;
        float _1650 = cbSceneParam._m0[33u].w * _1643;
        float _1653 = fma(_1565, cbSceneParam._m0[_1612].w, fma(_1561, cbSceneParam._m0[_1612].z, fma(_1557, cbSceneParam._m0[_1612].y, _1553 * cbSceneParam._m0[_1612].x))) / _1643;
        float _1701 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
        float _4193 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1708 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 + _1631) / _1643, (_1650 + _1635) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 + _1631) / _1643, (_1635 - _1648) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1648) / _1643, (_1635 - _1650) / _1643), _1653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1631 - _1650) / _1643, (_1648 + _1635) / _1643), _1653), 0.0)).x), vec4(0.25)));
        _1715 = 1.0 - (_1708 * cbSceneParam._m0[34u].x);
        _1716 = 1.0 - (_1708 * cbSceneParam._m0[34u].y);
        _1717 = 1.0 - (_1708 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1715 = 1.0;
        _1716 = 1.0;
        _1717 = 1.0;
    }
    float _1781;
    float _1783;
    float _1785;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1769 = fma(_1565, cbSceneParam._m0[63u].w, fma(_1561, cbSceneParam._m0[63u].z, fma(_1557, cbSceneParam._m0[63u].y, _1553 * cbSceneParam._m0[63u].x)));
        float _1770 = fma(_1565, cbSceneParam._m0[60u].w, fma(_1561, cbSceneParam._m0[60u].z, fma(_1557, cbSceneParam._m0[60u].y, _1553 * cbSceneParam._m0[60u].x))) / _1769;
        float _1771 = fma(_1565, cbSceneParam._m0[61u].w, fma(_1561, cbSceneParam._m0[61u].z, fma(_1557, cbSceneParam._m0[61u].y, _1553 * cbSceneParam._m0[61u].x))) / _1769;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1770 >= cbSceneParam._m0[64u].x) && (_1771 >= cbSceneParam._m0[64u].y)) && (_1770 <= cbSceneParam._m0[64u].z)) && (_1771 <= cbSceneParam._m0[64u].w))
        {
            float _1885 = fma(_1565, cbSceneParam._m0[62u].w, fma(_1561, cbSceneParam._m0[62u].z, fma(_1557, cbSceneParam._m0[62u].y, _1553 * cbSceneParam._m0[62u].x))) / _1769;
            float _1889 = isnan(cbSceneParam._m0[41u].w) ? _1885 : (isnan(_1885) ? cbSceneParam._m0[41u].w : max(_1885, cbSceneParam._m0[41u].w));
            float _1932 = (cbSceneParam._m0[33u].x - sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568))) * cbSceneParam._m0[33u].y;
            float _4209 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
            float _1939 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1770, cbSceneParam._m0[33u].w + _1771), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1770, _1771 - cbSceneParam._m0[33u].z), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].z, _1771 - cbSceneParam._m0[33u].w), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1770 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1771), _1889), 0.0)).x), vec4(0.25)));
            float _1943 = 1.0 - (_1939 * cbSceneParam._m0[34u].x);
            float _1944 = 1.0 - (_1939 * cbSceneParam._m0[34u].y);
            float _1945 = 1.0 - (_1939 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1945) ? _1717 : (isnan(_1717) ? _1945 : min(_1717, _1945));
            frontier_phi_34_33_ladder_1 = isnan(_1944) ? _1716 : (isnan(_1716) ? _1944 : min(_1716, _1944));
            frontier_phi_34_33_ladder_2 = isnan(_1943) ? _1715 : (isnan(_1715) ? _1943 : min(_1715, _1943));
        }
        else
        {
            frontier_phi_34_33_ladder = _1717;
            frontier_phi_34_33_ladder_1 = _1716;
            frontier_phi_34_33_ladder_2 = _1715;
        }
        _1781 = frontier_phi_34_33_ladder_2;
        _1783 = frontier_phi_34_33_ladder_1;
        _1785 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1781 = _1715;
        _1783 = _1716;
        _1785 = _1717;
    }
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _483 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1810 = _1792 + 4u;
    float _1822 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_310, _311, _312));
    float _1825 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    float _1826 = cbLight._m0[_1810].x * _1781;
    float _1827 = cbLight._m0[_1810].y * _1783;
    float _1828 = cbLight._m0[_1810].z * _1785;
    uint _1829 = _1792 + 5u;
    float _1841 = dot(vec3(cbLight._m0[_1792 | 1u].xyz), vec3(_310, _311, _312));
    float _1844 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    float _2017;
    float _2018;
    float _2019;
    if (_315 == 0.0)
    {
        float _4245 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _4256 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1954 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
        float _1956 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
        _2017 = ((cbLight._m0[_1829].x * _1844) * _1956) + ((_1826 * _1825) * _1954);
        _2018 = ((_1844 * cbLight._m0[_1829].y) * _1956) + ((_1827 * _1825) * _1954);
        _2019 = ((_1844 * cbLight._m0[_1829].z) * _1956) + ((_1828 * _1825) * _1954);
    }
    else
    {
        float _1966 = _1822 + _315;
        float _1969 = (_315 * 2.0) + 1.0;
        float _1970 = (isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) / _1969;
        float _1977 = _1841 + _315;
        float _1979 = (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) / _1969;
        _2017 = (((_1979 * cbLight._m0[_1829].x) * _1844) + ((_1826 * _1970) * _1825)) * 0.3183098733425140380859375;
        _2018 = (((_1979 * cbLight._m0[_1829].y) * _1844) + ((_1827 * _1970) * _1825)) * 0.3183098733425140380859375;
        _2019 = (((_1979 * cbLight._m0[_1829].z) * _1844) + ((_1828 * _1970) * _1825)) * 0.3183098733425140380859375;
    }
    uvec4 _2023 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _2025 = _2023.x == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2025)
    {
        _2052 = _2017;
        _2054 = _2018;
        _2056 = _2019;
    }
    else
    {
        uint _2060 = _1792 + 6u;
        float _2076 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4277 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2079 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2052 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _2017;
        _2054 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _2018;
        _2056 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _2019;
    }
    bool _2059 = _2023.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2059)
    {
        _2110 = _2052;
        _2112 = _2054;
        _2114 = _2056;
    }
    else
    {
        uint _2296 = _1792 + 7u;
        float _2312 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4293 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2315 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2110 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2052;
        _2112 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2054;
        _2114 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2056;
    }
    uint _2119 = _1792 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _314) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1792].x + _393;
    float _2138 = cbLight._m0[_1792].y + _394;
    float _2139 = cbLight._m0[_1792].z + _395;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1792].xyz));
    float _4309 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2151 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2152 = dot(vec3(_310, _311, _312), vec3(_2144, _2145, _2146));
    float _4331 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2144, _2145, _2146));
    float _4342 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _465;
    float _2175 = 0.959999978542327880859375 - _466;
    float _2176 = 0.959999978542327880859375 - _467;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4353 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2197 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _2210 = _1792 | 1u;
    uint _2214 = _1792 + 9u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _314) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_2210].x + _393;
    float _2231 = cbLight._m0[_2210].y + _394;
    float _2232 = cbLight._m0[_2210].z + _395;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2210].xyz));
    float _4369 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2244 = dot(vec3(_310, _311, _312), vec3(_2237, _2238, _2239));
    float _4380 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
    float _4391 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2229 * _2229;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2270 = 1.0 - _2229;
    float _2280 = (0.5 / (((_2151 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2270) + _2229) * _2243))) * _2243;
    float _4402 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    float _2283 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    float _2293 = (((((_2263 * _2173) + _468) * cbLight._m0[_2214].x) * _2282) * _2283) + ((((cbLight._m0[_2119].x * _1781) * ((_2172 * _2173) + _468)) * _2196) * _2197);
    float _2294 = (((((_2263 * _2175) + _470) * cbLight._m0[_2214].y) * _2282) * _2283) + ((((cbLight._m0[_2119].y * _1783) * ((_2172 * _2175) + _470)) * _2196) * _2197);
    float _2295 = (((((_2263 * _2176) + _471) * cbLight._m0[_2214].z) * _2282) * _2283) + ((((cbLight._m0[_2119].z * _1785) * ((_2172 * _2176) + _471)) * _2196) * _2197);
    float _2325;
    float _2327;
    float _2329;
    if (_2025)
    {
        _2325 = _2293;
        _2327 = _2294;
        _2329 = _2295;
    }
    else
    {
        uint _2331 = _1792 + 2u;
        uint _2335 = _1792 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _314) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _393;
        float _2352 = cbLight._m0[_2331].y + _394;
        float _2353 = cbLight._m0[_2331].z + _395;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2331].xyz));
        float _4418 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2365 = dot(vec3(_310, _311, _312), vec3(_2358, _2359, _2360));
        float _4429 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4440 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2391 = 1.0 - _2350;
        float _2401 = (0.5 / (((_2151 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2391) + _2350) * _2364))) * _2364;
        float _4451 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2403 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2404 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2325 = (((((_2384 * _2173) + _468) * cbLight._m0[_2335].x) * _2403) * _2404) + _2293;
        _2327 = (((((_2384 * _2175) + _470) * cbLight._m0[_2335].y) * _2403) * _2404) + _2294;
        _2329 = (((((_2384 * _2176) + _471) * cbLight._m0[_2335].z) * _2403) * _2404) + _2295;
    }
    float _2414;
    float _2416;
    float _2418;
    if (_2059)
    {
        _2414 = _2325;
        _2416 = _2327;
        _2418 = _2329;
    }
    else
    {
        uint _2425 = _1792 + 3u;
        uint _2429 = _1792 + 11u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _314) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _393;
        float _2446 = cbLight._m0[_2425].y + _394;
        float _2447 = cbLight._m0[_2425].z + _395;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2425].xyz));
        float _4467 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2459 = dot(vec3(_310, _311, _312), vec3(_2452, _2453, _2454));
        float _4478 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4489 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
        float _2485 = 1.0 - _2444;
        float _2495 = (0.5 / (((_2151 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2485) + _2444) * _2458))) * _2458;
        float _4500 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2414 = (((((_2478 * _2173) + _468) * cbLight._m0[_2429].x) * _2497) * _2498) + _2325;
        _2416 = (((((_2478 * _2175) + _470) * cbLight._m0[_2429].y) * _2497) * _2498) + _2327;
        _2418 = (((((_2478 * _2176) + _471) * cbLight._m0[_2429].z) * _2497) * _2498) + _2329;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1790.y == 0u)
    {
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2520)));
        float _2541 = (log2(_1568 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
        }
        else
        {
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2777)
                {
                    frontier_phi_69_pred = _2766;
                    frontier_phi_69_pred_1 = _2765;
                    frontier_phi_69_pred_2 = _2764;
                    frontier_phi_69_pred_3 = _2763;
                    frontier_phi_69_pred_4 = _2762;
                    frontier_phi_69_pred_5 = _2761;
                }
                else
                {
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    uint _2944;
                    _2938 = _2761;
                    _2939 = _2762;
                    _2940 = _2763;
                    _2941 = _2764;
                    _2942 = _2765;
                    _2943 = _2766;
                    _2944 = _2776;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    for (;;)
                    {
                        uint _2948 = uint(findLSB(_2944)) + (_2767 << 5u);
                        uint _2945 = (_2944 + 4294967295u) & _2944;
                        uint _2950 = _2948 * 48u;
                        vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2970 = (_2948 * 48u) + 4u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        float _2984 = _2983.x;
                        float _2985 = _2983.y;
                        float _2986 = _2983.z;
                        uint _2989 = (_2948 * 48u) + 8u;
                        vec3 _3000 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x));
                        uint _3005 = (_2948 * 48u) + 12u;
                        vec2 _3013 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x));
                        float _3019 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
                        float _3020 = _3019 * _1566;
                        float _3021 = _3019 * _1567;
                        float _3022 = _3019 * _1568;
                        float _3023 = _2964.x - _1566;
                        float _3024 = _2964.y - _1567;
                        float _3025 = _2964.z - _1568;
                        float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                        float _3029 = inversesqrt(_3026);
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3033 = dot(vec3(_423, _426, _429), vec3(_3030, _3031, _3032));
                        float _3038 = 1.0 - (_3026 * _2964.w);
                        float _4526 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3040 = sqrt(_3026) * _2983.w;
                        float _3043 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                        float _3044 = _3043 * _3043;
                        float _3045 = 1.0 - _3044;
                        float _3047 = (_3045 * _3045) * _315;
                        float _3050 = ((_3045 * _3033) + _3044) + _3047;
                        float _3055 = _3040 * _3040;
                        float _3060 = ((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3039) / (((_3047 * 2.0) + 1.0) * ((_3055 * 0.699999988079071044921875) + 1.0));
                        float _3064 = dot(vec3(_3030, _3031, _3032), vec3(_3020, _3021, _3022));
                        float _4542 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3071 = dot(vec3((-0.0) - _3020, (-0.0) - _3021, (-0.0) - _3022), vec3(_423, _426, _429)) + 1.0;
                        float _3073 = (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * 0.5;
                        float _3080 = ((_3073 * _3073) * _3013.x) * exp2((_3013.y * 32.0) * log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))));
                        float _3082 = _315 / (_315 + 1.0);
                        float _3098 = (-0.0) - _1566;
                        float _3099 = (-0.0) - _1567;
                        float _3100 = (-0.0) - _1568;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3114 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _499;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3105 + _3030;
                        float _3126 = _3106 + _3031;
                        float _3127 = _3107 + _3032;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_423, _426, _429), vec3(_3105, _3106, _3107));
                        float _4558 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3139 = dot(vec3(_423, _426, _429), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4569 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3043 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3033) + _3148;
                        float _4580 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4591 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3146 * _3146) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3039;
                        _2872 = (((((_2984 * 0.3183098733425140380859375) * _3082) * _3080) + _2984) * _3060) + _2941;
                        _2873 = (((((_2985 * 0.3183098733425140380859375) * _3082) * _3080) + _2985) * _3060) + _2942;
                        _2874 = (((((_2986 * 0.3183098733425140380859375) * _3082) * _3080) + _2986) * _3060) + _2943;
                        _2869 = (_3174 * _3000.x) + _2938;
                        _2870 = (_3174 * _3000.y) + _2939;
                        _2871 = (_3174 * _3000.z) + _2940;
                        if (_2945 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2938 = _2869;
                            _2939 = _2870;
                            _2940 = _2871;
                            _2941 = _2872;
                            _2942 = _2873;
                            _2943 = _2874;
                            _2944 = _2945;
                        }
                    }
                    frontier_phi_69_pred = _2874;
                    frontier_phi_69_pred_1 = _2873;
                    frontier_phi_69_pred_2 = _2872;
                    frontier_phi_69_pred_3 = _2871;
                    frontier_phi_69_pred_4 = _2870;
                    frontier_phi_69_pred_5 = _2869;
                }
                _2588 = frontier_phi_69_pred;
                _2586 = frontier_phi_69_pred_1;
                _2584 = frontier_phi_69_pred_2;
                _2582 = frontier_phi_69_pred_3;
                _2580 = frontier_phi_69_pred_4;
                _2578 = frontier_phi_69_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2578;
                    _2762 = _2580;
                    _2763 = _2582;
                    _2764 = _2584;
                    _2765 = _2586;
                    _2766 = _2588;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
        }
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.z;
        uint _2594 = (_2592 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2594) & _2551) == 0u)
        {
            _2729 = _2577;
            _2731 = _2579;
            _2733 = _2581;
            _2735 = _2583;
            _2737 = _2585;
            _2739 = _2587;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
            float _2755 = _2754 * _1566;
            float _2756 = _2754 * _1567;
            float _2757 = _2754 * _1568;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2594 < ((_2592 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2921 = _2577;
                float _2922 = _2579;
                float _2923 = _2581;
                float _2924 = _2583;
                float _2925 = _2585;
                float _2926 = _2587;
                uint _2927 = _2594;
                uint _2936;
                bool _2937;
                for (;;)
                {
                    _2936 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                    _2937 = _2936 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2937)
                    {
                        frontier_phi_77_pred = _2926;
                        frontier_phi_77_pred_1 = _2925;
                        frontier_phi_77_pred_2 = _2924;
                        frontier_phi_77_pred_3 = _2923;
                        frontier_phi_77_pred_4 = _2922;
                        frontier_phi_77_pred_5 = _2921;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3230 = _2921;
                        float _3231 = _2922;
                        float _3232 = _2923;
                        float _3233 = _2924;
                        float _3234 = _2925;
                        float _3235 = _2926;
                        uint _3236 = _2936;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        vec3 _3293;
                        vec2 _3302;
                        vec4 _3318;
                        vec4 _3334;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3247 = ((_2927 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3279 = _3278.x;
                            _3280 = _3278.y;
                            _3281 = _3278.z;
                            uint _3283 = (_3247 * 40u) + 8u;
                            _3293 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x));
                            uint _3295 = (_3247 * 40u) + 12u;
                            _3302 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x));
                            uint _3305 = (_3247 * 40u) + 16u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3321 = (_3247 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3337 = (_3247 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3247 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_1568, _3369.z, fma(_1567, _3369.y, _3369.x * _1566)) + _3369.w;
                            _3382 = !((fma(_1568, _3350.z, fma(_1567, _3350.y, _3350.x * _1566)) + _3350.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3382)
                            {
                                float _3408 = _3262.x - _1566;
                                float _3409 = _3262.y - _1567;
                                float _3410 = _3262.z - _1568;
                                float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                                float _3414 = inversesqrt(_3411);
                                float _3415 = _3414 * _3408;
                                float _3416 = _3414 * _3409;
                                float _3417 = _3414 * _3410;
                                float _3421 = 1.0 - (_3411 / (_3263 * _3263));
                                float _4602 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3426 = sqrt(_3411) * _3278.w;
                                float _3428 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                                float _3429 = _3428 * _3428;
                                float _3430 = 1.0 - _3429;
                                float _3432 = (_3430 * _3430) * _315;
                                float _3435 = ((_3430 * dot(vec3(_3415, _3416, _3417), vec3(_423, _426, _429))) + _3429) + _3432;
                                float _3440 = _3426 * _3426;
                                float _3445 = (fma(_1568, _3318.z, fma(_1567, _3318.y, _3318.x * _1566)) + _3318.w) / _3381;
                                float _3446 = (fma(_1568, _3334.z, fma(_1567, _3334.y, _3334.x * _1566)) + _3334.w) / _3381;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4618 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3422) / (((_3432 * 2.0) + 1.0) * ((_3440 * 0.699999988079071044921875) + 1.0)));
                                float _3453 = (-0.0) - _2755;
                                float _3454 = (-0.0) - _2756;
                                float _3455 = (-0.0) - _2757;
                                float _3456 = dot(vec3(_3415, _3416, _3417), vec3(_2755, _2756, _2757));
                                float _4629 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3463 = dot(vec3(_3453, _3454, _3455), vec3(_423, _426, _429)) + 1.0;
                                float _3465 = (isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * 0.5;
                                float _3472 = ((_3465 * _3465) * _3302.x) * exp2((_3302.y * 32.0) * log2(isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))));
                                float _3474 = _315 / (_315 + 1.0);
                                float _3495 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _499;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3415 - _2755;
                                float _3507 = _3416 - _2756;
                                float _3508 = _3417 - _2757;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_423, _426, _429), vec3(_3453, _3454, _3455));
                                float _4645 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3520 = dot(vec3(_423, _426, _429), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4656 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3428 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_423, _426, _429), vec3(_3415, _3416, _3417))) + _3529;
                                float _4667 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4678 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3451 * _3422) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3527 * _3527) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = ((((_3280 * 0.3183098733425140380859375) * _3474) * _3472) + _3280) * _3452;
                                frontier_phi_83_pred_1 = ((((_3279 * 0.3183098733425140380859375) * _3474) * _3472) + _3279) * _3452;
                                frontier_phi_83_pred_2 = _3557 * _3293.z;
                                frontier_phi_83_pred_3 = _3557 * _3293.y;
                                frontier_phi_83_pred_4 = _3557 * _3293.x;
                                frontier_phi_83_pred_5 = ((((_3281 * 0.3183098733425140380859375) * _3474) * _3472) + _3281) * _3452;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_83_pred;
                            _3564 = frontier_phi_83_pred_1;
                            _3563 = frontier_phi_83_pred_2;
                            _3562 = frontier_phi_83_pred_3;
                            _3561 = frontier_phi_83_pred_4;
                            _3566 = frontier_phi_83_pred_5;
                            _3220 = _3564 + _3233;
                            _3221 = _3565 + _3234;
                            _3222 = _3566 + _3235;
                            _3217 = _3561 + _3230;
                            _3218 = _3562 + _3231;
                            _3219 = _3563 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3222;
                        frontier_phi_77_pred_1 = _3221;
                        frontier_phi_77_pred_2 = _3220;
                        frontier_phi_77_pred_3 = _3219;
                        frontier_phi_77_pred_4 = _3218;
                        frontier_phi_77_pred_5 = _3217;
                    }
                    _2740 = frontier_phi_77_pred;
                    _2738 = frontier_phi_77_pred_1;
                    _2736 = frontier_phi_77_pred_2;
                    _2734 = frontier_phi_77_pred_3;
                    _2732 = frontier_phi_77_pred_4;
                    _2730 = frontier_phi_77_pred_5;
                    uint _2928 = _2927 + 1u;
                    if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2921 = _2730;
                        _2922 = _2732;
                        _2923 = _2734;
                        _2924 = _2736;
                        _2925 = _2738;
                        _2926 = _2740;
                        _2927 = _2928;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2740;
                frontier_phi_63_64_ladder_1 = _2738;
                frontier_phi_63_64_ladder_2 = _2736;
                frontier_phi_63_64_ladder_3 = _2732;
                frontier_phi_63_64_ladder_4 = _2730;
                frontier_phi_63_64_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_63_64_ladder = _2587;
                frontier_phi_63_64_ladder_1 = _2585;
                frontier_phi_63_64_ladder_2 = _2583;
                frontier_phi_63_64_ladder_3 = _2579;
                frontier_phi_63_64_ladder_4 = _2577;
                frontier_phi_63_64_ladder_5 = _2581;
            }
            _2729 = frontier_phi_63_64_ladder_4;
            _2731 = frontier_phi_63_64_ladder_3;
            _2733 = frontier_phi_63_64_ladder_5;
            _2735 = frontier_phi_63_64_ladder_2;
            _2737 = frontier_phi_63_64_ladder_1;
            _2739 = frontier_phi_63_64_ladder;
        }
        float _2744 = isnan(1.0) ? _483 : (isnan(_483) ? 1.0 : min(_483, 1.0));
        _2564 = (_2744 * _2735) + _2110;
        _2566 = (_2744 * _2737) + _2112;
        _2568 = (_2744 * _2739) + _2114;
        _2570 = ((_2729 * _468) * _2744) + _2414;
        _2572 = ((_2731 * _470) * _2744) + _2416;
        _2574 = ((_2733 * _471) * _2744) + _2418;
    }
    else
    {
        _2564 = _2110;
        _2566 = _2112;
        _2568 = _2114;
        _2570 = _2414;
        _2572 = _2416;
        _2574 = _2418;
    }
    float _2666;
    float _2667;
    float _2668;
    if (_315 > 0.0)
    {
        uint _2598 = _1792 + 4u;
        float _2604 = (-0.0) - _393;
        float _2606 = (-0.0) - _394;
        float _2607 = (-0.0) - _395;
        float _2608 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_2604, _2606, _2607));
        float _4694 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _494 + 1.0;
        float _2614 = (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))) * 0.5;
        float _2619 = _2614 * _2614;
        float _2620 = _2619 * exp2(log2(isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 32.0);
        float _2622 = _315 / (_315 + 1.0);
        float _2623 = isnan(_1805) ? 1.0 : (isnan(1.0) ? _1805 : min(1.0, _1805));
        uint _2636 = _1792 + 5u;
        float _2642 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2604, _2606, _2607));
        float _4715 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2649 = _2619 * exp2(log2(isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 32.0);
        float _2650 = isnan(_1806) ? 1.0 : (isnan(1.0) ? _1806 : min(1.0, _1806));
        _2666 = ((((_2649 * cbLight._m0[_2636].x) * _2622) * _2650) + ((((cbLight._m0[_2598].x * _1781) * _2620) * _2622) * _2623)) * 0.3183098733425140380859375;
        _2667 = ((((_2649 * cbLight._m0[_2636].y) * _2622) * _2650) + ((((cbLight._m0[_2598].y * _1783) * _2620) * _2622) * _2623)) * 0.3183098733425140380859375;
        _2668 = ((((_2649 * cbLight._m0[_2636].z) * _2622) * _2650) + ((((cbLight._m0[_2598].z * _1785) * _2620) * _2622) * _2623)) * 0.3183098733425140380859375;
    }
    else
    {
        _2666 = 0.0;
        _2667 = 0.0;
        _2668 = 0.0;
    }
    float _4731 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4742 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4753 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4764 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _2695 = cbInstanceData._m0[_442 + 6u].w * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)));
    float _2700 = _401 / cbSceneParam._m0[86u].x;
    float _2701 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2715 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2717 = _2715.x;
    float _2718 = _2715.y;
    float _2719 = _2715.z;
    float _2720 = _2715.w;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2783 = _2782 / _335;
        float _2794 = _2783 * _386;
        float _2795 = _387 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2797 = _2783 * _388;
        float _2799 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2800 = _2799 + cbSceneParam._m0[79u].w;
        float _2801 = cbSceneParam._m0[79u].w - _2795;
        float _2807 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2797 * _2797));
        float _2810 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2807;
        float _2815 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2817 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_2796 - _2799) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_2800 > 0.0) ? exp2(_2815 * _2800) : (2.0 - exp2(_2817 * _2800))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2810;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : max(_2800, _2801));
            float _2896 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : min(_2800, _2801));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _3179 = ((abs(_2807 / _2796) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2815 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2815 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2817 * _2905) - exp2(_2817 * _2906)) * _2894))) + (_2810 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2720);
        _2819 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2717;
        _2821 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2718;
        _2823 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2719;
        _2825 = _3190 * _2720;
    }
    else
    {
        _2819 = _2717;
        _2821 = _2718;
        _2823 = _2719;
        _2825 = _2720;
    }
    float _2837 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2838 = _2837 == 3.0;
    float _2839 = log2(_2825);
    float _2846 = exp2(_2839 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * ((_2564 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _483)) + _2666)) + ((_2570 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2847 = exp2(_2839 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * ((_2566 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _483)) + _2667)) + ((_2572 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2848 = exp2(_2839 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * ((_2568 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _483)) + _2668)) + ((_2574 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1293)) * cbPerFrame._m0[3u].x));
    float _2857 = (_2837 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2857 * (_2838 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.y = _2857 * (_2838 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.z = _2857 * (_2838 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.w = _2695;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2695;
}


