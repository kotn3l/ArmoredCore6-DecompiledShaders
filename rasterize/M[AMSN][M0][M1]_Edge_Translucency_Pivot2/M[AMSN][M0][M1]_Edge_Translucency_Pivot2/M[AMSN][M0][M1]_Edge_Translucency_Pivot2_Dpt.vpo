#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _513;

void main()
{
    uint _69 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    uint _99 = _69 * 13u;
    uint _104 = _99 + 1u;
    uint _108 = _99 + 2u;
    uvec4 _116 = floatBitsToUint(cbInstanceData._m0[_99 + 7u]);
    uint _118 = _116.w;
    uint _120 = min(_116.y, 8u);
    precise float _124 = POSITION.x + 0.0;
    precise float _125 = POSITION.y + 0.0;
    precise float _126 = POSITION.z + 0.0;
    uint _131 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _69;
    uint _136 = texelFetch(g_InstanceIndexBuffer, int(_131)).x * 13u;
    uint _144 = (floatBitsToUint(cbInstanceData._m0[_136 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _151 = _144 + 1u;
    uint _158 = _144 + 2u;
    precise float _165 = _124 * cbObjMatrix._m0[_144].x;
    precise float _166 = _125 * cbObjMatrix._m0[_144].y;
    precise float _167 = _166 + _165;
    precise float _168 = _126 * cbObjMatrix._m0[_144].z;
    precise float _169 = _168 + _167;
    precise float _170 = 1.0 * cbObjMatrix._m0[_144].w;
    precise float _172 = _170 + _169;
    precise float _173 = _124 * cbObjMatrix._m0[_151].x;
    precise float _174 = _125 * cbObjMatrix._m0[_151].y;
    precise float _175 = _174 + _173;
    precise float _176 = _126 * cbObjMatrix._m0[_151].z;
    precise float _177 = _176 + _175;
    precise float _178 = 1.0 * cbObjMatrix._m0[_151].w;
    precise float _179 = _178 + _177;
    precise float _180 = _124 * cbObjMatrix._m0[_158].x;
    precise float _181 = _125 * cbObjMatrix._m0[_158].y;
    precise float _182 = _181 + _180;
    precise float _183 = _126 * cbObjMatrix._m0[_158].z;
    precise float _184 = _183 + _182;
    precise float _185 = 1.0 * cbObjMatrix._m0[_158].w;
    precise float _186 = _185 + _184;
    precise float _188 = _172 * _172;
    precise float _189 = _179 * _179;
    precise float _190 = _188 + _189;
    precise float _191 = _186 * _186;
    precise float _192 = _190 + _191;
    precise float _194 = cbMtdParam._m0[10u].z * sqrt(_192);
    precise float _204 = cbInstanceData._m0[_99].x * 0.0;
    precise float _205 = 0.0 * cbInstanceData._m0[_99].y;
    precise float _206 = _205 + _204;
    precise float _207 = 0.0 * cbInstanceData._m0[_99].z;
    precise float _208 = _207 + _206;
    precise float _209 = 1.0 * cbInstanceData._m0[_99].w;
    precise float _210 = _209 + _208;
    precise float _211 = cbInstanceData._m0[_104].x * 0.0;
    precise float _212 = 0.0 * cbInstanceData._m0[_104].y;
    precise float _213 = _212 + _211;
    precise float _214 = 0.0 * cbInstanceData._m0[_104].z;
    precise float _215 = _214 + _213;
    precise float _216 = 1.0 * cbInstanceData._m0[_104].w;
    precise float _217 = _216 + _215;
    precise float _218 = cbInstanceData._m0[_108].x * 0.0;
    precise float _219 = 0.0 * cbInstanceData._m0[_108].y;
    precise float _220 = _219 + _218;
    precise float _221 = 0.0 * cbInstanceData._m0[_108].z;
    precise float _222 = _221 + _220;
    precise float _223 = 1.0 * cbInstanceData._m0[_108].w;
    precise float _224 = _223 + _222;
    precise float _225 = cbPerFrame._m0[22u].x + _194;
    float _226;
    float _228;
    float _230;
    if (_120 == 0u)
    {
        _226 = 0.0;
        _228 = 0.0;
        _230 = 0.0;
    }
    else
    {
        uint _443 = _116.z;
        precise float _227;
        precise float _229;
        precise float _231;
        float _586;
        float _588;
        float _590;
        float _444 = 0.0;
        float _445 = 0.0;
        float _446 = 0.0;
        uint _447 = _443;
        uint _449 = 0u;
        float _485;
        float _504;
        vec4 _518;
        float _519;
        float _520;
        float _534;
        float _535;
        float _536;
        float _553;
        float _554;
        float _555;
        float _556;
        bool _557;
        bool _558;
        bool _559;
        precise float _560;
        precise float _561;
        precise float _562;
        float _563;
        float _564;
        float _565;
        precise float _566;
        bool _569;
        for (;;)
        {
            uint _451 = _447 & 255u;
            uint _453 = _451 * 24u;
            uvec3 _463 = uvec3(texelFetch(g_forceParam, int(_453)).x, texelFetch(g_forceParam, int(_453 + 1u)).x, texelFetch(g_forceParam, int(_453 + 2u)).x);
            uint _468 = (_451 * 24u) + 4u;
            vec4 _481 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_468)).x, texelFetch(g_forceParam, int(_468 + 1u)).x, texelFetch(g_forceParam, int(_468 + 2u)).x, texelFetch(g_forceParam, int(_468 + 3u)).x));
            _485 = _481.w;
            uint _487 = (_451 * 24u) + 8u;
            vec4 _500 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_487)).x, texelFetch(g_forceParam, int(_487 + 1u)).x, texelFetch(g_forceParam, int(_487 + 2u)).x, texelFetch(g_forceParam, int(_487 + 3u)).x));
            _504 = _500.w;
            uint _507 = (_451 * 24u) + 12u;
            _518 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_507)).x, texelFetch(g_forceParam, int(_507 + 1u)).x, _513, texelFetch(g_forceParam, int(_507 + 3u)).x));
            _519 = _518.x;
            _520 = _518.w;
            uint _523 = (_451 * 24u) + 16u;
            vec3 _533 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_523)).x, texelFetch(g_forceParam, int(_523 + 1u)).x, texelFetch(g_forceParam, int(_523 + 2u)).x));
            _534 = _533.x;
            _535 = _533.y;
            _536 = _533.z;
            uint _539 = (_451 * 24u) + 20u;
            vec4 _552 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_539)).x, texelFetch(g_forceParam, int(_539 + 1u)).x, texelFetch(g_forceParam, int(_539 + 2u)).x, texelFetch(g_forceParam, int(_539 + 3u)).x));
            _553 = _552.x;
            _554 = _552.y;
            _555 = _552.z;
            _556 = _552.w;
            _557 = _463.x == 1u;
            _558 = _463.y == 1u;
            _559 = _463.z == 1u;
            _560 = _210 - _481.x;
            _561 = _217 - _481.y;
            _562 = _224 - _481.z;
            _563 = _557 ? _500.x : _560;
            _564 = _557 ? _500.y : _561;
            _565 = _557 ? _500.z : _562;
            _566 = dot(vec3(_563, _564, _565), vec3(_563, _564, _565));
            _569 = _566 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_569)
            {
                precise float _571 = _560 * _560;
                precise float _572 = _561 * _561;
                precise float _573 = _571 + _572;
                precise float _574 = _562 * _562;
                precise float _575 = _574 + _573;
                float _576 = sqrt(_575);
                float _577 = inversesqrt(_566);
                precise float _578 = _563 * _577;
                precise float _579 = _564 * _577;
                precise float _580 = _565 * _577;
                precise float _583 = _576 / (isnan(0.001000000047497451305389404296875) ? _518.y : (isnan(_518.y) ? 0.001000000047497451305389404296875 : max(_518.y, 0.001000000047497451305389404296875)));
                precise float _584 = 1.0 - _583;
                float _748 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
                float _585 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
                float _611;
                if (_559)
                {
                    float _598 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
                    precise float _599 = _560 * _598;
                    precise float _600 = _561 * _598;
                    precise float _601 = _562 * _598;
                    precise float _605 = dot(vec3(_578, _579, _580), vec3(_599, _600, _601)) * 0.800000011920928955078125;
                    precise float _607 = _605 + 0.20000000298023223876953125;
                    float _759 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
                    precise float _610 = _585 * (isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0)));
                    _611 = _610;
                }
                else
                {
                    _611 = _585;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_611 > 0.0)
                {
                    bool _614 = _557 && (!_559);
                    precise float _616 = _576 * (-4.0);
                    precise float _620 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _519 : (isnan(_519) ? 0.001000000047497451305389404296875 : max(_519, 0.001000000047497451305389404296875)));
                    precise float _622 = dot(vec2(_578, _580), vec2(_560, _562));
                    precise float _626 = _620 * _622;
                    precise float _627 = float(_614) * _626;
                    precise float _628 = _225 * _620;
                    precise float _629 = _628 - _627;
                    precise float _630 = (_614 ? 0.0 : _616) + _629;
                    precise float _632 = _504 * sin(_630);
                    precise float _633 = _579 * 0.0;
                    precise float _634 = _633 - _580;
                    precise float _635 = _580 * 0.0;
                    precise float _636 = _578 * 0.0;
                    precise float _637 = _635 - _636;
                    precise float _638 = _578 - _633;
                    precise float _639 = _520 * _632;
                    float _640 = _557 ? _639 : 0.0;
                    float _683;
                    if (_558)
                    {
                        precise float _643 = _534 * 2.0;
                        precise float _645 = _554 + _555;
                        precise float _646 = _556 + _645;
                        precise float _648 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _534 : (isnan(_534) ? 0.001000000047497451305389404296875 : max(_534, 0.001000000047497451305389404296875)));
                        precise float _649 = _553 * _648;
                        precise float _650 = (-0.0) - _578;
                        precise float _655 = dot(vec2(_580, _650), vec2(_560, _562)) / _643;
                        precise float _656 = (-0.0) - _655;
                        float _659 = fract(abs(_655));
                        precise float _660 = (-0.0) - _659;
                        precise float _662 = _643 * ((_655 >= _656) ? _659 : _660);
                        precise float _663 = _662 * 6.283184051513671875;
                        precise float _664 = _663 / _643;
                        precise float _666 = (isnan(5.0) ? _534 : (isnan(_534) ? 5.0 : min(_534, 5.0))) * sin(_664);
                        precise float _667 = _622 + _666;
                        precise float _668 = _534 * 0.25;
                        precise float _670 = _225 * _553;
                        precise float _671 = _670 - _668;
                        precise float _672 = _671 - _667;
                        precise float _673 = _553 * _646;
                        precise float _675 = _672 / (isnan(0.001000000047497451305389404296875) ? _673 : (isnan(_673) ? 0.001000000047497451305389404296875 : max(_673, 0.001000000047497451305389404296875)));
                        float _676 = fract(_675);
                        precise float _678 = 1.0 - _676;
                        float _679 = (_675 < 0.0) ? _678 : _676;
                        precise float _680 = _645 / _646;
                        precise float _681 = _554 / _646;
                        float _702;
                        if (_679 < _681)
                        {
                            precise float _700 = _679 / _681;
                            _702 = _700;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_679 < _680)
                            {
                                precise float _712 = _679 - _681;
                                precise float _713 = _680 - _681;
                                precise float _714 = _712 / _713;
                                precise float _703 = 1.0 - _714;
                                frontier_phi_14_13_ladder = _703;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _702 = frontier_phi_14_13_ladder;
                        }
                        precise float _704 = _536 * _702;
                        precise float _705 = _648 * _622;
                        precise float _706 = _225 * _649;
                        precise float _707 = _706 - _705;
                        precise float _709 = _535 + sin(_707);
                        precise float _711 = _704 * abs(_709);
                        precise float _684 = _711 + 0.0;
                        _683 = _684;
                    }
                    else
                    {
                        _683 = 0.0;
                    }
                    precise float _685 = _485 + _632;
                    precise float _686 = _685 + _683;
                    precise float _687 = _578 * _686;
                    precise float _688 = _579 * _686;
                    precise float _689 = _580 * _686;
                    precise float _690 = _634 * _640;
                    precise float _691 = _637 * _640;
                    precise float _692 = _638 * _640;
                    precise float _693 = _690 + _687;
                    precise float _694 = _691 + _688;
                    precise float _695 = _692 + _689;
                    precise float _696 = _611 * _693;
                    precise float _697 = _611 * _694;
                    precise float _698 = _611 * _695;
                    precise float _587 = _696 * 0.0500000007450580596923828125;
                    precise float _589 = _697 * 0.0500000007450580596923828125;
                    precise float _591 = _698 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _587;
                    frontier_phi_5_pred_7_ladder_1 = _589;
                    frontier_phi_5_pred_7_ladder_2 = _591;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _586 = frontier_phi_5_pred;
            _588 = frontier_phi_5_pred_1;
            _590 = frontier_phi_5_pred_2;
            _227 = _444 + _586;
            _229 = _445 + _588;
            _231 = _446 + _590;
            uint _450 = _449 + 1u;
            if (_450 == _120)
            {
                break;
            }
            else
            {
                _444 = _227;
                _445 = _229;
                _446 = _231;
                _447 = (_449 != 3u) ? (_447 >> 8u) : _118;
                _449 = _450;
                continue;
            }
        }
        _226 = _227;
        _228 = _229;
        _230 = _231;
    }
    precise float _232 = _226 * _226;
    precise float _233 = _228 * _228;
    precise float _234 = _232 + _233;
    precise float _235 = _230 * _230;
    precise float _236 = _234 + _235;
    float _237 = sqrt(_236);
    bool _238 = _237 < 0.00011000000085914507508277893066406;
    float _243 = inversesqrt(dot(vec3(cbInstanceData._m0[_99].x, cbInstanceData._m0[_104].x, cbInstanceData._m0[_108].x), vec3(cbInstanceData._m0[_99].x, cbInstanceData._m0[_104].x, cbInstanceData._m0[_108].x)));
    precise float _244 = cbInstanceData._m0[_99].x * _243;
    precise float _245 = cbInstanceData._m0[_104].x * _243;
    precise float _246 = cbInstanceData._m0[_108].x * _243;
    float _250 = inversesqrt(dot(vec3(cbInstanceData._m0[_99].y, cbInstanceData._m0[_104].y, cbInstanceData._m0[_108].y), vec3(cbInstanceData._m0[_99].y, cbInstanceData._m0[_104].y, cbInstanceData._m0[_108].y)));
    precise float _251 = cbInstanceData._m0[_99].y * _250;
    precise float _252 = cbInstanceData._m0[_104].y * _250;
    precise float _253 = cbInstanceData._m0[_108].y * _250;
    float _257 = inversesqrt(dot(vec3(cbInstanceData._m0[_99].z, cbInstanceData._m0[_104].z, cbInstanceData._m0[_108].z), vec3(cbInstanceData._m0[_99].z, cbInstanceData._m0[_104].z, cbInstanceData._m0[_108].z)));
    precise float _258 = cbInstanceData._m0[_99].z * _257;
    precise float _259 = cbInstanceData._m0[_104].z * _257;
    precise float _260 = cbInstanceData._m0[_108].z * _257;
    precise float _261 = _244 * 0.0;
    precise float _262 = 1.0 * _251;
    precise float _263 = _262 + _261;
    precise float _264 = 0.0 * _258;
    precise float _265 = _264 + _263;
    precise float _266 = _245 * 0.0;
    precise float _267 = 1.0 * _252;
    precise float _268 = _267 + _266;
    precise float _269 = 0.0 * _259;
    precise float _270 = _269 + _268;
    precise float _271 = _246 * 0.0;
    precise float _272 = 1.0 * _253;
    precise float _273 = _272 + _271;
    precise float _274 = 0.0 * _260;
    precise float _275 = _274 + _273;
    float _279 = inversesqrt(dot(vec3(_226, _228, _230), vec3(_226, _228, _230)));
    precise float _280 = _226 * _279;
    precise float _281 = _228 * _279;
    precise float _282 = _230 * _279;
    precise float _283 = _270 * _282;
    precise float _284 = _275 * _281;
    precise float _285 = _283 - _284;
    precise float _286 = _275 * _280;
    precise float _287 = _265 * _282;
    precise float _288 = _286 - _287;
    precise float _289 = _265 * _281;
    precise float _290 = _270 * _280;
    precise float _291 = _289 - _290;
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    precise float _296 = _295 * _285;
    precise float _297 = _295 * _288;
    precise float _298 = _295 * _291;
    precise float _299 = _237 + 1.0;
    precise float _301 = cbMtdParam._m0[10u].y * log2(_299);
    precise float _302 = _172 - _210;
    precise float _303 = _179 - _217;
    precise float _304 = _186 - _224;
    precise float _305 = dot(vec3(_296, _297, _298), vec3(_302, _303, _304));
    precise float _308 = _296 * _305;
    precise float _309 = _297 * _305;
    precise float _310 = _298 * _305;
    precise float _311 = _210 + _308;
    precise float _312 = _217 + _309;
    precise float _313 = _224 + _310;
    precise float _314 = _172 - _311;
    precise float _315 = _179 - _312;
    precise float _316 = _186 - _313;
    precise float _317 = _297 * _316;
    precise float _318 = _298 * _315;
    precise float _319 = _317 - _318;
    precise float _320 = _298 * _314;
    precise float _321 = _296 * _316;
    precise float _322 = _320 - _321;
    precise float _323 = _296 * _315;
    precise float _324 = _297 * _314;
    precise float _325 = _323 - _324;
    float _326 = sin(_301);
    float _327 = cos(_301);
    precise float _328 = _314 * _327;
    precise float _329 = _315 * _327;
    precise float _330 = _316 * _327;
    precise float _331 = _326 * _319;
    precise float _332 = _326 * _322;
    precise float _333 = _326 * _325;
    precise float _334 = _328 + _331;
    precise float _335 = _329 + _332;
    precise float _336 = _333 + _330;
    precise float _337 = _311 + _334;
    precise float _338 = _312 + _335;
    precise float _339 = _313 + _336;
    precise float _340 = _337 - _172;
    precise float _341 = _338 - _179;
    precise float _342 = _339 - _186;
    precise float _346 = _172 + (_238 ? 0.0 : _340);
    precise float _347 = _179 + (_238 ? 0.0 : _341);
    precise float _348 = _186 + (_238 ? 0.0 : _342);
    precise float _354 = _346 - cbSceneParam._m0[3u].x;
    precise float _355 = _347 - cbSceneParam._m0[3u].y;
    precise float _356 = _348 - cbSceneParam._m0[3u].z;
    precise float _384 = _354 * cbSceneParam._m0[24u].x;
    precise float _385 = _355 * cbSceneParam._m0[24u].y;
    precise float _386 = _385 + _384;
    precise float _387 = _356 * cbSceneParam._m0[24u].z;
    precise float _388 = _387 + _386;
    precise float _389 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _390 = _389 + _388;
    precise float _391 = _354 * cbSceneParam._m0[25u].x;
    precise float _392 = _355 * cbSceneParam._m0[25u].y;
    precise float _393 = _392 + _391;
    precise float _394 = _356 * cbSceneParam._m0[25u].z;
    precise float _395 = _394 + _393;
    precise float _396 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _397 = _396 + _395;
    precise float _398 = _354 * cbSceneParam._m0[26u].x;
    precise float _399 = _355 * cbSceneParam._m0[26u].y;
    precise float _400 = _399 + _398;
    precise float _401 = _356 * cbSceneParam._m0[26u].z;
    precise float _402 = _401 + _400;
    precise float _403 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _404 = _403 + _402;
    precise float _405 = _354 * cbSceneParam._m0[27u].x;
    precise float _406 = _355 * cbSceneParam._m0[27u].y;
    precise float _407 = _406 + _405;
    precise float _408 = _356 * cbSceneParam._m0[27u].z;
    precise float _409 = _408 + _407;
    precise float _410 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _411 = _410 + _409;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _390;
    gl_Position.y = _397;
    gl_Position.z = _404;
    gl_Position.w = _411;
    gl_ClipDistance[0u] = dot(vec4(_390, _397, _404, _411), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_390, _397, _404, _411), vec4(cbInstanceData._m0[_136 + 3u]));
}


