#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out float TEXCOORD_2;
layout(location = 3, component = 1) out float TEXCOORD_1_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 3, component = 2) out vec2 TEXCOORD_7;
layout(location = 5) out float TEXCOORD_11;

uint _617;

void main()
{
    uint _80 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2 = 0.0;
    TEXCOORD_1_1 = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_7.x = 0.0;
    TEXCOORD_7.y = 0.0;
    TEXCOORD_11 = 0.0;
    float _168 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _181 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _183 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _189 = _80 * 13u;
    uint _194 = _189 + 1u;
    uint _198 = _189 + 2u;
    uvec4 _206 = floatBitsToUint(cbInstanceData._m0[_189 + 7u]);
    uint _208 = _206.w;
    uint _210 = min(_206.y, 8u);
    precise float _214 = POSITION.x + 0.0;
    precise float _215 = POSITION.y + 0.0;
    precise float _216 = POSITION.z + 0.0;
    uint _221 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _80;
    uvec4 _223 = texelFetch(g_InstanceIndexBuffer, int(_221));
    uint _224 = _223.x;
    uint _233 = (floatBitsToUint(cbInstanceData._m0[(_224 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _240 = _233 + 1u;
    uint _247 = _233 + 2u;
    precise float _254 = _214 * cbObjMatrix._m0[_233].x;
    precise float _255 = _215 * cbObjMatrix._m0[_233].y;
    precise float _256 = _255 + _254;
    precise float _257 = _216 * cbObjMatrix._m0[_233].z;
    precise float _258 = _257 + _256;
    precise float _259 = 1.0 * cbObjMatrix._m0[_233].w;
    precise float _261 = _259 + _258;
    precise float _262 = _214 * cbObjMatrix._m0[_240].x;
    precise float _263 = _215 * cbObjMatrix._m0[_240].y;
    precise float _264 = _263 + _262;
    precise float _265 = _216 * cbObjMatrix._m0[_240].z;
    precise float _266 = _265 + _264;
    precise float _267 = 1.0 * cbObjMatrix._m0[_240].w;
    precise float _268 = _267 + _266;
    precise float _269 = _214 * cbObjMatrix._m0[_247].x;
    precise float _270 = _215 * cbObjMatrix._m0[_247].y;
    precise float _271 = _270 + _269;
    precise float _272 = _216 * cbObjMatrix._m0[_247].z;
    precise float _273 = _272 + _271;
    precise float _274 = 1.0 * cbObjMatrix._m0[_247].w;
    precise float _275 = _274 + _273;
    float _281 = cbSceneParam._m0[3u].x - _261;
    float _282 = cbSceneParam._m0[3u].y - _268;
    float _283 = cbSceneParam._m0[3u].z - _275;
    precise float _310 = _261 * _261;
    precise float _311 = _268 * _268;
    precise float _312 = _310 + _311;
    precise float _313 = _275 * _275;
    precise float _314 = _312 + _313;
    precise float _316 = cbMtdParam._m0[10u].z * sqrt(_314);
    precise float _326 = cbInstanceData._m0[_189].x * 0.0;
    precise float _327 = 0.0 * cbInstanceData._m0[_189].y;
    precise float _328 = _327 + _326;
    precise float _329 = 0.0 * cbInstanceData._m0[_189].z;
    precise float _330 = _329 + _328;
    precise float _331 = 1.0 * cbInstanceData._m0[_189].w;
    precise float _332 = _331 + _330;
    precise float _333 = cbInstanceData._m0[_194].x * 0.0;
    precise float _334 = 0.0 * cbInstanceData._m0[_194].y;
    precise float _335 = _334 + _333;
    precise float _336 = 0.0 * cbInstanceData._m0[_194].z;
    precise float _337 = _336 + _335;
    precise float _338 = 1.0 * cbInstanceData._m0[_194].w;
    precise float _339 = _338 + _337;
    precise float _340 = cbInstanceData._m0[_198].x * 0.0;
    precise float _341 = 0.0 * cbInstanceData._m0[_198].y;
    precise float _342 = _341 + _340;
    precise float _343 = 0.0 * cbInstanceData._m0[_198].z;
    precise float _344 = _343 + _342;
    precise float _345 = 1.0 * cbInstanceData._m0[_198].w;
    precise float _346 = _345 + _344;
    precise float _347 = cbPerFrame._m0[22u].x + _316;
    float _348;
    float _350;
    float _352;
    if (_210 == 0u)
    {
        _348 = 0.0;
        _350 = 0.0;
        _352 = 0.0;
    }
    else
    {
        uint _547 = _206.z;
        precise float _349;
        precise float _351;
        precise float _353;
        float _690;
        float _692;
        float _694;
        float _548 = 0.0;
        float _549 = 0.0;
        float _550 = 0.0;
        uint _551 = _547;
        uint _553 = 0u;
        float _589;
        float _608;
        vec4 _622;
        float _623;
        float _624;
        float _638;
        float _639;
        float _640;
        float _657;
        float _658;
        float _659;
        float _660;
        bool _661;
        bool _662;
        bool _663;
        precise float _664;
        precise float _665;
        precise float _666;
        float _667;
        float _668;
        float _669;
        precise float _670;
        bool _673;
        for (;;)
        {
            uint _555 = _551 & 255u;
            uint _557 = _555 * 24u;
            uvec3 _567 = uvec3(texelFetch(g_forceParam, int(_557)).x, texelFetch(g_forceParam, int(_557 + 1u)).x, texelFetch(g_forceParam, int(_557 + 2u)).x);
            uint _572 = (_555 * 24u) + 4u;
            vec4 _585 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_572)).x, texelFetch(g_forceParam, int(_572 + 1u)).x, texelFetch(g_forceParam, int(_572 + 2u)).x, texelFetch(g_forceParam, int(_572 + 3u)).x));
            _589 = _585.w;
            uint _591 = (_555 * 24u) + 8u;
            vec4 _604 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_591)).x, texelFetch(g_forceParam, int(_591 + 1u)).x, texelFetch(g_forceParam, int(_591 + 2u)).x, texelFetch(g_forceParam, int(_591 + 3u)).x));
            _608 = _604.w;
            uint _611 = (_555 * 24u) + 12u;
            _622 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_611)).x, texelFetch(g_forceParam, int(_611 + 1u)).x, _617, texelFetch(g_forceParam, int(_611 + 3u)).x));
            _623 = _622.x;
            _624 = _622.w;
            uint _627 = (_555 * 24u) + 16u;
            vec3 _637 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_627)).x, texelFetch(g_forceParam, int(_627 + 1u)).x, texelFetch(g_forceParam, int(_627 + 2u)).x));
            _638 = _637.x;
            _639 = _637.y;
            _640 = _637.z;
            uint _643 = (_555 * 24u) + 20u;
            vec4 _656 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_643)).x, texelFetch(g_forceParam, int(_643 + 1u)).x, texelFetch(g_forceParam, int(_643 + 2u)).x, texelFetch(g_forceParam, int(_643 + 3u)).x));
            _657 = _656.x;
            _658 = _656.y;
            _659 = _656.z;
            _660 = _656.w;
            _661 = _567.x == 1u;
            _662 = _567.y == 1u;
            _663 = _567.z == 1u;
            _664 = _332 - _585.x;
            _665 = _339 - _585.y;
            _666 = _346 - _585.z;
            _667 = _661 ? _604.x : _664;
            _668 = _661 ? _604.y : _665;
            _669 = _661 ? _604.z : _666;
            _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
            _673 = _670 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_673)
            {
                precise float _675 = _664 * _664;
                precise float _676 = _665 * _665;
                precise float _677 = _675 + _676;
                precise float _678 = _666 * _666;
                precise float _679 = _678 + _677;
                float _680 = sqrt(_679);
                float _681 = inversesqrt(_670);
                precise float _682 = _667 * _681;
                precise float _683 = _668 * _681;
                precise float _684 = _669 * _681;
                precise float _687 = _680 / (isnan(0.001000000047497451305389404296875) ? _622.y : (isnan(_622.y) ? 0.001000000047497451305389404296875 : max(_622.y, 0.001000000047497451305389404296875)));
                precise float _688 = 1.0 - _687;
                float _851 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
                float _689 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
                float _715;
                if (_663)
                {
                    float _702 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
                    precise float _703 = _664 * _702;
                    precise float _704 = _665 * _702;
                    precise float _705 = _666 * _702;
                    precise float _709 = dot(vec3(_682, _683, _684), vec3(_703, _704, _705)) * 0.800000011920928955078125;
                    precise float _711 = _709 + 0.20000000298023223876953125;
                    float _862 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
                    precise float _714 = _689 * (isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0)));
                    _715 = _714;
                }
                else
                {
                    _715 = _689;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_715 > 0.0)
                {
                    bool _718 = _661 && (!_663);
                    precise float _720 = _680 * (-4.0);
                    precise float _724 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _623 : (isnan(_623) ? 0.001000000047497451305389404296875 : max(_623, 0.001000000047497451305389404296875)));
                    precise float _726 = dot(vec2(_682, _684), vec2(_664, _666));
                    precise float _729 = _724 * _726;
                    precise float _730 = float(_718) * _729;
                    precise float _731 = _347 * _724;
                    precise float _732 = _731 - _730;
                    precise float _733 = (_718 ? 0.0 : _720) + _732;
                    precise float _735 = _608 * sin(_733);
                    precise float _736 = _683 * 0.0;
                    precise float _737 = _736 - _684;
                    precise float _738 = _684 * 0.0;
                    precise float _739 = _682 * 0.0;
                    precise float _740 = _738 - _739;
                    precise float _741 = _682 - _736;
                    precise float _742 = _624 * _735;
                    float _743 = _661 ? _742 : 0.0;
                    float _786;
                    if (_662)
                    {
                        precise float _746 = _638 * 2.0;
                        precise float _748 = _658 + _659;
                        precise float _749 = _660 + _748;
                        precise float _751 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _638 : (isnan(_638) ? 0.001000000047497451305389404296875 : max(_638, 0.001000000047497451305389404296875)));
                        precise float _752 = _657 * _751;
                        precise float _753 = (-0.0) - _682;
                        precise float _758 = dot(vec2(_684, _753), vec2(_664, _666)) / _746;
                        precise float _759 = (-0.0) - _758;
                        float _762 = fract(abs(_758));
                        precise float _763 = (-0.0) - _762;
                        precise float _765 = _746 * ((_758 >= _759) ? _762 : _763);
                        precise float _766 = _765 * 6.283184051513671875;
                        precise float _767 = _766 / _746;
                        precise float _769 = (isnan(5.0) ? _638 : (isnan(_638) ? 5.0 : min(_638, 5.0))) * sin(_767);
                        precise float _770 = _726 + _769;
                        precise float _771 = _638 * 0.25;
                        precise float _773 = _347 * _657;
                        precise float _774 = _773 - _771;
                        precise float _775 = _774 - _770;
                        precise float _776 = _657 * _749;
                        precise float _778 = _775 / (isnan(0.001000000047497451305389404296875) ? _776 : (isnan(_776) ? 0.001000000047497451305389404296875 : max(_776, 0.001000000047497451305389404296875)));
                        float _779 = fract(_778);
                        precise float _781 = 1.0 - _779;
                        float _782 = (_778 < 0.0) ? _781 : _779;
                        precise float _783 = _748 / _749;
                        precise float _784 = _658 / _749;
                        float _805;
                        if (_782 < _784)
                        {
                            precise float _803 = _782 / _784;
                            _805 = _803;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_782 < _783)
                            {
                                precise float _815 = _782 - _784;
                                precise float _816 = _783 - _784;
                                precise float _817 = _815 / _816;
                                precise float _806 = 1.0 - _817;
                                frontier_phi_14_13_ladder = _806;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _805 = frontier_phi_14_13_ladder;
                        }
                        precise float _807 = _640 * _805;
                        precise float _808 = _751 * _726;
                        precise float _809 = _347 * _752;
                        precise float _810 = _809 - _808;
                        precise float _812 = _639 + sin(_810);
                        precise float _814 = _807 * abs(_812);
                        precise float _787 = _814 + 0.0;
                        _786 = _787;
                    }
                    else
                    {
                        _786 = 0.0;
                    }
                    precise float _788 = _589 + _735;
                    precise float _789 = _788 + _786;
                    precise float _790 = _682 * _789;
                    precise float _791 = _683 * _789;
                    precise float _792 = _684 * _789;
                    precise float _793 = _737 * _743;
                    precise float _794 = _740 * _743;
                    precise float _795 = _741 * _743;
                    precise float _796 = _793 + _790;
                    precise float _797 = _794 + _791;
                    precise float _798 = _795 + _792;
                    precise float _799 = _715 * _796;
                    precise float _800 = _715 * _797;
                    precise float _801 = _715 * _798;
                    precise float _691 = _799 * 0.0500000007450580596923828125;
                    precise float _693 = _800 * 0.0500000007450580596923828125;
                    precise float _695 = _801 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _691;
                    frontier_phi_5_pred_7_ladder_1 = _693;
                    frontier_phi_5_pred_7_ladder_2 = _695;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _690 = frontier_phi_5_pred;
            _692 = frontier_phi_5_pred_1;
            _694 = frontier_phi_5_pred_2;
            _349 = _548 + _690;
            _351 = _549 + _692;
            _353 = _550 + _694;
            uint _554 = _553 + 1u;
            if (_554 == _210)
            {
                break;
            }
            else
            {
                _548 = _349;
                _549 = _351;
                _550 = _353;
                _551 = (_553 != 3u) ? (_551 >> 8u) : _208;
                _553 = _554;
                continue;
            }
        }
        _348 = _349;
        _350 = _351;
        _352 = _353;
    }
    precise float _354 = _348 * _348;
    precise float _355 = _350 * _350;
    precise float _356 = _354 + _355;
    precise float _357 = _352 * _352;
    precise float _358 = _356 + _357;
    float _359 = sqrt(_358);
    bool _360 = _359 < 0.00011000000085914507508277893066406;
    float _365 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_194].x, cbInstanceData._m0[_198].x), vec3(cbInstanceData._m0[_189].x, cbInstanceData._m0[_194].x, cbInstanceData._m0[_198].x)));
    precise float _366 = cbInstanceData._m0[_189].x * _365;
    precise float _367 = cbInstanceData._m0[_194].x * _365;
    precise float _368 = cbInstanceData._m0[_198].x * _365;
    float _372 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_194].y, cbInstanceData._m0[_198].y), vec3(cbInstanceData._m0[_189].y, cbInstanceData._m0[_194].y, cbInstanceData._m0[_198].y)));
    precise float _373 = cbInstanceData._m0[_189].y * _372;
    precise float _374 = cbInstanceData._m0[_194].y * _372;
    precise float _375 = cbInstanceData._m0[_198].y * _372;
    float _379 = inversesqrt(dot(vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_194].z, cbInstanceData._m0[_198].z), vec3(cbInstanceData._m0[_189].z, cbInstanceData._m0[_194].z, cbInstanceData._m0[_198].z)));
    precise float _380 = cbInstanceData._m0[_189].z * _379;
    precise float _381 = cbInstanceData._m0[_194].z * _379;
    precise float _382 = cbInstanceData._m0[_198].z * _379;
    precise float _383 = _366 * 0.0;
    precise float _384 = 1.0 * _373;
    precise float _385 = _384 + _383;
    precise float _386 = 0.0 * _380;
    precise float _387 = _386 + _385;
    precise float _388 = _367 * 0.0;
    precise float _389 = 1.0 * _374;
    precise float _390 = _389 + _388;
    precise float _391 = 0.0 * _381;
    precise float _392 = _391 + _390;
    precise float _393 = _368 * 0.0;
    precise float _394 = 1.0 * _375;
    precise float _395 = _394 + _393;
    precise float _396 = 0.0 * _382;
    precise float _397 = _396 + _395;
    float _401 = inversesqrt(dot(vec3(_348, _350, _352), vec3(_348, _350, _352)));
    precise float _402 = _348 * _401;
    precise float _403 = _350 * _401;
    precise float _404 = _352 * _401;
    precise float _405 = _392 * _404;
    precise float _406 = _397 * _403;
    precise float _407 = _405 - _406;
    precise float _408 = _397 * _402;
    precise float _409 = _387 * _404;
    precise float _410 = _408 - _409;
    precise float _411 = _387 * _403;
    precise float _412 = _392 * _402;
    precise float _413 = _411 - _412;
    float _417 = inversesqrt(dot(vec3(_407, _410, _413), vec3(_407, _410, _413)));
    precise float _418 = _417 * _407;
    precise float _419 = _417 * _410;
    precise float _420 = _417 * _413;
    precise float _421 = _359 + 1.0;
    precise float _423 = cbMtdParam._m0[10u].y * log2(_421);
    precise float _424 = _261 - _332;
    precise float _425 = _268 - _339;
    precise float _426 = _275 - _346;
    precise float _427 = dot(vec3(_418, _419, _420), vec3(_424, _425, _426));
    precise float _430 = _418 * _427;
    precise float _431 = _419 * _427;
    precise float _432 = _420 * _427;
    precise float _433 = _332 + _430;
    precise float _434 = _339 + _431;
    precise float _435 = _346 + _432;
    precise float _436 = _261 - _433;
    precise float _437 = _268 - _434;
    precise float _438 = _275 - _435;
    precise float _439 = _419 * _438;
    precise float _440 = _420 * _437;
    precise float _441 = _439 - _440;
    precise float _442 = _420 * _436;
    precise float _443 = _418 * _438;
    precise float _444 = _442 - _443;
    precise float _445 = _418 * _437;
    precise float _446 = _419 * _436;
    precise float _447 = _445 - _446;
    float _448 = sin(_423);
    float _449 = cos(_423);
    precise float _450 = _436 * _449;
    precise float _451 = _437 * _449;
    precise float _452 = _438 * _449;
    precise float _453 = _448 * _441;
    precise float _454 = _448 * _444;
    precise float _455 = _448 * _447;
    precise float _456 = _450 + _453;
    precise float _457 = _451 + _454;
    precise float _458 = _455 + _452;
    precise float _459 = _433 + _456;
    precise float _460 = _434 + _457;
    precise float _461 = _435 + _458;
    precise float _462 = _459 - _261;
    precise float _463 = _460 - _268;
    precise float _464 = _461 - _275;
    precise float _468 = _261 + (_360 ? 0.0 : _462);
    precise float _469 = _268 + (_360 ? 0.0 : _463);
    precise float _470 = _275 + (_360 ? 0.0 : _464);
    precise float _471 = _468 - cbSceneParam._m0[3u].x;
    precise float _472 = _469 - cbSceneParam._m0[3u].y;
    precise float _473 = _470 - cbSceneParam._m0[3u].z;
    precise float _501 = _471 * cbSceneParam._m0[24u].x;
    precise float _502 = _472 * cbSceneParam._m0[24u].y;
    precise float _503 = _502 + _501;
    precise float _504 = _473 * cbSceneParam._m0[24u].z;
    precise float _505 = _504 + _503;
    precise float _506 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _507 = _506 + _505;
    precise float _508 = _471 * cbSceneParam._m0[25u].x;
    precise float _509 = _472 * cbSceneParam._m0[25u].y;
    precise float _510 = _509 + _508;
    precise float _511 = _473 * cbSceneParam._m0[25u].z;
    precise float _512 = _511 + _510;
    precise float _513 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _514 = _513 + _512;
    precise float _515 = _471 * cbSceneParam._m0[26u].x;
    precise float _516 = _472 * cbSceneParam._m0[26u].y;
    precise float _517 = _516 + _515;
    precise float _518 = _473 * cbSceneParam._m0[26u].z;
    precise float _519 = _518 + _517;
    precise float _520 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _521 = _520 + _519;
    precise float _522 = _471 * cbSceneParam._m0[27u].x;
    precise float _523 = _472 * cbSceneParam._m0[27u].y;
    precise float _524 = _523 + _522;
    precise float _525 = _473 * cbSceneParam._m0[27u].z;
    precise float _526 = _525 + _524;
    precise float _527 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _528 = _527 + _526;
    gl_Position.x = _507;
    gl_Position.y = _514;
    gl_Position.z = _521;
    gl_Position.w = _528;
    NORMAL_1.x = fma(_171, cbObjMatrix._m0[_233].z, fma(_170, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _168));
    NORMAL_1.y = fma(_171, cbObjMatrix._m0[_240].z, fma(_170, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _168));
    NORMAL_1.z = fma(_171, cbObjMatrix._m0[_247].z, fma(_170, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _168));
    NORMAL_1.w = float(_224);
    TANGENT_1.x = fma(_183, cbObjMatrix._m0[_233].z, fma(_182, cbObjMatrix._m0[_233].y, cbObjMatrix._m0[_233].x * _181));
    TANGENT_1.y = fma(_183, cbObjMatrix._m0[_240].z, fma(_182, cbObjMatrix._m0[_240].y, cbObjMatrix._m0[_240].x * _181));
    TANGENT_1.z = fma(_183, cbObjMatrix._m0[_247].z, fma(_182, cbObjMatrix._m0[_247].y, cbObjMatrix._m0[_247].x * _181));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2 = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1 = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_7.x = _521;
    TEXCOORD_7.y = _528;
    TEXCOORD_11 = sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283));
}


