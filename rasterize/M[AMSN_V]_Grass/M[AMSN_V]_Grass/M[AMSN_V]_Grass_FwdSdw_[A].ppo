#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _872;
float _3546;
float _3547;
float _3548;
float _3549;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    float _237 = _231.w;
    vec4 _253 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3558 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    float _273 = fma(_270, _215, fma(_263, _207 * TANGENT.x, (_193 * _186) * _261));
    float _276 = fma(_270, _216, fma(_263, _207 * TANGENT.y, (_193 * _187) * _261));
    float _279 = fma(_270, _217, fma(_263, _207 * TANGENT.z, (_193 * _188) * _261));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3569 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _287 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3591 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3602 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3613 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _291 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _307 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _349 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _359 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _349);
    float _360 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _349);
    float _361 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _349);
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _359 * _365;
    float _367 = _360 * _365;
    float _368 = _361 * _365;
    vec4 _373 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _375 = _373.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _551 = sqrt(((_359 * _359) + (_360 * _360)) + (_361 * _361));
        float _557 = (cbMatDynParam._m0[5u].x * _551) + cbMatDynParam._m0[5u].y;
        float _3624 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
        float _558 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _562 = (cbMatDynParam._m0[5u].z * _551) + cbMatDynParam._m0[5u].w;
        float _3635 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) - _558)) + _558) < ((_375 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _411 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _414 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _427 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3646 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _442 = 1.0 - _291;
    float _443 = _439 * _442;
    float _444 = _440 * _442;
    float _445 = _441 * _442;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _291;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _291;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _291;
    float _453 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _468 = _465.x * TEXCOORD.z;
    float _469 = dot(vec3(_284, _285, _286), vec3(_366, _367, _368));
    float _472 = _469 * 2.0;
    float _476 = (_472 * _284) - _366;
    float _477 = (_472 * _285) - _367;
    float _478 = (_472 * _286) - _368;
    float _482 = abs(dot(vec3(_366, _367, _368), vec3(_284, _285, _286)));
    float _3679 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _484 = sqrt(_287);
    float _497 = exp2((_484 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_484 * 3.0));
    float _503 = (1.0 - _497) * ((_484 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _504 = _497 * _484;
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _871;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _596 = fma(_540, cbModelParam._m0[26u].z, fma(_536, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532));
        float _600 = fma(_540, cbModelParam._m0[27u].z, fma(_536, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532));
        float _604 = fma(_540, cbModelParam._m0[28u].z, fma(_536, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532));
        float _629 = _532 + _284;
        float _630 = _536 + _285;
        float _631 = _540 + _286;
        float _641 = fma(_631, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629)) - _596;
        float _642 = fma(_631, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629)) - _600;
        float _643 = fma(_631, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629)) - _604;
        float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
        float _660 = ((_647 * _641) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_596 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_647 * _642) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_600 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_647 * _643) / cbModelParam._m0[34u].z) + ((((((_604 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_660, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_665.x + (-0.5));
        float _701 = _699 * (_665.y + (-0.5));
        float _702 = _699 * (_665.z + (-0.5));
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_672.x + (-0.5));
        float _711 = _709 * (_672.y + (-0.5));
        float _712 = _709 * (_672.z + (-0.5));
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_679.x + (-0.5));
        float _721 = _719 * (_679.y + (-0.5));
        float _722 = _719 * (_679.z + (-0.5));
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = _700 * 0.5;
        float _737 = _710 * 0.5;
        float _738 = _720 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _753 = (dot(vec3(_284, _285, _286), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _763 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3727 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_765 + 1.0))) + _770) * _733;
        float _780 = _701 * 0.5;
        float _781 = _711 * 0.5;
        float _782 = _721 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _796 = (dot(vec3(_284, _285, _286), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _805 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3760 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_807 + 1.0))) + _812) * _734;
        float _822 = _702 * 0.5;
        float _823 = _712 * 0.5;
        float _824 = _722 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_284, _285, _286), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3793 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_849 + 1.0))) + _854) * _735;
        _871 = _702;
        _873 = _701;
        _874 = _700;
        _875 = _712;
        _876 = _711;
        _877 = _710;
        _878 = _722;
        _879 = _721;
        _880 = _720;
        _881 = _735;
        _882 = _734;
        _883 = _733;
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
    }
    else
    {
        _871 = _872;
        _873 = _872;
        _874 = _872;
        _875 = _872;
        _876 = _872;
        _877 = _872;
        _878 = _872;
        _879 = _872;
        _880 = _872;
        _881 = _872;
        _882 = _872;
        _883 = _872;
        _884 = 0.0;
        _885 = 0.0;
        _886 = 0.0;
    }
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _915 = fma(_540, cbModelParam._m0[30u].z, fma(_536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _532));
        float _919 = fma(_540, cbModelParam._m0[31u].z, fma(_536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _532));
        float _923 = fma(_540, cbModelParam._m0[32u].z, fma(_536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _532));
        float _946 = _532 + _284;
        float _947 = _536 + _285;
        float _948 = _540 + _286;
        float _958 = fma(_948, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946)) - _915;
        float _959 = fma(_948, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946)) - _919;
        float _960 = fma(_948, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946)) - _923;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_915 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_919 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[35u].z) + ((((((_923 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1014 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_981.x + (-0.5));
        float _1016 = _1014 * (_981.y + (-0.5));
        float _1017 = _1014 * (_981.z + (-0.5));
        float _1024 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_988.x + (-0.5));
        float _1026 = _1024 * (_988.y + (-0.5));
        float _1027 = _1024 * (_988.z + (-0.5));
        float _1034 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_995.x + (-0.5));
        float _1036 = _1034 * (_995.y + (-0.5));
        float _1037 = _1034 * (_995.z + (-0.5));
        float _1044 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1002.x + (-0.5));
        float _1046 = _1044 * (_1002.y + (-0.5));
        float _1047 = _1044 * (_1002.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_284, _285, _286), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3856 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1078 + 1.0))) + _1083) * _1048;
        float _1093 = _1016 * 0.5;
        float _1094 = _1026 * 0.5;
        float _1095 = _1036 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_284, _285, _286), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3889 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1120 + 1.0))) + _1125) * _1049;
        float _1135 = _1017 * 0.5;
        float _1136 = _1027 * 0.5;
        float _1137 = _1037 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_284, _285, _286), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3922 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1162 + 1.0))) + _1167) * _1050;
        _1184 = _1017;
        _1185 = _1016;
        _1186 = _1015;
        _1187 = _1027;
        _1188 = _1026;
        _1189 = _1025;
        _1190 = _1037;
        _1191 = _1036;
        _1192 = _1035;
        _1193 = _1050;
        _1194 = _1049;
        _1195 = _1048;
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
    }
    else
    {
        _1184 = _872;
        _1185 = _872;
        _1186 = _872;
        _1187 = _872;
        _1188 = _872;
        _1189 = _872;
        _1190 = _872;
        _1191 = _872;
        _1192 = _872;
        _1193 = _872;
        _1194 = _872;
        _1195 = _872;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _884)) + _884;
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _885)) + _885;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _886)) + _886;
    float _1231 = fma(_1210, cbSceneParam._m0[89u].z, fma(_1209, cbSceneParam._m0[89u].y, _1208 * cbSceneParam._m0[89u].x));
    float _1234 = fma(_1210, cbSceneParam._m0[90u].z, fma(_1209, cbSceneParam._m0[90u].y, _1208 * cbSceneParam._m0[90u].x));
    float _1237 = fma(_1210, cbSceneParam._m0[91u].z, fma(_1209, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1208));
    float _1252 = _476 * 0.5;
    float _1253 = _477 * 0.5;
    float _1254 = _478 * 0.5;
    float _1255 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1258 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1261 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1295;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1268 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_871, _875, _878, _881));
        float _1272 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_873, _876, _879, _882));
        float _1276 = dot(vec4(_1252, _1253, _1254, 1.0), vec4(_874, _877, _880, _883));
        float _1283 = dot(vec4(cbModelParam._m0[39u]), vec4(_1252, _1253, _1254, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1306;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1297 = dot(vec4(cbModelParam._m0[40u]), vec4(_1252, _1253, _1254, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1297) ? 0.0 : (isnan(0.0) ? _1297 : max(0.0, _1297))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1310 = (_1306 * cbModelParam._m0[1u].x) + (_1295 * (1.0 - cbModelParam._m0[1u].x));
    float _1320 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1321 = isnan(_1320) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1320 : min(cbModelParam._m0[25u].z, _1320));
    float _1403;
    float _1405;
    float _1407;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1370 = fma(_540, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _532)) + cbModelParam._m0[13u].w;
        float _1374 = fma(_540, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _532)) + cbModelParam._m0[14u].w;
        float _1378 = fma(_540, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _532)) + cbModelParam._m0[15u].w;
        float _1381 = fma(_478, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476));
        float _1384 = fma(_478, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476));
        float _1387 = fma(_478, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476));
        float _1415;
        if (_1381 > 0.0)
        {
            _1415 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1415 = frontier_phi_19_17_ladder;
        }
        float _1591;
        if (_1384 > 0.0)
        {
            _1591 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1591 = frontier_phi_28_24_ladder;
        }
        float _1887;
        if (_1387 > 0.0)
        {
            _1887 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1887 = frontier_phi_40_35_ladder;
        }
        float _1889 = isnan(_1591) ? _1415 : (isnan(_1415) ? _1591 : min(_1415, _1591));
        float _1890 = isnan(_1887) ? _1889 : (isnan(_1889) ? _1887 : min(_1889, _1887));
        float _1894 = (_1890 * _1381) + _1370;
        float _1895 = (_1890 * _1384) + _1374;
        float _1896 = (_1890 * _1387) + _1378;
        float _1897 = _1890 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1897;
        float _1901 = _1897 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 > _1901) || ((_1895 < _1899) || ((_1894 < _1899) || (_1894 > _1901))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1896, cbModelParam._m0[9u].z, fma(_1895, cbModelParam._m0[9u].y, _1894 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1896, cbModelParam._m0[10u].z, fma(_1895, cbModelParam._m0[10u].y, _1894 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1896, cbModelParam._m0[11u].z, fma(_1895, cbModelParam._m0[11u].y, _1894 * cbModelParam._m0[11u].x))), _1321);
            frontier_phi_18_40_ladder = _2041.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2041.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2041.x * cbModelParam._m0[1u].y;
        }
        _1403 = frontier_phi_18_40_ladder_2;
        _1405 = frontier_phi_18_40_ladder_1;
        _1407 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_476, _477, _478), _1321);
        _1403 = _1391.x * cbModelParam._m0[1u].y;
        _1405 = _1391.y * cbModelParam._m0[1u].y;
        _1407 = _1391.z * cbModelParam._m0[1u].y;
    }
    float _1411 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1411 : min(cbModelParam._m0[25u].w, _1411));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1469 = fma(_540, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _532)) + cbModelParam._m0[21u].w;
        float _1473 = fma(_540, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _532)) + cbModelParam._m0[22u].w;
        float _1477 = fma(_540, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _532)) + cbModelParam._m0[23u].w;
        float _1480 = fma(_478, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476));
        float _1483 = fma(_478, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476));
        float _1486 = fma(_478, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476));
        float _1596;
        if (_1480 > 0.0)
        {
            _1596 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1596 = frontier_phi_30_26_ladder;
        }
        float _1914;
        if (_1483 > 0.0)
        {
            _1914 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1914 = frontier_phi_42_37_ladder;
        }
        float _2252;
        if (_1486 > 0.0)
        {
            _2252 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2252 = frontier_phi_52_49_ladder;
        }
        float _2254 = isnan(_1914) ? _1596 : (isnan(_1596) ? _1914 : min(_1596, _1914));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1480) + _1469;
        float _2260 = (_2255 * _1483) + _1473;
        float _2261 = (_2255 * _1486) + _1477;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1412);
            frontier_phi_27_52_ladder = _2383.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2383.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2383.x * cbModelParam._m0[1u].z;
        }
        _1505 = frontier_phi_27_52_ladder_2;
        _1507 = frontier_phi_27_52_ladder_1;
        _1509 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_476, _477, _478), _1412);
        _1505 = _1489.x * cbModelParam._m0[1u].z;
        _1507 = _1489.y * cbModelParam._m0[1u].z;
        _1509 = _1489.z * cbModelParam._m0[1u].z;
    }
    float _1522 = (((_503 * _453) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1524 = (((_503 * _455) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1507 - _1405)) + _1405);
    float _1526 = (((_503 * _456) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1509 - _1407)) + _1407);
    float _1529 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1583 = _1570 / _1582;
    float _1584 = _1574 / _1582;
    float _1585 = _1578 / _1582;
    float _1732;
    float _1733;
    float _1734;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1612 = ((uint(_1585 > cbSceneParam._m0[59u].y) + uint(_1585 > cbSceneParam._m0[59u].x)) + uint(_1585 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1613 = _1612 + 43u;
        uint _1621 = _1612 + 44u;
        uint _1629 = _1612 + 45u;
        uint _1637 = _1612 + 46u;
        float _1648 = fma(_1582, cbSceneParam._m0[_1613].w, fma(_1578, cbSceneParam._m0[_1613].z, fma(_1574, cbSceneParam._m0[_1613].y, _1570 * cbSceneParam._m0[_1613].x)));
        float _1652 = fma(_1582, cbSceneParam._m0[_1621].w, fma(_1578, cbSceneParam._m0[_1621].z, fma(_1574, cbSceneParam._m0[_1621].y, _1570 * cbSceneParam._m0[_1621].x)));
        float _1660 = fma(_1582, cbSceneParam._m0[_1637].w, fma(_1578, cbSceneParam._m0[_1637].z, fma(_1574, cbSceneParam._m0[_1637].y, _1570 * cbSceneParam._m0[_1637].x)));
        float _1665 = cbSceneParam._m0[33u].z * _1660;
        float _1667 = cbSceneParam._m0[33u].w * _1660;
        float _1670 = fma(_1582, cbSceneParam._m0[_1629].w, fma(_1578, cbSceneParam._m0[_1629].z, fma(_1574, cbSceneParam._m0[_1629].y, _1570 * cbSceneParam._m0[_1629].x))) / _1660;
        float _1718 = (cbSceneParam._m0[33u].x - sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585))) * cbSceneParam._m0[33u].y;
        float _4048 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1725 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 + _1648) / _1660, (_1667 + _1652) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1667 + _1648) / _1660, (_1652 - _1665) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 - _1665) / _1660, (_1652 - _1667) / _1660), _1670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1648 - _1667) / _1660, (_1665 + _1652) / _1660), _1670), 0.0)).x), vec4(0.25)));
        _1732 = 1.0 - (_1725 * cbSceneParam._m0[34u].x);
        _1733 = 1.0 - (_1725 * cbSceneParam._m0[34u].y);
        _1734 = 1.0 - (_1725 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1732 = 1.0;
        _1733 = 1.0;
        _1734 = 1.0;
    }
    float _1798;
    float _1800;
    float _1802;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1786 = fma(_1582, cbSceneParam._m0[63u].w, fma(_1578, cbSceneParam._m0[63u].z, fma(_1574, cbSceneParam._m0[63u].y, _1570 * cbSceneParam._m0[63u].x)));
        float _1787 = fma(_1582, cbSceneParam._m0[60u].w, fma(_1578, cbSceneParam._m0[60u].z, fma(_1574, cbSceneParam._m0[60u].y, _1570 * cbSceneParam._m0[60u].x))) / _1786;
        float _1788 = fma(_1582, cbSceneParam._m0[61u].w, fma(_1578, cbSceneParam._m0[61u].z, fma(_1574, cbSceneParam._m0[61u].y, _1570 * cbSceneParam._m0[61u].x))) / _1786;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1787 >= cbSceneParam._m0[64u].x) && (_1788 >= cbSceneParam._m0[64u].y)) && (_1787 <= cbSceneParam._m0[64u].z)) && (_1788 <= cbSceneParam._m0[64u].w))
        {
            float _1927 = fma(_1582, cbSceneParam._m0[62u].w, fma(_1578, cbSceneParam._m0[62u].z, fma(_1574, cbSceneParam._m0[62u].y, _1570 * cbSceneParam._m0[62u].x))) / _1786;
            float _1931 = isnan(cbSceneParam._m0[41u].w) ? _1927 : (isnan(_1927) ? cbSceneParam._m0[41u].w : max(_1927, cbSceneParam._m0[41u].w));
            float _1974 = (cbSceneParam._m0[33u].x - sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585))) * cbSceneParam._m0[33u].y;
            float _4064 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
            float _1981 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1787, cbSceneParam._m0[33u].w + _1788), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1787, _1788 - cbSceneParam._m0[33u].z), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1787 - cbSceneParam._m0[33u].z, _1788 - cbSceneParam._m0[33u].w), _1931), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1787 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1788), _1931), 0.0)).x), vec4(0.25)));
            float _1985 = 1.0 - (_1981 * cbSceneParam._m0[34u].x);
            float _1986 = 1.0 - (_1981 * cbSceneParam._m0[34u].y);
            float _1987 = 1.0 - (_1981 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1986) ? _1733 : (isnan(_1733) ? _1986 : min(_1733, _1986));
            frontier_phi_39_38_ladder_1 = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
            frontier_phi_39_38_ladder_2 = isnan(_1987) ? _1734 : (isnan(_1734) ? _1987 : min(_1734, _1987));
        }
        else
        {
            frontier_phi_39_38_ladder = _1733;
            frontier_phi_39_38_ladder_1 = _1732;
            frontier_phi_39_38_ladder_2 = _1734;
        }
        _1798 = frontier_phi_39_38_ladder_1;
        _1800 = frontier_phi_39_38_ladder;
        _1802 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1798 = _1732;
        _1800 = _1733;
        _1802 = _1734;
    }
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1817 = _468 + (-1.0);
    float _1822 = (cbLight._m0[_1810].x * _1817) + 1.0;
    float _1823 = (cbLight._m0[_1810].y * _1817) + 1.0;
    float _1824 = (cbLight._m0[_1810].z * _1817) + 1.0;
    float _1825 = (cbLight._m0[_1810].w * _1817) + 1.0;
    uint _1826 = _1809 + 5u;
    float _1832 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1836 = _1809 + 4u;
    float _1846 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1850 = _1809 | 1u;
    float _1861 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_284, _285, _286));
    float _1864 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_284, _285, _286));
    float _4100 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _4111 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1871 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1878 = ((cbLight._m0[_1826].x * _1832) * _1871) + (((cbLight._m0[_1836].x * _1798) * _1846) * _1869);
    float _1879 = ((_1832 * cbLight._m0[_1826].y) * _1871) + (((cbLight._m0[_1836].y * _1800) * _1846) * _1869);
    float _1880 = ((_1832 * cbLight._m0[_1826].z) * _1871) + (((cbLight._m0[_1836].z * _1802) * _1846) * _1869);
    uvec4 _1884 = floatBitsToUint(cbLight._m0[_1809 + 12u]);
    bool _1886 = _1884.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1886)
    {
        _1988 = _1878;
        _1990 = _1879;
        _1992 = _1880;
    }
    else
    {
        uint _1996 = _1809 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1809 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4122 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2015 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1878;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1879;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1880;
    }
    bool _1995 = _1884.y == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_1995)
    {
        _2050 = _1988;
        _2052 = _1990;
        _2054 = _1992;
    }
    else
    {
        uint _2223 = _1809 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1809 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4138 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2242 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2050 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _1988;
        _2052 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _1990;
        _2054 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _1992;
    }
    uint _2057 = _1809 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _287) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1809].x + _366;
    float _2073 = cbLight._m0[_1809].y + _367;
    float _2074 = cbLight._m0[_1809].z + _368;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1809].xyz));
    float _4154 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2086 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2087 = dot(vec3(_284, _285, _286), vec3(_2079, _2080, _2081));
    float _4176 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2079, _2080, _2081));
    float _4187 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
    float _2108 = 0.959999978542327880859375 - _450;
    float _2110 = 0.959999978542327880859375 - _451;
    float _2111 = 0.959999978542327880859375 - _452;
    float _2118 = 1.0 - _2071;
    float _2129 = (0.5 / (((_2086 * ((_2085 * _2118) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2118) + _2071) * _2085))) * _2085;
    float _4198 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2145 = _1809 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _287) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1850].x + _366;
    float _2159 = cbLight._m0[_1850].y + _367;
    float _2160 = cbLight._m0[_1850].z + _368;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1850].xyz));
    float _4209 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2172 = dot(vec3(_284, _285, _286), vec3(_2165, _2166, _2167));
    float _4220 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2165, _2166, _2167));
    float _4231 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2086 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2198) + _2157) * _2171))) * _2171;
    float _4242 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2108) + _453) * cbLight._m0[_2145].x) * _2210) * _1832) + ((((cbLight._m0[_2057].x * _1798) * ((_2107 * _2108) + _453)) * _2131) * _1846);
    float _2221 = (((((_2191 * _2110) + _455) * cbLight._m0[_2145].y) * _2210) * _1832) + ((((cbLight._m0[_2057].y * _1800) * ((_2107 * _2110) + _455)) * _2131) * _1846);
    float _2222 = (((((_2191 * _2111) + _456) * cbLight._m0[_2145].z) * _2210) * _1832) + ((((cbLight._m0[_2057].z * _1802) * ((_2107 * _2111) + _456)) * _2131) * _1846);
    float _2278;
    float _2280;
    float _2282;
    if (_1886)
    {
        _2278 = _2220;
        _2280 = _2221;
        _2282 = _2222;
    }
    else
    {
        uint _2284 = _1809 + 2u;
        uint _2288 = _1809 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _287) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _366;
        float _2305 = cbLight._m0[_2284].y + _367;
        float _2306 = cbLight._m0[_2284].z + _368;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2284].xyz));
        float _4253 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2318 = dot(vec3(_284, _285, _286), vec3(_2311, _2312, _2313));
        float _4264 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4275 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2086 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2344) + _2303) * _2317))) * _2317;
        float _4286 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2278 = (((((_2337 * _2108) + _453) * cbLight._m0[_2288].x) * _2356) * _2357) + _2220;
        _2280 = (((((_2337 * _2110) + _455) * cbLight._m0[_2288].y) * _2356) * _2357) + _2221;
        _2282 = (((((_2337 * _2111) + _456) * cbLight._m0[_2288].z) * _2356) * _2357) + _2222;
    }
    float _2388;
    float _2390;
    float _2392;
    if (_1995)
    {
        _2388 = _2278;
        _2390 = _2280;
        _2392 = _2282;
    }
    else
    {
        uint _2399 = _1809 + 3u;
        uint _2403 = _1809 + 11u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _287) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _366;
        float _2420 = cbLight._m0[_2399].y + _367;
        float _2421 = cbLight._m0[_2399].z + _368;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2399].xyz));
        float _4302 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2433 = dot(vec3(_284, _285, _286), vec3(_2426, _2427, _2428));
        float _4313 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4324 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
        float _2459 = 1.0 - _2418;
        float _2469 = (0.5 / (((_2086 * ((_2432 * _2459) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2459) + _2418) * _2432))) * _2432;
        float _4335 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2388 = (((((_2452 * _2108) + _453) * cbLight._m0[_2403].x) * _2471) * _2472) + _2278;
        _2390 = (((((_2452 * _2110) + _455) * cbLight._m0[_2403].y) * _2471) * _2472) + _2280;
        _2392 = (((((_2452 * _2111) + _456) * cbLight._m0[_2403].z) * _2471) * _2472) + _2282;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1807.y == 0u)
    {
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2494)));
        float _2515 = (log2(_1585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
        }
        else
        {
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            uint _2762 = 0u;
            uint _2771;
            bool _2772;
            for (;;)
            {
                _2771 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                _2772 = _2771 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2772)
                {
                    frontier_phi_73_pred = _2761;
                    frontier_phi_73_pred_1 = _2760;
                    frontier_phi_73_pred_2 = _2759;
                    frontier_phi_73_pred_3 = _2758;
                    frontier_phi_73_pred_4 = _2757;
                    frontier_phi_73_pred_5 = _2756;
                }
                else
                {
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    uint _2907;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2771;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2911 = uint(findLSB(_2907)) + (_2762 << 5u);
                        uint _2908 = (_2907 + 4294967295u) & _2907;
                        uint _2913 = _2911 * 48u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2933 = (_2911 * 48u) + 4u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2952 = (_2911 * 48u) + 8u;
                        vec3 _2963 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x));
                        float _2967 = _2927.x - _1583;
                        float _2968 = _2927.y - _1584;
                        float _2969 = _2927.z - _1585;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_408, _411, _414), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2927.w);
                        float _4361 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _2984 = sqrt(_2970) * _2946.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2977) + _2988;
                        float _2994 = _2984 * _2984;
                        float _2998 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2983) / ((_2994 * 0.699999988079071044921875) + 1.0);
                        float _3002 = (-0.0) - _1583;
                        float _3003 = (-0.0) - _1584;
                        float _3004 = (-0.0) - _1585;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3018 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _484;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3009 + _2974;
                        float _3030 = _3010 + _2975;
                        float _3031 = _3011 + _2976;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_408, _411, _414), vec3(_3009, _3010, _3011));
                        float _4377 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3043 = dot(vec3(_408, _411, _414), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4388 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2987 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2977) + _3052;
                        float _4399 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4410 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3050 * _3050) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2831 = (_2998 * _2946.x) + _2904;
                        _2832 = (_2998 * _2946.y) + _2905;
                        _2833 = (_2998 * _2946.z) + _2906;
                        _2828 = (_3078 * _2963.x) + _2901;
                        _2829 = (_3078 * _2963.y) + _2902;
                        _2830 = (_3078 * _2963.z) + _2903;
                        if (_2908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2908;
                        }
                    }
                    frontier_phi_73_pred = _2833;
                    frontier_phi_73_pred_1 = _2832;
                    frontier_phi_73_pred_2 = _2831;
                    frontier_phi_73_pred_3 = _2830;
                    frontier_phi_73_pred_4 = _2829;
                    frontier_phi_73_pred_5 = _2828;
                }
                _2615 = frontier_phi_73_pred;
                _2613 = frontier_phi_73_pred_1;
                _2611 = frontier_phi_73_pred_2;
                _2609 = frontier_phi_73_pred_3;
                _2607 = frontier_phi_73_pred_4;
                _2605 = frontier_phi_73_pred_5;
                uint _2763 = _2762 + 1u;
                if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2756 = _2605;
                    _2757 = _2607;
                    _2758 = _2609;
                    _2759 = _2611;
                    _2760 = _2613;
                    _2761 = _2615;
                    _2762 = _2763;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
        }
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.z;
        uint _2621 = (_2619 >> 8u) & 15u;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((4294967295u << _2621) & _2525) == 0u)
        {
            _2724 = _2604;
            _2726 = _2606;
            _2728 = _2608;
            _2730 = _2610;
            _2732 = _2612;
            _2734 = _2614;
        }
        else
        {
            float _2749 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
            float _2750 = _2749 * _1583;
            float _2751 = _2749 * _1584;
            float _2752 = _2749 * _1585;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2621 < ((_2619 >> 12u) & 15u))
            {
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2884 = _2604;
                float _2885 = _2606;
                float _2886 = _2608;
                float _2887 = _2610;
                float _2888 = _2612;
                float _2889 = _2614;
                uint _2890 = _2621;
                uint _2899;
                bool _2900;
                for (;;)
                {
                    _2899 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                    _2900 = _2899 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2900)
                    {
                        frontier_phi_84_pred = _2888;
                        frontier_phi_84_pred_1 = _2887;
                        frontier_phi_84_pred_2 = _2886;
                        frontier_phi_84_pred_3 = _2885;
                        frontier_phi_84_pred_4 = _2884;
                        frontier_phi_84_pred_5 = _2889;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3105 = _2884;
                        float _3106 = _2885;
                        float _3107 = _2886;
                        float _3108 = _2887;
                        float _3109 = _2888;
                        float _3110 = _2889;
                        uint _3111 = _2899;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3181;
                        vec4 _3197;
                        float _3244;
                        bool _3245;
                        for (;;)
                        {
                            uint _3122 = ((_2890 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3168 = (_3122 * 40u) + 16u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3122 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3122 * 40u) + 24u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3219 = (_3122 * 40u) + 28u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3244 = fma(_1585, _3232.z, fma(_1584, _3232.y, _3232.x * _1583)) + _3232.w;
                            _3245 = !((fma(_1585, _3213.z, fma(_1584, _3213.y, _3213.x * _1583)) + _3213.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3245)
                            {
                                float _3272 = _3137.x - _1583;
                                float _3273 = _3137.y - _1584;
                                float _3274 = _3137.z - _1585;
                                float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                                float _3278 = inversesqrt(_3275);
                                float _3279 = _3278 * _3272;
                                float _3280 = _3278 * _3273;
                                float _3281 = _3278 * _3274;
                                float _3285 = 1.0 - (_3275 / (_3138 * _3138));
                                float _4421 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3290 = sqrt(_3275) * _3153.w;
                                float _3292 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                                float _3293 = _3292 * _3292;
                                float _3296 = ((1.0 - _3293) * dot(vec3(_3279, _3280, _3281), vec3(_408, _411, _414))) + _3293;
                                float _3299 = _3290 * _3290;
                                float _3303 = (fma(_1585, _3181.z, fma(_1584, _3181.y, _3181.x * _1583)) + _3181.w) / _3244;
                                float _3304 = (fma(_1585, _3197.z, fma(_1584, _3197.y, _3197.x * _1583)) + _3197.w) / _3244;
                                float _3308 = 1.0 - dot(vec2(_3303, _3304), vec2(_3303, _3304));
                                float _4437 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3310 = _3309 * (((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3286) / ((_3299 * 0.699999988079071044921875) + 1.0));
                                float _3322 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                                float _3323 = 1.0 - _484;
                                float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                                float _3331 = _3330 * _3330;
                                float _3332 = _3331 * _3331;
                                float _3333 = _3279 - _2750;
                                float _3334 = _3280 - _2751;
                                float _3335 = _3281 - _2752;
                                float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                                float _3343 = dot(vec3(_408, _411, _414), vec3((-0.0) - _2750, (-0.0) - _2751, (-0.0) - _2752));
                                float _4448 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3347 = dot(vec3(_408, _411, _414), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                                float _4459 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                                float _3355 = _3292 * _3331;
                                float _3356 = _3355 * _3355;
                                float _3362 = ((1.0 - _3356) * dot(vec3(_408, _411, _414), vec3(_3279, _3280, _3281))) + _3356;
                                float _4470 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3364 = 1.0 - _3331;
                                float _3374 = (0.5 / (((_3363 * ((_3346 * _3364) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3331) * _3346))) * _3363;
                                float _4481 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3384 = (_3309 * _3286) * (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3354 * _3354) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3310 * _3153.y;
                                frontier_phi_90_pred_1 = _3310 * _3153.x;
                                frontier_phi_90_pred_2 = _3384 * _3165.z;
                                frontier_phi_90_pred_3 = _3384 * _3165.y;
                                frontier_phi_90_pred_4 = _3384 * _3165.x;
                                frontier_phi_90_pred_5 = _3310 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3392 = frontier_phi_90_pred;
                            _3391 = frontier_phi_90_pred_1;
                            _3390 = frontier_phi_90_pred_2;
                            _3389 = frontier_phi_90_pred_3;
                            _3388 = frontier_phi_90_pred_4;
                            _3393 = frontier_phi_90_pred_5;
                            _3095 = _3391 + _3108;
                            _3096 = _3392 + _3109;
                            _3097 = _3393 + _3110;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3096;
                        frontier_phi_84_pred_1 = _3095;
                        frontier_phi_84_pred_2 = _3094;
                        frontier_phi_84_pred_3 = _3093;
                        frontier_phi_84_pred_4 = _3092;
                        frontier_phi_84_pred_5 = _3097;
                    }
                    _2733 = frontier_phi_84_pred;
                    _2731 = frontier_phi_84_pred_1;
                    _2729 = frontier_phi_84_pred_2;
                    _2727 = frontier_phi_84_pred_3;
                    _2725 = frontier_phi_84_pred_4;
                    _2735 = frontier_phi_84_pred_5;
                    uint _2891 = _2890 + 1u;
                    if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2884 = _2725;
                        _2885 = _2727;
                        _2886 = _2729;
                        _2887 = _2731;
                        _2888 = _2733;
                        _2889 = _2735;
                        _2890 = _2891;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2735;
                frontier_phi_65_66_ladder_1 = _2731;
                frontier_phi_65_66_ladder_2 = _2733;
                frontier_phi_65_66_ladder_3 = _2727;
                frontier_phi_65_66_ladder_4 = _2725;
                frontier_phi_65_66_ladder_5 = _2729;
            }
            else
            {
                frontier_phi_65_66_ladder = _2614;
                frontier_phi_65_66_ladder_1 = _2610;
                frontier_phi_65_66_ladder_2 = _2612;
                frontier_phi_65_66_ladder_3 = _2606;
                frontier_phi_65_66_ladder_4 = _2604;
                frontier_phi_65_66_ladder_5 = _2608;
            }
            _2724 = frontier_phi_65_66_ladder_4;
            _2726 = frontier_phi_65_66_ladder_3;
            _2728 = frontier_phi_65_66_ladder_5;
            _2730 = frontier_phi_65_66_ladder_1;
            _2732 = frontier_phi_65_66_ladder_2;
            _2734 = frontier_phi_65_66_ladder;
        }
        float _2739 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2537 = (_2739 * _2730) + _2050;
        _2539 = (_2739 * _2732) + _2052;
        _2541 = (_2739 * _2734) + _2054;
        _2543 = ((_2724 * _453) * _2739) + _2388;
        _2545 = ((_2726 * _455) * _2739) + _2390;
        _2547 = ((_2728 * _456) * _2739) + _2392;
    }
    else
    {
        _2537 = _2050;
        _2539 = _2052;
        _2541 = _2054;
        _2543 = _2388;
        _2545 = _2390;
        _2547 = _2392;
    }
    float _4497 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4508 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4519 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _2564 = ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2537 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _468))) + ((_2543 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1310)) * cbPerFrame._m0[3u].x);
    float _2565 = ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2539 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _468))) + ((_2545 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1310)) * cbPerFrame._m0[3u].x);
    float _2566 = ((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2541 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _468))) + ((_2547 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1310)) * cbPerFrame._m0[3u].x);
    uint _2567 = _427 + 6u;
    float _2575 = _387 / cbSceneParam._m0[86u].x;
    float _2576 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _307 : (isnan(_307) ? cbSceneParam._m0[77u].w : min(_307, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_307 > cbSceneParam._m0[78u].w)
    {
        float _2629 = isnan(_307) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _307 : min(cbSceneParam._m0[80u].w, _307));
        float _2630 = _2629 / _307;
        float _2641 = _2630 * _359;
        float _2642 = _360 * _2630;
        float _2643 = (-0.0) - _2642;
        float _2644 = _2630 * _361;
        float _2646 = (cbSceneParam._m0[77u].w * _2643) / _2629;
        float _2647 = _2646 + cbSceneParam._m0[79u].w;
        float _2648 = cbSceneParam._m0[79u].w - _2642;
        float _2654 = sqrt(((_2641 * _2641) + (_2642 * _2642)) + (_2644 * _2644));
        float _2657 = (1.0 - (cbSceneParam._m0[77u].w / _2629)) * _2654;
        float _2662 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2664 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2643 - _2646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2647 > 0.0) ? exp2(_2662 * _2647) : (2.0 - exp2(_2664 * _2647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2657;
        }
        else
        {
            float _2785 = 1.0 / cbSceneParam._m0[80u].x;
            float _2786 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : max(_2647, _2648));
            float _2787 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : min(_2647, _2648));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            _2841 = ((abs(_2654 / _2643) * cbSceneParam._m0[80u].y) * ((((_2796 - _2797) * 2.0) - ((exp2(_2662 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0)))) - exp2(_2662 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))))) * _2785)) - ((exp2(_2664 * _2796) - exp2(_2664 * _2797)) * _2785))) + (_2657 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2595);
        _2666 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2668 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2670 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2672 = _2852 * _2595;
    }
    else
    {
        _2666 = _2592;
        _2668 = _2593;
        _2670 = _2594;
        _2672 = _2595;
    }
    bool _2879;
    vec4 _2682;
    vec4 _2704;
    float _2706;
    float _2710;
    float _2711;
    float _2712;
    float _2713;
    bool _2723;
    for (;;)
    {
        _2682 = cbMatDynParam._m0[0u];
        float _2684 = roundEven(_2682.y);
        bool _2685 = _2684 == 3.0;
        float _2686 = log2(_2672);
        float _2693 = exp2(_2686 * cbSceneParam._m0[78u].x) * _2564;
        float _2694 = exp2(_2686 * cbSceneParam._m0[78u].y) * _2565;
        float _2695 = exp2(_2686 * cbSceneParam._m0[78u].z) * _2566;
        float _2702 = _375 + (-0.5);
        _2704 = cbMtdParam._m0[1u];
        _2706 = _2704.y * _2702;
        float _2709 = (_2684 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2710 = _2709 * (_2685 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2666)));
        _2711 = _2709 * (_2685 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2668)));
        _2712 = _2709 * (_2685 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2670)));
        _2713 = _2702 * 0.999000012874603271484375;
        _2723 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2723)
        {
            if ((cbInstanceData._m0[_427 + 7u].x + _2713) < 0.5)
            {
                _2879 = true;
                break;
            }
        }
        uint _2820 = _429 + uint(_2682.w);
        if ((cbInstanceData._m0[_2820].w < 1.0) && ((cbInstanceData._m0[_2820].w + _2713) < 0.5))
        {
            _2879 = true;
            break;
        }
        if ((_2706 + _237) < _2704.x)
        {
            _2879 = true;
            break;
        }
        _2879 = false;
        break;
    }
    float _3083;
    if (_2879)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = cbInstanceData._m0[_2567].w;
    }
    SV_Target.x = _2710;
    SV_Target.y = _2711;
    SV_Target.z = _2712;
    SV_Target.w = _3083;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
    discard_exit();
}


