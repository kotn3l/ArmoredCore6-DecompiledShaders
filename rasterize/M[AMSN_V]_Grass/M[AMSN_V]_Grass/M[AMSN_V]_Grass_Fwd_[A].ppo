#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _868;
float _3259;
float _3260;
float _3261;
float _3262;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _227 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _227.x;
    float _231 = _227.y;
    float _232 = _227.z;
    float _233 = _227.w;
    vec4 _249 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3271 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))));
    float _269 = fma(_266, _211, fma(_259, _203 * TANGENT.x, (_189 * _182) * _257));
    float _272 = fma(_266, _212, fma(_259, _203 * TANGENT.y, (_189 * _183) * _257));
    float _275 = fma(_266, _213, fma(_259, _203 * TANGENT.z, (_189 * _184) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3282 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _283 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3304 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3315 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3326 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _287 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _303 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _355 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _345);
    float _356 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _345);
    float _357 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _345);
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _355 * _361;
    float _363 = _356 * _361;
    float _364 = _357 * _361;
    vec4 _369 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _371 = _369.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_355 * _355) + (_356 * _356)) + (_357 * _357));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _3337 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _3348 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) - _554)) + _554) < ((_371 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _404 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _407 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _410 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _423 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _423 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3359 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _438 = 1.0 - _287;
    float _439 = _435 * _438;
    float _440 = _436 * _438;
    float _441 = _437 * _438;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _287;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _287;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _287;
    float _449 = _446 + 0.039999999105930328369140625;
    float _451 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    vec4 _461 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _464 = _461.x * TEXCOORD.z;
    float _465 = dot(vec3(_280, _281, _282), vec3(_362, _363, _364));
    float _468 = _465 * 2.0;
    float _472 = (_468 * _280) - _362;
    float _473 = (_468 * _281) - _363;
    float _474 = (_468 * _282) - _364;
    float _478 = abs(dot(vec3(_362, _363, _364), vec3(_280, _281, _282)));
    float _3392 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _480 = sqrt(_283);
    float _493 = exp2((_480 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_480 * 3.0));
    float _499 = (1.0 - _493) * ((_480 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _500 = _493 * _480;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528));
        float _596 = fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528));
        float _600 = fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528));
        float _625 = _528 + _280;
        float _626 = _532 + _281;
        float _627 = _536 + _282;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(_280, _281, _282), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3440 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_280, _281, _282), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3473 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_280, _281, _282), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3506 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _869 = _697;
        _870 = _696;
        _871 = _708;
        _872 = _707;
        _873 = _706;
        _874 = _718;
        _875 = _717;
        _876 = _716;
        _877 = _731;
        _878 = _730;
        _879 = _729;
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _868;
        _869 = _868;
        _870 = _868;
        _871 = _868;
        _872 = _868;
        _873 = _868;
        _874 = _868;
        _875 = _868;
        _876 = _868;
        _877 = _868;
        _878 = _868;
        _879 = _868;
        _880 = 0.0;
        _881 = 0.0;
        _882 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528));
        float _915 = fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528));
        float _919 = fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528));
        float _942 = _528 + _280;
        float _943 = _532 + _281;
        float _944 = _536 + _282;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_280, _281, _282), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3569 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_280, _281, _282), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3602 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_280, _281, _282), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3635 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _868;
        _1181 = _868;
        _1182 = _868;
        _1183 = _868;
        _1184 = _868;
        _1185 = _868;
        _1186 = _868;
        _1187 = _868;
        _1188 = _868;
        _1189 = _868;
        _1190 = _868;
        _1191 = _868;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _472 * 0.5;
    float _1249 = _473 * 0.5;
    float _1250 = _474 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_867, _871, _874, _877));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_869, _872, _875, _878));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _873, _876, _879));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _283);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_474, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _472));
        float _1380 = fma(_474, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _472));
        float _1383 = fma(_474, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _472));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1411 = frontier_phi_19_17_ladder;
        }
        float _1619;
        if (_1380 > 0.0)
        {
            _1619 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1619 = frontier_phi_28_24_ladder;
        }
        float _1873;
        if (_1383 > 0.0)
        {
            _1873 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1873 = frontier_phi_40_35_ladder;
        }
        float _1875 = isnan(_1619) ? _1411 : (isnan(_1411) ? _1619 : min(_1411, _1619));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1377) + _1366;
        float _1881 = (_1876 * _1380) + _1370;
        float _1882 = (_1876 * _1383) + _1374;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_18_40_ladder = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2010.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2010.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_18_40_ladder_2;
        _1401 = frontier_phi_18_40_ladder_1;
        _1403 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_472, _473, _474), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _283);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_474, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _472));
        float _1479 = fma(_474, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _472));
        float _1482 = fma(_474, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _472));
        float _1624;
        if (_1476 > 0.0)
        {
            _1624 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1624 = frontier_phi_30_26_ladder;
        }
        float _1900;
        if (_1479 > 0.0)
        {
            _1900 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1900 = frontier_phi_42_37_ladder;
        }
        float _2113;
        if (_1482 > 0.0)
        {
            _2113 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2113 = frontier_phi_51_48_ladder;
        }
        float _2115 = isnan(_1900) ? _1624 : (isnan(_1624) ? _1900 : min(_1624, _1900));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1476) + _1465;
        float _2121 = (_2116 * _1479) + _1469;
        float _2122 = (_2116 * _1482) + _1473;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2123;
        float _2126 = _2123 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2122 > _2126) || ((_2122 < _2124) || ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 < _2124) || (_2120 > _2126))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2122, cbModelParam._m0[17u].z, fma(_2121, cbModelParam._m0[17u].y, _2120 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2122, cbModelParam._m0[18u].z, fma(_2121, cbModelParam._m0[18u].y, _2120 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2122, cbModelParam._m0[19u].z, fma(_2121, cbModelParam._m0[19u].y, _2120 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_27_51_ladder = _2320.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2320.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2320.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_27_51_ladder_2;
        _1503 = frontier_phi_27_51_ladder_1;
        _1505 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_472, _473, _474), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1518 = (((_499 * _449) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_499 * _451) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1522 = (((_499 * _452) + _500) * _464) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1525 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    uvec4 _1541 = floatBitsToUint(cbInstanceData._m0[_423 + 5u]);
    uint _1543 = _1541.x * 14u;
    uint _1544 = _1543 + 13u;
    float _1551 = _464 + (-1.0);
    float _1556 = (cbLight._m0[_1544].x * _1551) + 1.0;
    float _1557 = (cbLight._m0[_1544].y * _1551) + 1.0;
    float _1558 = (cbLight._m0[_1544].z * _1551) + 1.0;
    float _1559 = (cbLight._m0[_1544].w * _1551) + 1.0;
    uint _1560 = _1543 + 5u;
    float _1566 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1570 = _1543 + 4u;
    float _1577 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1581 = _1543 | 1u;
    float _1592 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_280, _281, _282));
    float _1595 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_280, _281, _282));
    float _3771 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _3782 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1600 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1602 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1609 = ((cbLight._m0[_1560].x * _1566) * _1602) + ((cbLight._m0[_1570].x * _1577) * _1600);
    float _1610 = ((_1566 * cbLight._m0[_1560].y) * _1602) + ((_1577 * cbLight._m0[_1570].y) * _1600);
    float _1611 = ((_1566 * cbLight._m0[_1560].z) * _1602) + ((_1577 * cbLight._m0[_1570].z) * _1600);
    uvec4 _1616 = floatBitsToUint(cbLight._m0[_1543 + 12u]);
    bool _1618 = _1616.x == 0u;
    float _1629;
    float _1631;
    float _1633;
    if (_1618)
    {
        _1629 = _1609;
        _1631 = _1610;
        _1633 = _1611;
    }
    else
    {
        uint _1637 = _1543 + 6u;
        float _1653 = (dot(vec3(cbLight._m0[_1543 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3793 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1656 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1629 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1609;
        _1631 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1610;
        _1633 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1611;
    }
    bool _1636 = _1616.y == 0u;
    float _1674;
    float _1676;
    float _1678;
    if (_1636)
    {
        _1674 = _1629;
        _1676 = _1631;
        _1678 = _1633;
    }
    else
    {
        uint _1844 = _1543 + 7u;
        float _1860 = (dot(vec3(cbLight._m0[_1543 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3809 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1863 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1674 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1629;
        _1676 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1631;
        _1678 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1633;
    }
    uint _1681 = _1543 + 8u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1543].w)) * _283) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1543].x + _362;
    float _1697 = cbLight._m0[_1543].y + _363;
    float _1698 = cbLight._m0[_1543].z + _364;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1543].xyz));
    float _3825 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _1710 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1711 = dot(vec3(_280, _281, _282), vec3(_1703, _1704, _1705));
    float _3847 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_1703, _1704, _1705));
    float _3858 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1719 = _1695 * _1695;
    float _1723 = ((_1714 * _1714) * (_1719 + (-1.0))) + 1.0;
    float _1731 = exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0);
    float _1732 = 0.959999978542327880859375 - _446;
    float _1734 = 0.959999978542327880859375 - _447;
    float _1735 = 0.959999978542327880859375 - _448;
    float _1742 = 1.0 - _1695;
    float _1753 = (0.5 / (((_1710 * ((_1709 * _1742) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1742) + _1695) * _1709))) * _1709;
    float _3869 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1719 / ((_1723 * _1723) * 3.141590118408203125));
    uint _1766 = _1543 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _283) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1581].x + _362;
    float _1780 = cbLight._m0[_1581].y + _363;
    float _1781 = cbLight._m0[_1581].z + _364;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1581].xyz));
    float _3880 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1793 = dot(vec3(_280, _281, _282), vec3(_1786, _1787, _1788));
    float _3891 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1786, _1787, _1788));
    float _3902 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1812 = exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0);
    float _1819 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1710 * ((_1792 * _1819) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1819) + _1778) * _1792))) * _1792;
    float _3913 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1841 = (((((_1812 * _1732) + _449) * cbLight._m0[_1766].x) * _1831) * _1566) + (((((_1731 * _1732) + _449) * cbLight._m0[_1681].x) * _1755) * _1577);
    float _1842 = (((((_1812 * _1734) + _451) * cbLight._m0[_1766].y) * _1831) * _1566) + (((((_1731 * _1734) + _451) * cbLight._m0[_1681].y) * _1755) * _1577);
    float _1843 = (((((_1812 * _1735) + _452) * cbLight._m0[_1766].z) * _1831) * _1566) + (((((_1731 * _1735) + _452) * cbLight._m0[_1681].z) * _1755) * _1577);
    float _1905;
    float _1907;
    float _1909;
    if (_1618)
    {
        _1905 = _1841;
        _1907 = _1842;
        _1909 = _1843;
    }
    else
    {
        uint _1911 = _1543 + 2u;
        uint _1915 = _1543 + 10u;
        float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _283) * 0.949999988079071044921875);
        float _1930 = _1929 * _1929;
        float _1931 = cbLight._m0[_1911].x + _362;
        float _1932 = cbLight._m0[_1911].y + _363;
        float _1933 = cbLight._m0[_1911].z + _364;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1938 = _1937 * _1931;
        float _1939 = _1937 * _1932;
        float _1940 = _1937 * _1933;
        float _1941 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1911].xyz));
        float _3924 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1945 = dot(vec3(_280, _281, _282), vec3(_1938, _1939, _1940));
        float _3935 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1938, _1939, _1940));
        float _3946 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1953 = _1930 * _1930;
        float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
        float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0);
        float _1971 = 1.0 - _1930;
        float _1981 = (0.5 / (((_1710 * ((_1944 * _1971) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _1971) + _1930) * _1944))) * _1944;
        float _3957 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1983 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
        float _1984 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1905 = (((((_1964 * _1732) + _449) * cbLight._m0[_1915].x) * _1983) * _1984) + _1841;
        _1907 = (((((_1964 * _1734) + _451) * cbLight._m0[_1915].y) * _1983) * _1984) + _1842;
        _1909 = (((((_1964 * _1735) + _452) * cbLight._m0[_1915].z) * _1983) * _1984) + _1843;
    }
    float _2019;
    float _2021;
    float _2023;
    if (_1636)
    {
        _2019 = _1905;
        _2021 = _1907;
        _2023 = _1909;
    }
    else
    {
        uint _2030 = _1543 + 3u;
        uint _2034 = _1543 + 11u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _283) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _362;
        float _2051 = cbLight._m0[_2030].y + _363;
        float _2052 = cbLight._m0[_2030].z + _364;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2030].xyz));
        float _3973 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2064 = dot(vec3(_280, _281, _282), vec3(_2057, _2058, _2059));
        float _3984 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3995 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1710 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1710 * _2090) + _2049) * _2063))) * _2063;
        float _4006 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _2019 = (((((_2083 * _1732) + _449) * cbLight._m0[_2034].x) * _2102) * _2103) + _1905;
        _2021 = (((((_2083 * _1734) + _451) * cbLight._m0[_2034].y) * _2102) * _2103) + _1907;
        _2023 = (((((_2083 * _1735) + _452) * cbLight._m0[_2034].z) * _2102) * _2103) + _1909;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1541.y == 0u)
    {
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2178;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2178;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2178;
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.x;
        uint _2205 = uint((float(_2193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2194))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2194)));
        float _2215 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2216 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        uint _2219 = uint(isnan(14.0) ? _2216 : (isnan(_2216) ? 14.0 : min(_2216, 14.0)));
        uvec4 _2224 = texelFetch(g_lightClusterGridBuffer, int(((_2219 << 2u) + (_2205 << 6u)) >> 2u));
        uint _2225 = _2224.x;
        uint _2226 = _2193.z;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        if (((((1u << ((_2226 >> 4u) & 15u)) + 4294967295u) & _2225) == 0u) || ((_2226 & 240u) == 0u))
        {
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
        }
        else
        {
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            uint _2483 = 0u;
            uint _2492;
            bool _2493;
            for (;;)
            {
                _2492 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                _2493 = _2492 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2493)
                {
                    frontier_phi_68_pred = _2479;
                    frontier_phi_68_pred_1 = _2482;
                    frontier_phi_68_pred_2 = _2481;
                    frontier_phi_68_pred_3 = _2480;
                    frontier_phi_68_pred_4 = _2478;
                    frontier_phi_68_pred_5 = _2477;
                }
                else
                {
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    uint _2628;
                    _2622 = _2477;
                    _2623 = _2478;
                    _2624 = _2479;
                    _2625 = _2480;
                    _2626 = _2481;
                    _2627 = _2482;
                    _2628 = _2492;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    for (;;)
                    {
                        uint _2632 = uint(findLSB(_2628)) + (_2483 << 5u);
                        uint _2629 = (_2628 + 4294967295u) & _2628;
                        uint _2634 = _2632 * 48u;
                        vec4 _2648 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 3u)).x));
                        uint _2654 = (_2632 * 48u) + 4u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2673 = (_2632 * 48u) + 8u;
                        vec3 _2684 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x));
                        float _2688 = _2648.x - _2179;
                        float _2689 = _2648.y - _2180;
                        float _2690 = _2648.z - _2181;
                        float _2691 = dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690));
                        float _2694 = inversesqrt(_2691);
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2698 = dot(vec3(_404, _407, _410), vec3(_2695, _2696, _2697));
                        float _2703 = 1.0 - (_2691 * _2648.w);
                        float _4032 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2704 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2705 = sqrt(_2691) * _2667.w;
                        float _2708 = 1.39999997615814208984375 / (_2705 + 1.39999997615814208984375);
                        float _2709 = _2708 * _2708;
                        float _2712 = ((1.0 - _2709) * _2698) + _2709;
                        float _2715 = _2705 * _2705;
                        float _2719 = ((isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))) * _2704) / ((_2715 * 0.699999988079071044921875) + 1.0);
                        float _2723 = (-0.0) - _2179;
                        float _2724 = (-0.0) - _2180;
                        float _2725 = (-0.0) - _2181;
                        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
                        float _2730 = _2729 * _2723;
                        float _2731 = _2729 * _2724;
                        float _2732 = _2729 * _2725;
                        float _2740 = exp2(log2(1.0 / ((_2715 * 3.5) + 5.0)) * 0.25);
                        float _2741 = 1.0 - _480;
                        float _2748 = sqrt(1.0 - ((1.0 - (_2741 * _2741)) * (1.0 - (_2740 * _2740))));
                        float _2749 = _2748 * _2748;
                        float _2750 = _2749 * _2749;
                        float _2751 = _2730 + _2695;
                        float _2752 = _2731 + _2696;
                        float _2753 = _2732 + _2697;
                        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
                        float _2761 = dot(vec3(_404, _407, _410), vec3(_2730, _2731, _2732));
                        float _4048 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2764 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2765 = dot(vec3(_404, _407, _410), vec3(_2757 * _2751, _2757 * _2752, _2757 * _2753));
                        float _4059 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2768 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2772 = ((_2768 * _2768) * (_2750 + (-1.0))) + 1.0;
                        float _2773 = _2708 * _2749;
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2698) + _2774;
                        float _4070 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2779 = 1.0 - _2749;
                        float _2789 = (0.5 / (((_2778 * ((_2764 * _2779) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2778 * _2779) + _2749) * _2764))) * _2778;
                        float _4081 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2800 = (((_2750 * 3.1415927410125732421875) * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) / ((_2772 * _2772) * ((_2715 * 2.1991131305694580078125) + 3.141590118408203125))) * _2704;
                        _2552 = (_2719 * _2667.x) + _2625;
                        _2553 = (_2719 * _2667.y) + _2626;
                        _2554 = (_2719 * _2667.z) + _2627;
                        _2549 = (_2800 * _2684.x) + _2622;
                        _2550 = (_2800 * _2684.y) + _2623;
                        _2551 = (_2800 * _2684.z) + _2624;
                        if (_2629 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2622 = _2549;
                            _2623 = _2550;
                            _2624 = _2551;
                            _2625 = _2552;
                            _2626 = _2553;
                            _2627 = _2554;
                            _2628 = _2629;
                        }
                    }
                    frontier_phi_68_pred = _2551;
                    frontier_phi_68_pred_1 = _2554;
                    frontier_phi_68_pred_2 = _2553;
                    frontier_phi_68_pred_3 = _2552;
                    frontier_phi_68_pred_4 = _2550;
                    frontier_phi_68_pred_5 = _2549;
                }
                _2330 = frontier_phi_68_pred;
                _2336 = frontier_phi_68_pred_1;
                _2334 = frontier_phi_68_pred_2;
                _2332 = frontier_phi_68_pred_3;
                _2328 = frontier_phi_68_pred_4;
                _2326 = frontier_phi_68_pred_5;
                uint _2484 = _2483 + 1u;
                if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2477 = _2326;
                    _2478 = _2328;
                    _2479 = _2330;
                    _2480 = _2332;
                    _2481 = _2334;
                    _2482 = _2336;
                    _2483 = _2484;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
        }
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.z;
        uint _2342 = (_2340 >> 8u) & 15u;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        if (((4294967295u << _2342) & _2225) == 0u)
        {
            _2445 = _2325;
            _2447 = _2327;
            _2449 = _2329;
            _2451 = _2331;
            _2453 = _2333;
            _2455 = _2335;
        }
        else
        {
            float _2470 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _2471 = _2470 * _2179;
            float _2472 = _2470 * _2180;
            float _2473 = _2470 * _2181;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2342 < ((_2340 >> 12u) & 15u))
            {
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2605 = _2325;
                float _2606 = _2327;
                float _2607 = _2329;
                float _2608 = _2331;
                float _2609 = _2333;
                float _2610 = _2335;
                uint _2611 = _2342;
                uint _2620;
                bool _2621;
                for (;;)
                {
                    _2620 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2611 << 2u)) >> 2u)).x;
                    _2621 = _2620 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2621)
                    {
                        frontier_phi_79_pred = _2610;
                        frontier_phi_79_pred_1 = _2609;
                        frontier_phi_79_pred_2 = _2608;
                        frontier_phi_79_pred_3 = _2607;
                        frontier_phi_79_pred_4 = _2606;
                        frontier_phi_79_pred_5 = _2605;
                    }
                    else
                    {
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _2827 = _2605;
                        float _2828 = _2606;
                        float _2829 = _2607;
                        float _2830 = _2608;
                        float _2831 = _2609;
                        float _2832 = _2610;
                        uint _2833 = _2620;
                        uint _2834;
                        vec4 _2859;
                        float _2860;
                        vec4 _2875;
                        vec3 _2887;
                        vec4 _2903;
                        vec4 _2919;
                        float _2966;
                        bool _2967;
                        for (;;)
                        {
                            uint _2844 = ((_2611 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2833));
                            _2834 = (_2833 + 4294967295u) & _2833;
                            uint _2846 = _2844 * 40u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2860 = _2859.w;
                            uint _2862 = (_2844 * 40u) + 4u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2844 * 40u) + 8u;
                            _2887 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x));
                            uint _2890 = (_2844 * 40u) + 16u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2844 * 40u) + 20u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2922 = (_2844 * 40u) + 24u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2941 = (_2844 * 40u) + 28u;
                            vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2966 = fma(_2181, _2954.z, fma(_2180, _2954.y, _2954.x * _2179)) + _2954.w;
                            _2967 = !((fma(_2181, _2935.z, fma(_2180, _2935.y, _2935.x * _2179)) + _2935.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2967)
                            {
                                float _2994 = _2859.x - _2179;
                                float _2995 = _2859.y - _2180;
                                float _2996 = _2859.z - _2181;
                                float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                                float _3000 = inversesqrt(_2997);
                                float _3001 = _3000 * _2994;
                                float _3002 = _3000 * _2995;
                                float _3003 = _3000 * _2996;
                                float _3007 = 1.0 - (_2997 / (_2860 * _2860));
                                float _4092 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3012 = sqrt(_2997) * _2875.w;
                                float _3014 = 1.39999997615814208984375 / (_3012 + 1.39999997615814208984375);
                                float _3015 = _3014 * _3014;
                                float _3018 = ((1.0 - _3015) * dot(vec3(_3001, _3002, _3003), vec3(_404, _407, _410))) + _3015;
                                float _3021 = _3012 * _3012;
                                float _3025 = (fma(_2181, _2903.z, fma(_2180, _2903.y, _2903.x * _2179)) + _2903.w) / _2966;
                                float _3026 = (fma(_2181, _2919.z, fma(_2180, _2919.y, _2919.x * _2179)) + _2919.w) / _2966;
                                float _3030 = 1.0 - dot(vec2(_3025, _3026), vec2(_3025, _3026));
                                float _4108 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3032 = _3031 * (((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3008) / ((_3021 * 0.699999988079071044921875) + 1.0));
                                float _3044 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                                float _3045 = 1.0 - _480;
                                float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                                float _3053 = _3052 * _3052;
                                float _3054 = _3053 * _3053;
                                float _3055 = _3001 - _2471;
                                float _3056 = _3002 - _2472;
                                float _3057 = _3003 - _2473;
                                float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                                float _3065 = dot(vec3(_404, _407, _410), vec3((-0.0) - _2471, (-0.0) - _2472, (-0.0) - _2473));
                                float _4119 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3069 = dot(vec3(_404, _407, _410), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                                float _4130 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3072 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                                float _3077 = _3014 * _3053;
                                float _3078 = _3077 * _3077;
                                float _3084 = ((1.0 - _3078) * dot(vec3(_404, _407, _410), vec3(_3001, _3002, _3003))) + _3078;
                                float _4141 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3086 = 1.0 - _3053;
                                float _3096 = (0.5 / (((_3085 * ((_3068 * _3086) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3053) * _3068))) * _3085;
                                float _4152 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3106 = (_3031 * _3008) * (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) / ((_3076 * _3076) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3032 * _2875.z;
                                frontier_phi_85_pred_1 = _3032 * _2875.y;
                                frontier_phi_85_pred_2 = _3032 * _2875.x;
                                frontier_phi_85_pred_3 = _3106 * _2887.z;
                                frontier_phi_85_pred_4 = _3106 * _2887.y;
                                frontier_phi_85_pred_5 = _3106 * _2887.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3115 = frontier_phi_85_pred;
                            _3114 = frontier_phi_85_pred_1;
                            _3113 = frontier_phi_85_pred_2;
                            _3112 = frontier_phi_85_pred_3;
                            _3111 = frontier_phi_85_pred_4;
                            _3110 = frontier_phi_85_pred_5;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            if (_2834 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2834;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2819;
                        frontier_phi_79_pred_1 = _2818;
                        frontier_phi_79_pred_2 = _2817;
                        frontier_phi_79_pred_3 = _2816;
                        frontier_phi_79_pred_4 = _2815;
                        frontier_phi_79_pred_5 = _2814;
                    }
                    _2456 = frontier_phi_79_pred;
                    _2454 = frontier_phi_79_pred_1;
                    _2452 = frontier_phi_79_pred_2;
                    _2450 = frontier_phi_79_pred_3;
                    _2448 = frontier_phi_79_pred_4;
                    _2446 = frontier_phi_79_pred_5;
                    uint _2612 = _2611 + 1u;
                    if (_2612 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2605 = _2446;
                        _2606 = _2448;
                        _2607 = _2450;
                        _2608 = _2452;
                        _2609 = _2454;
                        _2610 = _2456;
                        _2611 = _2612;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2452;
                frontier_phi_60_61_ladder_1 = _2456;
                frontier_phi_60_61_ladder_2 = _2454;
                frontier_phi_60_61_ladder_3 = _2450;
                frontier_phi_60_61_ladder_4 = _2448;
                frontier_phi_60_61_ladder_5 = _2446;
            }
            else
            {
                frontier_phi_60_61_ladder = _2331;
                frontier_phi_60_61_ladder_1 = _2335;
                frontier_phi_60_61_ladder_2 = _2333;
                frontier_phi_60_61_ladder_3 = _2329;
                frontier_phi_60_61_ladder_4 = _2327;
                frontier_phi_60_61_ladder_5 = _2325;
            }
            _2445 = frontier_phi_60_61_ladder_5;
            _2447 = frontier_phi_60_61_ladder_4;
            _2449 = frontier_phi_60_61_ladder_3;
            _2451 = frontier_phi_60_61_ladder;
            _2453 = frontier_phi_60_61_ladder_2;
            _2455 = frontier_phi_60_61_ladder_1;
        }
        float _2460 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
        _2237 = (_2460 * _2451) + _1674;
        _2239 = (_2460 * _2453) + _1676;
        _2241 = (_2460 * _2455) + _1678;
        _2243 = ((_2445 * _449) * _2460) + _2019;
        _2245 = ((_2447 * _451) * _2460) + _2021;
        _2247 = ((_2449 * _452) * _2460) + _2023;
    }
    else
    {
        _2237 = _1674;
        _2239 = _1676;
        _2241 = _1678;
        _2243 = _2019;
        _2245 = _2021;
        _2247 = _2023;
    }
    float _4168 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4179 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4190 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2264 = ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2237 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _464))) + ((_2243 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2265 = ((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2239 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _464))) + ((_2245 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2266 = ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2241 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _464))) + ((_2247 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    uint _2267 = _423 + 6u;
    float _2275 = _383 / cbSceneParam._m0[86u].x;
    float _2276 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2290 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, (log2((isnan(cbSceneParam._m0[77u].w) ? _303 : (isnan(_303) ? cbSceneParam._m0[77u].w : min(_303, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2292 = _2290.x;
    float _2293 = _2290.y;
    float _2294 = _2290.z;
    float _2295 = _2290.w;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_303 > cbSceneParam._m0[78u].w)
    {
        float _2350 = isnan(_303) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _303 : min(cbSceneParam._m0[80u].w, _303));
        float _2351 = _2350 / _303;
        float _2362 = _2351 * _355;
        float _2363 = _356 * _2351;
        float _2364 = (-0.0) - _2363;
        float _2365 = _2351 * _357;
        float _2367 = (cbSceneParam._m0[77u].w * _2364) / _2350;
        float _2368 = _2367 + cbSceneParam._m0[79u].w;
        float _2369 = cbSceneParam._m0[79u].w - _2363;
        float _2375 = sqrt(((_2362 * _2362) + (_2363 * _2363)) + (_2365 * _2365));
        float _2378 = (1.0 - (cbSceneParam._m0[77u].w / _2350)) * _2375;
        float _2383 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2562;
        if (abs((_2364 - _2367) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2562 = ((((_2368 > 0.0) ? exp2(_2383 * _2368) : (2.0 - exp2(_2385 * _2368))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2378;
        }
        else
        {
            float _2506 = 1.0 / cbSceneParam._m0[80u].x;
            float _2507 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : max(_2368, _2369));
            float _2508 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : min(_2368, _2369));
            float _2517 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : min(_2507, 0.0));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            _2562 = ((abs(_2375 / _2364) * cbSceneParam._m0[80u].y) * ((((_2517 - _2518) * 2.0) - ((exp2(_2383 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)))) - exp2(_2383 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))))) * _2506)) - ((exp2(_2385 * _2517) - exp2(_2385 * _2518)) * _2506))) + (_2378 * cbSceneParam._m0[80u].z);
        }
        vec4 _2564 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, 1.0), 0.0);
        float _2573 = exp2((_2562 * (-1.44269502162933349609375)) * (1.0 - _2564.w));
        float _2574 = log2(_2573);
        float _2590 = log2(_2295);
        _2387 = (exp2(_2590 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].x)) * _2564.x) / cbSceneParam._m0[78u].x)) + _2292;
        _2389 = (exp2(_2590 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].y)) * _2564.y) / cbSceneParam._m0[78u].y)) + _2293;
        _2391 = (exp2(_2590 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2574 * cbSceneParam._m0[78u].z)) * _2564.z) / cbSceneParam._m0[78u].z)) + _2294;
        _2393 = _2573 * _2295;
    }
    else
    {
        _2387 = _2292;
        _2389 = _2293;
        _2391 = _2294;
        _2393 = _2295;
    }
    bool _2600;
    vec4 _2403;
    vec4 _2425;
    float _2427;
    float _2431;
    float _2432;
    float _2433;
    float _2434;
    bool _2444;
    for (;;)
    {
        _2403 = cbMatDynParam._m0[0u];
        float _2405 = roundEven(_2403.y);
        bool _2406 = _2405 == 3.0;
        float _2407 = log2(_2393);
        float _2414 = exp2(_2407 * cbSceneParam._m0[78u].x) * _2264;
        float _2415 = exp2(_2407 * cbSceneParam._m0[78u].y) * _2265;
        float _2416 = exp2(_2407 * cbSceneParam._m0[78u].z) * _2266;
        float _2423 = _371 + (-0.5);
        _2425 = cbMtdParam._m0[1u];
        _2427 = _2425.y * _2423;
        float _2430 = (_2405 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2431 = _2430 * (_2406 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2387)));
        _2432 = _2430 * (_2406 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2389)));
        _2433 = _2430 * (_2406 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2391)));
        _2434 = _2423 * 0.999000012874603271484375;
        _2444 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2444)
        {
            if ((cbInstanceData._m0[_423 + 7u].x + _2434) < 0.5)
            {
                _2600 = true;
                break;
            }
        }
        uint _2541 = _425 + uint(_2403.w);
        if ((cbInstanceData._m0[_2541].w < 1.0) && ((cbInstanceData._m0[_2541].w + _2434) < 0.5))
        {
            _2600 = true;
            break;
        }
        if ((_2427 + _233) < _2425.x)
        {
            _2600 = true;
            break;
        }
        _2600 = false;
        break;
    }
    float _2805;
    if (_2600)
    {
        discard_state = true;
        _2805 = 0.0;
    }
    else
    {
        _2805 = cbInstanceData._m0[_2267].w;
    }
    SV_Target.x = _2431;
    SV_Target.y = _2432;
    SV_Target.z = _2433;
    SV_Target.w = _2805;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2267].w;
    discard_exit();
}


