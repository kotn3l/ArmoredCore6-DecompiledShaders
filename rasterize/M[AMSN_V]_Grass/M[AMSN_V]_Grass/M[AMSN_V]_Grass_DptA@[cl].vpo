#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_2;
layout(location = 4) out vec2 TEXCOORD_4;
layout(location = 3, component = 3) out float TEXCOORD_8;

uint _451;

void main()
{
    uint _74 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_8 = 0.0;
    float _157 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _159 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _160 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _172 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _178 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _74;
    uvec4 _180 = texelFetch(g_InstanceIndexBuffer, int(_178));
    uint _181 = _180.x;
    uint _191 = (floatBitsToUint(cbInstanceData._m0[(_181 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _198 = _191 + 1u;
    uint _205 = _191 + 2u;
    precise float _212 = POSITION.x * cbObjMatrix._m0[_191].x;
    precise float _213 = POSITION.y * cbObjMatrix._m0[_191].y;
    precise float _214 = _213 + _212;
    precise float _215 = POSITION.z * cbObjMatrix._m0[_191].z;
    precise float _216 = _215 + _214;
    precise float _217 = 1.0 * cbObjMatrix._m0[_191].w;
    precise float _219 = _217 + _216;
    precise float _220 = POSITION.x * cbObjMatrix._m0[_198].x;
    precise float _221 = POSITION.y * cbObjMatrix._m0[_198].y;
    precise float _222 = _221 + _220;
    precise float _223 = POSITION.z * cbObjMatrix._m0[_198].z;
    precise float _224 = _223 + _222;
    precise float _225 = 1.0 * cbObjMatrix._m0[_198].w;
    precise float _226 = _225 + _224;
    precise float _227 = POSITION.x * cbObjMatrix._m0[_205].x;
    precise float _228 = POSITION.y * cbObjMatrix._m0[_205].y;
    precise float _229 = _228 + _227;
    precise float _230 = POSITION.z * cbObjMatrix._m0[_205].z;
    precise float _231 = _230 + _229;
    precise float _232 = 1.0 * cbObjMatrix._m0[_205].w;
    precise float _233 = _232 + _231;
    uvec4 _239 = floatBitsToUint(cbInstanceData._m0[(_74 * 13u) + 7u]);
    uint _241 = _239.w;
    uint _243 = min(_239.y, 8u);
    float _247;
    float _249;
    if (_243 == 0u)
    {
        _247 = 0.0;
        _249 = 0.0;
    }
    else
    {
        uint _382 = _239.z;
        precise float _248;
        precise float _250;
        float _524;
        float _526;
        float _383 = 0.0;
        float _384 = 0.0;
        uint _385 = _382;
        uint _387 = 0u;
        float _423;
        float _442;
        vec4 _456;
        float _457;
        float _458;
        float _472;
        float _473;
        float _474;
        float _491;
        float _492;
        float _493;
        float _494;
        bool _495;
        bool _496;
        bool _497;
        precise float _498;
        precise float _499;
        precise float _500;
        float _501;
        float _502;
        float _503;
        precise float _504;
        bool _507;
        for (;;)
        {
            uint _389 = _385 & 255u;
            uint _391 = _389 * 24u;
            uvec3 _401 = uvec3(texelFetch(g_forceParam, int(_391)).x, texelFetch(g_forceParam, int(_391 + 1u)).x, texelFetch(g_forceParam, int(_391 + 2u)).x);
            uint _406 = (_389 * 24u) + 4u;
            vec4 _419 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_406)).x, texelFetch(g_forceParam, int(_406 + 1u)).x, texelFetch(g_forceParam, int(_406 + 2u)).x, texelFetch(g_forceParam, int(_406 + 3u)).x));
            _423 = _419.w;
            uint _425 = (_389 * 24u) + 8u;
            vec4 _438 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_425)).x, texelFetch(g_forceParam, int(_425 + 1u)).x, texelFetch(g_forceParam, int(_425 + 2u)).x, texelFetch(g_forceParam, int(_425 + 3u)).x));
            _442 = _438.w;
            uint _445 = (_389 * 24u) + 12u;
            _456 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_445)).x, texelFetch(g_forceParam, int(_445 + 1u)).x, _451, texelFetch(g_forceParam, int(_445 + 3u)).x));
            _457 = _456.x;
            _458 = _456.w;
            uint _461 = (_389 * 24u) + 16u;
            vec3 _471 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_461)).x, texelFetch(g_forceParam, int(_461 + 1u)).x, texelFetch(g_forceParam, int(_461 + 2u)).x));
            _472 = _471.x;
            _473 = _471.y;
            _474 = _471.z;
            uint _477 = (_389 * 24u) + 20u;
            vec4 _490 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_477)).x, texelFetch(g_forceParam, int(_477 + 1u)).x, texelFetch(g_forceParam, int(_477 + 2u)).x, texelFetch(g_forceParam, int(_477 + 3u)).x));
            _491 = _490.x;
            _492 = _490.y;
            _493 = _490.z;
            _494 = _490.w;
            _495 = _401.x == 1u;
            _496 = _401.y == 1u;
            _497 = _401.z == 1u;
            _498 = _219 - _419.x;
            _499 = _226 - _419.y;
            _500 = _233 - _419.z;
            _501 = _495 ? _438.x : _498;
            _502 = _495 ? _438.y : _499;
            _503 = _495 ? _438.z : _500;
            _504 = dot(vec3(_501, _502, _503), vec3(_501, _502, _503));
            _507 = _504 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_507)
            {
                precise float _509 = _498 * _498;
                precise float _510 = _499 * _499;
                precise float _511 = _509 + _510;
                precise float _512 = _500 * _500;
                precise float _513 = _512 + _511;
                float _514 = sqrt(_513);
                float _515 = inversesqrt(_504);
                precise float _516 = _501 * _515;
                precise float _517 = _502 * _515;
                precise float _518 = _503 * _515;
                precise float _521 = _514 / (isnan(0.001000000047497451305389404296875) ? _456.y : (isnan(_456.y) ? 0.001000000047497451305389404296875 : max(_456.y, 0.001000000047497451305389404296875)));
                precise float _522 = 1.0 - _521;
                float _674 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
                float _523 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
                float _547;
                if (_497)
                {
                    float _534 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
                    precise float _535 = _498 * _534;
                    precise float _536 = _499 * _534;
                    precise float _537 = _500 * _534;
                    precise float _541 = dot(vec3(_516, _517, _518), vec3(_535, _536, _537)) * 0.800000011920928955078125;
                    precise float _543 = _541 + 0.20000000298023223876953125;
                    float _685 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
                    precise float _546 = _523 * (isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0)));
                    _547 = _546;
                }
                else
                {
                    _547 = _523;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_547 > 0.0)
                {
                    bool _550 = _495 && (!_497);
                    precise float _552 = _514 * (-4.0);
                    precise float _556 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _457 : (isnan(_457) ? 0.001000000047497451305389404296875 : max(_457, 0.001000000047497451305389404296875)));
                    precise float _558 = dot(vec2(_516, _518), vec2(_498, _500));
                    precise float _561 = _556 * _558;
                    precise float _562 = float(_550) * _561;
                    precise float _563 = cbPerFrame._m0[22u].x * _556;
                    precise float _564 = _563 - _562;
                    precise float _565 = (_550 ? 0.0 : _552) + _564;
                    precise float _567 = _442 * sin(_565);
                    precise float _568 = _517 * 0.0;
                    precise float _569 = _568 - _518;
                    precise float _570 = _516 - _568;
                    precise float _571 = _458 * _567;
                    float _572 = _495 ? _571 : 0.0;
                    float _615;
                    if (_496)
                    {
                        precise float _575 = _472 * 2.0;
                        precise float _577 = _492 + _493;
                        precise float _578 = _494 + _577;
                        precise float _580 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _472 : (isnan(_472) ? 0.001000000047497451305389404296875 : max(_472, 0.001000000047497451305389404296875)));
                        precise float _581 = _491 * _580;
                        precise float _582 = (-0.0) - _516;
                        precise float _587 = dot(vec2(_518, _582), vec2(_498, _500)) / _575;
                        precise float _588 = (-0.0) - _587;
                        float _591 = fract(abs(_587));
                        precise float _592 = (-0.0) - _591;
                        precise float _594 = _575 * ((_587 >= _588) ? _591 : _592);
                        precise float _595 = _594 * 6.283184051513671875;
                        precise float _596 = _595 / _575;
                        precise float _598 = (isnan(5.0) ? _472 : (isnan(_472) ? 5.0 : min(_472, 5.0))) * sin(_596);
                        precise float _599 = _558 + _598;
                        precise float _600 = _472 * 0.25;
                        precise float _602 = cbPerFrame._m0[22u].x * _491;
                        precise float _603 = _602 - _600;
                        precise float _604 = _603 - _599;
                        precise float _605 = _491 * _578;
                        precise float _607 = _604 / (isnan(0.001000000047497451305389404296875) ? _605 : (isnan(_605) ? 0.001000000047497451305389404296875 : max(_605, 0.001000000047497451305389404296875)));
                        float _608 = fract(_607);
                        precise float _610 = 1.0 - _608;
                        float _611 = (_607 < 0.0) ? _610 : _608;
                        precise float _612 = _577 / _578;
                        precise float _613 = _492 / _578;
                        float _630;
                        if (_611 < _613)
                        {
                            precise float _628 = _611 / _613;
                            _630 = _628;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_611 < _612)
                            {
                                precise float _640 = _611 - _613;
                                precise float _641 = _612 - _613;
                                precise float _642 = _640 / _641;
                                precise float _631 = 1.0 - _642;
                                frontier_phi_14_13_ladder = _631;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _630 = frontier_phi_14_13_ladder;
                        }
                        precise float _632 = _474 * _630;
                        precise float _633 = _580 * _558;
                        precise float _634 = cbPerFrame._m0[22u].x * _581;
                        precise float _635 = _634 - _633;
                        precise float _637 = _473 + sin(_635);
                        precise float _639 = _632 * abs(_637);
                        precise float _616 = _639 + 0.0;
                        _615 = _616;
                    }
                    else
                    {
                        _615 = 0.0;
                    }
                    precise float _617 = _423 + _567;
                    precise float _618 = _617 + _615;
                    precise float _619 = _516 * _618;
                    precise float _620 = _518 * _618;
                    precise float _621 = _569 * _572;
                    precise float _622 = _570 * _572;
                    precise float _623 = _621 + _619;
                    precise float _624 = _622 + _620;
                    precise float _625 = _547 * _623;
                    precise float _626 = _547 * _624;
                    precise float _525 = _625 * 0.0500000007450580596923828125;
                    precise float _527 = _626 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _525;
                    frontier_phi_5_pred_7_ladder_1 = _527;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _524 = frontier_phi_5_pred;
            _526 = frontier_phi_5_pred_1;
            _248 = _383 + _524;
            _250 = _384 + _526;
            uint _388 = _387 + 1u;
            if (_388 == _243)
            {
                break;
            }
            else
            {
                _383 = _248;
                _384 = _250;
                _385 = (_387 != 3u) ? (_385 >> 8u) : _241;
                _387 = _388;
                continue;
            }
        }
        _247 = _248;
        _249 = _250;
    }
    precise float _251 = TEXCOORD_1.y * _247;
    precise float _252 = TEXCOORD_1.y * _249;
    precise float _256 = dot(vec2(_251, _252), vec2(_251, _252)) + 1.0;
    float _257 = sqrt(_256);
    precise float _258 = _251 / _257;
    precise float _259 = _252 / _257;
    precise float _263 = 1.0 - dot(vec2(_258, _259), vec2(_258, _259));
    float _716 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    precise float _266 = sqrt(isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0))) + (-1.0);
    precise float _268 = TEXCOORD_1.y * _258;
    precise float _269 = TEXCOORD_1.y * _266;
    precise float _270 = TEXCOORD_1.y * _259;
    precise float _271 = _219 + _268;
    precise float _272 = _226 + _269;
    precise float _273 = _233 + _270;
    float _279 = cbSceneParam._m0[3u].x - _271;
    float _280 = cbSceneParam._m0[3u].y - _272;
    float _281 = cbSceneParam._m0[3u].z - _273;
    precise float _307 = _271 - cbSceneParam._m0[3u].x;
    precise float _308 = _272 - cbSceneParam._m0[3u].y;
    precise float _309 = _273 - cbSceneParam._m0[3u].z;
    precise float _337 = _307 * cbSceneParam._m0[24u].x;
    precise float _338 = _308 * cbSceneParam._m0[24u].y;
    precise float _339 = _338 + _337;
    precise float _340 = _309 * cbSceneParam._m0[24u].z;
    precise float _341 = _340 + _339;
    precise float _342 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _343 = _342 + _341;
    precise float _344 = _307 * cbSceneParam._m0[25u].x;
    precise float _345 = _308 * cbSceneParam._m0[25u].y;
    precise float _346 = _345 + _344;
    precise float _347 = _309 * cbSceneParam._m0[25u].z;
    precise float _348 = _347 + _346;
    precise float _349 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _350 = _349 + _348;
    precise float _351 = _307 * cbSceneParam._m0[26u].x;
    precise float _352 = _308 * cbSceneParam._m0[26u].y;
    precise float _353 = _352 + _351;
    precise float _354 = _309 * cbSceneParam._m0[26u].z;
    precise float _355 = _354 + _353;
    precise float _356 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _357 = _356 + _355;
    precise float _358 = _307 * cbSceneParam._m0[27u].x;
    precise float _359 = _308 * cbSceneParam._m0[27u].y;
    precise float _360 = _359 + _358;
    precise float _361 = _309 * cbSceneParam._m0[27u].z;
    precise float _362 = _361 + _360;
    precise float _363 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _364 = _363 + _362;
    gl_Position.x = _343;
    gl_Position.y = _350;
    gl_Position.z = _357;
    gl_Position.w = _364;
    NORMAL_1.x = fma(_160, cbObjMatrix._m0[_191].z, fma(_159, cbObjMatrix._m0[_191].y, cbObjMatrix._m0[_191].x * _157));
    NORMAL_1.y = fma(_160, cbObjMatrix._m0[_198].z, fma(_159, cbObjMatrix._m0[_198].y, cbObjMatrix._m0[_198].x * _157));
    NORMAL_1.z = fma(_160, cbObjMatrix._m0[_205].z, fma(_159, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * _157));
    NORMAL_1.w = float(_181);
    TANGENT_1.x = fma(_172, cbObjMatrix._m0[_191].z, fma(_171, cbObjMatrix._m0[_191].y, cbObjMatrix._m0[_191].x * _170));
    TANGENT_1.y = fma(_172, cbObjMatrix._m0[_198].z, fma(_171, cbObjMatrix._m0[_198].y, cbObjMatrix._m0[_198].x * _170));
    TANGENT_1.z = fma(_172, cbObjMatrix._m0[_205].z, fma(_171, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * _170));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_4.x = _357;
    TEXCOORD_4.y = _364;
    TEXCOORD_8 = sqrt(((_281 * _281) + (_279 * _279)) + (_280 * _280));
}


