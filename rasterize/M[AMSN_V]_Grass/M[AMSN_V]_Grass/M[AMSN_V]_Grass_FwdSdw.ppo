#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _826;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _227 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _227.x;
    float _231 = _227.y;
    float _232 = _227.z;
    vec4 _248 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3446 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))));
    float _268 = fma(_265, _211, fma(_258, _203 * TANGENT.x, (_189 * _182) * _256));
    float _271 = fma(_265, _212, fma(_258, _203 * TANGENT.y, (_189 * _183) * _256));
    float _274 = fma(_265, _213, fma(_258, _203 * TANGENT.z, (_189 * _184) * _256));
    float _278 = inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274)));
    float _279 = _278 * _268;
    float _280 = _278 * _271;
    float _281 = _278 * _274;
    float _3457 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _282 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3479 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3490 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3501 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _286 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_281, cbSceneParam._m0[5u].z, fma(_280, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _279));
    float _394 = fma(_281, cbSceneParam._m0[6u].z, fma(_280, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _279));
    float _397 = fma(_281, cbSceneParam._m0[7u].z, fma(_280, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _279));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _413 = (_410 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _419 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_413].x;
    float _420 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_413].y;
    float _421 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_413].z;
    float _3512 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _425 = 1.0 - _286;
    float _426 = _422 * _425;
    float _427 = _423 * _425;
    float _428 = _424 * _425;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _286;
    float _434 = (_423 + (-0.039999999105930328369140625)) * _286;
    float _435 = (_424 + (-0.039999999105930328369140625)) * _286;
    float _436 = _433 + 0.039999999105930328369140625;
    float _438 = _434 + 0.039999999105930328369140625;
    float _439 = _435 + 0.039999999105930328369140625;
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _451 = _448.x * TEXCOORD.z;
    float _452 = dot(vec3(_279, _280, _281), vec3(_361, _362, _363));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _279) - _361;
    float _460 = (_455 * _280) - _362;
    float _461 = (_455 * _281) - _363;
    float _465 = abs(dot(vec3(_361, _362, _363), vec3(_279, _280, _281)));
    float _3545 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_282);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _486 = (1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _487 = _480 * _467;
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _825;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _550 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _554 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _558 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _583 = _515 + _279;
        float _584 = _519 + _280;
        float _585 = _523 + _281;
        float _595 = fma(_585, cbModelParam._m0[26u].z, fma(_584, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _583)) - _550;
        float _596 = fma(_585, cbModelParam._m0[27u].z, fma(_584, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _583)) - _554;
        float _597 = fma(_585, cbModelParam._m0[28u].z, fma(_584, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _583)) - _558;
        float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
        float _614 = ((_601 * _595) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_550 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _615 = ((_601 * _596) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_554 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _616 = ((_601 * _597) / cbModelParam._m0[34u].z) + ((((((_558 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_614, _615, _616), 0.0);
        float _653 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_619.x + (-0.5));
        float _655 = _653 * (_619.y + (-0.5));
        float _656 = _653 * (_619.z + (-0.5));
        float _663 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_626.x + (-0.5));
        float _665 = _663 * (_626.y + (-0.5));
        float _666 = _663 * (_626.z + (-0.5));
        float _673 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_633.x + (-0.5));
        float _675 = _673 * (_633.y + (-0.5));
        float _676 = _673 * (_633.z + (-0.5));
        float _683 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_640.x + (-0.5));
        float _685 = _683 * (_640.y + (-0.5));
        float _686 = _683 * (_640.z + (-0.5));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = _654 * 0.5;
        float _691 = _664 * 0.5;
        float _692 = _674 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _707 = (dot(vec3(_279, _280, _281), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _717 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _719 = _718 * 2.0;
        float _723 = (1.0 - _718) / (_718 + 1.0);
        float _3593 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _733 = ((((1.0 - _724) * (_719 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_719 + 1.0))) + _724) * _687;
        float _734 = _655 * 0.5;
        float _735 = _665 * 0.5;
        float _736 = _675 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _750 = (dot(vec3(_279, _280, _281), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _759 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3626 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_761 + 1.0))) + _766) * _688;
        float _776 = _656 * 0.5;
        float _777 = _666 * 0.5;
        float _778 = _676 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_279, _280, _281), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3659 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_803 + 1.0))) + _808) * _689;
        _825 = _656;
        _827 = _655;
        _828 = _654;
        _829 = _666;
        _830 = _665;
        _831 = _664;
        _832 = _676;
        _833 = _675;
        _834 = _674;
        _835 = _689;
        _836 = _688;
        _837 = _687;
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
    }
    else
    {
        _825 = _826;
        _827 = _826;
        _828 = _826;
        _829 = _826;
        _830 = _826;
        _831 = _826;
        _832 = _826;
        _833 = _826;
        _834 = _826;
        _835 = _826;
        _836 = _826;
        _837 = _826;
        _838 = 0.0;
        _839 = 0.0;
        _840 = 0.0;
    }
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _866 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _870 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _874 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _897 = _515 + _279;
        float _898 = _519 + _280;
        float _899 = _523 + _281;
        float _909 = fma(_899, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897)) - _866;
        float _910 = fma(_899, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897)) - _870;
        float _911 = fma(_899, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897)) - _874;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_866 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_870 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[35u].z) + ((((((_874 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _965 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_932.x + (-0.5));
        float _967 = _965 * (_932.y + (-0.5));
        float _968 = _965 * (_932.z + (-0.5));
        float _975 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_939.x + (-0.5));
        float _977 = _975 * (_939.y + (-0.5));
        float _978 = _975 * (_939.z + (-0.5));
        float _985 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_946.x + (-0.5));
        float _987 = _985 * (_946.y + (-0.5));
        float _988 = _985 * (_946.z + (-0.5));
        float _995 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_953.x + (-0.5));
        float _997 = _995 * (_953.y + (-0.5));
        float _998 = _995 * (_953.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_279, _280, _281), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3722 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1029 + 1.0))) + _1034) * _999;
        float _1044 = _967 * 0.5;
        float _1045 = _977 * 0.5;
        float _1046 = _987 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_279, _280, _281), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3755 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1071 + 1.0))) + _1076) * _1000;
        float _1086 = _968 * 0.5;
        float _1087 = _978 * 0.5;
        float _1088 = _988 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_279, _280, _281), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3788 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1113 + 1.0))) + _1118) * _1001;
        _1135 = _968;
        _1136 = _967;
        _1137 = _966;
        _1138 = _978;
        _1139 = _977;
        _1140 = _976;
        _1141 = _988;
        _1142 = _987;
        _1143 = _986;
        _1144 = _1001;
        _1145 = _1000;
        _1146 = _999;
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1148 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1149 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _826;
        _1136 = _826;
        _1137 = _826;
        _1138 = _826;
        _1139 = _826;
        _1140 = _826;
        _1141 = _826;
        _1142 = _826;
        _1143 = _826;
        _1144 = _826;
        _1145 = _826;
        _1146 = _826;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _838)) + _838;
    float _1160 = (cbModelParam._m0[1u].x * (_1148 - _839)) + _839;
    float _1161 = (cbModelParam._m0[1u].x * (_1149 - _840)) + _840;
    float _1182 = fma(_1161, cbSceneParam._m0[89u].z, fma(_1160, cbSceneParam._m0[89u].y, _1159 * cbSceneParam._m0[89u].x));
    float _1185 = fma(_1161, cbSceneParam._m0[90u].z, fma(_1160, cbSceneParam._m0[90u].y, _1159 * cbSceneParam._m0[90u].x));
    float _1188 = fma(_1161, cbSceneParam._m0[91u].z, fma(_1160, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1159));
    float _1203 = _459 * 0.5;
    float _1204 = _460 * 0.5;
    float _1205 = _461 * 0.5;
    float _1206 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1137, _1140, _1143, _1146));
    float _1209 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1136, _1139, _1142, _1145));
    float _1212 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1246;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1219 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_825, _829, _832, _835));
        float _1223 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_827, _830, _833, _836));
        float _1227 = dot(vec4(_1203, _1204, _1205, 1.0), vec4(_828, _831, _834, _837));
        float _1234 = dot(vec4(cbModelParam._m0[39u]), vec4(_1203, _1204, _1205, 1.0));
        _1246 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1246 = 1.0;
    }
    float _1257;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1248 = dot(vec4(cbModelParam._m0[40u]), vec4(_1203, _1204, _1205, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1261 = (_1257 * cbModelParam._m0[1u].x) + (_1246 * (1.0 - cbModelParam._m0[1u].x));
    float _1271 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _282);
    float _1272 = isnan(_1271) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1271 : min(cbModelParam._m0[25u].z, _1271));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1321 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1325 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1329 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1332 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1335 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1338 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1366;
        if (_1332 > 0.0)
        {
            _1366 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1366 = frontier_phi_16_14_ladder;
        }
        float _1542;
        if (_1335 > 0.0)
        {
            _1542 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1542 = frontier_phi_25_21_ladder;
        }
        float _1838;
        if (_1338 > 0.0)
        {
            _1838 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1838 = frontier_phi_37_32_ladder;
        }
        float _1840 = isnan(_1542) ? _1366 : (isnan(_1366) ? _1542 : min(_1366, _1542));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1332) + _1321;
        float _1846 = (_1841 * _1335) + _1325;
        float _1847 = (_1841 * _1338) + _1329;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1272);
            frontier_phi_15_37_ladder = _1992.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1992.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1992.z * cbModelParam._m0[1u].y;
        }
        _1354 = frontier_phi_15_37_ladder_1;
        _1356 = frontier_phi_15_37_ladder;
        _1358 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1272);
        _1354 = _1342.x * cbModelParam._m0[1u].y;
        _1356 = _1342.y * cbModelParam._m0[1u].y;
        _1358 = _1342.z * cbModelParam._m0[1u].y;
    }
    float _1362 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _282);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1362 : min(cbModelParam._m0[25u].w, _1362));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1434 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1437 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1547;
        if (_1431 > 0.0)
        {
            _1547 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1547 = frontier_phi_27_23_ladder;
        }
        float _1865;
        if (_1434 > 0.0)
        {
            _1865 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1865 = frontier_phi_39_34_ladder;
        }
        float _2203;
        if (_1437 > 0.0)
        {
            _2203 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2203 = frontier_phi_49_46_ladder;
        }
        float _2205 = isnan(_1865) ? _1547 : (isnan(_1547) ? _1865 : min(_1547, _1865));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1431) + _1420;
        float _2211 = (_2206 * _1434) + _1424;
        float _2212 = (_2206 * _1437) + _1428;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1363);
            frontier_phi_24_49_ladder = _2334.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2334.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2334.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_24_49_ladder_2;
        _1458 = frontier_phi_24_49_ladder_1;
        _1460 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1363);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1473 = (((_486 * _436) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1475 = (((_486 * _438) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1477 = (((_486 * _439) + _487) * _451) * ((cbModelParam._m0[1u].w * (_1460 - _1358)) + _1358);
    float _1480 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, _1473 * cbSceneParam._m0[91u].x));
    float _1521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1525 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1534 = _1521 / _1533;
    float _1535 = _1525 / _1533;
    float _1536 = _1529 / _1533;
    float _1683;
    float _1684;
    float _1685;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1563 = ((uint(_1536 > cbSceneParam._m0[59u].y) + uint(_1536 > cbSceneParam._m0[59u].x)) + uint(_1536 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1564 = _1563 + 43u;
        uint _1572 = _1563 + 44u;
        uint _1580 = _1563 + 45u;
        uint _1588 = _1563 + 46u;
        float _1599 = fma(_1533, cbSceneParam._m0[_1564].w, fma(_1529, cbSceneParam._m0[_1564].z, fma(_1525, cbSceneParam._m0[_1564].y, _1521 * cbSceneParam._m0[_1564].x)));
        float _1603 = fma(_1533, cbSceneParam._m0[_1572].w, fma(_1529, cbSceneParam._m0[_1572].z, fma(_1525, cbSceneParam._m0[_1572].y, _1521 * cbSceneParam._m0[_1572].x)));
        float _1611 = fma(_1533, cbSceneParam._m0[_1588].w, fma(_1529, cbSceneParam._m0[_1588].z, fma(_1525, cbSceneParam._m0[_1588].y, _1521 * cbSceneParam._m0[_1588].x)));
        float _1616 = cbSceneParam._m0[33u].z * _1611;
        float _1618 = cbSceneParam._m0[33u].w * _1611;
        float _1621 = fma(_1533, cbSceneParam._m0[_1580].w, fma(_1529, cbSceneParam._m0[_1580].z, fma(_1525, cbSceneParam._m0[_1580].y, _1521 * cbSceneParam._m0[_1580].x))) / _1611;
        float _1669 = (cbSceneParam._m0[33u].x - sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536))) * cbSceneParam._m0[33u].y;
        float _3914 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1676 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1616 + _1599) / _1611, (_1618 + _1603) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1618 + _1599) / _1611, (_1603 - _1616) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1599 - _1616) / _1611, (_1603 - _1618) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1599 - _1618) / _1611, (_1616 + _1603) / _1611), _1621), 0.0)).x), vec4(0.25)));
        _1683 = 1.0 - (_1676 * cbSceneParam._m0[34u].x);
        _1684 = 1.0 - (_1676 * cbSceneParam._m0[34u].y);
        _1685 = 1.0 - (_1676 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1683 = 1.0;
        _1684 = 1.0;
        _1685 = 1.0;
    }
    float _1749;
    float _1751;
    float _1753;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1737 = fma(_1533, cbSceneParam._m0[63u].w, fma(_1529, cbSceneParam._m0[63u].z, fma(_1525, cbSceneParam._m0[63u].y, _1521 * cbSceneParam._m0[63u].x)));
        float _1738 = fma(_1533, cbSceneParam._m0[60u].w, fma(_1529, cbSceneParam._m0[60u].z, fma(_1525, cbSceneParam._m0[60u].y, _1521 * cbSceneParam._m0[60u].x))) / _1737;
        float _1739 = fma(_1533, cbSceneParam._m0[61u].w, fma(_1529, cbSceneParam._m0[61u].z, fma(_1525, cbSceneParam._m0[61u].y, _1521 * cbSceneParam._m0[61u].x))) / _1737;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1738 >= cbSceneParam._m0[64u].x) && (_1739 >= cbSceneParam._m0[64u].y)) && (_1738 <= cbSceneParam._m0[64u].z)) && (_1739 <= cbSceneParam._m0[64u].w))
        {
            float _1878 = fma(_1533, cbSceneParam._m0[62u].w, fma(_1529, cbSceneParam._m0[62u].z, fma(_1525, cbSceneParam._m0[62u].y, _1521 * cbSceneParam._m0[62u].x))) / _1737;
            float _1882 = isnan(cbSceneParam._m0[41u].w) ? _1878 : (isnan(_1878) ? cbSceneParam._m0[41u].w : max(_1878, cbSceneParam._m0[41u].w));
            float _1925 = (cbSceneParam._m0[33u].x - sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536))) * cbSceneParam._m0[33u].y;
            float _3930 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
            float _1932 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1738, cbSceneParam._m0[33u].w + _1739), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1738, _1739 - cbSceneParam._m0[33u].z), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1738 - cbSceneParam._m0[33u].z, _1739 - cbSceneParam._m0[33u].w), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1738 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1739), _1882), 0.0)).x), vec4(0.25)));
            float _1936 = 1.0 - (_1932 * cbSceneParam._m0[34u].x);
            float _1937 = 1.0 - (_1932 * cbSceneParam._m0[34u].y);
            float _1938 = 1.0 - (_1932 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1937) ? _1684 : (isnan(_1684) ? _1937 : min(_1684, _1937));
            frontier_phi_36_35_ladder_1 = isnan(_1938) ? _1685 : (isnan(_1685) ? _1938 : min(_1685, _1938));
            frontier_phi_36_35_ladder_2 = isnan(_1936) ? _1683 : (isnan(_1683) ? _1936 : min(_1683, _1936));
        }
        else
        {
            frontier_phi_36_35_ladder = _1684;
            frontier_phi_36_35_ladder_1 = _1685;
            frontier_phi_36_35_ladder_2 = _1683;
        }
        _1749 = frontier_phi_36_35_ladder_2;
        _1751 = frontier_phi_36_35_ladder;
        _1753 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1749 = _1683;
        _1751 = _1684;
        _1753 = _1685;
    }
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _451 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1797 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1801 = _1760 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_279, _280, _281));
    float _1815 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_279, _280, _281));
    float _3966 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _3977 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1820 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1822 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1829 = ((cbLight._m0[_1777].x * _1783) * _1822) + (((cbLight._m0[_1787].x * _1749) * _1797) * _1820);
    float _1830 = ((_1783 * cbLight._m0[_1777].y) * _1822) + (((cbLight._m0[_1787].y * _1751) * _1797) * _1820);
    float _1831 = ((_1783 * cbLight._m0[_1777].z) * _1822) + (((cbLight._m0[_1787].z * _1753) * _1797) * _1820);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1837)
    {
        _1939 = _1829;
        _1941 = _1830;
        _1943 = _1831;
    }
    else
    {
        uint _1947 = _1760 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _3988 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1966 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1829;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1830;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1831;
    }
    bool _1946 = _1835.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1946)
    {
        _2001 = _1939;
        _2003 = _1941;
        _2005 = _1943;
    }
    else
    {
        uint _2174 = _1760 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_279, _280, _281)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4004 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2193 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2001 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1939;
        _2003 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1941;
        _2005 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1943;
    }
    uint _2008 = _1760 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _282) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1760].x + _361;
    float _2024 = cbLight._m0[_1760].y + _362;
    float _2025 = cbLight._m0[_1760].z + _363;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1760].xyz));
    float _4020 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2037 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _2038 = dot(vec3(_279, _280, _281), vec3(_2030, _2031, _2032));
    float _4042 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_2030, _2031, _2032));
    float _4053 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
    float _2059 = 0.959999978542327880859375 - _433;
    float _2061 = 0.959999978542327880859375 - _434;
    float _2062 = 0.959999978542327880859375 - _435;
    float _2069 = 1.0 - _2022;
    float _2080 = (0.5 / (((_2037 * ((_2036 * _2069) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2069) + _2022) * _2036))) * _2036;
    float _4064 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2096 = _1760 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _282) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1801].x + _361;
    float _2110 = cbLight._m0[_1801].y + _362;
    float _2111 = cbLight._m0[_1801].z + _363;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_1801].xyz));
    float _4075 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2123 = dot(vec3(_279, _280, _281), vec3(_2116, _2117, _2118));
    float _4086 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_2116, _2117, _2118));
    float _4097 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
    float _2149 = 1.0 - _2108;
    float _2159 = (0.5 / (((_2037 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2149) + _2108) * _2122))) * _2122;
    float _4108 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2171 = (((((_2142 * _2059) + _436) * cbLight._m0[_2096].x) * _2161) * _1783) + ((((cbLight._m0[_2008].x * _1749) * ((_2058 * _2059) + _436)) * _2082) * _1797);
    float _2172 = (((((_2142 * _2061) + _438) * cbLight._m0[_2096].y) * _2161) * _1783) + ((((cbLight._m0[_2008].y * _1751) * ((_2058 * _2061) + _438)) * _2082) * _1797);
    float _2173 = (((((_2142 * _2062) + _439) * cbLight._m0[_2096].z) * _2161) * _1783) + ((((cbLight._m0[_2008].z * _1753) * ((_2058 * _2062) + _439)) * _2082) * _1797);
    float _2229;
    float _2231;
    float _2233;
    if (_1837)
    {
        _2229 = _2171;
        _2231 = _2172;
        _2233 = _2173;
    }
    else
    {
        uint _2235 = _1760 + 2u;
        uint _2239 = _1760 + 10u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _282) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _361;
        float _2256 = cbLight._m0[_2235].y + _362;
        float _2257 = cbLight._m0[_2235].z + _363;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2235].xyz));
        float _4119 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2269 = dot(vec3(_279, _280, _281), vec3(_2262, _2263, _2264));
        float _4130 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4141 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
        float _2295 = 1.0 - _2254;
        float _2305 = (0.5 / (((_2037 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2295) + _2254) * _2268))) * _2268;
        float _4152 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2229 = (((((_2288 * _2059) + _436) * cbLight._m0[_2239].x) * _2307) * _2308) + _2171;
        _2231 = (((((_2288 * _2061) + _438) * cbLight._m0[_2239].y) * _2307) * _2308) + _2172;
        _2233 = (((((_2288 * _2062) + _439) * cbLight._m0[_2239].z) * _2307) * _2308) + _2173;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1946)
    {
        _2339 = _2229;
        _2341 = _2231;
        _2343 = _2233;
    }
    else
    {
        uint _2350 = _1760 + 3u;
        uint _2354 = _1760 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _282) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _361;
        float _2371 = cbLight._m0[_2350].y + _362;
        float _2372 = cbLight._m0[_2350].z + _363;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_279, _280, _281), vec3(cbLight._m0[_2350].xyz));
        float _4168 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2384 = dot(vec3(_279, _280, _281), vec3(_2377, _2378, _2379));
        float _4179 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4190 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2037 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2410) + _2369) * _2383))) * _2383;
        float _4201 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2339 = (((((_2403 * _2059) + _436) * cbLight._m0[_2354].x) * _2422) * _2423) + _2229;
        _2341 = (((((_2403 * _2061) + _438) * cbLight._m0[_2354].y) * _2422) * _2423) + _2231;
        _2343 = (((((_2403 * _2062) + _439) * cbLight._m0[_2354].z) * _2422) * _2423) + _2233;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1758.y == 0u)
    {
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2445)));
        float _2466 = (log2(_1536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            uint _2705 = 0u;
            uint _2714;
            bool _2715;
            for (;;)
            {
                _2714 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                _2715 = _2714 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2715)
                {
                    frontier_phi_68_pred = _2704;
                    frontier_phi_68_pred_1 = _2703;
                    frontier_phi_68_pred_2 = _2702;
                    frontier_phi_68_pred_3 = _2700;
                    frontier_phi_68_pred_4 = _2699;
                    frontier_phi_68_pred_5 = _2701;
                }
                else
                {
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    uint _2829;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2714;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    for (;;)
                    {
                        uint _2833 = uint(findLSB(_2829)) + (_2705 << 5u);
                        uint _2830 = (_2829 + 4294967295u) & _2829;
                        uint _2835 = _2833 * 48u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2855 = (_2833 * 48u) + 4u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2874 = (_2833 * 48u) + 8u;
                        vec3 _2885 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x));
                        float _2889 = _2849.x - _1534;
                        float _2890 = _2849.y - _1535;
                        float _2891 = _2849.z - _1536;
                        float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                        float _2895 = inversesqrt(_2892);
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2899 = dot(vec3(_391, _394, _397), vec3(_2896, _2897, _2898));
                        float _2904 = 1.0 - (_2892 * _2849.w);
                        float _4227 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2906 = sqrt(_2892) * _2868.w;
                        float _2909 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2899) + _2910;
                        float _2916 = _2906 * _2906;
                        float _2920 = ((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2905) / ((_2916 * 0.699999988079071044921875) + 1.0);
                        float _2924 = (-0.0) - _1534;
                        float _2925 = (-0.0) - _1535;
                        float _2926 = (-0.0) - _1536;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2940 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _467;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2931 + _2896;
                        float _2952 = _2932 + _2897;
                        float _2953 = _2933 + _2898;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_391, _394, _397), vec3(_2931, _2932, _2933));
                        float _4243 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2965 = dot(vec3(_391, _394, _397), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4254 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2909 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2899) + _2974;
                        float _4265 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4276 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_2972 * _2972) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125))) * _2905;
                        _2758 = (_2920 * _2868.x) + _2826;
                        _2759 = (_2920 * _2868.y) + _2827;
                        _2760 = (_2920 * _2868.z) + _2828;
                        _2755 = (_3000 * _2885.x) + _2823;
                        _2756 = (_3000 * _2885.y) + _2824;
                        _2757 = (_3000 * _2885.z) + _2825;
                        if (_2830 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2830;
                        }
                    }
                    frontier_phi_68_pred = _2760;
                    frontier_phi_68_pred_1 = _2759;
                    frontier_phi_68_pred_2 = _2758;
                    frontier_phi_68_pred_3 = _2756;
                    frontier_phi_68_pred_4 = _2755;
                    frontier_phi_68_pred_5 = _2757;
                }
                _2566 = frontier_phi_68_pred;
                _2564 = frontier_phi_68_pred_1;
                _2562 = frontier_phi_68_pred_2;
                _2558 = frontier_phi_68_pred_3;
                _2556 = frontier_phi_68_pred_4;
                _2560 = frontier_phi_68_pred_5;
                uint _2706 = _2705 + 1u;
                if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2566;
                    _2705 = _2706;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((4294967295u << _2572) & _2476) == 0u)
        {
            _2667 = _2555;
            _2669 = _2557;
            _2671 = _2559;
            _2673 = _2561;
            _2675 = _2563;
            _2677 = _2565;
        }
        else
        {
            float _2692 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
            float _2693 = _2692 * _1534;
            float _2694 = _2692 * _1535;
            float _2695 = _2692 * _1536;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                float _2811 = _2565;
                uint _2812 = _2572;
                uint _2821;
                bool _2822;
                for (;;)
                {
                    _2821 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                    _2822 = _2821 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2822)
                    {
                        frontier_phi_74_pred = _2808;
                        frontier_phi_74_pred_1 = _2807;
                        frontier_phi_74_pred_2 = _2806;
                        frontier_phi_74_pred_3 = _2811;
                        frontier_phi_74_pred_4 = _2810;
                        frontier_phi_74_pred_5 = _2809;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3018 = _2806;
                        float _3019 = _2807;
                        float _3020 = _2808;
                        float _3021 = _2809;
                        float _3022 = _2810;
                        float _3023 = _2811;
                        uint _3024 = _2821;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3094;
                        vec4 _3110;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3035 = ((_2812 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3081 = (_3035 * 40u) + 16u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3097 = (_3035 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3035 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3035 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_1536, _3145.z, fma(_1535, _3145.y, _3145.x * _1534)) + _3145.w;
                            _3158 = !((fma(_1536, _3126.z, fma(_1535, _3126.y, _3126.x * _1534)) + _3126.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3050.x - _1534;
                                float _3186 = _3050.y - _1535;
                                float _3187 = _3050.z - _1536;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3051 * _3051));
                                float _4287 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3203 = sqrt(_3188) * _3066.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_391, _394, _397))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_1536, _3094.z, fma(_1535, _3094.y, _3094.x * _1534)) + _3094.w) / _3157;
                                float _3217 = (fma(_1536, _3110.z, fma(_1535, _3110.y, _3110.x * _1534)) + _3110.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4303 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _467;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2693;
                                float _3247 = _3193 - _2694;
                                float _3248 = _3194 - _2695;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2693, (-0.0) - _2694, (-0.0) - _2695));
                                float _4314 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3260 = dot(vec3(_391, _394, _397), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4325 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_391, _394, _397), vec3(_3192, _3193, _3194))) + _3269;
                                float _4336 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4347 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3297 * _3078.z;
                                frontier_phi_80_pred_1 = _3297 * _3078.y;
                                frontier_phi_80_pred_2 = _3297 * _3078.x;
                                frontier_phi_80_pred_3 = _3223 * _3066.z;
                                frontier_phi_80_pred_4 = _3223 * _3066.y;
                                frontier_phi_80_pred_5 = _3223 * _3066.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_80_pred;
                            _3302 = frontier_phi_80_pred_1;
                            _3301 = frontier_phi_80_pred_2;
                            _3306 = frontier_phi_80_pred_3;
                            _3305 = frontier_phi_80_pred_4;
                            _3304 = frontier_phi_80_pred_5;
                            _3008 = _3304 + _3021;
                            _3009 = _3305 + _3022;
                            _3010 = _3306 + _3023;
                            _3005 = _3301 + _3018;
                            _3006 = _3302 + _3019;
                            _3007 = _3303 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3007;
                        frontier_phi_74_pred_1 = _3006;
                        frontier_phi_74_pred_2 = _3005;
                        frontier_phi_74_pred_3 = _3010;
                        frontier_phi_74_pred_4 = _3009;
                        frontier_phi_74_pred_5 = _3008;
                    }
                    _2672 = frontier_phi_74_pred;
                    _2670 = frontier_phi_74_pred_1;
                    _2668 = frontier_phi_74_pred_2;
                    _2678 = frontier_phi_74_pred_3;
                    _2676 = frontier_phi_74_pred_4;
                    _2674 = frontier_phi_74_pred_5;
                    uint _2813 = _2812 + 1u;
                    if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2806 = _2668;
                        _2807 = _2670;
                        _2808 = _2672;
                        _2809 = _2674;
                        _2810 = _2676;
                        _2811 = _2678;
                        _2812 = _2813;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2676;
                frontier_phi_62_63_ladder_1 = _2674;
                frontier_phi_62_63_ladder_2 = _2672;
                frontier_phi_62_63_ladder_3 = _2678;
                frontier_phi_62_63_ladder_4 = _2670;
                frontier_phi_62_63_ladder_5 = _2668;
            }
            else
            {
                frontier_phi_62_63_ladder = _2563;
                frontier_phi_62_63_ladder_1 = _2561;
                frontier_phi_62_63_ladder_2 = _2559;
                frontier_phi_62_63_ladder_3 = _2565;
                frontier_phi_62_63_ladder_4 = _2557;
                frontier_phi_62_63_ladder_5 = _2555;
            }
            _2667 = frontier_phi_62_63_ladder_5;
            _2669 = frontier_phi_62_63_ladder_4;
            _2671 = frontier_phi_62_63_ladder_2;
            _2673 = frontier_phi_62_63_ladder_1;
            _2675 = frontier_phi_62_63_ladder;
            _2677 = frontier_phi_62_63_ladder_3;
        }
        float _2682 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2488 = (_2682 * _2673) + _2001;
        _2490 = (_2682 * _2675) + _2003;
        _2492 = (_2682 * _2677) + _2005;
        _2494 = ((_2667 * _436) * _2682) + _2339;
        _2496 = ((_2669 * _438) * _2682) + _2341;
        _2498 = ((_2671 * _439) * _2682) + _2343;
    }
    else
    {
        _2488 = _2001;
        _2490 = _2003;
        _2492 = _2005;
        _2494 = _2339;
        _2496 = _2341;
        _2498 = _2343;
    }
    float _4363 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4374 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4385 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    uint _2518 = _410 + 6u;
    float _2526 = _369 / cbSceneParam._m0[86u].x;
    float _2527 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2541 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2543 = _2541.x;
    float _2544 = _2541.y;
    float _2545 = _2541.z;
    float _2546 = _2541.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2581 = _2580 / _302;
        float _2592 = _2581 * _354;
        float _2593 = _355 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2595 = _2581 * _356;
        float _2597 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2593;
        float _2605 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2768;
        if (abs((_2594 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2768 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2728 = 1.0 / cbSceneParam._m0[80u].x;
            float _2729 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2730 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            _2768 = ((abs(_2605 / _2594) * cbSceneParam._m0[80u].y) * ((((_2739 - _2740) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))))) * _2728)) - ((exp2(_2615 * _2739) - exp2(_2615 * _2740)) * _2728))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2770 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, 1.0), 0.0);
        float _2779 = exp2((_2768 * (-1.44269502162933349609375)) * (1.0 - _2770.w));
        float _2780 = log2(_2779);
        float _2796 = log2(_2546);
        _2617 = (exp2(_2796 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].x)) * _2770.x) / cbSceneParam._m0[78u].x)) + _2543;
        _2619 = (exp2(_2796 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].y)) * _2770.y) / cbSceneParam._m0[78u].y)) + _2544;
        _2621 = (exp2(_2796 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].z)) * _2770.z) / cbSceneParam._m0[78u].z)) + _2545;
        _2623 = _2779 * _2546;
    }
    else
    {
        _2617 = _2543;
        _2619 = _2544;
        _2621 = _2545;
        _2623 = _2546;
    }
    float _2635 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2636 = _2635 == 3.0;
    float _2637 = log2(_2623);
    float _2644 = exp2(_2637 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2488 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _451))) + ((_2494 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2637 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2490 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _451))) + ((_2496 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2646 = exp2(_2637 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2492 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _451))) + ((_2498 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1261)) * cbPerFrame._m0[3u].x));
    float _2655 = (_2635 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2655 * (_2636 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.y = _2655 * (_2636 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.z = _2655 * (_2636 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.w = cbInstanceData._m0[_2518].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2518].w;
}


