#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _822;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _223 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _223.x;
    float _227 = _223.y;
    float _228 = _223.z;
    vec4 _244 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3159 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))));
    float _264 = fma(_261, _207, fma(_254, _199 * TANGENT.x, (_185 * _178) * _252));
    float _267 = fma(_261, _208, fma(_254, _199 * TANGENT.y, (_185 * _179) * _252));
    float _270 = fma(_261, _209, fma(_254, _199 * TANGENT.z, (_185 * _180) * _252));
    float _274 = inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270)));
    float _275 = _274 * _264;
    float _276 = _274 * _267;
    float _277 = _274 * _270;
    float _3170 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _278 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    float _3181 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3192 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3203 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3214 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _282 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
    float _298 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _340 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _350 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _340);
    float _351 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _340);
    float _352 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _340);
    float _356 = inversesqrt(dot(vec3(_350, _351, _352), vec3(_350, _351, _352)));
    float _357 = _350 * _356;
    float _358 = _351 * _356;
    float _359 = _352 * _356;
    float _365 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _366 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _387 = fma(_277, cbSceneParam._m0[5u].z, fma(_276, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _275));
    float _390 = fma(_277, cbSceneParam._m0[6u].z, fma(_276, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _275));
    float _393 = fma(_277, cbSceneParam._m0[7u].z, fma(_276, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _275));
    uint _406 = uint(roundEven(NORMAL.w)) * 13u;
    uint _409 = (_406 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _415 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0)))) * cbInstanceData._m0[_409].x;
    float _416 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0)))) * cbInstanceData._m0[_409].y;
    float _417 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0)))) * cbInstanceData._m0[_409].z;
    float _3225 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _3236 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _421 = 1.0 - _282;
    float _422 = _418 * _421;
    float _423 = _419 * _421;
    float _424 = _420 * _421;
    float _429 = (_418 + (-0.039999999105930328369140625)) * _282;
    float _430 = (_419 + (-0.039999999105930328369140625)) * _282;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _282;
    float _432 = _429 + 0.039999999105930328369140625;
    float _434 = _430 + 0.039999999105930328369140625;
    float _435 = _431 + 0.039999999105930328369140625;
    vec4 _444 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _365, cbSceneParam._m0[86u].y * _366));
    float _447 = _444.x * TEXCOORD.z;
    float _448 = dot(vec3(_275, _276, _277), vec3(_357, _358, _359));
    float _451 = _448 * 2.0;
    float _455 = (_451 * _275) - _357;
    float _456 = (_451 * _276) - _358;
    float _457 = (_451 * _277) - _359;
    float _461 = abs(dot(vec3(_357, _358, _359), vec3(_275, _276, _277)));
    float _3258 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _463 = sqrt(_278);
    float _476 = exp2((_463 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_463 * 3.0));
    float _482 = (1.0 - _476) * ((_463 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _483 = _476 * _463;
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _821;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _546 = fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511));
        float _550 = fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511));
        float _554 = fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511));
        float _579 = _511 + _275;
        float _580 = _515 + _276;
        float _581 = _519 + _277;
        float _591 = fma(_581, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579)) - _546;
        float _592 = fma(_581, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579)) - _550;
        float _593 = fma(_581, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579)) - _554;
        float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
        float _610 = ((_597 * _591) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_546 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_597 * _592) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_550 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_597 * _593) / cbModelParam._m0[34u].z) + ((((((_554 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        float _649 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_615.x + (-0.5));
        float _651 = _649 * (_615.y + (-0.5));
        float _652 = _649 * (_615.z + (-0.5));
        float _659 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_622.x + (-0.5));
        float _661 = _659 * (_622.y + (-0.5));
        float _662 = _659 * (_622.z + (-0.5));
        float _669 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_629.x + (-0.5));
        float _671 = _669 * (_629.y + (-0.5));
        float _672 = _669 * (_629.z + (-0.5));
        float _679 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_636.x + (-0.5));
        float _681 = _679 * (_636.y + (-0.5));
        float _682 = _679 * (_636.z + (-0.5));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = _650 * 0.5;
        float _687 = _660 * 0.5;
        float _688 = _670 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _703 = (dot(vec3(_275, _276, _277), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _713 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3306 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_715 + 1.0))) + _720) * _683;
        float _730 = _651 * 0.5;
        float _731 = _661 * 0.5;
        float _732 = _671 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_275, _276, _277), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3339 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_757 + 1.0))) + _762) * _684;
        float _772 = _652 * 0.5;
        float _773 = _662 * 0.5;
        float _774 = _672 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_275, _276, _277), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3372 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_799 + 1.0))) + _804) * _685;
        _821 = _652;
        _823 = _651;
        _824 = _650;
        _825 = _662;
        _826 = _661;
        _827 = _660;
        _828 = _672;
        _829 = _671;
        _830 = _670;
        _831 = _685;
        _832 = _684;
        _833 = _683;
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
    }
    else
    {
        _821 = _822;
        _823 = _822;
        _824 = _822;
        _825 = _822;
        _826 = _822;
        _827 = _822;
        _828 = _822;
        _829 = _822;
        _830 = _822;
        _831 = _822;
        _832 = _822;
        _833 = _822;
        _834 = 0.0;
        _835 = 0.0;
        _836 = 0.0;
    }
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _862 = fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511));
        float _866 = fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511));
        float _870 = fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511));
        float _893 = _511 + _275;
        float _894 = _515 + _276;
        float _895 = _519 + _277;
        float _905 = fma(_895, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _893)) - _862;
        float _906 = fma(_895, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _893)) - _866;
        float _907 = fma(_895, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _893)) - _870;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_862 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_866 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[35u].z) + ((((((_870 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _961 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_928.x + (-0.5));
        float _963 = _961 * (_928.y + (-0.5));
        float _964 = _961 * (_928.z + (-0.5));
        float _971 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_935.x + (-0.5));
        float _973 = _971 * (_935.y + (-0.5));
        float _974 = _971 * (_935.z + (-0.5));
        float _981 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_942.x + (-0.5));
        float _983 = _981 * (_942.y + (-0.5));
        float _984 = _981 * (_942.z + (-0.5));
        float _991 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_949.x + (-0.5));
        float _993 = _991 * (_949.y + (-0.5));
        float _994 = _991 * (_949.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_275, _276, _277), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3435 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_1025 + 1.0))) + _1030) * _995;
        float _1040 = _963 * 0.5;
        float _1041 = _973 * 0.5;
        float _1042 = _983 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_275, _276, _277), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3468 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_1067 + 1.0))) + _1072) * _996;
        float _1082 = _964 * 0.5;
        float _1083 = _974 * 0.5;
        float _1084 = _984 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_275, _276, _277), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3501 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1109 + 1.0))) + _1114) * _997;
        _1131 = _964;
        _1132 = _963;
        _1133 = _962;
        _1134 = _974;
        _1135 = _973;
        _1136 = _972;
        _1137 = _984;
        _1138 = _983;
        _1139 = _982;
        _1140 = _997;
        _1141 = _996;
        _1142 = _995;
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _822;
        _1132 = _822;
        _1133 = _822;
        _1134 = _822;
        _1135 = _822;
        _1136 = _822;
        _1137 = _822;
        _1138 = _822;
        _1139 = _822;
        _1140 = _822;
        _1141 = _822;
        _1142 = _822;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1178 = fma(_1157, cbSceneParam._m0[89u].z, fma(_1156, cbSceneParam._m0[89u].y, _1155 * cbSceneParam._m0[89u].x));
    float _1181 = fma(_1157, cbSceneParam._m0[90u].z, fma(_1156, cbSceneParam._m0[90u].y, _1155 * cbSceneParam._m0[90u].x));
    float _1184 = fma(_1157, cbSceneParam._m0[91u].z, fma(_1156, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1155));
    float _1199 = _455 * 0.5;
    float _1200 = _456 * 0.5;
    float _1201 = _457 * 0.5;
    float _1202 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1205 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1208 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1242;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1215 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_821, _825, _828, _831));
        float _1219 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_823, _826, _829, _832));
        float _1223 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_824, _827, _830, _833));
        float _1230 = dot(vec4(cbModelParam._m0[39u]), vec4(_1199, _1200, _1201, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1230) ? 0.0 : (isnan(0.0) ? _1230 : max(0.0, _1230))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1253;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1244 = dot(vec4(cbModelParam._m0[40u]), vec4(_1199, _1200, _1201, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1257 = (_1253 * cbModelParam._m0[1u].x) + (_1242 * (1.0 - cbModelParam._m0[1u].x));
    float _1267 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _278);
    float _1268 = isnan(_1267) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1267 : min(cbModelParam._m0[25u].z, _1267));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1317 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1321 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1325 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1328 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _1331 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _1334 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _1362;
        if (_1328 > 0.0)
        {
            _1362 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1362 = frontier_phi_16_14_ladder;
        }
        float _1570;
        if (_1331 > 0.0)
        {
            _1570 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1570 = frontier_phi_25_21_ladder;
        }
        float _1824;
        if (_1334 > 0.0)
        {
            _1824 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1824 = frontier_phi_37_32_ladder;
        }
        float _1826 = isnan(_1570) ? _1362 : (isnan(_1362) ? _1570 : min(_1362, _1570));
        float _1827 = isnan(_1824) ? _1826 : (isnan(_1826) ? _1824 : min(_1826, _1824));
        float _1831 = (_1827 * _1328) + _1317;
        float _1832 = (_1827 * _1331) + _1321;
        float _1833 = (_1827 * _1334) + _1325;
        float _1834 = _1827 * 9.9999997473787516355514526367188e-05;
        float _1836 = (-1.0) - _1834;
        float _1838 = _1834 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1833 > _1838) || ((_1833 < _1836) || ((_1832 > _1838) || ((_1832 < _1836) || ((_1831 < _1836) || (_1831 > _1838))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1833, cbModelParam._m0[9u].z, fma(_1832, cbModelParam._m0[9u].y, _1831 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1833, cbModelParam._m0[10u].z, fma(_1832, cbModelParam._m0[10u].y, _1831 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1833, cbModelParam._m0[11u].z, fma(_1832, cbModelParam._m0[11u].y, _1831 * cbModelParam._m0[11u].x))), _1268);
            frontier_phi_15_37_ladder = _1961.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1961.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1961.x * cbModelParam._m0[1u].y;
        }
        _1350 = frontier_phi_15_37_ladder_2;
        _1352 = frontier_phi_15_37_ladder_1;
        _1354 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _1268);
        _1350 = _1338.x * cbModelParam._m0[1u].y;
        _1352 = _1338.y * cbModelParam._m0[1u].y;
        _1354 = _1338.z * cbModelParam._m0[1u].y;
    }
    float _1358 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _278);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1358 : min(cbModelParam._m0[25u].w, _1358));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1416 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1420 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1424 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1427 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1430 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1433 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1575;
        if (_1427 > 0.0)
        {
            _1575 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1575 = frontier_phi_27_23_ladder;
        }
        float _1851;
        if (_1430 > 0.0)
        {
            _1851 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1851 = frontier_phi_39_34_ladder;
        }
        float _2064;
        if (_1433 > 0.0)
        {
            _2064 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2064 = frontier_phi_48_45_ladder;
        }
        float _2066 = isnan(_1851) ? _1575 : (isnan(_1575) ? _1851 : min(_1575, _1851));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1427) + _1416;
        float _2072 = (_2067 * _1430) + _1420;
        float _2073 = (_2067 * _1433) + _1424;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2075 = (-1.0) - _2074;
        float _2077 = _2074 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2073 > _2077) || ((_2073 < _2075) || ((_2072 > _2077) || ((_2072 < _2075) || ((_2071 < _2075) || (_2071 > _2077))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2073, cbModelParam._m0[17u].z, fma(_2072, cbModelParam._m0[17u].y, _2071 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2073, cbModelParam._m0[18u].z, fma(_2072, cbModelParam._m0[18u].y, _2071 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2073, cbModelParam._m0[19u].z, fma(_2072, cbModelParam._m0[19u].y, _2071 * cbModelParam._m0[19u].x))), _1359);
            frontier_phi_24_48_ladder = _2271.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2271.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2271.x * cbModelParam._m0[1u].z;
        }
        _1452 = frontier_phi_24_48_ladder_2;
        _1454 = frontier_phi_24_48_ladder_1;
        _1456 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _1359);
        _1452 = _1436.x * cbModelParam._m0[1u].z;
        _1454 = _1436.y * cbModelParam._m0[1u].z;
        _1456 = _1436.z * cbModelParam._m0[1u].z;
    }
    float _1469 = (((_482 * _432) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1471 = (((_482 * _434) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1473 = (((_482 * _435) + _483) * _447) * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1476 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, _1469 * cbSceneParam._m0[91u].x));
    uvec4 _1492 = floatBitsToUint(cbInstanceData._m0[_406 + 5u]);
    uint _1494 = _1492.x * 14u;
    uint _1495 = _1494 + 13u;
    float _1502 = _447 + (-1.0);
    float _1507 = (cbLight._m0[_1495].x * _1502) + 1.0;
    float _1508 = (cbLight._m0[_1495].y * _1502) + 1.0;
    float _1509 = (cbLight._m0[_1495].z * _1502) + 1.0;
    float _1510 = (cbLight._m0[_1495].w * _1502) + 1.0;
    uint _1511 = _1494 + 5u;
    float _1517 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
    uint _1521 = _1494 + 4u;
    float _1528 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1532 = _1494 | 1u;
    float _1543 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_275, _276, _277));
    float _1546 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_275, _276, _277));
    float _3637 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _3648 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1551 = (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.3183098733425140380859375;
    float _1553 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.3183098733425140380859375;
    float _1560 = ((cbLight._m0[_1511].x * _1517) * _1553) + ((cbLight._m0[_1521].x * _1528) * _1551);
    float _1561 = ((_1517 * cbLight._m0[_1511].y) * _1553) + ((_1528 * cbLight._m0[_1521].y) * _1551);
    float _1562 = ((_1517 * cbLight._m0[_1511].z) * _1553) + ((_1528 * cbLight._m0[_1521].z) * _1551);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1494 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1560;
        _1582 = _1561;
        _1584 = _1562;
    }
    else
    {
        uint _1588 = _1494 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1494 + 2u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3659 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1607 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1560;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1795 = _1494 + 7u;
        float _1811 = (dot(vec3(cbLight._m0[_1494 + 3u].xyz), vec3(_275, _276, _277)) * 0.5) + 0.5;
        float _1812 = _1811 * _1811;
        float _3675 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1814 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1625 = (((cbLight._m0[_1795].x * 0.3183098733425140380859375) * _1813) * _1814) + _1580;
        _1627 = (((cbLight._m0[_1795].y * 0.3183098733425140380859375) * _1813) * _1814) + _1582;
        _1629 = (((cbLight._m0[_1795].z * 0.3183098733425140380859375) * _1813) * _1814) + _1584;
    }
    uint _1632 = _1494 + 8u;
    float _1645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1494].w)) * _278) * 0.949999988079071044921875);
    float _1646 = _1645 * _1645;
    float _1647 = cbLight._m0[_1494].x + _357;
    float _1648 = cbLight._m0[_1494].y + _358;
    float _1649 = cbLight._m0[_1494].z + _359;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1654 = _1653 * _1647;
    float _1655 = _1653 * _1648;
    float _1656 = _1653 * _1649;
    float _1657 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1494].xyz));
    float _3691 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _1661 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1662 = dot(vec3(_275, _276, _277), vec3(_1654, _1655, _1656));
    float _3713 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_1654, _1655, _1656));
    float _3724 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1670 = _1646 * _1646;
    float _1674 = ((_1665 * _1665) * (_1670 + (-1.0))) + 1.0;
    float _1682 = exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0);
    float _1683 = 0.959999978542327880859375 - _429;
    float _1685 = 0.959999978542327880859375 - _430;
    float _1686 = 0.959999978542327880859375 - _431;
    float _1693 = 1.0 - _1646;
    float _1704 = (0.5 / (((_1661 * ((_1660 * _1693) + _1646)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1693) + _1646) * _1660))) * _1660;
    float _3735 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1670 / ((_1674 * _1674) * 3.141590118408203125));
    uint _1717 = _1494 + 9u;
    float _1728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _278) * 0.949999988079071044921875);
    float _1729 = _1728 * _1728;
    float _1730 = cbLight._m0[_1532].x + _357;
    float _1731 = cbLight._m0[_1532].y + _358;
    float _1732 = cbLight._m0[_1532].z + _359;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1737 = _1736 * _1730;
    float _1738 = _1736 * _1731;
    float _1739 = _1736 * _1732;
    float _1740 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1532].xyz));
    float _3746 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1744 = dot(vec3(_275, _276, _277), vec3(_1737, _1738, _1739));
    float _3757 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1737, _1738, _1739));
    float _3768 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1729 * _1729;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1763 = exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0);
    float _1770 = 1.0 - _1729;
    float _1780 = (0.5 / (((_1661 * ((_1743 * _1770) + _1729)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1770) + _1729) * _1743))) * _1743;
    float _3779 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1782 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    float _1792 = (((((_1763 * _1683) + _432) * cbLight._m0[_1717].x) * _1782) * _1517) + (((((_1682 * _1683) + _432) * cbLight._m0[_1632].x) * _1706) * _1528);
    float _1793 = (((((_1763 * _1685) + _434) * cbLight._m0[_1717].y) * _1782) * _1517) + (((((_1682 * _1685) + _434) * cbLight._m0[_1632].y) * _1706) * _1528);
    float _1794 = (((((_1763 * _1686) + _435) * cbLight._m0[_1717].z) * _1782) * _1517) + (((((_1682 * _1686) + _435) * cbLight._m0[_1632].z) * _1706) * _1528);
    float _1856;
    float _1858;
    float _1860;
    if (_1569)
    {
        _1856 = _1792;
        _1858 = _1793;
        _1860 = _1794;
    }
    else
    {
        uint _1862 = _1494 + 2u;
        uint _1866 = _1494 + 10u;
        float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _278) * 0.949999988079071044921875);
        float _1881 = _1880 * _1880;
        float _1882 = cbLight._m0[_1862].x + _357;
        float _1883 = cbLight._m0[_1862].y + _358;
        float _1884 = cbLight._m0[_1862].z + _359;
        float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
        float _1889 = _1888 * _1882;
        float _1890 = _1888 * _1883;
        float _1891 = _1888 * _1884;
        float _1892 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1862].xyz));
        float _3790 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1895 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1896 = dot(vec3(_275, _276, _277), vec3(_1889, _1890, _1891));
        float _3801 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1900 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_1889, _1890, _1891));
        float _3812 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1904 = _1881 * _1881;
        float _1908 = ((_1899 * _1899) * (_1904 + (-1.0))) + 1.0;
        float _1915 = exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0);
        float _1922 = 1.0 - _1881;
        float _1932 = (0.5 / (((_1661 * ((_1895 * _1922) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1922) + _1881) * _1895))) * _1895;
        float _3823 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1934 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1904 / ((_1908 * _1908) * 3.141590118408203125));
        float _1935 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1856 = (((((_1915 * _1683) + _432) * cbLight._m0[_1866].x) * _1934) * _1935) + _1792;
        _1858 = (((((_1915 * _1685) + _434) * cbLight._m0[_1866].y) * _1934) * _1935) + _1793;
        _1860 = (((((_1915 * _1686) + _435) * cbLight._m0[_1866].z) * _1934) * _1935) + _1794;
    }
    float _1970;
    float _1972;
    float _1974;
    if (_1587)
    {
        _1970 = _1856;
        _1972 = _1858;
        _1974 = _1860;
    }
    else
    {
        uint _1981 = _1494 + 3u;
        uint _1985 = _1494 + 11u;
        float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _278) * 0.949999988079071044921875);
        float _2000 = _1999 * _1999;
        float _2001 = cbLight._m0[_1981].x + _357;
        float _2002 = cbLight._m0[_1981].y + _358;
        float _2003 = cbLight._m0[_1981].z + _359;
        float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
        float _2008 = _2007 * _2001;
        float _2009 = _2007 * _2002;
        float _2010 = _2007 * _2003;
        float _2011 = dot(vec3(_275, _276, _277), vec3(cbLight._m0[_1981].xyz));
        float _3839 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2014 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _2015 = dot(vec3(_275, _276, _277), vec3(_2008, _2009, _2010));
        float _3850 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _2019 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2008, _2009, _2010));
        float _3861 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = _2000 * _2000;
        float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
        float _2034 = exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0);
        float _2041 = 1.0 - _2000;
        float _2051 = (0.5 / (((_1661 * ((_2014 * _2041) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _2041) + _2000) * _2014))) * _2014;
        float _3872 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2053 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
        float _2054 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1970 = (((((_2034 * _1683) + _432) * cbLight._m0[_1985].x) * _2053) * _2054) + _1856;
        _1972 = (((((_2034 * _1685) + _434) * cbLight._m0[_1985].y) * _2053) * _2054) + _1858;
        _1974 = (((((_2034 * _1686) + _435) * cbLight._m0[_1985].z) * _2053) * _2054) + _1860;
    }
    float _2188;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    if (_1492.y == 0u)
    {
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2129;
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2129;
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2129;
        uvec4 _2144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2145 = _2144.x;
        uint _2156 = uint((float(_2144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _366) / _2145))) + floor(float(uint(cbSceneParam._m0[85u].x * _365) / _2145)));
        float _2166 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2167 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        uint _2170 = uint(isnan(14.0) ? _2167 : (isnan(_2167) ? 14.0 : min(_2167, 14.0)));
        uvec4 _2175 = texelFetch(g_lightClusterGridBuffer, int(((_2170 << 2u) + (_2156 << 6u)) >> 2u));
        uint _2176 = _2175.x;
        uint _2177 = _2144.z;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        if (((((1u << ((_2177 >> 4u) & 15u)) + 4294967295u) & _2176) == 0u) || ((_2177 & 240u) == 0u))
        {
            _2276 = 0.0;
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
        }
        else
        {
            float _2277;
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            uint _2426 = 0u;
            uint _2435;
            bool _2436;
            for (;;)
            {
                _2435 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2426 << 2u)) >> 2u)).x;
                _2436 = _2435 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2436)
                {
                    frontier_phi_63_pred = _2425;
                    frontier_phi_63_pred_1 = _2424;
                    frontier_phi_63_pred_2 = _2423;
                    frontier_phi_63_pred_3 = _2422;
                    frontier_phi_63_pred_4 = _2421;
                    frontier_phi_63_pred_5 = _2420;
                }
                else
                {
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    uint _2550;
                    _2544 = _2420;
                    _2545 = _2421;
                    _2546 = _2422;
                    _2547 = _2423;
                    _2548 = _2424;
                    _2549 = _2425;
                    _2550 = _2435;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    for (;;)
                    {
                        uint _2554 = uint(findLSB(_2550)) + (_2426 << 5u);
                        uint _2551 = (_2550 + 4294967295u) & _2550;
                        uint _2556 = _2554 * 48u;
                        vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2556)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 3u)).x));
                        uint _2576 = (_2554 * 48u) + 4u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 3u)).x));
                        uint _2595 = (_2554 * 48u) + 8u;
                        vec3 _2606 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x));
                        float _2610 = _2570.x - _2130;
                        float _2611 = _2570.y - _2131;
                        float _2612 = _2570.z - _2132;
                        float _2613 = dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612));
                        float _2616 = inversesqrt(_2613);
                        float _2617 = _2616 * _2610;
                        float _2618 = _2616 * _2611;
                        float _2619 = _2616 * _2612;
                        float _2620 = dot(vec3(_387, _390, _393), vec3(_2617, _2618, _2619));
                        float _2625 = 1.0 - (_2613 * _2570.w);
                        float _3898 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2626 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2627 = sqrt(_2613) * _2589.w;
                        float _2630 = 1.39999997615814208984375 / (_2627 + 1.39999997615814208984375);
                        float _2631 = _2630 * _2630;
                        float _2634 = ((1.0 - _2631) * _2620) + _2631;
                        float _2637 = _2627 * _2627;
                        float _2641 = ((isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0))) * _2626) / ((_2637 * 0.699999988079071044921875) + 1.0);
                        float _2645 = (-0.0) - _2130;
                        float _2646 = (-0.0) - _2131;
                        float _2647 = (-0.0) - _2132;
                        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
                        float _2652 = _2651 * _2645;
                        float _2653 = _2651 * _2646;
                        float _2654 = _2651 * _2647;
                        float _2662 = exp2(log2(1.0 / ((_2637 * 3.5) + 5.0)) * 0.25);
                        float _2663 = 1.0 - _463;
                        float _2670 = sqrt(1.0 - ((1.0 - (_2663 * _2663)) * (1.0 - (_2662 * _2662))));
                        float _2671 = _2670 * _2670;
                        float _2672 = _2671 * _2671;
                        float _2673 = _2652 + _2617;
                        float _2674 = _2653 + _2618;
                        float _2675 = _2654 + _2619;
                        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
                        float _2683 = dot(vec3(_387, _390, _393), vec3(_2652, _2653, _2654));
                        float _3914 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2686 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                        float _2687 = dot(vec3(_387, _390, _393), vec3(_2679 * _2673, _2679 * _2674, _2679 * _2675));
                        float _3925 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                        float _2690 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                        float _2694 = ((_2690 * _2690) * (_2672 + (-1.0))) + 1.0;
                        float _2695 = _2630 * _2671;
                        float _2696 = _2695 * _2695;
                        float _2699 = ((1.0 - _2696) * _2620) + _2696;
                        float _3936 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2700 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                        float _2701 = 1.0 - _2671;
                        float _2711 = (0.5 / (((_2700 * ((_2686 * _2701) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2700 * _2701) + _2671) * _2686))) * _2700;
                        float _3947 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2722 = (((_2672 * 3.1415927410125732421875) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) / ((_2694 * _2694) * ((_2637 * 2.1991131305694580078125) + 3.141590118408203125))) * _2626;
                        _2479 = (_2641 * _2589.x) + _2547;
                        _2480 = (_2641 * _2589.y) + _2548;
                        _2481 = (_2641 * _2589.z) + _2549;
                        _2476 = (_2722 * _2606.x) + _2544;
                        _2477 = (_2722 * _2606.y) + _2545;
                        _2478 = (_2722 * _2606.z) + _2546;
                        if (_2551 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2544 = _2476;
                            _2545 = _2477;
                            _2546 = _2478;
                            _2547 = _2479;
                            _2548 = _2480;
                            _2549 = _2481;
                            _2550 = _2551;
                        }
                    }
                    frontier_phi_63_pred = _2481;
                    frontier_phi_63_pred_1 = _2480;
                    frontier_phi_63_pred_2 = _2479;
                    frontier_phi_63_pred_3 = _2478;
                    frontier_phi_63_pred_4 = _2477;
                    frontier_phi_63_pred_5 = _2476;
                }
                _2287 = frontier_phi_63_pred;
                _2285 = frontier_phi_63_pred_1;
                _2283 = frontier_phi_63_pred_2;
                _2281 = frontier_phi_63_pred_3;
                _2279 = frontier_phi_63_pred_4;
                _2277 = frontier_phi_63_pred_5;
                uint _2427 = _2426 + 1u;
                if (_2427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2420 = _2277;
                    _2421 = _2279;
                    _2422 = _2281;
                    _2423 = _2283;
                    _2424 = _2285;
                    _2425 = _2287;
                    _2426 = _2427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2276 = _2277;
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
        }
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.z;
        uint _2293 = (_2291 >> 8u) & 15u;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((4294967295u << _2293) & _2176) == 0u)
        {
            _2388 = _2276;
            _2390 = _2278;
            _2392 = _2280;
            _2394 = _2282;
            _2396 = _2284;
            _2398 = _2286;
        }
        else
        {
            float _2413 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _2414 = _2413 * _2130;
            float _2415 = _2413 * _2131;
            float _2416 = _2413 * _2132;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2293 < ((_2291 >> 12u) & 15u))
            {
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2397;
                float _2399;
                float _2527 = _2276;
                float _2528 = _2278;
                float _2529 = _2280;
                float _2530 = _2282;
                float _2531 = _2284;
                float _2532 = _2286;
                uint _2533 = _2293;
                uint _2542;
                bool _2543;
                for (;;)
                {
                    _2542 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                    _2543 = _2542 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2543)
                    {
                        frontier_phi_69_pred = _2532;
                        frontier_phi_69_pred_1 = _2531;
                        frontier_phi_69_pred_2 = _2530;
                        frontier_phi_69_pred_3 = _2529;
                        frontier_phi_69_pred_4 = _2528;
                        frontier_phi_69_pred_5 = _2527;
                    }
                    else
                    {
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2732;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _2740 = _2527;
                        float _2741 = _2528;
                        float _2742 = _2529;
                        float _2743 = _2530;
                        float _2744 = _2531;
                        float _2745 = _2532;
                        uint _2746 = _2542;
                        uint _2747;
                        vec4 _2772;
                        float _2773;
                        vec4 _2788;
                        vec3 _2800;
                        vec4 _2816;
                        vec4 _2832;
                        float _2879;
                        bool _2880;
                        for (;;)
                        {
                            uint _2757 = ((_2533 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2746));
                            _2747 = (_2746 + 4294967295u) & _2746;
                            uint _2759 = _2757 * 40u;
                            _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            _2773 = _2772.w;
                            uint _2775 = (_2757 * 40u) + 4u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2790 = (_2757 * 40u) + 8u;
                            _2800 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x));
                            uint _2803 = (_2757 * 40u) + 16u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2819 = (_2757 * 40u) + 20u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2835 = (_2757 * 40u) + 24u;
                            vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2854 = (_2757 * 40u) + 28u;
                            vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            _2879 = fma(_2132, _2867.z, fma(_2131, _2867.y, _2867.x * _2130)) + _2867.w;
                            _2880 = !((fma(_2132, _2848.z, fma(_2131, _2848.y, _2848.x * _2130)) + _2848.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2880)
                            {
                                float _2907 = _2772.x - _2130;
                                float _2908 = _2772.y - _2131;
                                float _2909 = _2772.z - _2132;
                                float _2910 = dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909));
                                float _2913 = inversesqrt(_2910);
                                float _2914 = _2913 * _2907;
                                float _2915 = _2913 * _2908;
                                float _2916 = _2913 * _2909;
                                float _2920 = 1.0 - (_2910 / (_2773 * _2773));
                                float _3958 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                                float _2921 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _2925 = sqrt(_2910) * _2788.w;
                                float _2927 = 1.39999997615814208984375 / (_2925 + 1.39999997615814208984375);
                                float _2928 = _2927 * _2927;
                                float _2931 = ((1.0 - _2928) * dot(vec3(_2914, _2915, _2916), vec3(_387, _390, _393))) + _2928;
                                float _2934 = _2925 * _2925;
                                float _2938 = (fma(_2132, _2816.z, fma(_2131, _2816.y, _2816.x * _2130)) + _2816.w) / _2879;
                                float _2939 = (fma(_2132, _2832.z, fma(_2131, _2832.y, _2832.x * _2130)) + _2832.w) / _2879;
                                float _2943 = 1.0 - dot(vec2(_2938, _2939), vec2(_2938, _2939));
                                float _3974 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2944 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                                float _2945 = _2944 * (((isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))) * _2921) / ((_2934 * 0.699999988079071044921875) + 1.0));
                                float _2957 = exp2(log2(1.0 / ((_2934 * 3.5) + 5.0)) * 0.25);
                                float _2958 = 1.0 - _463;
                                float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                                float _2966 = _2965 * _2965;
                                float _2967 = _2966 * _2966;
                                float _2968 = _2914 - _2414;
                                float _2969 = _2915 - _2415;
                                float _2970 = _2916 - _2416;
                                float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                                float _2978 = dot(vec3(_387, _390, _393), vec3((-0.0) - _2414, (-0.0) - _2415, (-0.0) - _2416));
                                float _3985 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2981 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _2982 = dot(vec3(_387, _390, _393), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                                float _3996 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2985 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                                float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                                float _2990 = _2927 * _2966;
                                float _2991 = _2990 * _2990;
                                float _2997 = ((1.0 - _2991) * dot(vec3(_387, _390, _393), vec3(_2914, _2915, _2916))) + _2991;
                                float _4007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _2999 = 1.0 - _2966;
                                float _3009 = (0.5 / (((_2998 * ((_2981 * _2999) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2998 * _2999) + _2966) * _2981))) * _2998;
                                float _4018 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3019 = (_2944 * _2921) * (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) / ((_2989 * _2989) * ((_2934 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2945 * _2788.z;
                                frontier_phi_75_pred_1 = _2945 * _2788.y;
                                frontier_phi_75_pred_2 = _2945 * _2788.x;
                                frontier_phi_75_pred_3 = _3019 * _2800.z;
                                frontier_phi_75_pred_4 = _3019 * _2800.y;
                                frontier_phi_75_pred_5 = _3019 * _2800.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3028 = frontier_phi_75_pred;
                            _3027 = frontier_phi_75_pred_1;
                            _3026 = frontier_phi_75_pred_2;
                            _3025 = frontier_phi_75_pred_3;
                            _3024 = frontier_phi_75_pred_4;
                            _3023 = frontier_phi_75_pred_5;
                            _2730 = _3026 + _2743;
                            _2731 = _3027 + _2744;
                            _2732 = _3028 + _2745;
                            _2727 = _3023 + _2740;
                            _2728 = _3024 + _2741;
                            _2729 = _3025 + _2742;
                            if (_2747 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2729;
                                _2743 = _2730;
                                _2744 = _2731;
                                _2745 = _2732;
                                _2746 = _2747;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2732;
                        frontier_phi_69_pred_1 = _2731;
                        frontier_phi_69_pred_2 = _2730;
                        frontier_phi_69_pred_3 = _2729;
                        frontier_phi_69_pred_4 = _2728;
                        frontier_phi_69_pred_5 = _2727;
                    }
                    _2399 = frontier_phi_69_pred;
                    _2397 = frontier_phi_69_pred_1;
                    _2395 = frontier_phi_69_pred_2;
                    _2393 = frontier_phi_69_pred_3;
                    _2391 = frontier_phi_69_pred_4;
                    _2389 = frontier_phi_69_pred_5;
                    uint _2534 = _2533 + 1u;
                    if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2527 = _2389;
                        _2528 = _2391;
                        _2529 = _2393;
                        _2530 = _2395;
                        _2531 = _2397;
                        _2532 = _2399;
                        _2533 = _2534;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2399;
                frontier_phi_57_58_ladder_1 = _2397;
                frontier_phi_57_58_ladder_2 = _2395;
                frontier_phi_57_58_ladder_3 = _2393;
                frontier_phi_57_58_ladder_4 = _2391;
                frontier_phi_57_58_ladder_5 = _2389;
            }
            else
            {
                frontier_phi_57_58_ladder = _2286;
                frontier_phi_57_58_ladder_1 = _2284;
                frontier_phi_57_58_ladder_2 = _2282;
                frontier_phi_57_58_ladder_3 = _2280;
                frontier_phi_57_58_ladder_4 = _2278;
                frontier_phi_57_58_ladder_5 = _2276;
            }
            _2388 = frontier_phi_57_58_ladder_5;
            _2390 = frontier_phi_57_58_ladder_4;
            _2392 = frontier_phi_57_58_ladder_3;
            _2394 = frontier_phi_57_58_ladder_2;
            _2396 = frontier_phi_57_58_ladder_1;
            _2398 = frontier_phi_57_58_ladder;
        }
        float _2403 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
        _2188 = (_2403 * _2394) + _1625;
        _2190 = (_2403 * _2396) + _1627;
        _2192 = (_2403 * _2398) + _1629;
        _2194 = ((_2388 * _432) * _2403) + _1970;
        _2196 = ((_2390 * _434) * _2403) + _1972;
        _2198 = ((_2392 * _435) * _2403) + _1974;
    }
    else
    {
        _2188 = _1625;
        _2190 = _1627;
        _2192 = _1629;
        _2194 = _1970;
        _2196 = _1972;
        _2198 = _1974;
    }
    float _4034 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4045 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _4056 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    uint _2218 = _406 + 6u;
    float _2226 = _365 / cbSceneParam._m0[86u].x;
    float _2227 = _366 / cbSceneParam._m0[86u].y;
    vec4 _2241 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2226, _2227, (log2((isnan(cbSceneParam._m0[77u].w) ? _298 : (isnan(_298) ? cbSceneParam._m0[77u].w : min(_298, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2243 = _2241.x;
    float _2244 = _2241.y;
    float _2245 = _2241.z;
    float _2246 = _2241.w;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_298 > cbSceneParam._m0[78u].w)
    {
        float _2301 = isnan(_298) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _298 : min(cbSceneParam._m0[80u].w, _298));
        float _2302 = _2301 / _298;
        float _2313 = _2302 * _350;
        float _2314 = _351 * _2302;
        float _2315 = (-0.0) - _2314;
        float _2316 = _2302 * _352;
        float _2318 = (cbSceneParam._m0[77u].w * _2315) / _2301;
        float _2319 = _2318 + cbSceneParam._m0[79u].w;
        float _2320 = cbSceneParam._m0[79u].w - _2314;
        float _2326 = sqrt(((_2313 * _2313) + (_2314 * _2314)) + (_2316 * _2316));
        float _2329 = (1.0 - (cbSceneParam._m0[77u].w / _2301)) * _2326;
        float _2334 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2336 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2489;
        if (abs((_2315 - _2318) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2489 = ((((_2319 > 0.0) ? exp2(_2334 * _2319) : (2.0 - exp2(_2336 * _2319))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2329;
        }
        else
        {
            float _2449 = 1.0 / cbSceneParam._m0[80u].x;
            float _2450 = isnan(_2320) ? _2319 : (isnan(_2319) ? _2320 : max(_2319, _2320));
            float _2451 = isnan(_2320) ? _2319 : (isnan(_2319) ? _2320 : min(_2319, _2320));
            float _2460 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : min(_2450, 0.0));
            float _2461 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : min(_2451, 0.0));
            _2489 = ((abs(_2326 / _2315) * cbSceneParam._m0[80u].y) * ((((_2460 - _2461) * 2.0) - ((exp2(_2334 * (isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0)))) - exp2(_2334 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0))))) * _2449)) - ((exp2(_2336 * _2460) - exp2(_2336 * _2461)) * _2449))) + (_2329 * cbSceneParam._m0[80u].z);
        }
        vec4 _2491 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2226, _2227, 1.0), 0.0);
        float _2500 = exp2((_2489 * (-1.44269502162933349609375)) * (1.0 - _2491.w));
        float _2501 = log2(_2500);
        float _2517 = log2(_2246);
        _2338 = (exp2(_2517 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2501 * cbSceneParam._m0[78u].x)) * _2491.x) / cbSceneParam._m0[78u].x)) + _2243;
        _2340 = (exp2(_2517 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2501 * cbSceneParam._m0[78u].y)) * _2491.y) / cbSceneParam._m0[78u].y)) + _2244;
        _2342 = (exp2(_2517 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2501 * cbSceneParam._m0[78u].z)) * _2491.z) / cbSceneParam._m0[78u].z)) + _2245;
        _2344 = _2500 * _2246;
    }
    else
    {
        _2338 = _2243;
        _2340 = _2244;
        _2342 = _2245;
        _2344 = _2246;
    }
    float _2356 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2357 = _2356 == 3.0;
    float _2358 = log2(_2344);
    float _2365 = exp2(_2358 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2188 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _447))) + ((_2194 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2366 = exp2(_2358 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_2190 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _447))) + ((_2196 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2367 = exp2(_2358 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_2192 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _447))) + ((_2198 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2376 = (_2356 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2376 * (_2357 ? _2365 : (_2365 + (cbSceneParam._m0[72u].w * _2338)));
    SV_Target.y = _2376 * (_2357 ? _2366 : (_2366 + (cbSceneParam._m0[72u].w * _2340)));
    SV_Target.z = _2376 * (_2357 ? _2367 : (_2367 + (cbSceneParam._m0[72u].w * _2342)));
    SV_Target.w = cbInstanceData._m0[_2218].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2218].w;
}


