#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _870;
float _3285;
float _3286;
float _3287;
float _3288;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    float _235 = _229.w;
    vec4 _251 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3297 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))));
    float _271 = fma(_268, _213, fma(_261, _205 * TANGENT.x, (_191 * _184) * _259));
    float _274 = fma(_268, _214, fma(_261, _205 * TANGENT.y, (_191 * _185) * _259));
    float _277 = fma(_268, _215, fma(_261, _205 * TANGENT.z, (_191 * _186) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3308 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _285 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3330 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3341 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3352 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _289 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _305 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _347 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _357 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _347);
    float _358 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _347);
    float _359 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _347);
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _357 * _363;
    float _365 = _358 * _363;
    float _366 = _359 * _363;
    vec4 _371 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _373 = _371.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _549 = sqrt(((_357 * _357) + (_358 * _358)) + (_359 * _359));
        float _555 = (cbMatDynParam._m0[5u].x * _549) + cbMatDynParam._m0[5u].y;
        float _3363 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _556 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _560 = (cbMatDynParam._m0[5u].z * _549) + cbMatDynParam._m0[5u].w;
        float _3374 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) - _556)) + _556) < ((_373 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _409 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _412 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _425 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3385 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _440 = 1.0 - _289;
    float _441 = _437 * _440;
    float _442 = _438 * _440;
    float _443 = _439 * _440;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _289;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _289;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _289;
    float _451 = _448 + 0.039999999105930328369140625;
    float _453 = _449 + 0.039999999105930328369140625;
    float _454 = _450 + 0.039999999105930328369140625;
    vec4 _463 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _466 = _463.x * TEXCOORD.z;
    float _467 = dot(vec3(_282, _283, _284), vec3(_364, _365, _366));
    float _470 = _467 * 2.0;
    float _474 = (_470 * _282) - _364;
    float _475 = (_470 * _283) - _365;
    float _476 = (_470 * _284) - _366;
    float _480 = abs(dot(vec3(_364, _365, _366), vec3(_282, _283, _284)));
    float _3418 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _482 = sqrt(_285);
    float _495 = exp2((_482 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_482 * 3.0));
    float _501 = (1.0 - _495) * ((_482 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _502 = _495 * _482;
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _869;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _594 = fma(_538, cbModelParam._m0[26u].z, fma(_534, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530));
        float _598 = fma(_538, cbModelParam._m0[27u].z, fma(_534, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530));
        float _602 = fma(_538, cbModelParam._m0[28u].z, fma(_534, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530));
        float _627 = _530 + _282;
        float _628 = _534 + _283;
        float _629 = _538 + _284;
        float _639 = fma(_629, cbModelParam._m0[26u].z, fma(_628, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627)) - _594;
        float _640 = fma(_629, cbModelParam._m0[27u].z, fma(_628, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627)) - _598;
        float _641 = fma(_629, cbModelParam._m0[28u].z, fma(_628, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627)) - _602;
        float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
        float _658 = ((_645 * _639) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_594 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_645 * _640) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_598 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_645 * _641) / cbModelParam._m0[34u].z) + ((((((_602 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_658, _659, _660), 0.0);
        float _697 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_663.x + (-0.5));
        float _699 = _697 * (_663.y + (-0.5));
        float _700 = _697 * (_663.z + (-0.5));
        float _707 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_670.x + (-0.5));
        float _709 = _707 * (_670.y + (-0.5));
        float _710 = _707 * (_670.z + (-0.5));
        float _717 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_677.x + (-0.5));
        float _719 = _717 * (_677.y + (-0.5));
        float _720 = _717 * (_677.z + (-0.5));
        float _727 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_684.x + (-0.5));
        float _729 = _727 * (_684.y + (-0.5));
        float _730 = _727 * (_684.z + (-0.5));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = _698 * 0.5;
        float _735 = _708 * 0.5;
        float _736 = _718 * 0.5;
        float _737 = dot(vec3(_734, _735, _736), vec3(_734, _735, _736));
        float _742 = (_737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_737);
        float _751 = (dot(vec3(_282, _283, _284), vec3(_742 * _734, _742 * _735, _742 * _736)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _761 = sqrt(((_735 * _735) + (_734 * _734)) + (_736 * _736)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _763 = _762 * 2.0;
        float _767 = (1.0 - _762) / (_762 + 1.0);
        float _3466 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _777 = ((((1.0 - _768) * (_763 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_763 + 1.0))) + _768) * _731;
        float _778 = _699 * 0.5;
        float _779 = _709 * 0.5;
        float _780 = _719 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _794 = (dot(vec3(_282, _283, _284), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _803 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3499 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_805 + 1.0))) + _810) * _732;
        float _820 = _700 * 0.5;
        float _821 = _710 * 0.5;
        float _822 = _720 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_282, _283, _284), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3532 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_847 + 1.0))) + _852) * _733;
        _869 = _700;
        _871 = _699;
        _872 = _698;
        _873 = _710;
        _874 = _709;
        _875 = _708;
        _876 = _720;
        _877 = _719;
        _878 = _718;
        _879 = _733;
        _880 = _732;
        _881 = _731;
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
    }
    else
    {
        _869 = _870;
        _871 = _870;
        _872 = _870;
        _873 = _870;
        _874 = _870;
        _875 = _870;
        _876 = _870;
        _877 = _870;
        _878 = _870;
        _879 = _870;
        _880 = _870;
        _881 = _870;
        _882 = 0.0;
        _883 = 0.0;
        _884 = 0.0;
    }
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _913 = fma(_538, cbModelParam._m0[30u].z, fma(_534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _530));
        float _917 = fma(_538, cbModelParam._m0[31u].z, fma(_534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _530));
        float _921 = fma(_538, cbModelParam._m0[32u].z, fma(_534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _530));
        float _944 = _530 + _282;
        float _945 = _534 + _283;
        float _946 = _538 + _284;
        float _956 = fma(_946, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944)) - _913;
        float _957 = fma(_946, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944)) - _917;
        float _958 = fma(_946, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944)) - _921;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_913 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_917 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[35u].z) + ((((((_921 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1012 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_979.x + (-0.5));
        float _1014 = _1012 * (_979.y + (-0.5));
        float _1015 = _1012 * (_979.z + (-0.5));
        float _1022 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_986.x + (-0.5));
        float _1024 = _1022 * (_986.y + (-0.5));
        float _1025 = _1022 * (_986.z + (-0.5));
        float _1032 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_993.x + (-0.5));
        float _1034 = _1032 * (_993.y + (-0.5));
        float _1035 = _1032 * (_993.z + (-0.5));
        float _1042 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1000.x + (-0.5));
        float _1044 = _1042 * (_1000.y + (-0.5));
        float _1045 = _1042 * (_1000.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_282, _283, _284), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3595 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1076 + 1.0))) + _1081) * _1046;
        float _1091 = _1014 * 0.5;
        float _1092 = _1024 * 0.5;
        float _1093 = _1034 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_282, _283, _284), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3628 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1118 + 1.0))) + _1123) * _1047;
        float _1133 = _1015 * 0.5;
        float _1134 = _1025 * 0.5;
        float _1135 = _1035 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_282, _283, _284), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3661 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1160 + 1.0))) + _1165) * _1048;
        _1182 = _1015;
        _1183 = _1014;
        _1184 = _1013;
        _1185 = _1025;
        _1186 = _1024;
        _1187 = _1023;
        _1188 = _1035;
        _1189 = _1034;
        _1190 = _1033;
        _1191 = _1048;
        _1192 = _1047;
        _1193 = _1046;
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _870;
        _1183 = _870;
        _1184 = _870;
        _1185 = _870;
        _1186 = _870;
        _1187 = _870;
        _1188 = _870;
        _1189 = _870;
        _1190 = _870;
        _1191 = _870;
        _1192 = _870;
        _1193 = _870;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _883)) + _883;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _884)) + _884;
    float _1229 = fma(_1208, cbSceneParam._m0[89u].z, fma(_1207, cbSceneParam._m0[89u].y, _1206 * cbSceneParam._m0[89u].x));
    float _1232 = fma(_1208, cbSceneParam._m0[90u].z, fma(_1207, cbSceneParam._m0[90u].y, _1206 * cbSceneParam._m0[90u].x));
    float _1235 = fma(_1208, cbSceneParam._m0[91u].z, fma(_1207, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1206));
    float _1250 = _474 * 0.5;
    float _1251 = _475 * 0.5;
    float _1252 = _476 * 0.5;
    float _1253 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1256 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1259 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1293;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1266 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_869, _873, _876, _879));
        float _1270 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_871, _874, _877, _880));
        float _1274 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_872, _875, _878, _881));
        float _1281 = dot(vec4(cbModelParam._m0[39u]), vec4(_1250, _1251, _1252, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1304;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1295 = dot(vec4(cbModelParam._m0[40u]), vec4(_1250, _1251, _1252, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1295) ? 0.0 : (isnan(0.0) ? _1295 : max(0.0, _1295))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1308 = (_1304 * cbModelParam._m0[1u].x) + (_1293 * (1.0 - cbModelParam._m0[1u].x));
    float _1318 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _285);
    float _1319 = isnan(_1318) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1318 : min(cbModelParam._m0[25u].z, _1318));
    float _1401;
    float _1403;
    float _1405;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1368 = fma(_538, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530)) + cbModelParam._m0[13u].w;
        float _1372 = fma(_538, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530)) + cbModelParam._m0[14u].w;
        float _1376 = fma(_538, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530)) + cbModelParam._m0[15u].w;
        float _1379 = fma(_476, cbModelParam._m0[13u].z, fma(_475, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _474));
        float _1382 = fma(_476, cbModelParam._m0[14u].z, fma(_475, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _474));
        float _1385 = fma(_476, cbModelParam._m0[15u].z, fma(_475, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _474));
        float _1413;
        if (_1379 > 0.0)
        {
            _1413 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1413 = frontier_phi_19_17_ladder;
        }
        float _1642;
        if (_1382 > 0.0)
        {
            _1642 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1642 = frontier_phi_28_24_ladder;
        }
        float _1899;
        if (_1385 > 0.0)
        {
            _1899 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1899 = frontier_phi_40_35_ladder;
        }
        float _1901 = isnan(_1642) ? _1413 : (isnan(_1413) ? _1642 : min(_1413, _1642));
        float _1902 = isnan(_1899) ? _1901 : (isnan(_1901) ? _1899 : min(_1901, _1899));
        float _1906 = (_1902 * _1379) + _1368;
        float _1907 = (_1902 * _1382) + _1372;
        float _1908 = (_1902 * _1385) + _1376;
        float _1909 = _1902 * 9.9999997473787516355514526367188e-05;
        float _1911 = (-1.0) - _1909;
        float _1913 = _1909 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1908 > _1913) || ((_1908 < _1911) || ((_1907 > _1913) || ((_1907 < _1911) || ((_1906 < _1911) || (_1906 > _1913))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1908, cbModelParam._m0[9u].z, fma(_1907, cbModelParam._m0[9u].y, _1906 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1908, cbModelParam._m0[10u].z, fma(_1907, cbModelParam._m0[10u].y, _1906 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1908, cbModelParam._m0[11u].z, fma(_1907, cbModelParam._m0[11u].y, _1906 * cbModelParam._m0[11u].x))), _1319);
            frontier_phi_18_40_ladder = _2036.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2036.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2036.x * cbModelParam._m0[1u].y;
        }
        _1401 = frontier_phi_18_40_ladder_2;
        _1403 = frontier_phi_18_40_ladder_1;
        _1405 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_474, _475, _476), _1319);
        _1401 = _1389.x * cbModelParam._m0[1u].y;
        _1403 = _1389.y * cbModelParam._m0[1u].y;
        _1405 = _1389.z * cbModelParam._m0[1u].y;
    }
    float _1409 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _285);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1409 : min(cbModelParam._m0[25u].w, _1409));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1467 = fma(_538, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530)) + cbModelParam._m0[21u].w;
        float _1471 = fma(_538, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530)) + cbModelParam._m0[22u].w;
        float _1475 = fma(_538, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530)) + cbModelParam._m0[23u].w;
        float _1478 = fma(_476, cbModelParam._m0[21u].z, fma(_475, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _474));
        float _1481 = fma(_476, cbModelParam._m0[22u].z, fma(_475, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _474));
        float _1484 = fma(_476, cbModelParam._m0[23u].z, fma(_475, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _474));
        float _1647;
        if (_1478 > 0.0)
        {
            _1647 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1647 = frontier_phi_30_26_ladder;
        }
        float _1926;
        if (_1481 > 0.0)
        {
            _1926 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1926 = frontier_phi_42_37_ladder;
        }
        float _2139;
        if (_1484 > 0.0)
        {
            _2139 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2139 = frontier_phi_51_48_ladder;
        }
        float _2141 = isnan(_1926) ? _1647 : (isnan(_1647) ? _1926 : min(_1647, _1926));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1478) + _1467;
        float _2147 = (_2142 * _1481) + _1471;
        float _2148 = (_2142 * _1484) + _1475;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2149;
        float _2152 = _2149 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2148 > _2152) || ((_2148 < _2150) || ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 < _2150) || (_2146 > _2152))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2148, cbModelParam._m0[17u].z, fma(_2147, cbModelParam._m0[17u].y, _2146 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2148, cbModelParam._m0[18u].z, fma(_2147, cbModelParam._m0[18u].y, _2146 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2148, cbModelParam._m0[19u].z, fma(_2147, cbModelParam._m0[19u].y, _2146 * cbModelParam._m0[19u].x))), _1410);
            frontier_phi_27_51_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1503 = frontier_phi_27_51_ladder_2;
        _1505 = frontier_phi_27_51_ladder_1;
        _1507 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_474, _475, _476), _1410);
        _1503 = _1487.x * cbModelParam._m0[1u].z;
        _1505 = _1487.y * cbModelParam._m0[1u].z;
        _1507 = _1487.z * cbModelParam._m0[1u].z;
    }
    float _1520 = (((_501 * _451) + _502) * _466) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1522 = (((_501 * _453) + _502) * _466) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1524 = (((_501 * _454) + _502) * _466) * ((cbModelParam._m0[1u].w * (_1507 - _1405)) + _1405);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, _1520 * cbSceneParam._m0[91u].x));
    vec4 _1541 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_385, _386));
    float _1543 = _1541.w;
    float _1555 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1543);
    float _1556 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1543);
    float _1557 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1543);
    uvec4 _1561 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1563 = _1561.x * 14u;
    uint _1564 = _1563 + 13u;
    float _1571 = _466 + (-1.0);
    float _1576 = (cbLight._m0[_1564].x * _1571) + 1.0;
    float _1577 = (cbLight._m0[_1564].y * _1571) + 1.0;
    float _1578 = (cbLight._m0[_1564].z * _1571) + 1.0;
    float _1579 = (cbLight._m0[_1564].w * _1571) + 1.0;
    uint _1580 = _1563 + 5u;
    float _1586 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1590 = _1563 + 4u;
    float _1600 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1604 = _1563 | 1u;
    float _1615 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_282, _283, _284));
    float _1618 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_282, _283, _284));
    float _3797 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _3808 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1623 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.3183098733425140380859375;
    float _1625 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1632 = ((cbLight._m0[_1580].x * _1586) * _1625) + (((cbLight._m0[_1590].x * _1555) * _1600) * _1623);
    float _1633 = ((_1586 * cbLight._m0[_1580].y) * _1625) + (((cbLight._m0[_1590].y * _1556) * _1600) * _1623);
    float _1634 = ((_1586 * cbLight._m0[_1580].z) * _1625) + (((cbLight._m0[_1590].z * _1557) * _1600) * _1623);
    uvec4 _1639 = floatBitsToUint(cbLight._m0[_1563 + 12u]);
    bool _1641 = _1639.x == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1641)
    {
        _1652 = _1632;
        _1654 = _1633;
        _1656 = _1634;
    }
    else
    {
        uint _1660 = _1563 + 6u;
        float _1676 = (dot(vec3(cbLight._m0[_1563 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1677 = _1676 * _1676;
        float _3819 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1679 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1652 = (((cbLight._m0[_1660].x * 0.3183098733425140380859375) * _1678) * _1679) + _1632;
        _1654 = (((cbLight._m0[_1660].y * 0.3183098733425140380859375) * _1678) * _1679) + _1633;
        _1656 = (((cbLight._m0[_1660].z * 0.3183098733425140380859375) * _1678) * _1679) + _1634;
    }
    bool _1659 = _1639.y == 0u;
    float _1697;
    float _1699;
    float _1701;
    if (_1659)
    {
        _1697 = _1652;
        _1699 = _1654;
        _1701 = _1656;
    }
    else
    {
        uint _1870 = _1563 + 7u;
        float _1886 = (dot(vec3(cbLight._m0[_1563 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _3835 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1889 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1697 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1652;
        _1699 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1654;
        _1701 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1656;
    }
    uint _1704 = _1563 + 8u;
    float _1717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1563].w)) * _285) * 0.949999988079071044921875);
    float _1718 = _1717 * _1717;
    float _1719 = cbLight._m0[_1563].x + _364;
    float _1720 = cbLight._m0[_1563].y + _365;
    float _1721 = cbLight._m0[_1563].z + _366;
    float _1725 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
    float _1726 = _1725 * _1719;
    float _1727 = _1725 * _1720;
    float _1728 = _1725 * _1721;
    float _1729 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1563].xyz));
    float _3851 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _1733 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1734 = dot(vec3(_282, _283, _284), vec3(_1726, _1727, _1728));
    float _3873 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1738 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_1726, _1727, _1728));
    float _3884 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1742 = _1718 * _1718;
    float _1746 = ((_1737 * _1737) * (_1742 + (-1.0))) + 1.0;
    float _1754 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
    float _1755 = 0.959999978542327880859375 - _448;
    float _1757 = 0.959999978542327880859375 - _449;
    float _1758 = 0.959999978542327880859375 - _450;
    float _1765 = 1.0 - _1718;
    float _1776 = (0.5 / (((_1733 * ((_1732 * _1765) + _1718)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1765) + _1718) * _1732))) * _1732;
    float _3895 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1778 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1742 / ((_1746 * _1746) * 3.141590118408203125));
    uint _1792 = _1563 + 9u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1604].w)) * _285) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1604].x + _364;
    float _1806 = cbLight._m0[_1604].y + _365;
    float _1807 = cbLight._m0[_1604].z + _366;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1604].xyz));
    float _3906 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1819 = dot(vec3(_282, _283, _284), vec3(_1812, _1813, _1814));
    float _3917 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1812, _1813, _1814));
    float _3928 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1804 * _1804;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1838 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
    float _1845 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1733 * ((_1818 * _1845) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1845) + _1804) * _1818))) * _1818;
    float _3939 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    float _1867 = (((((_1838 * _1755) + _451) * cbLight._m0[_1792].x) * _1857) * _1586) + ((((cbLight._m0[_1704].x * _1555) * ((_1754 * _1755) + _451)) * _1778) * _1600);
    float _1868 = (((((_1838 * _1757) + _453) * cbLight._m0[_1792].y) * _1857) * _1586) + ((((cbLight._m0[_1704].y * _1556) * ((_1754 * _1757) + _453)) * _1778) * _1600);
    float _1869 = (((((_1838 * _1758) + _454) * cbLight._m0[_1792].z) * _1857) * _1586) + ((((cbLight._m0[_1704].z * _1557) * ((_1754 * _1758) + _454)) * _1778) * _1600);
    float _1931;
    float _1933;
    float _1935;
    if (_1641)
    {
        _1931 = _1867;
        _1933 = _1868;
        _1935 = _1869;
    }
    else
    {
        uint _1937 = _1563 + 2u;
        uint _1941 = _1563 + 10u;
        float _1955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _285) * 0.949999988079071044921875);
        float _1956 = _1955 * _1955;
        float _1957 = cbLight._m0[_1937].x + _364;
        float _1958 = cbLight._m0[_1937].y + _365;
        float _1959 = cbLight._m0[_1937].z + _366;
        float _1963 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
        float _1964 = _1963 * _1957;
        float _1965 = _1963 * _1958;
        float _1966 = _1963 * _1959;
        float _1967 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1937].xyz));
        float _3950 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1970 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1971 = dot(vec3(_282, _283, _284), vec3(_1964, _1965, _1966));
        float _3961 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1974 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1975 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_1964, _1965, _1966));
        float _3972 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1979 = _1956 * _1956;
        float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
        float _1990 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
        float _1997 = 1.0 - _1956;
        float _2007 = (0.5 / (((_1733 * ((_1970 * _1997) + _1956)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _1997) + _1956) * _1970))) * _1970;
        float _3983 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2009 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
        float _2010 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1931 = (((((_1990 * _1755) + _451) * cbLight._m0[_1941].x) * _2009) * _2010) + _1867;
        _1933 = (((((_1990 * _1757) + _453) * cbLight._m0[_1941].y) * _2009) * _2010) + _1868;
        _1935 = (((((_1990 * _1758) + _454) * cbLight._m0[_1941].z) * _2009) * _2010) + _1869;
    }
    float _2045;
    float _2047;
    float _2049;
    if (_1659)
    {
        _2045 = _1931;
        _2047 = _1933;
        _2049 = _1935;
    }
    else
    {
        uint _2056 = _1563 + 3u;
        uint _2060 = _1563 + 11u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _285) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _364;
        float _2077 = cbLight._m0[_2056].y + _365;
        float _2078 = cbLight._m0[_2056].z + _366;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_2056].xyz));
        float _3999 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2090 = dot(vec3(_282, _283, _284), vec3(_2083, _2084, _2085));
        float _4010 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4021 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
        float _2116 = 1.0 - _2075;
        float _2126 = (0.5 / (((_1733 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1733 * _2116) + _2075) * _2089))) * _2089;
        float _4032 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _2045 = (((((_2109 * _1755) + _451) * cbLight._m0[_2060].x) * _2128) * _2129) + _1931;
        _2047 = (((((_2109 * _1757) + _453) * cbLight._m0[_2060].y) * _2128) * _2129) + _1933;
        _2049 = (((((_2109 * _1758) + _454) * cbLight._m0[_2060].z) * _2128) * _2129) + _1935;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1561.y == 0u)
    {
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2204;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2204;
        float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2204;
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.x;
        uint _2231 = uint((float(_2219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2220))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2220)));
        float _2241 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2242 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        uint _2245 = uint(isnan(14.0) ? _2242 : (isnan(_2242) ? 14.0 : min(_2242, 14.0)));
        uvec4 _2250 = texelFetch(g_lightClusterGridBuffer, int(((_2245 << 2u) + (_2231 << 6u)) >> 2u));
        uint _2251 = _2250.x;
        uint _2252 = _2219.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2252 >> 4u) & 15u)) + 4294967295u) & _2251) == 0u) || ((_2252 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2519)
                {
                    frontier_phi_68_pred = _2505;
                    frontier_phi_68_pred_1 = _2508;
                    frontier_phi_68_pred_2 = _2507;
                    frontier_phi_68_pred_3 = _2506;
                    frontier_phi_68_pred_4 = _2504;
                    frontier_phi_68_pred_5 = _2503;
                }
                else
                {
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    uint _2654;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2507;
                    _2653 = _2508;
                    _2654 = _2518;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    for (;;)
                    {
                        uint _2658 = uint(findLSB(_2654)) + (_2509 << 5u);
                        uint _2655 = (_2654 + 4294967295u) & _2654;
                        uint _2660 = _2658 * 48u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2680 = (_2658 * 48u) + 4u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2699 = (_2658 * 48u) + 8u;
                        vec3 _2710 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x));
                        float _2714 = _2674.x - _2205;
                        float _2715 = _2674.y - _2206;
                        float _2716 = _2674.z - _2207;
                        float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                        float _2720 = inversesqrt(_2717);
                        float _2721 = _2720 * _2714;
                        float _2722 = _2720 * _2715;
                        float _2723 = _2720 * _2716;
                        float _2724 = dot(vec3(_406, _409, _412), vec3(_2721, _2722, _2723));
                        float _2729 = 1.0 - (_2717 * _2674.w);
                        float _4058 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2730 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2731 = sqrt(_2717) * _2693.w;
                        float _2734 = 1.39999997615814208984375 / (_2731 + 1.39999997615814208984375);
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2724) + _2735;
                        float _2741 = _2731 * _2731;
                        float _2745 = ((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2730) / ((_2741 * 0.699999988079071044921875) + 1.0);
                        float _2749 = (-0.0) - _2205;
                        float _2750 = (-0.0) - _2206;
                        float _2751 = (-0.0) - _2207;
                        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2766 = exp2(log2(1.0 / ((_2741 * 3.5) + 5.0)) * 0.25);
                        float _2767 = 1.0 - _482;
                        float _2774 = sqrt(1.0 - ((1.0 - (_2767 * _2767)) * (1.0 - (_2766 * _2766))));
                        float _2775 = _2774 * _2774;
                        float _2776 = _2775 * _2775;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
                        float _2787 = dot(vec3(_406, _409, _412), vec3(_2756, _2757, _2758));
                        float _4074 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2790 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2791 = dot(vec3(_406, _409, _412), vec3(_2783 * _2777, _2783 * _2778, _2783 * _2779));
                        float _4085 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2794 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _2798 = ((_2794 * _2794) * (_2776 + (-1.0))) + 1.0;
                        float _2799 = _2734 * _2775;
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * _2724) + _2800;
                        float _4096 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2805 = 1.0 - _2775;
                        float _2815 = (0.5 / (((_2804 * ((_2790 * _2805) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _2805) + _2775) * _2790))) * _2804;
                        float _4107 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2826 = (((_2776 * 3.1415927410125732421875) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) / ((_2798 * _2798) * ((_2741 * 2.1991131305694580078125) + 3.141590118408203125))) * _2730;
                        _2578 = (_2745 * _2693.x) + _2651;
                        _2579 = (_2745 * _2693.y) + _2652;
                        _2580 = (_2745 * _2693.z) + _2653;
                        _2575 = (_2826 * _2710.x) + _2648;
                        _2576 = (_2826 * _2710.y) + _2649;
                        _2577 = (_2826 * _2710.z) + _2650;
                        if (_2655 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2579;
                            _2653 = _2580;
                            _2654 = _2655;
                        }
                    }
                    frontier_phi_68_pred = _2577;
                    frontier_phi_68_pred_1 = _2580;
                    frontier_phi_68_pred_2 = _2579;
                    frontier_phi_68_pred_3 = _2578;
                    frontier_phi_68_pred_4 = _2576;
                    frontier_phi_68_pred_5 = _2575;
                }
                _2356 = frontier_phi_68_pred;
                _2362 = frontier_phi_68_pred_1;
                _2360 = frontier_phi_68_pred_2;
                _2358 = frontier_phi_68_pred_3;
                _2354 = frontier_phi_68_pred_4;
                _2352 = frontier_phi_68_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2352;
                    _2504 = _2354;
                    _2505 = _2356;
                    _2506 = _2358;
                    _2507 = _2360;
                    _2508 = _2362;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((4294967295u << _2368) & _2251) == 0u)
        {
            _2471 = _2351;
            _2473 = _2353;
            _2475 = _2355;
            _2477 = _2357;
            _2479 = _2359;
            _2481 = _2361;
        }
        else
        {
            float _2496 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _2497 = _2496 * _2205;
            float _2498 = _2496 * _2206;
            float _2499 = _2496 * _2207;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2631 = _2351;
                float _2632 = _2353;
                float _2633 = _2355;
                float _2634 = _2357;
                float _2635 = _2359;
                float _2636 = _2361;
                uint _2637 = _2368;
                uint _2646;
                bool _2647;
                for (;;)
                {
                    _2646 = texelFetch(g_lightClassification, int((((_2245 << 5u) + (_2231 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                    _2647 = _2646 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2647)
                    {
                        frontier_phi_79_pred = _2636;
                        frontier_phi_79_pred_1 = _2635;
                        frontier_phi_79_pred_2 = _2634;
                        frontier_phi_79_pred_3 = _2633;
                        frontier_phi_79_pred_4 = _2632;
                        frontier_phi_79_pred_5 = _2631;
                    }
                    else
                    {
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        float _2857 = _2635;
                        float _2858 = _2636;
                        uint _2859 = _2646;
                        uint _2860;
                        vec4 _2885;
                        float _2886;
                        vec4 _2901;
                        vec3 _2913;
                        vec4 _2929;
                        vec4 _2945;
                        float _2992;
                        bool _2993;
                        for (;;)
                        {
                            uint _2870 = ((_2637 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2859));
                            _2860 = (_2859 + 4294967295u) & _2859;
                            uint _2872 = _2870 * 40u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2886 = _2885.w;
                            uint _2888 = (_2870 * 40u) + 4u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            uint _2903 = (_2870 * 40u) + 8u;
                            _2913 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x));
                            uint _2916 = (_2870 * 40u) + 16u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2870 * 40u) + 20u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2870 * 40u) + 24u;
                            vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2967 = (_2870 * 40u) + 28u;
                            vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            _2992 = fma(_2207, _2980.z, fma(_2206, _2980.y, _2980.x * _2205)) + _2980.w;
                            _2993 = !((fma(_2207, _2961.z, fma(_2206, _2961.y, _2961.x * _2205)) + _2961.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2993)
                            {
                                float _3020 = _2885.x - _2205;
                                float _3021 = _2885.y - _2206;
                                float _3022 = _2885.z - _2207;
                                float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                                float _3026 = inversesqrt(_3023);
                                float _3027 = _3026 * _3020;
                                float _3028 = _3026 * _3021;
                                float _3029 = _3026 * _3022;
                                float _3033 = 1.0 - (_3023 / (_2886 * _2886));
                                float _4118 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3038 = sqrt(_3023) * _2901.w;
                                float _3040 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                                float _3041 = _3040 * _3040;
                                float _3044 = ((1.0 - _3041) * dot(vec3(_3027, _3028, _3029), vec3(_406, _409, _412))) + _3041;
                                float _3047 = _3038 * _3038;
                                float _3051 = (fma(_2207, _2929.z, fma(_2206, _2929.y, _2929.x * _2205)) + _2929.w) / _2992;
                                float _3052 = (fma(_2207, _2945.z, fma(_2206, _2945.y, _2945.x * _2205)) + _2945.w) / _2992;
                                float _3056 = 1.0 - dot(vec2(_3051, _3052), vec2(_3051, _3052));
                                float _4134 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3058 = _3057 * (((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3034) / ((_3047 * 0.699999988079071044921875) + 1.0));
                                float _3070 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                                float _3071 = 1.0 - _482;
                                float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                                float _3079 = _3078 * _3078;
                                float _3080 = _3079 * _3079;
                                float _3081 = _3027 - _2497;
                                float _3082 = _3028 - _2498;
                                float _3083 = _3029 - _2499;
                                float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                                float _3091 = dot(vec3(_406, _409, _412), vec3((-0.0) - _2497, (-0.0) - _2498, (-0.0) - _2499));
                                float _4145 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3095 = dot(vec3(_406, _409, _412), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                                float _4156 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3098 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                                float _3103 = _3040 * _3079;
                                float _3104 = _3103 * _3103;
                                float _3110 = ((1.0 - _3104) * dot(vec3(_406, _409, _412), vec3(_3027, _3028, _3029))) + _3104;
                                float _4167 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3112 = 1.0 - _3079;
                                float _3122 = (0.5 / (((_3111 * ((_3094 * _3112) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3079) * _3094))) * _3111;
                                float _4178 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3132 = (_3057 * _3034) * (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_3102 * _3102) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3058 * _2901.z;
                                frontier_phi_85_pred_1 = _3058 * _2901.y;
                                frontier_phi_85_pred_2 = _3058 * _2901.x;
                                frontier_phi_85_pred_3 = _3132 * _2913.z;
                                frontier_phi_85_pred_4 = _3132 * _2913.y;
                                frontier_phi_85_pred_5 = _3132 * _2913.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3141 = frontier_phi_85_pred;
                            _3140 = frontier_phi_85_pred_1;
                            _3139 = frontier_phi_85_pred_2;
                            _3138 = frontier_phi_85_pred_3;
                            _3137 = frontier_phi_85_pred_4;
                            _3136 = frontier_phi_85_pred_5;
                            _2843 = _3139 + _2856;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            if (_2860 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2860;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2845;
                        frontier_phi_79_pred_1 = _2844;
                        frontier_phi_79_pred_2 = _2843;
                        frontier_phi_79_pred_3 = _2842;
                        frontier_phi_79_pred_4 = _2841;
                        frontier_phi_79_pred_5 = _2840;
                    }
                    _2482 = frontier_phi_79_pred;
                    _2480 = frontier_phi_79_pred_1;
                    _2478 = frontier_phi_79_pred_2;
                    _2476 = frontier_phi_79_pred_3;
                    _2474 = frontier_phi_79_pred_4;
                    _2472 = frontier_phi_79_pred_5;
                    uint _2638 = _2637 + 1u;
                    if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2631 = _2472;
                        _2632 = _2474;
                        _2633 = _2476;
                        _2634 = _2478;
                        _2635 = _2480;
                        _2636 = _2482;
                        _2637 = _2638;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2478;
                frontier_phi_60_61_ladder_1 = _2482;
                frontier_phi_60_61_ladder_2 = _2480;
                frontier_phi_60_61_ladder_3 = _2476;
                frontier_phi_60_61_ladder_4 = _2474;
                frontier_phi_60_61_ladder_5 = _2472;
            }
            else
            {
                frontier_phi_60_61_ladder = _2357;
                frontier_phi_60_61_ladder_1 = _2361;
                frontier_phi_60_61_ladder_2 = _2359;
                frontier_phi_60_61_ladder_3 = _2355;
                frontier_phi_60_61_ladder_4 = _2353;
                frontier_phi_60_61_ladder_5 = _2351;
            }
            _2471 = frontier_phi_60_61_ladder_5;
            _2473 = frontier_phi_60_61_ladder_4;
            _2475 = frontier_phi_60_61_ladder_3;
            _2477 = frontier_phi_60_61_ladder;
            _2479 = frontier_phi_60_61_ladder_2;
            _2481 = frontier_phi_60_61_ladder_1;
        }
        float _2486 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
        _2263 = (_2486 * _2477) + _1697;
        _2265 = (_2486 * _2479) + _1699;
        _2267 = (_2486 * _2481) + _1701;
        _2269 = ((_2471 * _451) * _2486) + _2045;
        _2271 = ((_2473 * _453) * _2486) + _2047;
        _2273 = ((_2475 * _454) * _2486) + _2049;
    }
    else
    {
        _2263 = _1697;
        _2265 = _1699;
        _2267 = _1701;
        _2269 = _2045;
        _2271 = _2047;
        _2273 = _2049;
    }
    float _4194 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4205 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4216 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2290 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2263 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _466))) + ((_2269 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    float _2291 = ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2265 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _466))) + ((_2271 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    float _2292 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2267 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _466))) + ((_2273 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    uint _2293 = _425 + 6u;
    float _2301 = _385 / cbSceneParam._m0[86u].x;
    float _2302 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _305 : (isnan(_305) ? cbSceneParam._m0[77u].w : min(_305, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_305 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_305) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _305 : min(cbSceneParam._m0[80u].w, _305));
        float _2377 = _2376 / _305;
        float _2388 = _2377 * _357;
        float _2389 = _358 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2391 = _2377 * _359;
        float _2393 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2389;
        float _2401 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2401;
        float _2409 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2588;
        if (abs((_2390 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2588 = ((((_2394 > 0.0) ? exp2(_2409 * _2394) : (2.0 - exp2(_2411 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2534 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2588 = ((abs(_2401 / _2390) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2409 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2409 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2411 * _2543) - exp2(_2411 * _2544)) * _2532))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2590 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2599 = exp2((_2588 * (-1.44269502162933349609375)) * (1.0 - _2590.w));
        float _2600 = log2(_2599);
        float _2616 = log2(_2321);
        _2413 = (exp2(_2616 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].x)) * _2590.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2415 = (exp2(_2616 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].y)) * _2590.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2417 = (exp2(_2616 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2600 * cbSceneParam._m0[78u].z)) * _2590.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2419 = _2599 * _2321;
    }
    else
    {
        _2413 = _2318;
        _2415 = _2319;
        _2417 = _2320;
        _2419 = _2321;
    }
    bool _2626;
    vec4 _2429;
    vec4 _2451;
    float _2453;
    float _2457;
    float _2458;
    float _2459;
    float _2460;
    bool _2470;
    for (;;)
    {
        _2429 = cbMatDynParam._m0[0u];
        float _2431 = roundEven(_2429.y);
        bool _2432 = _2431 == 3.0;
        float _2433 = log2(_2419);
        float _2440 = exp2(_2433 * cbSceneParam._m0[78u].x) * _2290;
        float _2441 = exp2(_2433 * cbSceneParam._m0[78u].y) * _2291;
        float _2442 = exp2(_2433 * cbSceneParam._m0[78u].z) * _2292;
        float _2449 = _373 + (-0.5);
        _2451 = cbMtdParam._m0[1u];
        _2453 = _2451.y * _2449;
        float _2456 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2457 = _2456 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2413)));
        _2458 = _2456 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2415)));
        _2459 = _2456 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2417)));
        _2460 = _2449 * 0.999000012874603271484375;
        _2470 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2470)
        {
            if ((cbInstanceData._m0[_425 + 7u].x + _2460) < 0.5)
            {
                _2626 = true;
                break;
            }
        }
        uint _2567 = _427 + uint(_2429.w);
        if ((cbInstanceData._m0[_2567].w < 1.0) && ((cbInstanceData._m0[_2567].w + _2460) < 0.5))
        {
            _2626 = true;
            break;
        }
        if ((_2453 + _235) < _2451.x)
        {
            _2626 = true;
            break;
        }
        _2626 = false;
        break;
    }
    float _2831;
    if (_2626)
    {
        discard_state = true;
        _2831 = 0.0;
    }
    else
    {
        _2831 = cbInstanceData._m0[_2293].w;
    }
    SV_Target.x = _2457;
    SV_Target.y = _2458;
    SV_Target.z = _2459;
    SV_Target.w = _2831;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
    discard_exit();
}


