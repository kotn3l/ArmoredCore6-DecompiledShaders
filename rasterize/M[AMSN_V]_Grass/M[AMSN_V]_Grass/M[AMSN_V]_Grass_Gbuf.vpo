#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_2;
layout(location = 3, component = 3) out float TEXCOORD_8;

uint _471;

void main()
{
    uint _75 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_8 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _157 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _159 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _160 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _170 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _171 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _172 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _178 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _75;
    uvec4 _180 = texelFetch(g_InstanceIndexBuffer, int(_178));
    uint _181 = _180.x;
    uint _183 = _181 * 13u;
    uint _191 = (floatBitsToUint(cbInstanceData._m0[_183 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _198 = _191 + 1u;
    uint _205 = _191 + 2u;
    precise float _212 = POSITION.x * cbObjMatrix._m0[_191].x;
    precise float _213 = POSITION.y * cbObjMatrix._m0[_191].y;
    precise float _214 = _213 + _212;
    precise float _215 = POSITION.z * cbObjMatrix._m0[_191].z;
    precise float _216 = _215 + _214;
    precise float _217 = 1.0 * cbObjMatrix._m0[_191].w;
    precise float _219 = _217 + _216;
    precise float _220 = POSITION.x * cbObjMatrix._m0[_198].x;
    precise float _221 = POSITION.y * cbObjMatrix._m0[_198].y;
    precise float _222 = _221 + _220;
    precise float _223 = POSITION.z * cbObjMatrix._m0[_198].z;
    precise float _224 = _223 + _222;
    precise float _225 = 1.0 * cbObjMatrix._m0[_198].w;
    precise float _226 = _225 + _224;
    precise float _227 = POSITION.x * cbObjMatrix._m0[_205].x;
    precise float _228 = POSITION.y * cbObjMatrix._m0[_205].y;
    precise float _229 = _228 + _227;
    precise float _230 = POSITION.z * cbObjMatrix._m0[_205].z;
    precise float _231 = _230 + _229;
    precise float _232 = 1.0 * cbObjMatrix._m0[_205].w;
    precise float _233 = _232 + _231;
    uvec4 _239 = floatBitsToUint(cbInstanceData._m0[(_75 * 13u) + 7u]);
    uint _241 = _239.w;
    uint _243 = min(_239.y, 8u);
    float _247;
    float _249;
    if (_243 == 0u)
    {
        _247 = 0.0;
        _249 = 0.0;
    }
    else
    {
        uint _402 = _239.z;
        precise float _248;
        precise float _250;
        float _544;
        float _546;
        float _403 = 0.0;
        float _404 = 0.0;
        uint _405 = _402;
        uint _407 = 0u;
        float _443;
        float _462;
        vec4 _476;
        float _477;
        float _478;
        float _492;
        float _493;
        float _494;
        float _511;
        float _512;
        float _513;
        float _514;
        bool _515;
        bool _516;
        bool _517;
        precise float _518;
        precise float _519;
        precise float _520;
        float _521;
        float _522;
        float _523;
        precise float _524;
        bool _527;
        for (;;)
        {
            uint _409 = _405 & 255u;
            uint _411 = _409 * 24u;
            uvec3 _421 = uvec3(texelFetch(g_forceParam, int(_411)).x, texelFetch(g_forceParam, int(_411 + 1u)).x, texelFetch(g_forceParam, int(_411 + 2u)).x);
            uint _426 = (_409 * 24u) + 4u;
            vec4 _439 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_426)).x, texelFetch(g_forceParam, int(_426 + 1u)).x, texelFetch(g_forceParam, int(_426 + 2u)).x, texelFetch(g_forceParam, int(_426 + 3u)).x));
            _443 = _439.w;
            uint _445 = (_409 * 24u) + 8u;
            vec4 _458 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_445)).x, texelFetch(g_forceParam, int(_445 + 1u)).x, texelFetch(g_forceParam, int(_445 + 2u)).x, texelFetch(g_forceParam, int(_445 + 3u)).x));
            _462 = _458.w;
            uint _465 = (_409 * 24u) + 12u;
            _476 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_465)).x, texelFetch(g_forceParam, int(_465 + 1u)).x, _471, texelFetch(g_forceParam, int(_465 + 3u)).x));
            _477 = _476.x;
            _478 = _476.w;
            uint _481 = (_409 * 24u) + 16u;
            vec3 _491 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_481)).x, texelFetch(g_forceParam, int(_481 + 1u)).x, texelFetch(g_forceParam, int(_481 + 2u)).x));
            _492 = _491.x;
            _493 = _491.y;
            _494 = _491.z;
            uint _497 = (_409 * 24u) + 20u;
            vec4 _510 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_497)).x, texelFetch(g_forceParam, int(_497 + 1u)).x, texelFetch(g_forceParam, int(_497 + 2u)).x, texelFetch(g_forceParam, int(_497 + 3u)).x));
            _511 = _510.x;
            _512 = _510.y;
            _513 = _510.z;
            _514 = _510.w;
            _515 = _421.x == 1u;
            _516 = _421.y == 1u;
            _517 = _421.z == 1u;
            _518 = _219 - _439.x;
            _519 = _226 - _439.y;
            _520 = _233 - _439.z;
            _521 = _515 ? _458.x : _518;
            _522 = _515 ? _458.y : _519;
            _523 = _515 ? _458.z : _520;
            _524 = dot(vec3(_521, _522, _523), vec3(_521, _522, _523));
            _527 = _524 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_527)
            {
                precise float _529 = _518 * _518;
                precise float _530 = _519 * _519;
                precise float _531 = _529 + _530;
                precise float _532 = _520 * _520;
                precise float _533 = _532 + _531;
                float _534 = sqrt(_533);
                float _535 = inversesqrt(_524);
                precise float _536 = _521 * _535;
                precise float _537 = _522 * _535;
                precise float _538 = _523 * _535;
                precise float _541 = _534 / (isnan(0.001000000047497451305389404296875) ? _476.y : (isnan(_476.y) ? 0.001000000047497451305389404296875 : max(_476.y, 0.001000000047497451305389404296875)));
                precise float _542 = 1.0 - _541;
                float _694 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
                float _543 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
                float _567;
                if (_517)
                {
                    float _554 = inversesqrt(dot(vec3(_518, _519, _520), vec3(_518, _519, _520)));
                    precise float _555 = _518 * _554;
                    precise float _556 = _519 * _554;
                    precise float _557 = _520 * _554;
                    precise float _561 = dot(vec3(_536, _537, _538), vec3(_555, _556, _557)) * 0.800000011920928955078125;
                    precise float _563 = _561 + 0.20000000298023223876953125;
                    float _705 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
                    precise float _566 = _543 * (isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0)));
                    _567 = _566;
                }
                else
                {
                    _567 = _543;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_567 > 0.0)
                {
                    bool _570 = _515 && (!_517);
                    precise float _572 = _534 * (-4.0);
                    precise float _576 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _477 : (isnan(_477) ? 0.001000000047497451305389404296875 : max(_477, 0.001000000047497451305389404296875)));
                    precise float _578 = dot(vec2(_536, _538), vec2(_518, _520));
                    precise float _581 = _576 * _578;
                    precise float _582 = float(_570) * _581;
                    precise float _583 = cbPerFrame._m0[22u].x * _576;
                    precise float _584 = _583 - _582;
                    precise float _585 = (_570 ? 0.0 : _572) + _584;
                    precise float _587 = _462 * sin(_585);
                    precise float _588 = _537 * 0.0;
                    precise float _589 = _588 - _538;
                    precise float _590 = _536 - _588;
                    precise float _591 = _478 * _587;
                    float _592 = _515 ? _591 : 0.0;
                    float _635;
                    if (_516)
                    {
                        precise float _595 = _492 * 2.0;
                        precise float _597 = _512 + _513;
                        precise float _598 = _514 + _597;
                        precise float _600 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _492 : (isnan(_492) ? 0.001000000047497451305389404296875 : max(_492, 0.001000000047497451305389404296875)));
                        precise float _601 = _511 * _600;
                        precise float _602 = (-0.0) - _536;
                        precise float _607 = dot(vec2(_538, _602), vec2(_518, _520)) / _595;
                        precise float _608 = (-0.0) - _607;
                        float _611 = fract(abs(_607));
                        precise float _612 = (-0.0) - _611;
                        precise float _614 = _595 * ((_607 >= _608) ? _611 : _612);
                        precise float _615 = _614 * 6.283184051513671875;
                        precise float _616 = _615 / _595;
                        precise float _618 = (isnan(5.0) ? _492 : (isnan(_492) ? 5.0 : min(_492, 5.0))) * sin(_616);
                        precise float _619 = _578 + _618;
                        precise float _620 = _492 * 0.25;
                        precise float _622 = cbPerFrame._m0[22u].x * _511;
                        precise float _623 = _622 - _620;
                        precise float _624 = _623 - _619;
                        precise float _625 = _511 * _598;
                        precise float _627 = _624 / (isnan(0.001000000047497451305389404296875) ? _625 : (isnan(_625) ? 0.001000000047497451305389404296875 : max(_625, 0.001000000047497451305389404296875)));
                        float _628 = fract(_627);
                        precise float _630 = 1.0 - _628;
                        float _631 = (_627 < 0.0) ? _630 : _628;
                        precise float _632 = _597 / _598;
                        precise float _633 = _512 / _598;
                        float _650;
                        if (_631 < _633)
                        {
                            precise float _648 = _631 / _633;
                            _650 = _648;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_631 < _632)
                            {
                                precise float _660 = _631 - _633;
                                precise float _661 = _632 - _633;
                                precise float _662 = _660 / _661;
                                precise float _651 = 1.0 - _662;
                                frontier_phi_14_13_ladder = _651;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _650 = frontier_phi_14_13_ladder;
                        }
                        precise float _652 = _494 * _650;
                        precise float _653 = _600 * _578;
                        precise float _654 = cbPerFrame._m0[22u].x * _601;
                        precise float _655 = _654 - _653;
                        precise float _657 = _493 + sin(_655);
                        precise float _659 = _652 * abs(_657);
                        precise float _636 = _659 + 0.0;
                        _635 = _636;
                    }
                    else
                    {
                        _635 = 0.0;
                    }
                    precise float _637 = _443 + _587;
                    precise float _638 = _637 + _635;
                    precise float _639 = _536 * _638;
                    precise float _640 = _538 * _638;
                    precise float _641 = _589 * _592;
                    precise float _642 = _590 * _592;
                    precise float _643 = _641 + _639;
                    precise float _644 = _642 + _640;
                    precise float _645 = _567 * _643;
                    precise float _646 = _567 * _644;
                    precise float _545 = _645 * 0.0500000007450580596923828125;
                    precise float _547 = _646 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _545;
                    frontier_phi_5_pred_7_ladder_1 = _547;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _544 = frontier_phi_5_pred;
            _546 = frontier_phi_5_pred_1;
            _248 = _403 + _544;
            _250 = _404 + _546;
            uint _408 = _407 + 1u;
            if (_408 == _243)
            {
                break;
            }
            else
            {
                _403 = _248;
                _404 = _250;
                _405 = (_407 != 3u) ? (_405 >> 8u) : _241;
                _407 = _408;
                continue;
            }
        }
        _247 = _248;
        _249 = _250;
    }
    precise float _251 = TEXCOORD_1.y * _247;
    precise float _252 = TEXCOORD_1.y * _249;
    precise float _257 = dot(vec2(_251, _252), vec2(_251, _252)) + 1.0;
    float _258 = sqrt(_257);
    precise float _259 = _251 / _258;
    precise float _260 = _252 / _258;
    precise float _264 = 1.0 - dot(vec2(_259, _260), vec2(_259, _260));
    float _736 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    precise float _267 = sqrt(isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0))) + (-1.0);
    precise float _269 = TEXCOORD_1.y * _259;
    precise float _270 = TEXCOORD_1.y * _267;
    precise float _271 = TEXCOORD_1.y * _260;
    precise float _272 = _219 + _269;
    precise float _273 = _226 + _270;
    precise float _274 = _233 + _271;
    float _280 = cbSceneParam._m0[3u].x - _272;
    float _281 = cbSceneParam._m0[3u].y - _273;
    float _282 = cbSceneParam._m0[3u].z - _274;
    precise float _308 = _272 - cbSceneParam._m0[3u].x;
    precise float _309 = _273 - cbSceneParam._m0[3u].y;
    precise float _310 = _274 - cbSceneParam._m0[3u].z;
    precise float _338 = _308 * cbSceneParam._m0[24u].x;
    precise float _339 = _309 * cbSceneParam._m0[24u].y;
    precise float _340 = _339 + _338;
    precise float _341 = _310 * cbSceneParam._m0[24u].z;
    precise float _342 = _341 + _340;
    precise float _343 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _344 = _343 + _342;
    precise float _345 = _308 * cbSceneParam._m0[25u].x;
    precise float _346 = _309 * cbSceneParam._m0[25u].y;
    precise float _347 = _346 + _345;
    precise float _348 = _310 * cbSceneParam._m0[25u].z;
    precise float _349 = _348 + _347;
    precise float _350 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _351 = _350 + _349;
    precise float _352 = _308 * cbSceneParam._m0[26u].x;
    precise float _353 = _309 * cbSceneParam._m0[26u].y;
    precise float _354 = _353 + _352;
    precise float _355 = _310 * cbSceneParam._m0[26u].z;
    precise float _356 = _355 + _354;
    precise float _357 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _358 = _357 + _356;
    precise float _359 = _308 * cbSceneParam._m0[27u].x;
    precise float _360 = _309 * cbSceneParam._m0[27u].y;
    precise float _361 = _360 + _359;
    precise float _362 = _310 * cbSceneParam._m0[27u].z;
    precise float _363 = _362 + _361;
    precise float _364 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _365 = _364 + _363;
    gl_Position.x = _344;
    gl_Position.y = _351;
    gl_Position.z = _358;
    gl_Position.w = _365;
    NORMAL_1.x = fma(_160, cbObjMatrix._m0[_191].z, fma(_159, cbObjMatrix._m0[_191].y, cbObjMatrix._m0[_191].x * _157));
    NORMAL_1.y = fma(_160, cbObjMatrix._m0[_198].z, fma(_159, cbObjMatrix._m0[_198].y, cbObjMatrix._m0[_198].x * _157));
    NORMAL_1.z = fma(_160, cbObjMatrix._m0[_205].z, fma(_159, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * _157));
    NORMAL_1.w = float(_181);
    TANGENT_1.x = fma(_172, cbObjMatrix._m0[_191].z, fma(_171, cbObjMatrix._m0[_191].y, cbObjMatrix._m0[_191].x * _170));
    TANGENT_1.y = fma(_172, cbObjMatrix._m0[_198].z, fma(_171, cbObjMatrix._m0[_198].y, cbObjMatrix._m0[_198].x * _170));
    TANGENT_1.z = fma(_172, cbObjMatrix._m0[_205].z, fma(_171, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * _170));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    TEXCOORD_8 = sqrt(((_282 * _282) + (_280 * _280)) + (_281 * _281));
    gl_ClipDistance[0u] = dot(vec4(_344, _351, _358, _365), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_344, _351, _358, _365), vec4(cbInstanceData._m0[_183 + 3u]));
}


