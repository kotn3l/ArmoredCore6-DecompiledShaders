#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec3 TEXCOORD_2;

uint _470;

void main()
{
    uint _74 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _161 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _163 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _164 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _176 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _182 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _74;
    uvec4 _184 = texelFetch(g_InstanceIndexBuffer, int(_182));
    uint _185 = _184.x;
    uint _187 = _185 * 13u;
    uint _195 = (floatBitsToUint(cbInstanceData._m0[_187 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _202 = _195 + 1u;
    uint _209 = _195 + 2u;
    precise float _216 = POSITION.x * cbObjMatrix._m0[_195].x;
    precise float _217 = POSITION.y * cbObjMatrix._m0[_195].y;
    precise float _218 = _217 + _216;
    precise float _219 = POSITION.z * cbObjMatrix._m0[_195].z;
    precise float _220 = _219 + _218;
    precise float _221 = 1.0 * cbObjMatrix._m0[_195].w;
    precise float _223 = _221 + _220;
    precise float _224 = POSITION.x * cbObjMatrix._m0[_202].x;
    precise float _225 = POSITION.y * cbObjMatrix._m0[_202].y;
    precise float _226 = _225 + _224;
    precise float _227 = POSITION.z * cbObjMatrix._m0[_202].z;
    precise float _228 = _227 + _226;
    precise float _229 = 1.0 * cbObjMatrix._m0[_202].w;
    precise float _230 = _229 + _228;
    precise float _231 = POSITION.x * cbObjMatrix._m0[_209].x;
    precise float _232 = POSITION.y * cbObjMatrix._m0[_209].y;
    precise float _233 = _232 + _231;
    precise float _234 = POSITION.z * cbObjMatrix._m0[_209].z;
    precise float _235 = _234 + _233;
    precise float _236 = 1.0 * cbObjMatrix._m0[_209].w;
    precise float _237 = _236 + _235;
    uvec4 _243 = floatBitsToUint(cbInstanceData._m0[(_74 * 13u) + 7u]);
    uint _245 = _243.w;
    uint _247 = min(_243.y, 8u);
    float _251;
    float _253;
    if (_247 == 0u)
    {
        _251 = 0.0;
        _253 = 0.0;
    }
    else
    {
        uint _401 = _243.z;
        precise float _252;
        precise float _254;
        float _543;
        float _545;
        float _402 = 0.0;
        float _403 = 0.0;
        uint _404 = _401;
        uint _406 = 0u;
        float _442;
        float _461;
        vec4 _475;
        float _476;
        float _477;
        float _491;
        float _492;
        float _493;
        float _510;
        float _511;
        float _512;
        float _513;
        bool _514;
        bool _515;
        bool _516;
        precise float _517;
        precise float _518;
        precise float _519;
        float _520;
        float _521;
        float _522;
        precise float _523;
        bool _526;
        for (;;)
        {
            uint _408 = _404 & 255u;
            uint _410 = _408 * 24u;
            uvec3 _420 = uvec3(texelFetch(g_forceParam, int(_410)).x, texelFetch(g_forceParam, int(_410 + 1u)).x, texelFetch(g_forceParam, int(_410 + 2u)).x);
            uint _425 = (_408 * 24u) + 4u;
            vec4 _438 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_425)).x, texelFetch(g_forceParam, int(_425 + 1u)).x, texelFetch(g_forceParam, int(_425 + 2u)).x, texelFetch(g_forceParam, int(_425 + 3u)).x));
            _442 = _438.w;
            uint _444 = (_408 * 24u) + 8u;
            vec4 _457 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_444)).x, texelFetch(g_forceParam, int(_444 + 1u)).x, texelFetch(g_forceParam, int(_444 + 2u)).x, texelFetch(g_forceParam, int(_444 + 3u)).x));
            _461 = _457.w;
            uint _464 = (_408 * 24u) + 12u;
            _475 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_464)).x, texelFetch(g_forceParam, int(_464 + 1u)).x, _470, texelFetch(g_forceParam, int(_464 + 3u)).x));
            _476 = _475.x;
            _477 = _475.w;
            uint _480 = (_408 * 24u) + 16u;
            vec3 _490 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_480)).x, texelFetch(g_forceParam, int(_480 + 1u)).x, texelFetch(g_forceParam, int(_480 + 2u)).x));
            _491 = _490.x;
            _492 = _490.y;
            _493 = _490.z;
            uint _496 = (_408 * 24u) + 20u;
            vec4 _509 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_496)).x, texelFetch(g_forceParam, int(_496 + 1u)).x, texelFetch(g_forceParam, int(_496 + 2u)).x, texelFetch(g_forceParam, int(_496 + 3u)).x));
            _510 = _509.x;
            _511 = _509.y;
            _512 = _509.z;
            _513 = _509.w;
            _514 = _420.x == 1u;
            _515 = _420.y == 1u;
            _516 = _420.z == 1u;
            _517 = _223 - _438.x;
            _518 = _230 - _438.y;
            _519 = _237 - _438.z;
            _520 = _514 ? _457.x : _517;
            _521 = _514 ? _457.y : _518;
            _522 = _514 ? _457.z : _519;
            _523 = dot(vec3(_520, _521, _522), vec3(_520, _521, _522));
            _526 = _523 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_526)
            {
                precise float _528 = _517 * _517;
                precise float _529 = _518 * _518;
                precise float _530 = _528 + _529;
                precise float _531 = _519 * _519;
                precise float _532 = _531 + _530;
                float _533 = sqrt(_532);
                float _534 = inversesqrt(_523);
                precise float _535 = _520 * _534;
                precise float _536 = _521 * _534;
                precise float _537 = _522 * _534;
                precise float _540 = _533 / (isnan(0.001000000047497451305389404296875) ? _475.y : (isnan(_475.y) ? 0.001000000047497451305389404296875 : max(_475.y, 0.001000000047497451305389404296875)));
                precise float _541 = 1.0 - _540;
                float _693 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
                float _542 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
                float _566;
                if (_516)
                {
                    float _553 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
                    precise float _554 = _517 * _553;
                    precise float _555 = _518 * _553;
                    precise float _556 = _519 * _553;
                    precise float _560 = dot(vec3(_535, _536, _537), vec3(_554, _555, _556)) * 0.800000011920928955078125;
                    precise float _562 = _560 + 0.20000000298023223876953125;
                    float _704 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
                    precise float _565 = _542 * (isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0)));
                    _566 = _565;
                }
                else
                {
                    _566 = _542;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_566 > 0.0)
                {
                    bool _569 = _514 && (!_516);
                    precise float _571 = _533 * (-4.0);
                    precise float _575 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _476 : (isnan(_476) ? 0.001000000047497451305389404296875 : max(_476, 0.001000000047497451305389404296875)));
                    precise float _577 = dot(vec2(_535, _537), vec2(_517, _519));
                    precise float _580 = _575 * _577;
                    precise float _581 = float(_569) * _580;
                    precise float _582 = cbPerFrame._m0[22u].x * _575;
                    precise float _583 = _582 - _581;
                    precise float _584 = (_569 ? 0.0 : _571) + _583;
                    precise float _586 = _461 * sin(_584);
                    precise float _587 = _536 * 0.0;
                    precise float _588 = _587 - _537;
                    precise float _589 = _535 - _587;
                    precise float _590 = _477 * _586;
                    float _591 = _514 ? _590 : 0.0;
                    float _634;
                    if (_515)
                    {
                        precise float _594 = _491 * 2.0;
                        precise float _596 = _511 + _512;
                        precise float _597 = _513 + _596;
                        precise float _599 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _491 : (isnan(_491) ? 0.001000000047497451305389404296875 : max(_491, 0.001000000047497451305389404296875)));
                        precise float _600 = _510 * _599;
                        precise float _601 = (-0.0) - _535;
                        precise float _606 = dot(vec2(_537, _601), vec2(_517, _519)) / _594;
                        precise float _607 = (-0.0) - _606;
                        float _610 = fract(abs(_606));
                        precise float _611 = (-0.0) - _610;
                        precise float _613 = _594 * ((_606 >= _607) ? _610 : _611);
                        precise float _614 = _613 * 6.283184051513671875;
                        precise float _615 = _614 / _594;
                        precise float _617 = (isnan(5.0) ? _491 : (isnan(_491) ? 5.0 : min(_491, 5.0))) * sin(_615);
                        precise float _618 = _577 + _617;
                        precise float _619 = _491 * 0.25;
                        precise float _621 = cbPerFrame._m0[22u].x * _510;
                        precise float _622 = _621 - _619;
                        precise float _623 = _622 - _618;
                        precise float _624 = _510 * _597;
                        precise float _626 = _623 / (isnan(0.001000000047497451305389404296875) ? _624 : (isnan(_624) ? 0.001000000047497451305389404296875 : max(_624, 0.001000000047497451305389404296875)));
                        float _627 = fract(_626);
                        precise float _629 = 1.0 - _627;
                        float _630 = (_626 < 0.0) ? _629 : _627;
                        precise float _631 = _596 / _597;
                        precise float _632 = _511 / _597;
                        float _649;
                        if (_630 < _632)
                        {
                            precise float _647 = _630 / _632;
                            _649 = _647;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_630 < _631)
                            {
                                precise float _659 = _630 - _632;
                                precise float _660 = _631 - _632;
                                precise float _661 = _659 / _660;
                                precise float _650 = 1.0 - _661;
                                frontier_phi_14_13_ladder = _650;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _649 = frontier_phi_14_13_ladder;
                        }
                        precise float _651 = _493 * _649;
                        precise float _652 = _599 * _577;
                        precise float _653 = cbPerFrame._m0[22u].x * _600;
                        precise float _654 = _653 - _652;
                        precise float _656 = _492 + sin(_654);
                        precise float _658 = _651 * abs(_656);
                        precise float _635 = _658 + 0.0;
                        _634 = _635;
                    }
                    else
                    {
                        _634 = 0.0;
                    }
                    precise float _636 = _442 + _586;
                    precise float _637 = _636 + _634;
                    precise float _638 = _535 * _637;
                    precise float _639 = _537 * _637;
                    precise float _640 = _588 * _591;
                    precise float _641 = _589 * _591;
                    precise float _642 = _640 + _638;
                    precise float _643 = _641 + _639;
                    precise float _644 = _566 * _642;
                    precise float _645 = _566 * _643;
                    precise float _544 = _644 * 0.0500000007450580596923828125;
                    precise float _546 = _645 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _544;
                    frontier_phi_5_pred_7_ladder_1 = _546;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _543 = frontier_phi_5_pred;
            _545 = frontier_phi_5_pred_1;
            _252 = _402 + _543;
            _254 = _403 + _545;
            uint _407 = _406 + 1u;
            if (_407 == _247)
            {
                break;
            }
            else
            {
                _402 = _252;
                _403 = _254;
                _404 = (_406 != 3u) ? (_404 >> 8u) : _245;
                _406 = _407;
                continue;
            }
        }
        _251 = _252;
        _253 = _254;
    }
    precise float _255 = TEXCOORD_1.y * _251;
    precise float _256 = TEXCOORD_1.y * _253;
    precise float _261 = dot(vec2(_255, _256), vec2(_255, _256)) + 1.0;
    float _262 = sqrt(_261);
    precise float _263 = _255 / _262;
    precise float _264 = _256 / _262;
    precise float _268 = 1.0 - dot(vec2(_263, _264), vec2(_263, _264));
    float _735 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    precise float _271 = sqrt(isnan(1.0) ? _735 : (isnan(_735) ? 1.0 : min(_735, 1.0))) + (-1.0);
    precise float _273 = TEXCOORD_1.y * _263;
    precise float _274 = TEXCOORD_1.y * _271;
    precise float _275 = TEXCOORD_1.y * _264;
    precise float _276 = _223 + _273;
    precise float _277 = _230 + _274;
    precise float _278 = _237 + _275;
    precise float _303 = _276 - cbSceneParam._m0[3u].x;
    precise float _304 = _277 - cbSceneParam._m0[3u].y;
    precise float _305 = _278 - cbSceneParam._m0[3u].z;
    precise float _333 = _303 * cbSceneParam._m0[24u].x;
    precise float _334 = _304 * cbSceneParam._m0[24u].y;
    precise float _335 = _334 + _333;
    precise float _336 = _305 * cbSceneParam._m0[24u].z;
    precise float _337 = _336 + _335;
    precise float _338 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _339 = _338 + _337;
    precise float _340 = _303 * cbSceneParam._m0[25u].x;
    precise float _341 = _304 * cbSceneParam._m0[25u].y;
    precise float _342 = _341 + _340;
    precise float _343 = _305 * cbSceneParam._m0[25u].z;
    precise float _344 = _343 + _342;
    precise float _345 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _346 = _345 + _344;
    precise float _347 = _303 * cbSceneParam._m0[26u].x;
    precise float _348 = _304 * cbSceneParam._m0[26u].y;
    precise float _349 = _348 + _347;
    precise float _350 = _305 * cbSceneParam._m0[26u].z;
    precise float _351 = _350 + _349;
    precise float _352 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _353 = _352 + _351;
    precise float _354 = _303 * cbSceneParam._m0[27u].x;
    precise float _355 = _304 * cbSceneParam._m0[27u].y;
    precise float _356 = _355 + _354;
    precise float _357 = _305 * cbSceneParam._m0[27u].z;
    precise float _358 = _357 + _356;
    precise float _359 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _360 = _359 + _358;
    gl_Position.x = _339;
    gl_Position.y = _346;
    gl_Position.z = _353;
    gl_Position.w = _360;
    POSITION_1.x = _339;
    POSITION_1.y = _346;
    POSITION_1.z = _353;
    POSITION_1.w = _360;
    NORMAL_1.x = fma(_164, cbObjMatrix._m0[_195].z, fma(_163, cbObjMatrix._m0[_195].y, cbObjMatrix._m0[_195].x * _161));
    NORMAL_1.y = fma(_164, cbObjMatrix._m0[_202].z, fma(_163, cbObjMatrix._m0[_202].y, cbObjMatrix._m0[_202].x * _161));
    NORMAL_1.z = fma(_164, cbObjMatrix._m0[_209].z, fma(_163, cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_209].x * _161));
    NORMAL_1.w = float(_185);
    TANGENT_1.x = fma(_176, cbObjMatrix._m0[_195].z, fma(_175, cbObjMatrix._m0[_195].y, cbObjMatrix._m0[_195].x * _174));
    TANGENT_1.y = fma(_176, cbObjMatrix._m0[_202].z, fma(_175, cbObjMatrix._m0[_202].y, cbObjMatrix._m0[_202].x * _174));
    TANGENT_1.z = fma(_176, cbObjMatrix._m0[_209].z, fma(_175, cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_209].x * _174));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_339, _346, _353, _360), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_339, _346, _353, _360), vec4(cbInstanceData._m0[_187 + 3u]));
}


