#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _133 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _134 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _135 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _140 = inversesqrt(dot(vec3(_133, _134, _135), vec3(_133, _134, _135)));
    float _147 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _148 = _147 * NORMAL.x;
    float _149 = _147 * NORMAL.y;
    float _150 = _147 * NORMAL.z;
    float _154 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _148;
        _163 = (-0.0) - _149;
        _164 = (-0.0) - _150;
    }
    else
    {
        _162 = _148;
        _163 = _149;
        _164 = _150;
    }
    vec4 _178 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _181 = _178.x;
    float _182 = _178.y;
    float _183 = _178.z;
    float _184 = _178.w;
    vec4 _200 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _204 = _200.z;
    float _208 = (_200.x * 2.0) + (-1.0);
    float _210 = (_200.y * 2.0) + (-1.0);
    float _211 = dot(vec2(_208, _210), vec2(_208, _210));
    float _416 = isnan(0.0) ? _211 : (isnan(_211) ? 0.0 : max(_211, 0.0));
    float _217 = sqrt(1.0 - (isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0))));
    float _220 = fma(_217, _162, fma(_210, _154 * TANGENT.x, (_140 * _133) * _208));
    float _223 = fma(_217, _163, fma(_210, _154 * TANGENT.y, (_140 * _134) * _208));
    float _226 = fma(_217, _164, fma(_210, _154 * TANGENT.z, (_140 * _135) * _208));
    float _230 = inversesqrt(dot(vec3(_220, _223, _226), vec3(_220, _223, _226)));
    float _427 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _438 = isnan(0.0) ? _181 : (isnan(_181) ? 0.0 : max(_181, 0.0));
    float _232 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
    float _449 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _233 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    float _460 = isnan(0.0) ? _183 : (isnan(_183) ? 0.0 : max(_183, 0.0));
    float _234 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
    float _471 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    uint _237 = uint(roundEven(NORMAL.w));
    vec4 _242 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _244 = _242.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _307 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _482 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
        float _308 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        float _312 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _493 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _493 : (isnan(_493) ? 1.0 : min(_493, 1.0))) - _308)) + _308) < ((_244 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _341;
    uint _264;
    vec4 _269;
    float _276;
    float _277;
    float _278;
    float _282;
    vec4 _286;
    float _288;
    float _289;
    bool _300;
    for (;;)
    {
        _264 = _237 * 13u;
        _269 = cbInstanceData._m0[(_264 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _273 = (cbMtdParam._m0[0u].x * _232) * _269.x;
        float _274 = (cbMtdParam._m0[0u].y * _233) * _269.y;
        float _275 = (cbMtdParam._m0[0u].z * _234) * _269.z;
        float _504 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
        _276 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        float _515 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
        _277 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
        float _526 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
        _278 = isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0));
        _282 = cbInstanceData._m0[_264 + 6u].w;
        float _283 = _244 + (-0.5);
        _286 = cbMtdParam._m0[1u];
        _288 = _286.y * _283;
        _289 = _283 * 0.999000012874603271484375;
        _300 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_300)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _289) < 0.5)
            {
                _341 = true;
                break;
            }
        }
        if ((_269.w < 1.0) && ((_269.w + _289) < 0.5))
        {
            _341 = true;
            break;
        }
        if ((_288 + _184) < _286.x)
        {
            _341 = true;
            break;
        }
        _341 = false;
        break;
    }
    if (_341)
    {
        discard_state = true;
    }
    bool _367 = cbMtdParam._m0[1u].z != 0.0;
    float _368 = _367 ? _282 : 0.0;
    SV_Target.x = ((_220 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.y = ((_223 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.z = ((_226 * 0.5) * _230) + 0.500488758087158203125;
    SV_Target.w = _368;
    SV_Target_1.x = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
    SV_Target_1.y = isnan(1.0) ? _427 : (isnan(_427) ? 1.0 : min(_427, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _367 ? _282 : TEXCOORD.z;
    SV_Target_2.x = _276;
    SV_Target_2.y = _277;
    SV_Target_2.z = _278;
    SV_Target_2.w = _367 ? _282 : (float(floatBitsToUint(cbInstanceData._m0[_264 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _368;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _368;
    discard_exit();
}


