#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Grass_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _824;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _225 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _225.x;
    float _229 = _225.y;
    float _230 = _225.z;
    vec4 _246 = texture(sampler2D(M_AMSN_V_Grass_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3185 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))));
    float _266 = fma(_263, _209, fma(_256, _201 * TANGENT.x, (_187 * _180) * _254));
    float _269 = fma(_263, _210, fma(_256, _201 * TANGENT.y, (_187 * _181) * _254));
    float _272 = fma(_263, _211, fma(_256, _201 * TANGENT.z, (_187 * _182) * _254));
    float _276 = inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272)));
    float _277 = _276 * _266;
    float _278 = _276 * _269;
    float _279 = _276 * _272;
    float _3196 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _280 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3218 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3229 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3240 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _284 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _342 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _352 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _342);
    float _353 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _342);
    float _354 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _342);
    float _358 = inversesqrt(dot(vec3(_352, _353, _354), vec3(_352, _353, _354)));
    float _359 = _352 * _358;
    float _360 = _353 * _358;
    float _361 = _354 * _358;
    float _367 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _368 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _389 = fma(_279, cbSceneParam._m0[5u].z, fma(_278, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _277));
    float _392 = fma(_279, cbSceneParam._m0[6u].z, fma(_278, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _277));
    float _395 = fma(_279, cbSceneParam._m0[7u].z, fma(_278, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _277));
    uint _408 = uint(roundEven(NORMAL.w)) * 13u;
    uint _411 = (_408 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _417 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0)))) * cbInstanceData._m0[_411].x;
    float _418 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * cbInstanceData._m0[_411].y;
    float _419 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_411].z;
    float _3251 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _3262 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _423 = 1.0 - _284;
    float _424 = _420 * _423;
    float _425 = _421 * _423;
    float _426 = _422 * _423;
    float _431 = (_420 + (-0.039999999105930328369140625)) * _284;
    float _432 = (_421 + (-0.039999999105930328369140625)) * _284;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _284;
    float _434 = _431 + 0.039999999105930328369140625;
    float _436 = _432 + 0.039999999105930328369140625;
    float _437 = _433 + 0.039999999105930328369140625;
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _367, cbSceneParam._m0[86u].y * _368));
    float _449 = _446.x * TEXCOORD.z;
    float _450 = dot(vec3(_277, _278, _279), vec3(_359, _360, _361));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _277) - _359;
    float _458 = (_453 * _278) - _360;
    float _459 = (_453 * _279) - _361;
    float _463 = abs(dot(vec3(_359, _360, _361), vec3(_277, _278, _279)));
    float _3284 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_280);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _484 = (1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _485 = _478 * _465;
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _823;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _548 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _552 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _556 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _581 = _513 + _277;
        float _582 = _517 + _278;
        float _583 = _521 + _279;
        float _593 = fma(_583, cbModelParam._m0[26u].z, fma(_582, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581)) - _548;
        float _594 = fma(_583, cbModelParam._m0[27u].z, fma(_582, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581)) - _552;
        float _595 = fma(_583, cbModelParam._m0[28u].z, fma(_582, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581)) - _556;
        float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
        float _612 = ((_599 * _593) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_548 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _613 = ((_599 * _594) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_552 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _614 = ((_599 * _595) / cbModelParam._m0[34u].z) + ((((((_556 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_612, _613, _614), 0.0);
        float _651 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_617.x + (-0.5));
        float _653 = _651 * (_617.y + (-0.5));
        float _654 = _651 * (_617.z + (-0.5));
        float _661 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_624.x + (-0.5));
        float _663 = _661 * (_624.y + (-0.5));
        float _664 = _661 * (_624.z + (-0.5));
        float _671 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_631.x + (-0.5));
        float _673 = _671 * (_631.y + (-0.5));
        float _674 = _671 * (_631.z + (-0.5));
        float _681 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_638.x + (-0.5));
        float _683 = _681 * (_638.y + (-0.5));
        float _684 = _681 * (_638.z + (-0.5));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _687 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _688 = _652 * 0.5;
        float _689 = _662 * 0.5;
        float _690 = _672 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _705 = (dot(vec3(_277, _278, _279), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _715 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _717 = _716 * 2.0;
        float _721 = (1.0 - _716) / (_716 + 1.0);
        float _3332 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _731 = ((((1.0 - _722) * (_717 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_717 + 1.0))) + _722) * _685;
        float _732 = _653 * 0.5;
        float _733 = _663 * 0.5;
        float _734 = _673 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _748 = (dot(vec3(_277, _278, _279), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _757 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_686 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3365 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_759 + 1.0))) + _764) * _686;
        float _774 = _654 * 0.5;
        float _775 = _664 * 0.5;
        float _776 = _674 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_277, _278, _279), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_687 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3398 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_801 + 1.0))) + _806) * _687;
        _823 = _654;
        _825 = _653;
        _826 = _652;
        _827 = _664;
        _828 = _663;
        _829 = _662;
        _830 = _674;
        _831 = _673;
        _832 = _672;
        _833 = _687;
        _834 = _686;
        _835 = _685;
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0)));
        _837 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
    }
    else
    {
        _823 = _824;
        _825 = _824;
        _826 = _824;
        _827 = _824;
        _828 = _824;
        _829 = _824;
        _830 = _824;
        _831 = _824;
        _832 = _824;
        _833 = _824;
        _834 = _824;
        _835 = _824;
        _836 = 0.0;
        _837 = 0.0;
        _838 = 0.0;
    }
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _864 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _868 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _872 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _895 = _513 + _277;
        float _896 = _517 + _278;
        float _897 = _521 + _279;
        float _907 = fma(_897, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895)) - _864;
        float _908 = fma(_897, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895)) - _868;
        float _909 = fma(_897, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895)) - _872;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_864 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_868 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[35u].z) + ((((((_872 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _963 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_930.x + (-0.5));
        float _965 = _963 * (_930.y + (-0.5));
        float _966 = _963 * (_930.z + (-0.5));
        float _973 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_937.x + (-0.5));
        float _975 = _973 * (_937.y + (-0.5));
        float _976 = _973 * (_937.z + (-0.5));
        float _983 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_944.x + (-0.5));
        float _985 = _983 * (_944.y + (-0.5));
        float _986 = _983 * (_944.z + (-0.5));
        float _993 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_951.x + (-0.5));
        float _995 = _993 * (_951.y + (-0.5));
        float _996 = _993 * (_951.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_277, _278, _279), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3461 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1027 + 1.0))) + _1032) * _997;
        float _1042 = _965 * 0.5;
        float _1043 = _975 * 0.5;
        float _1044 = _985 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_277, _278, _279), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3494 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1069 + 1.0))) + _1074) * _998;
        float _1084 = _966 * 0.5;
        float _1085 = _976 * 0.5;
        float _1086 = _986 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_277, _278, _279), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3527 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1111 + 1.0))) + _1116) * _999;
        _1133 = _966;
        _1134 = _965;
        _1135 = _964;
        _1136 = _976;
        _1137 = _975;
        _1138 = _974;
        _1139 = _986;
        _1140 = _985;
        _1141 = _984;
        _1142 = _999;
        _1143 = _998;
        _1144 = _997;
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1146 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1147 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _824;
        _1134 = _824;
        _1135 = _824;
        _1136 = _824;
        _1137 = _824;
        _1138 = _824;
        _1139 = _824;
        _1140 = _824;
        _1141 = _824;
        _1142 = _824;
        _1143 = _824;
        _1144 = _824;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1158 = (cbModelParam._m0[1u].x * (_1146 - _837)) + _837;
    float _1159 = (cbModelParam._m0[1u].x * (_1147 - _838)) + _838;
    float _1180 = fma(_1159, cbSceneParam._m0[89u].z, fma(_1158, cbSceneParam._m0[89u].y, _1157 * cbSceneParam._m0[89u].x));
    float _1183 = fma(_1159, cbSceneParam._m0[90u].z, fma(_1158, cbSceneParam._m0[90u].y, _1157 * cbSceneParam._m0[90u].x));
    float _1186 = fma(_1159, cbSceneParam._m0[91u].z, fma(_1158, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1157));
    float _1201 = _457 * 0.5;
    float _1202 = _458 * 0.5;
    float _1203 = _459 * 0.5;
    float _1204 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1135, _1138, _1141, _1144));
    float _1207 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1134, _1137, _1140, _1143));
    float _1210 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1244;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1217 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_823, _827, _830, _833));
        float _1221 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_825, _828, _831, _834));
        float _1225 = dot(vec4(_1201, _1202, _1203, 1.0), vec4(_826, _829, _832, _835));
        float _1232 = dot(vec4(cbModelParam._m0[39u]), vec4(_1201, _1202, _1203, 1.0));
        _1244 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1232) ? 0.0 : (isnan(0.0) ? _1232 : max(0.0, _1232))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1244 = 1.0;
    }
    float _1255;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1246 = dot(vec4(cbModelParam._m0[40u]), vec4(_1201, _1202, _1203, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1259 = (_1255 * cbModelParam._m0[1u].x) + (_1244 * (1.0 - cbModelParam._m0[1u].x));
    float _1269 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _280);
    float _1270 = isnan(_1269) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1269 : min(cbModelParam._m0[25u].z, _1269));
    float _1352;
    float _1354;
    float _1356;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1319 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1323 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1327 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1330 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1333 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1336 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1364;
        if (_1330 > 0.0)
        {
            _1364 = abs((1.0 - _1319) / _1330);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1319 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1364 = frontier_phi_16_14_ladder;
        }
        float _1593;
        if (_1333 > 0.0)
        {
            _1593 = abs((1.0 - _1323) / _1333);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1323 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1593 = frontier_phi_25_21_ladder;
        }
        float _1850;
        if (_1336 > 0.0)
        {
            _1850 = abs((1.0 - _1327) / _1336);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1327 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1850 = frontier_phi_37_32_ladder;
        }
        float _1852 = isnan(_1593) ? _1364 : (isnan(_1364) ? _1593 : min(_1364, _1593));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1330) + _1319;
        float _1858 = (_1853 * _1333) + _1323;
        float _1859 = (_1853 * _1336) + _1327;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1860;
        float _1864 = _1860 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 > _1864) || ((_1858 < _1862) || ((_1857 < _1862) || (_1857 > _1864))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1859, cbModelParam._m0[9u].z, fma(_1858, cbModelParam._m0[9u].y, _1857 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1859, cbModelParam._m0[10u].z, fma(_1858, cbModelParam._m0[10u].y, _1857 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1859, cbModelParam._m0[11u].z, fma(_1858, cbModelParam._m0[11u].y, _1857 * cbModelParam._m0[11u].x))), _1270);
            frontier_phi_15_37_ladder = _1987.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1987.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1987.x * cbModelParam._m0[1u].y;
        }
        _1352 = frontier_phi_15_37_ladder_2;
        _1354 = frontier_phi_15_37_ladder_1;
        _1356 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1270);
        _1352 = _1340.x * cbModelParam._m0[1u].y;
        _1354 = _1340.y * cbModelParam._m0[1u].y;
        _1356 = _1340.z * cbModelParam._m0[1u].y;
    }
    float _1360 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _280);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1360 : min(cbModelParam._m0[25u].w, _1360));
    float _1454;
    float _1456;
    float _1458;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1418 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1422 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1426 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1429 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1432 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1435 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1598;
        if (_1429 > 0.0)
        {
            _1598 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1598 = frontier_phi_27_23_ladder;
        }
        float _1877;
        if (_1432 > 0.0)
        {
            _1877 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1877 = frontier_phi_39_34_ladder;
        }
        float _2090;
        if (_1435 > 0.0)
        {
            _2090 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2090 = frontier_phi_48_45_ladder;
        }
        float _2092 = isnan(_1877) ? _1598 : (isnan(_1598) ? _1877 : min(_1598, _1877));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1429) + _1418;
        float _2098 = (_2093 * _1432) + _1422;
        float _2099 = (_2093 * _1435) + _1426;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2100;
        float _2103 = _2100 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2099 > _2103) || ((_2099 < _2101) || ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 < _2101) || (_2097 > _2103))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2099, cbModelParam._m0[17u].z, fma(_2098, cbModelParam._m0[17u].y, _2097 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2099, cbModelParam._m0[18u].z, fma(_2098, cbModelParam._m0[18u].y, _2097 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2099, cbModelParam._m0[19u].z, fma(_2098, cbModelParam._m0[19u].y, _2097 * cbModelParam._m0[19u].x))), _1361);
            frontier_phi_24_48_ladder = _2297.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2297.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2297.x * cbModelParam._m0[1u].z;
        }
        _1454 = frontier_phi_24_48_ladder_2;
        _1456 = frontier_phi_24_48_ladder_1;
        _1458 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1361);
        _1454 = _1438.x * cbModelParam._m0[1u].z;
        _1456 = _1438.y * cbModelParam._m0[1u].z;
        _1458 = _1438.z * cbModelParam._m0[1u].z;
    }
    float _1471 = (((_484 * _434) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1473 = (((_484 * _436) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1475 = (((_484 * _437) + _485) * _449) * ((cbModelParam._m0[1u].w * (_1458 - _1356)) + _1356);
    float _1478 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, _1471 * cbSceneParam._m0[91u].x));
    vec4 _1492 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_367, _368));
    float _1494 = _1492.w;
    float _1506 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1494);
    float _1507 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1494);
    float _1508 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1494);
    uvec4 _1512 = floatBitsToUint(cbInstanceData._m0[_408 + 5u]);
    uint _1514 = _1512.x * 14u;
    uint _1515 = _1514 + 13u;
    float _1522 = _449 + (-1.0);
    float _1527 = (cbLight._m0[_1515].x * _1522) + 1.0;
    float _1528 = (cbLight._m0[_1515].y * _1522) + 1.0;
    float _1529 = (cbLight._m0[_1515].z * _1522) + 1.0;
    float _1530 = (cbLight._m0[_1515].w * _1522) + 1.0;
    uint _1531 = _1514 + 5u;
    float _1537 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1541 = _1514 + 4u;
    float _1551 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1555 = _1514 | 1u;
    float _1566 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_277, _278, _279));
    float _1569 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_277, _278, _279));
    float _3663 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _3674 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1574 = (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.3183098733425140380859375;
    float _1576 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.3183098733425140380859375;
    float _1583 = ((cbLight._m0[_1531].x * _1537) * _1576) + (((cbLight._m0[_1541].x * _1506) * _1551) * _1574);
    float _1584 = ((_1537 * cbLight._m0[_1531].y) * _1576) + (((cbLight._m0[_1541].y * _1507) * _1551) * _1574);
    float _1585 = ((_1537 * cbLight._m0[_1531].z) * _1576) + (((cbLight._m0[_1541].z * _1508) * _1551) * _1574);
    uvec4 _1590 = floatBitsToUint(cbLight._m0[_1514 + 12u]);
    bool _1592 = _1590.x == 0u;
    float _1603;
    float _1605;
    float _1607;
    if (_1592)
    {
        _1603 = _1583;
        _1605 = _1584;
        _1607 = _1585;
    }
    else
    {
        uint _1611 = _1514 + 6u;
        float _1627 = (dot(vec3(cbLight._m0[_1514 + 2u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1628 = _1627 * _1627;
        float _3685 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1630 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1603 = (((cbLight._m0[_1611].x * 0.3183098733425140380859375) * _1629) * _1630) + _1583;
        _1605 = (((cbLight._m0[_1611].y * 0.3183098733425140380859375) * _1629) * _1630) + _1584;
        _1607 = (((cbLight._m0[_1611].z * 0.3183098733425140380859375) * _1629) * _1630) + _1585;
    }
    bool _1610 = _1590.y == 0u;
    float _1648;
    float _1650;
    float _1652;
    if (_1610)
    {
        _1648 = _1603;
        _1650 = _1605;
        _1652 = _1607;
    }
    else
    {
        uint _1821 = _1514 + 7u;
        float _1837 = (dot(vec3(cbLight._m0[_1514 + 3u].xyz), vec3(_277, _278, _279)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3701 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1840 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1648 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1603;
        _1650 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1605;
        _1652 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1607;
    }
    uint _1655 = _1514 + 8u;
    float _1668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1514].w)) * _280) * 0.949999988079071044921875);
    float _1669 = _1668 * _1668;
    float _1670 = cbLight._m0[_1514].x + _359;
    float _1671 = cbLight._m0[_1514].y + _360;
    float _1672 = cbLight._m0[_1514].z + _361;
    float _1676 = inversesqrt(dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672)));
    float _1677 = _1676 * _1670;
    float _1678 = _1676 * _1671;
    float _1679 = _1676 * _1672;
    float _1680 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1514].xyz));
    float _3717 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1683 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1684 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1685 = dot(vec3(_277, _278, _279), vec3(_1677, _1678, _1679));
    float _3739 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1689 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_1677, _1678, _1679));
    float _3750 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1693 = _1669 * _1669;
    float _1697 = ((_1688 * _1688) * (_1693 + (-1.0))) + 1.0;
    float _1705 = exp2(log2(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * 5.0);
    float _1706 = 0.959999978542327880859375 - _431;
    float _1708 = 0.959999978542327880859375 - _432;
    float _1709 = 0.959999978542327880859375 - _433;
    float _1716 = 1.0 - _1669;
    float _1727 = (0.5 / (((_1684 * ((_1683 * _1716) + _1669)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1716) + _1669) * _1683))) * _1683;
    float _3761 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1729 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1693 / ((_1697 * _1697) * 3.141590118408203125));
    uint _1743 = _1514 + 9u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1555].w)) * _280) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1555].x + _359;
    float _1757 = cbLight._m0[_1555].y + _360;
    float _1758 = cbLight._m0[_1555].z + _361;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1555].xyz));
    float _3772 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1770 = dot(vec3(_277, _278, _279), vec3(_1763, _1764, _1765));
    float _3783 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1763, _1764, _1765));
    float _3794 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1755 * _1755;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1789 = exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0);
    float _1796 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1684 * ((_1769 * _1796) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1796) + _1755) * _1769))) * _1769;
    float _3805 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    float _1818 = (((((_1789 * _1706) + _434) * cbLight._m0[_1743].x) * _1808) * _1537) + ((((cbLight._m0[_1655].x * _1506) * ((_1705 * _1706) + _434)) * _1729) * _1551);
    float _1819 = (((((_1789 * _1708) + _436) * cbLight._m0[_1743].y) * _1808) * _1537) + ((((cbLight._m0[_1655].y * _1507) * ((_1705 * _1708) + _436)) * _1729) * _1551);
    float _1820 = (((((_1789 * _1709) + _437) * cbLight._m0[_1743].z) * _1808) * _1537) + ((((cbLight._m0[_1655].z * _1508) * ((_1705 * _1709) + _437)) * _1729) * _1551);
    float _1882;
    float _1884;
    float _1886;
    if (_1592)
    {
        _1882 = _1818;
        _1884 = _1819;
        _1886 = _1820;
    }
    else
    {
        uint _1888 = _1514 + 2u;
        uint _1892 = _1514 + 10u;
        float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _280) * 0.949999988079071044921875);
        float _1907 = _1906 * _1906;
        float _1908 = cbLight._m0[_1888].x + _359;
        float _1909 = cbLight._m0[_1888].y + _360;
        float _1910 = cbLight._m0[_1888].z + _361;
        float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
        float _1915 = _1914 * _1908;
        float _1916 = _1914 * _1909;
        float _1917 = _1914 * _1910;
        float _1918 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_1888].xyz));
        float _3816 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1922 = dot(vec3(_277, _278, _279), vec3(_1915, _1916, _1917));
        float _3827 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_1915, _1916, _1917));
        float _3838 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1907 * _1907;
        float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
        float _1941 = exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0);
        float _1948 = 1.0 - _1907;
        float _1958 = (0.5 / (((_1684 * ((_1921 * _1948) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1948) + _1907) * _1921))) * _1921;
        float _3849 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1960 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
        float _1961 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
        _1882 = (((((_1941 * _1706) + _434) * cbLight._m0[_1892].x) * _1960) * _1961) + _1818;
        _1884 = (((((_1941 * _1708) + _436) * cbLight._m0[_1892].y) * _1960) * _1961) + _1819;
        _1886 = (((((_1941 * _1709) + _437) * cbLight._m0[_1892].z) * _1960) * _1961) + _1820;
    }
    float _1996;
    float _1998;
    float _2000;
    if (_1610)
    {
        _1996 = _1882;
        _1998 = _1884;
        _2000 = _1886;
    }
    else
    {
        uint _2007 = _1514 + 3u;
        uint _2011 = _1514 + 11u;
        float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _280) * 0.949999988079071044921875);
        float _2026 = _2025 * _2025;
        float _2027 = cbLight._m0[_2007].x + _359;
        float _2028 = cbLight._m0[_2007].y + _360;
        float _2029 = cbLight._m0[_2007].z + _361;
        float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
        float _2034 = _2033 * _2027;
        float _2035 = _2033 * _2028;
        float _2036 = _2033 * _2029;
        float _2037 = dot(vec3(_277, _278, _279), vec3(cbLight._m0[_2007].xyz));
        float _3865 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _2041 = dot(vec3(_277, _278, _279), vec3(_2034, _2035, _2036));
        float _3876 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2044 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2045 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2034, _2035, _2036));
        float _3887 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2049 = _2026 * _2026;
        float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
        float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
        float _2067 = 1.0 - _2026;
        float _2077 = (0.5 / (((_1684 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _2067) + _2026) * _2040))) * _2040;
        float _3898 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2079 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
        float _2080 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1996 = (((((_2060 * _1706) + _434) * cbLight._m0[_2011].x) * _2079) * _2080) + _1882;
        _1998 = (((((_2060 * _1708) + _436) * cbLight._m0[_2011].y) * _2079) * _2080) + _1884;
        _2000 = (((((_2060 * _1709) + _437) * cbLight._m0[_2011].z) * _2079) * _2080) + _1886;
    }
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    if (_1512.y == 0u)
    {
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2155;
        float _2157 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2155;
        float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2155;
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.x;
        uint _2182 = uint((float(_2170.y) * floor(float(uint(cbSceneParam._m0[85u].y * _368) / _2171))) + floor(float(uint(cbSceneParam._m0[85u].x * _367) / _2171)));
        float _2192 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2193 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        uint _2196 = uint(isnan(14.0) ? _2193 : (isnan(_2193) ? 14.0 : min(_2193, 14.0)));
        uvec4 _2201 = texelFetch(g_lightClusterGridBuffer, int(((_2196 << 2u) + (_2182 << 6u)) >> 2u));
        uint _2202 = _2201.x;
        uint _2203 = _2170.z;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((((1u << ((_2203 >> 4u) & 15u)) + 4294967295u) & _2202) == 0u) || ((_2203 & 240u) == 0u))
        {
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
        }
        else
        {
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2462)
                {
                    frontier_phi_63_pred = _2451;
                    frontier_phi_63_pred_1 = _2450;
                    frontier_phi_63_pred_2 = _2449;
                    frontier_phi_63_pred_3 = _2448;
                    frontier_phi_63_pred_4 = _2447;
                    frontier_phi_63_pred_5 = _2446;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2156;
                        float _2637 = _2596.y - _2157;
                        float _2638 = _2596.z - _2158;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_389, _392, _395), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3924 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2156;
                        float _2672 = (-0.0) - _2157;
                        float _2673 = (-0.0) - _2158;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2689 = 1.0 - _465;
                        float _2696 = sqrt(1.0 - ((1.0 - (_2689 * _2689)) * (1.0 - (_2688 * _2688))));
                        float _2697 = _2696 * _2696;
                        float _2698 = _2697 * _2697;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2709 = dot(vec3(_389, _392, _395), vec3(_2678, _2679, _2680));
                        float _3940 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
                        float _2713 = dot(vec3(_389, _392, _395), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701));
                        float _3951 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2720 = ((_2716 * _2716) * (_2698 + (-1.0))) + 1.0;
                        float _2721 = _2656 * _2697;
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2646) + _2722;
                        float _3962 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2727 = 1.0 - _2697;
                        float _2737 = (0.5 / (((_2726 * ((_2712 * _2727) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2727) + _2697) * _2712))) * _2726;
                        float _3973 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2748 = (((_2698 * 3.1415927410125732421875) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) / ((_2720 * _2720) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2748 * _2632.x) + _2570;
                        _2503 = (_2748 * _2632.y) + _2571;
                        _2504 = (_2748 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_63_pred = _2507;
                    frontier_phi_63_pred_1 = _2506;
                    frontier_phi_63_pred_2 = _2505;
                    frontier_phi_63_pred_3 = _2504;
                    frontier_phi_63_pred_4 = _2503;
                    frontier_phi_63_pred_5 = _2502;
                }
                _2313 = frontier_phi_63_pred;
                _2311 = frontier_phi_63_pred_1;
                _2309 = frontier_phi_63_pred_2;
                _2307 = frontier_phi_63_pred_3;
                _2305 = frontier_phi_63_pred_4;
                _2303 = frontier_phi_63_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2303;
                    _2447 = _2305;
                    _2448 = _2307;
                    _2449 = _2309;
                    _2450 = _2311;
                    _2451 = _2313;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
        }
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.z;
        uint _2319 = (_2317 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2319) & _2202) == 0u)
        {
            _2414 = _2302;
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _2440 = _2439 * _2156;
            float _2441 = _2439 * _2157;
            float _2442 = _2439 * _2158;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2319 < ((_2317 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2302;
                float _2554 = _2304;
                float _2555 = _2306;
                float _2556 = _2308;
                float _2557 = _2310;
                float _2558 = _2312;
                uint _2559 = _2319;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2196 << 5u) + (_2182 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2569)
                    {
                        frontier_phi_69_pred = _2558;
                        frontier_phi_69_pred_1 = _2557;
                        frontier_phi_69_pred_2 = _2556;
                        frontier_phi_69_pred_3 = _2555;
                        frontier_phi_69_pred_4 = _2554;
                        frontier_phi_69_pred_5 = _2553;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        uint _2772 = _2568;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2842;
                        vec4 _2858;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2783 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2829 = (_2783 * 40u) + 16u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2845 = (_2783 * 40u) + 20u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2783 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2783 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2158, _2893.z, fma(_2157, _2893.y, _2893.x * _2156)) + _2893.w;
                            _2906 = !((fma(_2158, _2874.z, fma(_2157, _2874.y, _2874.x * _2156)) + _2874.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2798.x - _2156;
                                float _2934 = _2798.y - _2157;
                                float _2935 = _2798.z - _2158;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2799 * _2799));
                                float _3984 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _2951 = sqrt(_2936) * _2814.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_389, _392, _395))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2158, _2842.z, fma(_2157, _2842.y, _2842.x * _2156)) + _2842.w) / _2905;
                                float _2965 = (fma(_2158, _2858.z, fma(_2157, _2858.y, _2858.x * _2156)) + _2858.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _4000 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _465;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_389, _392, _395), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4011 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3008 = dot(vec3(_389, _392, _395), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _4022 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_389, _392, _395), vec3(_2940, _2941, _2942))) + _3017;
                                float _4033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _4044 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2971 * _2814.z;
                                frontier_phi_75_pred_1 = _2971 * _2814.y;
                                frontier_phi_75_pred_2 = _2971 * _2814.x;
                                frontier_phi_75_pred_3 = _3045 * _2826.z;
                                frontier_phi_75_pred_4 = _3045 * _2826.y;
                                frontier_phi_75_pred_5 = _3045 * _2826.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_75_pred;
                            _3053 = frontier_phi_75_pred_1;
                            _3052 = frontier_phi_75_pred_2;
                            _3051 = frontier_phi_75_pred_3;
                            _3050 = frontier_phi_75_pred_4;
                            _3049 = frontier_phi_75_pred_5;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2758;
                        frontier_phi_69_pred_1 = _2757;
                        frontier_phi_69_pred_2 = _2756;
                        frontier_phi_69_pred_3 = _2755;
                        frontier_phi_69_pred_4 = _2754;
                        frontier_phi_69_pred_5 = _2753;
                    }
                    _2425 = frontier_phi_69_pred;
                    _2423 = frontier_phi_69_pred_1;
                    _2421 = frontier_phi_69_pred_2;
                    _2419 = frontier_phi_69_pred_3;
                    _2417 = frontier_phi_69_pred_4;
                    _2415 = frontier_phi_69_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_57_58_ladder = _2312;
                frontier_phi_57_58_ladder_1 = _2310;
                frontier_phi_57_58_ladder_2 = _2308;
                frontier_phi_57_58_ladder_3 = _2306;
                frontier_phi_57_58_ladder_4 = _2304;
                frontier_phi_57_58_ladder_5 = _2302;
            }
            _2414 = frontier_phi_57_58_ladder_5;
            _2416 = frontier_phi_57_58_ladder_4;
            _2418 = frontier_phi_57_58_ladder_3;
            _2420 = frontier_phi_57_58_ladder_2;
            _2422 = frontier_phi_57_58_ladder_1;
            _2424 = frontier_phi_57_58_ladder;
        }
        float _2429 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2214 = (_2429 * _2420) + _1648;
        _2216 = (_2429 * _2422) + _1650;
        _2218 = (_2429 * _2424) + _1652;
        _2220 = ((_2414 * _434) * _2429) + _1996;
        _2222 = ((_2416 * _436) * _2429) + _1998;
        _2224 = ((_2418 * _437) * _2429) + _2000;
    }
    else
    {
        _2214 = _1648;
        _2216 = _1650;
        _2218 = _1652;
        _2220 = _1996;
        _2222 = _1998;
        _2224 = _2000;
    }
    float _4060 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _4071 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _4082 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    uint _2244 = _408 + 6u;
    float _2252 = _367 / cbSceneParam._m0[86u].x;
    float _2253 = _368 / cbSceneParam._m0[86u].y;
    vec4 _2267 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2269 = _2267.x;
    float _2270 = _2267.y;
    float _2271 = _2267.z;
    float _2272 = _2267.w;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2327 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2328 = _2327 / _300;
        float _2339 = _2328 * _352;
        float _2340 = _353 * _2328;
        float _2341 = (-0.0) - _2340;
        float _2342 = _2328 * _354;
        float _2344 = (cbSceneParam._m0[77u].w * _2341) / _2327;
        float _2345 = _2344 + cbSceneParam._m0[79u].w;
        float _2346 = cbSceneParam._m0[79u].w - _2340;
        float _2352 = sqrt(((_2339 * _2339) + (_2340 * _2340)) + (_2342 * _2342));
        float _2355 = (1.0 - (cbSceneParam._m0[77u].w / _2327)) * _2352;
        float _2360 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2362 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2341 - _2344) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2345 > 0.0) ? exp2(_2360 * _2345) : (2.0 - exp2(_2362 * _2345))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2355;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : max(_2345, _2346));
            float _2477 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : min(_2345, _2346));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2352 / _2341) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2360 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2360 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2362 * _2486) - exp2(_2362 * _2487)) * _2475))) + (_2355 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2272);
        _2364 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2269;
        _2366 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2270;
        _2368 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2271;
        _2370 = _2526 * _2272;
    }
    else
    {
        _2364 = _2269;
        _2366 = _2270;
        _2368 = _2271;
        _2370 = _2272;
    }
    float _2382 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2383 = _2382 == 3.0;
    float _2384 = log2(_2370);
    float _2391 = exp2(_2384 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2214 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _449))) + ((_2220 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1259)) * cbPerFrame._m0[3u].x));
    float _2392 = exp2(_2384 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2216 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _449))) + ((_2222 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1259)) * cbPerFrame._m0[3u].x));
    float _2393 = exp2(_2384 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2218 + ((isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))) * _449))) + ((_2224 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1259)) * cbPerFrame._m0[3u].x));
    float _2402 = (_2382 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2402 * (_2383 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.y = _2402 * (_2383 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.z = _2402 * (_2383 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.w = cbInstanceData._m0[_2244].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2244].w;
}


