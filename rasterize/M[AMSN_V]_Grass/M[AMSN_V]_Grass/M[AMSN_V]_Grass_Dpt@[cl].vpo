#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _329;

void main()
{
    uint _60 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    uint _91 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _60;
    uint _105 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_91)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _112 = _105 + 1u;
    uint _119 = _105 + 2u;
    precise float _126 = POSITION.x * cbObjMatrix._m0[_105].x;
    precise float _127 = POSITION.y * cbObjMatrix._m0[_105].y;
    precise float _128 = _127 + _126;
    precise float _129 = POSITION.z * cbObjMatrix._m0[_105].z;
    precise float _130 = _129 + _128;
    precise float _131 = 1.0 * cbObjMatrix._m0[_105].w;
    precise float _133 = _131 + _130;
    precise float _134 = POSITION.x * cbObjMatrix._m0[_112].x;
    precise float _135 = POSITION.y * cbObjMatrix._m0[_112].y;
    precise float _136 = _135 + _134;
    precise float _137 = POSITION.z * cbObjMatrix._m0[_112].z;
    precise float _138 = _137 + _136;
    precise float _139 = 1.0 * cbObjMatrix._m0[_112].w;
    precise float _140 = _139 + _138;
    precise float _141 = POSITION.x * cbObjMatrix._m0[_119].x;
    precise float _142 = POSITION.y * cbObjMatrix._m0[_119].y;
    precise float _143 = _142 + _141;
    precise float _144 = POSITION.z * cbObjMatrix._m0[_119].z;
    precise float _145 = _144 + _143;
    precise float _146 = 1.0 * cbObjMatrix._m0[_119].w;
    precise float _147 = _146 + _145;
    uvec4 _153 = floatBitsToUint(cbInstanceData._m0[(_60 * 13u) + 7u]);
    uint _155 = _153.w;
    uint _157 = min(_153.y, 8u);
    float _161;
    float _163;
    if (_157 == 0u)
    {
        _161 = 0.0;
        _163 = 0.0;
    }
    else
    {
        uint _260 = _153.z;
        precise float _162;
        precise float _164;
        float _402;
        float _404;
        float _261 = 0.0;
        float _262 = 0.0;
        uint _263 = _260;
        uint _265 = 0u;
        float _301;
        float _320;
        vec4 _334;
        float _335;
        float _336;
        float _350;
        float _351;
        float _352;
        float _369;
        float _370;
        float _371;
        float _372;
        bool _373;
        bool _374;
        bool _375;
        precise float _376;
        precise float _377;
        precise float _378;
        float _379;
        float _380;
        float _381;
        precise float _382;
        bool _385;
        for (;;)
        {
            uint _267 = _263 & 255u;
            uint _269 = _267 * 24u;
            uvec3 _279 = uvec3(texelFetch(g_forceParam, int(_269)).x, texelFetch(g_forceParam, int(_269 + 1u)).x, texelFetch(g_forceParam, int(_269 + 2u)).x);
            uint _284 = (_267 * 24u) + 4u;
            vec4 _297 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_284)).x, texelFetch(g_forceParam, int(_284 + 1u)).x, texelFetch(g_forceParam, int(_284 + 2u)).x, texelFetch(g_forceParam, int(_284 + 3u)).x));
            _301 = _297.w;
            uint _303 = (_267 * 24u) + 8u;
            vec4 _316 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_303)).x, texelFetch(g_forceParam, int(_303 + 1u)).x, texelFetch(g_forceParam, int(_303 + 2u)).x, texelFetch(g_forceParam, int(_303 + 3u)).x));
            _320 = _316.w;
            uint _323 = (_267 * 24u) + 12u;
            _334 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_323)).x, texelFetch(g_forceParam, int(_323 + 1u)).x, _329, texelFetch(g_forceParam, int(_323 + 3u)).x));
            _335 = _334.x;
            _336 = _334.w;
            uint _339 = (_267 * 24u) + 16u;
            vec3 _349 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_339)).x, texelFetch(g_forceParam, int(_339 + 1u)).x, texelFetch(g_forceParam, int(_339 + 2u)).x));
            _350 = _349.x;
            _351 = _349.y;
            _352 = _349.z;
            uint _355 = (_267 * 24u) + 20u;
            vec4 _368 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_355)).x, texelFetch(g_forceParam, int(_355 + 1u)).x, texelFetch(g_forceParam, int(_355 + 2u)).x, texelFetch(g_forceParam, int(_355 + 3u)).x));
            _369 = _368.x;
            _370 = _368.y;
            _371 = _368.z;
            _372 = _368.w;
            _373 = _279.x == 1u;
            _374 = _279.y == 1u;
            _375 = _279.z == 1u;
            _376 = _133 - _297.x;
            _377 = _140 - _297.y;
            _378 = _147 - _297.z;
            _379 = _373 ? _316.x : _376;
            _380 = _373 ? _316.y : _377;
            _381 = _373 ? _316.z : _378;
            _382 = dot(vec3(_379, _380, _381), vec3(_379, _380, _381));
            _385 = _382 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            if (_385)
            {
                precise float _387 = _376 * _376;
                precise float _388 = _377 * _377;
                precise float _389 = _387 + _388;
                precise float _390 = _378 * _378;
                precise float _391 = _390 + _389;
                float _392 = sqrt(_391);
                float _393 = inversesqrt(_382);
                precise float _394 = _379 * _393;
                precise float _395 = _380 * _393;
                precise float _396 = _381 * _393;
                precise float _399 = _392 / (isnan(0.001000000047497451305389404296875) ? _334.y : (isnan(_334.y) ? 0.001000000047497451305389404296875 : max(_334.y, 0.001000000047497451305389404296875)));
                precise float _400 = 1.0 - _399;
                float _552 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
                float _401 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
                float _425;
                if (_375)
                {
                    float _412 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
                    precise float _413 = _376 * _412;
                    precise float _414 = _377 * _412;
                    precise float _415 = _378 * _412;
                    precise float _419 = dot(vec3(_394, _395, _396), vec3(_413, _414, _415)) * 0.800000011920928955078125;
                    precise float _421 = _419 + 0.20000000298023223876953125;
                    float _563 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
                    precise float _424 = _401 * (isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0)));
                    _425 = _424;
                }
                else
                {
                    _425 = _401;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                if (_425 > 0.0)
                {
                    bool _428 = _373 && (!_375);
                    precise float _430 = _392 * (-4.0);
                    precise float _434 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _335 : (isnan(_335) ? 0.001000000047497451305389404296875 : max(_335, 0.001000000047497451305389404296875)));
                    precise float _436 = dot(vec2(_394, _396), vec2(_376, _378));
                    precise float _439 = _434 * _436;
                    precise float _440 = float(_428) * _439;
                    precise float _441 = cbPerFrame._m0[22u].x * _434;
                    precise float _442 = _441 - _440;
                    precise float _443 = (_428 ? 0.0 : _430) + _442;
                    precise float _445 = _320 * sin(_443);
                    precise float _446 = _395 * 0.0;
                    precise float _447 = _446 - _396;
                    precise float _448 = _394 - _446;
                    precise float _449 = _336 * _445;
                    float _450 = _373 ? _449 : 0.0;
                    float _493;
                    if (_374)
                    {
                        precise float _453 = _350 * 2.0;
                        precise float _455 = _370 + _371;
                        precise float _456 = _372 + _455;
                        precise float _458 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _350 : (isnan(_350) ? 0.001000000047497451305389404296875 : max(_350, 0.001000000047497451305389404296875)));
                        precise float _459 = _369 * _458;
                        precise float _460 = (-0.0) - _394;
                        precise float _465 = dot(vec2(_396, _460), vec2(_376, _378)) / _453;
                        precise float _466 = (-0.0) - _465;
                        float _469 = fract(abs(_465));
                        precise float _470 = (-0.0) - _469;
                        precise float _472 = _453 * ((_465 >= _466) ? _469 : _470);
                        precise float _473 = _472 * 6.283184051513671875;
                        precise float _474 = _473 / _453;
                        precise float _476 = (isnan(5.0) ? _350 : (isnan(_350) ? 5.0 : min(_350, 5.0))) * sin(_474);
                        precise float _477 = _436 + _476;
                        precise float _478 = _350 * 0.25;
                        precise float _480 = cbPerFrame._m0[22u].x * _369;
                        precise float _481 = _480 - _478;
                        precise float _482 = _481 - _477;
                        precise float _483 = _369 * _456;
                        precise float _485 = _482 / (isnan(0.001000000047497451305389404296875) ? _483 : (isnan(_483) ? 0.001000000047497451305389404296875 : max(_483, 0.001000000047497451305389404296875)));
                        float _486 = fract(_485);
                        precise float _488 = 1.0 - _486;
                        float _489 = (_485 < 0.0) ? _488 : _486;
                        precise float _490 = _455 / _456;
                        precise float _491 = _370 / _456;
                        float _508;
                        if (_489 < _491)
                        {
                            precise float _506 = _489 / _491;
                            _508 = _506;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_489 < _490)
                            {
                                precise float _518 = _489 - _491;
                                precise float _519 = _490 - _491;
                                precise float _520 = _518 / _519;
                                precise float _509 = 1.0 - _520;
                                frontier_phi_14_13_ladder = _509;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _508 = frontier_phi_14_13_ladder;
                        }
                        precise float _510 = _352 * _508;
                        precise float _511 = _458 * _436;
                        precise float _512 = cbPerFrame._m0[22u].x * _459;
                        precise float _513 = _512 - _511;
                        precise float _515 = _351 + sin(_513);
                        precise float _517 = _510 * abs(_515);
                        precise float _494 = _517 + 0.0;
                        _493 = _494;
                    }
                    else
                    {
                        _493 = 0.0;
                    }
                    precise float _495 = _301 + _445;
                    precise float _496 = _495 + _493;
                    precise float _497 = _394 * _496;
                    precise float _498 = _396 * _496;
                    precise float _499 = _447 * _450;
                    precise float _500 = _448 * _450;
                    precise float _501 = _499 + _497;
                    precise float _502 = _500 + _498;
                    precise float _503 = _425 * _501;
                    precise float _504 = _425 * _502;
                    precise float _403 = _503 * 0.0500000007450580596923828125;
                    precise float _405 = _504 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _403;
                    frontier_phi_5_pred_7_ladder_1 = _405;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
            }
            _402 = frontier_phi_5_pred;
            _404 = frontier_phi_5_pred_1;
            _162 = _261 + _402;
            _164 = _262 + _404;
            uint _266 = _265 + 1u;
            if (_266 == _157)
            {
                break;
            }
            else
            {
                _261 = _162;
                _262 = _164;
                _263 = (_265 != 3u) ? (_263 >> 8u) : _155;
                _265 = _266;
                continue;
            }
        }
        _161 = _162;
        _163 = _164;
    }
    precise float _165 = TEXCOORD_1.y * _161;
    precise float _166 = TEXCOORD_1.y * _163;
    precise float _171 = dot(vec2(_165, _166), vec2(_165, _166)) + 1.0;
    float _172 = sqrt(_171);
    precise float _173 = _165 / _172;
    precise float _174 = _166 / _172;
    precise float _178 = 1.0 - dot(vec2(_173, _174), vec2(_173, _174));
    float _594 = isnan(0.0) ? _178 : (isnan(_178) ? 0.0 : max(_178, 0.0));
    precise float _181 = sqrt(isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0))) + (-1.0);
    precise float _183 = TEXCOORD_1.y * _173;
    precise float _184 = TEXCOORD_1.y * _181;
    precise float _185 = TEXCOORD_1.y * _174;
    precise float _186 = _133 + _183;
    precise float _187 = _140 + _184;
    precise float _188 = _147 + _185;
    precise float _194 = _186 - cbSceneParam._m0[3u].x;
    precise float _195 = _187 - cbSceneParam._m0[3u].y;
    precise float _196 = _188 - cbSceneParam._m0[3u].z;
    precise float _224 = _194 * cbSceneParam._m0[24u].x;
    precise float _225 = _195 * cbSceneParam._m0[24u].y;
    precise float _226 = _225 + _224;
    precise float _227 = _196 * cbSceneParam._m0[24u].z;
    precise float _228 = _227 + _226;
    precise float _229 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _230 = _229 + _228;
    precise float _231 = _194 * cbSceneParam._m0[25u].x;
    precise float _232 = _195 * cbSceneParam._m0[25u].y;
    precise float _233 = _232 + _231;
    precise float _234 = _196 * cbSceneParam._m0[25u].z;
    precise float _235 = _234 + _233;
    precise float _236 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _237 = _236 + _235;
    precise float _238 = _194 * cbSceneParam._m0[26u].x;
    precise float _239 = _195 * cbSceneParam._m0[26u].y;
    precise float _240 = _239 + _238;
    precise float _241 = _196 * cbSceneParam._m0[26u].z;
    precise float _242 = _241 + _240;
    precise float _243 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _244 = _243 + _242;
    precise float _245 = _194 * cbSceneParam._m0[27u].x;
    precise float _246 = _195 * cbSceneParam._m0[27u].y;
    precise float _247 = _246 + _245;
    precise float _248 = _196 * cbSceneParam._m0[27u].z;
    precise float _249 = _248 + _247;
    precise float _250 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _251 = _250 + _249;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _230;
    gl_Position.y = _237;
    gl_Position.z = _244;
    gl_Position.w = _251;
}


