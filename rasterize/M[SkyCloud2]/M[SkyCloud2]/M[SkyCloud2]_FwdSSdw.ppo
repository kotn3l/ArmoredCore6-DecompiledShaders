#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _225 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _240 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_218 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _225) + cbTextureTilingScale._m0[0u].w));
    float _243 = _240.y;
    float _244 = _243 * (-0.20000000298023223876953125);
    vec4 _258 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _260 = _258.z;
    float _271 = ((_225 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _275 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_218 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _271)).x * 0.0500000007450580596923828125;
    float _288 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_218 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _271)).x * 0.100000001490116119384765625;
    float _292 = (((_260 + _244) + _275) + _288) * TEXCOORD_1.z;
    vec4 _310 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _323 = ((_292 * cbMtdParam._m0[11u].x) * _310.x) * cbMtdParam._m0[9u].x;
    float _326 = ((_292 * cbMtdParam._m0[11u].y) * _310.y) * cbMtdParam._m0[9u].y;
    float _330 = ((((((_260 - (_243 * 0.20000000298023223876953125)) + _275) + _288) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _310.z) * cbMtdParam._m0[9u].z;
    vec4 _352 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_244 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_244 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _359 = (_352.x * 2.0) + (-1.0);
    float _361 = (_352.y * 2.0) + (-1.0);
    float _362 = dot(vec2(_359, _361), vec2(_359, _361));
    float _3271 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _368 = sqrt(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))));
    float _371 = (_359 * cbMtdParam._m0[12u].z) + _359;
    float _372 = (_361 * cbMtdParam._m0[12u].z) + _361;
    float _375 = fma(_368, _198 * NORMAL.x, fma(_372, _205 * TANGENT.x, (_191 * _183) * _371));
    float _378 = fma(_368, _198 * NORMAL.y, fma(_372, _205 * TANGENT.y, (_191 * _184) * _371));
    float _381 = fma(_368, _198 * NORMAL.z, fma(_372, _205 * TANGENT.z, (_191 * _185) * _371));
    float _385 = inversesqrt(dot(vec3(_375, _378, _381), vec3(_375, _378, _381)));
    float _386 = _385 * _375;
    float _387 = _385 * _378;
    float _388 = _385 * _381;
    float _3282 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _389 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _390 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3315 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3326 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _409 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _497 = fma(_388, cbSceneParam._m0[5u].z, fma(_387, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _386));
    float _500 = fma(_388, cbSceneParam._m0[6u].z, fma(_387, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _386));
    float _503 = fma(_388, cbSceneParam._m0[7u].z, fma(_387, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _386));
    uint _516 = uint(roundEven(NORMAL.w)) * 13u;
    uint _517 = _516 + 9u;
    uint _518 = _517 + uint(cbMatDynParam._m0[0u].w);
    float _524 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_518].x;
    float _525 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_518].y;
    float _526 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) * cbInstanceData._m0[_518].z;
    float _3337 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    vec4 _538 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _541 = _538.x * TEXCOORD_1.w;
    float _542 = dot(vec3(_386, _387, _388), vec3(_467, _468, _469));
    float _545 = _542 * 2.0;
    float _549 = (_545 * _386) - _467;
    float _550 = (_545 * _387) - _468;
    float _551 = (_545 * _388) - _469;
    float _555 = abs(dot(vec3(_467, _468, _469), vec3(_386, _387, _388)));
    float _3370 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _557 = sqrt(_390);
    float _570 = exp2((_557 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_557 * 3.0));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _386;
        float _671 = _606 + _387;
        float _672 = _610 + _388;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_386, _387, _388), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3418 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_386, _387, _388), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3451 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_386, _387, _388), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3484 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _957 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _961 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _984 = _602 + _386;
        float _985 = _606 + _387;
        float _986 = _610 + _388;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_386, _387, _388), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3547 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_386, _387, _388), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3580 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_386, _387, _388), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3613 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = _913;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _549 * 0.5;
    float _1291 = _550 * 0.5;
    float _1292 = _551 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _916, _919, _922));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_914, _917, _920, _923));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_915, _918, _921, _924));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _390);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1407 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1411 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1415 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1418 = fma(_551, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549));
        float _1421 = fma(_551, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549));
        float _1424 = fma(_551, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549));
        float _1452;
        if (_1418 > 0.0)
        {
            _1452 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1452 = frontier_phi_14_12_ladder;
        }
        float _1677;
        if (_1421 > 0.0)
        {
            _1677 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1677 = frontier_phi_23_19_ladder;
        }
        float _1923;
        if (_1424 > 0.0)
        {
            _1923 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1923 = frontier_phi_35_30_ladder;
        }
        float _1925 = isnan(_1677) ? _1452 : (isnan(_1452) ? _1677 : min(_1452, _1677));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1418) + _1407;
        float _1931 = (_1926 * _1421) + _1411;
        float _1932 = (_1926 * _1424) + _1415;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_13_35_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1440 = frontier_phi_13_35_ladder_2;
        _1442 = frontier_phi_13_35_ladder_1;
        _1444 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_549, _550, _551), _1359);
        _1440 = _1428.x * cbModelParam._m0[1u].y;
        _1442 = _1428.y * cbModelParam._m0[1u].y;
        _1444 = _1428.z * cbModelParam._m0[1u].y;
    }
    float _1448 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _390);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1448 : min(cbModelParam._m0[25u].w, _1448));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_551, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549));
        float _1519 = fma(_551, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549));
        float _1522 = fma(_551, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549));
        float _1682;
        if (_1516 > 0.0)
        {
            _1682 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1682 = frontier_phi_25_21_ladder;
        }
        float _1950;
        if (_1519 > 0.0)
        {
            _1950 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1950 = frontier_phi_37_32_ladder;
        }
        float _2155;
        if (_1522 > 0.0)
        {
            _2155 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2155 = frontier_phi_46_43_ladder;
        }
        float _2157 = isnan(_1950) ? _1682 : (isnan(_1682) ? _1950 : min(_1682, _1950));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1516) + _1505;
        float _2163 = (_2158 * _1519) + _1509;
        float _2164 = (_2158 * _1522) + _1513;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1449);
            frontier_phi_22_46_ladder = _2384.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2384.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2384.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_22_46_ladder_2;
        _1543 = frontier_phi_22_46_ladder_1;
        _1545 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_549, _550, _551), _1449);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1557 = ((((1.0 - _570) * ((_557 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_570 * _557)) * _541;
    float _1558 = _1557 * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1559 = _1557 * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1560 = _1557 * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    vec4 _1577 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_475, _476));
    float _1579 = _1577.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1579);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1579);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1579);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_516 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1607 = _541 + (-1.0);
    float _1612 = (cbLight._m0[_1600].x * _1607) + 1.0;
    float _1613 = (cbLight._m0[_1600].y * _1607) + 1.0;
    float _1614 = (cbLight._m0[_1600].z * _1607) + 1.0;
    float _1615 = (cbLight._m0[_1600].w * _1607) + 1.0;
    uint _1616 = _1599 + 5u;
    float _1622 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1626 = _1599 + 4u;
    float _1636 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
    uint _1640 = _1599 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_386, _387, _388));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_386, _387, _388));
    float _3749 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3760 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1616].x * _1622) * _1661) + (((cbLight._m0[_1626].x * _1591) * _1636) * _1659);
    float _1669 = ((_1622 * cbLight._m0[_1616].y) * _1661) + (((cbLight._m0[_1626].y * _1592) * _1636) * _1659);
    float _1670 = ((_1622 * cbLight._m0[_1616].z) * _1661) + (((cbLight._m0[_1626].z * _1593) * _1636) * _1659);
    uvec4 _1674 = floatBitsToUint(cbLight._m0[_1599 + 12u]);
    bool _1676 = _1674.x == 0u;
    float _1687;
    float _1689;
    float _1691;
    if (_1676)
    {
        _1687 = _1668;
        _1689 = _1669;
        _1691 = _1670;
    }
    else
    {
        uint _1695 = _1599 + 6u;
        float _1711 = (dot(vec3(cbLight._m0[_1599 + 2u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3771 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1714 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1687 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1668;
        _1689 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1669;
        _1691 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1670;
    }
    bool _1694 = _1674.y == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1694)
    {
        _1732 = _1687;
        _1734 = _1689;
        _1736 = _1691;
    }
    else
    {
        uint _1894 = _1599 + 7u;
        float _1910 = (dot(vec3(cbLight._m0[_1599 + 3u].xyz), vec3(_386, _387, _388)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _3787 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1913 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1732 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1687;
        _1734 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1689;
        _1736 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1691;
    }
    uint _1739 = _1599 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _390) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1599].x + _467;
    float _1755 = cbLight._m0[_1599].y + _468;
    float _1756 = cbLight._m0[_1599].z + _469;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1599].xyz));
    float _3803 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _1768 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1769 = dot(vec3(_386, _387, _388), vec3(_1761, _1762, _1763));
    float _3825 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1761, _1762, _1763));
    float _3836 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1793 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1768 * ((_1767 * _1793) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1793) + _1753) * _1767))) * _1767;
    float _3847 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1820 = _1599 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _390) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1640].x + _467;
    float _1834 = cbLight._m0[_1640].y + _468;
    float _1835 = cbLight._m0[_1640].z + _469;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1640].xyz));
    float _3858 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1847 = dot(vec3(_386, _387, _388), vec3(_1840, _1841, _1842));
    float _3869 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1840, _1841, _1842));
    float _3880 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1869 = 1.0 - _1832;
    float _1879 = (0.5 / (((_1768 * ((_1846 * _1869) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1869) + _1832) * _1846))) * _1846;
    float _3891 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1891 = (((_1868 * cbLight._m0[_1820].x) * _1881) * _1622) + ((((cbLight._m0[_1739].x * _1591) * _1792) * _1806) * _1636);
    float _1892 = (((_1868 * cbLight._m0[_1820].y) * _1881) * _1622) + ((((cbLight._m0[_1739].y * _1592) * _1792) * _1806) * _1636);
    float _1893 = (((_1868 * cbLight._m0[_1820].z) * _1881) * _1622) + ((((cbLight._m0[_1739].z * _1593) * _1792) * _1806) * _1636);
    float _1955;
    float _1957;
    float _1959;
    if (_1676)
    {
        _1955 = _1891;
        _1957 = _1892;
        _1959 = _1893;
    }
    else
    {
        uint _1961 = _1599 + 2u;
        uint _1965 = _1599 + 10u;
        float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _390) * 0.949999988079071044921875);
        float _1980 = _1979 * _1979;
        float _1981 = cbLight._m0[_1961].x + _467;
        float _1982 = cbLight._m0[_1961].y + _468;
        float _1983 = cbLight._m0[_1961].z + _469;
        float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
        float _1988 = _1987 * _1981;
        float _1989 = _1987 * _1982;
        float _1990 = _1987 * _1983;
        float _1991 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_1961].xyz));
        float _3902 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1995 = dot(vec3(_386, _387, _388), vec3(_1988, _1989, _1990));
        float _3913 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1999 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_1988, _1989, _1990));
        float _3924 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2003 = _1980 * _1980;
        float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
        float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2017 = 1.0 - _1980;
        float _2027 = (0.5 / (((_1768 * ((_1994 * _2017) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2017) + _1980) * _1994))) * _1994;
        float _3935 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
        _1955 = (((_2016 * cbLight._m0[_1965].x) * _2029) * _2030) + _1891;
        _1957 = (((_2016 * cbLight._m0[_1965].y) * _2029) * _2030) + _1892;
        _1959 = (((_2016 * cbLight._m0[_1965].z) * _2029) * _2030) + _1893;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1694)
    {
        _2065 = _1955;
        _2067 = _1957;
        _2069 = _1959;
    }
    else
    {
        uint _2076 = _1599 + 3u;
        uint _2080 = _1599 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _390) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _467;
        float _2097 = cbLight._m0[_2076].y + _468;
        float _2098 = cbLight._m0[_2076].z + _469;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_386, _387, _388), vec3(cbLight._m0[_2076].xyz));
        float _3951 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2110 = dot(vec3(_386, _387, _388), vec3(_2103, _2104, _2105));
        float _3962 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _3973 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2132 = 1.0 - _2095;
        float _2142 = (0.5 / (((_1768 * ((_2109 * _2132) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _2132) + _2095) * _2109))) * _2109;
        float _3984 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _2065 = (((_2131 * cbLight._m0[_2080].x) * _2144) * _2145) + _1955;
        _2067 = (((_2131 * cbLight._m0[_2080].y) * _2144) * _2145) + _1957;
        _2069 = (((_2131 * cbLight._m0[_2080].z) * _2144) * _2145) + _1959;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1597.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            uint _2540 = 0u;
            uint _2549;
            bool _2550;
            for (;;)
            {
                _2549 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2540 << 2u)) >> 2u)).x;
                _2550 = _2549 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2550)
                {
                    frontier_phi_61_pred = _2534;
                    frontier_phi_61_pred_1 = _2539;
                    frontier_phi_61_pred_2 = _2538;
                    frontier_phi_61_pred_3 = _2537;
                    frontier_phi_61_pred_4 = _2536;
                    frontier_phi_61_pred_5 = _2535;
                }
                else
                {
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    uint _2664;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2549;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    for (;;)
                    {
                        uint _2668 = uint(findLSB(_2664)) + (_2540 << 5u);
                        uint _2665 = (_2664 + 4294967295u) & _2664;
                        uint _2670 = _2668 * 48u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2690 = (_2668 * 48u) + 4u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2709 = (_2668 * 48u) + 8u;
                        vec3 _2720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x));
                        float _2724 = _2684.x - _2221;
                        float _2725 = _2684.y - _2222;
                        float _2726 = _2684.z - _2223;
                        float _2727 = dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726));
                        float _2730 = inversesqrt(_2727);
                        float _2731 = _2730 * _2724;
                        float _2732 = _2730 * _2725;
                        float _2733 = _2730 * _2726;
                        float _2734 = dot(vec3(_497, _500, _503), vec3(_2731, _2732, _2733));
                        float _2739 = 1.0 - (_2727 * _2684.w);
                        float _4010 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2741 = sqrt(_2727) * _2703.w;
                        float _2744 = 1.39999997615814208984375 / (_2741 + 1.39999997615814208984375);
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2734) + _2745;
                        float _2751 = _2741 * _2741;
                        float _2755 = ((isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))) * _2740) / ((_2751 * 0.699999988079071044921875) + 1.0);
                        float _2759 = (-0.0) - _2221;
                        float _2760 = (-0.0) - _2222;
                        float _2761 = (-0.0) - _2223;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2766 = _2765 * _2759;
                        float _2767 = _2765 * _2760;
                        float _2768 = _2765 * _2761;
                        float _2776 = exp2(log2(1.0 / ((_2751 * 3.5) + 5.0)) * 0.25);
                        float _2777 = 1.0 - _557;
                        float _2784 = sqrt(1.0 - ((1.0 - (_2777 * _2777)) * (1.0 - (_2776 * _2776))));
                        float _2785 = _2784 * _2784;
                        float _2786 = _2785 * _2785;
                        float _2787 = _2766 + _2731;
                        float _2788 = _2767 + _2732;
                        float _2789 = _2768 + _2733;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2797 = dot(vec3(_497, _500, _503), vec3(_2766, _2767, _2768));
                        float _4026 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2801 = dot(vec3(_497, _500, _503), vec3(_2793 * _2787, _2793 * _2788, _2793 * _2789));
                        float _4037 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2808 = ((_2804 * _2804) * (_2786 + (-1.0))) + 1.0;
                        float _2809 = _2744 * _2785;
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2734) + _2810;
                        float _4048 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2815 = 1.0 - _2785;
                        float _2825 = (0.5 / (((_2814 * ((_2800 * _2815) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2814 * _2815) + _2785) * _2800))) * _2814;
                        float _4059 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2836 = (((_2786 * 3.1415927410125732421875) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) / ((_2808 * _2808) * ((_2751 * 2.1991131305694580078125) + 3.141590118408203125))) * _2740;
                        _2593 = (_2755 * _2703.x) + _2661;
                        _2594 = (_2755 * _2703.y) + _2662;
                        _2595 = (_2755 * _2703.z) + _2663;
                        _2590 = (_2836 * _2720.x) + _2658;
                        _2591 = (_2836 * _2720.y) + _2659;
                        _2592 = (_2836 * _2720.z) + _2660;
                        if (_2665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2665;
                        }
                    }
                    frontier_phi_61_pred = _2590;
                    frontier_phi_61_pred_1 = _2595;
                    frontier_phi_61_pred_2 = _2594;
                    frontier_phi_61_pred_3 = _2593;
                    frontier_phi_61_pred_4 = _2592;
                    frontier_phi_61_pred_5 = _2591;
                }
                _2390 = frontier_phi_61_pred;
                _2400 = frontier_phi_61_pred_1;
                _2398 = frontier_phi_61_pred_2;
                _2396 = frontier_phi_61_pred_3;
                _2394 = frontier_phi_61_pred_4;
                _2392 = frontier_phi_61_pred_5;
                uint _2541 = _2540 + 1u;
                if (_2541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2534 = _2390;
                    _2535 = _2392;
                    _2536 = _2394;
                    _2537 = _2396;
                    _2538 = _2398;
                    _2539 = _2400;
                    _2540 = _2541;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((4294967295u << _2406) & _2267) == 0u)
        {
            _2502 = _2389;
            _2504 = _2391;
            _2506 = _2393;
            _2508 = _2395;
            _2510 = _2397;
            _2512 = _2399;
        }
        else
        {
            float _2527 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2528 = _2527 * _2221;
            float _2529 = _2527 * _2222;
            float _2530 = _2527 * _2223;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2641 = _2389;
                float _2642 = _2391;
                float _2643 = _2393;
                float _2644 = _2395;
                float _2645 = _2397;
                float _2646 = _2399;
                uint _2647 = _2406;
                uint _2656;
                bool _2657;
                for (;;)
                {
                    _2656 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                    _2657 = _2656 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2657)
                    {
                        frontier_phi_67_pred = _2644;
                        frontier_phi_67_pred_1 = _2645;
                        frontier_phi_67_pred_2 = _2646;
                        frontier_phi_67_pred_3 = _2643;
                        frontier_phi_67_pred_4 = _2642;
                        frontier_phi_67_pred_5 = _2641;
                    }
                    else
                    {
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        uint _2860 = _2656;
                        uint _2861;
                        vec4 _2886;
                        float _2887;
                        vec4 _2902;
                        vec3 _2914;
                        vec4 _2930;
                        vec4 _2946;
                        float _2993;
                        bool _2994;
                        for (;;)
                        {
                            uint _2871 = ((_2647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2860));
                            _2861 = (_2860 + 4294967295u) & _2860;
                            uint _2873 = _2871 * 40u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            _2887 = _2886.w;
                            uint _2889 = (_2871 * 40u) + 4u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2904 = (_2871 * 40u) + 8u;
                            _2914 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x));
                            uint _2917 = (_2871 * 40u) + 16u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2933 = (_2871 * 40u) + 20u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2871 * 40u) + 24u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2968 = (_2871 * 40u) + 28u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2993 = fma(_2223, _2981.z, fma(_2222, _2981.y, _2981.x * _2221)) + _2981.w;
                            _2994 = !((fma(_2223, _2962.z, fma(_2222, _2962.y, _2962.x * _2221)) + _2962.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2994)
                            {
                                float _3021 = _2886.x - _2221;
                                float _3022 = _2886.y - _2222;
                                float _3023 = _2886.z - _2223;
                                float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                                float _3027 = inversesqrt(_3024);
                                float _3028 = _3027 * _3021;
                                float _3029 = _3027 * _3022;
                                float _3030 = _3027 * _3023;
                                float _3034 = 1.0 - (_3024 / (_2887 * _2887));
                                float _4070 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3039 = sqrt(_3024) * _2902.w;
                                float _3041 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                                float _3042 = _3041 * _3041;
                                float _3045 = ((1.0 - _3042) * dot(vec3(_3028, _3029, _3030), vec3(_497, _500, _503))) + _3042;
                                float _3048 = _3039 * _3039;
                                float _3052 = (fma(_2223, _2930.z, fma(_2222, _2930.y, _2930.x * _2221)) + _2930.w) / _2993;
                                float _3053 = (fma(_2223, _2946.z, fma(_2222, _2946.y, _2946.x * _2221)) + _2946.w) / _2993;
                                float _3057 = 1.0 - dot(vec2(_3052, _3053), vec2(_3052, _3053));
                                float _4086 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3059 = _3058 * (((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3035) / ((_3048 * 0.699999988079071044921875) + 1.0));
                                float _3071 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                                float _3072 = 1.0 - _557;
                                float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                                float _3080 = _3079 * _3079;
                                float _3081 = _3080 * _3080;
                                float _3082 = _3028 - _2528;
                                float _3083 = _3029 - _2529;
                                float _3084 = _3030 - _2530;
                                float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                                float _3092 = dot(vec3(_497, _500, _503), vec3((-0.0) - _2528, (-0.0) - _2529, (-0.0) - _2530));
                                float _4097 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3096 = dot(vec3(_497, _500, _503), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                                float _4108 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                                float _3104 = _3041 * _3080;
                                float _3105 = _3104 * _3104;
                                float _3111 = ((1.0 - _3105) * dot(vec3(_497, _500, _503), vec3(_3028, _3029, _3030))) + _3105;
                                float _4119 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3113 = 1.0 - _3080;
                                float _3123 = (0.5 / (((_3112 * ((_3095 * _3113) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3080) * _3095))) * _3112;
                                float _4130 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3133 = (_3058 * _3035) * (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_3103 * _3103) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3133 * _2914.x;
                                frontier_phi_73_pred_1 = _3133 * _2914.y;
                                frontier_phi_73_pred_2 = _3059 * _2902.z;
                                frontier_phi_73_pred_3 = _3059 * _2902.y;
                                frontier_phi_73_pred_4 = _3059 * _2902.x;
                                frontier_phi_73_pred_5 = _3133 * _2914.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_73_pred;
                            _3138 = frontier_phi_73_pred_1;
                            _3142 = frontier_phi_73_pred_2;
                            _3141 = frontier_phi_73_pred_3;
                            _3140 = frontier_phi_73_pred_4;
                            _3139 = frontier_phi_73_pred_5;
                            _2844 = _3140 + _2857;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            if (_2861 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2861;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2844;
                        frontier_phi_67_pred_1 = _2845;
                        frontier_phi_67_pred_2 = _2846;
                        frontier_phi_67_pred_3 = _2843;
                        frontier_phi_67_pred_4 = _2842;
                        frontier_phi_67_pred_5 = _2841;
                    }
                    _2509 = frontier_phi_67_pred;
                    _2511 = frontier_phi_67_pred_1;
                    _2513 = frontier_phi_67_pred_2;
                    _2507 = frontier_phi_67_pred_3;
                    _2505 = frontier_phi_67_pred_4;
                    _2503 = frontier_phi_67_pred_5;
                    uint _2648 = _2647 + 1u;
                    if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2641 = _2503;
                        _2642 = _2505;
                        _2643 = _2507;
                        _2644 = _2509;
                        _2645 = _2511;
                        _2646 = _2513;
                        _2647 = _2648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2511;
                frontier_phi_55_56_ladder_1 = _2513;
                frontier_phi_55_56_ladder_2 = _2509;
                frontier_phi_55_56_ladder_3 = _2507;
                frontier_phi_55_56_ladder_4 = _2505;
                frontier_phi_55_56_ladder_5 = _2503;
            }
            else
            {
                frontier_phi_55_56_ladder = _2397;
                frontier_phi_55_56_ladder_1 = _2399;
                frontier_phi_55_56_ladder_2 = _2395;
                frontier_phi_55_56_ladder_3 = _2393;
                frontier_phi_55_56_ladder_4 = _2391;
                frontier_phi_55_56_ladder_5 = _2389;
            }
            _2502 = frontier_phi_55_56_ladder_5;
            _2504 = frontier_phi_55_56_ladder_4;
            _2506 = frontier_phi_55_56_ladder_3;
            _2508 = frontier_phi_55_56_ladder_2;
            _2510 = frontier_phi_55_56_ladder;
            _2512 = frontier_phi_55_56_ladder_1;
        }
        float _2517 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
        _2280 = (_2517 * _2508) + _1732;
        _2282 = (_2517 * _2510) + _1734;
        _2284 = (_2517 * _2512) + _1736;
        _2286 = ((_2502 * 0.039999999105930328369140625) * _2517) + _2065;
        _2288 = ((_2504 * 0.039999999105930328369140625) * _2517) + _2067;
        _2290 = ((_2506 * 0.039999999105930328369140625) * _2517) + _2069;
    }
    else
    {
        _2280 = _1732;
        _2282 = _1734;
        _2284 = _1736;
        _2286 = _2065;
        _2288 = _2067;
        _2290 = _2069;
    }
    uint _2296 = _517 + uint(cbMatDynParam._m0[0u].w);
    float _4146 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4157 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4168 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4179 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _2322 = (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2280 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _541))) + ((_2286 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2296].x * cbMtdParam._m0[10u].x);
    float _2324 = ((cbInstanceData._m0[_2296].y * cbMtdParam._m0[10u].y) + ((_2288 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2282 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _541)));
    float _2326 = ((cbInstanceData._m0[_2296].z * cbMtdParam._m0[10u].z) + ((_2290 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2284 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _541)));
    float _2334 = cbInstanceData._m0[_516 + 6u].w * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)));
    float _2339 = _475 / cbSceneParam._m0[86u].x;
    float _2340 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, (log2((isnan(cbSceneParam._m0[77u].w) ? _409 : (isnan(_409) ? cbSceneParam._m0[77u].w : min(_409, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2356 = _2354.x;
    float _2357 = _2354.y;
    float _2358 = _2354.z;
    float _2359 = _2354.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_409 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_409) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _409 : min(cbSceneParam._m0[80u].w, _409));
        float _2415 = _2414 / _409;
        float _2426 = _2415 * _460;
        float _2427 = _461 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2430 = _2415 * _462;
        float _2432 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2427;
        float _2440 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2603;
        if (abs((_2428 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2603 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2563 = 1.0 / cbSceneParam._m0[80u].x;
            float _2564 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2565 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            _2603 = ((abs(_2440 / _2428) * cbSceneParam._m0[80u].y) * ((((_2574 - _2575) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))))) * _2563)) - ((exp2(_2450 * _2574) - exp2(_2450 * _2575)) * _2563))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2605 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2339, _2340, 1.0), 0.0);
        float _2614 = exp2((_2603 * (-1.44269502162933349609375)) * (1.0 - _2605.w));
        float _2615 = log2(_2614);
        float _2631 = log2(_2359);
        _2452 = (exp2(_2631 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].x)) * _2605.x) / cbSceneParam._m0[78u].x)) + _2356;
        _2454 = (exp2(_2631 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].y)) * _2605.y) / cbSceneParam._m0[78u].y)) + _2357;
        _2456 = (exp2(_2631 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].z)) * _2605.z) / cbSceneParam._m0[78u].z)) + _2358;
        _2458 = _2614 * _2359;
    }
    else
    {
        _2452 = _2356;
        _2454 = _2357;
        _2456 = _2358;
        _2458 = _2359;
    }
    float _2470 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2471 = _2470 == 3.0;
    float _2472 = log2(_2458);
    float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0)));
    float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0)));
    float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)));
    float _2490 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2490 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
    SV_Target.y = _2490 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.z = _2490 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.w = _2334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2334;
}


