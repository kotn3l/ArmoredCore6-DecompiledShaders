#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3370;
float _3371;
float _3372;
float _3373;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _229 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _244 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_222 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _229) + cbTextureTilingScale._m0[0u].w));
    float _247 = _244.y;
    float _248 = _247 * (-0.20000000298023223876953125);
    vec4 _262 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _262.z;
    float _275 = ((_229 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _279 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_222 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _275)).x * 0.0500000007450580596923828125;
    float _292 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_222 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _275)).x * 0.100000001490116119384765625;
    float _296 = (((_264 + _248) + _279) + _292) * TEXCOORD_1.z;
    vec4 _314 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _327 = ((_296 * cbMtdParam._m0[11u].x) * _314.x) * cbMtdParam._m0[9u].x;
    float _330 = ((_296 * cbMtdParam._m0[11u].y) * _314.y) * cbMtdParam._m0[9u].y;
    float _334 = ((((((_264 - (_247 * 0.20000000298023223876953125)) + _279) + _292) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _314.z) * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_248 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_248 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _363 = (_356.x * 2.0) + (-1.0);
    float _365 = (_356.y * 2.0) + (-1.0);
    float _366 = dot(vec2(_363, _365), vec2(_363, _365));
    float _3382 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _372 = sqrt(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))));
    float _375 = (_363 * cbMtdParam._m0[12u].z) + _363;
    float _376 = (_365 * cbMtdParam._m0[12u].z) + _365;
    float _379 = fma(_372, _202 * NORMAL.x, fma(_376, _209 * TANGENT.x, (_195 * _187) * _375));
    float _382 = fma(_372, _202 * NORMAL.y, fma(_376, _209 * TANGENT.y, (_195 * _188) * _375));
    float _385 = fma(_372, _202 * NORMAL.z, fma(_376, _209 * TANGENT.z, (_195 * _189) * _375));
    float _389 = inversesqrt(dot(vec3(_379, _382, _385), vec3(_379, _382, _385)));
    float _390 = _389 * _379;
    float _391 = _389 * _382;
    float _392 = _389 * _385;
    float _3393 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _393 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _394 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3426 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3437 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _413 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _464 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _466 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
    float _471 = _464 * _470;
    float _472 = _465 * _470;
    float _473 = _466 * _470;
    vec4 _478 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _480 = _478.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _637 = sqrt(((_464 * _464) + (_465 * _465)) + (_466 * _466));
        float _643 = (cbMatDynParam._m0[5u].x * _637) + cbMatDynParam._m0[5u].y;
        float _3448 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _648 = (cbMatDynParam._m0[5u].z * _637) + cbMatDynParam._m0[5u].w;
        float _3459 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) - _644)) + _644) < ((_480 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _492 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _493 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_392, cbSceneParam._m0[5u].z, fma(_391, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _390));
    float _516 = fma(_392, cbSceneParam._m0[6u].z, fma(_391, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _390));
    float _519 = fma(_392, cbSceneParam._m0[7u].z, fma(_391, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _390));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _533 = _532 + 9u;
    uint _534 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _540 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0)))) * cbInstanceData._m0[_534].x;
    float _541 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_534].y;
    float _542 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_534].z;
    float _3470 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _492, cbSceneParam._m0[86u].y * _493));
    float _557 = _554.x * TEXCOORD_1.w;
    float _558 = dot(vec3(_390, _391, _392), vec3(_471, _472, _473));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _390) - _471;
    float _566 = (_561 * _391) - _472;
    float _567 = (_561 * _392) - _473;
    float _571 = abs(dot(vec3(_471, _472, _473), vec3(_390, _391, _392)));
    float _3503 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_394);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _686 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _690 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _715 = _618 + _390;
        float _716 = _622 + _391;
        float _717 = _626 + _392;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_390, _391, _392), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3551 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_390, _391, _392), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3584 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_390, _391, _392), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3617 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _1005 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _1009 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1032 = _618 + _390;
        float _1033 = _622 + _391;
        float _1034 = _626 + _392;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_390, _391, _392), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3680 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_390, _391, _392), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3713 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_390, _391, _392), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3746 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = _958;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _565 * 0.5;
    float _1339 = _566 * 0.5;
    float _1340 = _567 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_957, _961, _964, _967));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_959, _962, _965, _968));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _963, _966, _969));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _394);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1469 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1472 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1500 = frontier_phi_17_15_ladder;
        }
        float _1725;
        if (_1469 > 0.0)
        {
            _1725 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1725 = frontier_phi_26_22_ladder;
        }
        float _1971;
        if (_1472 > 0.0)
        {
            _1971 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1971 = frontier_phi_38_33_ladder;
        }
        float _1973 = isnan(_1725) ? _1500 : (isnan(_1500) ? _1725 : min(_1500, _1725));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1466) + _1455;
        float _1979 = (_1974 * _1469) + _1459;
        float _1980 = (_1974 * _1472) + _1463;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_16_38_ladder = _2104.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2104.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2104.x * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_16_38_ladder_2;
        _1490 = frontier_phi_16_38_ladder_1;
        _1492 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1407);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _394);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1567 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1570 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1730;
        if (_1564 > 0.0)
        {
            _1730 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1730 = frontier_phi_28_24_ladder;
        }
        float _1998;
        if (_1567 > 0.0)
        {
            _1998 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1998 = frontier_phi_40_35_ladder;
        }
        float _2203;
        if (_1570 > 0.0)
        {
            _2203 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2203 = frontier_phi_49_46_ladder;
        }
        float _2205 = isnan(_1998) ? _1730 : (isnan(_1730) ? _1998 : min(_1730, _1998));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1564) + _1553;
        float _2211 = (_2206 * _1567) + _1557;
        float _2212 = (_2206 * _1570) + _1561;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2213;
        float _2216 = _2213 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2212 > _2216) || ((_2212 < _2214) || ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 < _2214) || (_2210 > _2216))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2212, cbModelParam._m0[17u].z, fma(_2211, cbModelParam._m0[17u].y, _2210 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2212, cbModelParam._m0[18u].z, fma(_2211, cbModelParam._m0[18u].y, _2210 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2212, cbModelParam._m0[19u].z, fma(_2211, cbModelParam._m0[19u].y, _2210 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_25_49_ladder = _2432.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2432.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2432.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_25_49_ladder_2;
        _1591 = frontier_phi_25_49_ladder_1;
        _1593 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1497);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1605 = ((((1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_586 * _573)) * _557;
    float _1606 = _1605 * ((cbModelParam._m0[1u].w * (_1589 - _1488)) + _1488);
    float _1607 = _1605 * ((cbModelParam._m0[1u].w * (_1591 - _1490)) + _1490);
    float _1608 = _1605 * ((cbModelParam._m0[1u].w * (_1593 - _1492)) + _1492);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    vec4 _1625 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_492, _493));
    float _1627 = _1625.w;
    float _1639 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1627);
    float _1640 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1627);
    float _1641 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1627);
    uvec4 _1645 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1647 = _1645.x * 14u;
    uint _1648 = _1647 + 13u;
    float _1655 = _557 + (-1.0);
    float _1660 = (cbLight._m0[_1648].x * _1655) + 1.0;
    float _1661 = (cbLight._m0[_1648].y * _1655) + 1.0;
    float _1662 = (cbLight._m0[_1648].z * _1655) + 1.0;
    float _1663 = (cbLight._m0[_1648].w * _1655) + 1.0;
    uint _1664 = _1647 + 5u;
    float _1670 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1674 = _1647 + 4u;
    float _1684 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1688 = _1647 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_390, _391, _392));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_390, _391, _392));
    float _3882 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3893 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1664].x * _1670) * _1709) + (((cbLight._m0[_1674].x * _1639) * _1684) * _1707);
    float _1717 = ((_1670 * cbLight._m0[_1664].y) * _1709) + (((cbLight._m0[_1674].y * _1640) * _1684) * _1707);
    float _1718 = ((_1670 * cbLight._m0[_1664].z) * _1709) + (((cbLight._m0[_1674].z * _1641) * _1684) * _1707);
    uvec4 _1722 = floatBitsToUint(cbLight._m0[_1647 + 12u]);
    bool _1724 = _1722.x == 0u;
    float _1735;
    float _1737;
    float _1739;
    if (_1724)
    {
        _1735 = _1716;
        _1737 = _1717;
        _1739 = _1718;
    }
    else
    {
        uint _1743 = _1647 + 6u;
        float _1759 = (dot(vec3(cbLight._m0[_1647 + 2u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3904 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1762 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _1735 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1716;
        _1737 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1717;
        _1739 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1718;
    }
    bool _1742 = _1722.y == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1742)
    {
        _1780 = _1735;
        _1782 = _1737;
        _1784 = _1739;
    }
    else
    {
        uint _1942 = _1647 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1647 + 3u].xyz), vec3(_390, _391, _392)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3920 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1961 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1780 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1735;
        _1782 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1737;
        _1784 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1739;
    }
    uint _1787 = _1647 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _394) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1647].x + _471;
    float _1803 = cbLight._m0[_1647].y + _472;
    float _1804 = cbLight._m0[_1647].z + _473;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1647].xyz));
    float _3936 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _1816 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1817 = dot(vec3(_390, _391, _392), vec3(_1809, _1810, _1811));
    float _3958 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1809, _1810, _1811));
    float _3969 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1816 * ((_1815 * _1841) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1841) + _1801) * _1815))) * _1815;
    float _3980 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1868 = _1647 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _394) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1688].x + _471;
    float _1882 = cbLight._m0[_1688].y + _472;
    float _1883 = cbLight._m0[_1688].z + _473;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_1688].xyz));
    float _3991 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1895 = dot(vec3(_390, _391, _392), vec3(_1888, _1889, _1890));
    float _4002 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1888, _1889, _1890));
    float _4013 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1880;
    float _1927 = (0.5 / (((_1816 * ((_1894 * _1917) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1917) + _1880) * _1894))) * _1894;
    float _4024 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1939 = (((_1916 * cbLight._m0[_1868].x) * _1929) * _1670) + ((((cbLight._m0[_1787].x * _1639) * _1840) * _1854) * _1684);
    float _1940 = (((_1916 * cbLight._m0[_1868].y) * _1929) * _1670) + ((((cbLight._m0[_1787].y * _1640) * _1840) * _1854) * _1684);
    float _1941 = (((_1916 * cbLight._m0[_1868].z) * _1929) * _1670) + ((((cbLight._m0[_1787].z * _1641) * _1840) * _1854) * _1684);
    float _2003;
    float _2005;
    float _2007;
    if (_1724)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1647 + 2u;
        uint _2013 = _1647 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _394) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _471;
        float _2030 = cbLight._m0[_2009].y + _472;
        float _2031 = cbLight._m0[_2009].z + _473;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2009].xyz));
        float _4035 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2043 = dot(vec3(_390, _391, _392), vec3(_2036, _2037, _2038));
        float _4046 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _4057 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2065 = 1.0 - _2028;
        float _2075 = (0.5 / (((_1816 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2065) + _2028) * _2042))) * _2042;
        float _4068 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
        _2003 = (((_2064 * cbLight._m0[_2013].x) * _2077) * _2078) + _1939;
        _2005 = (((_2064 * cbLight._m0[_2013].y) * _2077) * _2078) + _1940;
        _2007 = (((_2064 * cbLight._m0[_2013].z) * _2077) * _2078) + _1941;
    }
    float _2113;
    float _2115;
    float _2117;
    if (_1742)
    {
        _2113 = _2003;
        _2115 = _2005;
        _2117 = _2007;
    }
    else
    {
        uint _2124 = _1647 + 3u;
        uint _2128 = _1647 + 11u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _394) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _471;
        float _2145 = cbLight._m0[_2124].y + _472;
        float _2146 = cbLight._m0[_2124].z + _473;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_390, _391, _392), vec3(cbLight._m0[_2124].xyz));
        float _4084 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2158 = dot(vec3(_390, _391, _392), vec3(_2151, _2152, _2153));
        float _4095 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4106 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2180 = 1.0 - _2143;
        float _2190 = (0.5 / (((_1816 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _2180) + _2143) * _2157))) * _2157;
        float _4117 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2113 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _2193) + _2003;
        _2115 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _2193) + _2005;
        _2117 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _2193) + _2007;
    }
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    float _2338;
    if (_1645.y == 0u)
    {
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2268;
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2268;
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2268;
        uvec4 _2283 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2284 = _2283.x;
        uint _2295 = uint((float(_2283.y) * floor(float(uint(cbSceneParam._m0[85u].y * _493) / _2284))) + floor(float(uint(cbSceneParam._m0[85u].x * _492) / _2284)));
        float _2305 = (log2(_2271 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2306 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        uint _2309 = uint(isnan(14.0) ? _2306 : (isnan(_2306) ? 14.0 : min(_2306, 14.0)));
        uvec4 _2314 = texelFetch(g_lightClusterGridBuffer, int(((_2309 << 2u) + (_2295 << 6u)) >> 2u));
        uint _2315 = _2314.x;
        uint _2316 = _2283.z;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((((1u << ((_2316 >> 4u) & 15u)) + 4294967295u) & _2315) == 0u) || ((_2316 & 240u) == 0u))
        {
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
        }
        else
        {
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            uint _2596 = 0u;
            uint _2605;
            bool _2606;
            for (;;)
            {
                _2605 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                _2606 = _2605 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2606)
                {
                    frontier_phi_66_pred = _2590;
                    frontier_phi_66_pred_1 = _2595;
                    frontier_phi_66_pred_2 = _2594;
                    frontier_phi_66_pred_3 = _2593;
                    frontier_phi_66_pred_4 = _2592;
                    frontier_phi_66_pred_5 = _2591;
                }
                else
                {
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    uint _2741;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2605;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    for (;;)
                    {
                        uint _2745 = uint(findLSB(_2741)) + (_2596 << 5u);
                        uint _2742 = (_2741 + 4294967295u) & _2741;
                        uint _2747 = _2745 * 48u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2767 = (_2745 * 48u) + 4u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2786 = (_2745 * 48u) + 8u;
                        vec3 _2797 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x));
                        float _2801 = _2761.x - _2269;
                        float _2802 = _2761.y - _2270;
                        float _2803 = _2761.z - _2271;
                        float _2804 = dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803));
                        float _2807 = inversesqrt(_2804);
                        float _2808 = _2807 * _2801;
                        float _2809 = _2807 * _2802;
                        float _2810 = _2807 * _2803;
                        float _2811 = dot(vec3(_513, _516, _519), vec3(_2808, _2809, _2810));
                        float _2816 = 1.0 - (_2804 * _2761.w);
                        float _4143 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2818 = sqrt(_2804) * _2780.w;
                        float _2821 = 1.39999997615814208984375 / (_2818 + 1.39999997615814208984375);
                        float _2822 = _2821 * _2821;
                        float _2825 = ((1.0 - _2822) * _2811) + _2822;
                        float _2828 = _2818 * _2818;
                        float _2832 = ((isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0))) * _2817) / ((_2828 * 0.699999988079071044921875) + 1.0);
                        float _2836 = (-0.0) - _2269;
                        float _2837 = (-0.0) - _2270;
                        float _2838 = (-0.0) - _2271;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2853 = exp2(log2(1.0 / ((_2828 * 3.5) + 5.0)) * 0.25);
                        float _2854 = 1.0 - _573;
                        float _2861 = sqrt(1.0 - ((1.0 - (_2854 * _2854)) * (1.0 - (_2853 * _2853))));
                        float _2862 = _2861 * _2861;
                        float _2863 = _2862 * _2862;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2866 = _2845 + _2810;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2874 = dot(vec3(_513, _516, _519), vec3(_2843, _2844, _2845));
                        float _4159 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2877 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2878 = dot(vec3(_513, _516, _519), vec3(_2870 * _2864, _2870 * _2865, _2870 * _2866));
                        float _4170 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2881 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2885 = ((_2881 * _2881) * (_2863 + (-1.0))) + 1.0;
                        float _2886 = _2821 * _2862;
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2811) + _2887;
                        float _4181 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2891 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2892 = 1.0 - _2862;
                        float _2902 = (0.5 / (((_2891 * ((_2877 * _2892) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2891 * _2892) + _2862) * _2877))) * _2891;
                        float _4192 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2913 = (((_2863 * 3.1415927410125732421875) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) / ((_2885 * _2885) * ((_2828 * 2.1991131305694580078125) + 3.141590118408203125))) * _2817;
                        _2665 = (_2832 * _2780.x) + _2738;
                        _2666 = (_2832 * _2780.y) + _2739;
                        _2667 = (_2832 * _2780.z) + _2740;
                        _2662 = (_2913 * _2797.x) + _2735;
                        _2663 = (_2913 * _2797.y) + _2736;
                        _2664 = (_2913 * _2797.z) + _2737;
                        if (_2742 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2742;
                        }
                    }
                    frontier_phi_66_pred = _2662;
                    frontier_phi_66_pred_1 = _2667;
                    frontier_phi_66_pred_2 = _2666;
                    frontier_phi_66_pred_3 = _2665;
                    frontier_phi_66_pred_4 = _2664;
                    frontier_phi_66_pred_5 = _2663;
                }
                _2438 = frontier_phi_66_pred;
                _2448 = frontier_phi_66_pred_1;
                _2446 = frontier_phi_66_pred_2;
                _2444 = frontier_phi_66_pred_3;
                _2442 = frontier_phi_66_pred_4;
                _2440 = frontier_phi_66_pred_5;
                uint _2597 = _2596 + 1u;
                if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2590 = _2438;
                    _2591 = _2440;
                    _2592 = _2442;
                    _2593 = _2444;
                    _2594 = _2446;
                    _2595 = _2448;
                    _2596 = _2597;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
        }
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.z;
        uint _2454 = (_2452 >> 8u) & 15u;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((4294967295u << _2454) & _2315) == 0u)
        {
            _2558 = _2437;
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
            _2568 = _2447;
        }
        else
        {
            float _2583 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
            float _2584 = _2583 * _2269;
            float _2585 = _2583 * _2270;
            float _2586 = _2583 * _2271;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2454 < ((_2452 >> 12u) & 15u))
            {
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2718 = _2437;
                float _2719 = _2439;
                float _2720 = _2441;
                float _2721 = _2443;
                float _2722 = _2445;
                float _2723 = _2447;
                uint _2724 = _2454;
                uint _2733;
                bool _2734;
                for (;;)
                {
                    _2733 = texelFetch(g_lightClassification, int((((_2309 << 5u) + (_2295 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                    _2734 = _2733 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2734)
                    {
                        frontier_phi_77_pred = _2723;
                        frontier_phi_77_pred_1 = _2722;
                        frontier_phi_77_pred_2 = _2721;
                        frontier_phi_77_pred_3 = _2720;
                        frontier_phi_77_pred_4 = _2719;
                        frontier_phi_77_pred_5 = _2718;
                    }
                    else
                    {
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        float _2944 = _2722;
                        float _2945 = _2723;
                        uint _2946 = _2733;
                        uint _2947;
                        vec4 _2972;
                        float _2973;
                        vec4 _2988;
                        vec3 _3000;
                        vec4 _3016;
                        vec4 _3032;
                        float _3079;
                        bool _3080;
                        for (;;)
                        {
                            uint _2957 = ((_2724 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2946));
                            _2947 = (_2946 + 4294967295u) & _2946;
                            uint _2959 = _2957 * 40u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2973 = _2972.w;
                            uint _2975 = (_2957 * 40u) + 4u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2957 * 40u) + 8u;
                            _3000 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x));
                            uint _3003 = (_2957 * 40u) + 16u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3019 = (_2957 * 40u) + 20u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2957 * 40u) + 24u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3054 = (_2957 * 40u) + 28u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3079 = fma(_2271, _3067.z, fma(_2270, _3067.y, _3067.x * _2269)) + _3067.w;
                            _3080 = !((fma(_2271, _3048.z, fma(_2270, _3048.y, _3048.x * _2269)) + _3048.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3080)
                            {
                                float _3107 = _2972.x - _2269;
                                float _3108 = _2972.y - _2270;
                                float _3109 = _2972.z - _2271;
                                float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                                float _3113 = inversesqrt(_3110);
                                float _3114 = _3113 * _3107;
                                float _3115 = _3113 * _3108;
                                float _3116 = _3113 * _3109;
                                float _3120 = 1.0 - (_3110 / (_2973 * _2973));
                                float _4203 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3125 = sqrt(_3110) * _2988.w;
                                float _3127 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                                float _3128 = _3127 * _3127;
                                float _3131 = ((1.0 - _3128) * dot(vec3(_3114, _3115, _3116), vec3(_513, _516, _519))) + _3128;
                                float _3134 = _3125 * _3125;
                                float _3138 = (fma(_2271, _3016.z, fma(_2270, _3016.y, _3016.x * _2269)) + _3016.w) / _3079;
                                float _3139 = (fma(_2271, _3032.z, fma(_2270, _3032.y, _3032.x * _2269)) + _3032.w) / _3079;
                                float _3143 = 1.0 - dot(vec2(_3138, _3139), vec2(_3138, _3139));
                                float _4219 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3145 = _3144 * (((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3121) / ((_3134 * 0.699999988079071044921875) + 1.0));
                                float _3157 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                                float _3158 = 1.0 - _573;
                                float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                                float _3166 = _3165 * _3165;
                                float _3167 = _3166 * _3166;
                                float _3168 = _3114 - _2584;
                                float _3169 = _3115 - _2585;
                                float _3170 = _3116 - _2586;
                                float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                                float _3178 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2584, (-0.0) - _2585, (-0.0) - _2586));
                                float _4230 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3182 = dot(vec3(_513, _516, _519), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                                float _4241 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3185 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                                float _3190 = _3127 * _3166;
                                float _3191 = _3190 * _3190;
                                float _3197 = ((1.0 - _3191) * dot(vec3(_513, _516, _519), vec3(_3114, _3115, _3116))) + _3191;
                                float _4252 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3199 = 1.0 - _3166;
                                float _3209 = (0.5 / (((_3198 * ((_3181 * _3199) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3166) * _3181))) * _3198;
                                float _4263 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3219 = (_3144 * _3121) * (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_3189 * _3189) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3145 * _2988.y;
                                frontier_phi_83_pred_1 = _3145 * _2988.x;
                                frontier_phi_83_pred_2 = _3219 * _3000.z;
                                frontier_phi_83_pred_3 = _3219 * _3000.y;
                                frontier_phi_83_pred_4 = _3219 * _3000.x;
                                frontier_phi_83_pred_5 = _3145 * _2988.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3227 = frontier_phi_83_pred;
                            _3226 = frontier_phi_83_pred_1;
                            _3225 = frontier_phi_83_pred_2;
                            _3224 = frontier_phi_83_pred_3;
                            _3223 = frontier_phi_83_pred_4;
                            _3228 = frontier_phi_83_pred_5;
                            _2930 = _3226 + _2943;
                            _2931 = _3227 + _2944;
                            _2932 = _3228 + _2945;
                            _2927 = _3223 + _2940;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            if (_2947 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2947;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2932;
                        frontier_phi_77_pred_1 = _2931;
                        frontier_phi_77_pred_2 = _2930;
                        frontier_phi_77_pred_3 = _2929;
                        frontier_phi_77_pred_4 = _2928;
                        frontier_phi_77_pred_5 = _2927;
                    }
                    _2569 = frontier_phi_77_pred;
                    _2567 = frontier_phi_77_pred_1;
                    _2565 = frontier_phi_77_pred_2;
                    _2563 = frontier_phi_77_pred_3;
                    _2561 = frontier_phi_77_pred_4;
                    _2559 = frontier_phi_77_pred_5;
                    uint _2725 = _2724 + 1u;
                    if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2718 = _2559;
                        _2719 = _2561;
                        _2720 = _2563;
                        _2721 = _2565;
                        _2722 = _2567;
                        _2723 = _2569;
                        _2724 = _2725;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2563;
                frontier_phi_58_59_ladder_1 = _2569;
                frontier_phi_58_59_ladder_2 = _2567;
                frontier_phi_58_59_ladder_3 = _2565;
                frontier_phi_58_59_ladder_4 = _2561;
                frontier_phi_58_59_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_58_59_ladder = _2441;
                frontier_phi_58_59_ladder_1 = _2447;
                frontier_phi_58_59_ladder_2 = _2445;
                frontier_phi_58_59_ladder_3 = _2443;
                frontier_phi_58_59_ladder_4 = _2439;
                frontier_phi_58_59_ladder_5 = _2437;
            }
            _2558 = frontier_phi_58_59_ladder_5;
            _2560 = frontier_phi_58_59_ladder_4;
            _2562 = frontier_phi_58_59_ladder;
            _2564 = frontier_phi_58_59_ladder_3;
            _2566 = frontier_phi_58_59_ladder_2;
            _2568 = frontier_phi_58_59_ladder_1;
        }
        float _2573 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2328 = (_2573 * _2564) + _1780;
        _2330 = (_2573 * _2566) + _1782;
        _2332 = (_2573 * _2568) + _1784;
        _2334 = ((_2558 * 0.039999999105930328369140625) * _2573) + _2113;
        _2336 = ((_2560 * 0.039999999105930328369140625) * _2573) + _2115;
        _2338 = ((_2562 * 0.039999999105930328369140625) * _2573) + _2117;
    }
    else
    {
        _2328 = _1780;
        _2330 = _1782;
        _2332 = _1784;
        _2334 = _2113;
        _2336 = _2115;
        _2338 = _2117;
    }
    uint _2344 = _533 + uint(cbMatDynParam._m0[0u].w);
    float _4279 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4290 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4301 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4312 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _2370 = (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2328 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _557))) + ((_2334 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1396)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2344].x * cbMtdParam._m0[10u].x);
    float _2372 = ((cbInstanceData._m0[_2344].y * cbMtdParam._m0[10u].y) + ((_2336 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1396)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2330 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _557)));
    float _2374 = ((cbInstanceData._m0[_2344].z * cbMtdParam._m0[10u].z) + ((_2338 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1396)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2332 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _557)));
    float _2375 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2376 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2377 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2382 = cbInstanceData._m0[_532 + 6u].w * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)));
    float _2387 = _492 / cbSceneParam._m0[86u].x;
    float _2388 = _493 / cbSceneParam._m0[86u].y;
    vec4 _2402 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, (log2((isnan(cbSceneParam._m0[77u].w) ? _413 : (isnan(_413) ? cbSceneParam._m0[77u].w : min(_413, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2404 = _2402.x;
    float _2405 = _2402.y;
    float _2406 = _2402.z;
    float _2407 = _2402.w;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_413 > cbSceneParam._m0[78u].w)
    {
        float _2462 = isnan(_413) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _413 : min(cbSceneParam._m0[80u].w, _413));
        float _2463 = _2462 / _413;
        float _2474 = _2463 * _464;
        float _2475 = _465 * _2463;
        float _2476 = (-0.0) - _2475;
        float _2478 = _2463 * _466;
        float _2480 = (cbSceneParam._m0[77u].w * _2476) / _2462;
        float _2481 = _2480 + cbSceneParam._m0[79u].w;
        float _2482 = cbSceneParam._m0[79u].w - _2475;
        float _2488 = sqrt(((_2474 * _2474) + (_2475 * _2475)) + (_2478 * _2478));
        float _2491 = (1.0 - (cbSceneParam._m0[77u].w / _2462)) * _2488;
        float _2496 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2498 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2675;
        if (abs((_2476 - _2480) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2675 = ((((_2481 > 0.0) ? exp2(_2496 * _2481) : (2.0 - exp2(_2498 * _2481))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2491;
        }
        else
        {
            float _2619 = 1.0 / cbSceneParam._m0[80u].x;
            float _2620 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : max(_2481, _2482));
            float _2621 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : min(_2481, _2482));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            _2675 = ((abs(_2488 / _2476) * cbSceneParam._m0[80u].y) * ((((_2630 - _2631) * 2.0) - ((exp2(_2496 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)))) - exp2(_2496 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))))) * _2619)) - ((exp2(_2498 * _2630) - exp2(_2498 * _2631)) * _2619))) + (_2491 * cbSceneParam._m0[80u].z);
        }
        vec4 _2677 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2387, _2388, 1.0), 0.0);
        float _2686 = exp2((_2675 * (-1.44269502162933349609375)) * (1.0 - _2677.w));
        float _2687 = log2(_2686);
        float _2703 = log2(_2407);
        _2500 = (exp2(_2703 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].x)) * _2677.x) / cbSceneParam._m0[78u].x)) + _2404;
        _2502 = (exp2(_2703 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].y)) * _2677.y) / cbSceneParam._m0[78u].y)) + _2405;
        _2504 = (exp2(_2703 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].z)) * _2677.z) / cbSceneParam._m0[78u].z)) + _2406;
        _2506 = _2686 * _2407;
    }
    else
    {
        _2500 = _2404;
        _2502 = _2405;
        _2504 = _2406;
        _2506 = _2407;
    }
    bool _2713;
    vec4 _2516;
    vec4 _2538;
    float _2540;
    float _2544;
    float _2545;
    float _2546;
    float _2547;
    bool _2557;
    for (;;)
    {
        _2516 = cbMatDynParam._m0[0u];
        float _2518 = roundEven(_2516.y);
        bool _2519 = _2518 == 3.0;
        float _2520 = log2(_2506);
        float _2527 = exp2(_2520 * cbSceneParam._m0[78u].x) * _2375;
        float _2528 = exp2(_2520 * cbSceneParam._m0[78u].y) * _2376;
        float _2529 = exp2(_2520 * cbSceneParam._m0[78u].z) * _2377;
        float _2536 = _480 + (-0.5);
        _2538 = cbMtdParam._m0[1u];
        _2540 = _2538.y * _2536;
        float _2543 = (_2518 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2544 = _2543 * (_2519 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2500)));
        _2545 = _2543 * (_2519 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2502)));
        _2546 = _2543 * (_2519 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2504)));
        _2547 = _2536 * 0.999000012874603271484375;
        _2557 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2557)
        {
            if ((cbInstanceData._m0[_532 + 7u].x + _2547) < 0.5)
            {
                _2713 = true;
                break;
            }
        }
        uint _2654 = _533 + uint(_2516.w);
        if ((cbInstanceData._m0[_2654].w < 1.0) && ((cbInstanceData._m0[_2654].w + _2547) < 0.5))
        {
            _2713 = true;
            break;
        }
        if ((_2540 + _296) < _2538.x)
        {
            _2713 = true;
            break;
        }
        _2713 = false;
        break;
    }
    float _2918;
    if (_2713)
    {
        discard_state = true;
        _2918 = 0.0;
    }
    else
    {
        _2918 = _2382;
    }
    SV_Target.x = _2544;
    SV_Target.y = _2545;
    SV_Target.z = _2546;
    SV_Target.w = _2918;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2382;
    discard_exit();
}


