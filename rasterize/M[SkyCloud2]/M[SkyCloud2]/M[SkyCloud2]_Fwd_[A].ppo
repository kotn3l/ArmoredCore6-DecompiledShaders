#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _956;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _227 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _242 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_220 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _227) + cbTextureTilingScale._m0[0u].w));
    float _245 = _242.y;
    float _246 = _245 * (-0.20000000298023223876953125);
    vec4 _260 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _262 = _260.z;
    float _273 = ((_227 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _277 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_220 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _273)).x * 0.0500000007450580596923828125;
    float _290 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_220 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _273)).x * 0.100000001490116119384765625;
    float _294 = (((_262 + _246) + _277) + _290) * TEXCOORD_1.z;
    vec4 _312 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = ((_294 * cbMtdParam._m0[11u].x) * _312.x) * cbMtdParam._m0[9u].x;
    float _328 = ((_294 * cbMtdParam._m0[11u].y) * _312.y) * cbMtdParam._m0[9u].y;
    float _332 = ((((((_262 - (_245 * 0.20000000298023223876953125)) + _277) + _290) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _312.z) * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_246 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_246 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _361 = (_354.x * 2.0) + (-1.0);
    float _363 = (_354.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3356 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    float _373 = (_361 * cbMtdParam._m0[12u].z) + _361;
    float _374 = (_363 * cbMtdParam._m0[12u].z) + _363;
    float _377 = fma(_370, _200 * NORMAL.x, fma(_374, _207 * TANGENT.x, (_193 * _185) * _373));
    float _380 = fma(_370, _200 * NORMAL.y, fma(_374, _207 * TANGENT.y, (_193 * _186) * _373));
    float _383 = fma(_370, _200 * NORMAL.z, fma(_374, _207 * TANGENT.z, (_193 * _187) * _373));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3367 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _391 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _392 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3400 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3411 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    vec4 _476 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _478 = _476.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _635 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
        float _641 = (cbMatDynParam._m0[5u].x * _635) + cbMatDynParam._m0[5u].y;
        float _3422 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _635) + cbMatDynParam._m0[5u].w;
        float _3433 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) - _642)) + _642) < ((_478 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _511 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _514 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _517 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _530 = uint(roundEven(NORMAL.w)) * 13u;
    uint _531 = _530 + 9u;
    uint _532 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _538 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_532].x;
    float _539 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_532].y;
    float _540 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_532].z;
    float _3444 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _490, cbSceneParam._m0[86u].y * _491));
    float _555 = _552.x * TEXCOORD_1.w;
    float _556 = dot(vec3(_388, _389, _390), vec3(_469, _470, _471));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _388) - _469;
    float _564 = (_559 * _389) - _470;
    float _565 = (_559 * _390) - _471;
    float _569 = abs(dot(vec3(_469, _470, _471), vec3(_388, _389, _390)));
    float _3477 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_392);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _955;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _680 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _684 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _688 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _713 = _616 + _388;
        float _714 = _620 + _389;
        float _715 = _624 + _390;
        float _725 = fma(_715, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) - _680;
        float _726 = fma(_715, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) - _684;
        float _727 = fma(_715, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) - _688;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_680 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_684 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[34u].z) + ((((((_688 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _783 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_749.x + (-0.5));
        float _785 = _783 * (_749.y + (-0.5));
        float _786 = _783 * (_749.z + (-0.5));
        float _793 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_756.x + (-0.5));
        float _795 = _793 * (_756.y + (-0.5));
        float _796 = _793 * (_756.z + (-0.5));
        float _803 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_763.x + (-0.5));
        float _805 = _803 * (_763.y + (-0.5));
        float _806 = _803 * (_763.z + (-0.5));
        float _813 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_770.x + (-0.5));
        float _815 = _813 * (_770.y + (-0.5));
        float _816 = _813 * (_770.z + (-0.5));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = _784 * 0.5;
        float _821 = _794 * 0.5;
        float _822 = _804 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _837 = (dot(vec3(_388, _389, _390), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _847 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3525 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_849 + 1.0))) + _854) * _817;
        float _864 = _785 * 0.5;
        float _865 = _795 * 0.5;
        float _866 = _805 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_388, _389, _390), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3558 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_891 + 1.0))) + _896) * _818;
        float _906 = _786 * 0.5;
        float _907 = _796 * 0.5;
        float _908 = _806 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_388, _389, _390), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3591 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_933 + 1.0))) + _938) * _819;
        _955 = _786;
        _957 = _785;
        _958 = _784;
        _959 = _796;
        _960 = _795;
        _961 = _794;
        _962 = _806;
        _963 = _805;
        _964 = _804;
        _965 = _819;
        _966 = _818;
        _967 = _817;
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
    }
    else
    {
        _955 = _956;
        _957 = _956;
        _958 = _956;
        _959 = _956;
        _960 = _956;
        _961 = _956;
        _962 = _956;
        _963 = _956;
        _964 = _956;
        _965 = _956;
        _966 = _956;
        _967 = _956;
        _968 = 0.0;
        _969 = 0.0;
        _970 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _1003 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _1007 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _1030 = _616 + _388;
        float _1031 = _620 + _389;
        float _1032 = _624 + _390;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_388, _389, _390), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3654 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_388, _389, _390), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3687 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_388, _389, _390), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3720 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _956;
        _1269 = _956;
        _1270 = _956;
        _1271 = _956;
        _1272 = _956;
        _1273 = _956;
        _1274 = _956;
        _1275 = _956;
        _1276 = _956;
        _1277 = _956;
        _1278 = _956;
        _1279 = _956;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _969)) + _969;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _563 * 0.5;
    float _1337 = _564 * 0.5;
    float _1338 = _565 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_955, _959, _962, _965));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_957, _960, _963, _966));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _961, _964, _967));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1467 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1470 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1498 = frontier_phi_17_15_ladder;
        }
        float _1702;
        if (_1467 > 0.0)
        {
            _1702 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1702 = frontier_phi_26_22_ladder;
        }
        float _1945;
        if (_1470 > 0.0)
        {
            _1945 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1945 = frontier_phi_38_33_ladder;
        }
        float _1947 = isnan(_1702) ? _1498 : (isnan(_1498) ? _1702 : min(_1498, _1702));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1464) + _1453;
        float _1953 = (_1948 * _1467) + _1457;
        float _1954 = (_1948 * _1470) + _1461;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_16_38_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_16_38_ladder_2;
        _1488 = frontier_phi_16_38_ladder_1;
        _1490 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1405);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1565 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1568 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1707;
        if (_1562 > 0.0)
        {
            _1707 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1707 = frontier_phi_28_24_ladder;
        }
        float _1972;
        if (_1565 > 0.0)
        {
            _1972 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1972 = frontier_phi_40_35_ladder;
        }
        float _2177;
        if (_1568 > 0.0)
        {
            _2177 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2177 = frontier_phi_49_46_ladder;
        }
        float _2179 = isnan(_1972) ? _1707 : (isnan(_1707) ? _1972 : min(_1707, _1972));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1562) + _1551;
        float _2185 = (_2180 * _1565) + _1555;
        float _2186 = (_2180 * _1568) + _1559;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2187;
        float _2190 = _2187 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2186 > _2190) || ((_2186 < _2188) || ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 < _2188) || (_2184 > _2190))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2186, cbModelParam._m0[17u].z, fma(_2185, cbModelParam._m0[17u].y, _2184 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2186, cbModelParam._m0[18u].z, fma(_2185, cbModelParam._m0[18u].y, _2184 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2186, cbModelParam._m0[19u].z, fma(_2185, cbModelParam._m0[19u].y, _2184 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_25_49_ladder = _2406.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2406.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2406.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_25_49_ladder_2;
        _1589 = frontier_phi_25_49_ladder_1;
        _1591 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1495);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1603 = ((((1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_584 * _571)) * _555;
    float _1604 = _1603 * ((cbModelParam._m0[1u].w * (_1587 - _1486)) + _1486);
    float _1605 = _1603 * ((cbModelParam._m0[1u].w * (_1589 - _1488)) + _1488);
    float _1606 = _1603 * ((cbModelParam._m0[1u].w * (_1591 - _1490)) + _1490);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    uvec4 _1625 = floatBitsToUint(cbInstanceData._m0[_530 + 5u]);
    uint _1627 = _1625.x * 14u;
    uint _1628 = _1627 + 13u;
    float _1635 = _555 + (-1.0);
    float _1640 = (cbLight._m0[_1628].x * _1635) + 1.0;
    float _1641 = (cbLight._m0[_1628].y * _1635) + 1.0;
    float _1642 = (cbLight._m0[_1628].z * _1635) + 1.0;
    float _1643 = (cbLight._m0[_1628].w * _1635) + 1.0;
    uint _1644 = _1627 + 5u;
    float _1650 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
    uint _1654 = _1627 + 4u;
    float _1661 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
    uint _1665 = _1627 | 1u;
    float _1676 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_388, _389, _390));
    float _1679 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_388, _389, _390));
    float _3856 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _3867 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1684 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1686 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1693 = ((cbLight._m0[_1644].x * _1650) * _1686) + ((cbLight._m0[_1654].x * _1661) * _1684);
    float _1694 = ((_1650 * cbLight._m0[_1644].y) * _1686) + ((_1661 * cbLight._m0[_1654].y) * _1684);
    float _1695 = ((_1650 * cbLight._m0[_1644].z) * _1686) + ((_1661 * cbLight._m0[_1654].z) * _1684);
    uvec4 _1699 = floatBitsToUint(cbLight._m0[_1627 + 12u]);
    bool _1701 = _1699.x == 0u;
    float _1712;
    float _1714;
    float _1716;
    if (_1701)
    {
        _1712 = _1693;
        _1714 = _1694;
        _1716 = _1695;
    }
    else
    {
        uint _1720 = _1627 + 6u;
        float _1736 = (dot(vec3(cbLight._m0[_1627 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1737 = _1736 * _1736;
        float _3878 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1739 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1712 = (((cbLight._m0[_1720].x * 0.3183098733425140380859375) * _1738) * _1739) + _1693;
        _1714 = (((cbLight._m0[_1720].y * 0.3183098733425140380859375) * _1738) * _1739) + _1694;
        _1716 = (((cbLight._m0[_1720].z * 0.3183098733425140380859375) * _1738) * _1739) + _1695;
    }
    bool _1719 = _1699.y == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1719)
    {
        _1757 = _1712;
        _1759 = _1714;
        _1761 = _1716;
    }
    else
    {
        uint _1916 = _1627 + 7u;
        float _1932 = (dot(vec3(cbLight._m0[_1627 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _3894 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1935 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _1757 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1712;
        _1759 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1714;
        _1761 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1716;
    }
    uint _1764 = _1627 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1627].w)) * _392) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1627].x + _469;
    float _1780 = cbLight._m0[_1627].y + _470;
    float _1781 = cbLight._m0[_1627].z + _471;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1627].xyz));
    float _3910 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1793 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1794 = dot(vec3(_388, _389, _390), vec3(_1786, _1787, _1788));
    float _3932 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1627].xyz), vec3(_1786, _1787, _1788));
    float _3943 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1793 * ((_1792 * _1818) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1818) + _1778) * _1792))) * _1792;
    float _3954 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1842 = _1627 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _392) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1665].x + _469;
    float _1856 = cbLight._m0[_1665].y + _470;
    float _1857 = cbLight._m0[_1665].z + _471;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1665].xyz));
    float _3965 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1869 = dot(vec3(_388, _389, _390), vec3(_1862, _1863, _1864));
    float _3976 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1862, _1863, _1864));
    float _3987 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1854;
    float _1901 = (0.5 / (((_1793 * ((_1868 * _1891) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1891) + _1854) * _1868))) * _1868;
    float _3998 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1913 = (((_1890 * cbLight._m0[_1842].x) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].x) * _1831) * _1661);
    float _1914 = (((_1890 * cbLight._m0[_1842].y) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].y) * _1831) * _1661);
    float _1915 = (((_1890 * cbLight._m0[_1842].z) * _1903) * _1650) + (((_1817 * cbLight._m0[_1764].z) * _1831) * _1661);
    float _1977;
    float _1979;
    float _1981;
    if (_1701)
    {
        _1977 = _1913;
        _1979 = _1914;
        _1981 = _1915;
    }
    else
    {
        uint _1983 = _1627 + 2u;
        uint _1987 = _1627 + 10u;
        float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _392) * 0.949999988079071044921875);
        float _2002 = _2001 * _2001;
        float _2003 = cbLight._m0[_1983].x + _469;
        float _2004 = cbLight._m0[_1983].y + _470;
        float _2005 = cbLight._m0[_1983].z + _471;
        float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
        float _2010 = _2009 * _2003;
        float _2011 = _2009 * _2004;
        float _2012 = _2009 * _2005;
        float _2013 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1983].xyz));
        float _4009 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2017 = dot(vec3(_388, _389, _390), vec3(_2010, _2011, _2012));
        float _4020 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2021 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2010, _2011, _2012));
        float _4031 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2025 = _2002 * _2002;
        float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
        float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2039 = 1.0 - _2002;
        float _2049 = (0.5 / (((_1793 * ((_2016 * _2039) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2039) + _2002) * _2016))) * _2016;
        float _4042 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1642 : (isnan(_1642) ? 1.0 : min(_1642, 1.0));
        _1977 = (((_2038 * cbLight._m0[_1987].x) * _2051) * _2052) + _1913;
        _1979 = (((_2038 * cbLight._m0[_1987].y) * _2051) * _2052) + _1914;
        _1981 = (((_2038 * cbLight._m0[_1987].z) * _2051) * _2052) + _1915;
    }
    float _2087;
    float _2089;
    float _2091;
    if (_1719)
    {
        _2087 = _1977;
        _2089 = _1979;
        _2091 = _1981;
    }
    else
    {
        uint _2098 = _1627 + 3u;
        uint _2102 = _1627 + 11u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _392) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _469;
        float _2119 = cbLight._m0[_2098].y + _470;
        float _2120 = cbLight._m0[_2098].z + _471;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2098].xyz));
        float _4058 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2132 = dot(vec3(_388, _389, _390), vec3(_2125, _2126, _2127));
        float _4069 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4080 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = 1.0 - _2117;
        float _2164 = (0.5 / (((_1793 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _2154) + _2117) * _2131))) * _2131;
        float _4091 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
        _2087 = (((_2153 * cbLight._m0[_2102].x) * _2166) * _2167) + _1977;
        _2089 = (((_2153 * cbLight._m0[_2102].y) * _2166) * _2167) + _1979;
        _2091 = (((_2153 * cbLight._m0[_2102].z) * _2166) * _2167) + _1981;
    }
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    if (_1625.y == 0u)
    {
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2242;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2242;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2242;
        uvec4 _2257 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2258 = _2257.x;
        uint _2269 = uint((float(_2257.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _2258))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _2258)));
        float _2279 = (log2(_2245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2280 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        uint _2283 = uint(isnan(14.0) ? _2280 : (isnan(_2280) ? 14.0 : min(_2280, 14.0)));
        uvec4 _2288 = texelFetch(g_lightClusterGridBuffer, int(((_2283 << 2u) + (_2269 << 6u)) >> 2u));
        uint _2289 = _2288.x;
        uint _2290 = _2257.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2290 >> 4u) & 15u)) + 4294967295u) & _2289) == 0u) || ((_2290 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2580)
                {
                    frontier_phi_66_pred = _2564;
                    frontier_phi_66_pred_1 = _2569;
                    frontier_phi_66_pred_2 = _2568;
                    frontier_phi_66_pred_3 = _2567;
                    frontier_phi_66_pred_4 = _2566;
                    frontier_phi_66_pred_5 = _2565;
                }
                else
                {
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    uint _2715;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2579;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    for (;;)
                    {
                        uint _2719 = uint(findLSB(_2715)) + (_2570 << 5u);
                        uint _2716 = (_2715 + 4294967295u) & _2715;
                        uint _2721 = _2719 * 48u;
                        vec4 _2735 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2741 = (_2719 * 48u) + 4u;
                        vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2741)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2741 + 3u)).x));
                        uint _2760 = (_2719 * 48u) + 8u;
                        vec3 _2771 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2760)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2760 + 2u)).x));
                        float _2775 = _2735.x - _2243;
                        float _2776 = _2735.y - _2244;
                        float _2777 = _2735.z - _2245;
                        float _2778 = dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777));
                        float _2781 = inversesqrt(_2778);
                        float _2782 = _2781 * _2775;
                        float _2783 = _2781 * _2776;
                        float _2784 = _2781 * _2777;
                        float _2785 = dot(vec3(_511, _514, _517), vec3(_2782, _2783, _2784));
                        float _2790 = 1.0 - (_2778 * _2735.w);
                        float _4117 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2792 = sqrt(_2778) * _2754.w;
                        float _2795 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                        float _2796 = _2795 * _2795;
                        float _2799 = ((1.0 - _2796) * _2785) + _2796;
                        float _2802 = _2792 * _2792;
                        float _2806 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2791) / ((_2802 * 0.699999988079071044921875) + 1.0);
                        float _2810 = (-0.0) - _2243;
                        float _2811 = (-0.0) - _2244;
                        float _2812 = (-0.0) - _2245;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2827 = exp2(log2(1.0 / ((_2802 * 3.5) + 5.0)) * 0.25);
                        float _2828 = 1.0 - _571;
                        float _2835 = sqrt(1.0 - ((1.0 - (_2828 * _2828)) * (1.0 - (_2827 * _2827))));
                        float _2836 = _2835 * _2835;
                        float _2837 = _2836 * _2836;
                        float _2838 = _2817 + _2782;
                        float _2839 = _2818 + _2783;
                        float _2840 = _2819 + _2784;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2848 = dot(vec3(_511, _514, _517), vec3(_2817, _2818, _2819));
                        float _4133 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2852 = dot(vec3(_511, _514, _517), vec3(_2844 * _2838, _2844 * _2839, _2844 * _2840));
                        float _4144 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2859 = ((_2855 * _2855) * (_2837 + (-1.0))) + 1.0;
                        float _2860 = _2795 * _2836;
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2785) + _2861;
                        float _4155 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2866 = 1.0 - _2836;
                        float _2876 = (0.5 / (((_2865 * ((_2851 * _2866) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2865 * _2866) + _2836) * _2851))) * _2865;
                        float _4166 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2887 = (((_2837 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2859 * _2859) * ((_2802 * 2.1991131305694580078125) + 3.141590118408203125))) * _2791;
                        _2639 = (_2806 * _2754.x) + _2712;
                        _2640 = (_2806 * _2754.y) + _2713;
                        _2641 = (_2806 * _2754.z) + _2714;
                        _2636 = (_2887 * _2771.x) + _2709;
                        _2637 = (_2887 * _2771.y) + _2710;
                        _2638 = (_2887 * _2771.z) + _2711;
                        if (_2716 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2716;
                        }
                    }
                    frontier_phi_66_pred = _2636;
                    frontier_phi_66_pred_1 = _2641;
                    frontier_phi_66_pred_2 = _2640;
                    frontier_phi_66_pred_3 = _2639;
                    frontier_phi_66_pred_4 = _2638;
                    frontier_phi_66_pred_5 = _2637;
                }
                _2412 = frontier_phi_66_pred;
                _2422 = frontier_phi_66_pred_1;
                _2420 = frontier_phi_66_pred_2;
                _2418 = frontier_phi_66_pred_3;
                _2416 = frontier_phi_66_pred_4;
                _2414 = frontier_phi_66_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2412;
                    _2565 = _2414;
                    _2566 = _2416;
                    _2567 = _2418;
                    _2568 = _2420;
                    _2569 = _2422;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2428) & _2289) == 0u)
        {
            _2532 = _2411;
            _2534 = _2413;
            _2536 = _2415;
            _2538 = _2417;
            _2540 = _2419;
            _2542 = _2421;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
            float _2558 = _2557 * _2243;
            float _2559 = _2557 * _2244;
            float _2560 = _2557 * _2245;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2692 = _2411;
                float _2693 = _2413;
                float _2694 = _2415;
                float _2695 = _2417;
                float _2696 = _2419;
                float _2697 = _2421;
                uint _2698 = _2428;
                uint _2707;
                bool _2708;
                for (;;)
                {
                    _2707 = texelFetch(g_lightClassification, int((((_2283 << 5u) + (_2269 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                    _2708 = _2707 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2708)
                    {
                        frontier_phi_77_pred = _2697;
                        frontier_phi_77_pred_1 = _2696;
                        frontier_phi_77_pred_2 = _2695;
                        frontier_phi_77_pred_3 = _2694;
                        frontier_phi_77_pred_4 = _2693;
                        frontier_phi_77_pred_5 = _2692;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        uint _2920 = _2707;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2990;
                        vec4 _3006;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2931 = ((_2698 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2977 = (_2931 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2931 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3009 = (_2931 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2931 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2245, _3041.z, fma(_2244, _3041.y, _3041.x * _2243)) + _3041.w;
                            _3054 = !((fma(_2245, _3022.z, fma(_2244, _3022.y, _3022.x * _2243)) + _3022.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2946.x - _2243;
                                float _3082 = _2946.y - _2244;
                                float _3083 = _2946.z - _2245;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2947 * _2947));
                                float _4177 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3099 = sqrt(_3084) * _2962.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_511, _514, _517))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2245, _2990.z, fma(_2244, _2990.y, _2990.x * _2243)) + _2990.w) / _3053;
                                float _3113 = (fma(_2245, _3006.z, fma(_2244, _3006.y, _3006.x * _2243)) + _3006.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4193 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _571;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2558;
                                float _3143 = _3089 - _2559;
                                float _3144 = _3090 - _2560;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_511, _514, _517), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4204 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3156 = dot(vec3(_511, _514, _517), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4215 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_511, _514, _517), vec3(_3088, _3089, _3090))) + _3165;
                                float _4226 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4237 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3119 * _2962.y;
                                frontier_phi_83_pred_1 = _3119 * _2962.x;
                                frontier_phi_83_pred_2 = _3193 * _2974.z;
                                frontier_phi_83_pred_3 = _3193 * _2974.y;
                                frontier_phi_83_pred_4 = _3193 * _2974.x;
                                frontier_phi_83_pred_5 = _3119 * _2962.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_83_pred;
                            _3200 = frontier_phi_83_pred_1;
                            _3199 = frontier_phi_83_pred_2;
                            _3198 = frontier_phi_83_pred_3;
                            _3197 = frontier_phi_83_pred_4;
                            _3202 = frontier_phi_83_pred_5;
                            _2904 = _3200 + _2917;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2906;
                        frontier_phi_77_pred_1 = _2905;
                        frontier_phi_77_pred_2 = _2904;
                        frontier_phi_77_pred_3 = _2903;
                        frontier_phi_77_pred_4 = _2902;
                        frontier_phi_77_pred_5 = _2901;
                    }
                    _2543 = frontier_phi_77_pred;
                    _2541 = frontier_phi_77_pred_1;
                    _2539 = frontier_phi_77_pred_2;
                    _2537 = frontier_phi_77_pred_3;
                    _2535 = frontier_phi_77_pred_4;
                    _2533 = frontier_phi_77_pred_5;
                    uint _2699 = _2698 + 1u;
                    if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2692 = _2533;
                        _2693 = _2535;
                        _2694 = _2537;
                        _2695 = _2539;
                        _2696 = _2541;
                        _2697 = _2543;
                        _2698 = _2699;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2537;
                frontier_phi_58_59_ladder_1 = _2543;
                frontier_phi_58_59_ladder_2 = _2541;
                frontier_phi_58_59_ladder_3 = _2539;
                frontier_phi_58_59_ladder_4 = _2535;
                frontier_phi_58_59_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_58_59_ladder = _2415;
                frontier_phi_58_59_ladder_1 = _2421;
                frontier_phi_58_59_ladder_2 = _2419;
                frontier_phi_58_59_ladder_3 = _2417;
                frontier_phi_58_59_ladder_4 = _2413;
                frontier_phi_58_59_ladder_5 = _2411;
            }
            _2532 = frontier_phi_58_59_ladder_5;
            _2534 = frontier_phi_58_59_ladder_4;
            _2536 = frontier_phi_58_59_ladder;
            _2538 = frontier_phi_58_59_ladder_3;
            _2540 = frontier_phi_58_59_ladder_2;
            _2542 = frontier_phi_58_59_ladder_1;
        }
        float _2547 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2302 = (_2547 * _2538) + _1757;
        _2304 = (_2547 * _2540) + _1759;
        _2306 = (_2547 * _2542) + _1761;
        _2308 = ((_2532 * 0.039999999105930328369140625) * _2547) + _2087;
        _2310 = ((_2534 * 0.039999999105930328369140625) * _2547) + _2089;
        _2312 = ((_2536 * 0.039999999105930328369140625) * _2547) + _2091;
    }
    else
    {
        _2302 = _1757;
        _2304 = _1759;
        _2306 = _1761;
        _2308 = _2087;
        _2310 = _2089;
        _2312 = _2091;
    }
    uint _2318 = _531 + uint(cbMatDynParam._m0[0u].w);
    float _4253 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4264 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4275 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4286 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _2344 = (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2302 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _555))) + ((_2308 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2318].x * cbMtdParam._m0[10u].x);
    float _2346 = ((cbInstanceData._m0[_2318].y * cbMtdParam._m0[10u].y) + ((_2310 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2304 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _555)));
    float _2348 = ((cbInstanceData._m0[_2318].z * cbMtdParam._m0[10u].z) + ((_2312 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1394)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2306 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _555)));
    float _2349 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2350 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2356 = cbInstanceData._m0[_530 + 6u].w * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)));
    float _2361 = _490 / cbSceneParam._m0[86u].x;
    float _2362 = _491 / cbSceneParam._m0[86u].y;
    vec4 _2376 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2378 = _2376.x;
    float _2379 = _2376.y;
    float _2380 = _2376.z;
    float _2381 = _2376.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2437 = _2436 / _411;
        float _2448 = _2437 * _462;
        float _2449 = _463 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2452 = _2437 * _464;
        float _2454 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2449;
        float _2462 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2649;
        if (abs((_2450 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2649 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2595 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2649 = ((abs(_2462 / _2450) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2472 * _2604) - exp2(_2472 * _2605)) * _2593))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2651 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, 1.0), 0.0);
        float _2660 = exp2((_2649 * (-1.44269502162933349609375)) * (1.0 - _2651.w));
        float _2661 = log2(_2660);
        float _2677 = log2(_2381);
        _2474 = (exp2(_2677 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].x)) * _2651.x) / cbSceneParam._m0[78u].x)) + _2378;
        _2476 = (exp2(_2677 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].y)) * _2651.y) / cbSceneParam._m0[78u].y)) + _2379;
        _2478 = (exp2(_2677 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2661 * cbSceneParam._m0[78u].z)) * _2651.z) / cbSceneParam._m0[78u].z)) + _2380;
        _2480 = _2660 * _2381;
    }
    else
    {
        _2474 = _2378;
        _2476 = _2379;
        _2478 = _2380;
        _2480 = _2381;
    }
    bool _2687;
    vec4 _2490;
    vec4 _2512;
    float _2514;
    float _2518;
    float _2519;
    float _2520;
    float _2521;
    bool _2531;
    for (;;)
    {
        _2490 = cbMatDynParam._m0[0u];
        float _2492 = roundEven(_2490.y);
        bool _2493 = _2492 == 3.0;
        float _2494 = log2(_2480);
        float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * _2349;
        float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * _2350;
        float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * _2351;
        float _2510 = _478 + (-0.5);
        _2512 = cbMtdParam._m0[1u];
        _2514 = _2512.y * _2510;
        float _2517 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2518 = _2517 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
        _2519 = _2517 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
        _2520 = _2517 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
        _2521 = _2510 * 0.999000012874603271484375;
        _2531 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2531)
        {
            if ((cbInstanceData._m0[_530 + 7u].x + _2521) < 0.5)
            {
                _2687 = true;
                break;
            }
        }
        uint _2628 = _531 + uint(_2490.w);
        if ((cbInstanceData._m0[_2628].w < 1.0) && ((cbInstanceData._m0[_2628].w + _2521) < 0.5))
        {
            _2687 = true;
            break;
        }
        if ((_2514 + _294) < _2512.x)
        {
            _2687 = true;
            break;
        }
        _2687 = false;
        break;
    }
    float _2892;
    if (_2687)
    {
        discard_state = true;
        _2892 = 0.0;
    }
    else
    {
        _2892 = _2356;
    }
    SV_Target.x = _2518;
    SV_Target.y = _2519;
    SV_Target.z = _2520;
    SV_Target.w = _2892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2356;
    discard_exit();
}


