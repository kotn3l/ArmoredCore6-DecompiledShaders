#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _911;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _223 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _238 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_216 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _223) + cbTextureTilingScale._m0[0u].w));
    float _241 = _238.y;
    float _242 = _241 * (-0.20000000298023223876953125);
    vec4 _256 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _258 = _256.z;
    float _269 = ((_223 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _273 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_216 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _269)).x * 0.0500000007450580596923828125;
    float _286 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_216 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _269)).x * 0.100000001490116119384765625;
    float _290 = (((_258 + _242) + _273) + _286) * TEXCOORD_1.z;
    vec4 _308 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = ((_290 * cbMtdParam._m0[11u].x) * _308.x) * cbMtdParam._m0[9u].x;
    float _324 = ((_290 * cbMtdParam._m0[11u].y) * _308.y) * cbMtdParam._m0[9u].y;
    float _328 = ((((((_258 - (_241 * 0.20000000298023223876953125)) + _273) + _286) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _308.z) * cbMtdParam._m0[9u].z;
    vec4 _350 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_242 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_242 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _357 = (_350.x * 2.0) + (-1.0);
    float _359 = (_350.y * 2.0) + (-1.0);
    float _360 = dot(vec2(_357, _359), vec2(_357, _359));
    float _3245 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))));
    float _369 = (_357 * cbMtdParam._m0[12u].z) + _357;
    float _370 = (_359 * cbMtdParam._m0[12u].z) + _359;
    float _373 = fma(_366, _196 * NORMAL.x, fma(_370, _203 * TANGENT.x, (_189 * _181) * _369));
    float _376 = fma(_366, _196 * NORMAL.y, fma(_370, _203 * TANGENT.y, (_189 * _182) * _369));
    float _379 = fma(_366, _196 * NORMAL.z, fma(_370, _203 * TANGENT.z, (_189 * _183) * _369));
    float _383 = inversesqrt(dot(vec3(_373, _376, _379), vec3(_373, _376, _379)));
    float _384 = _383 * _373;
    float _385 = _383 * _376;
    float _386 = _383 * _379;
    float _3256 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _387 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _3267 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _388 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3289 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3300 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _407 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _458 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _448);
    float _459 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _448);
    float _460 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _448);
    float _464 = inversesqrt(dot(vec3(_458, _459, _460), vec3(_458, _459, _460)));
    float _465 = _458 * _464;
    float _466 = _459 * _464;
    float _467 = _460 * _464;
    float _473 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _474 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_386, cbSceneParam._m0[5u].z, fma(_385, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _384));
    float _498 = fma(_386, cbSceneParam._m0[6u].z, fma(_385, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _384));
    float _501 = fma(_386, cbSceneParam._m0[7u].z, fma(_385, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _384));
    uint _514 = uint(roundEven(NORMAL.w)) * 13u;
    uint _515 = _514 + 9u;
    uint _516 = _515 + uint(cbMatDynParam._m0[0u].w);
    float _522 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_516].x;
    float _523 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_516].y;
    float _524 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_516].z;
    float _3311 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    vec4 _536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _473, cbSceneParam._m0[86u].y * _474));
    float _539 = _536.x * TEXCOORD_1.w;
    float _540 = dot(vec3(_384, _385, _386), vec3(_465, _466, _467));
    float _543 = _540 * 2.0;
    float _547 = (_543 * _384) - _465;
    float _548 = (_543 * _385) - _466;
    float _549 = (_543 * _386) - _467;
    float _553 = abs(dot(vec3(_465, _466, _467), vec3(_384, _385, _386)));
    float _3344 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _555 = sqrt(_388);
    float _568 = exp2((_555 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_555 * 3.0));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _910;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = fma(_608, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600));
        float _639 = fma(_608, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600));
        float _643 = fma(_608, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600));
        float _668 = _600 + _384;
        float _669 = _604 + _385;
        float _670 = _608 + _386;
        float _680 = fma(_670, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668)) - _635;
        float _681 = fma(_670, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668)) - _639;
        float _682 = fma(_670, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668)) - _643;
        float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
        float _699 = ((_686 * _680) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_635 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_686 * _681) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_639 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_686 * _682) / cbModelParam._m0[34u].z) + ((((((_643 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_699, _700, _701), 0.0);
        float _738 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_704.x + (-0.5));
        float _740 = _738 * (_704.y + (-0.5));
        float _741 = _738 * (_704.z + (-0.5));
        float _748 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_711.x + (-0.5));
        float _750 = _748 * (_711.y + (-0.5));
        float _751 = _748 * (_711.z + (-0.5));
        float _758 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_718.x + (-0.5));
        float _760 = _758 * (_718.y + (-0.5));
        float _761 = _758 * (_718.z + (-0.5));
        float _768 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_725.x + (-0.5));
        float _770 = _768 * (_725.y + (-0.5));
        float _771 = _768 * (_725.z + (-0.5));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = _739 * 0.5;
        float _776 = _749 * 0.5;
        float _777 = _759 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _792 = (dot(vec3(_384, _385, _386), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _802 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3392 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_804 + 1.0))) + _809) * _772;
        float _819 = _740 * 0.5;
        float _820 = _750 * 0.5;
        float _821 = _760 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_384, _385, _386), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3425 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_846 + 1.0))) + _851) * _773;
        float _861 = _741 * 0.5;
        float _862 = _751 * 0.5;
        float _863 = _761 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_384, _385, _386), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3458 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_888 + 1.0))) + _893) * _774;
        _910 = _741;
        _912 = _740;
        _913 = _739;
        _914 = _751;
        _915 = _750;
        _916 = _749;
        _917 = _761;
        _918 = _760;
        _919 = _759;
        _920 = _774;
        _921 = _773;
        _922 = _772;
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
    }
    else
    {
        _910 = _911;
        _912 = _911;
        _913 = _911;
        _914 = _911;
        _915 = _911;
        _916 = _911;
        _917 = _911;
        _918 = _911;
        _919 = _911;
        _920 = _911;
        _921 = _911;
        _922 = _911;
        _923 = 0.0;
        _924 = 0.0;
        _925 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_608, cbModelParam._m0[30u].z, fma(_604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _600));
        float _955 = fma(_608, cbModelParam._m0[31u].z, fma(_604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _600));
        float _959 = fma(_608, cbModelParam._m0[32u].z, fma(_604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _600));
        float _982 = _600 + _384;
        float _983 = _604 + _385;
        float _984 = _608 + _386;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_384, _385, _386), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3521 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_384, _385, _386), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3554 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_384, _385, _386), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3587 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _911;
        _1221 = _911;
        _1222 = _911;
        _1223 = _911;
        _1224 = _911;
        _1225 = _911;
        _1226 = _911;
        _1227 = _911;
        _1228 = _911;
        _1229 = _911;
        _1230 = _911;
        _1231 = _911;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _547 * 0.5;
    float _1289 = _548 * 0.5;
    float _1290 = _549 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _914, _917, _920));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_912, _915, _918, _921));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_913, _916, _919, _922));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1405 = fma(_608, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600)) + cbModelParam._m0[13u].w;
        float _1409 = fma(_608, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600)) + cbModelParam._m0[14u].w;
        float _1413 = fma(_608, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600)) + cbModelParam._m0[15u].w;
        float _1416 = fma(_549, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547));
        float _1419 = fma(_549, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547));
        float _1422 = fma(_549, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547));
        float _1450;
        if (_1416 > 0.0)
        {
            _1450 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1450 = frontier_phi_14_12_ladder;
        }
        float _1654;
        if (_1419 > 0.0)
        {
            _1654 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1654 = frontier_phi_23_19_ladder;
        }
        float _1897;
        if (_1422 > 0.0)
        {
            _1897 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1897 = frontier_phi_35_30_ladder;
        }
        float _1899 = isnan(_1654) ? _1450 : (isnan(_1450) ? _1654 : min(_1450, _1654));
        float _1900 = isnan(_1897) ? _1899 : (isnan(_1899) ? _1897 : min(_1899, _1897));
        float _1904 = (_1900 * _1416) + _1405;
        float _1905 = (_1900 * _1419) + _1409;
        float _1906 = (_1900 * _1422) + _1413;
        float _1907 = _1900 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1907;
        float _1911 = _1907 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 > _1911) || ((_1905 < _1909) || ((_1904 < _1909) || (_1904 > _1911))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1906, cbModelParam._m0[9u].z, fma(_1905, cbModelParam._m0[9u].y, _1904 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1906, cbModelParam._m0[10u].z, fma(_1905, cbModelParam._m0[10u].y, _1904 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1906, cbModelParam._m0[11u].z, fma(_1905, cbModelParam._m0[11u].y, _1904 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_13_35_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1438 = frontier_phi_13_35_ladder_2;
        _1440 = frontier_phi_13_35_ladder_1;
        _1442 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_547, _548, _549), _1357);
        _1438 = _1426.x * cbModelParam._m0[1u].y;
        _1440 = _1426.y * cbModelParam._m0[1u].y;
        _1442 = _1426.z * cbModelParam._m0[1u].y;
    }
    float _1446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1446 : min(cbModelParam._m0[25u].w, _1446));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_608, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_608, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_608, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_549, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547));
        float _1517 = fma(_549, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547));
        float _1520 = fma(_549, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547));
        float _1659;
        if (_1514 > 0.0)
        {
            _1659 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1659 = frontier_phi_25_21_ladder;
        }
        float _1924;
        if (_1517 > 0.0)
        {
            _1924 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1924 = frontier_phi_37_32_ladder;
        }
        float _2129;
        if (_1520 > 0.0)
        {
            _2129 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2129 = frontier_phi_46_43_ladder;
        }
        float _2131 = isnan(_1924) ? _1659 : (isnan(_1659) ? _1924 : min(_1659, _1924));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1514) + _1503;
        float _2137 = (_2132 * _1517) + _1507;
        float _2138 = (_2132 * _1520) + _1511;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2139;
        float _2142 = _2139 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2138 > _2142) || ((_2138 < _2140) || ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 < _2140) || (_2136 > _2142))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2138, cbModelParam._m0[17u].z, fma(_2137, cbModelParam._m0[17u].y, _2136 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2138, cbModelParam._m0[18u].z, fma(_2137, cbModelParam._m0[18u].y, _2136 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2138, cbModelParam._m0[19u].z, fma(_2137, cbModelParam._m0[19u].y, _2136 * cbModelParam._m0[19u].x))), _1447);
            frontier_phi_22_46_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_22_46_ladder_2;
        _1541 = frontier_phi_22_46_ladder_1;
        _1543 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_547, _548, _549), _1447);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1555 = ((((1.0 - _568) * ((_555 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_568 * _555)) * _539;
    float _1556 = _1555 * ((cbModelParam._m0[1u].w * (_1539 - _1438)) + _1438);
    float _1557 = _1555 * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1558 = _1555 * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    uvec4 _1577 = floatBitsToUint(cbInstanceData._m0[_514 + 5u]);
    uint _1579 = _1577.x * 14u;
    uint _1580 = _1579 + 13u;
    float _1587 = _539 + (-1.0);
    float _1592 = (cbLight._m0[_1580].x * _1587) + 1.0;
    float _1593 = (cbLight._m0[_1580].y * _1587) + 1.0;
    float _1594 = (cbLight._m0[_1580].z * _1587) + 1.0;
    float _1595 = (cbLight._m0[_1580].w * _1587) + 1.0;
    uint _1596 = _1579 + 5u;
    float _1602 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1606 = _1579 + 4u;
    float _1613 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
    uint _1617 = _1579 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_384, _385, _386));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_384, _385, _386));
    float _3723 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3734 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1596].x * _1602) * _1638) + ((cbLight._m0[_1606].x * _1613) * _1636);
    float _1646 = ((_1602 * cbLight._m0[_1596].y) * _1638) + ((_1613 * cbLight._m0[_1606].y) * _1636);
    float _1647 = ((_1602 * cbLight._m0[_1596].z) * _1638) + ((_1613 * cbLight._m0[_1606].z) * _1636);
    uvec4 _1651 = floatBitsToUint(cbLight._m0[_1579 + 12u]);
    bool _1653 = _1651.x == 0u;
    float _1664;
    float _1666;
    float _1668;
    if (_1653)
    {
        _1664 = _1645;
        _1666 = _1646;
        _1668 = _1647;
    }
    else
    {
        uint _1672 = _1579 + 6u;
        float _1688 = (dot(vec3(cbLight._m0[_1579 + 2u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1689 = _1688 * _1688;
        float _3745 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1691 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1664 = (((cbLight._m0[_1672].x * 0.3183098733425140380859375) * _1690) * _1691) + _1645;
        _1666 = (((cbLight._m0[_1672].y * 0.3183098733425140380859375) * _1690) * _1691) + _1646;
        _1668 = (((cbLight._m0[_1672].z * 0.3183098733425140380859375) * _1690) * _1691) + _1647;
    }
    bool _1671 = _1651.y == 0u;
    float _1709;
    float _1711;
    float _1713;
    if (_1671)
    {
        _1709 = _1664;
        _1711 = _1666;
        _1713 = _1668;
    }
    else
    {
        uint _1868 = _1579 + 7u;
        float _1884 = (dot(vec3(cbLight._m0[_1579 + 3u].xyz), vec3(_384, _385, _386)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3761 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1887 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1709 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1664;
        _1711 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1666;
        _1713 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1668;
    }
    uint _1716 = _1579 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _388) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1579].x + _465;
    float _1732 = cbLight._m0[_1579].y + _466;
    float _1733 = cbLight._m0[_1579].z + _467;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1579].xyz));
    float _3777 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _1745 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1746 = dot(vec3(_384, _385, _386), vec3(_1738, _1739, _1740));
    float _3799 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1738, _1739, _1740));
    float _3810 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1769 = (exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1770 = 1.0 - _1730;
    float _1781 = (0.5 / (((_1745 * ((_1744 * _1770) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1770) + _1730) * _1744))) * _1744;
    float _3821 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1794 = _1579 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _388) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1617].x + _465;
    float _1808 = cbLight._m0[_1617].y + _466;
    float _1809 = cbLight._m0[_1617].z + _467;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1617].xyz));
    float _3832 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1821 = dot(vec3(_384, _385, _386), vec3(_1814, _1815, _1816));
    float _3843 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1814, _1815, _1816));
    float _3854 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1843 = 1.0 - _1806;
    float _1853 = (0.5 / (((_1745 * ((_1820 * _1843) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1843) + _1806) * _1820))) * _1820;
    float _3865 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1865 = (((_1842 * cbLight._m0[_1794].x) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].x) * _1783) * _1613);
    float _1866 = (((_1842 * cbLight._m0[_1794].y) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].y) * _1783) * _1613);
    float _1867 = (((_1842 * cbLight._m0[_1794].z) * _1855) * _1602) + (((_1769 * cbLight._m0[_1716].z) * _1783) * _1613);
    float _1929;
    float _1931;
    float _1933;
    if (_1653)
    {
        _1929 = _1865;
        _1931 = _1866;
        _1933 = _1867;
    }
    else
    {
        uint _1935 = _1579 + 2u;
        uint _1939 = _1579 + 10u;
        float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _388) * 0.949999988079071044921875);
        float _1954 = _1953 * _1953;
        float _1955 = cbLight._m0[_1935].x + _465;
        float _1956 = cbLight._m0[_1935].y + _466;
        float _1957 = cbLight._m0[_1935].z + _467;
        float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
        float _1962 = _1961 * _1955;
        float _1963 = _1961 * _1956;
        float _1964 = _1961 * _1957;
        float _1965 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_1935].xyz));
        float _3876 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1969 = dot(vec3(_384, _385, _386), vec3(_1962, _1963, _1964));
        float _3887 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1973 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_1962, _1963, _1964));
        float _3898 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1977 = _1954 * _1954;
        float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
        float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1991 = 1.0 - _1954;
        float _2001 = (0.5 / (((_1745 * ((_1968 * _1991) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1991) + _1954) * _1968))) * _1968;
        float _3909 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
        _1929 = (((_1990 * cbLight._m0[_1939].x) * _2003) * _2004) + _1865;
        _1931 = (((_1990 * cbLight._m0[_1939].y) * _2003) * _2004) + _1866;
        _1933 = (((_1990 * cbLight._m0[_1939].z) * _2003) * _2004) + _1867;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1671)
    {
        _2039 = _1929;
        _2041 = _1931;
        _2043 = _1933;
    }
    else
    {
        uint _2050 = _1579 + 3u;
        uint _2054 = _1579 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _388) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _465;
        float _2071 = cbLight._m0[_2050].y + _466;
        float _2072 = cbLight._m0[_2050].z + _467;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_384, _385, _386), vec3(cbLight._m0[_2050].xyz));
        float _3925 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2084 = dot(vec3(_384, _385, _386), vec3(_2077, _2078, _2079));
        float _3936 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _3947 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2106 = 1.0 - _2069;
        float _2116 = (0.5 / (((_1745 * ((_2083 * _2106) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _2106) + _2069) * _2083))) * _2083;
        float _3958 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _2039 = (((_2105 * cbLight._m0[_2054].x) * _2118) * _2119) + _1929;
        _2041 = (((_2105 * cbLight._m0[_2054].y) * _2118) * _2119) + _1931;
        _2043 = (((_2105 * cbLight._m0[_2054].z) * _2118) * _2119) + _1933;
    }
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_1577.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _474) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _473) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            uint _2514 = 0u;
            uint _2523;
            bool _2524;
            for (;;)
            {
                _2523 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                _2524 = _2523 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2524)
                {
                    frontier_phi_61_pred = _2508;
                    frontier_phi_61_pred_1 = _2513;
                    frontier_phi_61_pred_2 = _2512;
                    frontier_phi_61_pred_3 = _2511;
                    frontier_phi_61_pred_4 = _2510;
                    frontier_phi_61_pred_5 = _2509;
                }
                else
                {
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    uint _2638;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2523;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    for (;;)
                    {
                        uint _2642 = uint(findLSB(_2638)) + (_2514 << 5u);
                        uint _2639 = (_2638 + 4294967295u) & _2638;
                        uint _2644 = _2642 * 48u;
                        vec4 _2658 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2664 = (_2642 * 48u) + 4u;
                        vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 3u)).x));
                        uint _2683 = (_2642 * 48u) + 8u;
                        vec3 _2694 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x));
                        float _2698 = _2658.x - _2195;
                        float _2699 = _2658.y - _2196;
                        float _2700 = _2658.z - _2197;
                        float _2701 = dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700));
                        float _2704 = inversesqrt(_2701);
                        float _2705 = _2704 * _2698;
                        float _2706 = _2704 * _2699;
                        float _2707 = _2704 * _2700;
                        float _2708 = dot(vec3(_495, _498, _501), vec3(_2705, _2706, _2707));
                        float _2713 = 1.0 - (_2701 * _2658.w);
                        float _3984 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2715 = sqrt(_2701) * _2677.w;
                        float _2718 = 1.39999997615814208984375 / (_2715 + 1.39999997615814208984375);
                        float _2719 = _2718 * _2718;
                        float _2722 = ((1.0 - _2719) * _2708) + _2719;
                        float _2725 = _2715 * _2715;
                        float _2729 = ((isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))) * _2714) / ((_2725 * 0.699999988079071044921875) + 1.0);
                        float _2733 = (-0.0) - _2195;
                        float _2734 = (-0.0) - _2196;
                        float _2735 = (-0.0) - _2197;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2750 = exp2(log2(1.0 / ((_2725 * 3.5) + 5.0)) * 0.25);
                        float _2751 = 1.0 - _555;
                        float _2758 = sqrt(1.0 - ((1.0 - (_2751 * _2751)) * (1.0 - (_2750 * _2750))));
                        float _2759 = _2758 * _2758;
                        float _2760 = _2759 * _2759;
                        float _2761 = _2740 + _2705;
                        float _2762 = _2741 + _2706;
                        float _2763 = _2742 + _2707;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2771 = dot(vec3(_495, _498, _501), vec3(_2740, _2741, _2742));
                        float _4000 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2775 = dot(vec3(_495, _498, _501), vec3(_2767 * _2761, _2767 * _2762, _2767 * _2763));
                        float _4011 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2782 = ((_2778 * _2778) * (_2760 + (-1.0))) + 1.0;
                        float _2783 = _2718 * _2759;
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2708) + _2784;
                        float _4022 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2789 = 1.0 - _2759;
                        float _2799 = (0.5 / (((_2788 * ((_2774 * _2789) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _2789) + _2759) * _2774))) * _2788;
                        float _4033 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2810 = (((_2760 * 3.1415927410125732421875) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) / ((_2782 * _2782) * ((_2725 * 2.1991131305694580078125) + 3.141590118408203125))) * _2714;
                        _2567 = (_2729 * _2677.x) + _2635;
                        _2568 = (_2729 * _2677.y) + _2636;
                        _2569 = (_2729 * _2677.z) + _2637;
                        _2564 = (_2810 * _2694.x) + _2632;
                        _2565 = (_2810 * _2694.y) + _2633;
                        _2566 = (_2810 * _2694.z) + _2634;
                        if (_2639 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2639;
                        }
                    }
                    frontier_phi_61_pred = _2564;
                    frontier_phi_61_pred_1 = _2569;
                    frontier_phi_61_pred_2 = _2568;
                    frontier_phi_61_pred_3 = _2567;
                    frontier_phi_61_pred_4 = _2566;
                    frontier_phi_61_pred_5 = _2565;
                }
                _2364 = frontier_phi_61_pred;
                _2374 = frontier_phi_61_pred_1;
                _2372 = frontier_phi_61_pred_2;
                _2370 = frontier_phi_61_pred_3;
                _2368 = frontier_phi_61_pred_4;
                _2366 = frontier_phi_61_pred_5;
                uint _2515 = _2514 + 1u;
                if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2508 = _2364;
                    _2509 = _2366;
                    _2510 = _2368;
                    _2511 = _2370;
                    _2512 = _2372;
                    _2513 = _2374;
                    _2514 = _2515;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((4294967295u << _2380) & _2241) == 0u)
        {
            _2476 = _2363;
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
            _2484 = _2371;
            _2486 = _2373;
        }
        else
        {
            float _2501 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2502 = _2501 * _2195;
            float _2503 = _2501 * _2196;
            float _2504 = _2501 * _2197;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2615 = _2363;
                float _2616 = _2365;
                float _2617 = _2367;
                float _2618 = _2369;
                float _2619 = _2371;
                float _2620 = _2373;
                uint _2621 = _2380;
                uint _2630;
                bool _2631;
                for (;;)
                {
                    _2630 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                    _2631 = _2630 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2631)
                    {
                        frontier_phi_67_pred = _2618;
                        frontier_phi_67_pred_1 = _2619;
                        frontier_phi_67_pred_2 = _2620;
                        frontier_phi_67_pred_3 = _2617;
                        frontier_phi_67_pred_4 = _2616;
                        frontier_phi_67_pred_5 = _2615;
                    }
                    else
                    {
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        uint _2834 = _2630;
                        uint _2835;
                        vec4 _2860;
                        float _2861;
                        vec4 _2876;
                        vec3 _2888;
                        vec4 _2904;
                        vec4 _2920;
                        float _2967;
                        bool _2968;
                        for (;;)
                        {
                            uint _2845 = ((_2621 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2834));
                            _2835 = (_2834 + 4294967295u) & _2834;
                            uint _2847 = _2845 * 40u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            _2861 = _2860.w;
                            uint _2863 = (_2845 * 40u) + 4u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2845 * 40u) + 8u;
                            _2888 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x));
                            uint _2891 = (_2845 * 40u) + 16u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2907 = (_2845 * 40u) + 20u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2845 * 40u) + 24u;
                            vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2942 = (_2845 * 40u) + 28u;
                            vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2967 = fma(_2197, _2955.z, fma(_2196, _2955.y, _2955.x * _2195)) + _2955.w;
                            _2968 = !((fma(_2197, _2936.z, fma(_2196, _2936.y, _2936.x * _2195)) + _2936.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2968)
                            {
                                float _2995 = _2860.x - _2195;
                                float _2996 = _2860.y - _2196;
                                float _2997 = _2860.z - _2197;
                                float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                                float _3001 = inversesqrt(_2998);
                                float _3002 = _3001 * _2995;
                                float _3003 = _3001 * _2996;
                                float _3004 = _3001 * _2997;
                                float _3008 = 1.0 - (_2998 / (_2861 * _2861));
                                float _4044 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3009 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3013 = sqrt(_2998) * _2876.w;
                                float _3015 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                                float _3016 = _3015 * _3015;
                                float _3019 = ((1.0 - _3016) * dot(vec3(_3002, _3003, _3004), vec3(_495, _498, _501))) + _3016;
                                float _3022 = _3013 * _3013;
                                float _3026 = (fma(_2197, _2904.z, fma(_2196, _2904.y, _2904.x * _2195)) + _2904.w) / _2967;
                                float _3027 = (fma(_2197, _2920.z, fma(_2196, _2920.y, _2920.x * _2195)) + _2920.w) / _2967;
                                float _3031 = 1.0 - dot(vec2(_3026, _3027), vec2(_3026, _3027));
                                float _4060 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3033 = _3032 * (((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3009) / ((_3022 * 0.699999988079071044921875) + 1.0));
                                float _3045 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                                float _3046 = 1.0 - _555;
                                float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                                float _3054 = _3053 * _3053;
                                float _3055 = _3054 * _3054;
                                float _3056 = _3002 - _2502;
                                float _3057 = _3003 - _2503;
                                float _3058 = _3004 - _2504;
                                float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                                float _3066 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2502, (-0.0) - _2503, (-0.0) - _2504));
                                float _4071 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3070 = dot(vec3(_495, _498, _501), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                                float _4082 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                                float _3078 = _3015 * _3054;
                                float _3079 = _3078 * _3078;
                                float _3085 = ((1.0 - _3079) * dot(vec3(_495, _498, _501), vec3(_3002, _3003, _3004))) + _3079;
                                float _4093 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3087 = 1.0 - _3054;
                                float _3097 = (0.5 / (((_3086 * ((_3069 * _3087) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3054) * _3069))) * _3086;
                                float _4104 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3107 = (_3032 * _3009) * (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_3077 * _3077) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3107 * _2888.x;
                                frontier_phi_73_pred_1 = _3107 * _2888.y;
                                frontier_phi_73_pred_2 = _3033 * _2876.z;
                                frontier_phi_73_pred_3 = _3033 * _2876.y;
                                frontier_phi_73_pred_4 = _3033 * _2876.x;
                                frontier_phi_73_pred_5 = _3107 * _2888.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_73_pred;
                            _3112 = frontier_phi_73_pred_1;
                            _3116 = frontier_phi_73_pred_2;
                            _3115 = frontier_phi_73_pred_3;
                            _3114 = frontier_phi_73_pred_4;
                            _3113 = frontier_phi_73_pred_5;
                            _2818 = _3114 + _2831;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            if (_2835 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2835;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2818;
                        frontier_phi_67_pred_1 = _2819;
                        frontier_phi_67_pred_2 = _2820;
                        frontier_phi_67_pred_3 = _2817;
                        frontier_phi_67_pred_4 = _2816;
                        frontier_phi_67_pred_5 = _2815;
                    }
                    _2483 = frontier_phi_67_pred;
                    _2485 = frontier_phi_67_pred_1;
                    _2487 = frontier_phi_67_pred_2;
                    _2481 = frontier_phi_67_pred_3;
                    _2479 = frontier_phi_67_pred_4;
                    _2477 = frontier_phi_67_pred_5;
                    uint _2622 = _2621 + 1u;
                    if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2615 = _2477;
                        _2616 = _2479;
                        _2617 = _2481;
                        _2618 = _2483;
                        _2619 = _2485;
                        _2620 = _2487;
                        _2621 = _2622;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2485;
                frontier_phi_55_56_ladder_1 = _2487;
                frontier_phi_55_56_ladder_2 = _2483;
                frontier_phi_55_56_ladder_3 = _2481;
                frontier_phi_55_56_ladder_4 = _2479;
                frontier_phi_55_56_ladder_5 = _2477;
            }
            else
            {
                frontier_phi_55_56_ladder = _2371;
                frontier_phi_55_56_ladder_1 = _2373;
                frontier_phi_55_56_ladder_2 = _2369;
                frontier_phi_55_56_ladder_3 = _2367;
                frontier_phi_55_56_ladder_4 = _2365;
                frontier_phi_55_56_ladder_5 = _2363;
            }
            _2476 = frontier_phi_55_56_ladder_5;
            _2478 = frontier_phi_55_56_ladder_4;
            _2480 = frontier_phi_55_56_ladder_3;
            _2482 = frontier_phi_55_56_ladder_2;
            _2484 = frontier_phi_55_56_ladder;
            _2486 = frontier_phi_55_56_ladder_1;
        }
        float _2491 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
        _2254 = (_2491 * _2482) + _1709;
        _2256 = (_2491 * _2484) + _1711;
        _2258 = (_2491 * _2486) + _1713;
        _2260 = ((_2476 * 0.039999999105930328369140625) * _2491) + _2039;
        _2262 = ((_2478 * 0.039999999105930328369140625) * _2491) + _2041;
        _2264 = ((_2480 * 0.039999999105930328369140625) * _2491) + _2043;
    }
    else
    {
        _2254 = _1709;
        _2256 = _1711;
        _2258 = _1713;
        _2260 = _2039;
        _2262 = _2041;
        _2264 = _2043;
    }
    uint _2270 = _515 + uint(cbMatDynParam._m0[0u].w);
    float _4120 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4131 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4142 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4153 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _2296 = (((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2254 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _539))) + ((_2260 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2270].x * cbMtdParam._m0[10u].x);
    float _2298 = ((cbInstanceData._m0[_2270].y * cbMtdParam._m0[10u].y) + ((_2262 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2256 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _539)));
    float _2300 = ((cbInstanceData._m0[_2270].z * cbMtdParam._m0[10u].z) + ((_2264 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2258 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _539)));
    float _2308 = cbInstanceData._m0[_514 + 6u].w * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)));
    float _2313 = _473 / cbSceneParam._m0[86u].x;
    float _2314 = _474 / cbSceneParam._m0[86u].y;
    vec4 _2328 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, (log2((isnan(cbSceneParam._m0[77u].w) ? _407 : (isnan(_407) ? cbSceneParam._m0[77u].w : min(_407, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2330 = _2328.x;
    float _2331 = _2328.y;
    float _2332 = _2328.z;
    float _2333 = _2328.w;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_407 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_407) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _407 : min(cbSceneParam._m0[80u].w, _407));
        float _2389 = _2388 / _407;
        float _2400 = _2389 * _458;
        float _2401 = _459 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2404 = _2389 * _460;
        float _2406 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2401;
        float _2414 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2414;
        float _2422 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2424 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2577;
        if (abs((_2402 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2577 = ((((_2407 > 0.0) ? exp2(_2422 * _2407) : (2.0 - exp2(_2424 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2537 = 1.0 / cbSceneParam._m0[80u].x;
            float _2538 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2539 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2548 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : min(_2538, 0.0));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            _2577 = ((abs(_2414 / _2402) * cbSceneParam._m0[80u].y) * ((((_2548 - _2549) * 2.0) - ((exp2(_2422 * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)))) - exp2(_2422 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0))))) * _2537)) - ((exp2(_2424 * _2548) - exp2(_2424 * _2549)) * _2537))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2579 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2313, _2314, 1.0), 0.0);
        float _2588 = exp2((_2577 * (-1.44269502162933349609375)) * (1.0 - _2579.w));
        float _2589 = log2(_2588);
        float _2605 = log2(_2333);
        _2426 = (exp2(_2605 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].x)) * _2579.x) / cbSceneParam._m0[78u].x)) + _2330;
        _2428 = (exp2(_2605 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].y)) * _2579.y) / cbSceneParam._m0[78u].y)) + _2331;
        _2430 = (exp2(_2605 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2589 * cbSceneParam._m0[78u].z)) * _2579.z) / cbSceneParam._m0[78u].z)) + _2332;
        _2432 = _2588 * _2333;
    }
    else
    {
        _2426 = _2330;
        _2428 = _2331;
        _2430 = _2332;
        _2432 = _2333;
    }
    float _2444 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2445 = _2444 == 3.0;
    float _2446 = log2(_2432);
    float _2453 = exp2(_2446 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)));
    float _2454 = exp2(_2446 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2455 = exp2(_2446 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2464 = (_2444 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2464 * (_2445 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.y = _2464 * (_2445 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.z = _2464 * (_2445 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.w = _2308;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2308;
}


