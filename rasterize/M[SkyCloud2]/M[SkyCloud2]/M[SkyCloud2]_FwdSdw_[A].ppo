#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _960;
float _3631;
float _3632;
float _3633;
float _3634;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _231 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _246 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_224 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _231) + cbTextureTilingScale._m0[0u].w));
    float _249 = _246.y;
    float _250 = _249 * (-0.20000000298023223876953125);
    vec4 _264 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _264.z;
    float _277 = ((_231 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _281 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_224 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _277)).x * 0.0500000007450580596923828125;
    float _294 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_224 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _277)).x * 0.100000001490116119384765625;
    float _298 = (((_266 + _250) + _281) + _294) * TEXCOORD_1.z;
    vec4 _316 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _329 = ((_298 * cbMtdParam._m0[11u].x) * _316.x) * cbMtdParam._m0[9u].x;
    float _332 = ((_298 * cbMtdParam._m0[11u].y) * _316.y) * cbMtdParam._m0[9u].y;
    float _336 = ((((((_266 - (_249 * 0.20000000298023223876953125)) + _281) + _294) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _316.z) * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_250 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_250 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _365 = (_358.x * 2.0) + (-1.0);
    float _367 = (_358.y * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3643 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _374 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    float _377 = (_365 * cbMtdParam._m0[12u].z) + _365;
    float _378 = (_367 * cbMtdParam._m0[12u].z) + _367;
    float _381 = fma(_374, _204 * NORMAL.x, fma(_378, _211 * TANGENT.x, (_197 * _189) * _377));
    float _384 = fma(_374, _204 * NORMAL.y, fma(_378, _211 * TANGENT.y, (_197 * _190) * _377));
    float _387 = fma(_374, _204 * NORMAL.z, fma(_378, _211 * TANGENT.z, (_197 * _191) * _377));
    float _391 = inversesqrt(dot(vec3(_381, _384, _387), vec3(_381, _384, _387)));
    float _392 = _391 * _381;
    float _393 = _391 * _384;
    float _394 = _391 * _387;
    float _3654 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _395 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _396 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3687 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3698 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    vec4 _480 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _482 = _480.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _639 = sqrt(((_466 * _466) + (_467 * _467)) + (_468 * _468));
        float _645 = (cbMatDynParam._m0[5u].x * _639) + cbMatDynParam._m0[5u].y;
        float _3709 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _650 = (cbMatDynParam._m0[5u].z * _639) + cbMatDynParam._m0[5u].w;
        float _3720 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) - _646)) + _646) < ((_482 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _494 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _495 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _515 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _518 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _521 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _534 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = _534 + 9u;
    uint _536 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _542 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_536].x;
    float _543 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_536].y;
    float _544 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_536].z;
    float _3731 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _494, cbSceneParam._m0[86u].y * _495));
    float _559 = _556.x * TEXCOORD_1.w;
    float _560 = dot(vec3(_392, _393, _394), vec3(_473, _474, _475));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _392) - _473;
    float _568 = (_563 * _393) - _474;
    float _569 = (_563 * _394) - _475;
    float _573 = abs(dot(vec3(_473, _474, _475), vec3(_392, _393, _394)));
    float _3764 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _575 = sqrt(_396);
    float _588 = exp2((_575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_575 * 3.0));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _959;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620));
        float _688 = fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620));
        float _692 = fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620));
        float _717 = _620 + _392;
        float _718 = _624 + _393;
        float _719 = _628 + _394;
        float _729 = fma(_719, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717)) - _684;
        float _730 = fma(_719, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717)) - _688;
        float _731 = fma(_719, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717)) - _692;
        float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
        float _748 = ((_735 * _729) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_684 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_735 * _730) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_688 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_735 * _731) / cbModelParam._m0[34u].z) + ((((((_692 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        float _787 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_753.x + (-0.5));
        float _789 = _787 * (_753.y + (-0.5));
        float _790 = _787 * (_753.z + (-0.5));
        float _797 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_760.x + (-0.5));
        float _799 = _797 * (_760.y + (-0.5));
        float _800 = _797 * (_760.z + (-0.5));
        float _807 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_767.x + (-0.5));
        float _809 = _807 * (_767.y + (-0.5));
        float _810 = _807 * (_767.z + (-0.5));
        float _817 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_774.x + (-0.5));
        float _819 = _817 * (_774.y + (-0.5));
        float _820 = _817 * (_774.z + (-0.5));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = _788 * 0.5;
        float _825 = _798 * 0.5;
        float _826 = _808 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _841 = (dot(vec3(_392, _393, _394), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _851 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3812 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_853 + 1.0))) + _858) * _821;
        float _868 = _789 * 0.5;
        float _869 = _799 * 0.5;
        float _870 = _809 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_392, _393, _394), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3845 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_895 + 1.0))) + _900) * _822;
        float _910 = _790 * 0.5;
        float _911 = _800 * 0.5;
        float _912 = _810 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_392, _393, _394), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3878 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_937 + 1.0))) + _942) * _823;
        _959 = _790;
        _961 = _789;
        _962 = _788;
        _963 = _800;
        _964 = _799;
        _965 = _798;
        _966 = _810;
        _967 = _809;
        _968 = _808;
        _969 = _823;
        _970 = _822;
        _971 = _821;
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
    }
    else
    {
        _959 = _960;
        _961 = _960;
        _962 = _960;
        _963 = _960;
        _964 = _960;
        _965 = _960;
        _966 = _960;
        _967 = _960;
        _968 = _960;
        _969 = _960;
        _970 = _960;
        _971 = _960;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
    }
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1003 = fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620));
        float _1007 = fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620));
        float _1011 = fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620));
        float _1034 = _620 + _392;
        float _1035 = _624 + _393;
        float _1036 = _628 + _394;
        float _1046 = fma(_1036, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034)) - _1003;
        float _1047 = fma(_1036, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034)) - _1007;
        float _1048 = fma(_1036, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034)) - _1011;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1003 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1007 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[35u].z) + ((((((_1011 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1102 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1069.x + (-0.5));
        float _1104 = _1102 * (_1069.y + (-0.5));
        float _1105 = _1102 * (_1069.z + (-0.5));
        float _1112 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1076.x + (-0.5));
        float _1114 = _1112 * (_1076.y + (-0.5));
        float _1115 = _1112 * (_1076.z + (-0.5));
        float _1122 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1083.x + (-0.5));
        float _1124 = _1122 * (_1083.y + (-0.5));
        float _1125 = _1122 * (_1083.z + (-0.5));
        float _1132 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1090.x + (-0.5));
        float _1134 = _1132 * (_1090.y + (-0.5));
        float _1135 = _1132 * (_1090.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_392, _393, _394), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3941 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1166 + 1.0))) + _1171) * _1136;
        float _1181 = _1104 * 0.5;
        float _1182 = _1114 * 0.5;
        float _1183 = _1124 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_392, _393, _394), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3974 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1208 + 1.0))) + _1213) * _1137;
        float _1223 = _1105 * 0.5;
        float _1224 = _1115 * 0.5;
        float _1225 = _1125 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_392, _393, _394), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4007 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1250 + 1.0))) + _1255) * _1138;
        _1272 = _1105;
        _1273 = _1104;
        _1274 = _1103;
        _1275 = _1115;
        _1276 = _1114;
        _1277 = _1113;
        _1278 = _1125;
        _1279 = _1124;
        _1280 = _1123;
        _1281 = _1138;
        _1282 = _1137;
        _1283 = _1136;
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _960;
        _1273 = _960;
        _1274 = _960;
        _1275 = _960;
        _1276 = _960;
        _1277 = _960;
        _1278 = _960;
        _1279 = _960;
        _1280 = _960;
        _1281 = _960;
        _1282 = _960;
        _1283 = _960;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _973)) + _973;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _974)) + _974;
    float _1319 = fma(_1298, cbSceneParam._m0[89u].z, fma(_1297, cbSceneParam._m0[89u].y, _1296 * cbSceneParam._m0[89u].x));
    float _1322 = fma(_1298, cbSceneParam._m0[90u].z, fma(_1297, cbSceneParam._m0[90u].y, _1296 * cbSceneParam._m0[90u].x));
    float _1325 = fma(_1298, cbSceneParam._m0[91u].z, fma(_1297, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1296));
    float _1340 = _567 * 0.5;
    float _1341 = _568 * 0.5;
    float _1342 = _569 * 0.5;
    float _1343 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1346 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1349 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1383;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1356 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_959, _963, _966, _969));
        float _1360 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_961, _964, _967, _970));
        float _1364 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_962, _965, _968, _971));
        float _1371 = dot(vec4(cbModelParam._m0[39u]), vec4(_1340, _1341, _1342, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1394;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1385 = dot(vec4(cbModelParam._m0[40u]), vec4(_1340, _1341, _1342, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1398 = (_1394 * cbModelParam._m0[1u].x) + (_1383 * (1.0 - cbModelParam._m0[1u].x));
    float _1408 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1408 : min(cbModelParam._m0[25u].z, _1408));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1457 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1461 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1465 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1468 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1471 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1474 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1502;
        if (_1468 > 0.0)
        {
            _1502 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1502 = frontier_phi_17_15_ladder;
        }
        float _1674;
        if (_1471 > 0.0)
        {
            _1674 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1674 = frontier_phi_26_22_ladder;
        }
        float _1970;
        if (_1474 > 0.0)
        {
            _1970 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1970 = frontier_phi_38_33_ladder;
        }
        float _1972 = isnan(_1674) ? _1502 : (isnan(_1502) ? _1674 : min(_1502, _1674));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1468) + _1457;
        float _1978 = (_1973 * _1471) + _1461;
        float _1979 = (_1973 * _1474) + _1465;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1980;
        float _1984 = _1980 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 > _1984) || ((_1978 < _1982) || ((_1977 < _1982) || (_1977 > _1984))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1979, cbModelParam._m0[9u].z, fma(_1978, cbModelParam._m0[9u].y, _1977 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1979, cbModelParam._m0[10u].z, fma(_1978, cbModelParam._m0[10u].y, _1977 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1979, cbModelParam._m0[11u].z, fma(_1978, cbModelParam._m0[11u].y, _1977 * cbModelParam._m0[11u].x))), _1409);
            frontier_phi_16_38_ladder = _2124.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2124.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2124.x * cbModelParam._m0[1u].y;
        }
        _1490 = frontier_phi_16_38_ladder_2;
        _1492 = frontier_phi_16_38_ladder_1;
        _1494 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1409);
        _1490 = _1478.x * cbModelParam._m0[1u].y;
        _1492 = _1478.y * cbModelParam._m0[1u].y;
        _1494 = _1478.z * cbModelParam._m0[1u].y;
    }
    float _1498 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1498 : min(cbModelParam._m0[25u].w, _1498));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1555 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1559 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1563 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1566 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1569 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1572 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1679;
        if (_1566 > 0.0)
        {
            _1679 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1679 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1569 > 0.0)
        {
            _1997 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _2324;
        if (_1572 > 0.0)
        {
            _2324 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2324 = frontier_phi_50_47_ladder;
        }
        float _2326 = isnan(_1997) ? _1679 : (isnan(_1679) ? _1997 : min(_1679, _1997));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1566) + _1555;
        float _2332 = (_2327 * _1569) + _1559;
        float _2333 = (_2327 * _1572) + _1563;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1499);
            frontier_phi_25_50_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1591 = frontier_phi_25_50_ladder_2;
        _1593 = frontier_phi_25_50_ladder_1;
        _1595 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1499);
        _1591 = _1575.x * cbModelParam._m0[1u].z;
        _1593 = _1575.y * cbModelParam._m0[1u].z;
        _1595 = _1575.z * cbModelParam._m0[1u].z;
    }
    float _1607 = ((((1.0 - _588) * ((_575 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_588 * _575)) * _559;
    float _1608 = _1607 * ((cbModelParam._m0[1u].w * (_1591 - _1490)) + _1490);
    float _1609 = _1607 * ((cbModelParam._m0[1u].w * (_1593 - _1492)) + _1492);
    float _1610 = _1607 * ((cbModelParam._m0[1u].w * (_1595 - _1494)) + _1494);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, _1608 * cbSceneParam._m0[91u].x));
    float _1653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1657 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1665 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1666 = _1653 / _1665;
    float _1667 = _1657 / _1665;
    float _1668 = _1661 / _1665;
    float _1815;
    float _1816;
    float _1817;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1695 = ((uint(_1668 > cbSceneParam._m0[59u].y) + uint(_1668 > cbSceneParam._m0[59u].x)) + uint(_1668 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1696 = _1695 + 43u;
        uint _1704 = _1695 + 44u;
        uint _1712 = _1695 + 45u;
        uint _1720 = _1695 + 46u;
        float _1731 = fma(_1665, cbSceneParam._m0[_1696].w, fma(_1661, cbSceneParam._m0[_1696].z, fma(_1657, cbSceneParam._m0[_1696].y, _1653 * cbSceneParam._m0[_1696].x)));
        float _1735 = fma(_1665, cbSceneParam._m0[_1704].w, fma(_1661, cbSceneParam._m0[_1704].z, fma(_1657, cbSceneParam._m0[_1704].y, _1653 * cbSceneParam._m0[_1704].x)));
        float _1743 = fma(_1665, cbSceneParam._m0[_1720].w, fma(_1661, cbSceneParam._m0[_1720].z, fma(_1657, cbSceneParam._m0[_1720].y, _1653 * cbSceneParam._m0[_1720].x)));
        float _1748 = cbSceneParam._m0[33u].z * _1743;
        float _1750 = cbSceneParam._m0[33u].w * _1743;
        float _1753 = fma(_1665, cbSceneParam._m0[_1712].w, fma(_1661, cbSceneParam._m0[_1712].z, fma(_1657, cbSceneParam._m0[_1712].y, _1653 * cbSceneParam._m0[_1712].x))) / _1743;
        float _1801 = (cbSceneParam._m0[33u].x - sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668))) * cbSceneParam._m0[33u].y;
        float _4133 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1808 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1748 + _1731) / _1743, (_1750 + _1735) / _1743), _1753), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1750 + _1731) / _1743, (_1735 - _1748) / _1743), _1753), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 - _1748) / _1743, (_1735 - _1750) / _1743), _1753), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1731 - _1750) / _1743, (_1748 + _1735) / _1743), _1753), 0.0)).x), vec4(0.25)));
        _1815 = 1.0 - (_1808 * cbSceneParam._m0[34u].x);
        _1816 = 1.0 - (_1808 * cbSceneParam._m0[34u].y);
        _1817 = 1.0 - (_1808 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1815 = 1.0;
        _1816 = 1.0;
        _1817 = 1.0;
    }
    float _1881;
    float _1883;
    float _1885;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1869 = fma(_1665, cbSceneParam._m0[63u].w, fma(_1661, cbSceneParam._m0[63u].z, fma(_1657, cbSceneParam._m0[63u].y, _1653 * cbSceneParam._m0[63u].x)));
        float _1870 = fma(_1665, cbSceneParam._m0[60u].w, fma(_1661, cbSceneParam._m0[60u].z, fma(_1657, cbSceneParam._m0[60u].y, _1653 * cbSceneParam._m0[60u].x))) / _1869;
        float _1871 = fma(_1665, cbSceneParam._m0[61u].w, fma(_1661, cbSceneParam._m0[61u].z, fma(_1657, cbSceneParam._m0[61u].y, _1653 * cbSceneParam._m0[61u].x))) / _1869;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1870 >= cbSceneParam._m0[64u].x) && (_1871 >= cbSceneParam._m0[64u].y)) && (_1870 <= cbSceneParam._m0[64u].z)) && (_1871 <= cbSceneParam._m0[64u].w))
        {
            float _2010 = fma(_1665, cbSceneParam._m0[62u].w, fma(_1661, cbSceneParam._m0[62u].z, fma(_1657, cbSceneParam._m0[62u].y, _1653 * cbSceneParam._m0[62u].x))) / _1869;
            float _2014 = isnan(cbSceneParam._m0[41u].w) ? _2010 : (isnan(_2010) ? cbSceneParam._m0[41u].w : max(_2010, cbSceneParam._m0[41u].w));
            float _2057 = (cbSceneParam._m0[33u].x - sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668))) * cbSceneParam._m0[33u].y;
            float _4149 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
            float _2064 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1870, cbSceneParam._m0[33u].w + _1871), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1870, _1871 - cbSceneParam._m0[33u].z), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1870 - cbSceneParam._m0[33u].z, _1871 - cbSceneParam._m0[33u].w), _2014), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1870 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1871), _2014), 0.0)).x), vec4(0.25)));
            float _2068 = 1.0 - (_2064 * cbSceneParam._m0[34u].x);
            float _2069 = 1.0 - (_2064 * cbSceneParam._m0[34u].y);
            float _2070 = 1.0 - (_2064 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2070) ? _1817 : (isnan(_1817) ? _2070 : min(_1817, _2070));
            frontier_phi_37_36_ladder_1 = isnan(_2069) ? _1816 : (isnan(_1816) ? _2069 : min(_1816, _2069));
            frontier_phi_37_36_ladder_2 = isnan(_2068) ? _1815 : (isnan(_1815) ? _2068 : min(_1815, _2068));
        }
        else
        {
            frontier_phi_37_36_ladder = _1817;
            frontier_phi_37_36_ladder_1 = _1816;
            frontier_phi_37_36_ladder_2 = _1815;
        }
        _1881 = frontier_phi_37_36_ladder_2;
        _1883 = frontier_phi_37_36_ladder_1;
        _1885 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1881 = _1815;
        _1883 = _1816;
        _1885 = _1817;
    }
    uvec4 _1890 = floatBitsToUint(cbInstanceData._m0[_534 + 5u]);
    uint _1892 = _1890.x * 14u;
    uint _1893 = _1892 + 13u;
    float _1900 = _559 + (-1.0);
    float _1905 = (cbLight._m0[_1893].x * _1900) + 1.0;
    float _1906 = (cbLight._m0[_1893].y * _1900) + 1.0;
    float _1907 = (cbLight._m0[_1893].z * _1900) + 1.0;
    float _1908 = (cbLight._m0[_1893].w * _1900) + 1.0;
    uint _1909 = _1892 + 5u;
    float _1915 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1919 = _1892 + 4u;
    float _1929 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1933 = _1892 | 1u;
    float _1944 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_392, _393, _394));
    float _1947 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_392, _393, _394));
    float _4185 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _4196 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1952 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _1954 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1961 = ((cbLight._m0[_1909].x * _1915) * _1954) + (((cbLight._m0[_1919].x * _1881) * _1929) * _1952);
    float _1962 = ((_1915 * cbLight._m0[_1909].y) * _1954) + (((cbLight._m0[_1919].y * _1883) * _1929) * _1952);
    float _1963 = ((_1915 * cbLight._m0[_1909].z) * _1954) + (((cbLight._m0[_1919].z * _1885) * _1929) * _1952);
    uvec4 _1967 = floatBitsToUint(cbLight._m0[_1892 + 12u]);
    bool _1969 = _1967.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_1969)
    {
        _2071 = _1961;
        _2073 = _1962;
        _2075 = _1963;
    }
    else
    {
        uint _2079 = _1892 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1892 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4207 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2098 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _1961;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _1962;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _1963;
    }
    bool _2078 = _1967.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2078)
    {
        _2133 = _2071;
        _2135 = _2073;
        _2137 = _2075;
    }
    else
    {
        uint _2295 = _1892 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_1892 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4223 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2314 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2133 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2071;
        _2135 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2073;
        _2137 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2075;
    }
    uint _2140 = _1892 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _396) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1892].x + _473;
    float _2156 = cbLight._m0[_1892].y + _474;
    float _2157 = cbLight._m0[_1892].z + _475;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1892].xyz));
    float _4239 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _2169 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2170 = dot(vec3(_392, _393, _394), vec3(_2162, _2163, _2164));
    float _4261 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2162, _2163, _2164));
    float _4272 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2194 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2169 * ((_2168 * _2194) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2194) + _2154) * _2168))) * _2168;
    float _4283 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2221 = _1892 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _396) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_1933].x + _473;
    float _2235 = cbLight._m0[_1933].y + _474;
    float _2236 = cbLight._m0[_1933].z + _475;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1933].xyz));
    float _4294 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2248 = dot(vec3(_392, _393, _394), vec3(_2241, _2242, _2243));
    float _4305 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2241, _2242, _2243));
    float _4316 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2233;
    float _2280 = (0.5 / (((_2169 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2270) + _2233) * _2247))) * _2247;
    float _4327 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2292 = (((_2269 * cbLight._m0[_2221].x) * _2282) * _1915) + ((((cbLight._m0[_2140].x * _1881) * _2193) * _2207) * _1929);
    float _2293 = (((_2269 * cbLight._m0[_2221].y) * _2282) * _1915) + ((((cbLight._m0[_2140].y * _1883) * _2193) * _2207) * _1929);
    float _2294 = (((_2269 * cbLight._m0[_2221].z) * _2282) * _1915) + ((((cbLight._m0[_2140].z * _1885) * _2193) * _2207) * _1929);
    float _2350;
    float _2352;
    float _2354;
    if (_1969)
    {
        _2350 = _2292;
        _2352 = _2293;
        _2354 = _2294;
    }
    else
    {
        uint _2356 = _1892 + 2u;
        uint _2360 = _1892 + 10u;
        float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _396) * 0.949999988079071044921875);
        float _2375 = _2374 * _2374;
        float _2376 = cbLight._m0[_2356].x + _473;
        float _2377 = cbLight._m0[_2356].y + _474;
        float _2378 = cbLight._m0[_2356].z + _475;
        float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
        float _2383 = _2382 * _2376;
        float _2384 = _2382 * _2377;
        float _2385 = _2382 * _2378;
        float _2386 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2356].xyz));
        float _4338 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2390 = dot(vec3(_392, _393, _394), vec3(_2383, _2384, _2385));
        float _4349 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2394 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2383, _2384, _2385));
        float _4360 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2398 = _2375 * _2375;
        float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
        float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2412 = 1.0 - _2375;
        float _2422 = (0.5 / (((_2169 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2412) + _2375) * _2389))) * _2389;
        float _4371 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2350 = (((_2411 * cbLight._m0[_2360].x) * _2424) * _2425) + _2292;
        _2352 = (((_2411 * cbLight._m0[_2360].y) * _2424) * _2425) + _2293;
        _2354 = (((_2411 * cbLight._m0[_2360].z) * _2424) * _2425) + _2294;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2078)
    {
        _2456 = _2350;
        _2458 = _2352;
        _2460 = _2354;
    }
    else
    {
        uint _2467 = _1892 + 3u;
        uint _2471 = _1892 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _396) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _473;
        float _2488 = cbLight._m0[_2467].y + _474;
        float _2489 = cbLight._m0[_2467].z + _475;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2467].xyz));
        float _4387 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2501 = dot(vec3(_392, _393, _394), vec3(_2494, _2495, _2496));
        float _4398 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4409 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2169 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2523) + _2486) * _2500))) * _2500;
        float _4420 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2350;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2352;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2354;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1890.y == 0u)
    {
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _495) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _494) / _2558)));
        float _2579 = (log2(_1668 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            uint _2849 = 0u;
            uint _2858;
            bool _2859;
            for (;;)
            {
                _2858 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                _2859 = _2858 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2859)
                {
                    frontier_phi_71_pred = _2848;
                    frontier_phi_71_pred_1 = _2847;
                    frontier_phi_71_pred_2 = _2846;
                    frontier_phi_71_pred_3 = _2845;
                    frontier_phi_71_pred_4 = _2844;
                    frontier_phi_71_pred_5 = _2843;
                }
                else
                {
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    uint _2994;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2858;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2998 = uint(findLSB(_2994)) + (_2849 << 5u);
                        uint _2995 = (_2994 + 4294967295u) & _2994;
                        uint _3000 = _2998 * 48u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3020 = (_2998 * 48u) + 4u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3039 = (_2998 * 48u) + 8u;
                        vec3 _3050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x));
                        float _3054 = _3014.x - _1666;
                        float _3055 = _3014.y - _1667;
                        float _3056 = _3014.z - _1668;
                        float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                        float _3060 = inversesqrt(_3057);
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3064 = dot(vec3(_515, _518, _521), vec3(_3061, _3062, _3063));
                        float _3069 = 1.0 - (_3057 * _3014.w);
                        float _4446 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3071 = sqrt(_3057) * _3033.w;
                        float _3074 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3064) + _3075;
                        float _3081 = _3071 * _3071;
                        float _3085 = ((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3070) / ((_3081 * 0.699999988079071044921875) + 1.0);
                        float _3089 = (-0.0) - _1666;
                        float _3090 = (-0.0) - _1667;
                        float _3091 = (-0.0) - _1668;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3105 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                        float _3106 = 1.0 - _575;
                        float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                        float _3114 = _3113 * _3113;
                        float _3115 = _3114 * _3114;
                        float _3116 = _3096 + _3061;
                        float _3117 = _3097 + _3062;
                        float _3118 = _3098 + _3063;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3126 = dot(vec3(_515, _518, _521), vec3(_3096, _3097, _3098));
                        float _4462 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3130 = dot(vec3(_515, _518, _521), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                        float _4473 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                        float _3138 = _3074 * _3114;
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3064) + _3139;
                        float _4484 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3144 = 1.0 - _3114;
                        float _3154 = (0.5 / (((_3143 * ((_3129 * _3144) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3143 * _3144) + _3114) * _3129))) * _3143;
                        float _4495 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3165 = (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3137 * _3137) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125))) * _3070;
                        _2918 = (_3085 * _3033.x) + _2991;
                        _2919 = (_3085 * _3033.y) + _2992;
                        _2920 = (_3085 * _3033.z) + _2993;
                        _2915 = (_3165 * _3050.x) + _2988;
                        _2916 = (_3165 * _3050.y) + _2989;
                        _2917 = (_3165 * _3050.z) + _2990;
                        if (_2995 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2995;
                        }
                    }
                    frontier_phi_71_pred = _2920;
                    frontier_phi_71_pred_1 = _2919;
                    frontier_phi_71_pred_2 = _2918;
                    frontier_phi_71_pred_3 = _2917;
                    frontier_phi_71_pred_4 = _2916;
                    frontier_phi_71_pred_5 = _2915;
                }
                _2701 = frontier_phi_71_pred;
                _2699 = frontier_phi_71_pred_1;
                _2697 = frontier_phi_71_pred_2;
                _2695 = frontier_phi_71_pred_3;
                _2693 = frontier_phi_71_pred_4;
                _2691 = frontier_phi_71_pred_5;
                uint _2850 = _2849 + 1u;
                if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2843 = _2691;
                    _2844 = _2693;
                    _2845 = _2695;
                    _2846 = _2697;
                    _2847 = _2699;
                    _2848 = _2701;
                    _2849 = _2850;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
        }
        else
        {
            float _2836 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
            float _2837 = _2836 * _1666;
            float _2838 = _2836 * _1667;
            float _2839 = _2836 * _1668;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2971 = _2690;
                float _2972 = _2692;
                float _2973 = _2694;
                float _2974 = _2696;
                float _2975 = _2698;
                float _2976 = _2700;
                uint _2977 = _2707;
                uint _2986;
                bool _2987;
                for (;;)
                {
                    _2986 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                    _2987 = _2986 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2987)
                    {
                        frontier_phi_82_pred = _2976;
                        frontier_phi_82_pred_1 = _2975;
                        frontier_phi_82_pred_2 = _2974;
                        frontier_phi_82_pred_3 = _2973;
                        frontier_phi_82_pred_4 = _2972;
                        frontier_phi_82_pred_5 = _2971;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3192 = _2971;
                        float _3193 = _2972;
                        float _3194 = _2973;
                        float _3195 = _2974;
                        float _3196 = _2975;
                        float _3197 = _2976;
                        uint _3198 = _2986;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3268;
                        vec4 _3284;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3209 = ((_2977 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3255 = (_3209 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3271 = (_3209 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3209 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3209 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_1668, _3319.z, fma(_1667, _3319.y, _3319.x * _1666)) + _3319.w;
                            _3332 = !((fma(_1668, _3300.z, fma(_1667, _3300.y, _3300.x * _1666)) + _3300.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3224.x - _1666;
                                float _3360 = _3224.y - _1667;
                                float _3361 = _3224.z - _1668;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3225 * _3225));
                                float _4506 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3377 = sqrt(_3362) * _3240.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_515, _518, _521))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_1668, _3268.z, fma(_1667, _3268.y, _3268.x * _1666)) + _3268.w) / _3331;
                                float _3391 = (fma(_1668, _3284.z, fma(_1667, _3284.y, _3284.x * _1666)) + _3284.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4522 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _575;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2837;
                                float _3421 = _3367 - _2838;
                                float _3422 = _3368 - _2839;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_515, _518, _521), vec3((-0.0) - _2837, (-0.0) - _2838, (-0.0) - _2839));
                                float _4533 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3434 = dot(vec3(_515, _518, _521), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4544 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_515, _518, _521), vec3(_3366, _3367, _3368))) + _3443;
                                float _4555 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4566 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3397 * _3240.z;
                                frontier_phi_88_pred_1 = _3397 * _3240.y;
                                frontier_phi_88_pred_2 = _3397 * _3240.x;
                                frontier_phi_88_pred_3 = _3471 * _3252.z;
                                frontier_phi_88_pred_4 = _3471 * _3252.y;
                                frontier_phi_88_pred_5 = _3471 * _3252.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3480 = frontier_phi_88_pred;
                            _3479 = frontier_phi_88_pred_1;
                            _3478 = frontier_phi_88_pred_2;
                            _3477 = frontier_phi_88_pred_3;
                            _3476 = frontier_phi_88_pred_4;
                            _3475 = frontier_phi_88_pred_5;
                            _3182 = _3478 + _3195;
                            _3183 = _3479 + _3196;
                            _3184 = _3480 + _3197;
                            _3179 = _3475 + _3192;
                            _3180 = _3476 + _3193;
                            _3181 = _3477 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3184;
                        frontier_phi_82_pred_1 = _3183;
                        frontier_phi_82_pred_2 = _3182;
                        frontier_phi_82_pred_3 = _3181;
                        frontier_phi_82_pred_4 = _3180;
                        frontier_phi_82_pred_5 = _3179;
                    }
                    _2822 = frontier_phi_82_pred;
                    _2820 = frontier_phi_82_pred_1;
                    _2818 = frontier_phi_82_pred_2;
                    _2816 = frontier_phi_82_pred_3;
                    _2814 = frontier_phi_82_pred_4;
                    _2812 = frontier_phi_82_pred_5;
                    uint _2978 = _2977 + 1u;
                    if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2971 = _2812;
                        _2972 = _2814;
                        _2973 = _2816;
                        _2974 = _2818;
                        _2975 = _2820;
                        _2976 = _2822;
                        _2977 = _2978;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2818;
                frontier_phi_63_64_ladder_1 = _2822;
                frontier_phi_63_64_ladder_2 = _2820;
                frontier_phi_63_64_ladder_3 = _2816;
                frontier_phi_63_64_ladder_4 = _2814;
                frontier_phi_63_64_ladder_5 = _2812;
            }
            else
            {
                frontier_phi_63_64_ladder = _2696;
                frontier_phi_63_64_ladder_1 = _2700;
                frontier_phi_63_64_ladder_2 = _2698;
                frontier_phi_63_64_ladder_3 = _2694;
                frontier_phi_63_64_ladder_4 = _2692;
                frontier_phi_63_64_ladder_5 = _2690;
            }
            _2811 = frontier_phi_63_64_ladder_5;
            _2813 = frontier_phi_63_64_ladder_4;
            _2815 = frontier_phi_63_64_ladder_3;
            _2817 = frontier_phi_63_64_ladder;
            _2819 = frontier_phi_63_64_ladder_2;
            _2821 = frontier_phi_63_64_ladder_1;
        }
        float _2826 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2602 = (_2826 * _2817) + _2133;
        _2604 = (_2826 * _2819) + _2135;
        _2606 = (_2826 * _2821) + _2137;
        _2608 = ((_2811 * 0.039999999105930328369140625) * _2826) + _2456;
        _2610 = ((_2813 * 0.039999999105930328369140625) * _2826) + _2458;
        _2612 = ((_2815 * 0.039999999105930328369140625) * _2826) + _2460;
    }
    else
    {
        _2602 = _2133;
        _2604 = _2135;
        _2606 = _2137;
        _2608 = _2456;
        _2610 = _2458;
        _2612 = _2460;
    }
    uint _2618 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _4582 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4593 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4604 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4615 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _2644 = (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2602 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _559))) + ((_2608 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1398)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2618].x * cbMtdParam._m0[10u].x);
    float _2646 = ((cbInstanceData._m0[_2618].y * cbMtdParam._m0[10u].y) + ((_2610 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1398)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2604 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _559)));
    float _2648 = ((cbInstanceData._m0[_2618].z * cbMtdParam._m0[10u].z) + ((_2612 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1398)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2606 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _559)));
    float _2649 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2650 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2651 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2656 = cbInstanceData._m0[_534 + 6u].w * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)));
    float _2661 = _494 / cbSceneParam._m0[86u].x;
    float _2662 = _495 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2716 = _2715 / _415;
        float _2727 = _2716 * _466;
        float _2728 = _467 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2731 = _2716 * _468;
        float _2733 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2734 = _2733 + cbSceneParam._m0[79u].w;
        float _2735 = cbSceneParam._m0[79u].w - _2728;
        float _2741 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2731 * _2731));
        float _2744 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2741;
        float _2749 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2729 - _2733) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2734 > 0.0) ? exp2(_2749 * _2734) : (2.0 - exp2(_2751 * _2734))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2744;
        }
        else
        {
            float _2872 = 1.0 / cbSceneParam._m0[80u].x;
            float _2873 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : max(_2734, _2735));
            float _2874 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : min(_2734, _2735));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            _2928 = ((abs(_2741 / _2729) * cbSceneParam._m0[80u].y) * ((((_2883 - _2884) * 2.0) - ((exp2(_2749 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)))) - exp2(_2749 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))))) * _2872)) - ((exp2(_2751 * _2883) - exp2(_2751 * _2884)) * _2872))) + (_2744 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2681);
        _2753 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2755 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2757 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2759 = _2939 * _2681;
    }
    else
    {
        _2753 = _2678;
        _2755 = _2679;
        _2757 = _2680;
        _2759 = _2681;
    }
    bool _2966;
    vec4 _2769;
    vec4 _2791;
    float _2793;
    float _2797;
    float _2798;
    float _2799;
    float _2800;
    bool _2810;
    for (;;)
    {
        _2769 = cbMatDynParam._m0[0u];
        float _2771 = roundEven(_2769.y);
        bool _2772 = _2771 == 3.0;
        float _2773 = log2(_2759);
        float _2780 = exp2(_2773 * cbSceneParam._m0[78u].x) * _2649;
        float _2781 = exp2(_2773 * cbSceneParam._m0[78u].y) * _2650;
        float _2782 = exp2(_2773 * cbSceneParam._m0[78u].z) * _2651;
        float _2789 = _482 + (-0.5);
        _2791 = cbMtdParam._m0[1u];
        _2793 = _2791.y * _2789;
        float _2796 = (_2771 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2797 = _2796 * (_2772 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2753)));
        _2798 = _2796 * (_2772 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
        _2799 = _2796 * (_2772 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
        _2800 = _2789 * 0.999000012874603271484375;
        _2810 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2810)
        {
            if ((cbInstanceData._m0[_534 + 7u].x + _2800) < 0.5)
            {
                _2966 = true;
                break;
            }
        }
        uint _2907 = _535 + uint(_2769.w);
        if ((cbInstanceData._m0[_2907].w < 1.0) && ((cbInstanceData._m0[_2907].w + _2800) < 0.5))
        {
            _2966 = true;
            break;
        }
        if ((_2793 + _298) < _2791.x)
        {
            _2966 = true;
            break;
        }
        _2966 = false;
        break;
    }
    float _3170;
    if (_2966)
    {
        discard_state = true;
        _3170 = 0.0;
    }
    else
    {
        _3170 = _2656;
    }
    SV_Target.x = _2797;
    SV_Target.y = _2798;
    SV_Target.z = _2799;
    SV_Target.w = _3170;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2656;
    discard_exit();
}


