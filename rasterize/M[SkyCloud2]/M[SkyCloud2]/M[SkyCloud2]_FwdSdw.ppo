#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_SkyCloud2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_SkyCloud2_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_SkyCloud2_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _915;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x;
    float _227 = TEXCOORD_1.y - ((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    vec4 _242 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[12u].x) * ((_220 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[12u].x) * _227) + cbTextureTilingScale._m0[0u].w));
    float _245 = _242.y;
    float _246 = _245 * (-0.20000000298023223876953125);
    vec4 _260 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _262 = _260.z;
    float _273 = ((_227 * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _277 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_220 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _273)).x * 0.0500000007450580596923828125;
    float _290 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((((_220 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[12u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _273)).x * 0.100000001490116119384765625;
    float _294 = (((_262 + _246) + _277) + _290) * TEXCOORD_1.z;
    vec4 _312 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _325 = ((_294 * cbMtdParam._m0[11u].x) * _312.x) * cbMtdParam._m0[9u].x;
    float _328 = ((_294 * cbMtdParam._m0[11u].y) * _312.y) * cbMtdParam._m0[9u].y;
    float _332 = ((((((_262 - (_245 * 0.20000000298023223876953125)) + _277) + _290) * TEXCOORD_1.z) * cbMtdParam._m0[11u].z) * _312.z) * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_SkyCloud2_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * (_246 + TEXCOORD_1.x)) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (_246 + TEXCOORD_1.y)) + cbTextureTilingScale._m0[1u].w));
    float _361 = (_354.x * 2.0) + (-1.0);
    float _363 = (_354.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3532 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    float _373 = (_361 * cbMtdParam._m0[12u].z) + _361;
    float _374 = (_363 * cbMtdParam._m0[12u].z) + _363;
    float _377 = fma(_370, _200 * NORMAL.x, fma(_374, _207 * TANGENT.x, (_193 * _185) * _373));
    float _380 = fma(_370, _200 * NORMAL.y, fma(_374, _207 * TANGENT.y, (_193 * _186) * _373));
    float _383 = fma(_370, _200 * NORMAL.z, fma(_374, _207 * TANGENT.z, (_193 * _187) * _373));
    float _387 = inversesqrt(dot(vec3(_377, _380, _383), vec3(_377, _380, _383)));
    float _388 = _387 * _377;
    float _389 = _387 * _380;
    float _390 = _387 * _383;
    float _3543 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _391 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? cbMtdParam._m0[12u].y : (isnan(cbMtdParam._m0[12u].y) ? 0.0 : max(cbMtdParam._m0[12u].y, 0.0));
    float _392 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3576 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3587 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_390, cbSceneParam._m0[5u].z, fma(_389, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _388));
    float _502 = fma(_390, cbSceneParam._m0[6u].z, fma(_389, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _388));
    float _505 = fma(_390, cbSceneParam._m0[7u].z, fma(_389, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _388));
    uint _518 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = _518 + 9u;
    uint _520 = _519 + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3598 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    vec4 _540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _543 = _540.x * TEXCOORD_1.w;
    float _544 = dot(vec3(_388, _389, _390), vec3(_469, _470, _471));
    float _547 = _544 * 2.0;
    float _551 = (_547 * _388) - _469;
    float _552 = (_547 * _389) - _470;
    float _553 = (_547 * _390) - _471;
    float _557 = abs(dot(vec3(_469, _470, _471), vec3(_388, _389, _390)));
    float _3631 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _559 = sqrt(_392);
    float _572 = exp2((_559 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_559 * 3.0));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _914;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _639 = fma(_612, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604));
        float _643 = fma(_612, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604));
        float _647 = fma(_612, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604));
        float _672 = _604 + _388;
        float _673 = _608 + _389;
        float _674 = _612 + _390;
        float _684 = fma(_674, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672)) - _639;
        float _685 = fma(_674, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672)) - _643;
        float _686 = fma(_674, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672)) - _647;
        float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
        float _703 = ((_690 * _684) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_639 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_690 * _685) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_643 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_690 * _686) / cbModelParam._m0[34u].z) + ((((((_647 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_708.x + (-0.5));
        float _744 = _742 * (_708.y + (-0.5));
        float _745 = _742 * (_708.z + (-0.5));
        float _752 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_715.x + (-0.5));
        float _754 = _752 * (_715.y + (-0.5));
        float _755 = _752 * (_715.z + (-0.5));
        float _762 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_722.x + (-0.5));
        float _764 = _762 * (_722.y + (-0.5));
        float _765 = _762 * (_722.z + (-0.5));
        float _772 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_729.x + (-0.5));
        float _774 = _772 * (_729.y + (-0.5));
        float _775 = _772 * (_729.z + (-0.5));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = _743 * 0.5;
        float _780 = _753 * 0.5;
        float _781 = _763 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _796 = (dot(vec3(_388, _389, _390), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _806 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3679 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_808 + 1.0))) + _813) * _776;
        float _823 = _744 * 0.5;
        float _824 = _754 * 0.5;
        float _825 = _764 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_388, _389, _390), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3712 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_850 + 1.0))) + _855) * _777;
        float _865 = _745 * 0.5;
        float _866 = _755 * 0.5;
        float _867 = _765 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_388, _389, _390), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3745 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_892 + 1.0))) + _897) * _778;
        _914 = _745;
        _916 = _744;
        _917 = _743;
        _918 = _755;
        _919 = _754;
        _920 = _753;
        _921 = _765;
        _922 = _764;
        _923 = _763;
        _924 = _778;
        _925 = _777;
        _926 = _776;
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
    }
    else
    {
        _914 = _915;
        _916 = _915;
        _917 = _915;
        _918 = _915;
        _919 = _915;
        _920 = _915;
        _921 = _915;
        _922 = _915;
        _923 = _915;
        _924 = _915;
        _925 = _915;
        _926 = _915;
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_612, cbModelParam._m0[30u].z, fma(_608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _604));
        float _959 = fma(_612, cbModelParam._m0[31u].z, fma(_608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _604));
        float _963 = fma(_612, cbModelParam._m0[32u].z, fma(_608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _604));
        float _986 = _604 + _388;
        float _987 = _608 + _389;
        float _988 = _612 + _390;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_388, _389, _390), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3808 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_388, _389, _390), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3841 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_388, _389, _390), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3874 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _915;
        _1225 = _915;
        _1226 = _915;
        _1227 = _915;
        _1228 = _915;
        _1229 = _915;
        _1230 = _915;
        _1231 = _915;
        _1232 = _915;
        _1233 = _915;
        _1234 = _915;
        _1235 = _915;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _928)) + _928;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _551 * 0.5;
    float _1293 = _552 * 0.5;
    float _1294 = _553 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _918, _921, _924));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_916, _919, _922, _925));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_917, _920, _923, _926));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1442;
    float _1444;
    float _1446;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1409 = fma(_612, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604)) + cbModelParam._m0[13u].w;
        float _1413 = fma(_612, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604)) + cbModelParam._m0[14u].w;
        float _1417 = fma(_612, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604)) + cbModelParam._m0[15u].w;
        float _1420 = fma(_553, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551));
        float _1423 = fma(_553, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551));
        float _1426 = fma(_553, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551));
        float _1454;
        if (_1420 > 0.0)
        {
            _1454 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1454 = frontier_phi_14_12_ladder;
        }
        float _1626;
        if (_1423 > 0.0)
        {
            _1626 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1626 = frontier_phi_23_19_ladder;
        }
        float _1922;
        if (_1426 > 0.0)
        {
            _1922 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1922 = frontier_phi_35_30_ladder;
        }
        float _1924 = isnan(_1626) ? _1454 : (isnan(_1454) ? _1626 : min(_1454, _1626));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1420) + _1409;
        float _1930 = (_1925 * _1423) + _1413;
        float _1931 = (_1925 * _1426) + _1417;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_13_35_ladder = _2076.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2076.x * cbModelParam._m0[1u].y;
        }
        _1442 = frontier_phi_13_35_ladder_2;
        _1444 = frontier_phi_13_35_ladder_1;
        _1446 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_551, _552, _553), _1361);
        _1442 = _1430.x * cbModelParam._m0[1u].y;
        _1444 = _1430.y * cbModelParam._m0[1u].y;
        _1446 = _1430.z * cbModelParam._m0[1u].y;
    }
    float _1450 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1450 : min(cbModelParam._m0[25u].w, _1450));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_612, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_612, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_612, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_553, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551));
        float _1521 = fma(_553, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551));
        float _1524 = fma(_553, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551));
        float _1631;
        if (_1518 > 0.0)
        {
            _1631 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1631 = frontier_phi_25_21_ladder;
        }
        float _1949;
        if (_1521 > 0.0)
        {
            _1949 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1949 = frontier_phi_37_32_ladder;
        }
        float _2276;
        if (_1524 > 0.0)
        {
            _2276 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2276 = frontier_phi_47_44_ladder;
        }
        float _2278 = isnan(_1949) ? _1631 : (isnan(_1631) ? _1949 : min(_1631, _1949));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1518) + _1507;
        float _2284 = (_2279 * _1521) + _1511;
        float _2285 = (_2279 * _1524) + _1515;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1451);
            frontier_phi_22_47_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_22_47_ladder_2;
        _1545 = frontier_phi_22_47_ladder_1;
        _1547 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_551, _552, _553), _1451);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1559 = ((((1.0 - _572) * ((_559 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_572 * _559)) * _543;
    float _1560 = _1559 * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1561 = _1559 * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1562 = _1559 * ((cbModelParam._m0[1u].w * (_1547 - _1446)) + _1446);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1618 = _1605 / _1617;
    float _1619 = _1609 / _1617;
    float _1620 = _1613 / _1617;
    float _1767;
    float _1768;
    float _1769;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1647 = ((uint(_1620 > cbSceneParam._m0[59u].y) + uint(_1620 > cbSceneParam._m0[59u].x)) + uint(_1620 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1648 = _1647 + 43u;
        uint _1656 = _1647 + 44u;
        uint _1664 = _1647 + 45u;
        uint _1672 = _1647 + 46u;
        float _1683 = fma(_1617, cbSceneParam._m0[_1648].w, fma(_1613, cbSceneParam._m0[_1648].z, fma(_1609, cbSceneParam._m0[_1648].y, _1605 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1617, cbSceneParam._m0[_1656].w, fma(_1613, cbSceneParam._m0[_1656].z, fma(_1609, cbSceneParam._m0[_1656].y, _1605 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1617, cbSceneParam._m0[_1672].w, fma(_1613, cbSceneParam._m0[_1672].z, fma(_1609, cbSceneParam._m0[_1672].y, _1605 * cbSceneParam._m0[_1672].x)));
        float _1700 = cbSceneParam._m0[33u].z * _1695;
        float _1702 = cbSceneParam._m0[33u].w * _1695;
        float _1705 = fma(_1617, cbSceneParam._m0[_1664].w, fma(_1613, cbSceneParam._m0[_1664].z, fma(_1609, cbSceneParam._m0[_1664].y, _1605 * cbSceneParam._m0[_1664].x))) / _1695;
        float _1753 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
        float _4000 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1760 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1683) / _1695, (_1702 + _1687) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1683) / _1695, (_1687 - _1700) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1700) / _1695, (_1687 - _1702) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1702) / _1695, (_1700 + _1687) / _1695), _1705), 0.0)).x), vec4(0.25)));
        _1767 = 1.0 - (_1760 * cbSceneParam._m0[34u].x);
        _1768 = 1.0 - (_1760 * cbSceneParam._m0[34u].y);
        _1769 = 1.0 - (_1760 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1767 = 1.0;
        _1768 = 1.0;
        _1769 = 1.0;
    }
    float _1833;
    float _1835;
    float _1837;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1821 = fma(_1617, cbSceneParam._m0[63u].w, fma(_1613, cbSceneParam._m0[63u].z, fma(_1609, cbSceneParam._m0[63u].y, _1605 * cbSceneParam._m0[63u].x)));
        float _1822 = fma(_1617, cbSceneParam._m0[60u].w, fma(_1613, cbSceneParam._m0[60u].z, fma(_1609, cbSceneParam._m0[60u].y, _1605 * cbSceneParam._m0[60u].x))) / _1821;
        float _1823 = fma(_1617, cbSceneParam._m0[61u].w, fma(_1613, cbSceneParam._m0[61u].z, fma(_1609, cbSceneParam._m0[61u].y, _1605 * cbSceneParam._m0[61u].x))) / _1821;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1822 >= cbSceneParam._m0[64u].x) && (_1823 >= cbSceneParam._m0[64u].y)) && (_1822 <= cbSceneParam._m0[64u].z)) && (_1823 <= cbSceneParam._m0[64u].w))
        {
            float _1962 = fma(_1617, cbSceneParam._m0[62u].w, fma(_1613, cbSceneParam._m0[62u].z, fma(_1609, cbSceneParam._m0[62u].y, _1605 * cbSceneParam._m0[62u].x))) / _1821;
            float _1966 = isnan(cbSceneParam._m0[41u].w) ? _1962 : (isnan(_1962) ? cbSceneParam._m0[41u].w : max(_1962, cbSceneParam._m0[41u].w));
            float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
            float _4016 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
            float _2016 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1822, cbSceneParam._m0[33u].w + _1823), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1822, _1823 - cbSceneParam._m0[33u].z), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].z, _1823 - cbSceneParam._m0[33u].w), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1823), _1966), 0.0)).x), vec4(0.25)));
            float _2020 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
            float _2021 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
            float _2022 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_34_33_ladder_1 = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
            frontier_phi_34_33_ladder_2 = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
        }
        else
        {
            frontier_phi_34_33_ladder = _1769;
            frontier_phi_34_33_ladder_1 = _1768;
            frontier_phi_34_33_ladder_2 = _1767;
        }
        _1833 = frontier_phi_34_33_ladder_2;
        _1835 = frontier_phi_34_33_ladder_1;
        _1837 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1833 = _1767;
        _1835 = _1768;
        _1837 = _1769;
    }
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_518 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _543 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1881 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1885 = _1844 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_388, _389, _390));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_388, _389, _390));
    float _4052 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4063 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1861].x * _1867) * _1906) + (((cbLight._m0[_1871].x * _1833) * _1881) * _1904);
    float _1914 = ((_1867 * cbLight._m0[_1861].y) * _1906) + (((cbLight._m0[_1871].y * _1835) * _1881) * _1904);
    float _1915 = ((_1867 * cbLight._m0[_1861].z) * _1906) + (((cbLight._m0[_1871].z * _1837) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1921)
    {
        _2023 = _1913;
        _2025 = _1914;
        _2027 = _1915;
    }
    else
    {
        uint _2031 = _1844 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4074 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2050 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1913;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1914;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1915;
    }
    bool _2030 = _1919.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2030)
    {
        _2085 = _2023;
        _2087 = _2025;
        _2089 = _2027;
    }
    else
    {
        uint _2247 = _1844 + 7u;
        float _2263 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_388, _389, _390)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4090 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2266 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2085 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2023;
        _2087 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2025;
        _2089 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2027;
    }
    uint _2092 = _1844 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _392) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1844].x + _469;
    float _2108 = cbLight._m0[_1844].y + _470;
    float _2109 = cbLight._m0[_1844].z + _471;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1844].xyz));
    float _4106 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2121 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2122 = dot(vec3(_388, _389, _390), vec3(_2114, _2115, _2116));
    float _4128 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2114, _2115, _2116));
    float _4139 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2121 * ((_2120 * _2146) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2146) + _2106) * _2120))) * _2120;
    float _4150 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2173 = _1844 + 9u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _392) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_1885].x + _469;
    float _2187 = cbLight._m0[_1885].y + _470;
    float _2188 = cbLight._m0[_1885].z + _471;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_1885].xyz));
    float _4161 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2200 = dot(vec3(_388, _389, _390), vec3(_2193, _2194, _2195));
    float _4172 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2193, _2194, _2195));
    float _4183 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2185 * _2185;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2221 = (exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2222 = 1.0 - _2185;
    float _2232 = (0.5 / (((_2121 * ((_2199 * _2222) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2222) + _2185) * _2199))) * _2199;
    float _4194 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2234 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2244 = (((_2221 * cbLight._m0[_2173].x) * _2234) * _1867) + ((((cbLight._m0[_2092].x * _1833) * _2145) * _2159) * _1881);
    float _2245 = (((_2221 * cbLight._m0[_2173].y) * _2234) * _1867) + ((((cbLight._m0[_2092].y * _1835) * _2145) * _2159) * _1881);
    float _2246 = (((_2221 * cbLight._m0[_2173].z) * _2234) * _1867) + ((((cbLight._m0[_2092].z * _1837) * _2145) * _2159) * _1881);
    float _2302;
    float _2304;
    float _2306;
    if (_1921)
    {
        _2302 = _2244;
        _2304 = _2245;
        _2306 = _2246;
    }
    else
    {
        uint _2308 = _1844 + 2u;
        uint _2312 = _1844 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _392) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _469;
        float _2329 = cbLight._m0[_2308].y + _470;
        float _2330 = cbLight._m0[_2308].z + _471;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2308].xyz));
        float _4205 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2342 = dot(vec3(_388, _389, _390), vec3(_2335, _2336, _2337));
        float _4216 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4227 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2364 = 1.0 - _2327;
        float _2374 = (0.5 / (((_2121 * ((_2341 * _2364) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2364) + _2327) * _2341))) * _2341;
        float _4238 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2302 = (((_2363 * cbLight._m0[_2312].x) * _2376) * _2377) + _2244;
        _2304 = (((_2363 * cbLight._m0[_2312].y) * _2376) * _2377) + _2245;
        _2306 = (((_2363 * cbLight._m0[_2312].z) * _2376) * _2377) + _2246;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2030)
    {
        _2408 = _2302;
        _2410 = _2304;
        _2412 = _2306;
    }
    else
    {
        uint _2419 = _1844 + 3u;
        uint _2423 = _1844 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _392) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _469;
        float _2440 = cbLight._m0[_2419].y + _470;
        float _2441 = cbLight._m0[_2419].z + _471;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_388, _389, _390), vec3(cbLight._m0[_2419].xyz));
        float _4254 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2453 = dot(vec3(_388, _389, _390), vec3(_2446, _2447, _2448));
        float _4265 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4276 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2121 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2475) + _2438) * _2452))) * _2452;
        float _4287 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2408 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2302;
        _2410 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2304;
        _2412 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2306;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1842.y == 0u)
    {
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2510)));
        float _2531 = (log2(_1620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
        }
        else
        {
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2803)
                {
                    frontier_phi_66_pred = _2792;
                    frontier_phi_66_pred_1 = _2791;
                    frontier_phi_66_pred_2 = _2790;
                    frontier_phi_66_pred_3 = _2789;
                    frontier_phi_66_pred_4 = _2788;
                    frontier_phi_66_pred_5 = _2787;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2802;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2793 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _1618;
                        float _2978 = _2937.y - _1619;
                        float _2979 = _2937.z - _1620;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_499, _502, _505), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4313 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _1618;
                        float _3013 = (-0.0) - _1619;
                        float _3014 = (-0.0) - _1620;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3028 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _559;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3019 + _2984;
                        float _3040 = _3020 + _2985;
                        float _3041 = _3021 + _2986;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_499, _502, _505), vec3(_3019, _3020, _3021));
                        float _4329 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3053 = dot(vec3(_499, _502, _505), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4340 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2997 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2987) + _3062;
                        float _4351 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4362 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) / ((_3060 * _3060) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2846 = (_3008 * _2956.x) + _2914;
                        _2847 = (_3008 * _2956.y) + _2915;
                        _2848 = (_3008 * _2956.z) + _2916;
                        _2843 = (_3088 * _2973.x) + _2911;
                        _2844 = (_3088 * _2973.y) + _2912;
                        _2845 = (_3088 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_66_pred = _2848;
                    frontier_phi_66_pred_1 = _2847;
                    frontier_phi_66_pred_2 = _2846;
                    frontier_phi_66_pred_3 = _2845;
                    frontier_phi_66_pred_4 = _2844;
                    frontier_phi_66_pred_5 = _2843;
                }
                _2653 = frontier_phi_66_pred;
                _2651 = frontier_phi_66_pred_1;
                _2649 = frontier_phi_66_pred_2;
                _2647 = frontier_phi_66_pred_3;
                _2645 = frontier_phi_66_pred_4;
                _2643 = frontier_phi_66_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2643;
                    _2788 = _2645;
                    _2789 = _2647;
                    _2790 = _2649;
                    _2791 = _2651;
                    _2792 = _2653;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
        }
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.z;
        uint _2659 = (_2657 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2659) & _2541) == 0u)
        {
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
            float _2781 = _2780 * _1618;
            float _2782 = _2780 * _1619;
            float _2783 = _2780 * _1620;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2659 < ((_2657 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2894 = _2642;
                float _2895 = _2644;
                float _2896 = _2646;
                float _2897 = _2648;
                float _2898 = _2650;
                float _2899 = _2652;
                uint _2900 = _2659;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2910)
                    {
                        frontier_phi_72_pred = _2899;
                        frontier_phi_72_pred_1 = _2898;
                        frontier_phi_72_pred_2 = _2897;
                        frontier_phi_72_pred_3 = _2896;
                        frontier_phi_72_pred_4 = _2895;
                        frontier_phi_72_pred_5 = _2894;
                    }
                    else
                    {
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3106 = _2894;
                        float _3107 = _2895;
                        float _3108 = _2896;
                        float _3109 = _2897;
                        float _3110 = _2898;
                        float _3111 = _2899;
                        uint _3112 = _2909;
                        uint _3113;
                        vec4 _3138;
                        float _3139;
                        vec4 _3154;
                        vec3 _3166;
                        vec4 _3182;
                        vec4 _3198;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3123 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 4u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3123 * 40u) + 8u;
                            _3166 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x));
                            uint _3169 = (_3123 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3123 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3201 = (_3123 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3123 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_1620, _3233.z, fma(_1619, _3233.y, _3233.x * _1618)) + _3233.w;
                            _3246 = !((fma(_1620, _3214.z, fma(_1619, _3214.y, _3214.x * _1618)) + _3214.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3138.x - _1618;
                                float _3274 = _3138.y - _1619;
                                float _3275 = _3138.z - _1620;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3139 * _3139));
                                float _4373 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3291 = sqrt(_3276) * _3154.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_499, _502, _505))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_1620, _3182.z, fma(_1619, _3182.y, _3182.x * _1618)) + _3182.w) / _3245;
                                float _3305 = (fma(_1620, _3198.z, fma(_1619, _3198.y, _3198.x * _1618)) + _3198.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4389 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _559;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2781;
                                float _3335 = _3281 - _2782;
                                float _3336 = _3282 - _2783;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4400 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3348 = dot(vec3(_499, _502, _505), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4411 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_499, _502, _505), vec3(_3280, _3281, _3282))) + _3357;
                                float _4422 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4433 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3311 * _3154.y;
                                frontier_phi_78_pred_1 = _3311 * _3154.x;
                                frontier_phi_78_pred_2 = _3385 * _3166.z;
                                frontier_phi_78_pred_3 = _3385 * _3166.y;
                                frontier_phi_78_pred_4 = _3385 * _3166.x;
                                frontier_phi_78_pred_5 = _3311 * _3154.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_78_pred;
                            _3392 = frontier_phi_78_pred_1;
                            _3391 = frontier_phi_78_pred_2;
                            _3390 = frontier_phi_78_pred_3;
                            _3389 = frontier_phi_78_pred_4;
                            _3394 = frontier_phi_78_pred_5;
                            _3096 = _3392 + _3109;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3098;
                        frontier_phi_72_pred_1 = _3097;
                        frontier_phi_72_pred_2 = _3096;
                        frontier_phi_72_pred_3 = _3095;
                        frontier_phi_72_pred_4 = _3094;
                        frontier_phi_72_pred_5 = _3093;
                    }
                    _2766 = frontier_phi_72_pred;
                    _2764 = frontier_phi_72_pred_1;
                    _2762 = frontier_phi_72_pred_2;
                    _2760 = frontier_phi_72_pred_3;
                    _2758 = frontier_phi_72_pred_4;
                    _2756 = frontier_phi_72_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2756;
                        _2895 = _2758;
                        _2896 = _2760;
                        _2897 = _2762;
                        _2898 = _2764;
                        _2899 = _2766;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2766;
                frontier_phi_60_61_ladder_1 = _2764;
                frontier_phi_60_61_ladder_2 = _2760;
                frontier_phi_60_61_ladder_3 = _2758;
                frontier_phi_60_61_ladder_4 = _2756;
                frontier_phi_60_61_ladder_5 = _2762;
            }
            else
            {
                frontier_phi_60_61_ladder = _2652;
                frontier_phi_60_61_ladder_1 = _2650;
                frontier_phi_60_61_ladder_2 = _2646;
                frontier_phi_60_61_ladder_3 = _2644;
                frontier_phi_60_61_ladder_4 = _2642;
                frontier_phi_60_61_ladder_5 = _2648;
            }
            _2755 = frontier_phi_60_61_ladder_4;
            _2757 = frontier_phi_60_61_ladder_3;
            _2759 = frontier_phi_60_61_ladder_2;
            _2761 = frontier_phi_60_61_ladder_5;
            _2763 = frontier_phi_60_61_ladder_1;
            _2765 = frontier_phi_60_61_ladder;
        }
        float _2770 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
        _2554 = (_2770 * _2761) + _2085;
        _2556 = (_2770 * _2763) + _2087;
        _2558 = (_2770 * _2765) + _2089;
        _2560 = ((_2755 * 0.039999999105930328369140625) * _2770) + _2408;
        _2562 = ((_2757 * 0.039999999105930328369140625) * _2770) + _2410;
        _2564 = ((_2759 * 0.039999999105930328369140625) * _2770) + _2412;
    }
    else
    {
        _2554 = _2085;
        _2556 = _2087;
        _2558 = _2089;
        _2560 = _2408;
        _2562 = _2410;
        _2564 = _2412;
    }
    uint _2570 = _519 + uint(cbMatDynParam._m0[0u].w);
    float _4449 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4460 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4471 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4482 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _2596 = (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2554 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _543))) + ((_2560 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2570].x * cbMtdParam._m0[10u].x);
    float _2598 = ((cbInstanceData._m0[_2570].y * cbMtdParam._m0[10u].y) + ((_2562 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2556 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _543)));
    float _2600 = ((cbInstanceData._m0[_2570].z * cbMtdParam._m0[10u].z) + ((_2564 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2558 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _543)));
    float _2608 = cbInstanceData._m0[_518 + 6u].w * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)));
    float _2613 = _477 / cbSceneParam._m0[86u].x;
    float _2614 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2628 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2630 = _2628.x;
    float _2631 = _2628.y;
    float _2632 = _2628.z;
    float _2633 = _2628.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2667 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2668 = _2667 / _411;
        float _2679 = _2668 * _462;
        float _2680 = _463 * _2668;
        float _2681 = (-0.0) - _2680;
        float _2683 = _2668 * _464;
        float _2685 = (cbSceneParam._m0[77u].w * _2681) / _2667;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2680;
        float _2693 = sqrt(((_2679 * _2679) + (_2680 * _2680)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2667)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2681 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2818 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2856 = ((abs(_2693 / _2681) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2703 * _2827) - exp2(_2703 * _2828)) * _2816))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2633);
        _2705 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2630;
        _2707 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2631;
        _2709 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2632;
        _2711 = _2867 * _2633;
    }
    else
    {
        _2705 = _2630;
        _2707 = _2631;
        _2709 = _2632;
        _2711 = _2633;
    }
    float _2723 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2724 = _2723 == 3.0;
    float _2725 = log2(_2711);
    float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)));
    float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0)));
    float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)));
    float _2743 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2743 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2743 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2743 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = _2608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2608;
}


