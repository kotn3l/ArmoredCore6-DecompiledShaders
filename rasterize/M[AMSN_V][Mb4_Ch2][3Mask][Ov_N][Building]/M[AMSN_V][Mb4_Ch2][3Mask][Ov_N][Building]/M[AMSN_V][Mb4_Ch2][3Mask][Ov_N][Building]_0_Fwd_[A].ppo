#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1841;
float _4222;
float _4223;
float _4224;
float _4225;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _252 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _253 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _254 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _258 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _259 = _258 * _252;
    float _260 = _258 * _253;
    float _261 = _258 * _254;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _279 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _280 = _279 * TANGENT_2.x;
    float _281 = _279 * TANGENT_2.y;
    float _282 = _279 * TANGENT_2.z;
    float _287;
    float _288;
    float _289;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _287 = (-0.0) - _266;
        _288 = (-0.0) - _267;
        _289 = (-0.0) - _268;
    }
    else
    {
        _287 = _266;
        _288 = _267;
        _289 = _268;
    }
    vec4 _309 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = 1.0 - ((1.0 - _309.z) * 1.39999997615814208984375);
    float _4234 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _322 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _324 = 1.0 - ((1.0 - _309.x) * 1.39999997615814208984375);
    float _4245 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _327 = 1.0 - ((1.0 - _309.y) * 1.39999997615814208984375);
    float _4256 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _330 = (_325 + _322) + _328;
    float _337 = (_330 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _338 = (_330 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _339 = (_330 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _364 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _373 = 1.0 - ((1.0 - _364.x) * 1.39999997615814208984375);
    float _4267 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _384 = (_374 * ((cbMtdParam._m0[9u].x - _337) + ((1.0 - cbMtdParam._m0[9u].x) * _330))) + _337;
    float _385 = (_374 * ((cbMtdParam._m0[9u].y - _338) + ((1.0 - cbMtdParam._m0[9u].y) * _330))) + _338;
    float _386 = (_374 * ((cbMtdParam._m0[9u].z - _339) + ((1.0 - cbMtdParam._m0[9u].z) * _330))) + _339;
    float _399 = 1.0 - ((1.0 - _364.y) * 1.39999997615814208984375);
    float _4278 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _410 = (((cbMtdParam._m0[17u].x - _384) + ((1.0 - cbMtdParam._m0[17u].x) * _330)) * _400) + _384;
    float _411 = (((cbMtdParam._m0[17u].y - _385) + ((1.0 - cbMtdParam._m0[17u].y) * _330)) * _400) + _385;
    float _412 = (((cbMtdParam._m0[17u].z - _386) + ((1.0 - cbMtdParam._m0[17u].z) * _330)) * _400) + _386;
    float _426 = 1.0 - ((1.0 - _364.z) * 1.39999997615814208984375);
    float _4289 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _457 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[23u].w;
    float _472 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _457) + (cbMtdParam._m0[22u].y * TEXCOORD_6))) + 1.0;
    float _4300 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _474 = 1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)));
    float _482 = ((cbMtdParam._m0[21u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _457) + (cbMtdParam._m0[22u].z * TEXCOORD_5))) + 1.0;
    float _4311 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _484 = 1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)));
    vec4 _502 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _507 = cbMtdParam._m0[10u].x * _484;
    float _509 = cbMtdParam._m0[10u].y * _484;
    float _511 = cbMtdParam._m0[10u].z * _484;
    float _528 = ((_504 * (cbMtdParam._m0[16u].x - _507)) * _474) + (_507 * _504);
    float _529 = ((_505 * (cbMtdParam._m0[16u].y - _509)) * _474) + (_509 * _505);
    float _530 = ((_506 * (cbMtdParam._m0[16u].z - _511)) * _474) + (_511 * _506);
    float _551 = cbMtdParam._m0[22u].x * (-1.39999997615814208984375);
    float _555 = (_551 * ((TEXCOORD_7.x - _457) + (cbMtdParam._m0[21u].x * TEXCOORD_7.x))) + 1.0;
    float _556 = (_551 * ((TEXCOORD_7.y - _457) + (cbMtdParam._m0[21u].x * TEXCOORD_7.y))) + 1.0;
    float _557 = (_551 * ((TEXCOORD_7.z - _457) + (cbMtdParam._m0[21u].x * TEXCOORD_7.z))) + 1.0;
    float _4322 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4333 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4344 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _566 = (1.0 - cbMtdParam._m0[23u].y) + _325;
    float _569 = _566 * (1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))));
    float _570 = _566 * (1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))));
    float _571 = ((_325 + 1.0) - cbMtdParam._m0[23u].y) * (1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))));
    float _581 = _484 + _474;
    float _582 = _581 + _569;
    float _583 = _581 + _570;
    float _584 = _581 + _571;
    float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _588 = isnan(1.0) ? _585 : (isnan(_585) ? 1.0 : min(_585, 1.0));
    float _589 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
    float _590 = isnan(1.0) ? _587 : (isnan(_587) ? 1.0 : min(_587, 1.0));
    vec4 _608 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _613 = _608.w;
    float _614 = _608.x * cbMtdParam._m0[12u].x;
    float _615 = _608.y * cbMtdParam._m0[12u].y;
    float _616 = _608.z * cbMtdParam._m0[12u].z;
    vec4 _635 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _649 = (((_635.x * cbMtdParam._m0[13u].x) - _614) * _325) + _614;
    float _650 = (((_635.y * cbMtdParam._m0[13u].y) - _615) * _325) + _615;
    float _651 = (((_635.z * cbMtdParam._m0[13u].z) - _616) * _325) + _616;
    vec4 _669 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _683 = (((_669.x * cbMtdParam._m0[14u].x) - _649) * _328) + _649;
    float _684 = (((_669.y * cbMtdParam._m0[14u].y) - _650) * _328) + _650;
    float _685 = (((_669.z * cbMtdParam._m0[14u].z) - _651) * _328) + _651;
    vec4 _703 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _717 = (((_703.x * cbMtdParam._m0[15u].x) - _683) * _322) + _683;
    float _718 = (((_703.y * cbMtdParam._m0[15u].y) - _684) * _322) + _684;
    float _719 = (((_703.z * cbMtdParam._m0[15u].z) - _685) * _322) + _685;
    float _739 = ((_717 - (_717 * _588)) + (((_588 * 4.55000019073486328125) * ((_569 * ((cbMtdParam._m0[11u].x * _504) - _528)) + _528)) * _717)) * ((((cbMtdParam._m0[18u].x - _410) + ((1.0 - cbMtdParam._m0[18u].x) * _330)) * _427) + _410);
    float _740 = ((_718 - (_718 * _589)) + (((_589 * 4.55000019073486328125) * ((_570 * ((cbMtdParam._m0[11u].y * _505) - _529)) + _529)) * _718)) * ((((cbMtdParam._m0[18u].y - _411) + ((1.0 - cbMtdParam._m0[18u].y) * _330)) * _427) + _411);
    float _741 = ((_719 - (_590 * _719)) + (((_590 * 4.55000019073486328125) * ((_571 * ((cbMtdParam._m0[11u].z * _506) - _530)) + _530)) * _719)) * ((((cbMtdParam._m0[18u].z - _412) + ((1.0 - cbMtdParam._m0[18u].z) * _330)) * _427) + _412);
    float _755 = ((cbMtdParam._m0[20u].w - cbMtdParam._m0[24u].x) * _588) + cbMtdParam._m0[24u].x;
    float _758 = ((cbMtdParam._m0[20u].x - _755) * _325) + _755;
    float _761 = ((cbMtdParam._m0[20u].y - _758) * _328) + _758;
    float _764 = ((cbMtdParam._m0[20u].z - _761) * _322) + _761;
    vec4 _776 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _780 = _776.z;
    float _784 = (_776.x * 2.0) + (-1.0);
    float _786 = (_776.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_784, _786), vec2(_784, _786));
    float _4385 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _792 = sqrt(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))));
    float _795 = fma(_792, _287, fma(_786, _280, _784 * _259));
    float _798 = fma(_792, _288, fma(_786, _281, _784 * _260));
    float _801 = fma(_792, _289, fma(_786, _282, _784 * _261));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    vec4 _821 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _827 = (_821.x * 2.0) + (-1.0);
    float _828 = (_821.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _4396 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _834 = sqrt(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))));
    float _837 = fma(_834, _287, fma(_828, _280, _827 * _259));
    float _840 = fma(_834, _288, fma(_828, _281, _827 * _260));
    float _843 = fma(_834, _289, fma(_828, _282, _827 * _261));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _853 = fma(_850, _242, fma(_849, _241, _848 * _240));
    float _856 = fma(_850, _275, fma(_849, _274, _848 * _273));
    float _859 = fma(_850, _289, fma(_849, _288, _848 * _287));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    vec4 _876 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _882 = (_876.x * 2.0) + (-1.0);
    float _883 = (_876.y * 2.0) + (-1.0);
    float _884 = dot(vec2(_882, _883), vec2(_882, _883));
    float _4407 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _889 = sqrt(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))));
    float _892 = fma(_889, _287, fma(_883, _280, _882 * _259));
    float _895 = fma(_889, _288, fma(_883, _281, _882 * _260));
    float _898 = fma(_889, _289, fma(_883, _282, _882 * _261));
    float _902 = inversesqrt(dot(vec3(_892, _895, _898), vec3(_892, _895, _898)));
    float _903 = _902 * _892;
    float _904 = _902 * _895;
    float _905 = _902 * _898;
    float _908 = fma(_905, _242, fma(_904, _241, _903 * _240));
    float _911 = fma(_905, _275, fma(_904, _274, _903 * _273));
    float _914 = fma(_905, _289, fma(_904, _288, _903 * _287));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    vec4 _931 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _937 = (_931.x * 2.0) + (-1.0);
    float _938 = (_931.y * 2.0) + (-1.0);
    float _939 = dot(vec2(_937, _938), vec2(_937, _938));
    float _4418 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _944 = sqrt(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))));
    float _947 = fma(_944, _287, fma(_938, _280, _937 * _259));
    float _950 = fma(_944, _288, fma(_938, _281, _937 * _260));
    float _953 = fma(_944, _289, fma(_938, _282, _937 * _261));
    float _957 = inversesqrt(dot(vec3(_947, _950, _953), vec3(_947, _950, _953)));
    float _958 = _957 * _947;
    float _959 = _957 * _950;
    float _960 = _957 * _953;
    float _963 = fma(_960, _242, fma(_959, _241, _958 * _240));
    float _966 = fma(_960, _275, fma(_959, _274, _958 * _273));
    float _969 = fma(_960, _289, fma(_959, _288, _958 * _287));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _979 = fma(_808, _242, fma(_807, _241, _806 * _240));
    float _982 = fma(_808, _275, fma(_807, _274, _806 * _273));
    float _985 = fma(_808, _289, fma(_807, _288, _806 * _287));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    float _990 = _989 * _979;
    float _991 = _989 * _982;
    float _992 = _989 * _985;
    float _999 = (((_973 * _963) - _990) * _325) + _990;
    float _1000 = (((_973 * _966) - _991) * _325) + _991;
    float _1001 = (((_973 * _969) - _992) * _325) + _992;
    vec4 _1014 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1020 = (_1014.x * 2.0) + (-1.0);
    float _1021 = (_1014.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4429 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1027 = sqrt(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))));
    float _1030 = fma(_1027, _287, fma(_1021, _280, _1020 * _259));
    float _1033 = fma(_1027, _288, fma(_1021, _281, _1020 * _260));
    float _1036 = fma(_1027, _289, fma(_1021, _282, _1020 * _261));
    float _1040 = inversesqrt(dot(vec3(_1030, _1033, _1036), vec3(_1030, _1033, _1036)));
    float _1041 = _1040 * _1030;
    float _1042 = _1040 * _1033;
    float _1043 = _1040 * _1036;
    float _1046 = fma(_1043, _242, fma(_1042, _241, _1041 * _240));
    float _1049 = fma(_1043, _275, fma(_1042, _274, _1041 * _273));
    float _1052 = fma(_1043, _289, fma(_1042, _288, _1041 * _287));
    float _1056 = inversesqrt(dot(vec3(_1046, _1049, _1052), vec3(_1046, _1049, _1052)));
    float _1066 = (((_1056 * _1046) - _999) * _328) + _999;
    float _1067 = (((_1056 * _1049) - _1000) * _328) + _1000;
    float _1068 = (((_1056 * _1052) - _1001) * _328) + _1001;
    vec4 _1081 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1087 = (_1081.x * 2.0) + (-1.0);
    float _1088 = (_1081.y * 2.0) + (-1.0);
    float _1089 = dot(vec2(_1087, _1088), vec2(_1087, _1088));
    float _4440 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1094 = sqrt(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))));
    float _1097 = fma(_1094, _287, fma(_1088, _280, _1087 * _259));
    float _1100 = fma(_1094, _288, fma(_1088, _281, _1087 * _260));
    float _1103 = fma(_1094, _289, fma(_1088, _282, _1087 * _261));
    float _1107 = inversesqrt(dot(vec3(_1097, _1100, _1103), vec3(_1097, _1100, _1103)));
    float _1108 = _1107 * _1097;
    float _1109 = _1107 * _1100;
    float _1110 = _1107 * _1103;
    float _1113 = fma(_1110, _242, fma(_1109, _241, _1108 * _240));
    float _1116 = fma(_1110, _275, fma(_1109, _274, _1108 * _273));
    float _1119 = fma(_1110, _289, fma(_1109, _288, _1108 * _287));
    float _1123 = inversesqrt(dot(vec3(_1113, _1116, _1119), vec3(_1113, _1116, _1119)));
    float _1133 = (((_1123 * _1119) - _1068) * _322) + _1068;
    vec4 _1145 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1151 = (_1145.x * 2.0) + (-1.0);
    float _1152 = (_1145.y * 2.0) + (-1.0);
    float _1153 = dot(vec2(_1151, _1152), vec2(_1151, _1152));
    float _4451 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1158 = sqrt(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))));
    float _1161 = fma(_1158, _287, fma(_1152, _280, _1151 * _259));
    float _1164 = fma(_1158, _288, fma(_1152, _281, _1151 * _260));
    float _1167 = fma(_1158, _289, fma(_1152, _282, _1151 * _261));
    float _1171 = inversesqrt(dot(vec3(_1161, _1164, _1167), vec3(_1161, _1164, _1167)));
    float _1172 = _1171 * _1161;
    float _1173 = _1171 * _1164;
    float _1174 = _1171 * _1167;
    float _1177 = fma(_1174, _242, fma(_1173, _241, _1172 * _240));
    float _1180 = fma(_1174, _275, fma(_1173, _274, _1172 * _273));
    float _1183 = fma(_1174, _289, fma(_1173, _288, _1172 * _287));
    float _1187 = inversesqrt(dot(vec3(_1177, _1180, _1183), vec3(_1177, _1180, _1183)));
    vec4 _1225 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _1239 = (((((((_908 * _474) * _918) * cbMtdParam._m0[22u].w) + ((((_582 * _566) * _853) * _863) * cbMtdParam._m0[23u].x)) + _1066) + (((_1123 * _1113) - _1066) * _322)) + (((_1177 * _484) * _1187) * cbMtdParam._m0[21u].w)) + (((_1225.x * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1244 = (((((((_911 * _474) * _918) * cbMtdParam._m0[22u].w) + ((((_583 * _566) * _856) * _863) * cbMtdParam._m0[23u].x)) + _1067) + (((_1123 * _1116) - _1067) * _322)) + (((_1180 * _484) * _1187) * cbMtdParam._m0[21u].w)) + (((_1225.y * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1247 = fma(_1133, _287, fma(_1244, _273, _1239 * _240));
    float _1250 = fma(_1133, _288, fma(_1244, _274, _1239 * _241));
    float _1253 = fma(_1133, _289, fma(_1244, _275, _1239 * _242));
    float _1257 = inversesqrt(dot(vec3(_1247, _1250, _1253), vec3(_1247, _1250, _1253)));
    float _1258 = _1257 * _1247;
    float _1259 = _1257 * _1250;
    float _1260 = _1257 * _1253;
    float _4462 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _1261 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _1262 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _4484 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4495 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4506 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4517 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _1266 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _1282 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1322 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1332 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1322);
    float _1333 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1322);
    float _1334 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1322);
    float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
    float _1339 = _1332 * _1338;
    float _1340 = _1333 * _1338;
    float _1341 = _1334 * _1338;
    vec4 _1346 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1348 = _1346.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1520 = sqrt(((_1332 * _1332) + (_1333 * _1333)) + (_1334 * _1334));
        float _1526 = (cbMatDynParam._m0[5u].x * _1520) + cbMatDynParam._m0[5u].y;
        float _4528 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1531 = (cbMatDynParam._m0[5u].z * _1520) + cbMatDynParam._m0[5u].w;
        float _4539 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) - _1527)) + _1527) < ((_1348 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1359 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1360 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1378 = fma(_1260, cbSceneParam._m0[5u].z, fma(_1259, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1258));
    float _1381 = fma(_1260, cbSceneParam._m0[6u].z, fma(_1259, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1258));
    float _1384 = fma(_1260, cbSceneParam._m0[7u].z, fma(_1259, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1258));
    uint _1397 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1398 = _1397 + 9u;
    uint _1399 = _1398 + uint(cbMatDynParam._m0[0u].w);
    float _1405 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * cbInstanceData._m0[_1399].x;
    float _1406 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * cbInstanceData._m0[_1399].y;
    float _1407 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * cbInstanceData._m0[_1399].z;
    float _4550 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1408 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _4561 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1409 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _4572 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1410 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _1411 = 1.0 - _1266;
    float _1412 = _1408 * _1411;
    float _1413 = _1409 * _1411;
    float _1414 = _1410 * _1411;
    float _1419 = (_1408 + (-0.039999999105930328369140625)) * _1266;
    float _1420 = (_1409 + (-0.039999999105930328369140625)) * _1266;
    float _1421 = (_1410 + (-0.039999999105930328369140625)) * _1266;
    float _1422 = _1419 + 0.039999999105930328369140625;
    float _1424 = _1420 + 0.039999999105930328369140625;
    float _1425 = _1421 + 0.039999999105930328369140625;
    vec4 _1434 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1359, cbSceneParam._m0[86u].y * _1360));
    float _1437 = _1434.x * TEXCOORD_7.w;
    float _1438 = dot(vec3(_1258, _1259, _1260), vec3(_1339, _1340, _1341));
    float _1441 = _1438 * 2.0;
    float _1445 = (_1441 * _1258) - _1339;
    float _1446 = (_1441 * _1259) - _1340;
    float _1447 = (_1441 * _1260) - _1341;
    float _1451 = abs(dot(vec3(_1339, _1340, _1341), vec3(_1258, _1259, _1260)));
    float _4583 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1453 = sqrt(_1262);
    float _1466 = exp2((_1453 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1453 * 3.0));
    float _1472 = (1.0 - _1466) * ((_1453 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1473 = _1466 * _1453;
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1840;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1565 = fma(_1509, cbModelParam._m0[26u].z, fma(_1505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1501));
        float _1569 = fma(_1509, cbModelParam._m0[27u].z, fma(_1505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1501));
        float _1573 = fma(_1509, cbModelParam._m0[28u].z, fma(_1505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1501));
        float _1598 = _1501 + _1258;
        float _1599 = _1505 + _1259;
        float _1600 = _1509 + _1260;
        float _1610 = fma(_1600, cbModelParam._m0[26u].z, fma(_1599, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1598)) - _1565;
        float _1611 = fma(_1600, cbModelParam._m0[27u].z, fma(_1599, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1598)) - _1569;
        float _1612 = fma(_1600, cbModelParam._m0[28u].z, fma(_1599, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1598)) - _1573;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1565 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1569 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[34u].z) + ((((((_1573 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1668 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1634.x + (-0.5));
        float _1670 = _1668 * (_1634.y + (-0.5));
        float _1671 = _1668 * (_1634.z + (-0.5));
        float _1678 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1641.x + (-0.5));
        float _1680 = _1678 * (_1641.y + (-0.5));
        float _1681 = _1678 * (_1641.z + (-0.5));
        float _1688 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1648.x + (-0.5));
        float _1690 = _1688 * (_1648.y + (-0.5));
        float _1691 = _1688 * (_1648.z + (-0.5));
        float _1698 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1655.x + (-0.5));
        float _1700 = _1698 * (_1655.y + (-0.5));
        float _1701 = _1698 * (_1655.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1722 = (dot(vec3(_1258, _1259, _1260), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4609 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1732 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4620 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4631 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_1734 + 1.0))) + _1739) * _1702;
        float _1749 = _1670 * 0.5;
        float _1750 = _1680 * 0.5;
        float _1751 = _1690 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_1258, _1259, _1260), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4642 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4653 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4664 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_1776 + 1.0))) + _1781) * _1703;
        float _1791 = _1671 * 0.5;
        float _1792 = _1681 * 0.5;
        float _1793 = _1691 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_1258, _1259, _1260), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4675 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4686 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4697 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_1818 + 1.0))) + _1823) * _1704;
        _1840 = _1671;
        _1842 = _1670;
        _1843 = _1669;
        _1844 = _1681;
        _1845 = _1680;
        _1846 = _1679;
        _1847 = _1691;
        _1848 = _1690;
        _1849 = _1689;
        _1850 = _1704;
        _1851 = _1703;
        _1852 = _1702;
        _1853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1841;
        _1842 = _1841;
        _1843 = _1841;
        _1844 = _1841;
        _1845 = _1841;
        _1846 = _1841;
        _1847 = _1841;
        _1848 = _1841;
        _1849 = _1841;
        _1850 = _1841;
        _1851 = _1841;
        _1852 = _1841;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _2153;
    float _2154;
    float _2155;
    float _2156;
    float _2157;
    float _2158;
    float _2159;
    float _2160;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1884 = fma(_1509, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501));
        float _1888 = fma(_1509, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501));
        float _1892 = fma(_1509, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501));
        float _1915 = _1501 + _1258;
        float _1916 = _1505 + _1259;
        float _1917 = _1509 + _1260;
        float _1927 = fma(_1917, cbModelParam._m0[30u].z, fma(_1916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1915)) - _1884;
        float _1928 = fma(_1917, cbModelParam._m0[31u].z, fma(_1916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1915)) - _1888;
        float _1929 = fma(_1917, cbModelParam._m0[32u].z, fma(_1916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1915)) - _1892;
        float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
        float _1946 = ((_1933 * _1927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1947 = ((_1933 * _1928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1948 = ((_1933 * _1929) / cbModelParam._m0[35u].z) + ((((((_1892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1946, _1947, _1948), 0.0);
        vec4 _1957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1946, _1947, _1948), 0.0);
        vec4 _1964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1946, _1947, _1948), 0.0);
        vec4 _1971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1946, _1947, _1948), 0.0);
        float _1983 = exp2((_1950.w + (-0.5)) * 20.0) * 2.0;
        float _1984 = _1983 * (_1950.x + (-0.5));
        float _1985 = _1983 * (_1950.y + (-0.5));
        float _1986 = _1983 * (_1950.z + (-0.5));
        float _1993 = exp2((_1957.w + (-0.5)) * 20.0) * 2.0;
        float _1994 = _1993 * (_1957.x + (-0.5));
        float _1995 = _1993 * (_1957.y + (-0.5));
        float _1996 = _1993 * (_1957.z + (-0.5));
        float _2003 = exp2((_1964.w + (-0.5)) * 20.0) * 2.0;
        float _2004 = _2003 * (_1964.x + (-0.5));
        float _2005 = _2003 * (_1964.y + (-0.5));
        float _2006 = _2003 * (_1964.z + (-0.5));
        float _2013 = exp2((_1971.w + (-0.5)) * 20.0) * 2.0;
        float _2014 = _2013 * (_1971.x + (-0.5));
        float _2015 = _2013 * (_1971.y + (-0.5));
        float _2016 = _2013 * (_1971.z + (-0.5));
        float _2017 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2018 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2019 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2020 = _1984 * 0.5;
        float _2021 = _1994 * 0.5;
        float _2022 = _2004 * 0.5;
        float _2023 = dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022));
        float _2028 = (_2023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2023);
        float _2036 = (dot(vec3(_1258, _1259, _1260), vec3(_2028 * _2020, _2028 * _2021, _2028 * _2022)) + 1.0) * 0.5;
        float _4738 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2045 = sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022)) / (_2017 + 9.9999997473787516355514526367188e-06);
        float _4749 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2047 = _2046 * 2.0;
        float _2051 = (1.0 - _2046) / (_2046 + 1.0);
        float _4760 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2061 = ((((1.0 - _2052) * (_2047 + 2.0)) * exp2(log2(isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2047 + 1.0))) + _2052) * _2017;
        float _2062 = _1985 * 0.5;
        float _2063 = _1995 * 0.5;
        float _2064 = _2005 * 0.5;
        float _2065 = dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064));
        float _2070 = (_2065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2065);
        float _2078 = (dot(vec3(_1258, _1259, _1260), vec3(_2070 * _2062, _2070 * _2063, _2070 * _2064)) + 1.0) * 0.5;
        float _4771 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2087 = sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064)) / (_2018 + 9.9999997473787516355514526367188e-06);
        float _4782 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2089 = _2088 * 2.0;
        float _2093 = (1.0 - _2088) / (_2088 + 1.0);
        float _4793 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2103 = ((((1.0 - _2094) * (_2089 + 2.0)) * exp2(log2(isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2089 + 1.0))) + _2094) * _2018;
        float _2104 = _1986 * 0.5;
        float _2105 = _1996 * 0.5;
        float _2106 = _2006 * 0.5;
        float _2107 = dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106));
        float _2112 = (_2107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2107);
        float _2120 = (dot(vec3(_1258, _1259, _1260), vec3(_2112 * _2104, _2112 * _2105, _2112 * _2106)) + 1.0) * 0.5;
        float _4804 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2129 = sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106)) / (_2019 + 9.9999997473787516355514526367188e-06);
        float _4815 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2131 = _2130 * 2.0;
        float _2135 = (1.0 - _2130) / (_2130 + 1.0);
        float _4826 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2145 = ((((1.0 - _2136) * (_2131 + 2.0)) * exp2(log2(isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2131 + 1.0))) + _2136) * _2019;
        _2153 = _1986;
        _2154 = _1985;
        _2155 = _1984;
        _2156 = _1996;
        _2157 = _1995;
        _2158 = _1994;
        _2159 = _2006;
        _2160 = _2005;
        _2161 = _2004;
        _2162 = _2019;
        _2163 = _2018;
        _2164 = _2017;
        _2165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)));
        _2166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)));
        _2167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)));
    }
    else
    {
        _2153 = _1841;
        _2154 = _1841;
        _2155 = _1841;
        _2156 = _1841;
        _2157 = _1841;
        _2158 = _1841;
        _2159 = _1841;
        _2160 = _1841;
        _2161 = _1841;
        _2162 = _1841;
        _2163 = _1841;
        _2164 = _1841;
        _2165 = 0.0;
        _2166 = 0.0;
        _2167 = 0.0;
    }
    float _2177 = (cbModelParam._m0[1u].x * (_2165 - _1853)) + _1853;
    float _2178 = (cbModelParam._m0[1u].x * (_2166 - _1854)) + _1854;
    float _2179 = (cbModelParam._m0[1u].x * (_2167 - _1855)) + _1855;
    float _2200 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2178, cbSceneParam._m0[89u].y, _2177 * cbSceneParam._m0[89u].x));
    float _2203 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2178, cbSceneParam._m0[90u].y, _2177 * cbSceneParam._m0[90u].x));
    float _2206 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2177));
    float _2221 = _1445 * 0.5;
    float _2222 = _1446 * 0.5;
    float _2223 = _1447 * 0.5;
    float _2224 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_2155, _2158, _2161, _2164));
    float _2227 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_2154, _2157, _2160, _2163));
    float _2230 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_2153, _2156, _2159, _2162));
    float _2264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2237 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_1840, _1844, _1847, _1850));
        float _2241 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_1842, _1845, _1848, _1851));
        float _2245 = dot(vec4(_2221, _2222, _2223, 1.0), vec4(_1843, _1846, _1849, _1852));
        float _2252 = dot(vec4(cbModelParam._m0[39u]), vec4(_2221, _2222, _2223, 1.0));
        _2264 = dot(vec3(isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0)), isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0)), isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2252) ? 0.0 : (isnan(0.0) ? _2252 : max(0.0, _2252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2264 = 1.0;
    }
    float _2275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2266 = dot(vec4(cbModelParam._m0[40u]), vec4(_2221, _2222, _2223, 1.0));
        _2275 = dot(vec3(isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0)), isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0)), isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2266) ? 0.0 : (isnan(0.0) ? _2266 : max(0.0, _2266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2275 = 1.0;
    }
    float _2279 = (_2275 * cbModelParam._m0[1u].x) + (_2264 * (1.0 - cbModelParam._m0[1u].x));
    float _2289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1262);
    float _2290 = isnan(_2289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2289 : min(cbModelParam._m0[25u].z, _2289));
    float _2370;
    float _2372;
    float _2374;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2337 = fma(_1509, cbModelParam._m0[13u].z, fma(_1505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1501)) + cbModelParam._m0[13u].w;
        float _2341 = fma(_1509, cbModelParam._m0[14u].z, fma(_1505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1501)) + cbModelParam._m0[14u].w;
        float _2345 = fma(_1509, cbModelParam._m0[15u].z, fma(_1505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1501)) + cbModelParam._m0[15u].w;
        float _2348 = fma(_1447, cbModelParam._m0[13u].z, fma(_1446, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1445));
        float _2351 = fma(_1447, cbModelParam._m0[14u].z, fma(_1446, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1445));
        float _2354 = fma(_1447, cbModelParam._m0[15u].z, fma(_1446, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1445));
        float _2382;
        if (_2348 > 0.0)
        {
            _2382 = abs((1.0 - _2337) / _2348);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2348 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2337 + 1.0) / _2348);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2382 = frontier_phi_19_17_ladder;
        }
        float _2584;
        if (_2351 > 0.0)
        {
            _2584 = abs((1.0 - _2341) / _2351);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2341 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2584 = frontier_phi_28_24_ladder;
        }
        float _2838;
        if (_2354 > 0.0)
        {
            _2838 = abs((1.0 - _2345) / _2354);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2345 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2838 = frontier_phi_40_35_ladder;
        }
        float _2840 = isnan(_2584) ? _2382 : (isnan(_2382) ? _2584 : min(_2382, _2584));
        float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
        float _2845 = (_2841 * _2348) + _2337;
        float _2846 = (_2841 * _2351) + _2341;
        float _2847 = (_2841 * _2354) + _2345;
        float _2848 = _2841 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2848;
        float _2852 = _2848 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 > _2852) || ((_2846 < _2850) || ((_2845 < _2850) || (_2845 > _2852))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2847, cbModelParam._m0[9u].z, fma(_2846, cbModelParam._m0[9u].y, _2845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2847, cbModelParam._m0[10u].z, fma(_2846, cbModelParam._m0[10u].y, _2845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2847, cbModelParam._m0[11u].z, fma(_2846, cbModelParam._m0[11u].y, _2845 * cbModelParam._m0[11u].x))), _2290);
            frontier_phi_18_40_ladder = _2975.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2975.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2975.x * cbModelParam._m0[1u].y;
        }
        _2370 = frontier_phi_18_40_ladder_2;
        _2372 = frontier_phi_18_40_ladder_1;
        _2374 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1445, _1446, _1447), _2290);
        _2370 = _2358.x * cbModelParam._m0[1u].y;
        _2372 = _2358.y * cbModelParam._m0[1u].y;
        _2374 = _2358.z * cbModelParam._m0[1u].y;
    }
    float _2378 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1262);
    float _2379 = isnan(_2378) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2378 : min(cbModelParam._m0[25u].w, _2378));
    float _2468;
    float _2470;
    float _2472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2432 = fma(_1509, cbModelParam._m0[21u].z, fma(_1505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1501)) + cbModelParam._m0[21u].w;
        float _2436 = fma(_1509, cbModelParam._m0[22u].z, fma(_1505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1501)) + cbModelParam._m0[22u].w;
        float _2440 = fma(_1509, cbModelParam._m0[23u].z, fma(_1505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1501)) + cbModelParam._m0[23u].w;
        float _2443 = fma(_1447, cbModelParam._m0[21u].z, fma(_1446, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1445));
        float _2446 = fma(_1447, cbModelParam._m0[22u].z, fma(_1446, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1445));
        float _2449 = fma(_1447, cbModelParam._m0[23u].z, fma(_1446, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1445));
        float _2589;
        if (_2443 > 0.0)
        {
            _2589 = abs((1.0 - _2432) / _2443);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2443 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2432 + 1.0) / _2443);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2589 = frontier_phi_30_26_ladder;
        }
        float _2865;
        if (_2446 > 0.0)
        {
            _2865 = abs((1.0 - _2436) / _2446);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2446 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2436 + 1.0) / _2446);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2865 = frontier_phi_42_37_ladder;
        }
        float _3078;
        if (_2449 > 0.0)
        {
            _3078 = abs((1.0 - _2440) / _2449);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2449 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2440 + 1.0) / _2449);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _3078 = frontier_phi_51_48_ladder;
        }
        float _3080 = isnan(_2865) ? _2589 : (isnan(_2589) ? _2865 : min(_2589, _2865));
        float _3081 = isnan(_3078) ? _3080 : (isnan(_3080) ? _3078 : min(_3080, _3078));
        float _3085 = (_3081 * _2443) + _2432;
        float _3086 = (_3081 * _2446) + _2436;
        float _3087 = (_3081 * _2449) + _2440;
        float _3088 = _3081 * 9.9999997473787516355514526367188e-05;
        float _3089 = (-1.0) - _3088;
        float _3091 = _3088 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_3087 > _3091) || ((_3087 < _3089) || ((_3086 > _3091) || ((_3086 < _3089) || ((_3085 < _3089) || (_3085 > _3091))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3287 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3087, cbModelParam._m0[17u].z, fma(_3086, cbModelParam._m0[17u].y, _3085 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3087, cbModelParam._m0[18u].z, fma(_3086, cbModelParam._m0[18u].y, _3085 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3087, cbModelParam._m0[19u].z, fma(_3086, cbModelParam._m0[19u].y, _3085 * cbModelParam._m0[19u].x))), _2379);
            frontier_phi_27_51_ladder = _3287.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3287.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3287.x * cbModelParam._m0[1u].z;
        }
        _2468 = frontier_phi_27_51_ladder_2;
        _2470 = frontier_phi_27_51_ladder_1;
        _2472 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1445, _1446, _1447), _2379);
        _2468 = _2452.x * cbModelParam._m0[1u].z;
        _2470 = _2452.y * cbModelParam._m0[1u].z;
        _2472 = _2452.z * cbModelParam._m0[1u].z;
    }
    float _2485 = (((_1472 * _1422) + _1473) * _1437) * ((cbModelParam._m0[1u].w * (_2468 - _2370)) + _2370);
    float _2487 = (((_1472 * _1424) + _1473) * _1437) * ((cbModelParam._m0[1u].w * (_2470 - _2372)) + _2372);
    float _2489 = (((_1472 * _1425) + _1473) * _1437) * ((cbModelParam._m0[1u].w * (_2472 - _2374)) + _2374);
    float _2492 = fma(_2489, cbSceneParam._m0[89u].z, fma(_2487, cbSceneParam._m0[89u].y, _2485 * cbSceneParam._m0[89u].x));
    float _2495 = fma(_2489, cbSceneParam._m0[90u].z, fma(_2487, cbSceneParam._m0[90u].y, _2485 * cbSceneParam._m0[90u].x));
    float _2498 = fma(_2489, cbSceneParam._m0[91u].z, fma(_2487, cbSceneParam._m0[91u].y, _2485 * cbSceneParam._m0[91u].x));
    uvec4 _2508 = floatBitsToUint(cbInstanceData._m0[_1397 + 5u]);
    uint _2510 = _2508.x * 14u;
    uint _2511 = _2510 + 13u;
    float _2518 = _1437 + (-1.0);
    float _2523 = (cbLight._m0[_2511].x * _2518) + 1.0;
    float _2524 = (cbLight._m0[_2511].y * _2518) + 1.0;
    float _2525 = (cbLight._m0[_2511].z * _2518) + 1.0;
    float _2526 = (cbLight._m0[_2511].w * _2518) + 1.0;
    uint _2527 = _2510 + 5u;
    float _2533 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
    uint _2537 = _2510 + 4u;
    float _2543 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
    uint _2547 = _2510 | 1u;
    float _2558 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_1258, _1259, _1260));
    float _2561 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_1258, _1259, _1260));
    float _4962 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _4973 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2566 = (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * 0.3183098733425140380859375;
    float _2568 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * 0.3183098733425140380859375;
    float _2575 = ((cbLight._m0[_2527].x * _2533) * _2568) + ((cbLight._m0[_2537].x * _2543) * _2566);
    float _2576 = ((_2533 * cbLight._m0[_2527].y) * _2568) + ((_2543 * cbLight._m0[_2537].y) * _2566);
    float _2577 = ((_2533 * cbLight._m0[_2527].z) * _2568) + ((_2543 * cbLight._m0[_2537].z) * _2566);
    uvec4 _2581 = floatBitsToUint(cbLight._m0[_2510 + 12u]);
    bool _2583 = _2581.x == 0u;
    float _2594;
    float _2596;
    float _2598;
    if (_2583)
    {
        _2594 = _2575;
        _2596 = _2576;
        _2598 = _2577;
    }
    else
    {
        uint _2602 = _2510 + 6u;
        float _2618 = (dot(vec3(cbLight._m0[_2510 + 2u].xyz), vec3(_1258, _1259, _1260)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4984 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _2621 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2594 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2575;
        _2596 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2576;
        _2598 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2577;
    }
    bool _2601 = _2581.y == 0u;
    float _2639;
    float _2641;
    float _2643;
    if (_2601)
    {
        _2639 = _2594;
        _2641 = _2596;
        _2643 = _2598;
    }
    else
    {
        uint _2809 = _2510 + 7u;
        float _2825 = (dot(vec3(cbLight._m0[_2510 + 3u].xyz), vec3(_1258, _1259, _1260)) * 0.5) + 0.5;
        float _2826 = _2825 * _2825;
        float _5000 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2827 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _2828 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _2639 = (((cbLight._m0[_2809].x * 0.3183098733425140380859375) * _2827) * _2828) + _2594;
        _2641 = (((cbLight._m0[_2809].y * 0.3183098733425140380859375) * _2827) * _2828) + _2596;
        _2643 = (((cbLight._m0[_2809].z * 0.3183098733425140380859375) * _2827) * _2828) + _2598;
    }
    uint _2646 = _2510 + 8u;
    float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _1262) * 0.949999988079071044921875);
    float _2660 = _2659 * _2659;
    float _2661 = cbLight._m0[_2510].x + _1339;
    float _2662 = cbLight._m0[_2510].y + _1340;
    float _2663 = cbLight._m0[_2510].z + _1341;
    float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
    float _2668 = _2667 * _2661;
    float _2669 = _2667 * _2662;
    float _2670 = _2667 * _2663;
    float _2671 = dot(vec3(_1258, _1259, _1260), vec3(cbLight._m0[_2510].xyz));
    float _5016 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
    float _5027 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _2675 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
    float _2676 = dot(vec3(_1258, _1259, _1260), vec3(_2668, _2669, _2670));
    float _5038 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
    float _2680 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2668, _2669, _2670));
    float _5049 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2684 = _2660 * _2660;
    float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
    float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0)))) * 5.0);
    float _2697 = 0.959999978542327880859375 - _1419;
    float _2699 = 0.959999978542327880859375 - _1420;
    float _2700 = 0.959999978542327880859375 - _1421;
    float _2707 = 1.0 - _2660;
    float _2718 = (0.5 / (((_2675 * ((_2674 * _2707) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _2707) + _2660) * _2674))) * _2674;
    float _5060 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2720 = (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
    uint _2731 = _2510 + 9u;
    float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _1262) * 0.949999988079071044921875);
    float _2743 = _2742 * _2742;
    float _2744 = cbLight._m0[_2547].x + _1339;
    float _2745 = cbLight._m0[_2547].y + _1340;
    float _2746 = cbLight._m0[_2547].z + _1341;
    float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
    float _2751 = _2750 * _2744;
    float _2752 = _2750 * _2745;
    float _2753 = _2750 * _2746;
    float _2754 = dot(vec3(_1258, _1259, _1260), vec3(cbLight._m0[_2547].xyz));
    float _5071 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
    float _2758 = dot(vec3(_1258, _1259, _1260), vec3(_2751, _2752, _2753));
    float _5082 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
    float _2762 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2751, _2752, _2753));
    float _5093 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2766 = _2743 * _2743;
    float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
    float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0)))) * 5.0);
    float _2784 = 1.0 - _2743;
    float _2794 = (0.5 / (((_2675 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _2784) + _2743) * _2757))) * _2757;
    float _5104 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2796 = (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
    float _2806 = (((((_2777 * _2697) + _1422) * cbLight._m0[_2731].x) * _2796) * _2533) + (((((_2696 * _2697) + _1422) * cbLight._m0[_2646].x) * _2720) * _2543);
    float _2807 = (((((_2777 * _2699) + _1424) * cbLight._m0[_2731].y) * _2796) * _2533) + (((((_2696 * _2699) + _1424) * cbLight._m0[_2646].y) * _2720) * _2543);
    float _2808 = (((((_2777 * _2700) + _1425) * cbLight._m0[_2731].z) * _2796) * _2533) + (((((_2696 * _2700) + _1425) * cbLight._m0[_2646].z) * _2720) * _2543);
    float _2870;
    float _2872;
    float _2874;
    if (_2583)
    {
        _2870 = _2806;
        _2872 = _2807;
        _2874 = _2808;
    }
    else
    {
        uint _2876 = _2510 + 2u;
        uint _2880 = _2510 + 10u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _1262) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _1339;
        float _2897 = cbLight._m0[_2876].y + _1340;
        float _2898 = cbLight._m0[_2876].z + _1341;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_1258, _1259, _1260), vec3(cbLight._m0[_2876].xyz));
        float _5115 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
        float _2910 = dot(vec3(_1258, _1259, _1260), vec3(_2903, _2904, _2905));
        float _5126 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _5137 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2675 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _2936) + _2895) * _2909))) * _2909;
        float _5148 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2870 = (((((_2929 * _2697) + _1422) * cbLight._m0[_2880].x) * _2948) * _2949) + _2806;
        _2872 = (((((_2929 * _2699) + _1424) * cbLight._m0[_2880].y) * _2948) * _2949) + _2807;
        _2874 = (((((_2929 * _2700) + _1425) * cbLight._m0[_2880].z) * _2948) * _2949) + _2808;
    }
    float _2984;
    float _2986;
    float _2988;
    if (_2601)
    {
        _2984 = _2870;
        _2986 = _2872;
        _2988 = _2874;
    }
    else
    {
        uint _2995 = _2510 + 3u;
        uint _2999 = _2510 + 11u;
        float _3013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2995].w)) * _1262) * 0.949999988079071044921875);
        float _3014 = _3013 * _3013;
        float _3015 = cbLight._m0[_2995].x + _1339;
        float _3016 = cbLight._m0[_2995].y + _1340;
        float _3017 = cbLight._m0[_2995].z + _1341;
        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
        float _3022 = _3021 * _3015;
        float _3023 = _3021 * _3016;
        float _3024 = _3021 * _3017;
        float _3025 = dot(vec3(_1258, _1259, _1260), vec3(cbLight._m0[_2995].xyz));
        float _5164 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
        float _3029 = dot(vec3(_1258, _1259, _1260), vec3(_3022, _3023, _3024));
        float _5175 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
        float _3033 = dot(vec3(cbLight._m0[_2995].xyz), vec3(_3022, _3023, _3024));
        float _5186 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3037 = _3014 * _3014;
        float _3041 = ((_3032 * _3032) * (_3037 + (-1.0))) + 1.0;
        float _3048 = exp2(log2(1.0 - (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0)))) * 5.0);
        float _3055 = 1.0 - _3014;
        float _3065 = (0.5 / (((_2675 * ((_3028 * _3055) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _3055) + _3014) * _3028))) * _3028;
        float _5197 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3067 = (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3037 / ((_3041 * _3041) * 3.141590118408203125));
        float _3068 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _2984 = (((((_3048 * _2697) + _1422) * cbLight._m0[_2999].x) * _3067) * _3068) + _2870;
        _2986 = (((((_3048 * _2699) + _1424) * cbLight._m0[_2999].y) * _3067) * _3068) + _2872;
        _2988 = (((((_3048 * _2700) + _1425) * cbLight._m0[_2999].z) * _3067) * _3068) + _2874;
    }
    float _3202;
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    float _3212;
    if (_2508.y == 0u)
    {
        float _3143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3143;
        float _3145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3143;
        float _3146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3143;
        uvec4 _3158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3159 = _3158.x;
        uint _3170 = uint((float(_3158.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1360) / _3159))) + floor(float(uint(cbSceneParam._m0[85u].x * _1359) / _3159)));
        float _3180 = (log2(_3146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3181 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
        uint _3184 = uint(isnan(14.0) ? _3181 : (isnan(_3181) ? 14.0 : min(_3181, 14.0)));
        uvec4 _3189 = texelFetch(g_lightClusterGridBuffer, int(((_3184 << 2u) + (_3170 << 6u)) >> 2u));
        uint _3190 = _3189.x;
        uint _3191 = _3158.z;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        float _3300;
        float _3302;
        if (((((1u << ((_3191 >> 4u) & 15u)) + 4294967295u) & _3190) == 0u) || ((_3191 & 240u) == 0u))
        {
            _3292 = 0.0;
            _3294 = 0.0;
            _3296 = 0.0;
            _3298 = 0.0;
            _3300 = 0.0;
            _3302 = 0.0;
        }
        else
        {
            float _3293;
            float _3295;
            float _3297;
            float _3299;
            float _3301;
            float _3303;
            float _3444 = 0.0;
            float _3445 = 0.0;
            float _3446 = 0.0;
            float _3447 = 0.0;
            float _3448 = 0.0;
            float _3449 = 0.0;
            uint _3450 = 0u;
            uint _3459;
            bool _3460;
            for (;;)
            {
                _3459 = texelFetch(g_lightClassification, int((((_3184 << 5u) + (_3170 << 9u)) + (_3450 << 2u)) >> 2u)).x;
                _3460 = _3459 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3460)
                {
                    frontier_phi_68_pred = _3446;
                    frontier_phi_68_pred_1 = _3449;
                    frontier_phi_68_pred_2 = _3448;
                    frontier_phi_68_pred_3 = _3447;
                    frontier_phi_68_pred_4 = _3445;
                    frontier_phi_68_pred_5 = _3444;
                }
                else
                {
                    float _3589;
                    float _3590;
                    float _3591;
                    float _3592;
                    float _3593;
                    float _3594;
                    uint _3595;
                    _3589 = _3444;
                    _3590 = _3445;
                    _3591 = _3446;
                    _3592 = _3447;
                    _3593 = _3448;
                    _3594 = _3449;
                    _3595 = _3459;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    for (;;)
                    {
                        uint _3599 = uint(findLSB(_3595)) + (_3450 << 5u);
                        uint _3596 = (_3595 + 4294967295u) & _3595;
                        uint _3601 = _3599 * 48u;
                        vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3601)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 3u)).x));
                        uint _3621 = (_3599 * 48u) + 4u;
                        vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3621)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 3u)).x));
                        uint _3640 = (_3599 * 48u) + 8u;
                        vec3 _3651 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x));
                        float _3655 = _3615.x - _3144;
                        float _3656 = _3615.y - _3145;
                        float _3657 = _3615.z - _3146;
                        float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                        float _3661 = inversesqrt(_3658);
                        float _3662 = _3661 * _3655;
                        float _3663 = _3661 * _3656;
                        float _3664 = _3661 * _3657;
                        float _3665 = dot(vec3(_1378, _1381, _1384), vec3(_3662, _3663, _3664));
                        float _3670 = 1.0 - (_3658 * _3615.w);
                        float _5223 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3671 = isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0));
                        float _3672 = sqrt(_3658) * _3634.w;
                        float _3674 = 1.39999997615814208984375 / (_3672 + 1.39999997615814208984375);
                        float _3675 = _3674 * _3674;
                        float _3678 = ((1.0 - _3675) * _3665) + _3675;
                        float _3681 = _3672 * _3672;
                        float _3685 = ((isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0))) * _3671) / ((_3681 * 0.699999988079071044921875) + 1.0);
                        float _3689 = (-0.0) - _3144;
                        float _3690 = (-0.0) - _3145;
                        float _3691 = (-0.0) - _3146;
                        float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                        float _3696 = _3695 * _3689;
                        float _3697 = _3695 * _3690;
                        float _3698 = _3695 * _3691;
                        float _3706 = exp2(log2(1.0 / ((_3681 * 3.5) + 5.0)) * 0.25);
                        float _3707 = 1.0 - _1453;
                        float _3714 = sqrt(1.0 - ((1.0 - (_3707 * _3707)) * (1.0 - (_3706 * _3706))));
                        float _3715 = _3714 * _3714;
                        float _3716 = _3715 * _3715;
                        float _3717 = _3696 + _3662;
                        float _3718 = _3697 + _3663;
                        float _3719 = _3698 + _3664;
                        float _3723 = inversesqrt(dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719)));
                        float _3727 = dot(vec3(_1378, _1381, _1384), vec3(_3696, _3697, _3698));
                        float _5239 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                        float _3730 = isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0));
                        float _3731 = dot(vec3(_1378, _1381, _1384), vec3(_3723 * _3717, _3723 * _3718, _3723 * _3719));
                        float _5250 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3734 = isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0));
                        float _3738 = ((_3734 * _3734) * (_3716 + (-1.0))) + 1.0;
                        float _3739 = _3674 * _3715;
                        float _3740 = _3739 * _3739;
                        float _3743 = ((1.0 - _3740) * _3665) + _3740;
                        float _5261 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3744 = isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0));
                        float _3745 = 1.0 - _3715;
                        float _3755 = (0.5 / (((_3744 * ((_3730 * _3745) + _3715)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3715) * _3730))) * _3744;
                        float _5272 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3766 = (((_3716 * 3.1415927410125732421875) * (isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0)))) / ((_3738 * _3738) * ((_3681 * 2.1991131305694580078125) + 3.141590118408203125))) * _3671;
                        _3519 = (_3685 * _3634.x) + _3592;
                        _3520 = (_3685 * _3634.y) + _3593;
                        _3521 = (_3685 * _3634.z) + _3594;
                        _3516 = (_3766 * _3651.x) + _3589;
                        _3517 = (_3766 * _3651.y) + _3590;
                        _3518 = (_3766 * _3651.z) + _3591;
                        if (_3596 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3589 = _3516;
                            _3590 = _3517;
                            _3591 = _3518;
                            _3592 = _3519;
                            _3593 = _3520;
                            _3594 = _3521;
                            _3595 = _3596;
                        }
                    }
                    frontier_phi_68_pred = _3518;
                    frontier_phi_68_pred_1 = _3521;
                    frontier_phi_68_pred_2 = _3520;
                    frontier_phi_68_pred_3 = _3519;
                    frontier_phi_68_pred_4 = _3517;
                    frontier_phi_68_pred_5 = _3516;
                }
                _3297 = frontier_phi_68_pred;
                _3303 = frontier_phi_68_pred_1;
                _3301 = frontier_phi_68_pred_2;
                _3299 = frontier_phi_68_pred_3;
                _3295 = frontier_phi_68_pred_4;
                _3293 = frontier_phi_68_pred_5;
                uint _3451 = _3450 + 1u;
                if (_3451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3444 = _3293;
                    _3445 = _3295;
                    _3446 = _3297;
                    _3447 = _3299;
                    _3448 = _3301;
                    _3449 = _3303;
                    _3450 = _3451;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3292 = _3293;
            _3294 = _3295;
            _3296 = _3297;
            _3298 = _3299;
            _3300 = _3301;
            _3302 = _3303;
        }
        uvec4 _3306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3307 = _3306.z;
        uint _3309 = (_3307 >> 8u) & 15u;
        float _3412;
        float _3414;
        float _3416;
        float _3418;
        float _3420;
        float _3422;
        if (((4294967295u << _3309) & _3190) == 0u)
        {
            _3412 = _3292;
            _3414 = _3294;
            _3416 = _3296;
            _3418 = _3298;
            _3420 = _3300;
            _3422 = _3302;
        }
        else
        {
            float _3437 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
            float _3438 = _3437 * _3144;
            float _3439 = _3437 * _3145;
            float _3440 = _3437 * _3146;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3309 < ((_3307 >> 12u) & 15u))
            {
                float _3413;
                float _3415;
                float _3417;
                float _3419;
                float _3421;
                float _3423;
                float _3572 = _3292;
                float _3573 = _3294;
                float _3574 = _3296;
                float _3575 = _3298;
                float _3576 = _3300;
                float _3577 = _3302;
                uint _3578 = _3309;
                uint _3587;
                bool _3588;
                for (;;)
                {
                    _3587 = texelFetch(g_lightClassification, int((((_3184 << 5u) + (_3170 << 9u)) + (_3578 << 2u)) >> 2u)).x;
                    _3588 = _3587 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3588)
                    {
                        frontier_phi_79_pred = _3577;
                        frontier_phi_79_pred_1 = _3576;
                        frontier_phi_79_pred_2 = _3575;
                        frontier_phi_79_pred_3 = _3574;
                        frontier_phi_79_pred_4 = _3573;
                        frontier_phi_79_pred_5 = _3572;
                    }
                    else
                    {
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _4073;
                        float _4074;
                        float _4075;
                        float _4076;
                        float _4077;
                        float _4078;
                        float _3793 = _3572;
                        float _3794 = _3573;
                        float _3795 = _3574;
                        float _3796 = _3575;
                        float _3797 = _3576;
                        float _3798 = _3577;
                        uint _3799 = _3587;
                        uint _3800;
                        vec4 _3825;
                        float _3826;
                        vec4 _3841;
                        vec3 _3853;
                        vec4 _3868;
                        vec4 _3883;
                        float _3929;
                        bool _3930;
                        for (;;)
                        {
                            uint _3810 = ((_3578 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3799));
                            _3800 = (_3799 + 4294967295u) & _3799;
                            uint _3812 = _3810 * 40u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            _3826 = _3825.w;
                            uint _3828 = (_3810 * 40u) + 4u;
                            _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            uint _3843 = (_3810 * 40u) + 8u;
                            _3853 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x));
                            uint _3855 = (_3810 * 40u) + 16u;
                            _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            uint _3870 = (_3810 * 40u) + 20u;
                            _3883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3870 + 3u)).x));
                            uint _3885 = (_3810 * 40u) + 24u;
                            vec4 _3898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 3u)).x));
                            uint _3904 = (_3810 * 40u) + 28u;
                            vec4 _3917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 3u)).x));
                            _3929 = fma(_3146, _3917.z, fma(_3145, _3917.y, _3917.x * _3144)) + _3917.w;
                            _3930 = !((fma(_3146, _3898.z, fma(_3145, _3898.y, _3898.x * _3144)) + _3898.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3930)
                            {
                                float _3957 = _3825.x - _3144;
                                float _3958 = _3825.y - _3145;
                                float _3959 = _3825.z - _3146;
                                float _3960 = dot(vec3(_3957, _3958, _3959), vec3(_3957, _3958, _3959));
                                float _3963 = inversesqrt(_3960);
                                float _3964 = _3963 * _3957;
                                float _3965 = _3963 * _3958;
                                float _3966 = _3963 * _3959;
                                float _3970 = 1.0 - (_3960 / (_3826 * _3826));
                                float _5283 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5283 : (isnan(_5283) ? 1.0 : min(_5283, 1.0));
                                float _3975 = sqrt(_3960) * _3841.w;
                                float _3977 = 1.39999997615814208984375 / (_3975 + 1.39999997615814208984375);
                                float _3978 = _3977 * _3977;
                                float _3981 = ((1.0 - _3978) * dot(vec3(_3964, _3965, _3966), vec3(_1378, _1381, _1384))) + _3978;
                                float _3984 = _3975 * _3975;
                                float _3988 = (fma(_3146, _3868.z, fma(_3145, _3868.y, _3868.x * _3144)) + _3868.w) / _3929;
                                float _3989 = (fma(_3146, _3883.z, fma(_3145, _3883.y, _3883.x * _3144)) + _3883.w) / _3929;
                                float _3993 = 1.0 - dot(vec2(_3988, _3989), vec2(_3988, _3989));
                                float _5299 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _3994 = isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0));
                                float _3995 = _3994 * (((isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0))) * _3971) / ((_3984 * 0.699999988079071044921875) + 1.0));
                                float _4007 = exp2(log2(1.0 / ((_3984 * 3.5) + 5.0)) * 0.25);
                                float _4008 = 1.0 - _1453;
                                float _4015 = sqrt(1.0 - ((1.0 - (_4008 * _4008)) * (1.0 - (_4007 * _4007))));
                                float _4016 = _4015 * _4015;
                                float _4017 = _4016 * _4016;
                                float _4018 = _3964 - _3438;
                                float _4019 = _3965 - _3439;
                                float _4020 = _3966 - _3440;
                                float _4024 = inversesqrt(dot(vec3(_4018, _4019, _4020), vec3(_4018, _4019, _4020)));
                                float _4028 = dot(vec3(_1378, _1381, _1384), vec3((-0.0) - _3438, (-0.0) - _3439, (-0.0) - _3440));
                                float _5310 = isnan(0.0) ? _4028 : (isnan(_4028) ? 0.0 : max(_4028, 0.0));
                                float _4031 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
                                float _4032 = dot(vec3(_1378, _1381, _1384), vec3(_4024 * _4018, _4024 * _4019, _4024 * _4020));
                                float _5321 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4035 = isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0));
                                float _4039 = ((_4035 * _4035) * (_4017 + (-1.0))) + 1.0;
                                float _4040 = _3977 * _4016;
                                float _4041 = _4040 * _4040;
                                float _4047 = ((1.0 - _4041) * dot(vec3(_1378, _1381, _1384), vec3(_3964, _3965, _3966))) + _4041;
                                float _5332 = isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0));
                                float _4048 = isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0));
                                float _4049 = 1.0 - _4016;
                                float _4059 = (0.5 / (((_4048 * ((_4031 * _4049) + _4016)) + 9.9999999392252902907785028219223e-09) + (((_4048 * _4049) + _4016) * _4031))) * _4048;
                                float _5343 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                                float _4069 = (_3994 * _3971) * (((_4017 * 3.1415927410125732421875) * (isnan(1.0) ? _5343 : (isnan(_5343) ? 1.0 : min(_5343, 1.0)))) / ((_4039 * _4039) * ((_3984 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3995 * _3841.z;
                                frontier_phi_85_pred_1 = _3995 * _3841.y;
                                frontier_phi_85_pred_2 = _3995 * _3841.x;
                                frontier_phi_85_pred_3 = _4069 * _3853.z;
                                frontier_phi_85_pred_4 = _4069 * _3853.y;
                                frontier_phi_85_pred_5 = _4069 * _3853.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _4078 = frontier_phi_85_pred;
                            _4077 = frontier_phi_85_pred_1;
                            _4076 = frontier_phi_85_pred_2;
                            _4075 = frontier_phi_85_pred_3;
                            _4074 = frontier_phi_85_pred_4;
                            _4073 = frontier_phi_85_pred_5;
                            _3783 = _4076 + _3796;
                            _3784 = _4077 + _3797;
                            _3785 = _4078 + _3798;
                            _3780 = _4073 + _3793;
                            _3781 = _4074 + _3794;
                            _3782 = _4075 + _3795;
                            if (_3800 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3793 = _3780;
                                _3794 = _3781;
                                _3795 = _3782;
                                _3796 = _3783;
                                _3797 = _3784;
                                _3798 = _3785;
                                _3799 = _3800;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3785;
                        frontier_phi_79_pred_1 = _3784;
                        frontier_phi_79_pred_2 = _3783;
                        frontier_phi_79_pred_3 = _3782;
                        frontier_phi_79_pred_4 = _3781;
                        frontier_phi_79_pred_5 = _3780;
                    }
                    _3423 = frontier_phi_79_pred;
                    _3421 = frontier_phi_79_pred_1;
                    _3419 = frontier_phi_79_pred_2;
                    _3417 = frontier_phi_79_pred_3;
                    _3415 = frontier_phi_79_pred_4;
                    _3413 = frontier_phi_79_pred_5;
                    uint _3579 = _3578 + 1u;
                    if (_3579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3572 = _3413;
                        _3573 = _3415;
                        _3574 = _3417;
                        _3575 = _3419;
                        _3576 = _3421;
                        _3577 = _3423;
                        _3578 = _3579;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3419;
                frontier_phi_60_61_ladder_1 = _3423;
                frontier_phi_60_61_ladder_2 = _3421;
                frontier_phi_60_61_ladder_3 = _3417;
                frontier_phi_60_61_ladder_4 = _3415;
                frontier_phi_60_61_ladder_5 = _3413;
            }
            else
            {
                frontier_phi_60_61_ladder = _3298;
                frontier_phi_60_61_ladder_1 = _3302;
                frontier_phi_60_61_ladder_2 = _3300;
                frontier_phi_60_61_ladder_3 = _3296;
                frontier_phi_60_61_ladder_4 = _3294;
                frontier_phi_60_61_ladder_5 = _3292;
            }
            _3412 = frontier_phi_60_61_ladder_5;
            _3414 = frontier_phi_60_61_ladder_4;
            _3416 = frontier_phi_60_61_ladder_3;
            _3418 = frontier_phi_60_61_ladder;
            _3420 = frontier_phi_60_61_ladder_2;
            _3422 = frontier_phi_60_61_ladder_1;
        }
        float _3427 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
        _3202 = (_3427 * _3418) + _2639;
        _3204 = (_3427 * _3420) + _2641;
        _3206 = (_3427 * _3422) + _2643;
        _3208 = ((_3412 * _1422) * _3427) + _2984;
        _3210 = ((_3414 * _1424) * _3427) + _2986;
        _3212 = ((_3416 * _1425) * _3427) + _2988;
    }
    else
    {
        _3202 = _2639;
        _3204 = _2641;
        _3206 = _2643;
        _3208 = _2984;
        _3210 = _2986;
        _3212 = _2988;
    }
    float _5359 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
    float _5370 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _5381 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _5392 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _3230 = ((isnan(1.0) ? _5359 : (isnan(_5359) ? 1.0 : min(_5359, 1.0))) * (_3202 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1437))) + ((_3208 + ((isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0))) * _2279)) * cbPerFrame._m0[3u].x);
    float _3231 = ((isnan(1.0) ? _5370 : (isnan(_5370) ? 1.0 : min(_5370, 1.0))) * (_3204 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1437))) + ((_3210 + ((isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))) * _2279)) * cbPerFrame._m0[3u].x);
    float _3232 = ((isnan(1.0) ? _5381 : (isnan(_5381) ? 1.0 : min(_5381, 1.0))) * (_3206 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1437))) + ((_3212 + ((isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))) * _2279)) * cbPerFrame._m0[3u].x);
    float _3237 = cbInstanceData._m0[_1397 + 6u].w * (isnan(1.0) ? _5392 : (isnan(_5392) ? 1.0 : min(_5392, 1.0)));
    float _3242 = _1359 / cbSceneParam._m0[86u].x;
    float _3243 = _1360 / cbSceneParam._m0[86u].y;
    vec4 _3257 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3242, _3243, (log2((isnan(cbSceneParam._m0[77u].w) ? _1282 : (isnan(_1282) ? cbSceneParam._m0[77u].w : min(_1282, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3259 = _3257.x;
    float _3260 = _3257.y;
    float _3261 = _3257.z;
    float _3262 = _3257.w;
    float _3354;
    float _3356;
    float _3358;
    float _3360;
    if (_1282 > cbSceneParam._m0[78u].w)
    {
        float _3317 = isnan(_1282) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1282 : min(cbSceneParam._m0[80u].w, _1282));
        float _3318 = _3317 / _1282;
        float _3329 = _3318 * _1332;
        float _3330 = _1333 * _3318;
        float _3331 = (-0.0) - _3330;
        float _3332 = _3318 * _1334;
        float _3334 = (cbSceneParam._m0[77u].w * _3331) / _3317;
        float _3335 = _3334 + cbSceneParam._m0[79u].w;
        float _3336 = cbSceneParam._m0[79u].w - _3330;
        float _3342 = sqrt(((_3329 * _3329) + (_3330 * _3330)) + (_3332 * _3332));
        float _3345 = (1.0 - (cbSceneParam._m0[77u].w / _3317)) * _3342;
        float _3350 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3352 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3529;
        if (abs((_3331 - _3334) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3529 = ((((_3335 > 0.0) ? exp2(_3350 * _3335) : (2.0 - exp2(_3352 * _3335))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3345;
        }
        else
        {
            float _3473 = 1.0 / cbSceneParam._m0[80u].x;
            float _3474 = isnan(_3336) ? _3335 : (isnan(_3335) ? _3336 : max(_3335, _3336));
            float _3475 = isnan(_3336) ? _3335 : (isnan(_3335) ? _3336 : min(_3335, _3336));
            float _3484 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : min(_3474, 0.0));
            float _3485 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : min(_3475, 0.0));
            _3529 = ((abs(_3342 / _3331) * cbSceneParam._m0[80u].y) * ((((_3484 - _3485) * 2.0) - ((exp2(_3350 * (isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0)))) - exp2(_3350 * (isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))))) * _3473)) - ((exp2(_3352 * _3484) - exp2(_3352 * _3485)) * _3473))) + (_3345 * cbSceneParam._m0[80u].z);
        }
        vec4 _3531 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3242, _3243, 1.0), 0.0);
        float _3540 = exp2((_3529 * (-1.44269502162933349609375)) * (1.0 - _3531.w));
        float _3541 = log2(_3540);
        float _3557 = log2(_3262);
        _3354 = (exp2(_3557 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3541 * cbSceneParam._m0[78u].x)) * _3531.x) / cbSceneParam._m0[78u].x)) + _3259;
        _3356 = (exp2(_3557 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3541 * cbSceneParam._m0[78u].y)) * _3531.y) / cbSceneParam._m0[78u].y)) + _3260;
        _3358 = (exp2(_3557 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3541 * cbSceneParam._m0[78u].z)) * _3531.z) / cbSceneParam._m0[78u].z)) + _3261;
        _3360 = _3540 * _3262;
    }
    else
    {
        _3354 = _3259;
        _3356 = _3260;
        _3358 = _3261;
        _3360 = _3262;
    }
    bool _3567;
    vec4 _3370;
    vec4 _3392;
    float _3394;
    float _3398;
    float _3399;
    float _3400;
    float _3401;
    bool _3411;
    for (;;)
    {
        _3370 = cbMatDynParam._m0[0u];
        float _3372 = roundEven(_3370.y);
        bool _3373 = _3372 == 3.0;
        float _3374 = log2(_3360);
        float _3381 = exp2(_3374 * cbSceneParam._m0[78u].x) * _3230;
        float _3382 = exp2(_3374 * cbSceneParam._m0[78u].y) * _3231;
        float _3383 = exp2(_3374 * cbSceneParam._m0[78u].z) * _3232;
        float _3390 = _1348 + (-0.5);
        _3392 = cbMtdParam._m0[1u];
        _3394 = _3392.y * _3390;
        float _3397 = (_3372 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3398 = _3397 * (_3373 ? _3381 : (_3381 + (cbSceneParam._m0[72u].w * _3354)));
        _3399 = _3397 * (_3373 ? _3382 : (_3382 + (cbSceneParam._m0[72u].w * _3356)));
        _3400 = _3397 * (_3373 ? _3383 : (_3383 + (cbSceneParam._m0[72u].w * _3358)));
        _3401 = _3390 * 0.999000012874603271484375;
        _3411 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3411)
        {
            if ((cbInstanceData._m0[_1397 + 7u].x + _3401) < 0.5)
            {
                _3567 = true;
                break;
            }
        }
        uint _3508 = _1398 + uint(_3370.w);
        if ((cbInstanceData._m0[_3508].w < 1.0) && ((cbInstanceData._m0[_3508].w + _3401) < 0.5))
        {
            _3567 = true;
            break;
        }
        if ((_3394 + _613) < _3392.x)
        {
            _3567 = true;
            break;
        }
        _3567 = false;
        break;
    }
    float _3771;
    if (_3567)
    {
        discard_state = true;
        _3771 = 0.0;
    }
    else
    {
        _3771 = _3237;
    }
    SV_Target.x = _3398;
    SV_Target.y = _3399;
    SV_Target.z = _3400;
    SV_Target.w = _3771;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3237;
    discard_exit();
}


