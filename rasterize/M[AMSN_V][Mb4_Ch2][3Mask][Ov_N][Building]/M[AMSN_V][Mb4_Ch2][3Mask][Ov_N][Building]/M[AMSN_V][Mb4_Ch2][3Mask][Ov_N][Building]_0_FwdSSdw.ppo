#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1798;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _250 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _251 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _252 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _256 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _257 = _256 * _250;
    float _258 = _256 * _251;
    float _259 = _256 * _252;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _277 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _278 = _277 * TANGENT_2.x;
    float _279 = _277 * TANGENT_2.y;
    float _280 = _277 * TANGENT_2.z;
    float _285;
    float _286;
    float _287;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _285 = (-0.0) - _264;
        _286 = (-0.0) - _265;
        _287 = (-0.0) - _266;
    }
    else
    {
        _285 = _264;
        _286 = _265;
        _287 = _266;
    }
    vec4 _307 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _319 = 1.0 - ((1.0 - _307.z) * 1.39999997615814208984375);
    float _4149 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _322 = 1.0 - ((1.0 - _307.x) * 1.39999997615814208984375);
    float _4160 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _323 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _325 = 1.0 - ((1.0 - _307.y) * 1.39999997615814208984375);
    float _4171 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _328 = (_323 + _320) + _326;
    float _335 = (_328 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _336 = (_328 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _337 = (_328 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _371 = 1.0 - ((1.0 - _362.x) * 1.39999997615814208984375);
    float _4182 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _382 = (_372 * ((cbMtdParam._m0[9u].x - _335) + ((1.0 - cbMtdParam._m0[9u].x) * _328))) + _335;
    float _383 = (_372 * ((cbMtdParam._m0[9u].y - _336) + ((1.0 - cbMtdParam._m0[9u].y) * _328))) + _336;
    float _384 = (_372 * ((cbMtdParam._m0[9u].z - _337) + ((1.0 - cbMtdParam._m0[9u].z) * _328))) + _337;
    float _397 = 1.0 - ((1.0 - _362.y) * 1.39999997615814208984375);
    float _4193 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _408 = (((cbMtdParam._m0[17u].x - _382) + ((1.0 - cbMtdParam._m0[17u].x) * _328)) * _398) + _382;
    float _409 = (((cbMtdParam._m0[17u].y - _383) + ((1.0 - cbMtdParam._m0[17u].y) * _328)) * _398) + _383;
    float _410 = (((cbMtdParam._m0[17u].z - _384) + ((1.0 - cbMtdParam._m0[17u].z) * _328)) * _398) + _384;
    float _424 = 1.0 - ((1.0 - _362.z) * 1.39999997615814208984375);
    float _4204 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _455 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[23u].w;
    float _470 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _455) + (cbMtdParam._m0[22u].y * TEXCOORD_6))) + 1.0;
    float _4215 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _472 = 1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)));
    float _480 = ((cbMtdParam._m0[21u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _455) + (cbMtdParam._m0[22u].z * TEXCOORD_5))) + 1.0;
    float _4226 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _482 = 1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)));
    vec4 _500 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    float _505 = cbMtdParam._m0[10u].x * _482;
    float _507 = cbMtdParam._m0[10u].y * _482;
    float _509 = cbMtdParam._m0[10u].z * _482;
    float _526 = ((_502 * (cbMtdParam._m0[16u].x - _505)) * _472) + (_505 * _502);
    float _527 = ((_503 * (cbMtdParam._m0[16u].y - _507)) * _472) + (_507 * _503);
    float _528 = ((_504 * (cbMtdParam._m0[16u].z - _509)) * _472) + (_509 * _504);
    float _549 = cbMtdParam._m0[22u].x * (-1.39999997615814208984375);
    float _553 = (_549 * ((TEXCOORD_7.x - _455) + (cbMtdParam._m0[21u].x * TEXCOORD_7.x))) + 1.0;
    float _554 = (_549 * ((TEXCOORD_7.y - _455) + (cbMtdParam._m0[21u].x * TEXCOORD_7.y))) + 1.0;
    float _555 = (_549 * ((TEXCOORD_7.z - _455) + (cbMtdParam._m0[21u].x * TEXCOORD_7.z))) + 1.0;
    float _4237 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4248 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4259 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _564 = (1.0 - cbMtdParam._m0[23u].y) + _323;
    float _567 = _564 * (1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))));
    float _568 = _564 * (1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))));
    float _569 = ((_323 + 1.0) - cbMtdParam._m0[23u].y) * (1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))));
    float _579 = _482 + _472;
    float _580 = _579 + _567;
    float _581 = _579 + _568;
    float _582 = _579 + _569;
    float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _586 = isnan(1.0) ? _583 : (isnan(_583) ? 1.0 : min(_583, 1.0));
    float _587 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    float _588 = isnan(1.0) ? _585 : (isnan(_585) ? 1.0 : min(_585, 1.0));
    vec4 _606 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _611 = _606.w;
    float _612 = _606.x * cbMtdParam._m0[12u].x;
    float _613 = _606.y * cbMtdParam._m0[12u].y;
    float _614 = _606.z * cbMtdParam._m0[12u].z;
    vec4 _633 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _647 = (((_633.x * cbMtdParam._m0[13u].x) - _612) * _323) + _612;
    float _648 = (((_633.y * cbMtdParam._m0[13u].y) - _613) * _323) + _613;
    float _649 = (((_633.z * cbMtdParam._m0[13u].z) - _614) * _323) + _614;
    vec4 _667 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _681 = (((_667.x * cbMtdParam._m0[14u].x) - _647) * _326) + _647;
    float _682 = (((_667.y * cbMtdParam._m0[14u].y) - _648) * _326) + _648;
    float _683 = (((_667.z * cbMtdParam._m0[14u].z) - _649) * _326) + _649;
    vec4 _701 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _715 = (((_701.x * cbMtdParam._m0[15u].x) - _681) * _320) + _681;
    float _716 = (((_701.y * cbMtdParam._m0[15u].y) - _682) * _320) + _682;
    float _717 = (((_701.z * cbMtdParam._m0[15u].z) - _683) * _320) + _683;
    float _737 = ((_715 - (_715 * _586)) + (((_586 * 4.55000019073486328125) * ((_567 * ((cbMtdParam._m0[11u].x * _502) - _526)) + _526)) * _715)) * ((((cbMtdParam._m0[18u].x - _408) + ((1.0 - cbMtdParam._m0[18u].x) * _328)) * _425) + _408);
    float _738 = ((_716 - (_716 * _587)) + (((_587 * 4.55000019073486328125) * ((_568 * ((cbMtdParam._m0[11u].y * _503) - _527)) + _527)) * _716)) * ((((cbMtdParam._m0[18u].y - _409) + ((1.0 - cbMtdParam._m0[18u].y) * _328)) * _425) + _409);
    float _739 = ((_717 - (_588 * _717)) + (((_588 * 4.55000019073486328125) * ((_569 * ((cbMtdParam._m0[11u].z * _504) - _528)) + _528)) * _717)) * ((((cbMtdParam._m0[18u].z - _410) + ((1.0 - cbMtdParam._m0[18u].z) * _328)) * _425) + _410);
    float _753 = ((cbMtdParam._m0[20u].w - cbMtdParam._m0[24u].x) * _586) + cbMtdParam._m0[24u].x;
    float _756 = ((cbMtdParam._m0[20u].x - _753) * _323) + _753;
    float _759 = ((cbMtdParam._m0[20u].y - _756) * _326) + _756;
    float _762 = ((cbMtdParam._m0[20u].z - _759) * _320) + _759;
    vec4 _774 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _778 = _774.z;
    float _782 = (_774.x * 2.0) + (-1.0);
    float _784 = (_774.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_782, _784), vec2(_782, _784));
    float _4300 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _790 = sqrt(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))));
    float _793 = fma(_790, _285, fma(_784, _278, _782 * _257));
    float _796 = fma(_790, _286, fma(_784, _279, _782 * _258));
    float _799 = fma(_790, _287, fma(_784, _280, _782 * _259));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    vec4 _819 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _825 = (_819.x * 2.0) + (-1.0);
    float _826 = (_819.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _4311 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _832 = sqrt(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))));
    float _835 = fma(_832, _285, fma(_826, _278, _825 * _257));
    float _838 = fma(_832, _286, fma(_826, _279, _825 * _258));
    float _841 = fma(_832, _287, fma(_826, _280, _825 * _259));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _851 = fma(_848, _240, fma(_847, _239, _846 * _238));
    float _854 = fma(_848, _273, fma(_847, _272, _846 * _271));
    float _857 = fma(_848, _287, fma(_847, _286, _846 * _285));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    vec4 _874 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _880 = (_874.x * 2.0) + (-1.0);
    float _881 = (_874.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _4322 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _887 = sqrt(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))));
    float _890 = fma(_887, _285, fma(_881, _278, _880 * _257));
    float _893 = fma(_887, _286, fma(_881, _279, _880 * _258));
    float _896 = fma(_887, _287, fma(_881, _280, _880 * _259));
    float _900 = inversesqrt(dot(vec3(_890, _893, _896), vec3(_890, _893, _896)));
    float _901 = _900 * _890;
    float _902 = _900 * _893;
    float _903 = _900 * _896;
    float _906 = fma(_903, _240, fma(_902, _239, _901 * _238));
    float _909 = fma(_903, _273, fma(_902, _272, _901 * _271));
    float _912 = fma(_903, _287, fma(_902, _286, _901 * _285));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    vec4 _929 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _935 = (_929.x * 2.0) + (-1.0);
    float _936 = (_929.y * 2.0) + (-1.0);
    float _937 = dot(vec2(_935, _936), vec2(_935, _936));
    float _4333 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _942 = sqrt(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))));
    float _945 = fma(_942, _285, fma(_936, _278, _935 * _257));
    float _948 = fma(_942, _286, fma(_936, _279, _935 * _258));
    float _951 = fma(_942, _287, fma(_936, _280, _935 * _259));
    float _955 = inversesqrt(dot(vec3(_945, _948, _951), vec3(_945, _948, _951)));
    float _956 = _955 * _945;
    float _957 = _955 * _948;
    float _958 = _955 * _951;
    float _961 = fma(_958, _240, fma(_957, _239, _956 * _238));
    float _964 = fma(_958, _273, fma(_957, _272, _956 * _271));
    float _967 = fma(_958, _287, fma(_957, _286, _956 * _285));
    float _971 = inversesqrt(dot(vec3(_961, _964, _967), vec3(_961, _964, _967)));
    float _977 = fma(_806, _240, fma(_805, _239, _804 * _238));
    float _980 = fma(_806, _273, fma(_805, _272, _804 * _271));
    float _983 = fma(_806, _287, fma(_805, _286, _804 * _285));
    float _987 = inversesqrt(dot(vec3(_977, _980, _983), vec3(_977, _980, _983)));
    float _988 = _987 * _977;
    float _989 = _987 * _980;
    float _990 = _987 * _983;
    float _997 = (((_971 * _961) - _988) * _323) + _988;
    float _998 = (((_971 * _964) - _989) * _323) + _989;
    float _999 = (((_971 * _967) - _990) * _323) + _990;
    vec4 _1012 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1018 = (_1012.x * 2.0) + (-1.0);
    float _1019 = (_1012.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4344 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1025 = sqrt(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))));
    float _1028 = fma(_1025, _285, fma(_1019, _278, _1018 * _257));
    float _1031 = fma(_1025, _286, fma(_1019, _279, _1018 * _258));
    float _1034 = fma(_1025, _287, fma(_1019, _280, _1018 * _259));
    float _1038 = inversesqrt(dot(vec3(_1028, _1031, _1034), vec3(_1028, _1031, _1034)));
    float _1039 = _1038 * _1028;
    float _1040 = _1038 * _1031;
    float _1041 = _1038 * _1034;
    float _1044 = fma(_1041, _240, fma(_1040, _239, _1039 * _238));
    float _1047 = fma(_1041, _273, fma(_1040, _272, _1039 * _271));
    float _1050 = fma(_1041, _287, fma(_1040, _286, _1039 * _285));
    float _1054 = inversesqrt(dot(vec3(_1044, _1047, _1050), vec3(_1044, _1047, _1050)));
    float _1064 = (((_1054 * _1044) - _997) * _326) + _997;
    float _1065 = (((_1054 * _1047) - _998) * _326) + _998;
    float _1066 = (((_1054 * _1050) - _999) * _326) + _999;
    vec4 _1079 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1085 = (_1079.x * 2.0) + (-1.0);
    float _1086 = (_1079.y * 2.0) + (-1.0);
    float _1087 = dot(vec2(_1085, _1086), vec2(_1085, _1086));
    float _4355 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1092 = sqrt(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))));
    float _1095 = fma(_1092, _285, fma(_1086, _278, _1085 * _257));
    float _1098 = fma(_1092, _286, fma(_1086, _279, _1085 * _258));
    float _1101 = fma(_1092, _287, fma(_1086, _280, _1085 * _259));
    float _1105 = inversesqrt(dot(vec3(_1095, _1098, _1101), vec3(_1095, _1098, _1101)));
    float _1106 = _1105 * _1095;
    float _1107 = _1105 * _1098;
    float _1108 = _1105 * _1101;
    float _1111 = fma(_1108, _240, fma(_1107, _239, _1106 * _238));
    float _1114 = fma(_1108, _273, fma(_1107, _272, _1106 * _271));
    float _1117 = fma(_1108, _287, fma(_1107, _286, _1106 * _285));
    float _1121 = inversesqrt(dot(vec3(_1111, _1114, _1117), vec3(_1111, _1114, _1117)));
    float _1131 = (((_1121 * _1117) - _1066) * _320) + _1066;
    vec4 _1143 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1149 = (_1143.x * 2.0) + (-1.0);
    float _1150 = (_1143.y * 2.0) + (-1.0);
    float _1151 = dot(vec2(_1149, _1150), vec2(_1149, _1150));
    float _4366 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1156 = sqrt(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))));
    float _1159 = fma(_1156, _285, fma(_1150, _278, _1149 * _257));
    float _1162 = fma(_1156, _286, fma(_1150, _279, _1149 * _258));
    float _1165 = fma(_1156, _287, fma(_1150, _280, _1149 * _259));
    float _1169 = inversesqrt(dot(vec3(_1159, _1162, _1165), vec3(_1159, _1162, _1165)));
    float _1170 = _1169 * _1159;
    float _1171 = _1169 * _1162;
    float _1172 = _1169 * _1165;
    float _1175 = fma(_1172, _240, fma(_1171, _239, _1170 * _238));
    float _1178 = fma(_1172, _273, fma(_1171, _272, _1170 * _271));
    float _1181 = fma(_1172, _287, fma(_1171, _286, _1170 * _285));
    float _1185 = inversesqrt(dot(vec3(_1175, _1178, _1181), vec3(_1175, _1178, _1181)));
    vec4 _1223 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _1237 = (((((((_906 * _472) * _916) * cbMtdParam._m0[22u].w) + ((((_580 * _564) * _851) * _861) * cbMtdParam._m0[23u].x)) + _1064) + (((_1121 * _1111) - _1064) * _320)) + (((_1175 * _482) * _1185) * cbMtdParam._m0[21u].w)) + (((_1223.x * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1242 = (((((((_909 * _472) * _916) * cbMtdParam._m0[22u].w) + ((((_581 * _564) * _854) * _861) * cbMtdParam._m0[23u].x)) + _1065) + (((_1121 * _1114) - _1065) * _320)) + (((_1178 * _482) * _1185) * cbMtdParam._m0[21u].w)) + (((_1223.y * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1245 = fma(_1131, _285, fma(_1242, _271, _1237 * _238));
    float _1248 = fma(_1131, _286, fma(_1242, _272, _1237 * _239));
    float _1251 = fma(_1131, _287, fma(_1242, _273, _1237 * _240));
    float _1255 = inversesqrt(dot(vec3(_1245, _1248, _1251), vec3(_1245, _1248, _1251)));
    float _1256 = _1255 * _1245;
    float _1257 = _1255 * _1248;
    float _1258 = _1255 * _1251;
    float _4377 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _1259 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _4388 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _1260 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4410 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4421 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4432 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _1264 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _1280 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1320 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1330 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1320);
    float _1331 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1320);
    float _1332 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1320);
    float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
    float _1337 = _1330 * _1336;
    float _1338 = _1331 * _1336;
    float _1339 = _1332 * _1336;
    float _1345 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1346 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1364 = fma(_1258, cbSceneParam._m0[5u].z, fma(_1257, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1256));
    float _1367 = fma(_1258, cbSceneParam._m0[6u].z, fma(_1257, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1256));
    float _1370 = fma(_1258, cbSceneParam._m0[7u].z, fma(_1257, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1256));
    uint _1383 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1385 = (_1383 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * cbInstanceData._m0[_1385].x;
    float _1392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * cbInstanceData._m0[_1385].y;
    float _1393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * cbInstanceData._m0[_1385].z;
    float _4443 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1394 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
    float _1395 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _4465 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1396 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _1397 = 1.0 - _1264;
    float _1398 = _1394 * _1397;
    float _1399 = _1395 * _1397;
    float _1400 = _1396 * _1397;
    float _1405 = (_1394 + (-0.039999999105930328369140625)) * _1264;
    float _1406 = (_1395 + (-0.039999999105930328369140625)) * _1264;
    float _1407 = (_1396 + (-0.039999999105930328369140625)) * _1264;
    float _1408 = _1405 + 0.039999999105930328369140625;
    float _1410 = _1406 + 0.039999999105930328369140625;
    float _1411 = _1407 + 0.039999999105930328369140625;
    vec4 _1420 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1345, cbSceneParam._m0[86u].y * _1346));
    float _1423 = _1420.x * TEXCOORD_7.w;
    float _1424 = dot(vec3(_1256, _1257, _1258), vec3(_1337, _1338, _1339));
    float _1427 = _1424 * 2.0;
    float _1431 = (_1427 * _1256) - _1337;
    float _1432 = (_1427 * _1257) - _1338;
    float _1433 = (_1427 * _1258) - _1339;
    float _1437 = abs(dot(vec3(_1337, _1338, _1339), vec3(_1256, _1257, _1258)));
    float _4476 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _1439 = sqrt(_1260);
    float _1452 = exp2((_1439 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1439 * 3.0));
    float _1458 = (1.0 - _1452) * ((_1439 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1459 = _1452 * _1439;
    float _1487 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1797;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1522 = fma(_1495, cbModelParam._m0[26u].z, fma(_1491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1487));
        float _1526 = fma(_1495, cbModelParam._m0[27u].z, fma(_1491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1487));
        float _1530 = fma(_1495, cbModelParam._m0[28u].z, fma(_1491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1487));
        float _1555 = _1487 + _1256;
        float _1556 = _1491 + _1257;
        float _1557 = _1495 + _1258;
        float _1567 = fma(_1557, cbModelParam._m0[26u].z, fma(_1556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1555)) - _1522;
        float _1568 = fma(_1557, cbModelParam._m0[27u].z, fma(_1556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1555)) - _1526;
        float _1569 = fma(_1557, cbModelParam._m0[28u].z, fma(_1556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1555)) - _1530;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1522 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1526 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[34u].z) + ((((((_1530 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1625 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1591.x + (-0.5));
        float _1627 = _1625 * (_1591.y + (-0.5));
        float _1628 = _1625 * (_1591.z + (-0.5));
        float _1635 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1598.x + (-0.5));
        float _1637 = _1635 * (_1598.y + (-0.5));
        float _1638 = _1635 * (_1598.z + (-0.5));
        float _1645 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1605.x + (-0.5));
        float _1647 = _1645 * (_1605.y + (-0.5));
        float _1648 = _1645 * (_1605.z + (-0.5));
        float _1655 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1612.x + (-0.5));
        float _1657 = _1655 * (_1612.y + (-0.5));
        float _1658 = _1655 * (_1612.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1679 = (dot(vec3(_1256, _1257, _1258), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1689 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4524 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1691 + 1.0))) + _1696) * _1659;
        float _1706 = _1627 * 0.5;
        float _1707 = _1637 * 0.5;
        float _1708 = _1647 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_1256, _1257, _1258), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4557 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1733 + 1.0))) + _1738) * _1660;
        float _1748 = _1628 * 0.5;
        float _1749 = _1638 * 0.5;
        float _1750 = _1648 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_1256, _1257, _1258), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4590 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1775 + 1.0))) + _1780) * _1661;
        _1797 = _1628;
        _1799 = _1627;
        _1800 = _1626;
        _1801 = _1638;
        _1802 = _1637;
        _1803 = _1636;
        _1804 = _1648;
        _1805 = _1647;
        _1806 = _1646;
        _1807 = _1661;
        _1808 = _1660;
        _1809 = _1659;
        _1810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1798;
        _1799 = _1798;
        _1800 = _1798;
        _1801 = _1798;
        _1802 = _1798;
        _1803 = _1798;
        _1804 = _1798;
        _1805 = _1798;
        _1806 = _1798;
        _1807 = _1798;
        _1808 = _1798;
        _1809 = _1798;
        _1810 = 0.0;
        _1811 = 0.0;
        _1812 = 0.0;
    }
    float _2107;
    float _2108;
    float _2109;
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    float _2119;
    float _2120;
    float _2121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1838 = fma(_1495, cbModelParam._m0[30u].z, fma(_1491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1487));
        float _1842 = fma(_1495, cbModelParam._m0[31u].z, fma(_1491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1487));
        float _1846 = fma(_1495, cbModelParam._m0[32u].z, fma(_1491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1487));
        float _1869 = _1487 + _1256;
        float _1870 = _1491 + _1257;
        float _1871 = _1495 + _1258;
        float _1881 = fma(_1871, cbModelParam._m0[30u].z, fma(_1870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1869)) - _1838;
        float _1882 = fma(_1871, cbModelParam._m0[31u].z, fma(_1870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1869)) - _1842;
        float _1883 = fma(_1871, cbModelParam._m0[32u].z, fma(_1870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1869)) - _1846;
        float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
        float _1900 = ((_1887 * _1881) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1838 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1901 = ((_1887 * _1882) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1842 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1902 = ((_1887 * _1883) / cbModelParam._m0[35u].z) + ((((((_1846 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1900, _1901, _1902), 0.0);
        vec4 _1911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1900, _1901, _1902), 0.0);
        vec4 _1918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1900, _1901, _1902), 0.0);
        vec4 _1925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1900, _1901, _1902), 0.0);
        float _1937 = exp2((_1904.w + (-0.5)) * 20.0) * 2.0;
        float _1938 = _1937 * (_1904.x + (-0.5));
        float _1939 = _1937 * (_1904.y + (-0.5));
        float _1940 = _1937 * (_1904.z + (-0.5));
        float _1947 = exp2((_1911.w + (-0.5)) * 20.0) * 2.0;
        float _1948 = _1947 * (_1911.x + (-0.5));
        float _1949 = _1947 * (_1911.y + (-0.5));
        float _1950 = _1947 * (_1911.z + (-0.5));
        float _1957 = exp2((_1918.w + (-0.5)) * 20.0) * 2.0;
        float _1958 = _1957 * (_1918.x + (-0.5));
        float _1959 = _1957 * (_1918.y + (-0.5));
        float _1960 = _1957 * (_1918.z + (-0.5));
        float _1967 = exp2((_1925.w + (-0.5)) * 20.0) * 2.0;
        float _1968 = _1967 * (_1925.x + (-0.5));
        float _1969 = _1967 * (_1925.y + (-0.5));
        float _1970 = _1967 * (_1925.z + (-0.5));
        float _1971 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1972 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1974 = _1938 * 0.5;
        float _1975 = _1948 * 0.5;
        float _1976 = _1958 * 0.5;
        float _1977 = dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976));
        float _1982 = (_1977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1977);
        float _1990 = (dot(vec3(_1256, _1257, _1258), vec3(_1982 * _1974, _1982 * _1975, _1982 * _1976)) + 1.0) * 0.5;
        float _4631 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1999 = sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976)) / (_1971 + 9.9999997473787516355514526367188e-06);
        float _4642 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2001 = _2000 * 2.0;
        float _2005 = (1.0 - _2000) / (_2000 + 1.0);
        float _4653 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2015 = ((((1.0 - _2006) * (_2001 + 2.0)) * exp2(log2(isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2001 + 1.0))) + _2006) * _1971;
        float _2016 = _1939 * 0.5;
        float _2017 = _1949 * 0.5;
        float _2018 = _1959 * 0.5;
        float _2019 = dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018));
        float _2024 = (_2019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2019);
        float _2032 = (dot(vec3(_1256, _1257, _1258), vec3(_2024 * _2016, _2024 * _2017, _2024 * _2018)) + 1.0) * 0.5;
        float _4664 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2041 = sqrt(((_2017 * _2017) + (_2016 * _2016)) + (_2018 * _2018)) / (_1972 + 9.9999997473787516355514526367188e-06);
        float _4675 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2043 = _2042 * 2.0;
        float _2047 = (1.0 - _2042) / (_2042 + 1.0);
        float _4686 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2057 = ((((1.0 - _2048) * (_2043 + 2.0)) * exp2(log2(isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2043 + 1.0))) + _2048) * _1972;
        float _2058 = _1940 * 0.5;
        float _2059 = _1950 * 0.5;
        float _2060 = _1960 * 0.5;
        float _2061 = dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060));
        float _2066 = (_2061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2061);
        float _2074 = (dot(vec3(_1256, _1257, _1258), vec3(_2066 * _2058, _2066 * _2059, _2066 * _2060)) + 1.0) * 0.5;
        float _4697 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2083 = sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060)) / (_1973 + 9.9999997473787516355514526367188e-06);
        float _4708 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2085 = _2084 * 2.0;
        float _2089 = (1.0 - _2084) / (_2084 + 1.0);
        float _4719 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2099 = ((((1.0 - _2090) * (_2085 + 2.0)) * exp2(log2(isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2085 + 1.0))) + _2090) * _1973;
        _2107 = _1940;
        _2108 = _1939;
        _2109 = _1938;
        _2110 = _1950;
        _2111 = _1949;
        _2112 = _1948;
        _2113 = _1960;
        _2114 = _1959;
        _2115 = _1958;
        _2116 = _1973;
        _2117 = _1972;
        _2118 = _1971;
        _2119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)));
        _2120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)));
        _2121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)));
    }
    else
    {
        _2107 = _1798;
        _2108 = _1798;
        _2109 = _1798;
        _2110 = _1798;
        _2111 = _1798;
        _2112 = _1798;
        _2113 = _1798;
        _2114 = _1798;
        _2115 = _1798;
        _2116 = _1798;
        _2117 = _1798;
        _2118 = _1798;
        _2119 = 0.0;
        _2120 = 0.0;
        _2121 = 0.0;
    }
    float _2131 = (cbModelParam._m0[1u].x * (_2119 - _1810)) + _1810;
    float _2132 = (cbModelParam._m0[1u].x * (_2120 - _1811)) + _1811;
    float _2133 = (cbModelParam._m0[1u].x * (_2121 - _1812)) + _1812;
    float _2154 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2132, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2132, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2131));
    float _2175 = _1431 * 0.5;
    float _2176 = _1432 * 0.5;
    float _2177 = _1433 * 0.5;
    float _2178 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_2109, _2112, _2115, _2118));
    float _2181 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_2108, _2111, _2114, _2117));
    float _2184 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_2107, _2110, _2113, _2116));
    float _2218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2191 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_1797, _1801, _1804, _1807));
        float _2195 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_1799, _1802, _1805, _1808));
        float _2199 = dot(vec4(_2175, _2176, _2177, 1.0), vec4(_1800, _1803, _1806, _1809));
        float _2206 = dot(vec4(cbModelParam._m0[39u]), vec4(_2175, _2176, _2177, 1.0));
        _2218 = dot(vec3(isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0)), isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0)), isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2206) ? 0.0 : (isnan(0.0) ? _2206 : max(0.0, _2206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2218 = 1.0;
    }
    float _2229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2220 = dot(vec4(cbModelParam._m0[40u]), vec4(_2175, _2176, _2177, 1.0));
        _2229 = dot(vec3(isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0)), isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)), isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2220) ? 0.0 : (isnan(0.0) ? _2220 : max(0.0, _2220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2229 = 1.0;
    }
    float _2233 = (_2229 * cbModelParam._m0[1u].x) + (_2218 * (1.0 - cbModelParam._m0[1u].x));
    float _2243 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1260);
    float _2244 = isnan(_2243) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2243 : min(cbModelParam._m0[25u].z, _2243));
    float _2324;
    float _2326;
    float _2328;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2291 = fma(_1495, cbModelParam._m0[13u].z, fma(_1491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1487)) + cbModelParam._m0[13u].w;
        float _2295 = fma(_1495, cbModelParam._m0[14u].z, fma(_1491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1487)) + cbModelParam._m0[14u].w;
        float _2299 = fma(_1495, cbModelParam._m0[15u].z, fma(_1491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1487)) + cbModelParam._m0[15u].w;
        float _2302 = fma(_1433, cbModelParam._m0[13u].z, fma(_1432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1431));
        float _2305 = fma(_1433, cbModelParam._m0[14u].z, fma(_1432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1431));
        float _2308 = fma(_1433, cbModelParam._m0[15u].z, fma(_1432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1431));
        float _2336;
        if (_2302 > 0.0)
        {
            _2336 = abs((1.0 - _2291) / _2302);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2302 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2291 + 1.0) / _2302);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2336 = frontier_phi_16_14_ladder;
        }
        float _2559;
        if (_2305 > 0.0)
        {
            _2559 = abs((1.0 - _2295) / _2305);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2305 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2295 + 1.0) / _2305);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2559 = frontier_phi_25_21_ladder;
        }
        float _2816;
        if (_2308 > 0.0)
        {
            _2816 = abs((1.0 - _2299) / _2308);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2308 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2299 + 1.0) / _2308);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2816 = frontier_phi_37_32_ladder;
        }
        float _2818 = isnan(_2559) ? _2336 : (isnan(_2336) ? _2559 : min(_2336, _2559));
        float _2819 = isnan(_2816) ? _2818 : (isnan(_2818) ? _2816 : min(_2818, _2816));
        float _2823 = (_2819 * _2302) + _2291;
        float _2824 = (_2819 * _2305) + _2295;
        float _2825 = (_2819 * _2308) + _2299;
        float _2826 = _2819 * 9.9999997473787516355514526367188e-05;
        float _2828 = (-1.0) - _2826;
        float _2830 = _2826 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2825 > _2830) || ((_2825 < _2828) || ((_2824 > _2830) || ((_2824 < _2828) || ((_2823 < _2828) || (_2823 > _2830))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2825, cbModelParam._m0[9u].z, fma(_2824, cbModelParam._m0[9u].y, _2823 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2825, cbModelParam._m0[10u].z, fma(_2824, cbModelParam._m0[10u].y, _2823 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2825, cbModelParam._m0[11u].z, fma(_2824, cbModelParam._m0[11u].y, _2823 * cbModelParam._m0[11u].x))), _2244);
            frontier_phi_15_37_ladder = _2953.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2953.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2953.x * cbModelParam._m0[1u].y;
        }
        _2324 = frontier_phi_15_37_ladder_2;
        _2326 = frontier_phi_15_37_ladder_1;
        _2328 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1431, _1432, _1433), _2244);
        _2324 = _2312.x * cbModelParam._m0[1u].y;
        _2326 = _2312.y * cbModelParam._m0[1u].y;
        _2328 = _2312.z * cbModelParam._m0[1u].y;
    }
    float _2332 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1260);
    float _2333 = isnan(_2332) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2332 : min(cbModelParam._m0[25u].w, _2332));
    float _2422;
    float _2424;
    float _2426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2386 = fma(_1495, cbModelParam._m0[21u].z, fma(_1491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1487)) + cbModelParam._m0[21u].w;
        float _2390 = fma(_1495, cbModelParam._m0[22u].z, fma(_1491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1487)) + cbModelParam._m0[22u].w;
        float _2394 = fma(_1495, cbModelParam._m0[23u].z, fma(_1491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1487)) + cbModelParam._m0[23u].w;
        float _2397 = fma(_1433, cbModelParam._m0[21u].z, fma(_1432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1431));
        float _2400 = fma(_1433, cbModelParam._m0[22u].z, fma(_1432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1431));
        float _2403 = fma(_1433, cbModelParam._m0[23u].z, fma(_1432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1431));
        float _2564;
        if (_2397 > 0.0)
        {
            _2564 = abs((1.0 - _2386) / _2397);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2397 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2386 + 1.0) / _2397);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2564 = frontier_phi_27_23_ladder;
        }
        float _2843;
        if (_2400 > 0.0)
        {
            _2843 = abs((1.0 - _2390) / _2400);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2400 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2390 + 1.0) / _2400);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2843 = frontier_phi_39_34_ladder;
        }
        float _3056;
        if (_2403 > 0.0)
        {
            _3056 = abs((1.0 - _2394) / _2403);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2403 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2394 + 1.0) / _2403);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _3056 = frontier_phi_48_45_ladder;
        }
        float _3058 = isnan(_2843) ? _2564 : (isnan(_2564) ? _2843 : min(_2564, _2843));
        float _3059 = isnan(_3056) ? _3058 : (isnan(_3058) ? _3056 : min(_3058, _3056));
        float _3063 = (_3059 * _2397) + _2386;
        float _3064 = (_3059 * _2400) + _2390;
        float _3065 = (_3059 * _2403) + _2394;
        float _3066 = _3059 * 9.9999997473787516355514526367188e-05;
        float _3067 = (-1.0) - _3066;
        float _3069 = _3066 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_3065 > _3069) || ((_3065 < _3067) || ((_3064 > _3069) || ((_3064 < _3067) || ((_3063 < _3067) || (_3063 > _3069))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3265 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3065, cbModelParam._m0[17u].z, fma(_3064, cbModelParam._m0[17u].y, _3063 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3065, cbModelParam._m0[18u].z, fma(_3064, cbModelParam._m0[18u].y, _3063 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3065, cbModelParam._m0[19u].z, fma(_3064, cbModelParam._m0[19u].y, _3063 * cbModelParam._m0[19u].x))), _2333);
            frontier_phi_24_48_ladder = _3265.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _3265.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _3265.x * cbModelParam._m0[1u].z;
        }
        _2422 = frontier_phi_24_48_ladder_2;
        _2424 = frontier_phi_24_48_ladder_1;
        _2426 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1431, _1432, _1433), _2333);
        _2422 = _2406.x * cbModelParam._m0[1u].z;
        _2424 = _2406.y * cbModelParam._m0[1u].z;
        _2426 = _2406.z * cbModelParam._m0[1u].z;
    }
    float _2439 = (((_1458 * _1408) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2422 - _2324)) + _2324);
    float _2441 = (((_1458 * _1410) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2424 - _2326)) + _2326);
    float _2443 = (((_1458 * _1411) + _1459) * _1423) * ((cbModelParam._m0[1u].w * (_2426 - _2328)) + _2328);
    float _2446 = fma(_2443, cbSceneParam._m0[89u].z, fma(_2441, cbSceneParam._m0[89u].y, _2439 * cbSceneParam._m0[89u].x));
    float _2449 = fma(_2443, cbSceneParam._m0[90u].z, fma(_2441, cbSceneParam._m0[90u].y, _2439 * cbSceneParam._m0[90u].x));
    float _2452 = fma(_2443, cbSceneParam._m0[91u].z, fma(_2441, cbSceneParam._m0[91u].y, _2439 * cbSceneParam._m0[91u].x));
    vec4 _2460 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1345, _1346));
    float _2462 = _2460.w;
    float _2474 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2462);
    float _2475 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2462);
    float _2476 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2462);
    uvec4 _2480 = floatBitsToUint(cbInstanceData._m0[_1383 + 5u]);
    uint _2482 = _2480.x * 14u;
    uint _2483 = _2482 + 13u;
    float _2490 = _1423 + (-1.0);
    float _2495 = (cbLight._m0[_2483].x * _2490) + 1.0;
    float _2496 = (cbLight._m0[_2483].y * _2490) + 1.0;
    float _2497 = (cbLight._m0[_2483].z * _2490) + 1.0;
    float _2498 = (cbLight._m0[_2483].w * _2490) + 1.0;
    uint _2499 = _2482 + 5u;
    float _2505 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
    uint _2509 = _2482 + 4u;
    float _2518 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2522 = _2482 | 1u;
    float _2533 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_1256, _1257, _1258));
    float _2536 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_1256, _1257, _1258));
    float _4855 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _4866 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2541 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * 0.3183098733425140380859375;
    float _2543 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * 0.3183098733425140380859375;
    float _2550 = ((cbLight._m0[_2499].x * _2505) * _2543) + (((cbLight._m0[_2509].x * _2474) * _2518) * _2541);
    float _2551 = ((_2505 * cbLight._m0[_2499].y) * _2543) + (((cbLight._m0[_2509].y * _2475) * _2518) * _2541);
    float _2552 = ((_2505 * cbLight._m0[_2499].z) * _2543) + (((cbLight._m0[_2509].z * _2476) * _2518) * _2541);
    uvec4 _2556 = floatBitsToUint(cbLight._m0[_2482 + 12u]);
    bool _2558 = _2556.x == 0u;
    float _2569;
    float _2571;
    float _2573;
    if (_2558)
    {
        _2569 = _2550;
        _2571 = _2551;
        _2573 = _2552;
    }
    else
    {
        uint _2577 = _2482 + 6u;
        float _2593 = (dot(vec3(cbLight._m0[_2482 + 2u].xyz), vec3(_1256, _1257, _1258)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4877 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2596 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2569 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2550;
        _2571 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2551;
        _2573 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2552;
    }
    bool _2576 = _2556.y == 0u;
    float _2614;
    float _2616;
    float _2618;
    if (_2576)
    {
        _2614 = _2569;
        _2616 = _2571;
        _2618 = _2573;
    }
    else
    {
        uint _2787 = _2482 + 7u;
        float _2803 = (dot(vec3(cbLight._m0[_2482 + 3u].xyz), vec3(_1256, _1257, _1258)) * 0.5) + 0.5;
        float _2804 = _2803 * _2803;
        float _4893 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2805 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2806 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2614 = (((cbLight._m0[_2787].x * 0.3183098733425140380859375) * _2805) * _2806) + _2569;
        _2616 = (((cbLight._m0[_2787].y * 0.3183098733425140380859375) * _2805) * _2806) + _2571;
        _2618 = (((cbLight._m0[_2787].z * 0.3183098733425140380859375) * _2805) * _2806) + _2573;
    }
    uint _2621 = _2482 + 8u;
    float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _1260) * 0.949999988079071044921875);
    float _2635 = _2634 * _2634;
    float _2636 = cbLight._m0[_2482].x + _1337;
    float _2637 = cbLight._m0[_2482].y + _1338;
    float _2638 = cbLight._m0[_2482].z + _1339;
    float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
    float _2643 = _2642 * _2636;
    float _2644 = _2642 * _2637;
    float _2645 = _2642 * _2638;
    float _2646 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2482].xyz));
    float _4909 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _4920 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _2650 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2651 = dot(vec3(_1256, _1257, _1258), vec3(_2643, _2644, _2645));
    float _4931 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2655 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2643, _2644, _2645));
    float _4942 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = _2635 * _2635;
    float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
    float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
    float _2672 = 0.959999978542327880859375 - _1405;
    float _2674 = 0.959999978542327880859375 - _1406;
    float _2675 = 0.959999978542327880859375 - _1407;
    float _2682 = 1.0 - _2635;
    float _2693 = (0.5 / (((_2650 * ((_2649 * _2682) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _2682) + _2635) * _2649))) * _2649;
    float _4953 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
    uint _2709 = _2482 + 9u;
    float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2522].w)) * _1260) * 0.949999988079071044921875);
    float _2721 = _2720 * _2720;
    float _2722 = cbLight._m0[_2522].x + _1337;
    float _2723 = cbLight._m0[_2522].y + _1338;
    float _2724 = cbLight._m0[_2522].z + _1339;
    float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
    float _2729 = _2728 * _2722;
    float _2730 = _2728 * _2723;
    float _2731 = _2728 * _2724;
    float _2732 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2522].xyz));
    float _4964 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2735 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
    float _2736 = dot(vec3(_1256, _1257, _1258), vec3(_2729, _2730, _2731));
    float _4975 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
    float _2740 = dot(vec3(cbLight._m0[_2522].xyz), vec3(_2729, _2730, _2731));
    float _4986 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2744 = _2721 * _2721;
    float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
    float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
    float _2762 = 1.0 - _2721;
    float _2772 = (0.5 / (((_2650 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _2762) + _2721) * _2735))) * _2735;
    float _4997 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2774 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
    float _2784 = (((((_2755 * _2672) + _1408) * cbLight._m0[_2709].x) * _2774) * _2505) + ((((cbLight._m0[_2621].x * _2474) * ((_2671 * _2672) + _1408)) * _2695) * _2518);
    float _2785 = (((((_2755 * _2674) + _1410) * cbLight._m0[_2709].y) * _2774) * _2505) + ((((cbLight._m0[_2621].y * _2475) * ((_2671 * _2674) + _1410)) * _2695) * _2518);
    float _2786 = (((((_2755 * _2675) + _1411) * cbLight._m0[_2709].z) * _2774) * _2505) + ((((cbLight._m0[_2621].z * _2476) * ((_2671 * _2675) + _1411)) * _2695) * _2518);
    float _2848;
    float _2850;
    float _2852;
    if (_2558)
    {
        _2848 = _2784;
        _2850 = _2785;
        _2852 = _2786;
    }
    else
    {
        uint _2854 = _2482 + 2u;
        uint _2858 = _2482 + 10u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _1260) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _1337;
        float _2875 = cbLight._m0[_2854].y + _1338;
        float _2876 = cbLight._m0[_2854].z + _1339;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2854].xyz));
        float _5008 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _2888 = dot(vec3(_1256, _1257, _1258), vec3(_2881, _2882, _2883));
        float _5019 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _5030 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2650 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _2914) + _2873) * _2887))) * _2887;
        float _5041 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2848 = (((((_2907 * _2672) + _1408) * cbLight._m0[_2858].x) * _2926) * _2927) + _2784;
        _2850 = (((((_2907 * _2674) + _1410) * cbLight._m0[_2858].y) * _2926) * _2927) + _2785;
        _2852 = (((((_2907 * _2675) + _1411) * cbLight._m0[_2858].z) * _2926) * _2927) + _2786;
    }
    float _2962;
    float _2964;
    float _2966;
    if (_2576)
    {
        _2962 = _2848;
        _2964 = _2850;
        _2966 = _2852;
    }
    else
    {
        uint _2973 = _2482 + 3u;
        uint _2977 = _2482 + 11u;
        float _2991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2973].w)) * _1260) * 0.949999988079071044921875);
        float _2992 = _2991 * _2991;
        float _2993 = cbLight._m0[_2973].x + _1337;
        float _2994 = cbLight._m0[_2973].y + _1338;
        float _2995 = cbLight._m0[_2973].z + _1339;
        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
        float _3000 = _2999 * _2993;
        float _3001 = _2999 * _2994;
        float _3002 = _2999 * _2995;
        float _3003 = dot(vec3(_1256, _1257, _1258), vec3(cbLight._m0[_2973].xyz));
        float _5057 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
        float _3007 = dot(vec3(_1256, _1257, _1258), vec3(_3000, _3001, _3002));
        float _5068 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
        float _3011 = dot(vec3(cbLight._m0[_2973].xyz), vec3(_3000, _3001, _3002));
        float _5079 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3015 = _2992 * _2992;
        float _3019 = ((_3010 * _3010) * (_3015 + (-1.0))) + 1.0;
        float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) * 5.0);
        float _3033 = 1.0 - _2992;
        float _3043 = (0.5 / (((_2650 * ((_3006 * _3033) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _3033) + _2992) * _3006))) * _3006;
        float _5090 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3015 / ((_3019 * _3019) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        _2962 = (((((_3026 * _2672) + _1408) * cbLight._m0[_2977].x) * _3045) * _3046) + _2848;
        _2964 = (((((_3026 * _2674) + _1410) * cbLight._m0[_2977].y) * _3045) * _3046) + _2850;
        _2966 = (((((_3026 * _2675) + _1411) * cbLight._m0[_2977].z) * _3045) * _3046) + _2852;
    }
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_2480.y == 0u)
    {
        float _3121 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3122 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3121;
        float _3123 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3121;
        float _3124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3121;
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.x;
        uint _3148 = uint((float(_3136.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1346) / _3137))) + floor(float(uint(cbSceneParam._m0[85u].x * _1345) / _3137)));
        float _3158 = (log2(_3124 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3159 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
        uint _3162 = uint(isnan(14.0) ? _3159 : (isnan(_3159) ? 14.0 : min(_3159, 14.0)));
        uvec4 _3167 = texelFetch(g_lightClusterGridBuffer, int(((_3162 << 2u) + (_3148 << 6u)) >> 2u));
        uint _3168 = _3167.x;
        uint _3169 = _3136.z;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        if (((((1u << ((_3169 >> 4u) & 15u)) + 4294967295u) & _3168) == 0u) || ((_3169 & 240u) == 0u))
        {
            _3270 = 0.0;
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
        }
        else
        {
            float _3271;
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3281;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            uint _3420 = 0u;
            uint _3429;
            bool _3430;
            for (;;)
            {
                _3429 = texelFetch(g_lightClassification, int((((_3162 << 5u) + (_3148 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                _3430 = _3429 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3430)
                {
                    frontier_phi_63_pred = _3419;
                    frontier_phi_63_pred_1 = _3418;
                    frontier_phi_63_pred_2 = _3417;
                    frontier_phi_63_pred_3 = _3416;
                    frontier_phi_63_pred_4 = _3415;
                    frontier_phi_63_pred_5 = _3414;
                }
                else
                {
                    float _3538;
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    uint _3544;
                    _3538 = _3414;
                    _3539 = _3415;
                    _3540 = _3416;
                    _3541 = _3417;
                    _3542 = _3418;
                    _3543 = _3419;
                    _3544 = _3429;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    float _3474;
                    float _3475;
                    for (;;)
                    {
                        uint _3548 = uint(findLSB(_3544)) + (_3420 << 5u);
                        uint _3545 = (_3544 + 4294967295u) & _3544;
                        uint _3550 = _3548 * 48u;
                        vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 3u)).x));
                        uint _3570 = (_3548 * 48u) + 4u;
                        vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3570)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 3u)).x));
                        uint _3589 = (_3548 * 48u) + 8u;
                        vec3 _3600 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3589)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 2u)).x));
                        float _3604 = _3564.x - _3122;
                        float _3605 = _3564.y - _3123;
                        float _3606 = _3564.z - _3124;
                        float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                        float _3610 = inversesqrt(_3607);
                        float _3611 = _3610 * _3604;
                        float _3612 = _3610 * _3605;
                        float _3613 = _3610 * _3606;
                        float _3614 = dot(vec3(_1364, _1367, _1370), vec3(_3611, _3612, _3613));
                        float _3619 = 1.0 - (_3607 * _3564.w);
                        float _5116 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3620 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                        float _3621 = sqrt(_3607) * _3583.w;
                        float _3623 = 1.39999997615814208984375 / (_3621 + 1.39999997615814208984375);
                        float _3624 = _3623 * _3623;
                        float _3627 = ((1.0 - _3624) * _3614) + _3624;
                        float _3630 = _3621 * _3621;
                        float _3634 = ((isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))) * _3620) / ((_3630 * 0.699999988079071044921875) + 1.0);
                        float _3638 = (-0.0) - _3122;
                        float _3639 = (-0.0) - _3123;
                        float _3640 = (-0.0) - _3124;
                        float _3644 = inversesqrt(dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640)));
                        float _3645 = _3644 * _3638;
                        float _3646 = _3644 * _3639;
                        float _3647 = _3644 * _3640;
                        float _3655 = exp2(log2(1.0 / ((_3630 * 3.5) + 5.0)) * 0.25);
                        float _3656 = 1.0 - _1439;
                        float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                        float _3664 = _3663 * _3663;
                        float _3665 = _3664 * _3664;
                        float _3666 = _3645 + _3611;
                        float _3667 = _3646 + _3612;
                        float _3668 = _3647 + _3613;
                        float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                        float _3676 = dot(vec3(_1364, _1367, _1370), vec3(_3645, _3646, _3647));
                        float _5132 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3679 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                        float _3680 = dot(vec3(_1364, _1367, _1370), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                        float _5143 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3683 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                        float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                        float _3688 = _3623 * _3664;
                        float _3689 = _3688 * _3688;
                        float _3692 = ((1.0 - _3689) * _3614) + _3689;
                        float _5154 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                        float _3693 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                        float _3694 = 1.0 - _3664;
                        float _3704 = (0.5 / (((_3693 * ((_3679 * _3694) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3664) * _3679))) * _3693;
                        float _5165 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                        float _3715 = (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0)))) / ((_3687 * _3687) * ((_3630 * 2.1991131305694580078125) + 3.141590118408203125))) * _3620;
                        _3473 = (_3634 * _3583.x) + _3541;
                        _3474 = (_3634 * _3583.y) + _3542;
                        _3475 = (_3634 * _3583.z) + _3543;
                        _3470 = (_3715 * _3600.x) + _3538;
                        _3471 = (_3715 * _3600.y) + _3539;
                        _3472 = (_3715 * _3600.z) + _3540;
                        if (_3545 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3538 = _3470;
                            _3539 = _3471;
                            _3540 = _3472;
                            _3541 = _3473;
                            _3542 = _3474;
                            _3543 = _3475;
                            _3544 = _3545;
                        }
                    }
                    frontier_phi_63_pred = _3475;
                    frontier_phi_63_pred_1 = _3474;
                    frontier_phi_63_pred_2 = _3473;
                    frontier_phi_63_pred_3 = _3472;
                    frontier_phi_63_pred_4 = _3471;
                    frontier_phi_63_pred_5 = _3470;
                }
                _3281 = frontier_phi_63_pred;
                _3279 = frontier_phi_63_pred_1;
                _3277 = frontier_phi_63_pred_2;
                _3275 = frontier_phi_63_pred_3;
                _3273 = frontier_phi_63_pred_4;
                _3271 = frontier_phi_63_pred_5;
                uint _3421 = _3420 + 1u;
                if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3414 = _3271;
                    _3415 = _3273;
                    _3416 = _3275;
                    _3417 = _3277;
                    _3418 = _3279;
                    _3419 = _3281;
                    _3420 = _3421;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3270 = _3271;
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
        }
        uvec4 _3284 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3285 = _3284.z;
        uint _3287 = (_3285 >> 8u) & 15u;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        float _3390;
        float _3392;
        if (((4294967295u << _3287) & _3168) == 0u)
        {
            _3382 = _3270;
            _3384 = _3272;
            _3386 = _3274;
            _3388 = _3276;
            _3390 = _3278;
            _3392 = _3280;
        }
        else
        {
            float _3407 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
            float _3408 = _3407 * _3122;
            float _3409 = _3407 * _3123;
            float _3410 = _3407 * _3124;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3287 < ((_3285 >> 12u) & 15u))
            {
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3391;
                float _3393;
                float _3521 = _3270;
                float _3522 = _3272;
                float _3523 = _3274;
                float _3524 = _3276;
                float _3525 = _3278;
                float _3526 = _3280;
                uint _3527 = _3287;
                uint _3536;
                bool _3537;
                for (;;)
                {
                    _3536 = texelFetch(g_lightClassification, int((((_3162 << 5u) + (_3148 << 9u)) + (_3527 << 2u)) >> 2u)).x;
                    _3537 = _3536 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3537)
                    {
                        frontier_phi_69_pred = _3526;
                        frontier_phi_69_pred_1 = _3525;
                        frontier_phi_69_pred_2 = _3524;
                        frontier_phi_69_pred_3 = _3523;
                        frontier_phi_69_pred_4 = _3522;
                        frontier_phi_69_pred_5 = _3521;
                    }
                    else
                    {
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _3733 = _3521;
                        float _3734 = _3522;
                        float _3735 = _3523;
                        float _3736 = _3524;
                        float _3737 = _3525;
                        float _3738 = _3526;
                        uint _3739 = _3536;
                        uint _3740;
                        vec4 _3765;
                        float _3766;
                        vec4 _3781;
                        vec3 _3793;
                        vec4 _3808;
                        vec4 _3823;
                        float _3869;
                        bool _3870;
                        for (;;)
                        {
                            uint _3750 = ((_3527 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3739));
                            _3740 = (_3739 + 4294967295u) & _3739;
                            uint _3752 = _3750 * 40u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3766 = _3765.w;
                            uint _3768 = (_3750 * 40u) + 4u;
                            _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            uint _3783 = (_3750 * 40u) + 8u;
                            _3793 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x));
                            uint _3795 = (_3750 * 40u) + 16u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3750 * 40u) + 20u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3825 = (_3750 * 40u) + 24u;
                            vec4 _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3844 = (_3750 * 40u) + 28u;
                            vec4 _3857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 3u)).x));
                            _3869 = fma(_3124, _3857.z, fma(_3123, _3857.y, _3857.x * _3122)) + _3857.w;
                            _3870 = !((fma(_3124, _3838.z, fma(_3123, _3838.y, _3838.x * _3122)) + _3838.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3870)
                            {
                                float _3897 = _3765.x - _3122;
                                float _3898 = _3765.y - _3123;
                                float _3899 = _3765.z - _3124;
                                float _3900 = dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899));
                                float _3903 = inversesqrt(_3900);
                                float _3904 = _3903 * _3897;
                                float _3905 = _3903 * _3898;
                                float _3906 = _3903 * _3899;
                                float _3910 = 1.0 - (_3900 / (_3766 * _3766));
                                float _5176 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _3915 = sqrt(_3900) * _3781.w;
                                float _3917 = 1.39999997615814208984375 / (_3915 + 1.39999997615814208984375);
                                float _3918 = _3917 * _3917;
                                float _3921 = ((1.0 - _3918) * dot(vec3(_3904, _3905, _3906), vec3(_1364, _1367, _1370))) + _3918;
                                float _3924 = _3915 * _3915;
                                float _3928 = (fma(_3124, _3808.z, fma(_3123, _3808.y, _3808.x * _3122)) + _3808.w) / _3869;
                                float _3929 = (fma(_3124, _3823.z, fma(_3123, _3823.y, _3823.x * _3122)) + _3823.w) / _3869;
                                float _3933 = 1.0 - dot(vec2(_3928, _3929), vec2(_3928, _3929));
                                float _5192 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3934 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _3935 = _3934 * (((isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0))) * _3911) / ((_3924 * 0.699999988079071044921875) + 1.0));
                                float _3947 = exp2(log2(1.0 / ((_3924 * 3.5) + 5.0)) * 0.25);
                                float _3948 = 1.0 - _1439;
                                float _3955 = sqrt(1.0 - ((1.0 - (_3948 * _3948)) * (1.0 - (_3947 * _3947))));
                                float _3956 = _3955 * _3955;
                                float _3957 = _3956 * _3956;
                                float _3958 = _3904 - _3408;
                                float _3959 = _3905 - _3409;
                                float _3960 = _3906 - _3410;
                                float _3964 = inversesqrt(dot(vec3(_3958, _3959, _3960), vec3(_3958, _3959, _3960)));
                                float _3968 = dot(vec3(_1364, _1367, _1370), vec3((-0.0) - _3408, (-0.0) - _3409, (-0.0) - _3410));
                                float _5203 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                                float _3972 = dot(vec3(_1364, _1367, _1370), vec3(_3964 * _3958, _3964 * _3959, _3964 * _3960));
                                float _5214 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                                float _3979 = ((_3975 * _3975) * (_3957 + (-1.0))) + 1.0;
                                float _3980 = _3917 * _3956;
                                float _3981 = _3980 * _3980;
                                float _3987 = ((1.0 - _3981) * dot(vec3(_1364, _1367, _1370), vec3(_3904, _3905, _3906))) + _3981;
                                float _5225 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3988 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                                float _3989 = 1.0 - _3956;
                                float _3999 = (0.5 / (((_3988 * ((_3971 * _3989) + _3956)) + 9.9999999392252902907785028219223e-09) + (((_3988 * _3989) + _3956) * _3971))) * _3988;
                                float _5236 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4009 = (_3934 * _3911) * (((_3957 * 3.1415927410125732421875) * (isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0)))) / ((_3979 * _3979) * ((_3924 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3935 * _3781.z;
                                frontier_phi_75_pred_1 = _3935 * _3781.y;
                                frontier_phi_75_pred_2 = _3935 * _3781.x;
                                frontier_phi_75_pred_3 = _4009 * _3793.z;
                                frontier_phi_75_pred_4 = _4009 * _3793.y;
                                frontier_phi_75_pred_5 = _4009 * _3793.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _4018 = frontier_phi_75_pred;
                            _4017 = frontier_phi_75_pred_1;
                            _4016 = frontier_phi_75_pred_2;
                            _4015 = frontier_phi_75_pred_3;
                            _4014 = frontier_phi_75_pred_4;
                            _4013 = frontier_phi_75_pred_5;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            if (_3740 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3740;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3725;
                        frontier_phi_69_pred_1 = _3724;
                        frontier_phi_69_pred_2 = _3723;
                        frontier_phi_69_pred_3 = _3722;
                        frontier_phi_69_pred_4 = _3721;
                        frontier_phi_69_pred_5 = _3720;
                    }
                    _3393 = frontier_phi_69_pred;
                    _3391 = frontier_phi_69_pred_1;
                    _3389 = frontier_phi_69_pred_2;
                    _3387 = frontier_phi_69_pred_3;
                    _3385 = frontier_phi_69_pred_4;
                    _3383 = frontier_phi_69_pred_5;
                    uint _3528 = _3527 + 1u;
                    if (_3528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3521 = _3383;
                        _3522 = _3385;
                        _3523 = _3387;
                        _3524 = _3389;
                        _3525 = _3391;
                        _3526 = _3393;
                        _3527 = _3528;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3393;
                frontier_phi_57_58_ladder_1 = _3391;
                frontier_phi_57_58_ladder_2 = _3389;
                frontier_phi_57_58_ladder_3 = _3387;
                frontier_phi_57_58_ladder_4 = _3385;
                frontier_phi_57_58_ladder_5 = _3383;
            }
            else
            {
                frontier_phi_57_58_ladder = _3280;
                frontier_phi_57_58_ladder_1 = _3278;
                frontier_phi_57_58_ladder_2 = _3276;
                frontier_phi_57_58_ladder_3 = _3274;
                frontier_phi_57_58_ladder_4 = _3272;
                frontier_phi_57_58_ladder_5 = _3270;
            }
            _3382 = frontier_phi_57_58_ladder_5;
            _3384 = frontier_phi_57_58_ladder_4;
            _3386 = frontier_phi_57_58_ladder_3;
            _3388 = frontier_phi_57_58_ladder_2;
            _3390 = frontier_phi_57_58_ladder_1;
            _3392 = frontier_phi_57_58_ladder;
        }
        float _3397 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _3180 = (_3397 * _3388) + _2614;
        _3182 = (_3397 * _3390) + _2616;
        _3184 = (_3397 * _3392) + _2618;
        _3186 = ((_3382 * _1408) * _3397) + _2962;
        _3188 = ((_3384 * _1410) * _3397) + _2964;
        _3190 = ((_3386 * _1411) * _3397) + _2966;
    }
    else
    {
        _3180 = _2614;
        _3182 = _2616;
        _3184 = _2618;
        _3186 = _2962;
        _3188 = _2964;
        _3190 = _2966;
    }
    float _5252 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
    float _5263 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
    float _5274 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
    float _5285 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _3215 = cbInstanceData._m0[_1383 + 6u].w * (isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0)));
    float _3220 = _1345 / cbSceneParam._m0[86u].x;
    float _3221 = _1346 / cbSceneParam._m0[86u].y;
    vec4 _3235 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3220, _3221, (log2((isnan(cbSceneParam._m0[77u].w) ? _1280 : (isnan(_1280) ? cbSceneParam._m0[77u].w : min(_1280, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3237 = _3235.x;
    float _3238 = _3235.y;
    float _3239 = _3235.z;
    float _3240 = _3235.w;
    float _3332;
    float _3334;
    float _3336;
    float _3338;
    if (_1280 > cbSceneParam._m0[78u].w)
    {
        float _3295 = isnan(_1280) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1280 : min(cbSceneParam._m0[80u].w, _1280));
        float _3296 = _3295 / _1280;
        float _3307 = _3296 * _1330;
        float _3308 = _1331 * _3296;
        float _3309 = (-0.0) - _3308;
        float _3310 = _3296 * _1332;
        float _3312 = (cbSceneParam._m0[77u].w * _3309) / _3295;
        float _3313 = _3312 + cbSceneParam._m0[79u].w;
        float _3314 = cbSceneParam._m0[79u].w - _3308;
        float _3320 = sqrt(((_3307 * _3307) + (_3308 * _3308)) + (_3310 * _3310));
        float _3323 = (1.0 - (cbSceneParam._m0[77u].w / _3295)) * _3320;
        float _3328 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3330 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3483;
        if (abs((_3309 - _3312) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3483 = ((((_3313 > 0.0) ? exp2(_3328 * _3313) : (2.0 - exp2(_3330 * _3313))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3323;
        }
        else
        {
            float _3443 = 1.0 / cbSceneParam._m0[80u].x;
            float _3444 = isnan(_3314) ? _3313 : (isnan(_3313) ? _3314 : max(_3313, _3314));
            float _3445 = isnan(_3314) ? _3313 : (isnan(_3313) ? _3314 : min(_3313, _3314));
            float _3454 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : min(_3444, 0.0));
            float _3455 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : min(_3445, 0.0));
            _3483 = ((abs(_3320 / _3309) * cbSceneParam._m0[80u].y) * ((((_3454 - _3455) * 2.0) - ((exp2(_3328 * (isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0)))) - exp2(_3328 * (isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))))) * _3443)) - ((exp2(_3330 * _3454) - exp2(_3330 * _3455)) * _3443))) + (_3323 * cbSceneParam._m0[80u].z);
        }
        vec4 _3485 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3220, _3221, 1.0), 0.0);
        float _3494 = exp2((_3483 * (-1.44269502162933349609375)) * (1.0 - _3485.w));
        float _3495 = log2(_3494);
        float _3511 = log2(_3240);
        _3332 = (exp2(_3511 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3495 * cbSceneParam._m0[78u].x)) * _3485.x) / cbSceneParam._m0[78u].x)) + _3237;
        _3334 = (exp2(_3511 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3495 * cbSceneParam._m0[78u].y)) * _3485.y) / cbSceneParam._m0[78u].y)) + _3238;
        _3336 = (exp2(_3511 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3495 * cbSceneParam._m0[78u].z)) * _3485.z) / cbSceneParam._m0[78u].z)) + _3239;
        _3338 = _3494 * _3240;
    }
    else
    {
        _3332 = _3237;
        _3334 = _3238;
        _3336 = _3239;
        _3338 = _3240;
    }
    float _3350 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3351 = _3350 == 3.0;
    float _3352 = log2(_3338);
    float _3359 = exp2(_3352 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3180 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1423))) + ((_3186 + ((isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0))) * _2233)) * cbPerFrame._m0[3u].x));
    float _3360 = exp2(_3352 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0))) * (_3182 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1423))) + ((_3188 + ((isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0))) * _2233)) * cbPerFrame._m0[3u].x));
    float _3361 = exp2(_3352 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0))) * (_3184 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1423))) + ((_3190 + ((isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0))) * _2233)) * cbPerFrame._m0[3u].x));
    float _3370 = (_3350 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3370 * (_3351 ? _3359 : (_3359 + (cbSceneParam._m0[72u].w * _3332)));
    SV_Target.y = _3370 * (_3351 ? _3360 : (_3360 + (cbSceneParam._m0[72u].w * _3334)));
    SV_Target.z = _3370 * (_3351 ? _3361 : (_3361 + (cbSceneParam._m0[72u].w * _3336)));
    SV_Target.w = _3215;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3215;
}


