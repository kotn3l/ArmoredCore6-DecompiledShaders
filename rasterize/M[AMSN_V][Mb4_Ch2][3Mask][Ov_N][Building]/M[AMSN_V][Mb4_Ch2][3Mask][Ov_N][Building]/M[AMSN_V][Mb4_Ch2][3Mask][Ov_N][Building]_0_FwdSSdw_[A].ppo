#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1843;
float _4248;
float _4249;
float _4250;
float _4251;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _254 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _255 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _256 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _260 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _261 = _260 * _254;
    float _262 = _260 * _255;
    float _263 = _260 * _256;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _281 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _282 = _281 * TANGENT_2.x;
    float _283 = _281 * TANGENT_2.y;
    float _284 = _281 * TANGENT_2.z;
    float _289;
    float _290;
    float _291;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _289 = (-0.0) - _268;
        _290 = (-0.0) - _269;
        _291 = (-0.0) - _270;
    }
    else
    {
        _289 = _268;
        _290 = _269;
        _291 = _270;
    }
    vec4 _311 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _323 = 1.0 - ((1.0 - _311.z) * 1.39999997615814208984375);
    float _4260 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _326 = 1.0 - ((1.0 - _311.x) * 1.39999997615814208984375);
    float _4271 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _327 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _329 = 1.0 - ((1.0 - _311.y) * 1.39999997615814208984375);
    float _4282 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _332 = (_327 + _324) + _330;
    float _339 = (_332 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _340 = (_332 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _341 = (_332 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _366 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _375 = 1.0 - ((1.0 - _366.x) * 1.39999997615814208984375);
    float _4293 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _386 = (_376 * ((cbMtdParam._m0[9u].x - _339) + ((1.0 - cbMtdParam._m0[9u].x) * _332))) + _339;
    float _387 = (_376 * ((cbMtdParam._m0[9u].y - _340) + ((1.0 - cbMtdParam._m0[9u].y) * _332))) + _340;
    float _388 = (_376 * ((cbMtdParam._m0[9u].z - _341) + ((1.0 - cbMtdParam._m0[9u].z) * _332))) + _341;
    float _401 = 1.0 - ((1.0 - _366.y) * 1.39999997615814208984375);
    float _4304 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _412 = (((cbMtdParam._m0[17u].x - _386) + ((1.0 - cbMtdParam._m0[17u].x) * _332)) * _402) + _386;
    float _413 = (((cbMtdParam._m0[17u].y - _387) + ((1.0 - cbMtdParam._m0[17u].y) * _332)) * _402) + _387;
    float _414 = (((cbMtdParam._m0[17u].z - _388) + ((1.0 - cbMtdParam._m0[17u].z) * _332)) * _402) + _388;
    float _428 = 1.0 - ((1.0 - _366.z) * 1.39999997615814208984375);
    float _4315 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _459 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[23u].w;
    float _474 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _459) + (cbMtdParam._m0[22u].y * TEXCOORD_6))) + 1.0;
    float _4326 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = 1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)));
    float _484 = ((cbMtdParam._m0[21u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _459) + (cbMtdParam._m0[22u].z * TEXCOORD_5))) + 1.0;
    float _4337 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = 1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)));
    vec4 _504 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _509 = cbMtdParam._m0[10u].x * _486;
    float _511 = cbMtdParam._m0[10u].y * _486;
    float _513 = cbMtdParam._m0[10u].z * _486;
    float _530 = ((_506 * (cbMtdParam._m0[16u].x - _509)) * _476) + (_509 * _506);
    float _531 = ((_507 * (cbMtdParam._m0[16u].y - _511)) * _476) + (_511 * _507);
    float _532 = ((_508 * (cbMtdParam._m0[16u].z - _513)) * _476) + (_513 * _508);
    float _553 = cbMtdParam._m0[22u].x * (-1.39999997615814208984375);
    float _557 = (_553 * ((TEXCOORD_7.x - _459) + (cbMtdParam._m0[21u].x * TEXCOORD_7.x))) + 1.0;
    float _558 = (_553 * ((TEXCOORD_7.y - _459) + (cbMtdParam._m0[21u].x * TEXCOORD_7.y))) + 1.0;
    float _559 = (_553 * ((TEXCOORD_7.z - _459) + (cbMtdParam._m0[21u].x * TEXCOORD_7.z))) + 1.0;
    float _4348 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4359 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4370 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _568 = (1.0 - cbMtdParam._m0[23u].y) + _327;
    float _571 = _568 * (1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))));
    float _572 = _568 * (1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))));
    float _573 = ((_327 + 1.0) - cbMtdParam._m0[23u].y) * (1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))));
    float _583 = _486 + _476;
    float _584 = _583 + _571;
    float _585 = _583 + _572;
    float _586 = _583 + _573;
    float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _590 = isnan(1.0) ? _587 : (isnan(_587) ? 1.0 : min(_587, 1.0));
    float _591 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
    float _592 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
    vec4 _610 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _615 = _610.w;
    float _616 = _610.x * cbMtdParam._m0[12u].x;
    float _617 = _610.y * cbMtdParam._m0[12u].y;
    float _618 = _610.z * cbMtdParam._m0[12u].z;
    vec4 _637 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _651 = (((_637.x * cbMtdParam._m0[13u].x) - _616) * _327) + _616;
    float _652 = (((_637.y * cbMtdParam._m0[13u].y) - _617) * _327) + _617;
    float _653 = (((_637.z * cbMtdParam._m0[13u].z) - _618) * _327) + _618;
    vec4 _671 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _685 = (((_671.x * cbMtdParam._m0[14u].x) - _651) * _330) + _651;
    float _686 = (((_671.y * cbMtdParam._m0[14u].y) - _652) * _330) + _652;
    float _687 = (((_671.z * cbMtdParam._m0[14u].z) - _653) * _330) + _653;
    vec4 _705 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _719 = (((_705.x * cbMtdParam._m0[15u].x) - _685) * _324) + _685;
    float _720 = (((_705.y * cbMtdParam._m0[15u].y) - _686) * _324) + _686;
    float _721 = (((_705.z * cbMtdParam._m0[15u].z) - _687) * _324) + _687;
    float _741 = ((_719 - (_719 * _590)) + (((_590 * 4.55000019073486328125) * ((_571 * ((cbMtdParam._m0[11u].x * _506) - _530)) + _530)) * _719)) * ((((cbMtdParam._m0[18u].x - _412) + ((1.0 - cbMtdParam._m0[18u].x) * _332)) * _429) + _412);
    float _742 = ((_720 - (_720 * _591)) + (((_591 * 4.55000019073486328125) * ((_572 * ((cbMtdParam._m0[11u].y * _507) - _531)) + _531)) * _720)) * ((((cbMtdParam._m0[18u].y - _413) + ((1.0 - cbMtdParam._m0[18u].y) * _332)) * _429) + _413);
    float _743 = ((_721 - (_592 * _721)) + (((_592 * 4.55000019073486328125) * ((_573 * ((cbMtdParam._m0[11u].z * _508) - _532)) + _532)) * _721)) * ((((cbMtdParam._m0[18u].z - _414) + ((1.0 - cbMtdParam._m0[18u].z) * _332)) * _429) + _414);
    float _757 = ((cbMtdParam._m0[20u].w - cbMtdParam._m0[24u].x) * _590) + cbMtdParam._m0[24u].x;
    float _760 = ((cbMtdParam._m0[20u].x - _757) * _327) + _757;
    float _763 = ((cbMtdParam._m0[20u].y - _760) * _330) + _760;
    float _766 = ((cbMtdParam._m0[20u].z - _763) * _324) + _763;
    vec4 _778 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _782 = _778.z;
    float _786 = (_778.x * 2.0) + (-1.0);
    float _788 = (_778.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_786, _788), vec2(_786, _788));
    float _4411 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _794 = sqrt(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))));
    float _797 = fma(_794, _289, fma(_788, _282, _786 * _261));
    float _800 = fma(_794, _290, fma(_788, _283, _786 * _262));
    float _803 = fma(_794, _291, fma(_788, _284, _786 * _263));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    vec4 _823 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _829 = (_823.x * 2.0) + (-1.0);
    float _830 = (_823.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _4422 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _836 = sqrt(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))));
    float _839 = fma(_836, _289, fma(_830, _282, _829 * _261));
    float _842 = fma(_836, _290, fma(_830, _283, _829 * _262));
    float _845 = fma(_836, _291, fma(_830, _284, _829 * _263));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _855 = fma(_852, _244, fma(_851, _243, _850 * _242));
    float _858 = fma(_852, _277, fma(_851, _276, _850 * _275));
    float _861 = fma(_852, _291, fma(_851, _290, _850 * _289));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    vec4 _878 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _4433 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _891 = sqrt(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))));
    float _894 = fma(_891, _289, fma(_885, _282, _884 * _261));
    float _897 = fma(_891, _290, fma(_885, _283, _884 * _262));
    float _900 = fma(_891, _291, fma(_885, _284, _884 * _263));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _910 = fma(_907, _244, fma(_906, _243, _905 * _242));
    float _913 = fma(_907, _277, fma(_906, _276, _905 * _275));
    float _916 = fma(_907, _291, fma(_906, _290, _905 * _289));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    vec4 _933 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _939 = (_933.x * 2.0) + (-1.0);
    float _940 = (_933.y * 2.0) + (-1.0);
    float _941 = dot(vec2(_939, _940), vec2(_939, _940));
    float _4444 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _946 = sqrt(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))));
    float _949 = fma(_946, _289, fma(_940, _282, _939 * _261));
    float _952 = fma(_946, _290, fma(_940, _283, _939 * _262));
    float _955 = fma(_946, _291, fma(_940, _284, _939 * _263));
    float _959 = inversesqrt(dot(vec3(_949, _952, _955), vec3(_949, _952, _955)));
    float _960 = _959 * _949;
    float _961 = _959 * _952;
    float _962 = _959 * _955;
    float _965 = fma(_962, _244, fma(_961, _243, _960 * _242));
    float _968 = fma(_962, _277, fma(_961, _276, _960 * _275));
    float _971 = fma(_962, _291, fma(_961, _290, _960 * _289));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _981 = fma(_810, _244, fma(_809, _243, _808 * _242));
    float _984 = fma(_810, _277, fma(_809, _276, _808 * _275));
    float _987 = fma(_810, _291, fma(_809, _290, _808 * _289));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _1001 = (((_975 * _965) - _992) * _327) + _992;
    float _1002 = (((_975 * _968) - _993) * _327) + _993;
    float _1003 = (((_975 * _971) - _994) * _327) + _994;
    vec4 _1016 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4455 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1029 = sqrt(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))));
    float _1032 = fma(_1029, _289, fma(_1023, _282, _1022 * _261));
    float _1035 = fma(_1029, _290, fma(_1023, _283, _1022 * _262));
    float _1038 = fma(_1029, _291, fma(_1023, _284, _1022 * _263));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _1048 = fma(_1045, _244, fma(_1044, _243, _1043 * _242));
    float _1051 = fma(_1045, _277, fma(_1044, _276, _1043 * _275));
    float _1054 = fma(_1045, _291, fma(_1044, _290, _1043 * _289));
    float _1058 = inversesqrt(dot(vec3(_1048, _1051, _1054), vec3(_1048, _1051, _1054)));
    float _1068 = (((_1058 * _1048) - _1001) * _330) + _1001;
    float _1069 = (((_1058 * _1051) - _1002) * _330) + _1002;
    float _1070 = (((_1058 * _1054) - _1003) * _330) + _1003;
    vec4 _1083 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1089 = (_1083.x * 2.0) + (-1.0);
    float _1090 = (_1083.y * 2.0) + (-1.0);
    float _1091 = dot(vec2(_1089, _1090), vec2(_1089, _1090));
    float _4466 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1096 = sqrt(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))));
    float _1099 = fma(_1096, _289, fma(_1090, _282, _1089 * _261));
    float _1102 = fma(_1096, _290, fma(_1090, _283, _1089 * _262));
    float _1105 = fma(_1096, _291, fma(_1090, _284, _1089 * _263));
    float _1109 = inversesqrt(dot(vec3(_1099, _1102, _1105), vec3(_1099, _1102, _1105)));
    float _1110 = _1109 * _1099;
    float _1111 = _1109 * _1102;
    float _1112 = _1109 * _1105;
    float _1115 = fma(_1112, _244, fma(_1111, _243, _1110 * _242));
    float _1118 = fma(_1112, _277, fma(_1111, _276, _1110 * _275));
    float _1121 = fma(_1112, _291, fma(_1111, _290, _1110 * _289));
    float _1125 = inversesqrt(dot(vec3(_1115, _1118, _1121), vec3(_1115, _1118, _1121)));
    float _1135 = (((_1125 * _1121) - _1070) * _324) + _1070;
    vec4 _1147 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1153 = (_1147.x * 2.0) + (-1.0);
    float _1154 = (_1147.y * 2.0) + (-1.0);
    float _1155 = dot(vec2(_1153, _1154), vec2(_1153, _1154));
    float _4477 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1160 = sqrt(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))));
    float _1163 = fma(_1160, _289, fma(_1154, _282, _1153 * _261));
    float _1166 = fma(_1160, _290, fma(_1154, _283, _1153 * _262));
    float _1169 = fma(_1160, _291, fma(_1154, _284, _1153 * _263));
    float _1173 = inversesqrt(dot(vec3(_1163, _1166, _1169), vec3(_1163, _1166, _1169)));
    float _1174 = _1173 * _1163;
    float _1175 = _1173 * _1166;
    float _1176 = _1173 * _1169;
    float _1179 = fma(_1176, _244, fma(_1175, _243, _1174 * _242));
    float _1182 = fma(_1176, _277, fma(_1175, _276, _1174 * _275));
    float _1185 = fma(_1176, _291, fma(_1175, _290, _1174 * _289));
    float _1189 = inversesqrt(dot(vec3(_1179, _1182, _1185), vec3(_1179, _1182, _1185)));
    vec4 _1227 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _1241 = (((((((_910 * _476) * _920) * cbMtdParam._m0[22u].w) + ((((_584 * _568) * _855) * _865) * cbMtdParam._m0[23u].x)) + _1068) + (((_1125 * _1115) - _1068) * _324)) + (((_1179 * _486) * _1189) * cbMtdParam._m0[21u].w)) + (((_1227.x * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1246 = (((((((_913 * _476) * _920) * cbMtdParam._m0[22u].w) + ((((_585 * _568) * _858) * _865) * cbMtdParam._m0[23u].x)) + _1069) + (((_1125 * _1118) - _1069) * _324)) + (((_1182 * _486) * _1189) * cbMtdParam._m0[21u].w)) + (((_1227.y * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1249 = fma(_1135, _289, fma(_1246, _275, _1241 * _242));
    float _1252 = fma(_1135, _290, fma(_1246, _276, _1241 * _243));
    float _1255 = fma(_1135, _291, fma(_1246, _277, _1241 * _244));
    float _1259 = inversesqrt(dot(vec3(_1249, _1252, _1255), vec3(_1249, _1252, _1255)));
    float _1260 = _1259 * _1249;
    float _1261 = _1259 * _1252;
    float _1262 = _1259 * _1255;
    float _4488 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _1263 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1264 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _4510 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4521 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4532 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4543 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _1268 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _1284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1324 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1334 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1324);
    float _1335 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1324);
    float _1336 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1324);
    float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
    float _1341 = _1334 * _1340;
    float _1342 = _1335 * _1340;
    float _1343 = _1336 * _1340;
    vec4 _1348 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1350 = _1348.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1522 = sqrt(((_1334 * _1334) + (_1335 * _1335)) + (_1336 * _1336));
        float _1528 = (cbMatDynParam._m0[5u].x * _1522) + cbMatDynParam._m0[5u].y;
        float _4554 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1533 = (cbMatDynParam._m0[5u].z * _1522) + cbMatDynParam._m0[5u].w;
        float _4565 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) - _1529)) + _1529) < ((_1350 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1361 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1362 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1380 = fma(_1262, cbSceneParam._m0[5u].z, fma(_1261, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1260));
    float _1383 = fma(_1262, cbSceneParam._m0[6u].z, fma(_1261, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1260));
    float _1386 = fma(_1262, cbSceneParam._m0[7u].z, fma(_1261, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1260));
    uint _1399 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1400 = _1399 + 9u;
    uint _1401 = _1400 + uint(cbMatDynParam._m0[0u].w);
    float _1407 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * cbInstanceData._m0[_1401].x;
    float _1408 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * cbInstanceData._m0[_1401].y;
    float _1409 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * cbInstanceData._m0[_1401].z;
    float _4576 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1410 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _4587 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    float _1411 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _4598 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _1413 = 1.0 - _1268;
    float _1414 = _1410 * _1413;
    float _1415 = _1411 * _1413;
    float _1416 = _1412 * _1413;
    float _1421 = (_1410 + (-0.039999999105930328369140625)) * _1268;
    float _1422 = (_1411 + (-0.039999999105930328369140625)) * _1268;
    float _1423 = (_1412 + (-0.039999999105930328369140625)) * _1268;
    float _1424 = _1421 + 0.039999999105930328369140625;
    float _1426 = _1422 + 0.039999999105930328369140625;
    float _1427 = _1423 + 0.039999999105930328369140625;
    vec4 _1436 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1361, cbSceneParam._m0[86u].y * _1362));
    float _1439 = _1436.x * TEXCOORD_7.w;
    float _1440 = dot(vec3(_1260, _1261, _1262), vec3(_1341, _1342, _1343));
    float _1443 = _1440 * 2.0;
    float _1447 = (_1443 * _1260) - _1341;
    float _1448 = (_1443 * _1261) - _1342;
    float _1449 = (_1443 * _1262) - _1343;
    float _1453 = abs(dot(vec3(_1341, _1342, _1343), vec3(_1260, _1261, _1262)));
    float _4609 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
    float _1455 = sqrt(_1264);
    float _1468 = exp2((_1455 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1455 * 3.0));
    float _1474 = (1.0 - _1468) * ((_1455 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1475 = _1468 * _1455;
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1507 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1511 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1842;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1567 = fma(_1511, cbModelParam._m0[26u].z, fma(_1507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1503));
        float _1571 = fma(_1511, cbModelParam._m0[27u].z, fma(_1507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1503));
        float _1575 = fma(_1511, cbModelParam._m0[28u].z, fma(_1507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1503));
        float _1600 = _1503 + _1260;
        float _1601 = _1507 + _1261;
        float _1602 = _1511 + _1262;
        float _1612 = fma(_1602, cbModelParam._m0[26u].z, fma(_1601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1600)) - _1567;
        float _1613 = fma(_1602, cbModelParam._m0[27u].z, fma(_1601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1600)) - _1571;
        float _1614 = fma(_1602, cbModelParam._m0[28u].z, fma(_1601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1600)) - _1575;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1567 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1571 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[34u].z) + ((((((_1575 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1670 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1636.x + (-0.5));
        float _1672 = _1670 * (_1636.y + (-0.5));
        float _1673 = _1670 * (_1636.z + (-0.5));
        float _1680 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1643.x + (-0.5));
        float _1682 = _1680 * (_1643.y + (-0.5));
        float _1683 = _1680 * (_1643.z + (-0.5));
        float _1690 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1650.x + (-0.5));
        float _1692 = _1690 * (_1650.y + (-0.5));
        float _1693 = _1690 * (_1650.z + (-0.5));
        float _1700 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1657.x + (-0.5));
        float _1702 = _1700 * (_1657.y + (-0.5));
        float _1703 = _1700 * (_1657.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1724 = (dot(vec3(_1260, _1261, _1262), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1734 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4657 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_1736 + 1.0))) + _1741) * _1704;
        float _1751 = _1672 * 0.5;
        float _1752 = _1682 * 0.5;
        float _1753 = _1692 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_1260, _1261, _1262), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4668 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4679 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4690 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_1778 + 1.0))) + _1783) * _1705;
        float _1793 = _1673 * 0.5;
        float _1794 = _1683 * 0.5;
        float _1795 = _1693 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_1260, _1261, _1262), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4723 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_1820 + 1.0))) + _1825) * _1706;
        _1842 = _1673;
        _1844 = _1672;
        _1845 = _1671;
        _1846 = _1683;
        _1847 = _1682;
        _1848 = _1681;
        _1849 = _1693;
        _1850 = _1692;
        _1851 = _1691;
        _1852 = _1706;
        _1853 = _1705;
        _1854 = _1704;
        _1855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
    }
    else
    {
        _1842 = _1843;
        _1844 = _1843;
        _1845 = _1843;
        _1846 = _1843;
        _1847 = _1843;
        _1848 = _1843;
        _1849 = _1843;
        _1850 = _1843;
        _1851 = _1843;
        _1852 = _1843;
        _1853 = _1843;
        _1854 = _1843;
        _1855 = 0.0;
        _1856 = 0.0;
        _1857 = 0.0;
    }
    float _2155;
    float _2156;
    float _2157;
    float _2158;
    float _2159;
    float _2160;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    float _2169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1886 = fma(_1511, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503));
        float _1890 = fma(_1511, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503));
        float _1894 = fma(_1511, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503));
        float _1917 = _1503 + _1260;
        float _1918 = _1507 + _1261;
        float _1919 = _1511 + _1262;
        float _1929 = fma(_1919, cbModelParam._m0[30u].z, fma(_1918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1917)) - _1886;
        float _1930 = fma(_1919, cbModelParam._m0[31u].z, fma(_1918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1917)) - _1890;
        float _1931 = fma(_1919, cbModelParam._m0[32u].z, fma(_1918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1917)) - _1894;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1948 = ((_1935 * _1929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1949 = ((_1935 * _1930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1950 = ((_1935 * _1931) / cbModelParam._m0[35u].z) + ((((((_1894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1948, _1949, _1950), 0.0);
        vec4 _1959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1948, _1949, _1950), 0.0);
        vec4 _1966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1948, _1949, _1950), 0.0);
        vec4 _1973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1948, _1949, _1950), 0.0);
        float _1985 = exp2((_1952.w + (-0.5)) * 20.0) * 2.0;
        float _1986 = _1985 * (_1952.x + (-0.5));
        float _1987 = _1985 * (_1952.y + (-0.5));
        float _1988 = _1985 * (_1952.z + (-0.5));
        float _1995 = exp2((_1959.w + (-0.5)) * 20.0) * 2.0;
        float _1996 = _1995 * (_1959.x + (-0.5));
        float _1997 = _1995 * (_1959.y + (-0.5));
        float _1998 = _1995 * (_1959.z + (-0.5));
        float _2005 = exp2((_1966.w + (-0.5)) * 20.0) * 2.0;
        float _2006 = _2005 * (_1966.x + (-0.5));
        float _2007 = _2005 * (_1966.y + (-0.5));
        float _2008 = _2005 * (_1966.z + (-0.5));
        float _2015 = exp2((_1973.w + (-0.5)) * 20.0) * 2.0;
        float _2016 = _2015 * (_1973.x + (-0.5));
        float _2017 = _2015 * (_1973.y + (-0.5));
        float _2018 = _2015 * (_1973.z + (-0.5));
        float _2019 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2020 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2022 = _1986 * 0.5;
        float _2023 = _1996 * 0.5;
        float _2024 = _2006 * 0.5;
        float _2025 = dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024));
        float _2030 = (_2025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2025);
        float _2038 = (dot(vec3(_1260, _1261, _1262), vec3(_2030 * _2022, _2030 * _2023, _2030 * _2024)) + 1.0) * 0.5;
        float _4764 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2047 = sqrt(((_2023 * _2023) + (_2022 * _2022)) + (_2024 * _2024)) / (_2019 + 9.9999997473787516355514526367188e-06);
        float _4775 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2049 = _2048 * 2.0;
        float _2053 = (1.0 - _2048) / (_2048 + 1.0);
        float _4786 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2063 = ((((1.0 - _2054) * (_2049 + 2.0)) * exp2(log2(isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2049 + 1.0))) + _2054) * _2019;
        float _2064 = _1987 * 0.5;
        float _2065 = _1997 * 0.5;
        float _2066 = _2007 * 0.5;
        float _2067 = dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066));
        float _2072 = (_2067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2067);
        float _2080 = (dot(vec3(_1260, _1261, _1262), vec3(_2072 * _2064, _2072 * _2065, _2072 * _2066)) + 1.0) * 0.5;
        float _4797 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2089 = sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066)) / (_2020 + 9.9999997473787516355514526367188e-06);
        float _4808 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2091 = _2090 * 2.0;
        float _2095 = (1.0 - _2090) / (_2090 + 1.0);
        float _4819 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2105 = ((((1.0 - _2096) * (_2091 + 2.0)) * exp2(log2(isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2091 + 1.0))) + _2096) * _2020;
        float _2106 = _1988 * 0.5;
        float _2107 = _1998 * 0.5;
        float _2108 = _2008 * 0.5;
        float _2109 = dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108));
        float _2114 = (_2109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2109);
        float _2122 = (dot(vec3(_1260, _1261, _1262), vec3(_2114 * _2106, _2114 * _2107, _2114 * _2108)) + 1.0) * 0.5;
        float _4830 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2131 = sqrt(((_2107 * _2107) + (_2106 * _2106)) + (_2108 * _2108)) / (_2021 + 9.9999997473787516355514526367188e-06);
        float _4841 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2133 = _2132 * 2.0;
        float _2137 = (1.0 - _2132) / (_2132 + 1.0);
        float _4852 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2147 = ((((1.0 - _2138) * (_2133 + 2.0)) * exp2(log2(isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2133 + 1.0))) + _2138) * _2021;
        _2155 = _1988;
        _2156 = _1987;
        _2157 = _1986;
        _2158 = _1998;
        _2159 = _1997;
        _2160 = _1996;
        _2161 = _2008;
        _2162 = _2007;
        _2163 = _2006;
        _2164 = _2021;
        _2165 = _2020;
        _2166 = _2019;
        _2167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0)));
        _2168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0)));
        _2169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)));
    }
    else
    {
        _2155 = _1843;
        _2156 = _1843;
        _2157 = _1843;
        _2158 = _1843;
        _2159 = _1843;
        _2160 = _1843;
        _2161 = _1843;
        _2162 = _1843;
        _2163 = _1843;
        _2164 = _1843;
        _2165 = _1843;
        _2166 = _1843;
        _2167 = 0.0;
        _2168 = 0.0;
        _2169 = 0.0;
    }
    float _2179 = (cbModelParam._m0[1u].x * (_2167 - _1855)) + _1855;
    float _2180 = (cbModelParam._m0[1u].x * (_2168 - _1856)) + _1856;
    float _2181 = (cbModelParam._m0[1u].x * (_2169 - _1857)) + _1857;
    float _2202 = fma(_2181, cbSceneParam._m0[89u].z, fma(_2180, cbSceneParam._m0[89u].y, _2179 * cbSceneParam._m0[89u].x));
    float _2205 = fma(_2181, cbSceneParam._m0[90u].z, fma(_2180, cbSceneParam._m0[90u].y, _2179 * cbSceneParam._m0[90u].x));
    float _2208 = fma(_2181, cbSceneParam._m0[91u].z, fma(_2180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2179));
    float _2223 = _1447 * 0.5;
    float _2224 = _1448 * 0.5;
    float _2225 = _1449 * 0.5;
    float _2226 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_2157, _2160, _2163, _2166));
    float _2229 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_2156, _2159, _2162, _2165));
    float _2232 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_2155, _2158, _2161, _2164));
    float _2266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2239 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_1842, _1846, _1849, _1852));
        float _2243 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_1844, _1847, _1850, _1853));
        float _2247 = dot(vec4(_2223, _2224, _2225, 1.0), vec4(_1845, _1848, _1851, _1854));
        float _2254 = dot(vec4(cbModelParam._m0[39u]), vec4(_2223, _2224, _2225, 1.0));
        _2266 = dot(vec3(isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0)), isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0)), isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2254) ? 0.0 : (isnan(0.0) ? _2254 : max(0.0, _2254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2266 = 1.0;
    }
    float _2277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2268 = dot(vec4(cbModelParam._m0[40u]), vec4(_2223, _2224, _2225, 1.0));
        _2277 = dot(vec3(isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0)), isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0)), isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2268) ? 0.0 : (isnan(0.0) ? _2268 : max(0.0, _2268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2277 = 1.0;
    }
    float _2281 = (_2277 * cbModelParam._m0[1u].x) + (_2266 * (1.0 - cbModelParam._m0[1u].x));
    float _2291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1264);
    float _2292 = isnan(_2291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2291 : min(cbModelParam._m0[25u].z, _2291));
    float _2372;
    float _2374;
    float _2376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2339 = fma(_1511, cbModelParam._m0[13u].z, fma(_1507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1503)) + cbModelParam._m0[13u].w;
        float _2343 = fma(_1511, cbModelParam._m0[14u].z, fma(_1507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1503)) + cbModelParam._m0[14u].w;
        float _2347 = fma(_1511, cbModelParam._m0[15u].z, fma(_1507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1503)) + cbModelParam._m0[15u].w;
        float _2350 = fma(_1449, cbModelParam._m0[13u].z, fma(_1448, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1447));
        float _2353 = fma(_1449, cbModelParam._m0[14u].z, fma(_1448, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1447));
        float _2356 = fma(_1449, cbModelParam._m0[15u].z, fma(_1448, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1447));
        float _2384;
        if (_2350 > 0.0)
        {
            _2384 = abs((1.0 - _2339) / _2350);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2350 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2339 + 1.0) / _2350);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2384 = frontier_phi_19_17_ladder;
        }
        float _2607;
        if (_2353 > 0.0)
        {
            _2607 = abs((1.0 - _2343) / _2353);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2353 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2343 + 1.0) / _2353);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2607 = frontier_phi_28_24_ladder;
        }
        float _2864;
        if (_2356 > 0.0)
        {
            _2864 = abs((1.0 - _2347) / _2356);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2356 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2347 + 1.0) / _2356);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2864 = frontier_phi_40_35_ladder;
        }
        float _2866 = isnan(_2607) ? _2384 : (isnan(_2384) ? _2607 : min(_2384, _2607));
        float _2867 = isnan(_2864) ? _2866 : (isnan(_2866) ? _2864 : min(_2866, _2864));
        float _2871 = (_2867 * _2350) + _2339;
        float _2872 = (_2867 * _2353) + _2343;
        float _2873 = (_2867 * _2356) + _2347;
        float _2874 = _2867 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2874;
        float _2878 = _2874 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 > _2878) || ((_2872 < _2876) || ((_2871 < _2876) || (_2871 > _2878))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2873, cbModelParam._m0[9u].z, fma(_2872, cbModelParam._m0[9u].y, _2871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2873, cbModelParam._m0[10u].z, fma(_2872, cbModelParam._m0[10u].y, _2871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2873, cbModelParam._m0[11u].z, fma(_2872, cbModelParam._m0[11u].y, _2871 * cbModelParam._m0[11u].x))), _2292);
            frontier_phi_18_40_ladder = _3001.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3001.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3001.x * cbModelParam._m0[1u].y;
        }
        _2372 = frontier_phi_18_40_ladder_2;
        _2374 = frontier_phi_18_40_ladder_1;
        _2376 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1447, _1448, _1449), _2292);
        _2372 = _2360.x * cbModelParam._m0[1u].y;
        _2374 = _2360.y * cbModelParam._m0[1u].y;
        _2376 = _2360.z * cbModelParam._m0[1u].y;
    }
    float _2380 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1264);
    float _2381 = isnan(_2380) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2380 : min(cbModelParam._m0[25u].w, _2380));
    float _2470;
    float _2472;
    float _2474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2434 = fma(_1511, cbModelParam._m0[21u].z, fma(_1507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1503)) + cbModelParam._m0[21u].w;
        float _2438 = fma(_1511, cbModelParam._m0[22u].z, fma(_1507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1503)) + cbModelParam._m0[22u].w;
        float _2442 = fma(_1511, cbModelParam._m0[23u].z, fma(_1507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1503)) + cbModelParam._m0[23u].w;
        float _2445 = fma(_1449, cbModelParam._m0[21u].z, fma(_1448, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1447));
        float _2448 = fma(_1449, cbModelParam._m0[22u].z, fma(_1448, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1447));
        float _2451 = fma(_1449, cbModelParam._m0[23u].z, fma(_1448, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1447));
        float _2612;
        if (_2445 > 0.0)
        {
            _2612 = abs((1.0 - _2434) / _2445);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2445 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2434 + 1.0) / _2445);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2612 = frontier_phi_30_26_ladder;
        }
        float _2891;
        if (_2448 > 0.0)
        {
            _2891 = abs((1.0 - _2438) / _2448);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2448 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2438 + 1.0) / _2448);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2891 = frontier_phi_42_37_ladder;
        }
        float _3104;
        if (_2451 > 0.0)
        {
            _3104 = abs((1.0 - _2442) / _2451);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2451 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2442 + 1.0) / _2451);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _3104 = frontier_phi_51_48_ladder;
        }
        float _3106 = isnan(_2891) ? _2612 : (isnan(_2612) ? _2891 : min(_2612, _2891));
        float _3107 = isnan(_3104) ? _3106 : (isnan(_3106) ? _3104 : min(_3106, _3104));
        float _3111 = (_3107 * _2445) + _2434;
        float _3112 = (_3107 * _2448) + _2438;
        float _3113 = (_3107 * _2451) + _2442;
        float _3114 = _3107 * 9.9999997473787516355514526367188e-05;
        float _3115 = (-1.0) - _3114;
        float _3117 = _3114 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_3113 > _3117) || ((_3113 < _3115) || ((_3112 > _3117) || ((_3112 < _3115) || ((_3111 < _3115) || (_3111 > _3117))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3313 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3113, cbModelParam._m0[17u].z, fma(_3112, cbModelParam._m0[17u].y, _3111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3113, cbModelParam._m0[18u].z, fma(_3112, cbModelParam._m0[18u].y, _3111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3113, cbModelParam._m0[19u].z, fma(_3112, cbModelParam._m0[19u].y, _3111 * cbModelParam._m0[19u].x))), _2381);
            frontier_phi_27_51_ladder = _3313.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3313.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3313.x * cbModelParam._m0[1u].z;
        }
        _2470 = frontier_phi_27_51_ladder_2;
        _2472 = frontier_phi_27_51_ladder_1;
        _2474 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1447, _1448, _1449), _2381);
        _2470 = _2454.x * cbModelParam._m0[1u].z;
        _2472 = _2454.y * cbModelParam._m0[1u].z;
        _2474 = _2454.z * cbModelParam._m0[1u].z;
    }
    float _2487 = (((_1474 * _1424) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2470 - _2372)) + _2372);
    float _2489 = (((_1474 * _1426) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2472 - _2374)) + _2374);
    float _2491 = (((_1474 * _1427) + _1475) * _1439) * ((cbModelParam._m0[1u].w * (_2474 - _2376)) + _2376);
    float _2494 = fma(_2491, cbSceneParam._m0[89u].z, fma(_2489, cbSceneParam._m0[89u].y, _2487 * cbSceneParam._m0[89u].x));
    float _2497 = fma(_2491, cbSceneParam._m0[90u].z, fma(_2489, cbSceneParam._m0[90u].y, _2487 * cbSceneParam._m0[90u].x));
    float _2500 = fma(_2491, cbSceneParam._m0[91u].z, fma(_2489, cbSceneParam._m0[91u].y, _2487 * cbSceneParam._m0[91u].x));
    vec4 _2508 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1361, _1362));
    float _2510 = _2508.w;
    float _2522 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2510);
    float _2523 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2510);
    float _2524 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2510);
    uvec4 _2528 = floatBitsToUint(cbInstanceData._m0[_1399 + 5u]);
    uint _2530 = _2528.x * 14u;
    uint _2531 = _2530 + 13u;
    float _2538 = _1439 + (-1.0);
    float _2543 = (cbLight._m0[_2531].x * _2538) + 1.0;
    float _2544 = (cbLight._m0[_2531].y * _2538) + 1.0;
    float _2545 = (cbLight._m0[_2531].z * _2538) + 1.0;
    float _2546 = (cbLight._m0[_2531].w * _2538) + 1.0;
    uint _2547 = _2530 + 5u;
    float _2553 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
    uint _2557 = _2530 + 4u;
    float _2566 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
    uint _2570 = _2530 | 1u;
    float _2581 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_1260, _1261, _1262));
    float _2584 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_1260, _1261, _1262));
    float _4988 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _4999 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2589 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * 0.3183098733425140380859375;
    float _2591 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * 0.3183098733425140380859375;
    float _2598 = ((cbLight._m0[_2547].x * _2553) * _2591) + (((cbLight._m0[_2557].x * _2522) * _2566) * _2589);
    float _2599 = ((_2553 * cbLight._m0[_2547].y) * _2591) + (((cbLight._m0[_2557].y * _2523) * _2566) * _2589);
    float _2600 = ((_2553 * cbLight._m0[_2547].z) * _2591) + (((cbLight._m0[_2557].z * _2524) * _2566) * _2589);
    uvec4 _2604 = floatBitsToUint(cbLight._m0[_2530 + 12u]);
    bool _2606 = _2604.x == 0u;
    float _2617;
    float _2619;
    float _2621;
    if (_2606)
    {
        _2617 = _2598;
        _2619 = _2599;
        _2621 = _2600;
    }
    else
    {
        uint _2625 = _2530 + 6u;
        float _2641 = (dot(vec3(cbLight._m0[_2530 + 2u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _5010 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _2644 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
        _2617 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2598;
        _2619 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2599;
        _2621 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2600;
    }
    bool _2624 = _2604.y == 0u;
    float _2662;
    float _2664;
    float _2666;
    if (_2624)
    {
        _2662 = _2617;
        _2664 = _2619;
        _2666 = _2621;
    }
    else
    {
        uint _2835 = _2530 + 7u;
        float _2851 = (dot(vec3(cbLight._m0[_2530 + 3u].xyz), vec3(_1260, _1261, _1262)) * 0.5) + 0.5;
        float _2852 = _2851 * _2851;
        float _5026 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2853 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _2854 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
        _2662 = (((cbLight._m0[_2835].x * 0.3183098733425140380859375) * _2853) * _2854) + _2617;
        _2664 = (((cbLight._m0[_2835].y * 0.3183098733425140380859375) * _2853) * _2854) + _2619;
        _2666 = (((cbLight._m0[_2835].z * 0.3183098733425140380859375) * _2853) * _2854) + _2621;
    }
    uint _2669 = _2530 + 8u;
    float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _1264) * 0.949999988079071044921875);
    float _2683 = _2682 * _2682;
    float _2684 = cbLight._m0[_2530].x + _1341;
    float _2685 = cbLight._m0[_2530].y + _1342;
    float _2686 = cbLight._m0[_2530].z + _1343;
    float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
    float _2691 = _2690 * _2684;
    float _2692 = _2690 * _2685;
    float _2693 = _2690 * _2686;
    float _2694 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2530].xyz));
    float _5042 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    float _5053 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _2698 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
    float _2699 = dot(vec3(_1260, _1261, _1262), vec3(_2691, _2692, _2693));
    float _5064 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2691, _2692, _2693));
    float _5075 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2683 * _2683;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) * 5.0);
    float _2720 = 0.959999978542327880859375 - _1421;
    float _2722 = 0.959999978542327880859375 - _1422;
    float _2723 = 0.959999978542327880859375 - _1423;
    float _2730 = 1.0 - _2683;
    float _2741 = (0.5 / (((_2698 * ((_2697 * _2730) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2698 * _2730) + _2683) * _2697))) * _2697;
    float _5086 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2743 = (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    uint _2757 = _2530 + 9u;
    float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _1264) * 0.949999988079071044921875);
    float _2769 = _2768 * _2768;
    float _2770 = cbLight._m0[_2570].x + _1341;
    float _2771 = cbLight._m0[_2570].y + _1342;
    float _2772 = cbLight._m0[_2570].z + _1343;
    float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
    float _2777 = _2776 * _2770;
    float _2778 = _2776 * _2771;
    float _2779 = _2776 * _2772;
    float _2780 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2570].xyz));
    float _5097 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2783 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
    float _2784 = dot(vec3(_1260, _1261, _1262), vec3(_2777, _2778, _2779));
    float _5108 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2787 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
    float _2788 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2777, _2778, _2779));
    float _5119 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
    float _2792 = _2769 * _2769;
    float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
    float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0)))) * 5.0);
    float _2810 = 1.0 - _2769;
    float _2820 = (0.5 / (((_2698 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2698 * _2810) + _2769) * _2783))) * _2783;
    float _5130 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2822 = (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
    float _2832 = (((((_2803 * _2720) + _1424) * cbLight._m0[_2757].x) * _2822) * _2553) + ((((cbLight._m0[_2669].x * _2522) * ((_2719 * _2720) + _1424)) * _2743) * _2566);
    float _2833 = (((((_2803 * _2722) + _1426) * cbLight._m0[_2757].y) * _2822) * _2553) + ((((cbLight._m0[_2669].y * _2523) * ((_2719 * _2722) + _1426)) * _2743) * _2566);
    float _2834 = (((((_2803 * _2723) + _1427) * cbLight._m0[_2757].z) * _2822) * _2553) + ((((cbLight._m0[_2669].z * _2524) * ((_2719 * _2723) + _1427)) * _2743) * _2566);
    float _2896;
    float _2898;
    float _2900;
    if (_2606)
    {
        _2896 = _2832;
        _2898 = _2833;
        _2900 = _2834;
    }
    else
    {
        uint _2902 = _2530 + 2u;
        uint _2906 = _2530 + 10u;
        float _2920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2902].w)) * _1264) * 0.949999988079071044921875);
        float _2921 = _2920 * _2920;
        float _2922 = cbLight._m0[_2902].x + _1341;
        float _2923 = cbLight._m0[_2902].y + _1342;
        float _2924 = cbLight._m0[_2902].z + _1343;
        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
        float _2929 = _2928 * _2922;
        float _2930 = _2928 * _2923;
        float _2931 = _2928 * _2924;
        float _2932 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_2902].xyz));
        float _5141 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
        float _2936 = dot(vec3(_1260, _1261, _1262), vec3(_2929, _2930, _2931));
        float _5152 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
        float _2940 = dot(vec3(cbLight._m0[_2902].xyz), vec3(_2929, _2930, _2931));
        float _5163 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2944 = _2921 * _2921;
        float _2948 = ((_2939 * _2939) * (_2944 + (-1.0))) + 1.0;
        float _2955 = exp2(log2(1.0 - (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) * 5.0);
        float _2962 = 1.0 - _2921;
        float _2972 = (0.5 / (((_2698 * ((_2935 * _2962) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2698 * _2962) + _2921) * _2935))) * _2935;
        float _5174 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * (_2944 / ((_2948 * _2948) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
        _2896 = (((((_2955 * _2720) + _1424) * cbLight._m0[_2906].x) * _2974) * _2975) + _2832;
        _2898 = (((((_2955 * _2722) + _1426) * cbLight._m0[_2906].y) * _2974) * _2975) + _2833;
        _2900 = (((((_2955 * _2723) + _1427) * cbLight._m0[_2906].z) * _2974) * _2975) + _2834;
    }
    float _3010;
    float _3012;
    float _3014;
    if (_2624)
    {
        _3010 = _2896;
        _3012 = _2898;
        _3014 = _2900;
    }
    else
    {
        uint _3021 = _2530 + 3u;
        uint _3025 = _2530 + 11u;
        float _3039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3021].w)) * _1264) * 0.949999988079071044921875);
        float _3040 = _3039 * _3039;
        float _3041 = cbLight._m0[_3021].x + _1341;
        float _3042 = cbLight._m0[_3021].y + _1342;
        float _3043 = cbLight._m0[_3021].z + _1343;
        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
        float _3048 = _3047 * _3041;
        float _3049 = _3047 * _3042;
        float _3050 = _3047 * _3043;
        float _3051 = dot(vec3(_1260, _1261, _1262), vec3(cbLight._m0[_3021].xyz));
        float _5190 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0));
        float _3055 = dot(vec3(_1260, _1261, _1262), vec3(_3048, _3049, _3050));
        float _5201 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3058 = isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0));
        float _3059 = dot(vec3(cbLight._m0[_3021].xyz), vec3(_3048, _3049, _3050));
        float _5212 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3063 = _3040 * _3040;
        float _3067 = ((_3058 * _3058) * (_3063 + (-1.0))) + 1.0;
        float _3074 = exp2(log2(1.0 - (isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0)))) * 5.0);
        float _3081 = 1.0 - _3040;
        float _3091 = (0.5 / (((_2698 * ((_3054 * _3081) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_2698 * _3081) + _3040) * _3054))) * _3054;
        float _5223 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3093 = (isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3063 / ((_3067 * _3067) * 3.141590118408203125));
        float _3094 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
        _3010 = (((((_3074 * _2720) + _1424) * cbLight._m0[_3025].x) * _3093) * _3094) + _2896;
        _3012 = (((((_3074 * _2722) + _1426) * cbLight._m0[_3025].y) * _3093) * _3094) + _2898;
        _3014 = (((((_3074 * _2723) + _1427) * cbLight._m0[_3025].z) * _3093) * _3094) + _2900;
    }
    float _3228;
    float _3230;
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    if (_2528.y == 0u)
    {
        float _3169 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3169;
        float _3171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3169;
        float _3172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3169;
        uvec4 _3184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3185 = _3184.x;
        uint _3196 = uint((float(_3184.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1362) / _3185))) + floor(float(uint(cbSceneParam._m0[85u].x * _1361) / _3185)));
        float _3206 = (log2(_3172 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3207 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
        uint _3210 = uint(isnan(14.0) ? _3207 : (isnan(_3207) ? 14.0 : min(_3207, 14.0)));
        uvec4 _3215 = texelFetch(g_lightClusterGridBuffer, int(((_3210 << 2u) + (_3196 << 6u)) >> 2u));
        uint _3216 = _3215.x;
        uint _3217 = _3184.z;
        float _3318;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        if (((((1u << ((_3217 >> 4u) & 15u)) + 4294967295u) & _3216) == 0u) || ((_3217 & 240u) == 0u))
        {
            _3318 = 0.0;
            _3320 = 0.0;
            _3322 = 0.0;
            _3324 = 0.0;
            _3326 = 0.0;
            _3328 = 0.0;
        }
        else
        {
            float _3319;
            float _3321;
            float _3323;
            float _3325;
            float _3327;
            float _3329;
            float _3470 = 0.0;
            float _3471 = 0.0;
            float _3472 = 0.0;
            float _3473 = 0.0;
            float _3474 = 0.0;
            float _3475 = 0.0;
            uint _3476 = 0u;
            uint _3485;
            bool _3486;
            for (;;)
            {
                _3485 = texelFetch(g_lightClassification, int((((_3210 << 5u) + (_3196 << 9u)) + (_3476 << 2u)) >> 2u)).x;
                _3486 = _3485 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3486)
                {
                    frontier_phi_68_pred = _3472;
                    frontier_phi_68_pred_1 = _3475;
                    frontier_phi_68_pred_2 = _3474;
                    frontier_phi_68_pred_3 = _3473;
                    frontier_phi_68_pred_4 = _3471;
                    frontier_phi_68_pred_5 = _3470;
                }
                else
                {
                    float _3615;
                    float _3616;
                    float _3617;
                    float _3618;
                    float _3619;
                    float _3620;
                    uint _3621;
                    _3615 = _3470;
                    _3616 = _3471;
                    _3617 = _3472;
                    _3618 = _3473;
                    _3619 = _3474;
                    _3620 = _3475;
                    _3621 = _3485;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    for (;;)
                    {
                        uint _3625 = uint(findLSB(_3621)) + (_3476 << 5u);
                        uint _3622 = (_3621 + 4294967295u) & _3621;
                        uint _3627 = _3625 * 48u;
                        vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3627)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 3u)).x));
                        uint _3647 = (_3625 * 48u) + 4u;
                        vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3647)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 3u)).x));
                        uint _3666 = (_3625 * 48u) + 8u;
                        vec3 _3677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x));
                        float _3681 = _3641.x - _3170;
                        float _3682 = _3641.y - _3171;
                        float _3683 = _3641.z - _3172;
                        float _3684 = dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683));
                        float _3687 = inversesqrt(_3684);
                        float _3688 = _3687 * _3681;
                        float _3689 = _3687 * _3682;
                        float _3690 = _3687 * _3683;
                        float _3691 = dot(vec3(_1380, _1383, _1386), vec3(_3688, _3689, _3690));
                        float _3696 = 1.0 - (_3684 * _3641.w);
                        float _5249 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3697 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                        float _3698 = sqrt(_3684) * _3660.w;
                        float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                        float _3701 = _3700 * _3700;
                        float _3704 = ((1.0 - _3701) * _3691) + _3701;
                        float _3707 = _3698 * _3698;
                        float _3711 = ((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3697) / ((_3707 * 0.699999988079071044921875) + 1.0);
                        float _3715 = (-0.0) - _3170;
                        float _3716 = (-0.0) - _3171;
                        float _3717 = (-0.0) - _3172;
                        float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                        float _3722 = _3721 * _3715;
                        float _3723 = _3721 * _3716;
                        float _3724 = _3721 * _3717;
                        float _3732 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                        float _3733 = 1.0 - _1455;
                        float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                        float _3741 = _3740 * _3740;
                        float _3742 = _3741 * _3741;
                        float _3743 = _3722 + _3688;
                        float _3744 = _3723 + _3689;
                        float _3745 = _3724 + _3690;
                        float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                        float _3753 = dot(vec3(_1380, _1383, _1386), vec3(_3722, _3723, _3724));
                        float _5265 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3756 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                        float _3757 = dot(vec3(_1380, _1383, _1386), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                        float _5276 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                        float _3760 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                        float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                        float _3765 = _3700 * _3741;
                        float _3766 = _3765 * _3765;
                        float _3769 = ((1.0 - _3766) * _3691) + _3766;
                        float _5287 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                        float _3770 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                        float _3771 = 1.0 - _3741;
                        float _3781 = (0.5 / (((_3770 * ((_3756 * _3771) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3741) * _3756))) * _3770;
                        float _5298 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                        float _3792 = (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0)))) / ((_3764 * _3764) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125))) * _3697;
                        _3545 = (_3711 * _3660.x) + _3618;
                        _3546 = (_3711 * _3660.y) + _3619;
                        _3547 = (_3711 * _3660.z) + _3620;
                        _3542 = (_3792 * _3677.x) + _3615;
                        _3543 = (_3792 * _3677.y) + _3616;
                        _3544 = (_3792 * _3677.z) + _3617;
                        if (_3622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3615 = _3542;
                            _3616 = _3543;
                            _3617 = _3544;
                            _3618 = _3545;
                            _3619 = _3546;
                            _3620 = _3547;
                            _3621 = _3622;
                        }
                    }
                    frontier_phi_68_pred = _3544;
                    frontier_phi_68_pred_1 = _3547;
                    frontier_phi_68_pred_2 = _3546;
                    frontier_phi_68_pred_3 = _3545;
                    frontier_phi_68_pred_4 = _3543;
                    frontier_phi_68_pred_5 = _3542;
                }
                _3323 = frontier_phi_68_pred;
                _3329 = frontier_phi_68_pred_1;
                _3327 = frontier_phi_68_pred_2;
                _3325 = frontier_phi_68_pred_3;
                _3321 = frontier_phi_68_pred_4;
                _3319 = frontier_phi_68_pred_5;
                uint _3477 = _3476 + 1u;
                if (_3477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3470 = _3319;
                    _3471 = _3321;
                    _3472 = _3323;
                    _3473 = _3325;
                    _3474 = _3327;
                    _3475 = _3329;
                    _3476 = _3477;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3318 = _3319;
            _3320 = _3321;
            _3322 = _3323;
            _3324 = _3325;
            _3326 = _3327;
            _3328 = _3329;
        }
        uvec4 _3332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3333 = _3332.z;
        uint _3335 = (_3333 >> 8u) & 15u;
        float _3438;
        float _3440;
        float _3442;
        float _3444;
        float _3446;
        float _3448;
        if (((4294967295u << _3335) & _3216) == 0u)
        {
            _3438 = _3318;
            _3440 = _3320;
            _3442 = _3322;
            _3444 = _3324;
            _3446 = _3326;
            _3448 = _3328;
        }
        else
        {
            float _3463 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
            float _3464 = _3463 * _3170;
            float _3465 = _3463 * _3171;
            float _3466 = _3463 * _3172;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3335 < ((_3333 >> 12u) & 15u))
            {
                float _3439;
                float _3441;
                float _3443;
                float _3445;
                float _3447;
                float _3449;
                float _3598 = _3318;
                float _3599 = _3320;
                float _3600 = _3322;
                float _3601 = _3324;
                float _3602 = _3326;
                float _3603 = _3328;
                uint _3604 = _3335;
                uint _3613;
                bool _3614;
                for (;;)
                {
                    _3613 = texelFetch(g_lightClassification, int((((_3210 << 5u) + (_3196 << 9u)) + (_3604 << 2u)) >> 2u)).x;
                    _3614 = _3613 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3614)
                    {
                        frontier_phi_79_pred = _3603;
                        frontier_phi_79_pred_1 = _3602;
                        frontier_phi_79_pred_2 = _3601;
                        frontier_phi_79_pred_3 = _3600;
                        frontier_phi_79_pred_4 = _3599;
                        frontier_phi_79_pred_5 = _3598;
                    }
                    else
                    {
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _4099;
                        float _4100;
                        float _4101;
                        float _4102;
                        float _4103;
                        float _4104;
                        float _3819 = _3598;
                        float _3820 = _3599;
                        float _3821 = _3600;
                        float _3822 = _3601;
                        float _3823 = _3602;
                        float _3824 = _3603;
                        uint _3825 = _3613;
                        uint _3826;
                        vec4 _3851;
                        float _3852;
                        vec4 _3867;
                        vec3 _3879;
                        vec4 _3894;
                        vec4 _3909;
                        float _3955;
                        bool _3956;
                        for (;;)
                        {
                            uint _3836 = ((_3604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3825));
                            _3826 = (_3825 + 4294967295u) & _3825;
                            uint _3838 = _3836 * 40u;
                            _3851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 3u)).x));
                            _3852 = _3851.w;
                            uint _3854 = (_3836 * 40u) + 4u;
                            _3867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 3u)).x));
                            uint _3869 = (_3836 * 40u) + 8u;
                            _3879 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 2u)).x));
                            uint _3881 = (_3836 * 40u) + 16u;
                            _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            uint _3896 = (_3836 * 40u) + 20u;
                            _3909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 3u)).x));
                            uint _3911 = (_3836 * 40u) + 24u;
                            vec4 _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            uint _3930 = (_3836 * 40u) + 28u;
                            vec4 _3943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 3u)).x));
                            _3955 = fma(_3172, _3943.z, fma(_3171, _3943.y, _3943.x * _3170)) + _3943.w;
                            _3956 = !((fma(_3172, _3924.z, fma(_3171, _3924.y, _3924.x * _3170)) + _3924.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3956)
                            {
                                float _3983 = _3851.x - _3170;
                                float _3984 = _3851.y - _3171;
                                float _3985 = _3851.z - _3172;
                                float _3986 = dot(vec3(_3983, _3984, _3985), vec3(_3983, _3984, _3985));
                                float _3989 = inversesqrt(_3986);
                                float _3990 = _3989 * _3983;
                                float _3991 = _3989 * _3984;
                                float _3992 = _3989 * _3985;
                                float _3996 = 1.0 - (_3986 / (_3852 * _3852));
                                float _5309 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3997 = isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0));
                                float _4001 = sqrt(_3986) * _3867.w;
                                float _4003 = 1.39999997615814208984375 / (_4001 + 1.39999997615814208984375);
                                float _4004 = _4003 * _4003;
                                float _4007 = ((1.0 - _4004) * dot(vec3(_3990, _3991, _3992), vec3(_1380, _1383, _1386))) + _4004;
                                float _4010 = _4001 * _4001;
                                float _4014 = (fma(_3172, _3894.z, fma(_3171, _3894.y, _3894.x * _3170)) + _3894.w) / _3955;
                                float _4015 = (fma(_3172, _3909.z, fma(_3171, _3909.y, _3909.x * _3170)) + _3909.w) / _3955;
                                float _4019 = 1.0 - dot(vec2(_4014, _4015), vec2(_4014, _4015));
                                float _5325 = isnan(0.0) ? _4019 : (isnan(_4019) ? 0.0 : max(_4019, 0.0));
                                float _4020 = isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0));
                                float _4021 = _4020 * (((isnan(0.0) ? _4007 : (isnan(_4007) ? 0.0 : max(_4007, 0.0))) * _3997) / ((_4010 * 0.699999988079071044921875) + 1.0));
                                float _4033 = exp2(log2(1.0 / ((_4010 * 3.5) + 5.0)) * 0.25);
                                float _4034 = 1.0 - _1455;
                                float _4041 = sqrt(1.0 - ((1.0 - (_4034 * _4034)) * (1.0 - (_4033 * _4033))));
                                float _4042 = _4041 * _4041;
                                float _4043 = _4042 * _4042;
                                float _4044 = _3990 - _3464;
                                float _4045 = _3991 - _3465;
                                float _4046 = _3992 - _3466;
                                float _4050 = inversesqrt(dot(vec3(_4044, _4045, _4046), vec3(_4044, _4045, _4046)));
                                float _4054 = dot(vec3(_1380, _1383, _1386), vec3((-0.0) - _3464, (-0.0) - _3465, (-0.0) - _3466));
                                float _5336 = isnan(0.0) ? _4054 : (isnan(_4054) ? 0.0 : max(_4054, 0.0));
                                float _4057 = isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0));
                                float _4058 = dot(vec3(_1380, _1383, _1386), vec3(_4050 * _4044, _4050 * _4045, _4050 * _4046));
                                float _5347 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4061 = isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0));
                                float _4065 = ((_4061 * _4061) * (_4043 + (-1.0))) + 1.0;
                                float _4066 = _4003 * _4042;
                                float _4067 = _4066 * _4066;
                                float _4073 = ((1.0 - _4067) * dot(vec3(_1380, _1383, _1386), vec3(_3990, _3991, _3992))) + _4067;
                                float _5358 = isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0));
                                float _4074 = isnan(1.0) ? _5358 : (isnan(_5358) ? 1.0 : min(_5358, 1.0));
                                float _4075 = 1.0 - _4042;
                                float _4085 = (0.5 / (((_4074 * ((_4057 * _4075) + _4042)) + 9.9999999392252902907785028219223e-09) + (((_4074 * _4075) + _4042) * _4057))) * _4074;
                                float _5369 = isnan(0.0) ? _4085 : (isnan(_4085) ? 0.0 : max(_4085, 0.0));
                                float _4095 = (_4020 * _3997) * (((_4043 * 3.1415927410125732421875) * (isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0)))) / ((_4065 * _4065) * ((_4010 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _4021 * _3867.z;
                                frontier_phi_85_pred_1 = _4021 * _3867.y;
                                frontier_phi_85_pred_2 = _4021 * _3867.x;
                                frontier_phi_85_pred_3 = _4095 * _3879.z;
                                frontier_phi_85_pred_4 = _4095 * _3879.y;
                                frontier_phi_85_pred_5 = _4095 * _3879.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _4104 = frontier_phi_85_pred;
                            _4103 = frontier_phi_85_pred_1;
                            _4102 = frontier_phi_85_pred_2;
                            _4101 = frontier_phi_85_pred_3;
                            _4100 = frontier_phi_85_pred_4;
                            _4099 = frontier_phi_85_pred_5;
                            _3809 = _4102 + _3822;
                            _3810 = _4103 + _3823;
                            _3811 = _4104 + _3824;
                            _3806 = _4099 + _3819;
                            _3807 = _4100 + _3820;
                            _3808 = _4101 + _3821;
                            if (_3826 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3819 = _3806;
                                _3820 = _3807;
                                _3821 = _3808;
                                _3822 = _3809;
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3826;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3811;
                        frontier_phi_79_pred_1 = _3810;
                        frontier_phi_79_pred_2 = _3809;
                        frontier_phi_79_pred_3 = _3808;
                        frontier_phi_79_pred_4 = _3807;
                        frontier_phi_79_pred_5 = _3806;
                    }
                    _3449 = frontier_phi_79_pred;
                    _3447 = frontier_phi_79_pred_1;
                    _3445 = frontier_phi_79_pred_2;
                    _3443 = frontier_phi_79_pred_3;
                    _3441 = frontier_phi_79_pred_4;
                    _3439 = frontier_phi_79_pred_5;
                    uint _3605 = _3604 + 1u;
                    if (_3605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3598 = _3439;
                        _3599 = _3441;
                        _3600 = _3443;
                        _3601 = _3445;
                        _3602 = _3447;
                        _3603 = _3449;
                        _3604 = _3605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3445;
                frontier_phi_60_61_ladder_1 = _3449;
                frontier_phi_60_61_ladder_2 = _3447;
                frontier_phi_60_61_ladder_3 = _3443;
                frontier_phi_60_61_ladder_4 = _3441;
                frontier_phi_60_61_ladder_5 = _3439;
            }
            else
            {
                frontier_phi_60_61_ladder = _3324;
                frontier_phi_60_61_ladder_1 = _3328;
                frontier_phi_60_61_ladder_2 = _3326;
                frontier_phi_60_61_ladder_3 = _3322;
                frontier_phi_60_61_ladder_4 = _3320;
                frontier_phi_60_61_ladder_5 = _3318;
            }
            _3438 = frontier_phi_60_61_ladder_5;
            _3440 = frontier_phi_60_61_ladder_4;
            _3442 = frontier_phi_60_61_ladder_3;
            _3444 = frontier_phi_60_61_ladder;
            _3446 = frontier_phi_60_61_ladder_2;
            _3448 = frontier_phi_60_61_ladder_1;
        }
        float _3453 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _3228 = (_3453 * _3444) + _2662;
        _3230 = (_3453 * _3446) + _2664;
        _3232 = (_3453 * _3448) + _2666;
        _3234 = ((_3438 * _1424) * _3453) + _3010;
        _3236 = ((_3440 * _1426) * _3453) + _3012;
        _3238 = ((_3442 * _1427) * _3453) + _3014;
    }
    else
    {
        _3228 = _2662;
        _3230 = _2664;
        _3232 = _2666;
        _3234 = _3010;
        _3236 = _3012;
        _3238 = _3014;
    }
    float _5385 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _5396 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
    float _5407 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _5418 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _3256 = ((isnan(1.0) ? _5385 : (isnan(_5385) ? 1.0 : min(_5385, 1.0))) * (_3228 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1439))) + ((_3234 + ((isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))) * _2281)) * cbPerFrame._m0[3u].x);
    float _3257 = ((isnan(1.0) ? _5396 : (isnan(_5396) ? 1.0 : min(_5396, 1.0))) * (_3230 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1439))) + ((_3236 + ((isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0))) * _2281)) * cbPerFrame._m0[3u].x);
    float _3258 = ((isnan(1.0) ? _5407 : (isnan(_5407) ? 1.0 : min(_5407, 1.0))) * (_3232 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1439))) + ((_3238 + ((isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))) * _2281)) * cbPerFrame._m0[3u].x);
    float _3263 = cbInstanceData._m0[_1399 + 6u].w * (isnan(1.0) ? _5418 : (isnan(_5418) ? 1.0 : min(_5418, 1.0)));
    float _3268 = _1361 / cbSceneParam._m0[86u].x;
    float _3269 = _1362 / cbSceneParam._m0[86u].y;
    vec4 _3283 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3268, _3269, (log2((isnan(cbSceneParam._m0[77u].w) ? _1284 : (isnan(_1284) ? cbSceneParam._m0[77u].w : min(_1284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3285 = _3283.x;
    float _3286 = _3283.y;
    float _3287 = _3283.z;
    float _3288 = _3283.w;
    float _3380;
    float _3382;
    float _3384;
    float _3386;
    if (_1284 > cbSceneParam._m0[78u].w)
    {
        float _3343 = isnan(_1284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1284 : min(cbSceneParam._m0[80u].w, _1284));
        float _3344 = _3343 / _1284;
        float _3355 = _3344 * _1334;
        float _3356 = _1335 * _3344;
        float _3357 = (-0.0) - _3356;
        float _3358 = _3344 * _1336;
        float _3360 = (cbSceneParam._m0[77u].w * _3357) / _3343;
        float _3361 = _3360 + cbSceneParam._m0[79u].w;
        float _3362 = cbSceneParam._m0[79u].w - _3356;
        float _3368 = sqrt(((_3355 * _3355) + (_3356 * _3356)) + (_3358 * _3358));
        float _3371 = (1.0 - (cbSceneParam._m0[77u].w / _3343)) * _3368;
        float _3376 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3378 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3555;
        if (abs((_3357 - _3360) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3555 = ((((_3361 > 0.0) ? exp2(_3376 * _3361) : (2.0 - exp2(_3378 * _3361))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3371;
        }
        else
        {
            float _3499 = 1.0 / cbSceneParam._m0[80u].x;
            float _3500 = isnan(_3362) ? _3361 : (isnan(_3361) ? _3362 : max(_3361, _3362));
            float _3501 = isnan(_3362) ? _3361 : (isnan(_3361) ? _3362 : min(_3361, _3362));
            float _3510 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : min(_3500, 0.0));
            float _3511 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : min(_3501, 0.0));
            _3555 = ((abs(_3368 / _3357) * cbSceneParam._m0[80u].y) * ((((_3510 - _3511) * 2.0) - ((exp2(_3376 * (isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0)))) - exp2(_3376 * (isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))))) * _3499)) - ((exp2(_3378 * _3510) - exp2(_3378 * _3511)) * _3499))) + (_3371 * cbSceneParam._m0[80u].z);
        }
        vec4 _3557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3268, _3269, 1.0), 0.0);
        float _3566 = exp2((_3555 * (-1.44269502162933349609375)) * (1.0 - _3557.w));
        float _3567 = log2(_3566);
        float _3583 = log2(_3288);
        _3380 = (exp2(_3583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].x)) * _3557.x) / cbSceneParam._m0[78u].x)) + _3285;
        _3382 = (exp2(_3583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].y)) * _3557.y) / cbSceneParam._m0[78u].y)) + _3286;
        _3384 = (exp2(_3583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3567 * cbSceneParam._m0[78u].z)) * _3557.z) / cbSceneParam._m0[78u].z)) + _3287;
        _3386 = _3566 * _3288;
    }
    else
    {
        _3380 = _3285;
        _3382 = _3286;
        _3384 = _3287;
        _3386 = _3288;
    }
    bool _3593;
    vec4 _3396;
    vec4 _3418;
    float _3420;
    float _3424;
    float _3425;
    float _3426;
    float _3427;
    bool _3437;
    for (;;)
    {
        _3396 = cbMatDynParam._m0[0u];
        float _3398 = roundEven(_3396.y);
        bool _3399 = _3398 == 3.0;
        float _3400 = log2(_3386);
        float _3407 = exp2(_3400 * cbSceneParam._m0[78u].x) * _3256;
        float _3408 = exp2(_3400 * cbSceneParam._m0[78u].y) * _3257;
        float _3409 = exp2(_3400 * cbSceneParam._m0[78u].z) * _3258;
        float _3416 = _1350 + (-0.5);
        _3418 = cbMtdParam._m0[1u];
        _3420 = _3418.y * _3416;
        float _3423 = (_3398 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3424 = _3423 * (_3399 ? _3407 : (_3407 + (cbSceneParam._m0[72u].w * _3380)));
        _3425 = _3423 * (_3399 ? _3408 : (_3408 + (cbSceneParam._m0[72u].w * _3382)));
        _3426 = _3423 * (_3399 ? _3409 : (_3409 + (cbSceneParam._m0[72u].w * _3384)));
        _3427 = _3416 * 0.999000012874603271484375;
        _3437 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3437)
        {
            if ((cbInstanceData._m0[_1399 + 7u].x + _3427) < 0.5)
            {
                _3593 = true;
                break;
            }
        }
        uint _3534 = _1400 + uint(_3396.w);
        if ((cbInstanceData._m0[_3534].w < 1.0) && ((cbInstanceData._m0[_3534].w + _3427) < 0.5))
        {
            _3593 = true;
            break;
        }
        if ((_3420 + _615) < _3418.x)
        {
            _3593 = true;
            break;
        }
        _3593 = false;
        break;
    }
    float _3797;
    if (_3593)
    {
        discard_state = true;
        _3797 = 0.0;
    }
    else
    {
        _3797 = _3263;
    }
    SV_Target.x = _3424;
    SV_Target.y = _3425;
    SV_Target.z = _3426;
    SV_Target.w = _3797;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3263;
    discard_exit();
}


