#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1845;
float _4509;
float _4510;
float _4511;
float _4512;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _256 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _257 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _258 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _262 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _263 = _262 * _256;
    float _264 = _262 * _257;
    float _265 = _262 * _258;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _283 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _284 = _283 * TANGENT_2.x;
    float _285 = _283 * TANGENT_2.y;
    float _286 = _283 * TANGENT_2.z;
    float _291;
    float _292;
    float _293;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _291 = (-0.0) - _270;
        _292 = (-0.0) - _271;
        _293 = (-0.0) - _272;
    }
    else
    {
        _291 = _270;
        _292 = _271;
        _293 = _272;
    }
    vec4 _313 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = 1.0 - ((1.0 - _313.z) * 1.39999997615814208984375);
    float _4521 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _328 = 1.0 - ((1.0 - _313.x) * 1.39999997615814208984375);
    float _4532 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _329 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _331 = 1.0 - ((1.0 - _313.y) * 1.39999997615814208984375);
    float _4543 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _334 = (_329 + _326) + _332;
    float _341 = (_334 * (1.0 - cbMtdParam._m0[19u].x)) + cbMtdParam._m0[19u].x;
    float _342 = (_334 * (1.0 - cbMtdParam._m0[19u].y)) + cbMtdParam._m0[19u].y;
    float _343 = (_334 * (1.0 - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z;
    vec4 _368 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _377 = 1.0 - ((1.0 - _368.x) * 1.39999997615814208984375);
    float _4554 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _388 = (_378 * ((cbMtdParam._m0[9u].x - _341) + ((1.0 - cbMtdParam._m0[9u].x) * _334))) + _341;
    float _389 = (_378 * ((cbMtdParam._m0[9u].y - _342) + ((1.0 - cbMtdParam._m0[9u].y) * _334))) + _342;
    float _390 = (_378 * ((cbMtdParam._m0[9u].z - _343) + ((1.0 - cbMtdParam._m0[9u].z) * _334))) + _343;
    float _403 = 1.0 - ((1.0 - _368.y) * 1.39999997615814208984375);
    float _4565 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _414 = (((cbMtdParam._m0[17u].x - _388) + ((1.0 - cbMtdParam._m0[17u].x) * _334)) * _404) + _388;
    float _415 = (((cbMtdParam._m0[17u].y - _389) + ((1.0 - cbMtdParam._m0[17u].y) * _334)) * _404) + _389;
    float _416 = (((cbMtdParam._m0[17u].z - _390) + ((1.0 - cbMtdParam._m0[17u].z) * _334)) * _404) + _390;
    float _430 = 1.0 - ((1.0 - _368.z) * 1.39999997615814208984375);
    float _4576 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _461 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x * cbMtdParam._m0[23u].w;
    float _476 = ((cbMtdParam._m0[21u].z * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _461) + (cbMtdParam._m0[22u].y * TEXCOORD_6))) + 1.0;
    float _4587 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _478 = 1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)));
    float _486 = ((cbMtdParam._m0[21u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _461) + (cbMtdParam._m0[22u].z * TEXCOORD_5))) + 1.0;
    float _4598 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = 1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)));
    vec4 _506 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _511 = cbMtdParam._m0[10u].x * _488;
    float _513 = cbMtdParam._m0[10u].y * _488;
    float _515 = cbMtdParam._m0[10u].z * _488;
    float _532 = ((_508 * (cbMtdParam._m0[16u].x - _511)) * _478) + (_511 * _508);
    float _533 = ((_509 * (cbMtdParam._m0[16u].y - _513)) * _478) + (_513 * _509);
    float _534 = ((_510 * (cbMtdParam._m0[16u].z - _515)) * _478) + (_515 * _510);
    float _555 = cbMtdParam._m0[22u].x * (-1.39999997615814208984375);
    float _559 = (_555 * ((TEXCOORD_7.x - _461) + (cbMtdParam._m0[21u].x * TEXCOORD_7.x))) + 1.0;
    float _560 = (_555 * ((TEXCOORD_7.y - _461) + (cbMtdParam._m0[21u].x * TEXCOORD_7.y))) + 1.0;
    float _561 = (_555 * ((TEXCOORD_7.z - _461) + (cbMtdParam._m0[21u].x * TEXCOORD_7.z))) + 1.0;
    float _4609 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4620 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4631 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _570 = (1.0 - cbMtdParam._m0[23u].y) + _329;
    float _573 = _570 * (1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))));
    float _574 = _570 * (1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))));
    float _575 = ((_329 + 1.0) - cbMtdParam._m0[23u].y) * (1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))));
    float _585 = _488 + _478;
    float _586 = _585 + _573;
    float _587 = _585 + _574;
    float _588 = _585 + _575;
    float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _592 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
    float _593 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _594 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
    vec4 _612 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _617 = _612.w;
    float _618 = _612.x * cbMtdParam._m0[12u].x;
    float _619 = _612.y * cbMtdParam._m0[12u].y;
    float _620 = _612.z * cbMtdParam._m0[12u].z;
    vec4 _639 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _653 = (((_639.x * cbMtdParam._m0[13u].x) - _618) * _329) + _618;
    float _654 = (((_639.y * cbMtdParam._m0[13u].y) - _619) * _329) + _619;
    float _655 = (((_639.z * cbMtdParam._m0[13u].z) - _620) * _329) + _620;
    vec4 _673 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _687 = (((_673.x * cbMtdParam._m0[14u].x) - _653) * _332) + _653;
    float _688 = (((_673.y * cbMtdParam._m0[14u].y) - _654) * _332) + _654;
    float _689 = (((_673.z * cbMtdParam._m0[14u].z) - _655) * _332) + _655;
    vec4 _707 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _721 = (((_707.x * cbMtdParam._m0[15u].x) - _687) * _326) + _687;
    float _722 = (((_707.y * cbMtdParam._m0[15u].y) - _688) * _326) + _688;
    float _723 = (((_707.z * cbMtdParam._m0[15u].z) - _689) * _326) + _689;
    float _743 = ((_721 - (_721 * _592)) + (((_592 * 4.55000019073486328125) * ((_573 * ((cbMtdParam._m0[11u].x * _508) - _532)) + _532)) * _721)) * ((((cbMtdParam._m0[18u].x - _414) + ((1.0 - cbMtdParam._m0[18u].x) * _334)) * _431) + _414);
    float _744 = ((_722 - (_722 * _593)) + (((_593 * 4.55000019073486328125) * ((_574 * ((cbMtdParam._m0[11u].y * _509) - _533)) + _533)) * _722)) * ((((cbMtdParam._m0[18u].y - _415) + ((1.0 - cbMtdParam._m0[18u].y) * _334)) * _431) + _415);
    float _745 = ((_723 - (_594 * _723)) + (((_594 * 4.55000019073486328125) * ((_575 * ((cbMtdParam._m0[11u].z * _510) - _534)) + _534)) * _723)) * ((((cbMtdParam._m0[18u].z - _416) + ((1.0 - cbMtdParam._m0[18u].z) * _334)) * _431) + _416);
    float _759 = ((cbMtdParam._m0[20u].w - cbMtdParam._m0[24u].x) * _592) + cbMtdParam._m0[24u].x;
    float _762 = ((cbMtdParam._m0[20u].x - _759) * _329) + _759;
    float _765 = ((cbMtdParam._m0[20u].y - _762) * _332) + _762;
    float _768 = ((cbMtdParam._m0[20u].z - _765) * _326) + _765;
    vec4 _780 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _784 = _780.z;
    float _788 = (_780.x * 2.0) + (-1.0);
    float _790 = (_780.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_788, _790), vec2(_788, _790));
    float _4672 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _796 = sqrt(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))));
    float _799 = fma(_796, _291, fma(_790, _284, _788 * _263));
    float _802 = fma(_796, _292, fma(_790, _285, _788 * _264));
    float _805 = fma(_796, _293, fma(_790, _286, _788 * _265));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    float _810 = _809 * _799;
    float _811 = _809 * _802;
    float _812 = _809 * _805;
    vec4 _825 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _831 = (_825.x * 2.0) + (-1.0);
    float _832 = (_825.y * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _4683 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _838 = sqrt(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))));
    float _841 = fma(_838, _291, fma(_832, _284, _831 * _263));
    float _844 = fma(_838, _292, fma(_832, _285, _831 * _264));
    float _847 = fma(_838, _293, fma(_832, _286, _831 * _265));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _857 = fma(_854, _246, fma(_853, _245, _852 * _244));
    float _860 = fma(_854, _279, fma(_853, _278, _852 * _277));
    float _863 = fma(_854, _293, fma(_853, _292, _852 * _291));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    vec4 _880 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _886 = (_880.x * 2.0) + (-1.0);
    float _887 = (_880.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _4694 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _893 = sqrt(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))));
    float _896 = fma(_893, _291, fma(_887, _284, _886 * _263));
    float _899 = fma(_893, _292, fma(_887, _285, _886 * _264));
    float _902 = fma(_893, _293, fma(_887, _286, _886 * _265));
    float _906 = inversesqrt(dot(vec3(_896, _899, _902), vec3(_896, _899, _902)));
    float _907 = _906 * _896;
    float _908 = _906 * _899;
    float _909 = _906 * _902;
    float _912 = fma(_909, _246, fma(_908, _245, _907 * _244));
    float _915 = fma(_909, _279, fma(_908, _278, _907 * _277));
    float _918 = fma(_909, _293, fma(_908, _292, _907 * _291));
    float _922 = inversesqrt(dot(vec3(_912, _915, _918), vec3(_912, _915, _918)));
    vec4 _935 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _941 = (_935.x * 2.0) + (-1.0);
    float _942 = (_935.y * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4705 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _948 = sqrt(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))));
    float _951 = fma(_948, _291, fma(_942, _284, _941 * _263));
    float _954 = fma(_948, _292, fma(_942, _285, _941 * _264));
    float _957 = fma(_948, _293, fma(_942, _286, _941 * _265));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _967 = fma(_964, _246, fma(_963, _245, _962 * _244));
    float _970 = fma(_964, _279, fma(_963, _278, _962 * _277));
    float _973 = fma(_964, _293, fma(_963, _292, _962 * _291));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _983 = fma(_812, _246, fma(_811, _245, _810 * _244));
    float _986 = fma(_812, _279, fma(_811, _278, _810 * _277));
    float _989 = fma(_812, _293, fma(_811, _292, _810 * _291));
    float _993 = inversesqrt(dot(vec3(_983, _986, _989), vec3(_983, _986, _989)));
    float _994 = _993 * _983;
    float _995 = _993 * _986;
    float _996 = _993 * _989;
    float _1003 = (((_977 * _967) - _994) * _329) + _994;
    float _1004 = (((_977 * _970) - _995) * _329) + _995;
    float _1005 = (((_977 * _973) - _996) * _329) + _996;
    vec4 _1018 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4716 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1031 = sqrt(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))));
    float _1034 = fma(_1031, _291, fma(_1025, _284, _1024 * _263));
    float _1037 = fma(_1031, _292, fma(_1025, _285, _1024 * _264));
    float _1040 = fma(_1031, _293, fma(_1025, _286, _1024 * _265));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _1050 = fma(_1047, _246, fma(_1046, _245, _1045 * _244));
    float _1053 = fma(_1047, _279, fma(_1046, _278, _1045 * _277));
    float _1056 = fma(_1047, _293, fma(_1046, _292, _1045 * _291));
    float _1060 = inversesqrt(dot(vec3(_1050, _1053, _1056), vec3(_1050, _1053, _1056)));
    float _1070 = (((_1060 * _1050) - _1003) * _332) + _1003;
    float _1071 = (((_1060 * _1053) - _1004) * _332) + _1004;
    float _1072 = (((_1060 * _1056) - _1005) * _332) + _1005;
    vec4 _1085 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1091 = (_1085.x * 2.0) + (-1.0);
    float _1092 = (_1085.y * 2.0) + (-1.0);
    float _1093 = dot(vec2(_1091, _1092), vec2(_1091, _1092));
    float _4727 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1098 = sqrt(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))));
    float _1101 = fma(_1098, _291, fma(_1092, _284, _1091 * _263));
    float _1104 = fma(_1098, _292, fma(_1092, _285, _1091 * _264));
    float _1107 = fma(_1098, _293, fma(_1092, _286, _1091 * _265));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _1117 = fma(_1114, _246, fma(_1113, _245, _1112 * _244));
    float _1120 = fma(_1114, _279, fma(_1113, _278, _1112 * _277));
    float _1123 = fma(_1114, _293, fma(_1113, _292, _1112 * _291));
    float _1127 = inversesqrt(dot(vec3(_1117, _1120, _1123), vec3(_1117, _1120, _1123)));
    float _1137 = (((_1127 * _1123) - _1072) * _326) + _1072;
    vec4 _1149 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1155 = (_1149.x * 2.0) + (-1.0);
    float _1156 = (_1149.y * 2.0) + (-1.0);
    float _1157 = dot(vec2(_1155, _1156), vec2(_1155, _1156));
    float _4738 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1162 = sqrt(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))));
    float _1165 = fma(_1162, _291, fma(_1156, _284, _1155 * _263));
    float _1168 = fma(_1162, _292, fma(_1156, _285, _1155 * _264));
    float _1171 = fma(_1162, _293, fma(_1156, _286, _1155 * _265));
    float _1175 = inversesqrt(dot(vec3(_1165, _1168, _1171), vec3(_1165, _1168, _1171)));
    float _1176 = _1175 * _1165;
    float _1177 = _1175 * _1168;
    float _1178 = _1175 * _1171;
    float _1181 = fma(_1178, _246, fma(_1177, _245, _1176 * _244));
    float _1184 = fma(_1178, _279, fma(_1177, _278, _1176 * _277));
    float _1187 = fma(_1178, _293, fma(_1177, _292, _1176 * _291));
    float _1191 = inversesqrt(dot(vec3(_1181, _1184, _1187), vec3(_1181, _1184, _1187)));
    vec4 _1229 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _1243 = (((((((_912 * _478) * _922) * cbMtdParam._m0[22u].w) + ((((_586 * _570) * _857) * _867) * cbMtdParam._m0[23u].x)) + _1070) + (((_1127 * _1117) - _1070) * _326)) + (((_1181 * _488) * _1191) * cbMtdParam._m0[21u].w)) + (((_1229.x * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1248 = (((((((_915 * _478) * _922) * cbMtdParam._m0[22u].w) + ((((_587 * _570) * _860) * _867) * cbMtdParam._m0[23u].x)) + _1071) + (((_1127 * _1120) - _1071) * _326)) + (((_1184 * _488) * _1191) * cbMtdParam._m0[21u].w)) + (((_1229.y * 2.0) + (-1.0)) * cbMtdParam._m0[23u].z);
    float _1251 = fma(_1137, _291, fma(_1248, _277, _1243 * _244));
    float _1254 = fma(_1137, _292, fma(_1248, _278, _1243 * _245));
    float _1257 = fma(_1137, _293, fma(_1248, _279, _1243 * _246));
    float _1261 = inversesqrt(dot(vec3(_1251, _1254, _1257), vec3(_1251, _1254, _1257)));
    float _1262 = _1261 * _1251;
    float _1263 = _1261 * _1254;
    float _1264 = _1261 * _1257;
    float _4749 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _1265 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _4760 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1266 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _4771 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4782 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4793 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4804 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _1270 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
    float _1286 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1326 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1336 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1326);
    float _1337 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1326);
    float _1338 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1326);
    float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
    float _1343 = _1336 * _1342;
    float _1344 = _1337 * _1342;
    float _1345 = _1338 * _1342;
    vec4 _1350 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1352 = _1350.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1524 = sqrt(((_1336 * _1336) + (_1337 * _1337)) + (_1338 * _1338));
        float _1530 = (cbMatDynParam._m0[5u].x * _1524) + cbMatDynParam._m0[5u].y;
        float _4815 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _1535 = (cbMatDynParam._m0[5u].z * _1524) + cbMatDynParam._m0[5u].w;
        float _4826 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) - _1531)) + _1531) < ((_1352 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1363 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1364 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1382 = fma(_1264, cbSceneParam._m0[5u].z, fma(_1263, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1262));
    float _1385 = fma(_1264, cbSceneParam._m0[6u].z, fma(_1263, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1262));
    float _1388 = fma(_1264, cbSceneParam._m0[7u].z, fma(_1263, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1262));
    uint _1401 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1402 = _1401 + 9u;
    uint _1403 = _1402 + uint(cbMatDynParam._m0[0u].w);
    float _1409 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * cbInstanceData._m0[_1403].x;
    float _1410 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * cbInstanceData._m0[_1403].y;
    float _1411 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * cbInstanceData._m0[_1403].z;
    float _4837 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1412 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _4848 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1413 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _4859 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
    float _1414 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _1415 = 1.0 - _1270;
    float _1416 = _1412 * _1415;
    float _1417 = _1413 * _1415;
    float _1418 = _1414 * _1415;
    float _1423 = (_1412 + (-0.039999999105930328369140625)) * _1270;
    float _1424 = (_1413 + (-0.039999999105930328369140625)) * _1270;
    float _1425 = (_1414 + (-0.039999999105930328369140625)) * _1270;
    float _1426 = _1423 + 0.039999999105930328369140625;
    float _1428 = _1424 + 0.039999999105930328369140625;
    float _1429 = _1425 + 0.039999999105930328369140625;
    vec4 _1438 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1363, cbSceneParam._m0[86u].y * _1364));
    float _1441 = _1438.x * TEXCOORD_7.w;
    float _1442 = dot(vec3(_1262, _1263, _1264), vec3(_1343, _1344, _1345));
    float _1445 = _1442 * 2.0;
    float _1449 = (_1445 * _1262) - _1343;
    float _1450 = (_1445 * _1263) - _1344;
    float _1451 = (_1445 * _1264) - _1345;
    float _1455 = abs(dot(vec3(_1343, _1344, _1345), vec3(_1262, _1263, _1264)));
    float _4870 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1457 = sqrt(_1266);
    float _1470 = exp2((_1457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1457 * 3.0));
    float _1476 = (1.0 - _1470) * ((_1457 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1477 = _1470 * _1457;
    float _1505 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1509 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1844;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1569 = fma(_1513, cbModelParam._m0[26u].z, fma(_1509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1505));
        float _1573 = fma(_1513, cbModelParam._m0[27u].z, fma(_1509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1505));
        float _1577 = fma(_1513, cbModelParam._m0[28u].z, fma(_1509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1505));
        float _1602 = _1505 + _1262;
        float _1603 = _1509 + _1263;
        float _1604 = _1513 + _1264;
        float _1614 = fma(_1604, cbModelParam._m0[26u].z, fma(_1603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1602)) - _1569;
        float _1615 = fma(_1604, cbModelParam._m0[27u].z, fma(_1603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1602)) - _1573;
        float _1616 = fma(_1604, cbModelParam._m0[28u].z, fma(_1603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1602)) - _1577;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1569 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1573 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[34u].z) + ((((((_1577 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1672 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1638.x + (-0.5));
        float _1674 = _1672 * (_1638.y + (-0.5));
        float _1675 = _1672 * (_1638.z + (-0.5));
        float _1682 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1645.x + (-0.5));
        float _1684 = _1682 * (_1645.y + (-0.5));
        float _1685 = _1682 * (_1645.z + (-0.5));
        float _1692 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1652.x + (-0.5));
        float _1694 = _1692 * (_1652.y + (-0.5));
        float _1695 = _1692 * (_1652.z + (-0.5));
        float _1702 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1659.x + (-0.5));
        float _1704 = _1702 * (_1659.y + (-0.5));
        float _1705 = _1702 * (_1659.z + (-0.5));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1673 * 0.5;
        float _1710 = _1683 * 0.5;
        float _1711 = _1693 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1726 = (dot(vec3(_1262, _1263, _1264), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4896 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1736 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4907 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4918 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_1738 + 1.0))) + _1743) * _1706;
        float _1753 = _1674 * 0.5;
        float _1754 = _1684 * 0.5;
        float _1755 = _1694 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_1262, _1263, _1264), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4929 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4940 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4951 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_1780 + 1.0))) + _1785) * _1707;
        float _1795 = _1675 * 0.5;
        float _1796 = _1685 * 0.5;
        float _1797 = _1695 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_1262, _1263, _1264), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4962 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4973 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4984 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_1822 + 1.0))) + _1827) * _1708;
        _1844 = _1675;
        _1846 = _1674;
        _1847 = _1673;
        _1848 = _1685;
        _1849 = _1684;
        _1850 = _1683;
        _1851 = _1695;
        _1852 = _1694;
        _1853 = _1693;
        _1854 = _1708;
        _1855 = _1707;
        _1856 = _1706;
        _1857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1845;
        _1846 = _1845;
        _1847 = _1845;
        _1848 = _1845;
        _1849 = _1845;
        _1850 = _1845;
        _1851 = _1845;
        _1852 = _1845;
        _1853 = _1845;
        _1854 = _1845;
        _1855 = _1845;
        _1856 = _1845;
        _1857 = 0.0;
        _1858 = 0.0;
        _1859 = 0.0;
    }
    float _2157;
    float _2158;
    float _2159;
    float _2160;
    float _2161;
    float _2162;
    float _2163;
    float _2164;
    float _2165;
    float _2166;
    float _2167;
    float _2168;
    float _2169;
    float _2170;
    float _2171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1888 = fma(_1513, cbModelParam._m0[30u].z, fma(_1509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505));
        float _1892 = fma(_1513, cbModelParam._m0[31u].z, fma(_1509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505));
        float _1896 = fma(_1513, cbModelParam._m0[32u].z, fma(_1509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505));
        float _1919 = _1505 + _1262;
        float _1920 = _1509 + _1263;
        float _1921 = _1513 + _1264;
        float _1931 = fma(_1921, cbModelParam._m0[30u].z, fma(_1920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1919)) - _1888;
        float _1932 = fma(_1921, cbModelParam._m0[31u].z, fma(_1920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1919)) - _1892;
        float _1933 = fma(_1921, cbModelParam._m0[32u].z, fma(_1920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1919)) - _1896;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1950 = ((_1937 * _1931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1951 = ((_1937 * _1932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1952 = ((_1937 * _1933) / cbModelParam._m0[35u].z) + ((((((_1896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1950, _1951, _1952), 0.0);
        vec4 _1961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1950, _1951, _1952), 0.0);
        vec4 _1968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1950, _1951, _1952), 0.0);
        vec4 _1975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1950, _1951, _1952), 0.0);
        float _1987 = exp2((_1954.w + (-0.5)) * 20.0) * 2.0;
        float _1988 = _1987 * (_1954.x + (-0.5));
        float _1989 = _1987 * (_1954.y + (-0.5));
        float _1990 = _1987 * (_1954.z + (-0.5));
        float _1997 = exp2((_1961.w + (-0.5)) * 20.0) * 2.0;
        float _1998 = _1997 * (_1961.x + (-0.5));
        float _1999 = _1997 * (_1961.y + (-0.5));
        float _2000 = _1997 * (_1961.z + (-0.5));
        float _2007 = exp2((_1968.w + (-0.5)) * 20.0) * 2.0;
        float _2008 = _2007 * (_1968.x + (-0.5));
        float _2009 = _2007 * (_1968.y + (-0.5));
        float _2010 = _2007 * (_1968.z + (-0.5));
        float _2017 = exp2((_1975.w + (-0.5)) * 20.0) * 2.0;
        float _2018 = _2017 * (_1975.x + (-0.5));
        float _2019 = _2017 * (_1975.y + (-0.5));
        float _2020 = _2017 * (_1975.z + (-0.5));
        float _2021 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2022 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2023 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2024 = _1988 * 0.5;
        float _2025 = _1998 * 0.5;
        float _2026 = _2008 * 0.5;
        float _2027 = dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026));
        float _2032 = (_2027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2027);
        float _2040 = (dot(vec3(_1262, _1263, _1264), vec3(_2032 * _2024, _2032 * _2025, _2032 * _2026)) + 1.0) * 0.5;
        float _5025 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2049 = sqrt(((_2025 * _2025) + (_2024 * _2024)) + (_2026 * _2026)) / (_2021 + 9.9999997473787516355514526367188e-06);
        float _5036 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _2051 = _2050 * 2.0;
        float _2055 = (1.0 - _2050) / (_2050 + 1.0);
        float _5047 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
        float _2065 = ((((1.0 - _2056) * (_2051 + 2.0)) * exp2(log2(isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2051 + 1.0))) + _2056) * _2021;
        float _2066 = _1989 * 0.5;
        float _2067 = _1999 * 0.5;
        float _2068 = _2009 * 0.5;
        float _2069 = dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068));
        float _2074 = (_2069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2069);
        float _2082 = (dot(vec3(_1262, _1263, _1264), vec3(_2074 * _2066, _2074 * _2067, _2074 * _2068)) + 1.0) * 0.5;
        float _5058 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2091 = sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068)) / (_2022 + 9.9999997473787516355514526367188e-06);
        float _5069 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
        float _2093 = _2092 * 2.0;
        float _2097 = (1.0 - _2092) / (_2092 + 1.0);
        float _5080 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
        float _2107 = ((((1.0 - _2098) * (_2093 + 2.0)) * exp2(log2(isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_2093 + 1.0))) + _2098) * _2022;
        float _2108 = _1990 * 0.5;
        float _2109 = _2000 * 0.5;
        float _2110 = _2010 * 0.5;
        float _2111 = dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110));
        float _2116 = (_2111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2111);
        float _2124 = (dot(vec3(_1262, _1263, _1264), vec3(_2116 * _2108, _2116 * _2109, _2116 * _2110)) + 1.0) * 0.5;
        float _5091 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2133 = sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110)) / (_2023 + 9.9999997473787516355514526367188e-06);
        float _5102 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
        float _2135 = _2134 * 2.0;
        float _2139 = (1.0 - _2134) / (_2134 + 1.0);
        float _5113 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
        float _2149 = ((((1.0 - _2140) * (_2135 + 2.0)) * exp2(log2(isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_2135 + 1.0))) + _2140) * _2023;
        _2157 = _1990;
        _2158 = _1989;
        _2159 = _1988;
        _2160 = _2000;
        _2161 = _1999;
        _2162 = _1998;
        _2163 = _2010;
        _2164 = _2009;
        _2165 = _2008;
        _2166 = _2023;
        _2167 = _2022;
        _2168 = _2021;
        _2169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0)));
        _2170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0)));
        _2171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)));
    }
    else
    {
        _2157 = _1845;
        _2158 = _1845;
        _2159 = _1845;
        _2160 = _1845;
        _2161 = _1845;
        _2162 = _1845;
        _2163 = _1845;
        _2164 = _1845;
        _2165 = _1845;
        _2166 = _1845;
        _2167 = _1845;
        _2168 = _1845;
        _2169 = 0.0;
        _2170 = 0.0;
        _2171 = 0.0;
    }
    float _2181 = (cbModelParam._m0[1u].x * (_2169 - _1857)) + _1857;
    float _2182 = (cbModelParam._m0[1u].x * (_2170 - _1858)) + _1858;
    float _2183 = (cbModelParam._m0[1u].x * (_2171 - _1859)) + _1859;
    float _2204 = fma(_2183, cbSceneParam._m0[89u].z, fma(_2182, cbSceneParam._m0[89u].y, _2181 * cbSceneParam._m0[89u].x));
    float _2207 = fma(_2183, cbSceneParam._m0[90u].z, fma(_2182, cbSceneParam._m0[90u].y, _2181 * cbSceneParam._m0[90u].x));
    float _2210 = fma(_2183, cbSceneParam._m0[91u].z, fma(_2182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2181));
    float _2225 = _1449 * 0.5;
    float _2226 = _1450 * 0.5;
    float _2227 = _1451 * 0.5;
    float _2228 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_2159, _2162, _2165, _2168));
    float _2231 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_2158, _2161, _2164, _2167));
    float _2234 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_2157, _2160, _2163, _2166));
    float _2268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2241 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_1844, _1848, _1851, _1854));
        float _2245 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_1846, _1849, _1852, _1855));
        float _2249 = dot(vec4(_2225, _2226, _2227, 1.0), vec4(_1847, _1850, _1853, _1856));
        float _2256 = dot(vec4(cbModelParam._m0[39u]), vec4(_2225, _2226, _2227, 1.0));
        _2268 = dot(vec3(isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0)), isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0)), isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2256) ? 0.0 : (isnan(0.0) ? _2256 : max(0.0, _2256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2268 = 1.0;
    }
    float _2279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2270 = dot(vec4(cbModelParam._m0[40u]), vec4(_2225, _2226, _2227, 1.0));
        _2279 = dot(vec3(isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0)), isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0)), isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2270) ? 0.0 : (isnan(0.0) ? _2270 : max(0.0, _2270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2279 = 1.0;
    }
    float _2283 = (_2279 * cbModelParam._m0[1u].x) + (_2268 * (1.0 - cbModelParam._m0[1u].x));
    float _2293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1266);
    float _2294 = isnan(_2293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2293 : min(cbModelParam._m0[25u].z, _2293));
    float _2374;
    float _2376;
    float _2378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2341 = fma(_1513, cbModelParam._m0[13u].z, fma(_1509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1505)) + cbModelParam._m0[13u].w;
        float _2345 = fma(_1513, cbModelParam._m0[14u].z, fma(_1509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1505)) + cbModelParam._m0[14u].w;
        float _2349 = fma(_1513, cbModelParam._m0[15u].z, fma(_1509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1505)) + cbModelParam._m0[15u].w;
        float _2352 = fma(_1451, cbModelParam._m0[13u].z, fma(_1450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1449));
        float _2355 = fma(_1451, cbModelParam._m0[14u].z, fma(_1450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1449));
        float _2358 = fma(_1451, cbModelParam._m0[15u].z, fma(_1450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1449));
        float _2386;
        if (_2352 > 0.0)
        {
            _2386 = abs((1.0 - _2341) / _2352);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2352 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2341 + 1.0) / _2352);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2386 = frontier_phi_19_17_ladder;
        }
        float _2557;
        if (_2355 > 0.0)
        {
            _2557 = abs((1.0 - _2345) / _2355);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2355 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2345 + 1.0) / _2355);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2557 = frontier_phi_28_24_ladder;
        }
        float _2852;
        if (_2358 > 0.0)
        {
            _2852 = abs((1.0 - _2349) / _2358);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2358 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2349 + 1.0) / _2358);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2852 = frontier_phi_40_35_ladder;
        }
        float _2854 = isnan(_2557) ? _2386 : (isnan(_2386) ? _2557 : min(_2386, _2557));
        float _2855 = isnan(_2852) ? _2854 : (isnan(_2854) ? _2852 : min(_2854, _2852));
        float _2859 = (_2855 * _2352) + _2341;
        float _2860 = (_2855 * _2355) + _2345;
        float _2861 = (_2855 * _2358) + _2349;
        float _2862 = _2855 * 9.9999997473787516355514526367188e-05;
        float _2864 = (-1.0) - _2862;
        float _2866 = _2862 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2861 > _2866) || ((_2861 < _2864) || ((_2860 > _2866) || ((_2860 < _2864) || ((_2859 < _2864) || (_2859 > _2866))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2861, cbModelParam._m0[9u].z, fma(_2860, cbModelParam._m0[9u].y, _2859 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2861, cbModelParam._m0[10u].z, fma(_2860, cbModelParam._m0[10u].y, _2859 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2861, cbModelParam._m0[11u].z, fma(_2860, cbModelParam._m0[11u].y, _2859 * cbModelParam._m0[11u].x))), _2294);
            frontier_phi_18_40_ladder = _3006.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3006.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3006.x * cbModelParam._m0[1u].y;
        }
        _2374 = frontier_phi_18_40_ladder_2;
        _2376 = frontier_phi_18_40_ladder_1;
        _2378 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1449, _1450, _1451), _2294);
        _2374 = _2362.x * cbModelParam._m0[1u].y;
        _2376 = _2362.y * cbModelParam._m0[1u].y;
        _2378 = _2362.z * cbModelParam._m0[1u].y;
    }
    float _2382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1266);
    float _2383 = isnan(_2382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2382 : min(cbModelParam._m0[25u].w, _2382));
    float _2472;
    float _2474;
    float _2476;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2436 = fma(_1513, cbModelParam._m0[21u].z, fma(_1509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1505)) + cbModelParam._m0[21u].w;
        float _2440 = fma(_1513, cbModelParam._m0[22u].z, fma(_1509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1505)) + cbModelParam._m0[22u].w;
        float _2444 = fma(_1513, cbModelParam._m0[23u].z, fma(_1509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1505)) + cbModelParam._m0[23u].w;
        float _2447 = fma(_1451, cbModelParam._m0[21u].z, fma(_1450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1449));
        float _2450 = fma(_1451, cbModelParam._m0[22u].z, fma(_1450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1449));
        float _2453 = fma(_1451, cbModelParam._m0[23u].z, fma(_1450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1449));
        float _2562;
        if (_2447 > 0.0)
        {
            _2562 = abs((1.0 - _2436) / _2447);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2447 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2436 + 1.0) / _2447);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2562 = frontier_phi_30_26_ladder;
        }
        float _2879;
        if (_2450 > 0.0)
        {
            _2879 = abs((1.0 - _2440) / _2450);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2450 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2440 + 1.0) / _2450);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2879 = frontier_phi_42_37_ladder;
        }
        float _3217;
        if (_2453 > 0.0)
        {
            _3217 = abs((1.0 - _2444) / _2453);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2453 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2444 + 1.0) / _2453);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _3217 = frontier_phi_52_49_ladder;
        }
        float _3219 = isnan(_2879) ? _2562 : (isnan(_2562) ? _2879 : min(_2562, _2879));
        float _3220 = isnan(_3217) ? _3219 : (isnan(_3219) ? _3217 : min(_3219, _3217));
        float _3224 = (_3220 * _2447) + _2436;
        float _3225 = (_3220 * _2450) + _2440;
        float _3226 = (_3220 * _2453) + _2444;
        float _3227 = _3220 * 9.9999997473787516355514526367188e-05;
        float _3228 = (-1.0) - _3227;
        float _3230 = _3227 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_3226 > _3230) || ((_3226 < _3228) || ((_3225 > _3230) || ((_3225 < _3228) || ((_3224 < _3228) || (_3224 > _3230))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3226, cbModelParam._m0[17u].z, fma(_3225, cbModelParam._m0[17u].y, _3224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3226, cbModelParam._m0[18u].z, fma(_3225, cbModelParam._m0[18u].y, _3224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3226, cbModelParam._m0[19u].z, fma(_3225, cbModelParam._m0[19u].y, _3224 * cbModelParam._m0[19u].x))), _2383);
            frontier_phi_27_52_ladder = _3348.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3348.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3348.x * cbModelParam._m0[1u].z;
        }
        _2472 = frontier_phi_27_52_ladder_2;
        _2474 = frontier_phi_27_52_ladder_1;
        _2476 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1449, _1450, _1451), _2383);
        _2472 = _2456.x * cbModelParam._m0[1u].z;
        _2474 = _2456.y * cbModelParam._m0[1u].z;
        _2476 = _2456.z * cbModelParam._m0[1u].z;
    }
    float _2489 = (((_1476 * _1426) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2472 - _2374)) + _2374);
    float _2491 = (((_1476 * _1428) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2474 - _2376)) + _2376);
    float _2493 = (((_1476 * _1429) + _1477) * _1441) * ((cbModelParam._m0[1u].w * (_2476 - _2378)) + _2378);
    float _2496 = fma(_2493, cbSceneParam._m0[89u].z, fma(_2491, cbSceneParam._m0[89u].y, _2489 * cbSceneParam._m0[89u].x));
    float _2499 = fma(_2493, cbSceneParam._m0[90u].z, fma(_2491, cbSceneParam._m0[90u].y, _2489 * cbSceneParam._m0[90u].x));
    float _2502 = fma(_2493, cbSceneParam._m0[91u].z, fma(_2491, cbSceneParam._m0[91u].y, _2489 * cbSceneParam._m0[91u].x));
    float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2548 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2549 = _2536 / _2548;
    float _2550 = _2540 / _2548;
    float _2551 = _2544 / _2548;
    float _2698;
    float _2699;
    float _2700;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2578 = ((uint(_2551 > cbSceneParam._m0[59u].y) + uint(_2551 > cbSceneParam._m0[59u].x)) + uint(_2551 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2579 = _2578 + 43u;
        uint _2587 = _2578 + 44u;
        uint _2595 = _2578 + 45u;
        uint _2603 = _2578 + 46u;
        float _2614 = fma(_2548, cbSceneParam._m0[_2579].w, fma(_2544, cbSceneParam._m0[_2579].z, fma(_2540, cbSceneParam._m0[_2579].y, _2536 * cbSceneParam._m0[_2579].x)));
        float _2618 = fma(_2548, cbSceneParam._m0[_2587].w, fma(_2544, cbSceneParam._m0[_2587].z, fma(_2540, cbSceneParam._m0[_2587].y, _2536 * cbSceneParam._m0[_2587].x)));
        float _2626 = fma(_2548, cbSceneParam._m0[_2603].w, fma(_2544, cbSceneParam._m0[_2603].z, fma(_2540, cbSceneParam._m0[_2603].y, _2536 * cbSceneParam._m0[_2603].x)));
        float _2631 = cbSceneParam._m0[33u].z * _2626;
        float _2633 = cbSceneParam._m0[33u].w * _2626;
        float _2636 = fma(_2548, cbSceneParam._m0[_2595].w, fma(_2544, cbSceneParam._m0[_2595].z, fma(_2540, cbSceneParam._m0[_2595].y, _2536 * cbSceneParam._m0[_2595].x))) / _2626;
        float _2684 = (cbSceneParam._m0[33u].x - sqrt(((_2550 * _2550) + (_2549 * _2549)) + (_2551 * _2551))) * cbSceneParam._m0[33u].y;
        float _5239 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2691 = (isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2631 + _2614) / _2626, (_2633 + _2618) / _2626), _2636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2633 + _2614) / _2626, (_2618 - _2631) / _2626), _2636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2614 - _2631) / _2626, (_2618 - _2633) / _2626), _2636), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2614 - _2633) / _2626, (_2631 + _2618) / _2626), _2636), 0.0)).x), vec4(0.25)));
        _2698 = 1.0 - (_2691 * cbSceneParam._m0[34u].x);
        _2699 = 1.0 - (_2691 * cbSceneParam._m0[34u].y);
        _2700 = 1.0 - (_2691 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2698 = 1.0;
        _2699 = 1.0;
        _2700 = 1.0;
    }
    float _2764;
    float _2766;
    float _2768;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2752 = fma(_2548, cbSceneParam._m0[63u].w, fma(_2544, cbSceneParam._m0[63u].z, fma(_2540, cbSceneParam._m0[63u].y, _2536 * cbSceneParam._m0[63u].x)));
        float _2753 = fma(_2548, cbSceneParam._m0[60u].w, fma(_2544, cbSceneParam._m0[60u].z, fma(_2540, cbSceneParam._m0[60u].y, _2536 * cbSceneParam._m0[60u].x))) / _2752;
        float _2754 = fma(_2548, cbSceneParam._m0[61u].w, fma(_2544, cbSceneParam._m0[61u].z, fma(_2540, cbSceneParam._m0[61u].y, _2536 * cbSceneParam._m0[61u].x))) / _2752;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2753 >= cbSceneParam._m0[64u].x) && (_2754 >= cbSceneParam._m0[64u].y)) && (_2753 <= cbSceneParam._m0[64u].z)) && (_2754 <= cbSceneParam._m0[64u].w))
        {
            float _2892 = fma(_2548, cbSceneParam._m0[62u].w, fma(_2544, cbSceneParam._m0[62u].z, fma(_2540, cbSceneParam._m0[62u].y, _2536 * cbSceneParam._m0[62u].x))) / _2752;
            float _2896 = isnan(cbSceneParam._m0[41u].w) ? _2892 : (isnan(_2892) ? cbSceneParam._m0[41u].w : max(_2892, cbSceneParam._m0[41u].w));
            float _2939 = (cbSceneParam._m0[33u].x - sqrt(((_2550 * _2550) + (_2549 * _2549)) + (_2551 * _2551))) * cbSceneParam._m0[33u].y;
            float _5255 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
            float _2946 = (isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2753, cbSceneParam._m0[33u].w + _2754), _2896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2753, _2754 - cbSceneParam._m0[33u].z), _2896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2753 - cbSceneParam._m0[33u].z, _2754 - cbSceneParam._m0[33u].w), _2896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2753 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2754), _2896), 0.0)).x), vec4(0.25)));
            float _2950 = 1.0 - (_2946 * cbSceneParam._m0[34u].x);
            float _2951 = 1.0 - (_2946 * cbSceneParam._m0[34u].y);
            float _2952 = 1.0 - (_2946 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2951) ? _2699 : (isnan(_2699) ? _2951 : min(_2699, _2951));
            frontier_phi_39_38_ladder_1 = isnan(_2950) ? _2698 : (isnan(_2698) ? _2950 : min(_2698, _2950));
            frontier_phi_39_38_ladder_2 = isnan(_2952) ? _2700 : (isnan(_2700) ? _2952 : min(_2700, _2952));
        }
        else
        {
            frontier_phi_39_38_ladder = _2699;
            frontier_phi_39_38_ladder_1 = _2698;
            frontier_phi_39_38_ladder_2 = _2700;
        }
        _2764 = frontier_phi_39_38_ladder_1;
        _2766 = frontier_phi_39_38_ladder;
        _2768 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2764 = _2698;
        _2766 = _2699;
        _2768 = _2700;
    }
    uvec4 _2773 = floatBitsToUint(cbInstanceData._m0[_1401 + 5u]);
    uint _2775 = _2773.x * 14u;
    uint _2776 = _2775 + 13u;
    float _2783 = _1441 + (-1.0);
    float _2788 = (cbLight._m0[_2776].x * _2783) + 1.0;
    float _2789 = (cbLight._m0[_2776].y * _2783) + 1.0;
    float _2790 = (cbLight._m0[_2776].z * _2783) + 1.0;
    float _2791 = (cbLight._m0[_2776].w * _2783) + 1.0;
    uint _2792 = _2775 + 5u;
    float _2798 = isnan(1.0) ? _2789 : (isnan(_2789) ? 1.0 : min(_2789, 1.0));
    uint _2802 = _2775 + 4u;
    float _2811 = isnan(1.0) ? _2788 : (isnan(_2788) ? 1.0 : min(_2788, 1.0));
    uint _2815 = _2775 | 1u;
    float _2826 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_1262, _1263, _1264));
    float _2829 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_1262, _1263, _1264));
    float _5291 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _5302 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2834 = (isnan(1.0) ? _5291 : (isnan(_5291) ? 1.0 : min(_5291, 1.0))) * 0.3183098733425140380859375;
    float _2836 = (isnan(1.0) ? _5302 : (isnan(_5302) ? 1.0 : min(_5302, 1.0))) * 0.3183098733425140380859375;
    float _2843 = ((cbLight._m0[_2792].x * _2798) * _2836) + (((cbLight._m0[_2802].x * _2764) * _2811) * _2834);
    float _2844 = ((_2798 * cbLight._m0[_2792].y) * _2836) + (((cbLight._m0[_2802].y * _2766) * _2811) * _2834);
    float _2845 = ((_2798 * cbLight._m0[_2792].z) * _2836) + (((cbLight._m0[_2802].z * _2768) * _2811) * _2834);
    uvec4 _2849 = floatBitsToUint(cbLight._m0[_2775 + 12u]);
    bool _2851 = _2849.x == 0u;
    float _2953;
    float _2955;
    float _2957;
    if (_2851)
    {
        _2953 = _2843;
        _2955 = _2844;
        _2957 = _2845;
    }
    else
    {
        uint _2961 = _2775 + 6u;
        float _2977 = (dot(vec3(cbLight._m0[_2775 + 2u].xyz), vec3(_1262, _1263, _1264)) * 0.5) + 0.5;
        float _2978 = _2977 * _2977;
        float _5313 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2979 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
        float _2980 = isnan(1.0) ? _2790 : (isnan(_2790) ? 1.0 : min(_2790, 1.0));
        _2953 = (((cbLight._m0[_2961].x * 0.3183098733425140380859375) * _2979) * _2980) + _2843;
        _2955 = (((cbLight._m0[_2961].y * 0.3183098733425140380859375) * _2979) * _2980) + _2844;
        _2957 = (((cbLight._m0[_2961].z * 0.3183098733425140380859375) * _2979) * _2980) + _2845;
    }
    bool _2960 = _2849.y == 0u;
    float _3015;
    float _3017;
    float _3019;
    if (_2960)
    {
        _3015 = _2953;
        _3017 = _2955;
        _3019 = _2957;
    }
    else
    {
        uint _3188 = _2775 + 7u;
        float _3204 = (dot(vec3(cbLight._m0[_2775 + 3u].xyz), vec3(_1262, _1263, _1264)) * 0.5) + 0.5;
        float _3205 = _3204 * _3204;
        float _5329 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
        float _3206 = isnan(1.0) ? _5329 : (isnan(_5329) ? 1.0 : min(_5329, 1.0));
        float _3207 = isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0));
        _3015 = (((cbLight._m0[_3188].x * 0.3183098733425140380859375) * _3206) * _3207) + _2953;
        _3017 = (((cbLight._m0[_3188].y * 0.3183098733425140380859375) * _3206) * _3207) + _2955;
        _3019 = (((cbLight._m0[_3188].z * 0.3183098733425140380859375) * _3206) * _3207) + _2957;
    }
    uint _3022 = _2775 + 8u;
    float _3035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _1266) * 0.949999988079071044921875);
    float _3036 = _3035 * _3035;
    float _3037 = cbLight._m0[_2775].x + _1343;
    float _3038 = cbLight._m0[_2775].y + _1344;
    float _3039 = cbLight._m0[_2775].z + _1345;
    float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
    float _3044 = _3043 * _3037;
    float _3045 = _3043 * _3038;
    float _3046 = _3043 * _3039;
    float _3047 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_2775].xyz));
    float _5345 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
    float _3050 = isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0));
    float _5356 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _3051 = isnan(1.0) ? _5356 : (isnan(_5356) ? 1.0 : min(_5356, 1.0));
    float _3052 = dot(vec3(_1262, _1263, _1264), vec3(_3044, _3045, _3046));
    float _5367 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
    float _3055 = isnan(1.0) ? _5367 : (isnan(_5367) ? 1.0 : min(_5367, 1.0));
    float _3056 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_3044, _3045, _3046));
    float _5378 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
    float _3060 = _3036 * _3036;
    float _3064 = ((_3055 * _3055) * (_3060 + (-1.0))) + 1.0;
    float _3072 = exp2(log2(1.0 - (isnan(1.0) ? _5378 : (isnan(_5378) ? 1.0 : min(_5378, 1.0)))) * 5.0);
    float _3073 = 0.959999978542327880859375 - _1423;
    float _3075 = 0.959999978542327880859375 - _1424;
    float _3076 = 0.959999978542327880859375 - _1425;
    float _3083 = 1.0 - _3036;
    float _3094 = (0.5 / (((_3051 * ((_3050 * _3083) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3083) + _3036) * _3050))) * _3050;
    float _5389 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
    float _3096 = (isnan(1.0) ? _5389 : (isnan(_5389) ? 1.0 : min(_5389, 1.0))) * (_3060 / ((_3064 * _3064) * 3.141590118408203125));
    uint _3110 = _2775 + 9u;
    float _3121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _1266) * 0.949999988079071044921875);
    float _3122 = _3121 * _3121;
    float _3123 = cbLight._m0[_2815].x + _1343;
    float _3124 = cbLight._m0[_2815].y + _1344;
    float _3125 = cbLight._m0[_2815].z + _1345;
    float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
    float _3130 = _3129 * _3123;
    float _3131 = _3129 * _3124;
    float _3132 = _3129 * _3125;
    float _3133 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_2815].xyz));
    float _5400 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
    float _3136 = isnan(1.0) ? _5400 : (isnan(_5400) ? 1.0 : min(_5400, 1.0));
    float _3137 = dot(vec3(_1262, _1263, _1264), vec3(_3130, _3131, _3132));
    float _5411 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
    float _3140 = isnan(1.0) ? _5411 : (isnan(_5411) ? 1.0 : min(_5411, 1.0));
    float _3141 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_3130, _3131, _3132));
    float _5422 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
    float _3145 = _3122 * _3122;
    float _3149 = ((_3140 * _3140) * (_3145 + (-1.0))) + 1.0;
    float _3156 = exp2(log2(1.0 - (isnan(1.0) ? _5422 : (isnan(_5422) ? 1.0 : min(_5422, 1.0)))) * 5.0);
    float _3163 = 1.0 - _3122;
    float _3173 = (0.5 / (((_3051 * ((_3136 * _3163) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3163) + _3122) * _3136))) * _3136;
    float _5433 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
    float _3175 = (isnan(1.0) ? _5433 : (isnan(_5433) ? 1.0 : min(_5433, 1.0))) * (_3145 / ((_3149 * _3149) * 3.141590118408203125));
    float _3185 = (((((_3156 * _3073) + _1426) * cbLight._m0[_3110].x) * _3175) * _2798) + ((((cbLight._m0[_3022].x * _2764) * ((_3072 * _3073) + _1426)) * _3096) * _2811);
    float _3186 = (((((_3156 * _3075) + _1428) * cbLight._m0[_3110].y) * _3175) * _2798) + ((((cbLight._m0[_3022].y * _2766) * ((_3072 * _3075) + _1428)) * _3096) * _2811);
    float _3187 = (((((_3156 * _3076) + _1429) * cbLight._m0[_3110].z) * _3175) * _2798) + ((((cbLight._m0[_3022].z * _2768) * ((_3072 * _3076) + _1429)) * _3096) * _2811);
    float _3243;
    float _3245;
    float _3247;
    if (_2851)
    {
        _3243 = _3185;
        _3245 = _3186;
        _3247 = _3187;
    }
    else
    {
        uint _3249 = _2775 + 2u;
        uint _3253 = _2775 + 10u;
        float _3267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3249].w)) * _1266) * 0.949999988079071044921875);
        float _3268 = _3267 * _3267;
        float _3269 = cbLight._m0[_3249].x + _1343;
        float _3270 = cbLight._m0[_3249].y + _1344;
        float _3271 = cbLight._m0[_3249].z + _1345;
        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
        float _3276 = _3275 * _3269;
        float _3277 = _3275 * _3270;
        float _3278 = _3275 * _3271;
        float _3279 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_3249].xyz));
        float _5444 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
        float _3282 = isnan(1.0) ? _5444 : (isnan(_5444) ? 1.0 : min(_5444, 1.0));
        float _3283 = dot(vec3(_1262, _1263, _1264), vec3(_3276, _3277, _3278));
        float _5455 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
        float _3286 = isnan(1.0) ? _5455 : (isnan(_5455) ? 1.0 : min(_5455, 1.0));
        float _3287 = dot(vec3(cbLight._m0[_3249].xyz), vec3(_3276, _3277, _3278));
        float _5466 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
        float _3291 = _3268 * _3268;
        float _3295 = ((_3286 * _3286) * (_3291 + (-1.0))) + 1.0;
        float _3302 = exp2(log2(1.0 - (isnan(1.0) ? _5466 : (isnan(_5466) ? 1.0 : min(_5466, 1.0)))) * 5.0);
        float _3309 = 1.0 - _3268;
        float _3319 = (0.5 / (((_3051 * ((_3282 * _3309) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3309) + _3268) * _3282))) * _3282;
        float _5477 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
        float _3321 = (isnan(1.0) ? _5477 : (isnan(_5477) ? 1.0 : min(_5477, 1.0))) * (_3291 / ((_3295 * _3295) * 3.141590118408203125));
        float _3322 = isnan(1.0) ? _2790 : (isnan(_2790) ? 1.0 : min(_2790, 1.0));
        _3243 = (((((_3302 * _3073) + _1426) * cbLight._m0[_3253].x) * _3321) * _3322) + _3185;
        _3245 = (((((_3302 * _3075) + _1428) * cbLight._m0[_3253].y) * _3321) * _3322) + _3186;
        _3247 = (((((_3302 * _3076) + _1429) * cbLight._m0[_3253].z) * _3321) * _3322) + _3187;
    }
    float _3353;
    float _3355;
    float _3357;
    if (_2960)
    {
        _3353 = _3243;
        _3355 = _3245;
        _3357 = _3247;
    }
    else
    {
        uint _3364 = _2775 + 3u;
        uint _3368 = _2775 + 11u;
        float _3382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3364].w)) * _1266) * 0.949999988079071044921875);
        float _3383 = _3382 * _3382;
        float _3384 = cbLight._m0[_3364].x + _1343;
        float _3385 = cbLight._m0[_3364].y + _1344;
        float _3386 = cbLight._m0[_3364].z + _1345;
        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
        float _3391 = _3390 * _3384;
        float _3392 = _3390 * _3385;
        float _3393 = _3390 * _3386;
        float _3394 = dot(vec3(_1262, _1263, _1264), vec3(cbLight._m0[_3364].xyz));
        float _5493 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
        float _3397 = isnan(1.0) ? _5493 : (isnan(_5493) ? 1.0 : min(_5493, 1.0));
        float _3398 = dot(vec3(_1262, _1263, _1264), vec3(_3391, _3392, _3393));
        float _5504 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
        float _3401 = isnan(1.0) ? _5504 : (isnan(_5504) ? 1.0 : min(_5504, 1.0));
        float _3402 = dot(vec3(cbLight._m0[_3364].xyz), vec3(_3391, _3392, _3393));
        float _5515 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
        float _3406 = _3383 * _3383;
        float _3410 = ((_3401 * _3401) * (_3406 + (-1.0))) + 1.0;
        float _3417 = exp2(log2(1.0 - (isnan(1.0) ? _5515 : (isnan(_5515) ? 1.0 : min(_5515, 1.0)))) * 5.0);
        float _3424 = 1.0 - _3383;
        float _3434 = (0.5 / (((_3051 * ((_3397 * _3424) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3424) + _3383) * _3397))) * _3397;
        float _5526 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
        float _3436 = (isnan(1.0) ? _5526 : (isnan(_5526) ? 1.0 : min(_5526, 1.0))) * (_3406 / ((_3410 * _3410) * 3.141590118408203125));
        float _3437 = isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0));
        _3353 = (((((_3417 * _3073) + _1426) * cbLight._m0[_3368].x) * _3436) * _3437) + _3243;
        _3355 = (((((_3417 * _3075) + _1428) * cbLight._m0[_3368].y) * _3436) * _3437) + _3245;
        _3357 = (((((_3417 * _3076) + _1429) * cbLight._m0[_3368].z) * _3436) * _3437) + _3247;
    }
    float _3502;
    float _3504;
    float _3506;
    float _3508;
    float _3510;
    float _3512;
    if (_2773.y == 0u)
    {
        uvec4 _3458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3459 = _3458.x;
        uint _3470 = uint((float(_3458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1364) / _3459))) + floor(float(uint(cbSceneParam._m0[85u].x * _1363) / _3459)));
        float _3480 = (log2(_2551 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3481 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
        uint _3484 = uint(isnan(14.0) ? _3481 : (isnan(_3481) ? 14.0 : min(_3481, 14.0)));
        uvec4 _3489 = texelFetch(g_lightClusterGridBuffer, int(((_3484 << 2u) + (_3470 << 6u)) >> 2u));
        uint _3490 = _3489.x;
        uint _3491 = _3458.z;
        float _3571;
        float _3573;
        float _3575;
        float _3577;
        float _3579;
        float _3581;
        if (((((1u << ((_3491 >> 4u) & 15u)) + 4294967295u) & _3490) == 0u) || ((_3491 & 240u) == 0u))
        {
            _3571 = 0.0;
            _3573 = 0.0;
            _3575 = 0.0;
            _3577 = 0.0;
            _3579 = 0.0;
            _3581 = 0.0;
        }
        else
        {
            float _3572;
            float _3574;
            float _3576;
            float _3578;
            float _3580;
            float _3582;
            float _3723 = 0.0;
            float _3724 = 0.0;
            float _3725 = 0.0;
            float _3726 = 0.0;
            float _3727 = 0.0;
            float _3728 = 0.0;
            uint _3729 = 0u;
            uint _3738;
            bool _3739;
            for (;;)
            {
                _3738 = texelFetch(g_lightClassification, int((((_3484 << 5u) + (_3470 << 9u)) + (_3729 << 2u)) >> 2u)).x;
                _3739 = _3738 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3739)
                {
                    frontier_phi_73_pred = _3728;
                    frontier_phi_73_pred_1 = _3727;
                    frontier_phi_73_pred_2 = _3726;
                    frontier_phi_73_pred_3 = _3725;
                    frontier_phi_73_pred_4 = _3724;
                    frontier_phi_73_pred_5 = _3723;
                }
                else
                {
                    float _3868;
                    float _3869;
                    float _3870;
                    float _3871;
                    float _3872;
                    float _3873;
                    uint _3874;
                    _3868 = _3723;
                    _3869 = _3724;
                    _3870 = _3725;
                    _3871 = _3726;
                    _3872 = _3727;
                    _3873 = _3728;
                    _3874 = _3738;
                    float _3795;
                    float _3796;
                    float _3797;
                    float _3798;
                    float _3799;
                    float _3800;
                    for (;;)
                    {
                        uint _3878 = uint(findLSB(_3874)) + (_3729 << 5u);
                        uint _3875 = (_3874 + 4294967295u) & _3874;
                        uint _3880 = _3878 * 48u;
                        vec4 _3894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3880)).x, texelFetch(g_PointLightRenderingBuffer, int(_3880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3880 + 3u)).x));
                        uint _3900 = (_3878 * 48u) + 4u;
                        vec4 _3913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3900)).x, texelFetch(g_PointLightRenderingBuffer, int(_3900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3900 + 3u)).x));
                        uint _3919 = (_3878 * 48u) + 8u;
                        vec3 _3930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3919)).x, texelFetch(g_PointLightRenderingBuffer, int(_3919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3919 + 2u)).x));
                        float _3934 = _3894.x - _2549;
                        float _3935 = _3894.y - _2550;
                        float _3936 = _3894.z - _2551;
                        float _3937 = dot(vec3(_3934, _3935, _3936), vec3(_3934, _3935, _3936));
                        float _3940 = inversesqrt(_3937);
                        float _3941 = _3940 * _3934;
                        float _3942 = _3940 * _3935;
                        float _3943 = _3940 * _3936;
                        float _3944 = dot(vec3(_1382, _1385, _1388), vec3(_3941, _3942, _3943));
                        float _3949 = 1.0 - (_3937 * _3894.w);
                        float _5552 = isnan(0.0) ? _3949 : (isnan(_3949) ? 0.0 : max(_3949, 0.0));
                        float _3950 = isnan(1.0) ? _5552 : (isnan(_5552) ? 1.0 : min(_5552, 1.0));
                        float _3951 = sqrt(_3937) * _3913.w;
                        float _3953 = 1.39999997615814208984375 / (_3951 + 1.39999997615814208984375);
                        float _3954 = _3953 * _3953;
                        float _3957 = ((1.0 - _3954) * _3944) + _3954;
                        float _3960 = _3951 * _3951;
                        float _3964 = ((isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0))) * _3950) / ((_3960 * 0.699999988079071044921875) + 1.0);
                        float _3968 = (-0.0) - _2549;
                        float _3969 = (-0.0) - _2550;
                        float _3970 = (-0.0) - _2551;
                        float _3974 = inversesqrt(dot(vec3(_3968, _3969, _3970), vec3(_3968, _3969, _3970)));
                        float _3975 = _3974 * _3968;
                        float _3976 = _3974 * _3969;
                        float _3977 = _3974 * _3970;
                        float _3984 = exp2(log2(1.0 / ((_3960 * 3.5) + 5.0)) * 0.25);
                        float _3985 = 1.0 - _1457;
                        float _3992 = sqrt(1.0 - ((1.0 - (_3985 * _3985)) * (1.0 - (_3984 * _3984))));
                        float _3993 = _3992 * _3992;
                        float _3994 = _3993 * _3993;
                        float _3995 = _3975 + _3941;
                        float _3996 = _3976 + _3942;
                        float _3997 = _3977 + _3943;
                        float _4001 = inversesqrt(dot(vec3(_3995, _3996, _3997), vec3(_3995, _3996, _3997)));
                        float _4005 = dot(vec3(_1382, _1385, _1388), vec3(_3975, _3976, _3977));
                        float _5568 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                        float _4008 = isnan(1.0) ? _5568 : (isnan(_5568) ? 1.0 : min(_5568, 1.0));
                        float _4009 = dot(vec3(_1382, _1385, _1388), vec3(_4001 * _3995, _4001 * _3996, _4001 * _3997));
                        float _5579 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                        float _4012 = isnan(1.0) ? _5579 : (isnan(_5579) ? 1.0 : min(_5579, 1.0));
                        float _4016 = ((_4012 * _4012) * (_3994 + (-1.0))) + 1.0;
                        float _4017 = _3953 * _3993;
                        float _4018 = _4017 * _4017;
                        float _4021 = ((1.0 - _4018) * _3944) + _4018;
                        float _5590 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                        float _4022 = isnan(1.0) ? _5590 : (isnan(_5590) ? 1.0 : min(_5590, 1.0));
                        float _4023 = 1.0 - _3993;
                        float _4033 = (0.5 / (((_4022 * ((_4008 * _4023) + _3993)) + 9.9999999392252902907785028219223e-09) + (((_4022 * _4023) + _3993) * _4008))) * _4022;
                        float _5601 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                        float _4044 = (((_3994 * 3.1415927410125732421875) * (isnan(1.0) ? _5601 : (isnan(_5601) ? 1.0 : min(_5601, 1.0)))) / ((_4016 * _4016) * ((_3960 * 2.1991131305694580078125) + 3.141590118408203125))) * _3950;
                        _3798 = (_3964 * _3913.x) + _3871;
                        _3799 = (_3964 * _3913.y) + _3872;
                        _3800 = (_3964 * _3913.z) + _3873;
                        _3795 = (_4044 * _3930.x) + _3868;
                        _3796 = (_4044 * _3930.y) + _3869;
                        _3797 = (_4044 * _3930.z) + _3870;
                        if (_3875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3868 = _3795;
                            _3869 = _3796;
                            _3870 = _3797;
                            _3871 = _3798;
                            _3872 = _3799;
                            _3873 = _3800;
                            _3874 = _3875;
                        }
                    }
                    frontier_phi_73_pred = _3800;
                    frontier_phi_73_pred_1 = _3799;
                    frontier_phi_73_pred_2 = _3798;
                    frontier_phi_73_pred_3 = _3797;
                    frontier_phi_73_pred_4 = _3796;
                    frontier_phi_73_pred_5 = _3795;
                }
                _3582 = frontier_phi_73_pred;
                _3580 = frontier_phi_73_pred_1;
                _3578 = frontier_phi_73_pred_2;
                _3576 = frontier_phi_73_pred_3;
                _3574 = frontier_phi_73_pred_4;
                _3572 = frontier_phi_73_pred_5;
                uint _3730 = _3729 + 1u;
                if (_3730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3723 = _3572;
                    _3724 = _3574;
                    _3725 = _3576;
                    _3726 = _3578;
                    _3727 = _3580;
                    _3728 = _3582;
                    _3729 = _3730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3571 = _3572;
            _3573 = _3574;
            _3575 = _3576;
            _3577 = _3578;
            _3579 = _3580;
            _3581 = _3582;
        }
        uvec4 _3585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3586 = _3585.z;
        uint _3588 = (_3586 >> 8u) & 15u;
        float _3691;
        float _3693;
        float _3695;
        float _3697;
        float _3699;
        float _3701;
        if (((4294967295u << _3588) & _3490) == 0u)
        {
            _3691 = _3571;
            _3693 = _3573;
            _3695 = _3575;
            _3697 = _3577;
            _3699 = _3579;
            _3701 = _3581;
        }
        else
        {
            float _3716 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
            float _3717 = _3716 * _2549;
            float _3718 = _3716 * _2550;
            float _3719 = _3716 * _2551;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3588 < ((_3586 >> 12u) & 15u))
            {
                float _3692;
                float _3694;
                float _3696;
                float _3698;
                float _3700;
                float _3702;
                float _3851 = _3571;
                float _3852 = _3573;
                float _3853 = _3575;
                float _3854 = _3577;
                float _3855 = _3579;
                float _3856 = _3581;
                uint _3857 = _3588;
                uint _3866;
                bool _3867;
                for (;;)
                {
                    _3866 = texelFetch(g_lightClassification, int((((_3484 << 5u) + (_3470 << 9u)) + (_3857 << 2u)) >> 2u)).x;
                    _3867 = _3866 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3867)
                    {
                        frontier_phi_84_pred = _3855;
                        frontier_phi_84_pred_1 = _3854;
                        frontier_phi_84_pred_2 = _3853;
                        frontier_phi_84_pred_3 = _3852;
                        frontier_phi_84_pred_4 = _3851;
                        frontier_phi_84_pred_5 = _3856;
                    }
                    else
                    {
                        float _4058;
                        float _4059;
                        float _4060;
                        float _4061;
                        float _4062;
                        float _4063;
                        float _4351;
                        float _4352;
                        float _4353;
                        float _4354;
                        float _4355;
                        float _4356;
                        float _4071 = _3851;
                        float _4072 = _3852;
                        float _4073 = _3853;
                        float _4074 = _3854;
                        float _4075 = _3855;
                        float _4076 = _3856;
                        uint _4077 = _3866;
                        uint _4078;
                        vec4 _4103;
                        float _4104;
                        vec4 _4119;
                        vec3 _4131;
                        vec4 _4146;
                        vec4 _4161;
                        float _4207;
                        bool _4208;
                        for (;;)
                        {
                            uint _4088 = ((_3857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4077));
                            _4078 = (_4077 + 4294967295u) & _4077;
                            uint _4090 = _4088 * 40u;
                            _4103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4090 + 3u)).x));
                            _4104 = _4103.w;
                            uint _4106 = (_4088 * 40u) + 4u;
                            _4119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4106 + 3u)).x));
                            uint _4121 = (_4088 * 40u) + 8u;
                            _4131 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4121 + 2u)).x));
                            uint _4133 = (_4088 * 40u) + 16u;
                            _4146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4133 + 3u)).x));
                            uint _4148 = (_4088 * 40u) + 20u;
                            _4161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4148 + 3u)).x));
                            uint _4163 = (_4088 * 40u) + 24u;
                            vec4 _4176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 3u)).x));
                            uint _4182 = (_4088 * 40u) + 28u;
                            vec4 _4195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4182 + 3u)).x));
                            _4207 = fma(_2551, _4195.z, fma(_2550, _4195.y, _4195.x * _2549)) + _4195.w;
                            _4208 = !((fma(_2551, _4176.z, fma(_2550, _4176.y, _4176.x * _2549)) + _4176.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_4208)
                            {
                                float _4235 = _4103.x - _2549;
                                float _4236 = _4103.y - _2550;
                                float _4237 = _4103.z - _2551;
                                float _4238 = dot(vec3(_4235, _4236, _4237), vec3(_4235, _4236, _4237));
                                float _4241 = inversesqrt(_4238);
                                float _4242 = _4241 * _4235;
                                float _4243 = _4241 * _4236;
                                float _4244 = _4241 * _4237;
                                float _4248 = 1.0 - (_4238 / (_4104 * _4104));
                                float _5612 = isnan(0.0) ? _4248 : (isnan(_4248) ? 0.0 : max(_4248, 0.0));
                                float _4249 = isnan(1.0) ? _5612 : (isnan(_5612) ? 1.0 : min(_5612, 1.0));
                                float _4253 = sqrt(_4238) * _4119.w;
                                float _4255 = 1.39999997615814208984375 / (_4253 + 1.39999997615814208984375);
                                float _4256 = _4255 * _4255;
                                float _4259 = ((1.0 - _4256) * dot(vec3(_4242, _4243, _4244), vec3(_1382, _1385, _1388))) + _4256;
                                float _4262 = _4253 * _4253;
                                float _4266 = (fma(_2551, _4146.z, fma(_2550, _4146.y, _4146.x * _2549)) + _4146.w) / _4207;
                                float _4267 = (fma(_2551, _4161.z, fma(_2550, _4161.y, _4161.x * _2549)) + _4161.w) / _4207;
                                float _4271 = 1.0 - dot(vec2(_4266, _4267), vec2(_4266, _4267));
                                float _5628 = isnan(0.0) ? _4271 : (isnan(_4271) ? 0.0 : max(_4271, 0.0));
                                float _4272 = isnan(1.0) ? _5628 : (isnan(_5628) ? 1.0 : min(_5628, 1.0));
                                float _4273 = _4272 * (((isnan(0.0) ? _4259 : (isnan(_4259) ? 0.0 : max(_4259, 0.0))) * _4249) / ((_4262 * 0.699999988079071044921875) + 1.0));
                                float _4285 = exp2(log2(1.0 / ((_4262 * 3.5) + 5.0)) * 0.25);
                                float _4286 = 1.0 - _1457;
                                float _4293 = sqrt(1.0 - ((1.0 - (_4286 * _4286)) * (1.0 - (_4285 * _4285))));
                                float _4294 = _4293 * _4293;
                                float _4295 = _4294 * _4294;
                                float _4296 = _4242 - _3717;
                                float _4297 = _4243 - _3718;
                                float _4298 = _4244 - _3719;
                                float _4302 = inversesqrt(dot(vec3(_4296, _4297, _4298), vec3(_4296, _4297, _4298)));
                                float _4306 = dot(vec3(_1382, _1385, _1388), vec3((-0.0) - _3717, (-0.0) - _3718, (-0.0) - _3719));
                                float _5639 = isnan(0.0) ? _4306 : (isnan(_4306) ? 0.0 : max(_4306, 0.0));
                                float _4309 = isnan(1.0) ? _5639 : (isnan(_5639) ? 1.0 : min(_5639, 1.0));
                                float _4310 = dot(vec3(_1382, _1385, _1388), vec3(_4302 * _4296, _4302 * _4297, _4302 * _4298));
                                float _5650 = isnan(0.0) ? _4310 : (isnan(_4310) ? 0.0 : max(_4310, 0.0));
                                float _4313 = isnan(1.0) ? _5650 : (isnan(_5650) ? 1.0 : min(_5650, 1.0));
                                float _4317 = ((_4313 * _4313) * (_4295 + (-1.0))) + 1.0;
                                float _4318 = _4255 * _4294;
                                float _4319 = _4318 * _4318;
                                float _4325 = ((1.0 - _4319) * dot(vec3(_1382, _1385, _1388), vec3(_4242, _4243, _4244))) + _4319;
                                float _5661 = isnan(0.0) ? _4325 : (isnan(_4325) ? 0.0 : max(_4325, 0.0));
                                float _4326 = isnan(1.0) ? _5661 : (isnan(_5661) ? 1.0 : min(_5661, 1.0));
                                float _4327 = 1.0 - _4294;
                                float _4337 = (0.5 / (((_4326 * ((_4309 * _4327) + _4294)) + 9.9999999392252902907785028219223e-09) + (((_4326 * _4327) + _4294) * _4309))) * _4326;
                                float _5672 = isnan(0.0) ? _4337 : (isnan(_4337) ? 0.0 : max(_4337, 0.0));
                                float _4347 = (_4272 * _4249) * (((_4295 * 3.1415927410125732421875) * (isnan(1.0) ? _5672 : (isnan(_5672) ? 1.0 : min(_5672, 1.0)))) / ((_4317 * _4317) * ((_4262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4273 * _4119.y;
                                frontier_phi_90_pred_1 = _4273 * _4119.x;
                                frontier_phi_90_pred_2 = _4347 * _4131.z;
                                frontier_phi_90_pred_3 = _4347 * _4131.y;
                                frontier_phi_90_pred_4 = _4347 * _4131.x;
                                frontier_phi_90_pred_5 = _4273 * _4119.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4355 = frontier_phi_90_pred;
                            _4354 = frontier_phi_90_pred_1;
                            _4353 = frontier_phi_90_pred_2;
                            _4352 = frontier_phi_90_pred_3;
                            _4351 = frontier_phi_90_pred_4;
                            _4356 = frontier_phi_90_pred_5;
                            _4061 = _4354 + _4074;
                            _4062 = _4355 + _4075;
                            _4063 = _4356 + _4076;
                            _4058 = _4351 + _4071;
                            _4059 = _4352 + _4072;
                            _4060 = _4353 + _4073;
                            if (_4078 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4071 = _4058;
                                _4072 = _4059;
                                _4073 = _4060;
                                _4074 = _4061;
                                _4075 = _4062;
                                _4076 = _4063;
                                _4077 = _4078;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _4062;
                        frontier_phi_84_pred_1 = _4061;
                        frontier_phi_84_pred_2 = _4060;
                        frontier_phi_84_pred_3 = _4059;
                        frontier_phi_84_pred_4 = _4058;
                        frontier_phi_84_pred_5 = _4063;
                    }
                    _3700 = frontier_phi_84_pred;
                    _3698 = frontier_phi_84_pred_1;
                    _3696 = frontier_phi_84_pred_2;
                    _3694 = frontier_phi_84_pred_3;
                    _3692 = frontier_phi_84_pred_4;
                    _3702 = frontier_phi_84_pred_5;
                    uint _3858 = _3857 + 1u;
                    if (_3858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3851 = _3692;
                        _3852 = _3694;
                        _3853 = _3696;
                        _3854 = _3698;
                        _3855 = _3700;
                        _3856 = _3702;
                        _3857 = _3858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3702;
                frontier_phi_65_66_ladder_1 = _3698;
                frontier_phi_65_66_ladder_2 = _3700;
                frontier_phi_65_66_ladder_3 = _3694;
                frontier_phi_65_66_ladder_4 = _3692;
                frontier_phi_65_66_ladder_5 = _3696;
            }
            else
            {
                frontier_phi_65_66_ladder = _3581;
                frontier_phi_65_66_ladder_1 = _3577;
                frontier_phi_65_66_ladder_2 = _3579;
                frontier_phi_65_66_ladder_3 = _3573;
                frontier_phi_65_66_ladder_4 = _3571;
                frontier_phi_65_66_ladder_5 = _3575;
            }
            _3691 = frontier_phi_65_66_ladder_4;
            _3693 = frontier_phi_65_66_ladder_3;
            _3695 = frontier_phi_65_66_ladder_5;
            _3697 = frontier_phi_65_66_ladder_1;
            _3699 = frontier_phi_65_66_ladder_2;
            _3701 = frontier_phi_65_66_ladder;
        }
        float _3706 = isnan(1.0) ? _1441 : (isnan(_1441) ? 1.0 : min(_1441, 1.0));
        _3502 = (_3706 * _3697) + _3015;
        _3504 = (_3706 * _3699) + _3017;
        _3506 = (_3706 * _3701) + _3019;
        _3508 = ((_3691 * _1426) * _3706) + _3353;
        _3510 = ((_3693 * _1428) * _3706) + _3355;
        _3512 = ((_3695 * _1429) * _3706) + _3357;
    }
    else
    {
        _3502 = _3015;
        _3504 = _3017;
        _3506 = _3019;
        _3508 = _3353;
        _3510 = _3355;
        _3512 = _3357;
    }
    float _5688 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _5699 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _5710 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
    float _5721 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _3530 = ((isnan(1.0) ? _5688 : (isnan(_5688) ? 1.0 : min(_5688, 1.0))) * (_3502 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1441))) + ((_3508 + ((isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))) * _2283)) * cbPerFrame._m0[3u].x);
    float _3531 = ((isnan(1.0) ? _5699 : (isnan(_5699) ? 1.0 : min(_5699, 1.0))) * (_3504 + ((isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0))) * _1441))) + ((_3510 + ((isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))) * _2283)) * cbPerFrame._m0[3u].x);
    float _3532 = ((isnan(1.0) ? _5710 : (isnan(_5710) ? 1.0 : min(_5710, 1.0))) * (_3506 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1441))) + ((_3512 + ((isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0))) * _2283)) * cbPerFrame._m0[3u].x);
    float _3537 = cbInstanceData._m0[_1401 + 6u].w * (isnan(1.0) ? _5721 : (isnan(_5721) ? 1.0 : min(_5721, 1.0)));
    float _3542 = _1363 / cbSceneParam._m0[86u].x;
    float _3543 = _1364 / cbSceneParam._m0[86u].y;
    vec4 _3557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3542, _3543, (log2((isnan(cbSceneParam._m0[77u].w) ? _1286 : (isnan(_1286) ? cbSceneParam._m0[77u].w : min(_1286, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3559 = _3557.x;
    float _3560 = _3557.y;
    float _3561 = _3557.z;
    float _3562 = _3557.w;
    float _3633;
    float _3635;
    float _3637;
    float _3639;
    if (_1286 > cbSceneParam._m0[78u].w)
    {
        float _3596 = isnan(_1286) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1286 : min(cbSceneParam._m0[80u].w, _1286));
        float _3597 = _3596 / _1286;
        float _3608 = _3597 * _1336;
        float _3609 = _1337 * _3597;
        float _3610 = (-0.0) - _3609;
        float _3611 = _3597 * _1338;
        float _3613 = (cbSceneParam._m0[77u].w * _3610) / _3596;
        float _3614 = _3613 + cbSceneParam._m0[79u].w;
        float _3615 = cbSceneParam._m0[79u].w - _3609;
        float _3621 = sqrt(((_3608 * _3608) + (_3609 * _3609)) + (_3611 * _3611));
        float _3624 = (1.0 - (cbSceneParam._m0[77u].w / _3596)) * _3621;
        float _3629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3808;
        if (abs((_3610 - _3613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3808 = ((((_3614 > 0.0) ? exp2(_3629 * _3614) : (2.0 - exp2(_3631 * _3614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3624;
        }
        else
        {
            float _3752 = 1.0 / cbSceneParam._m0[80u].x;
            float _3753 = isnan(_3615) ? _3614 : (isnan(_3614) ? _3615 : max(_3614, _3615));
            float _3754 = isnan(_3615) ? _3614 : (isnan(_3614) ? _3615 : min(_3614, _3615));
            float _3763 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : min(_3753, 0.0));
            float _3764 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : min(_3754, 0.0));
            _3808 = ((abs(_3621 / _3610) * cbSceneParam._m0[80u].y) * ((((_3763 - _3764) * 2.0) - ((exp2(_3629 * (isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0)))) - exp2(_3629 * (isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0))))) * _3752)) - ((exp2(_3631 * _3763) - exp2(_3631 * _3764)) * _3752))) + (_3624 * cbSceneParam._m0[80u].z);
        }
        vec4 _3810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3542, _3543, 1.0), 0.0);
        float _3819 = exp2((_3808 * (-1.44269502162933349609375)) * (1.0 - _3810.w));
        float _3820 = log2(_3819);
        float _3836 = log2(_3562);
        _3633 = (exp2(_3836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3820 * cbSceneParam._m0[78u].x)) * _3810.x) / cbSceneParam._m0[78u].x)) + _3559;
        _3635 = (exp2(_3836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3820 * cbSceneParam._m0[78u].y)) * _3810.y) / cbSceneParam._m0[78u].y)) + _3560;
        _3637 = (exp2(_3836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3820 * cbSceneParam._m0[78u].z)) * _3810.z) / cbSceneParam._m0[78u].z)) + _3561;
        _3639 = _3819 * _3562;
    }
    else
    {
        _3633 = _3559;
        _3635 = _3560;
        _3637 = _3561;
        _3639 = _3562;
    }
    bool _3846;
    vec4 _3649;
    vec4 _3671;
    float _3673;
    float _3677;
    float _3678;
    float _3679;
    float _3680;
    bool _3690;
    for (;;)
    {
        _3649 = cbMatDynParam._m0[0u];
        float _3651 = roundEven(_3649.y);
        bool _3652 = _3651 == 3.0;
        float _3653 = log2(_3639);
        float _3660 = exp2(_3653 * cbSceneParam._m0[78u].x) * _3530;
        float _3661 = exp2(_3653 * cbSceneParam._m0[78u].y) * _3531;
        float _3662 = exp2(_3653 * cbSceneParam._m0[78u].z) * _3532;
        float _3669 = _1352 + (-0.5);
        _3671 = cbMtdParam._m0[1u];
        _3673 = _3671.y * _3669;
        float _3676 = (_3651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3677 = _3676 * (_3652 ? _3660 : (_3660 + (cbSceneParam._m0[72u].w * _3633)));
        _3678 = _3676 * (_3652 ? _3661 : (_3661 + (cbSceneParam._m0[72u].w * _3635)));
        _3679 = _3676 * (_3652 ? _3662 : (_3662 + (cbSceneParam._m0[72u].w * _3637)));
        _3680 = _3669 * 0.999000012874603271484375;
        _3690 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3690)
        {
            if ((cbInstanceData._m0[_1401 + 7u].x + _3680) < 0.5)
            {
                _3846 = true;
                break;
            }
        }
        uint _3787 = _1402 + uint(_3649.w);
        if ((cbInstanceData._m0[_3787].w < 1.0) && ((cbInstanceData._m0[_3787].w + _3680) < 0.5))
        {
            _3846 = true;
            break;
        }
        if ((_3673 + _617) < _3671.x)
        {
            _3846 = true;
            break;
        }
        _3846 = false;
        break;
    }
    float _4049;
    if (_3846)
    {
        discard_state = true;
        _4049 = 0.0;
    }
    else
    {
        _4049 = _3537;
    }
    SV_Target.x = _3677;
    SV_Target.y = _3678;
    SV_Target.z = _3679;
    SV_Target.w = _4049;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3537;
    discard_exit();
}


