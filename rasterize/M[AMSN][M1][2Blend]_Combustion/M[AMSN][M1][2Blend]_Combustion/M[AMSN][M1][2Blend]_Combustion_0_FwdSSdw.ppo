#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _255.x * cbMtdParam._m0[9u].x;
    float _262 = _255.y * cbMtdParam._m0[9u].y;
    float _263 = _255.z * cbMtdParam._m0[9u].z;
    vec4 _281 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _312 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3555 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _320 = (_313 * ((_281.x * cbMtdParam._m0[10u].x) - _261)) + _261;
    float _321 = (_313 * ((_281.y * cbMtdParam._m0[10u].y) - _262)) + _262;
    float _322 = (_313 * ((_281.z * cbMtdParam._m0[10u].z) - _263)) + _263;
    vec4 _336 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _344 = (_336.x * 2.0) + (-1.0);
    float _346 = (_336.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3566 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    vec4 _365 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _369 = _365.z;
    float _372 = (_365.x * 2.0) + (-1.0);
    float _373 = (_365.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_372, _373), vec2(_372, _373));
    float _3577 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _384 = ((((_336.z * cbMtdParam._m0[16u].w) - _369) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _369;
    float _407 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _408 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _431 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _437 = (_431.x * 2.0) + (-1.0);
    float _438 = (_431.y * 2.0) + (-1.0);
    float _442 = 1.0 - dot(vec2(_437, _438), vec2(_437, _438));
    float _3588 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _444 = sqrt(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)));
    float _447 = fma(_444, _219, fma(_438, _226, _437 * _212));
    float _450 = fma(_444, _220, fma(_438, _227, _437 * _213));
    float _453 = fma(_444, _221, fma(_438, _228, _437 * _214));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    float _459 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _468 = (((_450 * 0.5) * _457) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _470 = (-0.0) - (cbMtdParam._m0[14u].w * (((_447 * 0.5) * _457) + (-0.25)));
    float _472 = fract(_459);
    float _474 = fract(_459 + 0.5);
    float _485 = abs((_472 * 2.0) + (-1.0));
    vec4 _502 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_472 * _470) + _407) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_468 * _472) + _408) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    vec4 _507 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_474 * _470) + _407) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_468 * _474) + _408) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _527 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3599 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _536 = (((_528 * _528) * (3.0 - (_528 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _545 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _553 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3610 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _558 = (_554 * _554) * (3.0 - (_554 * 2.0));
    float _559 = _558 * cbMtdParam._m0[17u].y;
    float _560 = _558 * cbMtdParam._m0[17u].z;
    float _561 = sin(_545);
    float _562 = cos(_545);
    float _563 = TEXCOORD.z - _559;
    float _564 = TEXCOORD.w - _560;
    vec4 _583 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_559 + fma(_564, (-0.0) - _561, _563 * _562))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_564, _562, _563 * _561) + _560)) + cbTextureTilingScale._m0[1u].w));
    float _589 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _583.x;
    float _591 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _583.y;
    float _593 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _583.z;
    vec4 _616 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _407) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _408) + cbTextureTilingScale._m0[6u].w));
    float _625 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_616.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3621 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _633 = (_313 * (_344 - _372)) + _372;
    float _634 = (_313 * (_346 - _373)) + _373;
    float _635 = (_313 * (sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) - _379)) + _379;
    float _638 = fma(_635, _219, fma(_634, _226, _633 * _212));
    float _641 = fma(_635, _220, fma(_634, _227, _633 * _213));
    float _644 = fma(_635, _221, fma(_634, _228, _633 * _214));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3632 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _652 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3654 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3665 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _758 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _761 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _774 = uint(roundEven(NORMAL.w)) * 13u;
    uint _775 = _774 + 9u;
    uint _776 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3676 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _799 = _796.x * TEXCOORD_6.w;
    float _800 = dot(vec3(_649, _650, _651), vec3(_728, _729, _730));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _649) - _728;
    float _808 = (_803 * _650) - _729;
    float _809 = (_803 * _651) - _730;
    float _813 = abs(dot(vec3(_728, _729, _730), vec3(_649, _650, _651)));
    float _3709 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_652);
    float _827 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _898 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _902 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _926 = _859 + _649;
        float _927 = _863 + _650;
        float _928 = _867 + _651;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _894;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _898;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _902;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_649, _650, _651), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3757 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_649, _650, _651), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3790 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_649, _650, _651), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3823 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1213 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1217 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1240 = _859 + _649;
        float _1241 = _863 + _650;
        float _1242 = _867 + _651;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_649, _650, _651), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3886 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_649, _650, _651), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3919 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_649, _650, _651), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3952 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1182)) + _1182;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1183)) + _1183;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _807 * 0.5;
    float _1547 = _808 * 0.5;
    float _1548 = _809 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1676 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1679 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1707 = frontier_phi_14_12_ladder;
        }
        float _1930;
        if (_1676 > 0.0)
        {
            _1930 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1930 = frontier_phi_23_19_ladder;
        }
        float _2176;
        if (_1679 > 0.0)
        {
            _2176 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2176 = frontier_phi_35_30_ladder;
        }
        float _2178 = isnan(_1930) ? _1707 : (isnan(_1707) ? _1930 : min(_1707, _1930));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1673) + _1662;
        float _2184 = (_2179 * _1676) + _1666;
        float _2185 = (_2179 * _1679) + _1670;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_13_35_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_13_35_ladder_2;
        _1697 = frontier_phi_13_35_ladder_1;
        _1699 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1615);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1772 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1775 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1935;
        if (_1769 > 0.0)
        {
            _1935 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2203;
        if (_1772 > 0.0)
        {
            _2203 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2203 = frontier_phi_37_32_ladder;
        }
        float _2408;
        if (_1775 > 0.0)
        {
            _2408 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2408 = frontier_phi_46_43_ladder;
        }
        float _2410 = isnan(_2203) ? _1935 : (isnan(_1935) ? _2203 : min(_1935, _2203));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1769) + _1758;
        float _2416 = (_2411 * _1772) + _1762;
        float _2417 = (_2411 * _1775) + _1766;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_22_46_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_22_46_ladder_2;
        _1796 = frontier_phi_22_46_ladder_1;
        _1798 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1704);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _827) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_827 * _815)) * _799;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    vec4 _1830 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_736, _737));
    float _1832 = _1830.w;
    float _1844 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1832);
    float _1845 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1832);
    float _1846 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1832);
    uvec4 _1850 = floatBitsToUint(cbInstanceData._m0[_774 + 5u]);
    uint _1852 = _1850.x * 14u;
    uint _1853 = _1852 + 13u;
    float _1860 = _799 + (-1.0);
    float _1865 = (cbLight._m0[_1853].x * _1860) + 1.0;
    float _1866 = (cbLight._m0[_1853].y * _1860) + 1.0;
    float _1867 = (cbLight._m0[_1853].z * _1860) + 1.0;
    float _1868 = (cbLight._m0[_1853].w * _1860) + 1.0;
    uint _1869 = _1852 + 5u;
    float _1875 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1879 = _1852 + 4u;
    float _1889 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1893 = _1852 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_649, _650, _651));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_649, _650, _651));
    float _4088 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4099 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1869].x * _1875) * _1914) + (((cbLight._m0[_1879].x * _1844) * _1889) * _1912);
    float _1922 = ((_1875 * cbLight._m0[_1869].y) * _1914) + (((cbLight._m0[_1879].y * _1845) * _1889) * _1912);
    float _1923 = ((_1875 * cbLight._m0[_1869].z) * _1914) + (((cbLight._m0[_1879].z * _1846) * _1889) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1852 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1929)
    {
        _1940 = _1921;
        _1942 = _1922;
        _1944 = _1923;
    }
    else
    {
        uint _1948 = _1852 + 6u;
        float _1964 = (dot(vec3(cbLight._m0[_1852 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _4110 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1967 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1940 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1921;
        _1942 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1922;
        _1944 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1923;
    }
    bool _1947 = _1927.y == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1947)
    {
        _1985 = _1940;
        _1987 = _1942;
        _1989 = _1944;
    }
    else
    {
        uint _2147 = _1852 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1852 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4126 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2166 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1985 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1940;
        _1987 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1942;
        _1989 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1944;
    }
    uint _1992 = _1852 + 8u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _652) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1852].x + _728;
    float _2008 = cbLight._m0[_1852].y + _729;
    float _2009 = cbLight._m0[_1852].z + _730;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1852].xyz));
    float _4142 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2021 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2022 = dot(vec3(_649, _650, _651), vec3(_2014, _2015, _2016));
    float _4164 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2014, _2015, _2016));
    float _4175 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2006 * _2006;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2006;
    float _2057 = (0.5 / (((_2021 * ((_2020 * _2046) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2046) + _2006) * _2020))) * _2020;
    float _4186 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    uint _2073 = _1852 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _652) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1893].x + _728;
    float _2087 = cbLight._m0[_1893].y + _729;
    float _2088 = cbLight._m0[_1893].z + _730;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1893].xyz));
    float _4197 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2100 = dot(vec3(_649, _650, _651), vec3(_2093, _2094, _2095));
    float _4208 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2093, _2094, _2095));
    float _4219 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2085;
    float _2132 = (0.5 / (((_2021 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2122) + _2085) * _2099))) * _2099;
    float _4230 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2144 = (((_2121 * cbLight._m0[_2073].x) * _2134) * _1875) + ((((cbLight._m0[_1992].x * _1844) * _2045) * _2059) * _1889);
    float _2145 = (((_2121 * cbLight._m0[_2073].y) * _2134) * _1875) + ((((cbLight._m0[_1992].y * _1845) * _2045) * _2059) * _1889);
    float _2146 = (((_2121 * cbLight._m0[_2073].z) * _2134) * _1875) + ((((cbLight._m0[_1992].z * _1846) * _2045) * _2059) * _1889);
    float _2208;
    float _2210;
    float _2212;
    if (_1929)
    {
        _2208 = _2144;
        _2210 = _2145;
        _2212 = _2146;
    }
    else
    {
        uint _2214 = _1852 + 2u;
        uint _2218 = _1852 + 10u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _652) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _728;
        float _2235 = cbLight._m0[_2214].y + _729;
        float _2236 = cbLight._m0[_2214].z + _730;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2214].xyz));
        float _4241 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2248 = dot(vec3(_649, _650, _651), vec3(_2241, _2242, _2243));
        float _4252 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4263 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = 1.0 - _2233;
        float _2280 = (0.5 / (((_2021 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2270) + _2233) * _2247))) * _2247;
        float _4274 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2208 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + _2144;
        _2210 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + _2145;
        _2212 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + _2146;
    }
    float _2318;
    float _2320;
    float _2322;
    if (_1947)
    {
        _2318 = _2208;
        _2320 = _2210;
        _2322 = _2212;
    }
    else
    {
        uint _2329 = _1852 + 3u;
        uint _2333 = _1852 + 11u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _652) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _728;
        float _2350 = cbLight._m0[_2329].y + _729;
        float _2351 = cbLight._m0[_2329].z + _730;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2329].xyz));
        float _4290 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2363 = dot(vec3(_649, _650, _651), vec3(_2356, _2357, _2358));
        float _4301 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4312 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2385 = 1.0 - _2348;
        float _2395 = (0.5 / (((_2021 * ((_2362 * _2385) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2385) + _2348) * _2362))) * _2362;
        float _4323 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2318 = (((_2384 * cbLight._m0[_2333].x) * _2397) * _2398) + _2208;
        _2320 = (((_2384 * cbLight._m0[_2333].y) * _2397) * _2398) + _2210;
        _2322 = (((_2384 * cbLight._m0[_2333].z) * _2397) * _2398) + _2212;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1850.y == 0u)
    {
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2473;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2473;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2473;
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.x;
        uint _2500 = uint((float(_2488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2489))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2489)));
        float _2510 = (log2(_2476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2511 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        uint _2514 = uint(isnan(14.0) ? _2511 : (isnan(_2511) ? 14.0 : min(_2511, 14.0)));
        uvec4 _2519 = texelFetch(g_lightClusterGridBuffer, int(((_2514 << 2u) + (_2500 << 6u)) >> 2u));
        uint _2520 = _2519.x;
        uint _2521 = _2488.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2521 >> 4u) & 15u)) + 4294967295u) & _2520) == 0u) || ((_2521 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2835)
                {
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2824;
                    frontier_phi_61_pred_2 = _2823;
                    frontier_phi_61_pred_3 = _2822;
                    frontier_phi_61_pred_4 = _2821;
                    frontier_phi_61_pred_5 = _2820;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2834;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2825 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _2474;
                        float _3010 = _2969.y - _2475;
                        float _3011 = _2969.z - _2476;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_755, _758, _761), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4349 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _2474;
                        float _3045 = (-0.0) - _2475;
                        float _3046 = (-0.0) - _2476;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3061 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _815;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3051 + _3016;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_755, _758, _761), vec3(_3051, _3052, _3053));
                        float _4365 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3086 = dot(vec3(_755, _758, _761), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4376 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3029 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3019) + _3095;
                        float _4387 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4398 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3093 * _3093) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2878 = (_3040 * _2988.x) + _2946;
                        _2879 = (_3040 * _2988.y) + _2947;
                        _2880 = (_3040 * _2988.z) + _2948;
                        _2875 = (_3121 * _3005.x) + _2943;
                        _2876 = (_3121 * _3005.y) + _2944;
                        _2877 = (_3121 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2880;
                    frontier_phi_61_pred_2 = _2879;
                    frontier_phi_61_pred_3 = _2878;
                    frontier_phi_61_pred_4 = _2877;
                    frontier_phi_61_pred_5 = _2876;
                }
                _2667 = frontier_phi_61_pred;
                _2677 = frontier_phi_61_pred_1;
                _2675 = frontier_phi_61_pred_2;
                _2673 = frontier_phi_61_pred_3;
                _2671 = frontier_phi_61_pred_4;
                _2669 = frontier_phi_61_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2667;
                    _2820 = _2669;
                    _2821 = _2671;
                    _2822 = _2673;
                    _2823 = _2675;
                    _2824 = _2677;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2683) & _2520) == 0u)
        {
            _2787 = _2666;
            _2789 = _2668;
            _2791 = _2670;
            _2793 = _2672;
            _2795 = _2674;
            _2797 = _2676;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
            float _2813 = _2812 * _2474;
            float _2814 = _2812 * _2475;
            float _2815 = _2812 * _2476;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2926 = _2666;
                float _2927 = _2668;
                float _2928 = _2670;
                float _2929 = _2672;
                float _2930 = _2674;
                float _2931 = _2676;
                uint _2932 = _2683;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2942)
                    {
                        frontier_phi_67_pred = _2929;
                        frontier_phi_67_pred_1 = _2930;
                        frontier_phi_67_pred_2 = _2931;
                        frontier_phi_67_pred_3 = _2928;
                        frontier_phi_67_pred_4 = _2927;
                        frontier_phi_67_pred_5 = _2926;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        uint _3145 = _2941;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3230;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3156 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3156 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3233 = (_3156 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3156 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_2476, _3265.z, fma(_2475, _3265.y, _3265.x * _2474)) + _3265.w;
                            _3278 = !((fma(_2476, _3246.z, fma(_2475, _3246.y, _3246.x * _2474)) + _3246.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3171.x - _2474;
                                float _3306 = _3171.y - _2475;
                                float _3307 = _3171.z - _2476;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3172 * _3172));
                                float _4409 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3323 = sqrt(_3308) * _3187.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_755, _758, _761))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_2476, _3214.z, fma(_2475, _3214.y, _3214.x * _2474)) + _3214.w) / _3277;
                                float _3337 = (fma(_2476, _3230.z, fma(_2475, _3230.y, _3230.x * _2474)) + _3230.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4425 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _815;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2813;
                                float _3367 = _3313 - _2814;
                                float _3368 = _3314 - _2815;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2813, (-0.0) - _2814, (-0.0) - _2815));
                                float _4436 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3380 = dot(vec3(_755, _758, _761), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4447 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_755, _758, _761), vec3(_3312, _3313, _3314))) + _3389;
                                float _4458 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4469 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3417 * _3199.x;
                                frontier_phi_73_pred_1 = _3417 * _3199.y;
                                frontier_phi_73_pred_2 = _3343 * _3187.z;
                                frontier_phi_73_pred_3 = _3343 * _3187.y;
                                frontier_phi_73_pred_4 = _3343 * _3187.x;
                                frontier_phi_73_pred_5 = _3417 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3421 = frontier_phi_73_pred;
                            _3422 = frontier_phi_73_pred_1;
                            _3426 = frontier_phi_73_pred_2;
                            _3425 = frontier_phi_73_pred_3;
                            _3424 = frontier_phi_73_pred_4;
                            _3423 = frontier_phi_73_pred_5;
                            _3129 = _3424 + _3142;
                            _3130 = _3425 + _3143;
                            _3131 = _3426 + _3144;
                            _3126 = _3421 + _3139;
                            _3127 = _3422 + _3140;
                            _3128 = _3423 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    _2794 = frontier_phi_67_pred;
                    _2796 = frontier_phi_67_pred_1;
                    _2798 = frontier_phi_67_pred_2;
                    _2792 = frontier_phi_67_pred_3;
                    _2790 = frontier_phi_67_pred_4;
                    _2788 = frontier_phi_67_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2788;
                        _2927 = _2790;
                        _2928 = _2792;
                        _2929 = _2794;
                        _2930 = _2796;
                        _2931 = _2798;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2796;
                frontier_phi_55_56_ladder_1 = _2798;
                frontier_phi_55_56_ladder_2 = _2794;
                frontier_phi_55_56_ladder_3 = _2792;
                frontier_phi_55_56_ladder_4 = _2790;
                frontier_phi_55_56_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_55_56_ladder = _2674;
                frontier_phi_55_56_ladder_1 = _2676;
                frontier_phi_55_56_ladder_2 = _2672;
                frontier_phi_55_56_ladder_3 = _2670;
                frontier_phi_55_56_ladder_4 = _2668;
                frontier_phi_55_56_ladder_5 = _2666;
            }
            _2787 = frontier_phi_55_56_ladder_5;
            _2789 = frontier_phi_55_56_ladder_4;
            _2791 = frontier_phi_55_56_ladder_3;
            _2793 = frontier_phi_55_56_ladder_2;
            _2795 = frontier_phi_55_56_ladder;
            _2797 = frontier_phi_55_56_ladder_1;
        }
        float _2802 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2533 = (_2802 * _2793) + _1985;
        _2535 = (_2802 * _2795) + _1987;
        _2537 = (_2802 * _2797) + _1989;
        _2539 = ((_2787 * 0.039999999105930328369140625) * _2802) + _2318;
        _2541 = ((_2789 * 0.039999999105930328369140625) * _2802) + _2320;
        _2543 = ((_2791 * 0.039999999105930328369140625) * _2802) + _2322;
    }
    else
    {
        _2533 = _1985;
        _2535 = _1987;
        _2537 = _1989;
        _2539 = _2318;
        _2541 = _2320;
        _2543 = _2322;
    }
    uint _2549 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _2555 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2561 = (((((_2555 * cbMtdParam._m0[11u].x) * (((_507.x - _504) * _485) + _504)) * _536) * (((1.0 - _589) * cbMtdParam._m0[16u].y) + _589)) * _626) * cbInstanceData._m0[_2549].x;
    float _2567 = (((((_2555 * cbMtdParam._m0[11u].y) * (((_507.y - _505) * _485) + _505)) * _536) * (((1.0 - _591) * cbMtdParam._m0[16u].y) + _591)) * _626) * cbInstanceData._m0[_2549].y;
    float _2573 = (((((_2555 * cbMtdParam._m0[11u].z) * (((_507.z - _506) * _485) + _506)) * _536) * (((1.0 - _593) * cbMtdParam._m0[16u].y) + _593)) * _626) * cbInstanceData._m0[_2549].z;
    float _4485 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4496 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4507 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2590 = (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2533 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _799))) + ((_2539 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + _2561;
    float _2592 = (_2567 + ((_2541 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2535 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _799)));
    float _2594 = (_2573 + ((_2543 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2537 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _799)));
    float _4533 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2607 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    uint _2608 = _774 + 6u;
    float _2616 = _736 / cbSceneParam._m0[86u].x;
    float _2617 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2633 = _2631.x;
    float _2634 = _2631.y;
    float _2635 = _2631.z;
    float _2636 = _2631.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2692 = _2691 / _671;
        float _2703 = _2692 * _721;
        float _2704 = _722 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2706 = _2692 * _723;
        float _2708 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2704;
        float _2716 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2705 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2850 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2888 = ((abs(_2716 / _2705) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2726 * _2859) - exp2(_2726 * _2860)) * _2848))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2636);
        _2728 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2633;
        _2730 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2634;
        _2732 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2635;
        _2734 = _2899 * _2636;
    }
    else
    {
        _2728 = _2633;
        _2730 = _2634;
        _2732 = _2635;
        _2734 = _2636;
    }
    float _2746 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2747 = _2746 == 3.0;
    float _2748 = log2(_2734);
    float _2752 = exp2(_2748 * cbSceneParam._m0[78u].x);
    float _2753 = exp2(_2748 * cbSceneParam._m0[78u].y);
    float _2754 = exp2(_2748 * cbSceneParam._m0[78u].z);
    float _2755 = _2752 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)));
    float _2756 = _2753 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)));
    float _2757 = _2754 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)));
    float _2766 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2766 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.y = _2766 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.z = _2766 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
    SV_Target.w = cbInstanceData._m0[_2608].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2561) * _2607) * _2752) * _2766;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2567) * _2607) * _2753) * _2766;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2573) * _2607) * _2754) * _2766;
    SV_Target_1.w = cbInstanceData._m0[_2608].w;
}


