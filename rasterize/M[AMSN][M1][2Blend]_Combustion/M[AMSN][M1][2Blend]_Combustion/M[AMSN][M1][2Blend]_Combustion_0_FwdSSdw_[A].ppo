#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1213;
float _3653;
float _3654;
float _3655;
float _3656;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _316 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3665 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _324 = (_317 * ((_285.x * cbMtdParam._m0[10u].x) - _265)) + _265;
    float _325 = (_317 * ((_285.y * cbMtdParam._m0[10u].y) - _266)) + _266;
    float _326 = (_317 * ((_285.z * cbMtdParam._m0[10u].z) - _267)) + _267;
    vec4 _340 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _348 = (_340.x * 2.0) + (-1.0);
    float _350 = (_340.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3676 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _369 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _373 = _369.z;
    float _376 = (_369.x * 2.0) + (-1.0);
    float _377 = (_369.y * 2.0) + (-1.0);
    float _378 = dot(vec2(_376, _377), vec2(_376, _377));
    float _3687 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _383 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _388 = ((((_340.z * cbMtdParam._m0[16u].w) - _373) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _373;
    float _411 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _412 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _435 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _441 = (_435.x * 2.0) + (-1.0);
    float _442 = (_435.y * 2.0) + (-1.0);
    float _446 = 1.0 - dot(vec2(_441, _442), vec2(_441, _442));
    float _3698 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _448 = sqrt(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)));
    float _451 = fma(_448, _223, fma(_442, _230, _441 * _216));
    float _454 = fma(_448, _224, fma(_442, _231, _441 * _217));
    float _457 = fma(_448, _225, fma(_442, _232, _441 * _218));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    float _463 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _472 = (((_454 * 0.5) * _461) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _474 = (-0.0) - (cbMtdParam._m0[14u].w * (((_451 * 0.5) * _461) + (-0.25)));
    float _476 = fract(_463);
    float _478 = fract(_463 + 0.5);
    float _489 = abs((_476 * 2.0) + (-1.0));
    vec4 _506 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_476 * _474) + _411) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_472 * _476) + _412) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    vec4 _511 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_478 * _474) + _411) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_472 * _478) + _412) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _531 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3709 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _540 = (((_532 * _532) * (3.0 - (_532 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _549 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _557 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3720 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _562 = (_558 * _558) * (3.0 - (_558 * 2.0));
    float _563 = _562 * cbMtdParam._m0[17u].y;
    float _564 = _562 * cbMtdParam._m0[17u].z;
    float _565 = sin(_549);
    float _566 = cos(_549);
    float _567 = TEXCOORD.z - _563;
    float _568 = TEXCOORD.w - _564;
    vec4 _587 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_563 + fma(_568, (-0.0) - _565, _567 * _566))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_568, _566, _567 * _565) + _564)) + cbTextureTilingScale._m0[1u].w));
    float _593 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _587.x;
    float _595 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _587.y;
    float _597 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _587.z;
    vec4 _620 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _411) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _412) + cbTextureTilingScale._m0[6u].w));
    float _629 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_620.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3731 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _637 = (_317 * (_348 - _376)) + _376;
    float _638 = (_317 * (_350 - _377)) + _377;
    float _639 = (_317 * (sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) - _383)) + _383;
    float _642 = fma(_639, _223, fma(_638, _230, _637 * _216));
    float _645 = fma(_639, _224, fma(_638, _231, _637 * _217));
    float _648 = fma(_639, _225, fma(_638, _232, _637 * _218));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3742 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _656 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3764 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3775 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    vec4 _739 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _741 = _739.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _894 = sqrt(((_725 * _725) + (_726 * _726)) + (_727 * _727));
        float _900 = (cbMatDynParam._m0[5u].x * _894) + cbMatDynParam._m0[5u].y;
        float _3786 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _905 = (cbMatDynParam._m0[5u].z * _894) + cbMatDynParam._m0[5u].w;
        float _3797 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) - _901)) + _901) < ((_741 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _774 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _777 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _790 = uint(roundEven(NORMAL.w)) * 13u;
    uint _791 = _790 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3808 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _815 = _812.x * TEXCOORD_6.w;
    float _816 = dot(vec3(_653, _654, _655), vec3(_732, _733, _734));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _653) - _732;
    float _824 = (_819 * _654) - _733;
    float _825 = (_819 * _655) - _734;
    float _829 = abs(dot(vec3(_732, _733, _734), vec3(_653, _654, _655)));
    float _3841 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_656);
    float _843 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1212;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _942 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _946 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _970 = _875 + _653;
        float _971 = _879 + _654;
        float _972 = _883 + _655;
        float _982 = fma(_972, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970)) - _938;
        float _983 = fma(_972, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970)) - _942;
        float _984 = fma(_972, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970)) - _946;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1040 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1006.x + (-0.5));
        float _1042 = _1040 * (_1006.y + (-0.5));
        float _1043 = _1040 * (_1006.z + (-0.5));
        float _1050 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1013.x + (-0.5));
        float _1052 = _1050 * (_1013.y + (-0.5));
        float _1053 = _1050 * (_1013.z + (-0.5));
        float _1060 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1020.x + (-0.5));
        float _1062 = _1060 * (_1020.y + (-0.5));
        float _1063 = _1060 * (_1020.z + (-0.5));
        float _1070 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1027.x + (-0.5));
        float _1072 = _1070 * (_1027.y + (-0.5));
        float _1073 = _1070 * (_1027.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1094 = (dot(vec3(_653, _654, _655), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1104 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3889 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1106 + 1.0))) + _1111) * _1074;
        float _1121 = _1042 * 0.5;
        float _1122 = _1052 * 0.5;
        float _1123 = _1062 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_653, _654, _655), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3922 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1148 + 1.0))) + _1153) * _1075;
        float _1163 = _1043 * 0.5;
        float _1164 = _1053 * 0.5;
        float _1165 = _1063 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_653, _654, _655), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3955 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1190 + 1.0))) + _1195) * _1076;
        _1212 = _1043;
        _1214 = _1042;
        _1215 = _1041;
        _1216 = _1053;
        _1217 = _1052;
        _1218 = _1051;
        _1219 = _1063;
        _1220 = _1062;
        _1221 = _1061;
        _1222 = _1076;
        _1223 = _1075;
        _1224 = _1074;
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _1213;
        _1214 = _1213;
        _1215 = _1213;
        _1216 = _1213;
        _1217 = _1213;
        _1218 = _1213;
        _1219 = _1213;
        _1220 = _1213;
        _1221 = _1213;
        _1222 = _1213;
        _1223 = _1213;
        _1224 = _1213;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1260 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1264 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1287 = _875 + _653;
        float _1288 = _879 + _654;
        float _1289 = _883 + _655;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_653, _654, _655), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4018 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_653, _654, _655), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4051 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_653, _654, _655), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4084 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1213;
        _1526 = _1213;
        _1527 = _1213;
        _1528 = _1213;
        _1529 = _1213;
        _1530 = _1213;
        _1531 = _1213;
        _1532 = _1213;
        _1533 = _1213;
        _1534 = _1213;
        _1535 = _1213;
        _1536 = _1213;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1225)) + _1225;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1226)) + _1226;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _823 * 0.5;
    float _1594 = _824 * 0.5;
    float _1595 = _825 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1212, _1216, _1219, _1222));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1709 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1713 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1717 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1720 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1723 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1726 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1754;
        if (_1720 > 0.0)
        {
            _1754 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1754 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1723 > 0.0)
        {
            _1977 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2223;
        if (_1726 > 0.0)
        {
            _2223 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2223 = frontier_phi_38_33_ladder;
        }
        float _2225 = isnan(_1977) ? _1754 : (isnan(_1754) ? _1977 : min(_1754, _1977));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1720) + _1709;
        float _2231 = (_2226 * _1723) + _1713;
        float _2232 = (_2226 * _1726) + _1717;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2233;
        float _2237 = _2233 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 > _2237) || ((_2231 < _2235) || ((_2230 < _2235) || (_2230 > _2237))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_16_38_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1742 = frontier_phi_16_38_ladder_2;
        _1744 = frontier_phi_16_38_ladder_1;
        _1746 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1662);
        _1742 = _1730.x * cbModelParam._m0[1u].y;
        _1744 = _1730.y * cbModelParam._m0[1u].y;
        _1746 = _1730.z * cbModelParam._m0[1u].y;
    }
    float _1750 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1750 : min(cbModelParam._m0[25u].w, _1750));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1805 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1809 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1813 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1816 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1819 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1822 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1982;
        if (_1816 > 0.0)
        {
            _1982 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2250;
        if (_1819 > 0.0)
        {
            _2250 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2250 = frontier_phi_40_35_ladder;
        }
        float _2455;
        if (_1822 > 0.0)
        {
            _2455 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2455 = frontier_phi_49_46_ladder;
        }
        float _2457 = isnan(_2250) ? _1982 : (isnan(_1982) ? _2250 : min(_1982, _2250));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1816) + _1805;
        float _2463 = (_2458 * _1819) + _1809;
        float _2464 = (_2458 * _1822) + _1813;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2464, cbModelParam._m0[17u].z, fma(_2463, cbModelParam._m0[17u].y, _2462 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2464, cbModelParam._m0[18u].z, fma(_2463, cbModelParam._m0[18u].y, _2462 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2464, cbModelParam._m0[19u].z, fma(_2463, cbModelParam._m0[19u].y, _2462 * cbModelParam._m0[19u].x))), _1751);
            frontier_phi_25_49_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1841 = frontier_phi_25_49_ladder_2;
        _1843 = frontier_phi_25_49_ladder_1;
        _1845 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1751);
        _1841 = _1825.x * cbModelParam._m0[1u].z;
        _1843 = _1825.y * cbModelParam._m0[1u].z;
        _1845 = _1825.z * cbModelParam._m0[1u].z;
    }
    float _1857 = ((((1.0 - _843) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_843 * _831)) * _815;
    float _1858 = _1857 * ((cbModelParam._m0[1u].w * (_1841 - _1742)) + _1742);
    float _1859 = _1857 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1860 = _1857 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1858 * cbSceneParam._m0[91u].x));
    vec4 _1877 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_752, _753));
    float _1879 = _1877.w;
    float _1891 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1879);
    float _1892 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1879);
    float _1893 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1879);
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_790 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _815 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1936 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1940 = _1899 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_653, _654, _655));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_653, _654, _655));
    float _4220 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4231 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1916].x * _1922) * _1961) + (((cbLight._m0[_1926].x * _1891) * _1936) * _1959);
    float _1969 = ((_1922 * cbLight._m0[_1916].y) * _1961) + (((cbLight._m0[_1926].y * _1892) * _1936) * _1959);
    float _1970 = ((_1922 * cbLight._m0[_1916].z) * _1961) + (((cbLight._m0[_1926].z * _1893) * _1936) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1976)
    {
        _1987 = _1968;
        _1989 = _1969;
        _1991 = _1970;
    }
    else
    {
        uint _1995 = _1899 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4242 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2014 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1968;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1969;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1970;
    }
    bool _1994 = _1974.y == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_1994)
    {
        _2032 = _1987;
        _2034 = _1989;
        _2036 = _1991;
    }
    else
    {
        uint _2194 = _1899 + 7u;
        float _2210 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4258 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2213 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2032 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _1987;
        _2034 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _1989;
        _2036 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _1991;
    }
    uint _2039 = _1899 + 8u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _656) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1899].x + _732;
    float _2055 = cbLight._m0[_1899].y + _733;
    float _2056 = cbLight._m0[_1899].z + _734;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1899].xyz));
    float _4274 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2068 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2069 = dot(vec3(_653, _654, _655), vec3(_2061, _2062, _2063));
    float _4296 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2061, _2062, _2063));
    float _4307 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2053 * _2053;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2053;
    float _2104 = (0.5 / (((_2068 * ((_2067 * _2093) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2093) + _2053) * _2067))) * _2067;
    float _4318 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    uint _2120 = _1899 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _656) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1940].x + _732;
    float _2134 = cbLight._m0[_1940].y + _733;
    float _2135 = cbLight._m0[_1940].z + _734;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1940].xyz));
    float _4329 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2147 = dot(vec3(_653, _654, _655), vec3(_2140, _2141, _2142));
    float _4340 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2140, _2141, _2142));
    float _4351 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2132;
    float _2179 = (0.5 / (((_2068 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2169) + _2132) * _2146))) * _2146;
    float _4362 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2191 = (((_2168 * cbLight._m0[_2120].x) * _2181) * _1922) + ((((cbLight._m0[_2039].x * _1891) * _2092) * _2106) * _1936);
    float _2192 = (((_2168 * cbLight._m0[_2120].y) * _2181) * _1922) + ((((cbLight._m0[_2039].y * _1892) * _2092) * _2106) * _1936);
    float _2193 = (((_2168 * cbLight._m0[_2120].z) * _2181) * _1922) + ((((cbLight._m0[_2039].z * _1893) * _2092) * _2106) * _1936);
    float _2255;
    float _2257;
    float _2259;
    if (_1976)
    {
        _2255 = _2191;
        _2257 = _2192;
        _2259 = _2193;
    }
    else
    {
        uint _2261 = _1899 + 2u;
        uint _2265 = _1899 + 10u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _656) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _732;
        float _2282 = cbLight._m0[_2261].y + _733;
        float _2283 = cbLight._m0[_2261].z + _734;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2261].xyz));
        float _4373 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2295 = dot(vec3(_653, _654, _655), vec3(_2288, _2289, _2290));
        float _4384 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4395 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2317 = 1.0 - _2280;
        float _2327 = (0.5 / (((_2068 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2317) + _2280) * _2294))) * _2294;
        float _4406 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2255 = (((_2316 * cbLight._m0[_2265].x) * _2329) * _2330) + _2191;
        _2257 = (((_2316 * cbLight._m0[_2265].y) * _2329) * _2330) + _2192;
        _2259 = (((_2316 * cbLight._m0[_2265].z) * _2329) * _2330) + _2193;
    }
    float _2365;
    float _2367;
    float _2369;
    if (_1994)
    {
        _2365 = _2255;
        _2367 = _2257;
        _2369 = _2259;
    }
    else
    {
        uint _2376 = _1899 + 3u;
        uint _2380 = _1899 + 11u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _656) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _732;
        float _2397 = cbLight._m0[_2376].y + _733;
        float _2398 = cbLight._m0[_2376].z + _734;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2376].xyz));
        float _4422 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2410 = dot(vec3(_653, _654, _655), vec3(_2403, _2404, _2405));
        float _4433 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4444 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2432 = 1.0 - _2395;
        float _2442 = (0.5 / (((_2068 * ((_2409 * _2432) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2432) + _2395) * _2409))) * _2409;
        float _4455 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2365 = (((_2431 * cbLight._m0[_2380].x) * _2444) * _2445) + _2255;
        _2367 = (((_2431 * cbLight._m0[_2380].y) * _2444) * _2445) + _2257;
        _2369 = (((_2431 * cbLight._m0[_2380].z) * _2444) * _2445) + _2259;
    }
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_1897.y == 0u)
    {
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2520;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2520;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2520;
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.x;
        uint _2547 = uint((float(_2535.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2536))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2536)));
        float _2557 = (log2(_2523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        uint _2561 = uint(isnan(14.0) ? _2558 : (isnan(_2558) ? 14.0 : min(_2558, 14.0)));
        uvec4 _2566 = texelFetch(g_lightClusterGridBuffer, int(((_2561 << 2u) + (_2547 << 6u)) >> 2u));
        uint _2567 = _2566.x;
        uint _2568 = _2535.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2568 >> 4u) & 15u)) + 4294967295u) & _2567) == 0u) || ((_2568 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            uint _2880 = 0u;
            uint _2889;
            bool _2890;
            for (;;)
            {
                _2889 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                _2890 = _2889 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2890)
                {
                    frontier_phi_66_pred = _2874;
                    frontier_phi_66_pred_1 = _2879;
                    frontier_phi_66_pred_2 = _2878;
                    frontier_phi_66_pred_3 = _2877;
                    frontier_phi_66_pred_4 = _2876;
                    frontier_phi_66_pred_5 = _2875;
                }
                else
                {
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    uint _3025;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2889;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    for (;;)
                    {
                        uint _3029 = uint(findLSB(_3025)) + (_2880 << 5u);
                        uint _3026 = (_3025 + 4294967295u) & _3025;
                        uint _3031 = _3029 * 48u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3051 = (_3029 * 48u) + 4u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3070 = (_3029 * 48u) + 8u;
                        vec3 _3081 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x));
                        float _3085 = _3045.x - _2521;
                        float _3086 = _3045.y - _2522;
                        float _3087 = _3045.z - _2523;
                        float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                        float _3091 = inversesqrt(_3088);
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3095 = dot(vec3(_771, _774, _777), vec3(_3092, _3093, _3094));
                        float _3100 = 1.0 - (_3088 * _3045.w);
                        float _4481 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3101 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3102 = sqrt(_3088) * _3064.w;
                        float _3105 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3095) + _3106;
                        float _3112 = _3102 * _3102;
                        float _3116 = ((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3101) / ((_3112 * 0.699999988079071044921875) + 1.0);
                        float _3120 = (-0.0) - _2521;
                        float _3121 = (-0.0) - _2522;
                        float _3122 = (-0.0) - _2523;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3137 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                        float _3138 = 1.0 - _831;
                        float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                        float _3146 = _3145 * _3145;
                        float _3147 = _3146 * _3146;
                        float _3148 = _3127 + _3092;
                        float _3149 = _3128 + _3093;
                        float _3150 = _3129 + _3094;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3158 = dot(vec3(_771, _774, _777), vec3(_3127, _3128, _3129));
                        float _4497 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3162 = dot(vec3(_771, _774, _777), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                        float _4508 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                        float _3170 = _3105 * _3146;
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3095) + _3171;
                        float _4519 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3176 = 1.0 - _3146;
                        float _3186 = (0.5 / (((_3175 * ((_3161 * _3176) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3146) * _3161))) * _3175;
                        float _4530 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3197 = (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3169 * _3169) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125))) * _3101;
                        _2949 = (_3116 * _3064.x) + _3022;
                        _2950 = (_3116 * _3064.y) + _3023;
                        _2951 = (_3116 * _3064.z) + _3024;
                        _2946 = (_3197 * _3081.x) + _3019;
                        _2947 = (_3197 * _3081.y) + _3020;
                        _2948 = (_3197 * _3081.z) + _3021;
                        if (_3026 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _3026;
                        }
                    }
                    frontier_phi_66_pred = _2946;
                    frontier_phi_66_pred_1 = _2951;
                    frontier_phi_66_pred_2 = _2950;
                    frontier_phi_66_pred_3 = _2949;
                    frontier_phi_66_pred_4 = _2948;
                    frontier_phi_66_pred_5 = _2947;
                }
                _2714 = frontier_phi_66_pred;
                _2724 = frontier_phi_66_pred_1;
                _2722 = frontier_phi_66_pred_2;
                _2720 = frontier_phi_66_pred_3;
                _2718 = frontier_phi_66_pred_4;
                _2716 = frontier_phi_66_pred_5;
                uint _2881 = _2880 + 1u;
                if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2874 = _2714;
                    _2875 = _2716;
                    _2876 = _2718;
                    _2877 = _2720;
                    _2878 = _2722;
                    _2879 = _2724;
                    _2880 = _2881;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((4294967295u << _2730) & _2567) == 0u)
        {
            _2842 = _2713;
            _2844 = _2715;
            _2846 = _2717;
            _2848 = _2719;
            _2850 = _2721;
            _2852 = _2723;
        }
        else
        {
            float _2867 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
            float _2868 = _2867 * _2521;
            float _2869 = _2867 * _2522;
            float _2870 = _2867 * _2523;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _3002 = _2713;
                float _3003 = _2715;
                float _3004 = _2717;
                float _3005 = _2719;
                float _3006 = _2721;
                float _3007 = _2723;
                uint _3008 = _2730;
                uint _3017;
                bool _3018;
                for (;;)
                {
                    _3017 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                    _3018 = _3017 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3018)
                    {
                        frontier_phi_77_pred = _3007;
                        frontier_phi_77_pred_1 = _3006;
                        frontier_phi_77_pred_2 = _3005;
                        frontier_phi_77_pred_3 = _3004;
                        frontier_phi_77_pred_4 = _3003;
                        frontier_phi_77_pred_5 = _3002;
                    }
                    else
                    {
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        uint _3230 = _3017;
                        uint _3231;
                        vec4 _3256;
                        float _3257;
                        vec4 _3272;
                        vec3 _3284;
                        vec4 _3299;
                        vec4 _3315;
                        float _3362;
                        bool _3363;
                        for (;;)
                        {
                            uint _3241 = ((_3008 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3230));
                            _3231 = (_3230 + 4294967295u) & _3230;
                            uint _3243 = _3241 * 40u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3257 = _3256.w;
                            uint _3259 = (_3241 * 40u) + 4u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3241 * 40u) + 8u;
                            _3284 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x));
                            uint _3286 = (_3241 * 40u) + 16u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3302 = (_3241 * 40u) + 20u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3318 = (_3241 * 40u) + 24u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3337 = (_3241 * 40u) + 28u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3362 = fma(_2523, _3350.z, fma(_2522, _3350.y, _3350.x * _2521)) + _3350.w;
                            _3363 = !((fma(_2523, _3331.z, fma(_2522, _3331.y, _3331.x * _2521)) + _3331.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3363)
                            {
                                float _3390 = _3256.x - _2521;
                                float _3391 = _3256.y - _2522;
                                float _3392 = _3256.z - _2523;
                                float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                                float _3396 = inversesqrt(_3393);
                                float _3397 = _3396 * _3390;
                                float _3398 = _3396 * _3391;
                                float _3399 = _3396 * _3392;
                                float _3403 = 1.0 - (_3393 / (_3257 * _3257));
                                float _4541 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3408 = sqrt(_3393) * _3272.w;
                                float _3410 = 1.39999997615814208984375 / (_3408 + 1.39999997615814208984375);
                                float _3411 = _3410 * _3410;
                                float _3414 = ((1.0 - _3411) * dot(vec3(_3397, _3398, _3399), vec3(_771, _774, _777))) + _3411;
                                float _3417 = _3408 * _3408;
                                float _3421 = (fma(_2523, _3299.z, fma(_2522, _3299.y, _3299.x * _2521)) + _3299.w) / _3362;
                                float _3422 = (fma(_2523, _3315.z, fma(_2522, _3315.y, _3315.x * _2521)) + _3315.w) / _3362;
                                float _3426 = 1.0 - dot(vec2(_3421, _3422), vec2(_3421, _3422));
                                float _4557 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3428 = _3427 * (((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3404) / ((_3417 * 0.699999988079071044921875) + 1.0));
                                float _3440 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                                float _3441 = 1.0 - _831;
                                float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                                float _3449 = _3448 * _3448;
                                float _3450 = _3449 * _3449;
                                float _3451 = _3397 - _2868;
                                float _3452 = _3398 - _2869;
                                float _3453 = _3399 - _2870;
                                float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                                float _3461 = dot(vec3(_771, _774, _777), vec3((-0.0) - _2868, (-0.0) - _2869, (-0.0) - _2870));
                                float _4568 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3465 = dot(vec3(_771, _774, _777), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                                float _4579 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                                float _3473 = _3410 * _3449;
                                float _3474 = _3473 * _3473;
                                float _3480 = ((1.0 - _3474) * dot(vec3(_771, _774, _777), vec3(_3397, _3398, _3399))) + _3474;
                                float _4590 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3482 = 1.0 - _3449;
                                float _3492 = (0.5 / (((_3481 * ((_3464 * _3482) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3449) * _3464))) * _3481;
                                float _4601 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3502 = (_3427 * _3404) * (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3472 * _3472) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3428 * _3272.y;
                                frontier_phi_83_pred_1 = _3428 * _3272.x;
                                frontier_phi_83_pred_2 = _3502 * _3284.z;
                                frontier_phi_83_pred_3 = _3502 * _3284.y;
                                frontier_phi_83_pred_4 = _3502 * _3284.x;
                                frontier_phi_83_pred_5 = _3428 * _3272.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3510 = frontier_phi_83_pred;
                            _3509 = frontier_phi_83_pred_1;
                            _3508 = frontier_phi_83_pred_2;
                            _3507 = frontier_phi_83_pred_3;
                            _3506 = frontier_phi_83_pred_4;
                            _3511 = frontier_phi_83_pred_5;
                            _3214 = _3509 + _3227;
                            _3215 = _3510 + _3228;
                            _3216 = _3511 + _3229;
                            _3211 = _3506 + _3224;
                            _3212 = _3507 + _3225;
                            _3213 = _3508 + _3226;
                            if (_3231 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3231;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3216;
                        frontier_phi_77_pred_1 = _3215;
                        frontier_phi_77_pred_2 = _3214;
                        frontier_phi_77_pred_3 = _3213;
                        frontier_phi_77_pred_4 = _3212;
                        frontier_phi_77_pred_5 = _3211;
                    }
                    _2853 = frontier_phi_77_pred;
                    _2851 = frontier_phi_77_pred_1;
                    _2849 = frontier_phi_77_pred_2;
                    _2847 = frontier_phi_77_pred_3;
                    _2845 = frontier_phi_77_pred_4;
                    _2843 = frontier_phi_77_pred_5;
                    uint _3009 = _3008 + 1u;
                    if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3002 = _2843;
                        _3003 = _2845;
                        _3004 = _2847;
                        _3005 = _2849;
                        _3006 = _2851;
                        _3007 = _2853;
                        _3008 = _3009;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2847;
                frontier_phi_58_59_ladder_1 = _2853;
                frontier_phi_58_59_ladder_2 = _2851;
                frontier_phi_58_59_ladder_3 = _2849;
                frontier_phi_58_59_ladder_4 = _2845;
                frontier_phi_58_59_ladder_5 = _2843;
            }
            else
            {
                frontier_phi_58_59_ladder = _2717;
                frontier_phi_58_59_ladder_1 = _2723;
                frontier_phi_58_59_ladder_2 = _2721;
                frontier_phi_58_59_ladder_3 = _2719;
                frontier_phi_58_59_ladder_4 = _2715;
                frontier_phi_58_59_ladder_5 = _2713;
            }
            _2842 = frontier_phi_58_59_ladder_5;
            _2844 = frontier_phi_58_59_ladder_4;
            _2846 = frontier_phi_58_59_ladder;
            _2848 = frontier_phi_58_59_ladder_3;
            _2850 = frontier_phi_58_59_ladder_2;
            _2852 = frontier_phi_58_59_ladder_1;
        }
        float _2857 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2580 = (_2857 * _2848) + _2032;
        _2582 = (_2857 * _2850) + _2034;
        _2584 = (_2857 * _2852) + _2036;
        _2586 = ((_2842 * 0.039999999105930328369140625) * _2857) + _2365;
        _2588 = ((_2844 * 0.039999999105930328369140625) * _2857) + _2367;
        _2590 = ((_2846 * 0.039999999105930328369140625) * _2857) + _2369;
    }
    else
    {
        _2580 = _2032;
        _2582 = _2034;
        _2584 = _2036;
        _2586 = _2365;
        _2588 = _2367;
        _2590 = _2369;
    }
    uint _2596 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _2602 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2608 = (((((_2602 * cbMtdParam._m0[11u].x) * (((_511.x - _508) * _489) + _508)) * _540) * (((1.0 - _593) * cbMtdParam._m0[16u].y) + _593)) * _630) * cbInstanceData._m0[_2596].x;
    float _2614 = (((((_2602 * cbMtdParam._m0[11u].y) * (((_511.y - _509) * _489) + _509)) * _540) * (((1.0 - _595) * cbMtdParam._m0[16u].y) + _595)) * _630) * cbInstanceData._m0[_2596].y;
    float _2620 = (((((_2602 * cbMtdParam._m0[11u].z) * (((_511.z - _510) * _489) + _510)) * _540) * (((1.0 - _597) * cbMtdParam._m0[16u].y) + _597)) * _630) * cbInstanceData._m0[_2596].z;
    float _4617 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4628 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4639 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2637 = (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2580 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _815))) + ((_2586 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1651)) * cbPerFrame._m0[3u].x)) + _2608;
    float _2639 = (_2614 + ((_2588 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1651)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2582 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _815)));
    float _2641 = (_2620 + ((_2590 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1651)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2584 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _815)));
    float _2642 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2643 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2644 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2650 = cbMtdParam._m0[2u].x * _2608;
    float _2651 = cbMtdParam._m0[2u].y * _2614;
    float _2652 = cbMtdParam._m0[2u].z * _2620;
    float _4665 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2654 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    uint _2655 = _790 + 6u;
    float _2663 = _752 / cbSceneParam._m0[86u].x;
    float _2664 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2739 = _2738 / _675;
        float _2750 = _2739 * _725;
        float _2751 = _726 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2753 = _2739 * _727;
        float _2755 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2751;
        float _2763 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2959;
        if (abs((_2752 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2959 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2903 = 1.0 / cbSceneParam._m0[80u].x;
            float _2904 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2905 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            _2959 = ((abs(_2763 / _2752) * cbSceneParam._m0[80u].y) * ((((_2914 - _2915) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))))) * _2903)) - ((exp2(_2773 * _2914) - exp2(_2773 * _2915)) * _2903))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2961 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2970 = exp2((_2959 * (-1.44269502162933349609375)) * (1.0 - _2961.w));
        float _2971 = log2(_2970);
        float _2987 = log2(_2683);
        _2775 = (exp2(_2987 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].x)) * _2961.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2777 = (exp2(_2987 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].y)) * _2961.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2779 = (exp2(_2987 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].z)) * _2961.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2781 = _2970 * _2683;
    }
    else
    {
        _2775 = _2680;
        _2777 = _2681;
        _2779 = _2682;
        _2781 = _2683;
    }
    bool _2997;
    vec4 _2791;
    vec4 _2813;
    float _2815;
    float _2819;
    float _2820;
    float _2821;
    float _2824;
    float _2827;
    float _2830;
    float _2831;
    bool _2841;
    for (;;)
    {
        _2791 = cbMatDynParam._m0[0u];
        float _2793 = roundEven(_2791.y);
        bool _2794 = _2793 == 3.0;
        float _2795 = log2(_2781);
        float _2799 = exp2(_2795 * cbSceneParam._m0[78u].x);
        float _2800 = exp2(_2795 * cbSceneParam._m0[78u].y);
        float _2801 = exp2(_2795 * cbSceneParam._m0[78u].z);
        float _2802 = _2799 * _2642;
        float _2803 = _2800 * _2643;
        float _2804 = _2801 * _2644;
        float _2811 = _741 + (-0.5);
        _2813 = cbMtdParam._m0[1u];
        _2815 = _2813.y * _2811;
        float _2818 = (_2793 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2819 = _2818 * (_2794 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2775)));
        _2820 = _2818 * (_2794 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2777)));
        _2821 = _2818 * (_2794 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2779)));
        _2824 = ((_2650 * _2654) * _2799) * _2818;
        _2827 = ((_2651 * _2654) * _2800) * _2818;
        _2830 = ((_2652 * _2654) * _2801) * _2818;
        _2831 = _2811 * 0.999000012874603271484375;
        _2841 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2841)
        {
            if ((cbInstanceData._m0[_790 + 7u].x + _2831) < 0.5)
            {
                _2997 = true;
                break;
            }
        }
        uint _2938 = _791 + uint(_2791.w);
        if ((cbInstanceData._m0[_2938].w < 1.0) && ((cbInstanceData._m0[_2938].w + _2831) < 0.5))
        {
            _2997 = true;
            break;
        }
        if ((_2815 + 1.0) < _2813.x)
        {
            _2997 = true;
            break;
        }
        _2997 = false;
        break;
    }
    float _3202;
    if (_2997)
    {
        discard_state = true;
        _3202 = 0.0;
    }
    else
    {
        _3202 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2819;
    SV_Target.y = _2820;
    SV_Target.z = _2821;
    SV_Target.w = _3202;
    SV_Target_1.x = _2824;
    SV_Target_1.y = _2827;
    SV_Target_1.z = _2830;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


