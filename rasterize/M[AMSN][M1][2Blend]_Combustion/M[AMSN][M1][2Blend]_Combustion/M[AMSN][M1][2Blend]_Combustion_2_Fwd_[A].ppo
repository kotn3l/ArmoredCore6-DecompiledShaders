#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1248;
float _3684;
float _3685;
float _3686;
float _3687;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _316 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (_305.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3696 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _324 = (_317 * ((_285.x * cbMtdParam._m0[10u].x) - _265)) + _265;
    float _325 = (_317 * ((_285.y * cbMtdParam._m0[10u].y) - _266)) + _266;
    float _326 = (_317 * ((_285.z * cbMtdParam._m0[10u].z) - _267)) + _267;
    vec4 _339 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _342 = _317 * _339.x;
    vec4 _356 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _364 = (_356.x * 2.0) + (-1.0);
    float _366 = (_356.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3707 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _385 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _389 = _385.z;
    float _392 = (_385.x * 2.0) + (-1.0);
    float _393 = (_385.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3718 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    float _404 = ((((_356.z * cbMtdParam._m0[16u].w) - _389) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _389;
    float _427 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _428 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _451 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _457 = (_451.x * 2.0) + (-1.0);
    float _458 = (_451.y * 2.0) + (-1.0);
    float _462 = 1.0 - dot(vec2(_457, _458), vec2(_457, _458));
    float _3729 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)));
    float _467 = fma(_464, _223, fma(_458, _230, _457 * _216));
    float _470 = fma(_464, _224, fma(_458, _231, _457 * _217));
    float _473 = fma(_464, _225, fma(_458, _232, _457 * _218));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _488 = (((_470 * 0.5) * _477) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _490 = (-0.0) - (cbMtdParam._m0[14u].w * (((_467 * 0.5) * _477) + (-0.25)));
    float _492 = fract(_479);
    float _494 = fract(_479 + 0.5);
    float _505 = abs((_492 * 2.0) + (-1.0));
    vec4 _522 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_492 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _492) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    vec4 _527 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_494 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _494) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _547 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3740 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _556 = (((_548 * _548) * (3.0 - (_548 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _565 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _573 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3751 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _578 = (_574 * _574) * (3.0 - (_574 * 2.0));
    float _579 = _578 * cbMtdParam._m0[17u].y;
    float _580 = _578 * cbMtdParam._m0[17u].z;
    float _581 = sin(_565);
    float _582 = cos(_565);
    float _583 = TEXCOORD.z - _579;
    float _584 = TEXCOORD.w - _580;
    vec4 _603 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_579 + fma(_584, (-0.0) - _581, _583 * _582))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_584, _582, _583 * _581) + _580)) + cbTextureTilingScale._m0[1u].w));
    float _609 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _603.x;
    float _611 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _603.y;
    float _613 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _603.z;
    vec4 _636 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _427) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _428) + cbTextureTilingScale._m0[6u].w));
    float _645 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_636.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3762 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _653 = (_317 * (_364 - _392)) + _392;
    float _654 = (_317 * (_366 - _393)) + _393;
    float _655 = (_317 * (sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) - _399)) + _399;
    float _658 = fma(_655, _223, fma(_654, _230, _653 * _216));
    float _661 = fma(_655, _224, fma(_654, _231, _653 * _217));
    float _664 = fma(_655, _225, fma(_654, _232, _653 * _218));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3773 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _672 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3795 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3806 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3817 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _676 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    vec4 _756 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _758 = _756.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _929 = sqrt(((_742 * _742) + (_743 * _743)) + (_744 * _744));
        float _935 = (cbMatDynParam._m0[5u].x * _929) + cbMatDynParam._m0[5u].y;
        float _3828 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _940 = (cbMatDynParam._m0[5u].z * _929) + cbMatDynParam._m0[5u].w;
        float _3839 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) - _936)) + _936) < ((_758 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _769 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _770 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _788 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _791 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _794 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _807 = uint(roundEven(NORMAL.w)) * 13u;
    uint _808 = _807 + 9u;
    uint _809 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3850 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _821 = 1.0 - _676;
    float _822 = _818 * _821;
    float _823 = _819 * _821;
    float _824 = _820 * _821;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _676;
    float _830 = (_819 + (-0.039999999105930328369140625)) * _676;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _676;
    float _832 = _829 + 0.039999999105930328369140625;
    float _834 = _830 + 0.039999999105930328369140625;
    float _835 = _831 + 0.039999999105930328369140625;
    vec4 _844 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770));
    float _847 = _844.x * TEXCOORD_6.w;
    float _848 = dot(vec3(_669, _670, _671), vec3(_749, _750, _751));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _669) - _749;
    float _856 = (_851 * _670) - _750;
    float _857 = (_851 * _671) - _751;
    float _861 = abs(dot(vec3(_749, _750, _751), vec3(_669, _670, _671)));
    float _3883 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_672);
    float _875 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _881 = (1.0 - _875) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _882 = _875 * _863;
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _977 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _981 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _1005 = _910 + _669;
        float _1006 = _914 + _670;
        float _1007 = _918 + _671;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _973;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _977;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _981;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_669, _670, _671), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3931 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_669, _670, _671), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3964 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_669, _670, _671), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3997 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1291 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1295 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1299 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1322 = _910 + _669;
        float _1323 = _914 + _670;
        float _1324 = _918 + _671;
        float _1334 = fma(_1324, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1322)) - _1291;
        float _1335 = fma(_1324, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1322)) - _1295;
        float _1336 = fma(_1324, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1322)) - _1299;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1291 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1295 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[35u].z) + ((((((_1299 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1390 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1357.x + (-0.5));
        float _1392 = _1390 * (_1357.y + (-0.5));
        float _1393 = _1390 * (_1357.z + (-0.5));
        float _1400 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1364.x + (-0.5));
        float _1402 = _1400 * (_1364.y + (-0.5));
        float _1403 = _1400 * (_1364.z + (-0.5));
        float _1410 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1371.x + (-0.5));
        float _1412 = _1410 * (_1371.y + (-0.5));
        float _1413 = _1410 * (_1371.z + (-0.5));
        float _1420 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1378.x + (-0.5));
        float _1422 = _1420 * (_1378.y + (-0.5));
        float _1423 = _1420 * (_1378.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_669, _670, _671), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4060 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1454 + 1.0))) + _1459) * _1424;
        float _1469 = _1392 * 0.5;
        float _1470 = _1402 * 0.5;
        float _1471 = _1412 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_669, _670, _671), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4093 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1496 + 1.0))) + _1501) * _1425;
        float _1511 = _1393 * 0.5;
        float _1512 = _1403 * 0.5;
        float _1513 = _1413 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_669, _670, _671), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4126 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1538 + 1.0))) + _1543) * _1426;
        _1560 = _1393;
        _1561 = _1392;
        _1562 = _1391;
        _1563 = _1403;
        _1564 = _1402;
        _1565 = _1401;
        _1566 = _1413;
        _1567 = _1412;
        _1568 = _1411;
        _1569 = _1426;
        _1570 = _1425;
        _1571 = _1424;
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = _1248;
        _1568 = _1248;
        _1569 = _1248;
        _1570 = _1248;
        _1571 = _1248;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1260)) + _1260;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1261)) + _1261;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1262)) + _1262;
    float _1607 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1584));
    float _1628 = _855 * 0.5;
    float _1629 = _856 * 0.5;
    float _1630 = _857 * 0.5;
    float _1631 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1634 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1637 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1671;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1644 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1648 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1652 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1659 = dot(vec4(cbModelParam._m0[39u]), vec4(_1628, _1629, _1630, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1682;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1673 = dot(vec4(cbModelParam._m0[40u]), vec4(_1628, _1629, _1630, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1686 = (_1682 * cbModelParam._m0[1u].x) + (_1671 * (1.0 - cbModelParam._m0[1u].x));
    float _1696 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1696 : min(cbModelParam._m0[25u].z, _1696));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1758 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1761 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1789 = frontier_phi_17_15_ladder;
        }
        float _1992;
        if (_1758 > 0.0)
        {
            _1992 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1992 = frontier_phi_26_22_ladder;
        }
        float _2246;
        if (_1761 > 0.0)
        {
            _2246 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2246 = frontier_phi_38_33_ladder;
        }
        float _2248 = isnan(_1992) ? _1789 : (isnan(_1789) ? _1992 : min(_1789, _1992));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1755) + _1744;
        float _2254 = (_2249 * _1758) + _1748;
        float _2255 = (_2249 * _1761) + _1752;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1697);
            frontier_phi_16_38_ladder = _2383.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2383.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2383.x * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_16_38_ladder_2;
        _1779 = frontier_phi_16_38_ladder_1;
        _1781 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1697);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1854 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1857 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _1997;
        if (_1851 > 0.0)
        {
            _1997 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1997 = frontier_phi_28_24_ladder;
        }
        float _2273;
        if (_1854 > 0.0)
        {
            _2273 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2273 = frontier_phi_40_35_ladder;
        }
        float _2486;
        if (_1857 > 0.0)
        {
            _2486 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2486 = frontier_phi_49_46_ladder;
        }
        float _2488 = isnan(_2273) ? _1997 : (isnan(_1997) ? _2273 : min(_1997, _2273));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1851) + _1840;
        float _2494 = (_2489 * _1854) + _1844;
        float _2495 = (_2489 * _1857) + _1848;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_25_49_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_25_49_ladder_2;
        _1878 = frontier_phi_25_49_ladder_1;
        _1880 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1786);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1893 = (((_881 * _832) + _882) * _847) * ((cbModelParam._m0[1u].w * (_1876 - _1777)) + _1777);
    float _1895 = (((_881 * _834) + _882) * _847) * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1897 = (((_881 * _835) + _882) * _847) * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_807 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _847 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1951 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1955 = _1918 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_669, _670, _671));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_669, _670, _671));
    float _4262 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4273 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1935].x * _1941) * _1976) + ((cbLight._m0[_1945].x * _1951) * _1974);
    float _1984 = ((_1941 * cbLight._m0[_1935].y) * _1976) + ((_1951 * cbLight._m0[_1945].y) * _1974);
    float _1985 = ((_1941 * cbLight._m0[_1935].z) * _1976) + ((_1951 * cbLight._m0[_1945].z) * _1974);
    uvec4 _1989 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1991 = _1989.x == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1991)
    {
        _2002 = _1983;
        _2004 = _1984;
        _2006 = _1985;
    }
    else
    {
        uint _2010 = _1918 + 6u;
        float _2026 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _4284 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2029 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2002 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1983;
        _2004 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1984;
        _2006 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1985;
    }
    bool _2009 = _1989.y == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2009)
    {
        _2047 = _2002;
        _2049 = _2004;
        _2051 = _2006;
    }
    else
    {
        uint _2217 = _1918 + 7u;
        float _2233 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4300 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2236 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2047 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2002;
        _2049 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2004;
        _2051 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2006;
    }
    uint _2054 = _1918 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _672) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1918].x + _749;
    float _2070 = cbLight._m0[_1918].y + _750;
    float _2071 = cbLight._m0[_1918].z + _751;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1918].xyz));
    float _4316 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2083 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2084 = dot(vec3(_669, _670, _671), vec3(_2076, _2077, _2078));
    float _4338 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2076, _2077, _2078));
    float _4349 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2105 = 0.959999978542327880859375 - _829;
    float _2107 = 0.959999978542327880859375 - _830;
    float _2108 = 0.959999978542327880859375 - _831;
    float _2115 = 1.0 - _2068;
    float _2126 = (0.5 / (((_2083 * ((_2082 * _2115) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2115) + _2068) * _2082))) * _2082;
    float _4360 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2139 = _1918 + 9u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _672) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1955].x + _749;
    float _2153 = cbLight._m0[_1955].y + _750;
    float _2154 = cbLight._m0[_1955].z + _751;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1955].xyz));
    float _4371 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2166 = dot(vec3(_669, _670, _671), vec3(_2159, _2160, _2161));
    float _4382 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2159, _2160, _2161));
    float _4393 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2151 * _2151;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
    float _2192 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2083 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2192) + _2151) * _2165))) * _2165;
    float _4404 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    float _2214 = (((((_2185 * _2105) + _832) * cbLight._m0[_2139].x) * _2204) * _1941) + (((((_2104 * _2105) + _832) * cbLight._m0[_2054].x) * _2128) * _1951);
    float _2215 = (((((_2185 * _2107) + _834) * cbLight._m0[_2139].y) * _2204) * _1941) + (((((_2104 * _2107) + _834) * cbLight._m0[_2054].y) * _2128) * _1951);
    float _2216 = (((((_2185 * _2108) + _835) * cbLight._m0[_2139].z) * _2204) * _1941) + (((((_2104 * _2108) + _835) * cbLight._m0[_2054].z) * _2128) * _1951);
    float _2278;
    float _2280;
    float _2282;
    if (_1991)
    {
        _2278 = _2214;
        _2280 = _2215;
        _2282 = _2216;
    }
    else
    {
        uint _2284 = _1918 + 2u;
        uint _2288 = _1918 + 10u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _672) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _749;
        float _2305 = cbLight._m0[_2284].y + _750;
        float _2306 = cbLight._m0[_2284].z + _751;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2284].xyz));
        float _4415 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2318 = dot(vec3(_669, _670, _671), vec3(_2311, _2312, _2313));
        float _4426 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4437 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2344 = 1.0 - _2303;
        float _2354 = (0.5 / (((_2083 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2344) + _2303) * _2317))) * _2317;
        float _4448 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2356 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2357 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2278 = (((((_2337 * _2105) + _832) * cbLight._m0[_2288].x) * _2356) * _2357) + _2214;
        _2280 = (((((_2337 * _2107) + _834) * cbLight._m0[_2288].y) * _2356) * _2357) + _2215;
        _2282 = (((((_2337 * _2108) + _835) * cbLight._m0[_2288].z) * _2356) * _2357) + _2216;
    }
    float _2392;
    float _2394;
    float _2396;
    if (_2009)
    {
        _2392 = _2278;
        _2394 = _2280;
        _2396 = _2282;
    }
    else
    {
        uint _2403 = _1918 + 3u;
        uint _2407 = _1918 + 11u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _672) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _749;
        float _2424 = cbLight._m0[_2403].y + _750;
        float _2425 = cbLight._m0[_2403].z + _751;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2403].xyz));
        float _4464 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2437 = dot(vec3(_669, _670, _671), vec3(_2430, _2431, _2432));
        float _4475 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4486 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2083 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2463) + _2422) * _2436))) * _2436;
        float _4497 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2392 = (((((_2456 * _2105) + _832) * cbLight._m0[_2407].x) * _2475) * _2476) + _2278;
        _2394 = (((((_2456 * _2107) + _834) * cbLight._m0[_2407].y) * _2475) * _2476) + _2280;
        _2396 = (((((_2456 * _2108) + _835) * cbLight._m0[_2407].z) * _2475) * _2476) + _2282;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1916.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _770) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _769) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
        }
        else
        {
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2921)
                {
                    frontier_phi_66_pred = _2905;
                    frontier_phi_66_pred_1 = _2910;
                    frontier_phi_66_pred_2 = _2909;
                    frontier_phi_66_pred_3 = _2908;
                    frontier_phi_66_pred_4 = _2907;
                    frontier_phi_66_pred_5 = _2906;
                }
                else
                {
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    uint _3056;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2920;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3060 = uint(findLSB(_3056)) + (_2911 << 5u);
                        uint _3057 = (_3056 + 4294967295u) & _3056;
                        uint _3062 = _3060 * 48u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3082 = (_3060 * 48u) + 4u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3101 = (_3060 * 48u) + 8u;
                        vec3 _3112 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x));
                        float _3116 = _3076.x - _2552;
                        float _3117 = _3076.y - _2553;
                        float _3118 = _3076.z - _2554;
                        float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                        float _3122 = inversesqrt(_3119);
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3126 = dot(vec3(_788, _791, _794), vec3(_3123, _3124, _3125));
                        float _3131 = 1.0 - (_3119 * _3076.w);
                        float _4523 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3133 = sqrt(_3119) * _3095.w;
                        float _3136 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3126) + _3137;
                        float _3143 = _3133 * _3133;
                        float _3147 = ((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3132) / ((_3143 * 0.699999988079071044921875) + 1.0);
                        float _3151 = (-0.0) - _2552;
                        float _3152 = (-0.0) - _2553;
                        float _3153 = (-0.0) - _2554;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3168 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _863;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_788, _791, _794), vec3(_3158, _3159, _3160));
                        float _4539 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3193 = dot(vec3(_788, _791, _794), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4550 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3136 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3126) + _3202;
                        float _4561 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4572 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3228 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3200 * _3200) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125))) * _3132;
                        _2980 = (_3147 * _3095.x) + _3053;
                        _2981 = (_3147 * _3095.y) + _3054;
                        _2982 = (_3147 * _3095.z) + _3055;
                        _2977 = (_3228 * _3112.x) + _3050;
                        _2978 = (_3228 * _3112.y) + _3051;
                        _2979 = (_3228 * _3112.z) + _3052;
                        if (_3057 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _3057;
                        }
                    }
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2982;
                    frontier_phi_66_pred_2 = _2981;
                    frontier_phi_66_pred_3 = _2980;
                    frontier_phi_66_pred_4 = _2979;
                    frontier_phi_66_pred_5 = _2978;
                }
                _2745 = frontier_phi_66_pred;
                _2755 = frontier_phi_66_pred_1;
                _2753 = frontier_phi_66_pred_2;
                _2751 = frontier_phi_66_pred_3;
                _2749 = frontier_phi_66_pred_4;
                _2747 = frontier_phi_66_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2745;
                    _2906 = _2747;
                    _2907 = _2749;
                    _2908 = _2751;
                    _2909 = _2753;
                    _2910 = _2755;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
        }
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.z;
        uint _2761 = (_2759 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2761) & _2598) == 0u)
        {
            _2873 = _2744;
            _2875 = _2746;
            _2877 = _2748;
            _2879 = _2750;
            _2881 = _2752;
            _2883 = _2754;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2899 = _2898 * _2552;
            float _2900 = _2898 * _2553;
            float _2901 = _2898 * _2554;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2761 < ((_2759 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3033 = _2744;
                float _3034 = _2746;
                float _3035 = _2748;
                float _3036 = _2750;
                float _3037 = _2752;
                float _3038 = _2754;
                uint _3039 = _2761;
                uint _3048;
                bool _3049;
                for (;;)
                {
                    _3048 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                    _3049 = _3048 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3049)
                    {
                        frontier_phi_77_pred = _3038;
                        frontier_phi_77_pred_1 = _3037;
                        frontier_phi_77_pred_2 = _3036;
                        frontier_phi_77_pred_3 = _3035;
                        frontier_phi_77_pred_4 = _3034;
                        frontier_phi_77_pred_5 = _3033;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        uint _3261 = _3048;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3330;
                        vec4 _3346;
                        float _3393;
                        bool _3394;
                        for (;;)
                        {
                            uint _3272 = ((_3039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3317 = (_3272 * 40u) + 16u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3333 = (_3272 * 40u) + 20u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3349 = (_3272 * 40u) + 24u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3368 = (_3272 * 40u) + 28u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3393 = fma(_2554, _3381.z, fma(_2553, _3381.y, _3381.x * _2552)) + _3381.w;
                            _3394 = !((fma(_2554, _3362.z, fma(_2553, _3362.y, _3362.x * _2552)) + _3362.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3394)
                            {
                                float _3421 = _3287.x - _2552;
                                float _3422 = _3287.y - _2553;
                                float _3423 = _3287.z - _2554;
                                float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                                float _3427 = inversesqrt(_3424);
                                float _3428 = _3427 * _3421;
                                float _3429 = _3427 * _3422;
                                float _3430 = _3427 * _3423;
                                float _3434 = 1.0 - (_3424 / (_3288 * _3288));
                                float _4583 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3439 = sqrt(_3424) * _3303.w;
                                float _3441 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                                float _3442 = _3441 * _3441;
                                float _3445 = ((1.0 - _3442) * dot(vec3(_3428, _3429, _3430), vec3(_788, _791, _794))) + _3442;
                                float _3448 = _3439 * _3439;
                                float _3452 = (fma(_2554, _3330.z, fma(_2553, _3330.y, _3330.x * _2552)) + _3330.w) / _3393;
                                float _3453 = (fma(_2554, _3346.z, fma(_2553, _3346.y, _3346.x * _2552)) + _3346.w) / _3393;
                                float _3457 = 1.0 - dot(vec2(_3452, _3453), vec2(_3452, _3453));
                                float _4599 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3459 = _3458 * (((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3435) / ((_3448 * 0.699999988079071044921875) + 1.0));
                                float _3471 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                                float _3472 = 1.0 - _863;
                                float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                                float _3480 = _3479 * _3479;
                                float _3481 = _3480 * _3480;
                                float _3482 = _3428 - _2899;
                                float _3483 = _3429 - _2900;
                                float _3484 = _3430 - _2901;
                                float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                                float _3492 = dot(vec3(_788, _791, _794), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4610 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3496 = dot(vec3(_788, _791, _794), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                                float _4621 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                                float _3504 = _3441 * _3480;
                                float _3505 = _3504 * _3504;
                                float _3511 = ((1.0 - _3505) * dot(vec3(_788, _791, _794), vec3(_3428, _3429, _3430))) + _3505;
                                float _4632 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3513 = 1.0 - _3480;
                                float _3523 = (0.5 / (((_3512 * ((_3495 * _3513) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3480) * _3495))) * _3512;
                                float _4643 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3533 = (_3458 * _3435) * (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3503 * _3503) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3459 * _3303.y;
                                frontier_phi_83_pred_1 = _3459 * _3303.x;
                                frontier_phi_83_pred_2 = _3533 * _3315.z;
                                frontier_phi_83_pred_3 = _3533 * _3315.y;
                                frontier_phi_83_pred_4 = _3533 * _3315.x;
                                frontier_phi_83_pred_5 = _3459 * _3303.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_83_pred;
                            _3540 = frontier_phi_83_pred_1;
                            _3539 = frontier_phi_83_pred_2;
                            _3538 = frontier_phi_83_pred_3;
                            _3537 = frontier_phi_83_pred_4;
                            _3542 = frontier_phi_83_pred_5;
                            _3245 = _3540 + _3258;
                            _3246 = _3541 + _3259;
                            _3247 = _3542 + _3260;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3247;
                        frontier_phi_77_pred_1 = _3246;
                        frontier_phi_77_pred_2 = _3245;
                        frontier_phi_77_pred_3 = _3244;
                        frontier_phi_77_pred_4 = _3243;
                        frontier_phi_77_pred_5 = _3242;
                    }
                    _2884 = frontier_phi_77_pred;
                    _2882 = frontier_phi_77_pred_1;
                    _2880 = frontier_phi_77_pred_2;
                    _2878 = frontier_phi_77_pred_3;
                    _2876 = frontier_phi_77_pred_4;
                    _2874 = frontier_phi_77_pred_5;
                    uint _3040 = _3039 + 1u;
                    if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3033 = _2874;
                        _3034 = _2876;
                        _3035 = _2878;
                        _3036 = _2880;
                        _3037 = _2882;
                        _3038 = _2884;
                        _3039 = _3040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2878;
                frontier_phi_58_59_ladder_1 = _2884;
                frontier_phi_58_59_ladder_2 = _2882;
                frontier_phi_58_59_ladder_3 = _2880;
                frontier_phi_58_59_ladder_4 = _2876;
                frontier_phi_58_59_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_58_59_ladder = _2748;
                frontier_phi_58_59_ladder_1 = _2754;
                frontier_phi_58_59_ladder_2 = _2752;
                frontier_phi_58_59_ladder_3 = _2750;
                frontier_phi_58_59_ladder_4 = _2746;
                frontier_phi_58_59_ladder_5 = _2744;
            }
            _2873 = frontier_phi_58_59_ladder_5;
            _2875 = frontier_phi_58_59_ladder_4;
            _2877 = frontier_phi_58_59_ladder;
            _2879 = frontier_phi_58_59_ladder_3;
            _2881 = frontier_phi_58_59_ladder_2;
            _2883 = frontier_phi_58_59_ladder_1;
        }
        float _2888 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2611 = (_2888 * _2879) + _2047;
        _2613 = (_2888 * _2881) + _2049;
        _2615 = (_2888 * _2883) + _2051;
        _2617 = ((_2873 * _832) * _2888) + _2392;
        _2619 = ((_2875 * _834) * _2888) + _2394;
        _2621 = ((_2877 * _835) * _2888) + _2396;
    }
    else
    {
        _2611 = _2047;
        _2613 = _2049;
        _2615 = _2051;
        _2617 = _2392;
        _2619 = _2394;
        _2621 = _2396;
    }
    uint _2627 = _808 + uint(cbMatDynParam._m0[0u].w);
    float _2633 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2639 = (((((_2633 * cbMtdParam._m0[11u].x) * (((_527.x - _524) * _505) + _524)) * _556) * (((1.0 - _609) * cbMtdParam._m0[16u].y) + _609)) * _646) * cbInstanceData._m0[_2627].x;
    float _2645 = (((((_2633 * cbMtdParam._m0[11u].y) * (((_527.y - _525) * _505) + _525)) * _556) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _646) * cbInstanceData._m0[_2627].y;
    float _2651 = (((((_2633 * cbMtdParam._m0[11u].z) * (((_527.z - _526) * _505) + _526)) * _556) * (((1.0 - _613) * cbMtdParam._m0[16u].y) + _613)) * _646) * cbInstanceData._m0[_2627].z;
    float _4659 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4670 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4681 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2668 = (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2611 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _847))) + ((_2617 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + _2639;
    float _2670 = (_2645 + ((_2619 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2613 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _847)));
    float _2672 = (_2651 + ((_2621 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1686)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2615 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _847)));
    float _2673 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2674 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2675 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2681 = cbMtdParam._m0[2u].x * _2639;
    float _2682 = cbMtdParam._m0[2u].y * _2645;
    float _2683 = cbMtdParam._m0[2u].z * _2651;
    float _4707 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2685 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    uint _2686 = _807 + 6u;
    float _2694 = _769 / cbSceneParam._m0[86u].x;
    float _2695 = _770 / cbSceneParam._m0[86u].y;
    vec4 _2709 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2711 = _2709.x;
    float _2712 = _2709.y;
    float _2713 = _2709.z;
    float _2714 = _2709.w;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2769 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2770 = _2769 / _692;
        float _2781 = _2770 * _742;
        float _2782 = _743 * _2770;
        float _2783 = (-0.0) - _2782;
        float _2784 = _2770 * _744;
        float _2786 = (cbSceneParam._m0[77u].w * _2783) / _2769;
        float _2787 = _2786 + cbSceneParam._m0[79u].w;
        float _2788 = cbSceneParam._m0[79u].w - _2782;
        float _2794 = sqrt(((_2781 * _2781) + (_2782 * _2782)) + (_2784 * _2784));
        float _2797 = (1.0 - (cbSceneParam._m0[77u].w / _2769)) * _2794;
        float _2802 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2804 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2783 - _2786) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2787 > 0.0) ? exp2(_2802 * _2787) : (2.0 - exp2(_2804 * _2787))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2797;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : max(_2787, _2788));
            float _2936 = isnan(_2788) ? _2787 : (isnan(_2787) ? _2788 : min(_2787, _2788));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _2990 = ((abs(_2794 / _2783) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2802 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2802 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2804 * _2945) - exp2(_2804 * _2946)) * _2934))) + (_2797 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2714);
        _2806 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2711;
        _2808 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2712;
        _2810 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2713;
        _2812 = _3001 * _2714;
    }
    else
    {
        _2806 = _2711;
        _2808 = _2712;
        _2810 = _2713;
        _2812 = _2714;
    }
    bool _3028;
    vec4 _2822;
    vec4 _2844;
    float _2846;
    float _2850;
    float _2851;
    float _2852;
    float _2855;
    float _2858;
    float _2861;
    float _2862;
    bool _2872;
    for (;;)
    {
        _2822 = cbMatDynParam._m0[0u];
        float _2824 = roundEven(_2822.y);
        bool _2825 = _2824 == 3.0;
        float _2826 = log2(_2812);
        float _2830 = exp2(_2826 * cbSceneParam._m0[78u].x);
        float _2831 = exp2(_2826 * cbSceneParam._m0[78u].y);
        float _2832 = exp2(_2826 * cbSceneParam._m0[78u].z);
        float _2833 = _2830 * _2673;
        float _2834 = _2831 * _2674;
        float _2835 = _2832 * _2675;
        float _2842 = _758 + (-0.5);
        _2844 = cbMtdParam._m0[1u];
        _2846 = _2844.y * _2842;
        float _2849 = (_2824 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2850 = _2849 * (_2825 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2806)));
        _2851 = _2849 * (_2825 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2808)));
        _2852 = _2849 * (_2825 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2810)));
        _2855 = ((_2681 * _2685) * _2830) * _2849;
        _2858 = ((_2682 * _2685) * _2831) * _2849;
        _2861 = ((_2683 * _2685) * _2832) * _2849;
        _2862 = _2842 * 0.999000012874603271484375;
        _2872 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2872)
        {
            if ((cbInstanceData._m0[_807 + 7u].x + _2862) < 0.5)
            {
                _3028 = true;
                break;
            }
        }
        uint _2969 = _808 + uint(_2822.w);
        if ((cbInstanceData._m0[_2969].w < 1.0) && ((cbInstanceData._m0[_2969].w + _2862) < 0.5))
        {
            _3028 = true;
            break;
        }
        if ((_2846 + 1.0) < _2844.x)
        {
            _3028 = true;
            break;
        }
        _3028 = false;
        break;
    }
    float _3233;
    if (_3028)
    {
        discard_state = true;
        _3233 = 0.0;
    }
    else
    {
        _3233 = cbInstanceData._m0[_2686].w;
    }
    SV_Target.x = _2850;
    SV_Target.y = _2851;
    SV_Target.z = _2852;
    SV_Target.w = _3233;
    SV_Target_1.x = _2855;
    SV_Target_1.y = _2858;
    SV_Target_1.z = _2861;
    SV_Target_1.w = cbInstanceData._m0[_2686].w;
    discard_exit();
}


