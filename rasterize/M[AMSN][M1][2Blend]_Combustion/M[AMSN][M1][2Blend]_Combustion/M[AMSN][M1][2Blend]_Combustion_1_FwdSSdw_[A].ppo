#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1250;
float _3711;
float _3712;
float _3713;
float _3714;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    vec4 _261 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _261.x * cbMtdParam._m0[9u].x;
    float _268 = _261.y * cbMtdParam._m0[9u].y;
    float _269 = _261.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _318 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3723 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _326 = (_319 * ((_287.x * cbMtdParam._m0[10u].x) - _267)) + _267;
    float _327 = (_319 * ((_287.y * cbMtdParam._m0[10u].y) - _268)) + _268;
    float _328 = (_319 * ((_287.z * cbMtdParam._m0[10u].z) - _269)) + _269;
    vec4 _340 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _342 = _340.x;
    float _344 = _342 - (_342 * _319);
    vec4 _358 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _366 = (_358.x * 2.0) + (-1.0);
    float _368 = (_358.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_366, _368), vec2(_366, _368));
    float _3734 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    vec4 _387 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _391 = _387.z;
    float _394 = (_387.x * 2.0) + (-1.0);
    float _395 = (_387.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3745 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    float _406 = ((((_358.z * cbMtdParam._m0[16u].w) - _391) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _391;
    float _429 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _430 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _453 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _459 = (_453.x * 2.0) + (-1.0);
    float _460 = (_453.y * 2.0) + (-1.0);
    float _464 = 1.0 - dot(vec2(_459, _460), vec2(_459, _460));
    float _3756 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = sqrt(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)));
    float _469 = fma(_466, _225, fma(_460, _232, _459 * _218));
    float _472 = fma(_466, _226, fma(_460, _233, _459 * _219));
    float _475 = fma(_466, _227, fma(_460, _234, _459 * _220));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _490 = (((_472 * 0.5) * _479) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _492 = (-0.0) - (cbMtdParam._m0[14u].w * (((_469 * 0.5) * _479) + (-0.25)));
    float _494 = fract(_481);
    float _496 = fract(_481 + 0.5);
    float _507 = abs((_494 * 2.0) + (-1.0));
    vec4 _524 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_494 * _492) + _429) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_490 * _494) + _430) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    vec4 _529 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_496 * _492) + _429) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_490 * _496) + _430) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _549 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3767 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _558 = (((_550 * _550) * (3.0 - (_550 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _567 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _575 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3778 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _580 = (_576 * _576) * (3.0 - (_576 * 2.0));
    float _581 = _580 * cbMtdParam._m0[17u].y;
    float _582 = _580 * cbMtdParam._m0[17u].z;
    float _583 = sin(_567);
    float _584 = cos(_567);
    float _585 = TEXCOORD.z - _581;
    float _586 = TEXCOORD.w - _582;
    vec4 _605 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_581 + fma(_586, (-0.0) - _583, _585 * _584))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_586, _584, _585 * _583) + _582)) + cbTextureTilingScale._m0[1u].w));
    float _611 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _605.x;
    float _613 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _605.y;
    float _615 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _605.z;
    vec4 _638 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _429) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _430) + cbTextureTilingScale._m0[6u].w));
    float _647 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_638.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3789 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _655 = (_319 * (_366 - _394)) + _394;
    float _656 = (_319 * (_368 - _395)) + _395;
    float _657 = (_319 * (sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) - _401)) + _401;
    float _660 = fma(_657, _225, fma(_656, _232, _655 * _218));
    float _663 = fma(_657, _226, fma(_656, _233, _655 * _219));
    float _666 = fma(_657, _227, fma(_656, _234, _655 * _220));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3800 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _674 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3822 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3833 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3844 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _678 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    vec4 _758 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _760 = _758.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _931 = sqrt(((_744 * _744) + (_745 * _745)) + (_746 * _746));
        float _937 = (cbMatDynParam._m0[5u].x * _931) + cbMatDynParam._m0[5u].y;
        float _3855 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _942 = (cbMatDynParam._m0[5u].z * _931) + cbMatDynParam._m0[5u].w;
        float _3866 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) - _938)) + _938) < ((_760 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _771 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _772 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _790 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _793 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _796 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _809 = uint(roundEven(NORMAL.w)) * 13u;
    uint _810 = _809 + 9u;
    uint _811 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3877 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _823 = 1.0 - _678;
    float _824 = _820 * _823;
    float _825 = _821 * _823;
    float _826 = _822 * _823;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _678;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _678;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _678;
    float _834 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _771, cbSceneParam._m0[86u].y * _772));
    float _849 = _846.x * TEXCOORD_6.w;
    float _850 = dot(vec3(_671, _672, _673), vec3(_751, _752, _753));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _671) - _751;
    float _858 = (_853 * _672) - _752;
    float _859 = (_853 * _673) - _753;
    float _863 = abs(dot(vec3(_751, _752, _753), vec3(_671, _672, _673)));
    float _3910 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_674);
    float _877 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _883 = (1.0 - _877) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _884 = _877 * _865;
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1249;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_920, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912));
        float _979 = fma(_920, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912));
        float _983 = fma(_920, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912));
        float _1007 = _912 + _671;
        float _1008 = _916 + _672;
        float _1009 = _920 + _673;
        float _1019 = fma(_1009, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007)) - _975;
        float _1020 = fma(_1009, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007)) - _979;
        float _1021 = fma(_1009, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007)) - _983;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1077 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1043.x + (-0.5));
        float _1079 = _1077 * (_1043.y + (-0.5));
        float _1080 = _1077 * (_1043.z + (-0.5));
        float _1087 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1050.x + (-0.5));
        float _1089 = _1087 * (_1050.y + (-0.5));
        float _1090 = _1087 * (_1050.z + (-0.5));
        float _1097 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1057.x + (-0.5));
        float _1099 = _1097 * (_1057.y + (-0.5));
        float _1100 = _1097 * (_1057.z + (-0.5));
        float _1107 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1064.x + (-0.5));
        float _1109 = _1107 * (_1064.y + (-0.5));
        float _1110 = _1107 * (_1064.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1131 = (dot(vec3(_671, _672, _673), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1141 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3958 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1143 + 1.0))) + _1148) * _1111;
        float _1158 = _1079 * 0.5;
        float _1159 = _1089 * 0.5;
        float _1160 = _1099 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_671, _672, _673), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3991 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1185 + 1.0))) + _1190) * _1112;
        float _1200 = _1080 * 0.5;
        float _1201 = _1090 * 0.5;
        float _1202 = _1100 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_671, _672, _673), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4024 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1227 + 1.0))) + _1232) * _1113;
        _1249 = _1080;
        _1251 = _1079;
        _1252 = _1078;
        _1253 = _1090;
        _1254 = _1089;
        _1255 = _1088;
        _1256 = _1100;
        _1257 = _1099;
        _1258 = _1098;
        _1259 = _1113;
        _1260 = _1112;
        _1261 = _1111;
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _1250;
        _1251 = _1250;
        _1252 = _1250;
        _1253 = _1250;
        _1254 = _1250;
        _1255 = _1250;
        _1256 = _1250;
        _1257 = _1250;
        _1258 = _1250;
        _1259 = _1250;
        _1260 = _1250;
        _1261 = _1250;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_920, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912));
        float _1297 = fma(_920, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912));
        float _1301 = fma(_920, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912));
        float _1324 = _912 + _671;
        float _1325 = _916 + _672;
        float _1326 = _920 + _673;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_671, _672, _673), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4087 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_671, _672, _673), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4120 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_671, _672, _673), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4153 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1250;
        _1563 = _1250;
        _1564 = _1250;
        _1565 = _1250;
        _1566 = _1250;
        _1567 = _1250;
        _1568 = _1250;
        _1569 = _1250;
        _1570 = _1250;
        _1571 = _1250;
        _1572 = _1250;
        _1573 = _1250;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1262)) + _1262;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1263)) + _1263;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1264)) + _1264;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _857 * 0.5;
    float _1631 = _858 * 0.5;
    float _1632 = _859 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1249, _1253, _1256, _1259));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_920, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_920, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_920, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1760 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1763 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1791 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1760 > 0.0)
        {
            _2016 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1763 > 0.0)
        {
            _2273 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_2016) ? _1791 : (isnan(_1791) ? _2016 : min(_1791, _2016));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1757) + _1746;
        float _2281 = (_2276 * _1760) + _1750;
        float _2282 = (_2276 * _1763) + _1754;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_16_38_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_16_38_ladder_2;
        _1781 = frontier_phi_16_38_ladder_1;
        _1783 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1699);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_920, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_920, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_920, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1856 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1859 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _2021;
        if (_1853 > 0.0)
        {
            _2021 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1856 > 0.0)
        {
            _2300 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2513;
        if (_1859 > 0.0)
        {
            _2513 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2513 = frontier_phi_49_46_ladder;
        }
        float _2515 = isnan(_2300) ? _2021 : (isnan(_2021) ? _2300 : min(_2021, _2300));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1853) + _1842;
        float _2521 = (_2516 * _1856) + _1846;
        float _2522 = (_2516 * _1859) + _1850;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_25_49_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_25_49_ladder_2;
        _1880 = frontier_phi_25_49_ladder_1;
        _1882 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1788);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_883 * _834) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1897 = (((_883 * _836) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1899 = (((_883 * _837) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_771, _772));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_809 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _849 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1975 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1979 = _1938 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_671, _672, _673));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_671, _672, _673));
    float _4289 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4300 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1955].x * _1961) * _2000) + (((cbLight._m0[_1965].x * _1930) * _1975) * _1998);
    float _2008 = ((_1961 * cbLight._m0[_1955].y) * _2000) + (((cbLight._m0[_1965].y * _1931) * _1975) * _1998);
    float _2009 = ((_1961 * cbLight._m0[_1955].z) * _2000) + (((cbLight._m0[_1965].z * _1932) * _1975) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1938 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4311 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2053 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2244 = _1938 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4327 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2263 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2071 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2026;
        _2073 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2028;
        _2075 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2030;
    }
    uint _2078 = _1938 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _674) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1938].x + _751;
    float _2094 = cbLight._m0[_1938].y + _752;
    float _2095 = cbLight._m0[_1938].z + _753;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1938].xyz));
    float _4343 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _4354 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2107 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2108 = dot(vec3(_671, _672, _673), vec3(_2100, _2101, _2102));
    float _4365 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2100, _2101, _2102));
    float _4376 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _831;
    float _2131 = 0.959999978542327880859375 - _832;
    float _2132 = 0.959999978542327880859375 - _833;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4387 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2166 = _1938 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _674) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1979].x + _751;
    float _2180 = cbLight._m0[_1979].y + _752;
    float _2181 = cbLight._m0[_1979].z + _753;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1979].xyz));
    float _4398 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2193 = dot(vec3(_671, _672, _673), vec3(_2186, _2187, _2188));
    float _4409 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2186, _2187, _2188));
    float _4420 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2219 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2107 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2219) + _2178) * _2192))) * _2192;
    float _4431 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2241 = (((((_2212 * _2129) + _834) * cbLight._m0[_2166].x) * _2231) * _1961) + ((((cbLight._m0[_2078].x * _1930) * ((_2128 * _2129) + _834)) * _2152) * _1975);
    float _2242 = (((((_2212 * _2131) + _836) * cbLight._m0[_2166].y) * _2231) * _1961) + ((((cbLight._m0[_2078].y * _1931) * ((_2128 * _2131) + _836)) * _2152) * _1975);
    float _2243 = (((((_2212 * _2132) + _837) * cbLight._m0[_2166].z) * _2231) * _1961) + ((((cbLight._m0[_2078].z * _1932) * ((_2128 * _2132) + _837)) * _2152) * _1975);
    float _2305;
    float _2307;
    float _2309;
    if (_2015)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1938 + 2u;
        uint _2315 = _1938 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _674) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _751;
        float _2332 = cbLight._m0[_2311].y + _752;
        float _2333 = cbLight._m0[_2311].z + _753;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2311].xyz));
        float _4442 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2345 = dot(vec3(_671, _672, _673), vec3(_2338, _2339, _2340));
        float _4453 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4464 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_2107 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2371) + _2330) * _2344))) * _2344;
        float _4475 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2305 = (((((_2364 * _2129) + _834) * cbLight._m0[_2315].x) * _2383) * _2384) + _2241;
        _2307 = (((((_2364 * _2131) + _836) * cbLight._m0[_2315].y) * _2383) * _2384) + _2242;
        _2309 = (((((_2364 * _2132) + _837) * cbLight._m0[_2315].z) * _2383) * _2384) + _2243;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2033)
    {
        _2419 = _2305;
        _2421 = _2307;
        _2423 = _2309;
    }
    else
    {
        uint _2430 = _1938 + 3u;
        uint _2434 = _1938 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _674) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _751;
        float _2451 = cbLight._m0[_2430].y + _752;
        float _2452 = cbLight._m0[_2430].z + _753;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2430].xyz));
        float _4491 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2464 = dot(vec3(_671, _672, _673), vec3(_2457, _2458, _2459));
        float _4502 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4513 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2107 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2490) + _2449) * _2463))) * _2463;
        float _4524 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2419 = (((((_2483 * _2129) + _834) * cbLight._m0[_2434].x) * _2502) * _2503) + _2305;
        _2421 = (((((_2483 * _2131) + _836) * cbLight._m0[_2434].y) * _2502) * _2503) + _2307;
        _2423 = (((((_2483 * _2132) + _837) * cbLight._m0[_2434].z) * _2502) * _2503) + _2309;
    }
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_1936.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _772) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _771) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2948)
                {
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2947;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2938 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2579;
                        float _3144 = _3103.y - _2580;
                        float _3145 = _3103.z - _2581;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_790, _793, _796), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4550 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2579;
                        float _3179 = (-0.0) - _2580;
                        float _3180 = (-0.0) - _2581;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _865;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_790, _793, _796), vec3(_3185, _3186, _3187));
                        float _4566 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3220 = dot(vec3(_790, _793, _796), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4577 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4588 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4599 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3007 = (_3174 * _3122.x) + _3080;
                        _3008 = (_3174 * _3122.y) + _3081;
                        _3009 = (_3174 * _3122.z) + _3082;
                        _3004 = (_3255 * _3139.x) + _3077;
                        _3005 = (_3255 * _3139.y) + _3078;
                        _3006 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                _2772 = frontier_phi_66_pred;
                _2782 = frontier_phi_66_pred_1;
                _2780 = frontier_phi_66_pred_2;
                _2778 = frontier_phi_66_pred_3;
                _2776 = frontier_phi_66_pred_4;
                _2774 = frontier_phi_66_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2772;
                    _2933 = _2774;
                    _2934 = _2776;
                    _2935 = _2778;
                    _2936 = _2780;
                    _2937 = _2782;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2788) & _2625) == 0u)
        {
            _2900 = _2771;
            _2902 = _2773;
            _2904 = _2775;
            _2906 = _2777;
            _2908 = _2779;
            _2910 = _2781;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2926 = _2925 * _2579;
            float _2927 = _2925 * _2580;
            float _2928 = _2925 * _2581;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3060 = _2771;
                float _3061 = _2773;
                float _3062 = _2775;
                float _3063 = _2777;
                float _3064 = _2779;
                float _3065 = _2781;
                uint _3066 = _2788;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3076)
                    {
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        uint _3288 = _3075;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3373;
                        float _3420;
                        bool _3421;
                        for (;;)
                        {
                            uint _3299 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3360 = (_3299 * 40u) + 20u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3376 = (_3299 * 40u) + 24u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3395 = (_3299 * 40u) + 28u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3420 = fma(_2581, _3408.z, fma(_2580, _3408.y, _3408.x * _2579)) + _3408.w;
                            _3421 = !((fma(_2581, _3389.z, fma(_2580, _3389.y, _3389.x * _2579)) + _3389.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3421)
                            {
                                float _3448 = _3314.x - _2579;
                                float _3449 = _3314.y - _2580;
                                float _3450 = _3314.z - _2581;
                                float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                                float _3454 = inversesqrt(_3451);
                                float _3455 = _3454 * _3448;
                                float _3456 = _3454 * _3449;
                                float _3457 = _3454 * _3450;
                                float _3461 = 1.0 - (_3451 / (_3315 * _3315));
                                float _4610 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3466 = sqrt(_3451) * _3330.w;
                                float _3468 = 1.39999997615814208984375 / (_3466 + 1.39999997615814208984375);
                                float _3469 = _3468 * _3468;
                                float _3472 = ((1.0 - _3469) * dot(vec3(_3455, _3456, _3457), vec3(_790, _793, _796))) + _3469;
                                float _3475 = _3466 * _3466;
                                float _3479 = (fma(_2581, _3357.z, fma(_2580, _3357.y, _3357.x * _2579)) + _3357.w) / _3420;
                                float _3480 = (fma(_2581, _3373.z, fma(_2580, _3373.y, _3373.x * _2579)) + _3373.w) / _3420;
                                float _3484 = 1.0 - dot(vec2(_3479, _3480), vec2(_3479, _3480));
                                float _4626 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3486 = _3485 * (((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3462) / ((_3475 * 0.699999988079071044921875) + 1.0));
                                float _3498 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                                float _3499 = 1.0 - _865;
                                float _3506 = sqrt(1.0 - ((1.0 - (_3499 * _3499)) * (1.0 - (_3498 * _3498))));
                                float _3507 = _3506 * _3506;
                                float _3508 = _3507 * _3507;
                                float _3509 = _3455 - _2926;
                                float _3510 = _3456 - _2927;
                                float _3511 = _3457 - _2928;
                                float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                                float _3519 = dot(vec3(_790, _793, _796), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4637 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3523 = dot(vec3(_790, _793, _796), vec3(_3515 * _3509, _3515 * _3510, _3515 * _3511));
                                float _4648 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3530 = ((_3526 * _3526) * (_3508 + (-1.0))) + 1.0;
                                float _3531 = _3468 * _3507;
                                float _3532 = _3531 * _3531;
                                float _3538 = ((1.0 - _3532) * dot(vec3(_790, _793, _796), vec3(_3455, _3456, _3457))) + _3532;
                                float _4659 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3540 = 1.0 - _3507;
                                float _3550 = (0.5 / (((_3539 * ((_3522 * _3540) + _3507)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3507) * _3522))) * _3539;
                                float _4670 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3560 = (_3485 * _3462) * (((_3508 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3530 * _3530) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3486 * _3330.y;
                                frontier_phi_83_pred_1 = _3486 * _3330.x;
                                frontier_phi_83_pred_2 = _3560 * _3342.z;
                                frontier_phi_83_pred_3 = _3560 * _3342.y;
                                frontier_phi_83_pred_4 = _3560 * _3342.x;
                                frontier_phi_83_pred_5 = _3486 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3568 = frontier_phi_83_pred;
                            _3567 = frontier_phi_83_pred_1;
                            _3566 = frontier_phi_83_pred_2;
                            _3565 = frontier_phi_83_pred_3;
                            _3564 = frontier_phi_83_pred_4;
                            _3569 = frontier_phi_83_pred_5;
                            _3272 = _3567 + _3285;
                            _3273 = _3568 + _3286;
                            _3274 = _3569 + _3287;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3274;
                        frontier_phi_77_pred_1 = _3273;
                        frontier_phi_77_pred_2 = _3272;
                        frontier_phi_77_pred_3 = _3271;
                        frontier_phi_77_pred_4 = _3270;
                        frontier_phi_77_pred_5 = _3269;
                    }
                    _2911 = frontier_phi_77_pred;
                    _2909 = frontier_phi_77_pred_1;
                    _2907 = frontier_phi_77_pred_2;
                    _2905 = frontier_phi_77_pred_3;
                    _2903 = frontier_phi_77_pred_4;
                    _2901 = frontier_phi_77_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2901;
                        _3061 = _2903;
                        _3062 = _2905;
                        _3063 = _2907;
                        _3064 = _2909;
                        _3065 = _2911;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2905;
                frontier_phi_58_59_ladder_1 = _2911;
                frontier_phi_58_59_ladder_2 = _2909;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2903;
                frontier_phi_58_59_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_58_59_ladder = _2775;
                frontier_phi_58_59_ladder_1 = _2781;
                frontier_phi_58_59_ladder_2 = _2779;
                frontier_phi_58_59_ladder_3 = _2777;
                frontier_phi_58_59_ladder_4 = _2773;
                frontier_phi_58_59_ladder_5 = _2771;
            }
            _2900 = frontier_phi_58_59_ladder_5;
            _2902 = frontier_phi_58_59_ladder_4;
            _2904 = frontier_phi_58_59_ladder;
            _2906 = frontier_phi_58_59_ladder_3;
            _2908 = frontier_phi_58_59_ladder_2;
            _2910 = frontier_phi_58_59_ladder_1;
        }
        float _2915 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2638 = (_2915 * _2906) + _2071;
        _2640 = (_2915 * _2908) + _2073;
        _2642 = (_2915 * _2910) + _2075;
        _2644 = ((_2900 * _834) * _2915) + _2419;
        _2646 = ((_2902 * _836) * _2915) + _2421;
        _2648 = ((_2904 * _837) * _2915) + _2423;
    }
    else
    {
        _2638 = _2071;
        _2640 = _2073;
        _2642 = _2075;
        _2644 = _2419;
        _2646 = _2421;
        _2648 = _2423;
    }
    uint _2654 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _2660 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2666 = (((((_2660 * cbMtdParam._m0[11u].x) * (((_529.x - _526) * _507) + _526)) * _558) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _648) * cbInstanceData._m0[_2654].x;
    float _2672 = (((((_2660 * cbMtdParam._m0[11u].y) * (((_529.y - _527) * _507) + _527)) * _558) * (((1.0 - _613) * cbMtdParam._m0[16u].y) + _613)) * _648) * cbInstanceData._m0[_2654].y;
    float _2678 = (((((_2660 * cbMtdParam._m0[11u].z) * (((_529.z - _528) * _507) + _528)) * _558) * (((1.0 - _615) * cbMtdParam._m0[16u].y) + _615)) * _648) * cbInstanceData._m0[_2654].z;
    float _4686 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4697 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4708 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2695 = (((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2638 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _849))) + ((_2644 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + _2666;
    float _2697 = (_2672 + ((_2646 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2640 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _849)));
    float _2699 = (_2678 + ((_2648 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2642 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _849)));
    float _2700 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2701 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2702 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2708 = cbMtdParam._m0[2u].x * _2666;
    float _2709 = cbMtdParam._m0[2u].y * _2672;
    float _2710 = cbMtdParam._m0[2u].z * _2678;
    float _4734 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2712 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    uint _2713 = _809 + 6u;
    float _2721 = _771 / cbSceneParam._m0[86u].x;
    float _2722 = _772 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2797 = _2796 / _694;
        float _2808 = _2797 * _744;
        float _2809 = _745 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2811 = _2797 * _746;
        float _2813 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2814 = _2813 + cbSceneParam._m0[79u].w;
        float _2815 = cbSceneParam._m0[79u].w - _2809;
        float _2821 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2811 * _2811));
        float _2824 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2821;
        float _2829 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2831 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2810 - _2813) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2814 > 0.0) ? exp2(_2829 * _2814) : (2.0 - exp2(_2831 * _2814))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2824;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : max(_2814, _2815));
            float _2963 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : min(_2814, _2815));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3017 = ((abs(_2821 / _2810) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2829 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2829 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2831 * _2972) - exp2(_2831 * _2973)) * _2961))) + (_2824 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2741);
        _2833 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2835 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2837 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2839 = _3028 * _2741;
    }
    else
    {
        _2833 = _2738;
        _2835 = _2739;
        _2837 = _2740;
        _2839 = _2741;
    }
    bool _3055;
    vec4 _2849;
    vec4 _2871;
    float _2873;
    float _2877;
    float _2878;
    float _2879;
    float _2882;
    float _2885;
    float _2888;
    float _2889;
    bool _2899;
    for (;;)
    {
        _2849 = cbMatDynParam._m0[0u];
        float _2851 = roundEven(_2849.y);
        bool _2852 = _2851 == 3.0;
        float _2853 = log2(_2839);
        float _2857 = exp2(_2853 * cbSceneParam._m0[78u].x);
        float _2858 = exp2(_2853 * cbSceneParam._m0[78u].y);
        float _2859 = exp2(_2853 * cbSceneParam._m0[78u].z);
        float _2860 = _2857 * _2700;
        float _2861 = _2858 * _2701;
        float _2862 = _2859 * _2702;
        float _2869 = _760 + (-0.5);
        _2871 = cbMtdParam._m0[1u];
        _2873 = _2871.y * _2869;
        float _2876 = (_2851 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2877 = _2876 * (_2852 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2833)));
        _2878 = _2876 * (_2852 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2835)));
        _2879 = _2876 * (_2852 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2837)));
        _2882 = ((_2708 * _2712) * _2857) * _2876;
        _2885 = ((_2709 * _2712) * _2858) * _2876;
        _2888 = ((_2710 * _2712) * _2859) * _2876;
        _2889 = _2869 * 0.999000012874603271484375;
        _2899 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2899)
        {
            if ((cbInstanceData._m0[_809 + 7u].x + _2889) < 0.5)
            {
                _3055 = true;
                break;
            }
        }
        uint _2996 = _810 + uint(_2849.w);
        if ((cbInstanceData._m0[_2996].w < 1.0) && ((cbInstanceData._m0[_2996].w + _2889) < 0.5))
        {
            _3055 = true;
            break;
        }
        if ((_2873 + 1.0) < _2871.x)
        {
            _3055 = true;
            break;
        }
        _3055 = false;
        break;
    }
    float _3260;
    if (_3055)
    {
        discard_state = true;
        _3260 = 0.0;
    }
    else
    {
        _3260 = cbInstanceData._m0[_2713].w;
    }
    SV_Target.x = _2877;
    SV_Target.y = _2878;
    SV_Target.z = _2879;
    SV_Target.w = _3260;
    SV_Target_1.x = _2882;
    SV_Target_1.y = _2885;
    SV_Target_1.z = _2888;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
    discard_exit();
}


