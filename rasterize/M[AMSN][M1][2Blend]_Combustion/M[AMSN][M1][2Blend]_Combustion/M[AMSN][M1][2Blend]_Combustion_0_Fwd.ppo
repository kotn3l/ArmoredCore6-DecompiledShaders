#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _310 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3529 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _318 = (_311 * ((_279.x * cbMtdParam._m0[10u].x) - _259)) + _259;
    float _319 = (_311 * ((_279.y * cbMtdParam._m0[10u].y) - _260)) + _260;
    float _320 = (_311 * ((_279.z * cbMtdParam._m0[10u].z) - _261)) + _261;
    vec4 _334 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3540 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    vec4 _363 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _367 = _363.z;
    float _370 = (_363.x * 2.0) + (-1.0);
    float _371 = (_363.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_370, _371), vec2(_370, _371));
    float _3551 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _382 = ((((_334.z * cbMtdParam._m0[16u].w) - _367) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _367;
    float _405 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _406 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _429 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _435 = (_429.x * 2.0) + (-1.0);
    float _436 = (_429.y * 2.0) + (-1.0);
    float _440 = 1.0 - dot(vec2(_435, _436), vec2(_435, _436));
    float _3562 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _442 = sqrt(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)));
    float _445 = fma(_442, _217, fma(_436, _224, _435 * _210));
    float _448 = fma(_442, _218, fma(_436, _225, _435 * _211));
    float _451 = fma(_442, _219, fma(_436, _226, _435 * _212));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _457 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _466 = (((_448 * 0.5) * _455) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _468 = (-0.0) - (cbMtdParam._m0[14u].w * (((_445 * 0.5) * _455) + (-0.25)));
    float _470 = fract(_457);
    float _472 = fract(_457 + 0.5);
    float _483 = abs((_470 * 2.0) + (-1.0));
    vec4 _500 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_470 * _468) + _405) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_466 * _470) + _406) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _502 = _500.x;
    float _503 = _500.y;
    float _504 = _500.z;
    vec4 _505 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_472 * _468) + _405) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_466 * _472) + _406) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _525 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3573 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _534 = (((_526 * _526) * (3.0 - (_526 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _543 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _551 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3584 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _556 = (_552 * _552) * (3.0 - (_552 * 2.0));
    float _557 = _556 * cbMtdParam._m0[17u].y;
    float _558 = _556 * cbMtdParam._m0[17u].z;
    float _559 = sin(_543);
    float _560 = cos(_543);
    float _561 = TEXCOORD.z - _557;
    float _562 = TEXCOORD.w - _558;
    vec4 _581 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_557 + fma(_562, (-0.0) - _559, _561 * _560))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_562, _560, _561 * _559) + _558)) + cbTextureTilingScale._m0[1u].w));
    float _587 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _581.x;
    float _589 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _581.y;
    float _591 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _581.z;
    vec4 _614 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _405) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _406) + cbTextureTilingScale._m0[6u].w));
    float _623 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_614.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3595 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _631 = (_311 * (_342 - _370)) + _370;
    float _632 = (_311 * (_344 - _371)) + _371;
    float _633 = (_311 * (sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) - _377)) + _377;
    float _636 = fma(_633, _217, fma(_632, _224, _631 * _210));
    float _639 = fma(_633, _218, fma(_632, _225, _631 * _211));
    float _642 = fma(_633, _219, fma(_632, _226, _631 * _212));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3606 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _650 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3628 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3639 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _756 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _759 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _772 = uint(roundEven(NORMAL.w)) * 13u;
    uint _773 = _772 + 9u;
    uint _774 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_774].z;
    float _3650 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _797 = _794.x * TEXCOORD_6.w;
    float _798 = dot(vec3(_647, _648, _649), vec3(_726, _727, _728));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _647) - _726;
    float _806 = (_801 * _648) - _727;
    float _807 = (_801 * _649) - _728;
    float _811 = abs(dot(vec3(_726, _727, _728), vec3(_647, _648, _649)));
    float _3683 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_650);
    float _825 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _896 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _900 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _924 = _857 + _647;
        float _925 = _861 + _648;
        float _926 = _865 + _649;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _892;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _896;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _900;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_647, _648, _649), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3731 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_647, _648, _649), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3764 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_647, _648, _649), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3797 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1211 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1215 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1238 = _857 + _647;
        float _1239 = _861 + _648;
        float _1240 = _865 + _649;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_647, _648, _649), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3860 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_647, _648, _649), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3893 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_647, _648, _649), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3926 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _805 * 0.5;
    float _1545 = _806 * 0.5;
    float _1546 = _807 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1674 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1677 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1705 = frontier_phi_14_12_ladder;
        }
        float _1907;
        if (_1674 > 0.0)
        {
            _1907 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1907 = frontier_phi_23_19_ladder;
        }
        float _2150;
        if (_1677 > 0.0)
        {
            _2150 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2150 = frontier_phi_35_30_ladder;
        }
        float _2152 = isnan(_1907) ? _1705 : (isnan(_1705) ? _1907 : min(_1705, _1907));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1671) + _1660;
        float _2158 = (_2153 * _1674) + _1664;
        float _2159 = (_2153 * _1677) + _1668;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2160;
        float _2164 = _2160 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 > _2164) || ((_2158 < _2162) || ((_2157 < _2162) || (_2157 > _2164))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2159, cbModelParam._m0[9u].z, fma(_2158, cbModelParam._m0[9u].y, _2157 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2159, cbModelParam._m0[10u].z, fma(_2158, cbModelParam._m0[10u].y, _2157 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2159, cbModelParam._m0[11u].z, fma(_2158, cbModelParam._m0[11u].y, _2157 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_13_35_ladder = _2283.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2283.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2283.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_13_35_ladder_2;
        _1695 = frontier_phi_13_35_ladder_1;
        _1697 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1613);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1770 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1773 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1912;
        if (_1767 > 0.0)
        {
            _1912 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1912 = frontier_phi_25_21_ladder;
        }
        float _2177;
        if (_1770 > 0.0)
        {
            _2177 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2177 = frontier_phi_37_32_ladder;
        }
        float _2382;
        if (_1773 > 0.0)
        {
            _2382 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2382 = frontier_phi_46_43_ladder;
        }
        float _2384 = isnan(_2177) ? _1912 : (isnan(_1912) ? _2177 : min(_1912, _2177));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1767) + _1756;
        float _2390 = (_2385 * _1770) + _1760;
        float _2391 = (_2385 * _1773) + _1764;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2392;
        float _2395 = _2392 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2391 > _2395) || ((_2391 < _2393) || ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 < _2393) || (_2389 > _2395))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2391, cbModelParam._m0[17u].z, fma(_2390, cbModelParam._m0[17u].y, _2389 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2391, cbModelParam._m0[18u].z, fma(_2390, cbModelParam._m0[18u].y, _2389 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2391, cbModelParam._m0[19u].z, fma(_2390, cbModelParam._m0[19u].y, _2389 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_22_46_ladder = _2635.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2635.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2635.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_22_46_ladder_2;
        _1794 = frontier_phi_22_46_ladder_1;
        _1796 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1702);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1808 = ((((1.0 - _825) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _813)) * _797;
    float _1809 = _1808 * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1810 = _1808 * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1811 = _1808 * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1814 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_772 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _797 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1866 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1870 = _1832 | 1u;
    float _1881 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_647, _648, _649));
    float _1884 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_647, _648, _649));
    float _4062 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _4073 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1889 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1891 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1898 = ((cbLight._m0[_1849].x * _1855) * _1891) + ((cbLight._m0[_1859].x * _1866) * _1889);
    float _1899 = ((_1855 * cbLight._m0[_1849].y) * _1891) + ((_1866 * cbLight._m0[_1859].y) * _1889);
    float _1900 = ((_1855 * cbLight._m0[_1849].z) * _1891) + ((_1866 * cbLight._m0[_1859].z) * _1889);
    uvec4 _1904 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1906 = _1904.x == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1906)
    {
        _1917 = _1898;
        _1919 = _1899;
        _1921 = _1900;
    }
    else
    {
        uint _1925 = _1832 + 6u;
        float _1941 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _1942 = _1941 * _1941;
        float _4084 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1944 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1917 = (((cbLight._m0[_1925].x * 0.3183098733425140380859375) * _1943) * _1944) + _1898;
        _1919 = (((cbLight._m0[_1925].y * 0.3183098733425140380859375) * _1943) * _1944) + _1899;
        _1921 = (((cbLight._m0[_1925].z * 0.3183098733425140380859375) * _1943) * _1944) + _1900;
    }
    bool _1924 = _1904.y == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1924)
    {
        _1962 = _1917;
        _1964 = _1919;
        _1966 = _1921;
    }
    else
    {
        uint _2121 = _1832 + 7u;
        float _2137 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4100 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2140 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1962 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _1917;
        _1964 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _1919;
        _1966 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _1921;
    }
    uint _1969 = _1832 + 8u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _650) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1832].x + _726;
    float _1985 = cbLight._m0[_1832].y + _727;
    float _1986 = cbLight._m0[_1832].z + _728;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1832].xyz));
    float _4116 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _1998 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1999 = dot(vec3(_647, _648, _649), vec3(_1991, _1992, _1993));
    float _4138 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1991, _1992, _1993));
    float _4149 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1983 * _1983;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = 1.0 - _1983;
    float _2034 = (0.5 / (((_1998 * ((_1997 * _2023) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2023) + _1983) * _1997))) * _1997;
    float _4160 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    uint _2047 = _1832 + 9u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _650) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1870].x + _726;
    float _2061 = cbLight._m0[_1870].y + _727;
    float _2062 = cbLight._m0[_1870].z + _728;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1870].xyz));
    float _4171 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2074 = dot(vec3(_647, _648, _649), vec3(_2067, _2068, _2069));
    float _4182 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2067, _2068, _2069));
    float _4193 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2059 * _2059;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2096 = 1.0 - _2059;
    float _2106 = (0.5 / (((_1998 * ((_2073 * _2096) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2096) + _2059) * _2073))) * _2073;
    float _4204 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    float _2118 = (((_2095 * cbLight._m0[_2047].x) * _2108) * _1855) + (((_2022 * cbLight._m0[_1969].x) * _2036) * _1866);
    float _2119 = (((_2095 * cbLight._m0[_2047].y) * _2108) * _1855) + (((_2022 * cbLight._m0[_1969].y) * _2036) * _1866);
    float _2120 = (((_2095 * cbLight._m0[_2047].z) * _2108) * _1855) + (((_2022 * cbLight._m0[_1969].z) * _2036) * _1866);
    float _2182;
    float _2184;
    float _2186;
    if (_1906)
    {
        _2182 = _2118;
        _2184 = _2119;
        _2186 = _2120;
    }
    else
    {
        uint _2188 = _1832 + 2u;
        uint _2192 = _1832 + 10u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _650) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _726;
        float _2209 = cbLight._m0[_2188].y + _727;
        float _2210 = cbLight._m0[_2188].z + _728;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2188].xyz));
        float _4215 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2222 = dot(vec3(_647, _648, _649), vec3(_2215, _2216, _2217));
        float _4226 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4237 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2243 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2244 = 1.0 - _2207;
        float _2254 = (0.5 / (((_1998 * ((_2221 * _2244) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2244) + _2207) * _2221))) * _2221;
        float _4248 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2256 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2257 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2182 = (((_2243 * cbLight._m0[_2192].x) * _2256) * _2257) + _2118;
        _2184 = (((_2243 * cbLight._m0[_2192].y) * _2256) * _2257) + _2119;
        _2186 = (((_2243 * cbLight._m0[_2192].z) * _2256) * _2257) + _2120;
    }
    float _2292;
    float _2294;
    float _2296;
    if (_1924)
    {
        _2292 = _2182;
        _2294 = _2184;
        _2296 = _2186;
    }
    else
    {
        uint _2303 = _1832 + 3u;
        uint _2307 = _1832 + 11u;
        float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _650) * 0.949999988079071044921875);
        float _2322 = _2321 * _2321;
        float _2323 = cbLight._m0[_2303].x + _726;
        float _2324 = cbLight._m0[_2303].y + _727;
        float _2325 = cbLight._m0[_2303].z + _728;
        float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
        float _2330 = _2329 * _2323;
        float _2331 = _2329 * _2324;
        float _2332 = _2329 * _2325;
        float _2333 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2303].xyz));
        float _4264 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2337 = dot(vec3(_647, _648, _649), vec3(_2330, _2331, _2332));
        float _4275 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2341 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2330, _2331, _2332));
        float _4286 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2345 = _2322 * _2322;
        float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
        float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2359 = 1.0 - _2322;
        float _2369 = (0.5 / (((_1998 * ((_2336 * _2359) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_1998 * _2359) + _2322) * _2336))) * _2336;
        float _4297 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2371 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
        float _2372 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2292 = (((_2358 * cbLight._m0[_2307].x) * _2371) * _2372) + _2182;
        _2294 = (((_2358 * cbLight._m0[_2307].y) * _2371) * _2372) + _2184;
        _2296 = (((_2358 * cbLight._m0[_2307].z) * _2371) * _2372) + _2186;
    }
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_1830.y == 0u)
    {
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2447;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2447;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2447;
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.x;
        uint _2474 = uint((float(_2462.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2463))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2463)));
        float _2484 = (log2(_2450 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2485 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        uint _2488 = uint(isnan(14.0) ? _2485 : (isnan(_2485) ? 14.0 : min(_2485, 14.0)));
        uvec4 _2493 = texelFetch(g_lightClusterGridBuffer, int(((_2488 << 2u) + (_2474 << 6u)) >> 2u));
        uint _2494 = _2493.x;
        uint _2495 = _2462.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2495 >> 4u) & 15u)) + 4294967295u) & _2494) == 0u) || ((_2495 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            uint _2799 = 0u;
            uint _2808;
            bool _2809;
            for (;;)
            {
                _2808 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                _2809 = _2808 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2809)
                {
                    frontier_phi_61_pred = _2793;
                    frontier_phi_61_pred_1 = _2798;
                    frontier_phi_61_pred_2 = _2797;
                    frontier_phi_61_pred_3 = _2796;
                    frontier_phi_61_pred_4 = _2795;
                    frontier_phi_61_pred_5 = _2794;
                }
                else
                {
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    uint _2923;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2808;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    for (;;)
                    {
                        uint _2927 = uint(findLSB(_2923)) + (_2799 << 5u);
                        uint _2924 = (_2923 + 4294967295u) & _2923;
                        uint _2929 = _2927 * 48u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2949 = (_2927 * 48u) + 4u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2968 = (_2927 * 48u) + 8u;
                        vec3 _2979 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x));
                        float _2983 = _2943.x - _2448;
                        float _2984 = _2943.y - _2449;
                        float _2985 = _2943.z - _2450;
                        float _2986 = dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985));
                        float _2989 = inversesqrt(_2986);
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _2993 = dot(vec3(_753, _756, _759), vec3(_2990, _2991, _2992));
                        float _2998 = 1.0 - (_2986 * _2943.w);
                        float _4323 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3000 = sqrt(_2986) * _2962.w;
                        float _3003 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2993) + _3004;
                        float _3010 = _3000 * _3000;
                        float _3014 = ((isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))) * _2999) / ((_3010 * 0.699999988079071044921875) + 1.0);
                        float _3018 = (-0.0) - _2448;
                        float _3019 = (-0.0) - _2449;
                        float _3020 = (-0.0) - _2450;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3035 = exp2(log2(1.0 / ((_3010 * 3.5) + 5.0)) * 0.25);
                        float _3036 = 1.0 - _813;
                        float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                        float _3044 = _3043 * _3043;
                        float _3045 = _3044 * _3044;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3056 = dot(vec3(_753, _756, _759), vec3(_3025, _3026, _3027));
                        float _4339 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3060 = dot(vec3(_753, _756, _759), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                        float _4350 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                        float _3068 = _3003 * _3044;
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _2993) + _3069;
                        float _4361 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3073 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3074 = 1.0 - _3044;
                        float _3084 = (0.5 / (((_3073 * ((_3059 * _3074) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3044) * _3059))) * _3073;
                        float _4372 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3095 = (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3067 * _3067) * ((_3010 * 2.1991131305694580078125) + 3.141590118408203125))) * _2999;
                        _2852 = (_3014 * _2962.x) + _2920;
                        _2853 = (_3014 * _2962.y) + _2921;
                        _2854 = (_3014 * _2962.z) + _2922;
                        _2849 = (_3095 * _2979.x) + _2917;
                        _2850 = (_3095 * _2979.y) + _2918;
                        _2851 = (_3095 * _2979.z) + _2919;
                        if (_2924 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2924;
                        }
                    }
                    frontier_phi_61_pred = _2849;
                    frontier_phi_61_pred_1 = _2854;
                    frontier_phi_61_pred_2 = _2853;
                    frontier_phi_61_pred_3 = _2852;
                    frontier_phi_61_pred_4 = _2851;
                    frontier_phi_61_pred_5 = _2850;
                }
                _2641 = frontier_phi_61_pred;
                _2651 = frontier_phi_61_pred_1;
                _2649 = frontier_phi_61_pred_2;
                _2647 = frontier_phi_61_pred_3;
                _2645 = frontier_phi_61_pred_4;
                _2643 = frontier_phi_61_pred_5;
                uint _2800 = _2799 + 1u;
                if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2793 = _2641;
                    _2794 = _2643;
                    _2795 = _2645;
                    _2796 = _2647;
                    _2797 = _2649;
                    _2798 = _2651;
                    _2799 = _2800;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((4294967295u << _2657) & _2494) == 0u)
        {
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
            _2769 = _2648;
            _2771 = _2650;
        }
        else
        {
            float _2786 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
            float _2787 = _2786 * _2448;
            float _2788 = _2786 * _2449;
            float _2789 = _2786 * _2450;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2900 = _2640;
                float _2901 = _2642;
                float _2902 = _2644;
                float _2903 = _2646;
                float _2904 = _2648;
                float _2905 = _2650;
                uint _2906 = _2657;
                uint _2915;
                bool _2916;
                for (;;)
                {
                    _2915 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                    _2916 = _2915 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2916)
                    {
                        frontier_phi_67_pred = _2903;
                        frontier_phi_67_pred_1 = _2904;
                        frontier_phi_67_pred_2 = _2905;
                        frontier_phi_67_pred_3 = _2902;
                        frontier_phi_67_pred_4 = _2901;
                        frontier_phi_67_pred_5 = _2900;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        uint _3119 = _2915;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3188;
                        vec4 _3204;
                        float _3251;
                        bool _3252;
                        for (;;)
                        {
                            uint _3130 = ((_2906 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3175 = (_3130 * 40u) + 16u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3191 = (_3130 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3130 * 40u) + 24u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3226 = (_3130 * 40u) + 28u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3251 = fma(_2450, _3239.z, fma(_2449, _3239.y, _3239.x * _2448)) + _3239.w;
                            _3252 = !((fma(_2450, _3220.z, fma(_2449, _3220.y, _3220.x * _2448)) + _3220.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3252)
                            {
                                float _3279 = _3145.x - _2448;
                                float _3280 = _3145.y - _2449;
                                float _3281 = _3145.z - _2450;
                                float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                                float _3285 = inversesqrt(_3282);
                                float _3286 = _3285 * _3279;
                                float _3287 = _3285 * _3280;
                                float _3288 = _3285 * _3281;
                                float _3292 = 1.0 - (_3282 / (_3146 * _3146));
                                float _4383 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3297 = sqrt(_3282) * _3161.w;
                                float _3299 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                                float _3300 = _3299 * _3299;
                                float _3303 = ((1.0 - _3300) * dot(vec3(_3286, _3287, _3288), vec3(_753, _756, _759))) + _3300;
                                float _3306 = _3297 * _3297;
                                float _3310 = (fma(_2450, _3188.z, fma(_2449, _3188.y, _3188.x * _2448)) + _3188.w) / _3251;
                                float _3311 = (fma(_2450, _3204.z, fma(_2449, _3204.y, _3204.x * _2448)) + _3204.w) / _3251;
                                float _3315 = 1.0 - dot(vec2(_3310, _3311), vec2(_3310, _3311));
                                float _4399 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3317 = _3316 * (((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3293) / ((_3306 * 0.699999988079071044921875) + 1.0));
                                float _3329 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                                float _3330 = 1.0 - _813;
                                float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                                float _3338 = _3337 * _3337;
                                float _3339 = _3338 * _3338;
                                float _3340 = _3286 - _2787;
                                float _3341 = _3287 - _2788;
                                float _3342 = _3288 - _2789;
                                float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                                float _3350 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2787, (-0.0) - _2788, (-0.0) - _2789));
                                float _4410 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3354 = dot(vec3(_753, _756, _759), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                                float _4421 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                                float _3362 = _3299 * _3338;
                                float _3363 = _3362 * _3362;
                                float _3369 = ((1.0 - _3363) * dot(vec3(_753, _756, _759), vec3(_3286, _3287, _3288))) + _3363;
                                float _4432 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3371 = 1.0 - _3338;
                                float _3381 = (0.5 / (((_3370 * ((_3353 * _3371) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3338) * _3353))) * _3370;
                                float _4443 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3391 = (_3316 * _3293) * (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3361 * _3361) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3391 * _3173.x;
                                frontier_phi_73_pred_1 = _3391 * _3173.y;
                                frontier_phi_73_pred_2 = _3317 * _3161.z;
                                frontier_phi_73_pred_3 = _3317 * _3161.y;
                                frontier_phi_73_pred_4 = _3317 * _3161.x;
                                frontier_phi_73_pred_5 = _3391 * _3173.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3395 = frontier_phi_73_pred;
                            _3396 = frontier_phi_73_pred_1;
                            _3400 = frontier_phi_73_pred_2;
                            _3399 = frontier_phi_73_pred_3;
                            _3398 = frontier_phi_73_pred_4;
                            _3397 = frontier_phi_73_pred_5;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            _3105 = _3400 + _3118;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            _3102 = _3397 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3103;
                        frontier_phi_67_pred_1 = _3104;
                        frontier_phi_67_pred_2 = _3105;
                        frontier_phi_67_pred_3 = _3102;
                        frontier_phi_67_pred_4 = _3101;
                        frontier_phi_67_pred_5 = _3100;
                    }
                    _2768 = frontier_phi_67_pred;
                    _2770 = frontier_phi_67_pred_1;
                    _2772 = frontier_phi_67_pred_2;
                    _2766 = frontier_phi_67_pred_3;
                    _2764 = frontier_phi_67_pred_4;
                    _2762 = frontier_phi_67_pred_5;
                    uint _2907 = _2906 + 1u;
                    if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2900 = _2762;
                        _2901 = _2764;
                        _2902 = _2766;
                        _2903 = _2768;
                        _2904 = _2770;
                        _2905 = _2772;
                        _2906 = _2907;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2770;
                frontier_phi_55_56_ladder_1 = _2772;
                frontier_phi_55_56_ladder_2 = _2768;
                frontier_phi_55_56_ladder_3 = _2766;
                frontier_phi_55_56_ladder_4 = _2764;
                frontier_phi_55_56_ladder_5 = _2762;
            }
            else
            {
                frontier_phi_55_56_ladder = _2648;
                frontier_phi_55_56_ladder_1 = _2650;
                frontier_phi_55_56_ladder_2 = _2646;
                frontier_phi_55_56_ladder_3 = _2644;
                frontier_phi_55_56_ladder_4 = _2642;
                frontier_phi_55_56_ladder_5 = _2640;
            }
            _2761 = frontier_phi_55_56_ladder_5;
            _2763 = frontier_phi_55_56_ladder_4;
            _2765 = frontier_phi_55_56_ladder_3;
            _2767 = frontier_phi_55_56_ladder_2;
            _2769 = frontier_phi_55_56_ladder;
            _2771 = frontier_phi_55_56_ladder_1;
        }
        float _2776 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2507 = (_2776 * _2767) + _1962;
        _2509 = (_2776 * _2769) + _1964;
        _2511 = (_2776 * _2771) + _1966;
        _2513 = ((_2761 * 0.039999999105930328369140625) * _2776) + _2292;
        _2515 = ((_2763 * 0.039999999105930328369140625) * _2776) + _2294;
        _2517 = ((_2765 * 0.039999999105930328369140625) * _2776) + _2296;
    }
    else
    {
        _2507 = _1962;
        _2509 = _1964;
        _2511 = _1966;
        _2513 = _2292;
        _2515 = _2294;
        _2517 = _2296;
    }
    uint _2523 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _2529 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2535 = (((((_2529 * cbMtdParam._m0[11u].x) * (((_505.x - _502) * _483) + _502)) * _534) * (((1.0 - _587) * cbMtdParam._m0[16u].y) + _587)) * _624) * cbInstanceData._m0[_2523].x;
    float _2541 = (((((_2529 * cbMtdParam._m0[11u].y) * (((_505.y - _503) * _483) + _503)) * _534) * (((1.0 - _589) * cbMtdParam._m0[16u].y) + _589)) * _624) * cbInstanceData._m0[_2523].y;
    float _2547 = (((((_2529 * cbMtdParam._m0[11u].z) * (((_505.z - _504) * _483) + _504)) * _534) * (((1.0 - _591) * cbMtdParam._m0[16u].y) + _591)) * _624) * cbInstanceData._m0[_2523].z;
    float _4459 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4470 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4481 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2564 = (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2507 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _797))) + ((_2513 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + _2535;
    float _2566 = (_2541 + ((_2515 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2509 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _797)));
    float _2568 = (_2547 + ((_2517 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1602)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2511 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _797)));
    float _4507 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2581 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    uint _2582 = _772 + 6u;
    float _2590 = _734 / cbSceneParam._m0[86u].x;
    float _2591 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2666 = _2665 / _669;
        float _2677 = _2666 * _719;
        float _2678 = _720 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2680 = _2666 * _721;
        float _2682 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2678;
        float _2690 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2862;
        if (abs((_2679 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2862 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2822 = 1.0 / cbSceneParam._m0[80u].x;
            float _2823 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2824 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            float _2834 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : min(_2824, 0.0));
            _2862 = ((abs(_2690 / _2679) * cbSceneParam._m0[80u].y) * ((((_2833 - _2834) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))))) * _2822)) - ((exp2(_2700 * _2833) - exp2(_2700 * _2834)) * _2822))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2864 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2873 = exp2((_2862 * (-1.44269502162933349609375)) * (1.0 - _2864.w));
        float _2874 = log2(_2873);
        float _2890 = log2(_2610);
        _2702 = (exp2(_2890 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].x)) * _2864.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2704 = (exp2(_2890 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].y)) * _2864.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2706 = (exp2(_2890 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].z)) * _2864.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2708 = _2873 * _2610;
    }
    else
    {
        _2702 = _2607;
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
    }
    float _2720 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2721 = _2720 == 3.0;
    float _2722 = log2(_2708);
    float _2726 = exp2(_2722 * cbSceneParam._m0[78u].x);
    float _2727 = exp2(_2722 * cbSceneParam._m0[78u].y);
    float _2728 = exp2(_2722 * cbSceneParam._m0[78u].z);
    float _2729 = _2726 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)));
    float _2730 = _2727 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)));
    float _2731 = _2728 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)));
    float _2740 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2740 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.y = _2740 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.z = _2740 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.w = cbInstanceData._m0[_2582].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2535) * _2581) * _2726) * _2740;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2541) * _2581) * _2727) * _2740;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2547) * _2581) * _2728) * _2740;
    SV_Target_1.w = cbInstanceData._m0[_2582].w;
}


