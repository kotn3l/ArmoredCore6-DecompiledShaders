#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1215;
float _3914;
float _3915;
float _3916;
float _3917;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    vec4 _261 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _261.x * cbMtdParam._m0[9u].x;
    float _268 = _261.y * cbMtdParam._m0[9u].y;
    float _269 = _261.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _318 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3926 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _326 = (_319 * ((_287.x * cbMtdParam._m0[10u].x) - _267)) + _267;
    float _327 = (_319 * ((_287.y * cbMtdParam._m0[10u].y) - _268)) + _268;
    float _328 = (_319 * ((_287.z * cbMtdParam._m0[10u].z) - _269)) + _269;
    vec4 _342 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _350 = (_342.x * 2.0) + (-1.0);
    float _352 = (_342.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3937 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _371 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _375 = _371.z;
    float _378 = (_371.x * 2.0) + (-1.0);
    float _379 = (_371.y * 2.0) + (-1.0);
    float _380 = dot(vec2(_378, _379), vec2(_378, _379));
    float _3948 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _385 = sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))));
    float _390 = ((((_342.z * cbMtdParam._m0[16u].w) - _375) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _375;
    float _413 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _414 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _437 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _443 = (_437.x * 2.0) + (-1.0);
    float _444 = (_437.y * 2.0) + (-1.0);
    float _448 = 1.0 - dot(vec2(_443, _444), vec2(_443, _444));
    float _3959 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _450 = sqrt(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)));
    float _453 = fma(_450, _225, fma(_444, _232, _443 * _218));
    float _456 = fma(_450, _226, fma(_444, _233, _443 * _219));
    float _459 = fma(_450, _227, fma(_444, _234, _443 * _220));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _465 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _474 = (((_456 * 0.5) * _463) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _476 = (-0.0) - (cbMtdParam._m0[14u].w * (((_453 * 0.5) * _463) + (-0.25)));
    float _478 = fract(_465);
    float _480 = fract(_465 + 0.5);
    float _491 = abs((_478 * 2.0) + (-1.0));
    vec4 _508 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_478 * _476) + _413) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_474 * _478) + _414) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _512 = _508.z;
    vec4 _513 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_480 * _476) + _413) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_474 * _480) + _414) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _533 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3970 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _542 = (((_534 * _534) * (3.0 - (_534 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _551 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _559 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3981 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _564 = (_560 * _560) * (3.0 - (_560 * 2.0));
    float _565 = _564 * cbMtdParam._m0[17u].y;
    float _566 = _564 * cbMtdParam._m0[17u].z;
    float _567 = sin(_551);
    float _568 = cos(_551);
    float _569 = TEXCOORD.z - _565;
    float _570 = TEXCOORD.w - _566;
    vec4 _589 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_565 + fma(_570, (-0.0) - _567, _569 * _568))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_570, _568, _569 * _567) + _566)) + cbTextureTilingScale._m0[1u].w));
    float _595 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _589.x;
    float _597 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _589.y;
    float _599 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _589.z;
    vec4 _622 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _413) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _414) + cbTextureTilingScale._m0[6u].w));
    float _631 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_622.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3992 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _639 = (_319 * (_350 - _378)) + _378;
    float _640 = (_319 * (_352 - _379)) + _379;
    float _641 = (_319 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _385)) + _385;
    float _644 = fma(_641, _225, fma(_640, _232, _639 * _218));
    float _647 = fma(_641, _226, fma(_640, _233, _639 * _219));
    float _650 = fma(_641, _227, fma(_640, _234, _639 * _220));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _4003 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _658 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _4025 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _4036 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _727 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _717);
    float _728 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _717);
    float _729 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _717);
    float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
    float _734 = _727 * _733;
    float _735 = _728 * _733;
    float _736 = _729 * _733;
    vec4 _741 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _743 = _741.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _896 = sqrt(((_727 * _727) + (_728 * _728)) + (_729 * _729));
        float _902 = (cbMatDynParam._m0[5u].x * _896) + cbMatDynParam._m0[5u].y;
        float _4047 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _907 = (cbMatDynParam._m0[5u].z * _896) + cbMatDynParam._m0[5u].w;
        float _4058 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) - _903)) + _903) < ((_743 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _776 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _779 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _792 = uint(roundEven(NORMAL.w)) * 13u;
    uint _793 = _792 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_794].z;
    float _4069 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _817 = _814.x * TEXCOORD_6.w;
    float _818 = dot(vec3(_655, _656, _657), vec3(_734, _735, _736));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _655) - _734;
    float _826 = (_821 * _656) - _735;
    float _827 = (_821 * _657) - _736;
    float _831 = abs(dot(vec3(_734, _735, _736), vec3(_655, _656, _657)));
    float _4102 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_658);
    float _845 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1214;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _944 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _948 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _972 = _877 + _655;
        float _973 = _881 + _656;
        float _974 = _885 + _657;
        float _984 = fma(_974, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972)) - _940;
        float _985 = fma(_974, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972)) - _944;
        float _986 = fma(_974, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972)) - _948;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1042 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1008.x + (-0.5));
        float _1044 = _1042 * (_1008.y + (-0.5));
        float _1045 = _1042 * (_1008.z + (-0.5));
        float _1052 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1015.x + (-0.5));
        float _1054 = _1052 * (_1015.y + (-0.5));
        float _1055 = _1052 * (_1015.z + (-0.5));
        float _1062 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1022.x + (-0.5));
        float _1064 = _1062 * (_1022.y + (-0.5));
        float _1065 = _1062 * (_1022.z + (-0.5));
        float _1072 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1029.x + (-0.5));
        float _1074 = _1072 * (_1029.y + (-0.5));
        float _1075 = _1072 * (_1029.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1096 = (dot(vec3(_655, _656, _657), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1106 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _4150 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1108 + 1.0))) + _1113) * _1076;
        float _1123 = _1044 * 0.5;
        float _1124 = _1054 * 0.5;
        float _1125 = _1064 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_655, _656, _657), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4183 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1150 + 1.0))) + _1155) * _1077;
        float _1165 = _1045 * 0.5;
        float _1166 = _1055 * 0.5;
        float _1167 = _1065 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_655, _656, _657), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4216 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1192 + 1.0))) + _1197) * _1078;
        _1214 = _1045;
        _1216 = _1044;
        _1217 = _1043;
        _1218 = _1055;
        _1219 = _1054;
        _1220 = _1053;
        _1221 = _1065;
        _1222 = _1064;
        _1223 = _1063;
        _1224 = _1078;
        _1225 = _1077;
        _1226 = _1076;
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _1215;
        _1216 = _1215;
        _1217 = _1215;
        _1218 = _1215;
        _1219 = _1215;
        _1220 = _1215;
        _1221 = _1215;
        _1222 = _1215;
        _1223 = _1215;
        _1224 = _1215;
        _1225 = _1215;
        _1226 = _1215;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1262 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1266 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1289 = _877 + _655;
        float _1290 = _881 + _656;
        float _1291 = _885 + _657;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_655, _656, _657), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4279 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_655, _656, _657), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4312 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_655, _656, _657), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4345 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1215;
        _1528 = _1215;
        _1529 = _1215;
        _1530 = _1215;
        _1531 = _1215;
        _1532 = _1215;
        _1533 = _1215;
        _1534 = _1215;
        _1535 = _1215;
        _1536 = _1215;
        _1537 = _1215;
        _1538 = _1215;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1228)) + _1228;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _825 * 0.5;
    float _1596 = _826 * 0.5;
    float _1597 = _827 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1214, _1218, _1221, _1224));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1725 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1728 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1756 = frontier_phi_17_15_ladder;
        }
        float _1926;
        if (_1725 > 0.0)
        {
            _1926 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1926 = frontier_phi_26_22_ladder;
        }
        float _2222;
        if (_1728 > 0.0)
        {
            _2222 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2222 = frontier_phi_38_33_ladder;
        }
        float _2224 = isnan(_1926) ? _1756 : (isnan(_1756) ? _1926 : min(_1756, _1926));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1722) + _1711;
        float _2230 = (_2225 * _1725) + _1715;
        float _2231 = (_2225 * _1728) + _1719;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2232;
        float _2236 = _2232 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 > _2236) || ((_2230 < _2234) || ((_2229 < _2234) || (_2229 > _2236))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_16_38_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_16_38_ladder_2;
        _1746 = frontier_phi_16_38_ladder_1;
        _1748 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1664);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1821 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1824 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1931;
        if (_1818 > 0.0)
        {
            _1931 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1931 = frontier_phi_28_24_ladder;
        }
        float _2249;
        if (_1821 > 0.0)
        {
            _2249 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2249 = frontier_phi_40_35_ladder;
        }
        float _2576;
        if (_1824 > 0.0)
        {
            _2576 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2576 = frontier_phi_50_47_ladder;
        }
        float _2578 = isnan(_2249) ? _1931 : (isnan(_1931) ? _2249 : min(_1931, _2249));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1818) + _1807;
        float _2584 = (_2579 * _1821) + _1811;
        float _2585 = (_2579 * _1824) + _1815;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_25_50_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_25_50_ladder_2;
        _1845 = frontier_phi_25_50_ladder_1;
        _1847 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1753);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1859 = ((((1.0 - _845) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_845 * _833)) * _817;
    float _1860 = _1859 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1861 = _1859 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1862 = _1859 * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1918 = _1905 / _1917;
    float _1919 = _1909 / _1917;
    float _1920 = _1913 / _1917;
    float _2067;
    float _2068;
    float _2069;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1947 = ((uint(_1920 > cbSceneParam._m0[59u].y) + uint(_1920 > cbSceneParam._m0[59u].x)) + uint(_1920 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1948 = _1947 + 43u;
        uint _1956 = _1947 + 44u;
        uint _1964 = _1947 + 45u;
        uint _1972 = _1947 + 46u;
        float _1983 = fma(_1917, cbSceneParam._m0[_1948].w, fma(_1913, cbSceneParam._m0[_1948].z, fma(_1909, cbSceneParam._m0[_1948].y, _1905 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1917, cbSceneParam._m0[_1956].w, fma(_1913, cbSceneParam._m0[_1956].z, fma(_1909, cbSceneParam._m0[_1956].y, _1905 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1917, cbSceneParam._m0[_1972].w, fma(_1913, cbSceneParam._m0[_1972].z, fma(_1909, cbSceneParam._m0[_1972].y, _1905 * cbSceneParam._m0[_1972].x)));
        float _2000 = cbSceneParam._m0[33u].z * _1995;
        float _2002 = cbSceneParam._m0[33u].w * _1995;
        float _2005 = fma(_1917, cbSceneParam._m0[_1964].w, fma(_1913, cbSceneParam._m0[_1964].z, fma(_1909, cbSceneParam._m0[_1964].y, _1905 * cbSceneParam._m0[_1964].x))) / _1995;
        float _2053 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
        float _4471 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2060 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 + _1983) / _1995, (_2002 + _1987) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 + _1983) / _1995, (_1987 - _2000) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2000) / _1995, (_1987 - _2002) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2002) / _1995, (_2000 + _1987) / _1995), _2005), 0.0)).x), vec4(0.25)));
        _2067 = 1.0 - (_2060 * cbSceneParam._m0[34u].x);
        _2068 = 1.0 - (_2060 * cbSceneParam._m0[34u].y);
        _2069 = 1.0 - (_2060 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2067 = 1.0;
        _2068 = 1.0;
        _2069 = 1.0;
    }
    float _2133;
    float _2135;
    float _2137;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2121 = fma(_1917, cbSceneParam._m0[63u].w, fma(_1913, cbSceneParam._m0[63u].z, fma(_1909, cbSceneParam._m0[63u].y, _1905 * cbSceneParam._m0[63u].x)));
        float _2122 = fma(_1917, cbSceneParam._m0[60u].w, fma(_1913, cbSceneParam._m0[60u].z, fma(_1909, cbSceneParam._m0[60u].y, _1905 * cbSceneParam._m0[60u].x))) / _2121;
        float _2123 = fma(_1917, cbSceneParam._m0[61u].w, fma(_1913, cbSceneParam._m0[61u].z, fma(_1909, cbSceneParam._m0[61u].y, _1905 * cbSceneParam._m0[61u].x))) / _2121;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2122 >= cbSceneParam._m0[64u].x) && (_2123 >= cbSceneParam._m0[64u].y)) && (_2122 <= cbSceneParam._m0[64u].z)) && (_2123 <= cbSceneParam._m0[64u].w))
        {
            float _2262 = fma(_1917, cbSceneParam._m0[62u].w, fma(_1913, cbSceneParam._m0[62u].z, fma(_1909, cbSceneParam._m0[62u].y, _1905 * cbSceneParam._m0[62u].x))) / _2121;
            float _2266 = isnan(cbSceneParam._m0[41u].w) ? _2262 : (isnan(_2262) ? cbSceneParam._m0[41u].w : max(_2262, cbSceneParam._m0[41u].w));
            float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
            float _4487 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
            float _2316 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2122, cbSceneParam._m0[33u].w + _2123), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2122, _2123 - cbSceneParam._m0[33u].z), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].z, _2123 - cbSceneParam._m0[33u].w), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2123), _2266), 0.0)).x), vec4(0.25)));
            float _2320 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
            float _2321 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
            float _2322 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2322) ? _2069 : (isnan(_2069) ? _2322 : min(_2069, _2322));
            frontier_phi_37_36_ladder_1 = isnan(_2321) ? _2068 : (isnan(_2068) ? _2321 : min(_2068, _2321));
            frontier_phi_37_36_ladder_2 = isnan(_2320) ? _2067 : (isnan(_2067) ? _2320 : min(_2067, _2320));
        }
        else
        {
            frontier_phi_37_36_ladder = _2069;
            frontier_phi_37_36_ladder_1 = _2068;
            frontier_phi_37_36_ladder_2 = _2067;
        }
        _2133 = frontier_phi_37_36_ladder_2;
        _2135 = frontier_phi_37_36_ladder_1;
        _2137 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2133 = _2067;
        _2135 = _2068;
        _2137 = _2069;
    }
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_792 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _817 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2181 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2185 = _2144 | 1u;
    float _2196 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_655, _656, _657));
    float _2199 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_655, _656, _657));
    float _4523 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _4534 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2204 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2206 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2213 = ((cbLight._m0[_2161].x * _2167) * _2206) + (((cbLight._m0[_2171].x * _2133) * _2181) * _2204);
    float _2214 = ((_2167 * cbLight._m0[_2161].y) * _2206) + (((cbLight._m0[_2171].y * _2135) * _2181) * _2204);
    float _2215 = ((_2167 * cbLight._m0[_2161].z) * _2206) + (((cbLight._m0[_2171].z * _2137) * _2181) * _2204);
    uvec4 _2219 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2221 = _2219.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2221)
    {
        _2323 = _2213;
        _2325 = _2214;
        _2327 = _2215;
    }
    else
    {
        uint _2331 = _2144 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4545 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2350 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2213;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2214;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2215;
    }
    bool _2330 = _2219.y == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2330)
    {
        _2385 = _2323;
        _2387 = _2325;
        _2389 = _2327;
    }
    else
    {
        uint _2547 = _2144 + 7u;
        float _2563 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4561 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2566 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2385 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2323;
        _2387 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2325;
        _2389 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2327;
    }
    uint _2392 = _2144 + 8u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _658) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2144].x + _734;
    float _2408 = cbLight._m0[_2144].y + _735;
    float _2409 = cbLight._m0[_2144].z + _736;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2144].xyz));
    float _4577 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2421 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2422 = dot(vec3(_655, _656, _657), vec3(_2414, _2415, _2416));
    float _4599 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2414, _2415, _2416));
    float _4610 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2406 * _2406;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2446 = 1.0 - _2406;
    float _2457 = (0.5 / (((_2421 * ((_2420 * _2446) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2446) + _2406) * _2420))) * _2420;
    float _4621 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2459 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    uint _2473 = _2144 + 9u;
    float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _658) * 0.949999988079071044921875);
    float _2485 = _2484 * _2484;
    float _2486 = cbLight._m0[_2185].x + _734;
    float _2487 = cbLight._m0[_2185].y + _735;
    float _2488 = cbLight._m0[_2185].z + _736;
    float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
    float _2493 = _2492 * _2486;
    float _2494 = _2492 * _2487;
    float _2495 = _2492 * _2488;
    float _2496 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2185].xyz));
    float _4632 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2500 = dot(vec3(_655, _656, _657), vec3(_2493, _2494, _2495));
    float _4643 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2493, _2494, _2495));
    float _4654 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2485 * _2485;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2521 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2522 = 1.0 - _2485;
    float _2532 = (0.5 / (((_2421 * ((_2499 * _2522) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2522) + _2485) * _2499))) * _2499;
    float _4665 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    float _2544 = (((_2521 * cbLight._m0[_2473].x) * _2534) * _2167) + ((((cbLight._m0[_2392].x * _2133) * _2445) * _2459) * _2181);
    float _2545 = (((_2521 * cbLight._m0[_2473].y) * _2534) * _2167) + ((((cbLight._m0[_2392].y * _2135) * _2445) * _2459) * _2181);
    float _2546 = (((_2521 * cbLight._m0[_2473].z) * _2534) * _2167) + ((((cbLight._m0[_2392].z * _2137) * _2445) * _2459) * _2181);
    float _2602;
    float _2604;
    float _2606;
    if (_2221)
    {
        _2602 = _2544;
        _2604 = _2545;
        _2606 = _2546;
    }
    else
    {
        uint _2608 = _2144 + 2u;
        uint _2612 = _2144 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _658) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _734;
        float _2629 = cbLight._m0[_2608].y + _735;
        float _2630 = cbLight._m0[_2608].z + _736;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2608].xyz));
        float _4676 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2642 = dot(vec3(_655, _656, _657), vec3(_2635, _2636, _2637));
        float _4687 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4698 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2663 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2664 = 1.0 - _2627;
        float _2674 = (0.5 / (((_2421 * ((_2641 * _2664) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2664) + _2627) * _2641))) * _2641;
        float _4709 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2602 = (((_2663 * cbLight._m0[_2612].x) * _2676) * _2677) + _2544;
        _2604 = (((_2663 * cbLight._m0[_2612].y) * _2676) * _2677) + _2545;
        _2606 = (((_2663 * cbLight._m0[_2612].z) * _2676) * _2677) + _2546;
    }
    float _2708;
    float _2710;
    float _2712;
    if (_2330)
    {
        _2708 = _2602;
        _2710 = _2604;
        _2712 = _2606;
    }
    else
    {
        uint _2719 = _2144 + 3u;
        uint _2723 = _2144 + 11u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _658) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _734;
        float _2740 = cbLight._m0[_2719].y + _735;
        float _2741 = cbLight._m0[_2719].z + _736;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2719].xyz));
        float _4725 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2753 = dot(vec3(_655, _656, _657), vec3(_2746, _2747, _2748));
        float _4736 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4747 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2774 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2775 = 1.0 - _2738;
        float _2785 = (0.5 / (((_2421 * ((_2752 * _2775) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2775) + _2738) * _2752))) * _2752;
        float _4758 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2708 = (((_2774 * cbLight._m0[_2723].x) * _2787) * _2788) + _2602;
        _2710 = (((_2774 * cbLight._m0[_2723].y) * _2787) * _2788) + _2604;
        _2712 = (((_2774 * cbLight._m0[_2723].z) * _2787) * _2788) + _2606;
    }
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_2142.y == 0u)
    {
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2810)));
        float _2831 = (log2(_1920 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3143)
                {
                    frontier_phi_71_pred = _3132;
                    frontier_phi_71_pred_1 = _3131;
                    frontier_phi_71_pred_2 = _3130;
                    frontier_phi_71_pred_3 = _3129;
                    frontier_phi_71_pred_4 = _3128;
                    frontier_phi_71_pred_5 = _3127;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _1918;
                        float _3339 = _3298.y - _1919;
                        float _3340 = _3298.z - _1920;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_773, _776, _779), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4784 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _1918;
                        float _3374 = (-0.0) - _1919;
                        float _3375 = (-0.0) - _1920;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3389 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3390 = 1.0 - _833;
                        float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                        float _3398 = _3397 * _3397;
                        float _3399 = _3398 * _3398;
                        float _3400 = _3380 + _3345;
                        float _3401 = _3381 + _3346;
                        float _3402 = _3382 + _3347;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3410 = dot(vec3(_773, _776, _779), vec3(_3380, _3381, _3382));
                        float _4800 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3414 = dot(vec3(_773, _776, _779), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                        float _4811 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                        float _3422 = _3358 * _3398;
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3348) + _3423;
                        float _4822 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3428 = 1.0 - _3398;
                        float _3438 = (0.5 / (((_3427 * ((_3413 * _3428) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3398) * _3413))) * _3427;
                        float _4833 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3449 = (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3421 * _3421) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3449 * _3334.x) + _3272;
                        _3200 = (_3449 * _3334.y) + _3273;
                        _3201 = (_3449 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_71_pred = _3204;
                    frontier_phi_71_pred_1 = _3203;
                    frontier_phi_71_pred_2 = _3202;
                    frontier_phi_71_pred_3 = _3201;
                    frontier_phi_71_pred_4 = _3200;
                    frontier_phi_71_pred_5 = _3199;
                }
                _2977 = frontier_phi_71_pred;
                _2975 = frontier_phi_71_pred_1;
                _2973 = frontier_phi_71_pred_2;
                _2971 = frontier_phi_71_pred_3;
                _2969 = frontier_phi_71_pred_4;
                _2967 = frontier_phi_71_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2967;
                    _3128 = _2969;
                    _3129 = _2971;
                    _3130 = _2973;
                    _3131 = _2975;
                    _3132 = _2977;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2983) & _2841) == 0u)
        {
            _3095 = _2966;
            _3097 = _2968;
            _3099 = _2970;
            _3101 = _2972;
            _3103 = _2974;
            _3105 = _2976;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
            float _3121 = _3120 * _1918;
            float _3122 = _3120 * _1919;
            float _3123 = _3120 * _1920;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2966;
                float _3256 = _2968;
                float _3257 = _2970;
                float _3258 = _2972;
                float _3259 = _2974;
                float _3260 = _2976;
                uint _3261 = _2983;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3271)
                    {
                        frontier_phi_82_pred = _3260;
                        frontier_phi_82_pred_1 = _3259;
                        frontier_phi_82_pred_2 = _3258;
                        frontier_phi_82_pred_3 = _3257;
                        frontier_phi_82_pred_4 = _3256;
                        frontier_phi_82_pred_5 = _3255;
                    }
                    else
                    {
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3476 = _3255;
                        float _3477 = _3256;
                        float _3478 = _3257;
                        float _3479 = _3258;
                        float _3480 = _3259;
                        float _3481 = _3260;
                        uint _3482 = _3270;
                        uint _3483;
                        vec4 _3508;
                        float _3509;
                        vec4 _3524;
                        vec3 _3536;
                        vec4 _3551;
                        vec4 _3567;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3493 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3482));
                            _3483 = (_3482 + 4294967295u) & _3482;
                            uint _3495 = _3493 * 40u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3509 = _3508.w;
                            uint _3511 = (_3493 * 40u) + 4u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3493 * 40u) + 8u;
                            _3536 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x));
                            uint _3538 = (_3493 * 40u) + 16u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3554 = (_3493 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3570 = (_3493 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3493 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_1920, _3602.z, fma(_1919, _3602.y, _3602.x * _1918)) + _3602.w;
                            _3615 = !((fma(_1920, _3583.z, fma(_1919, _3583.y, _3583.x * _1918)) + _3583.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3508.x - _1918;
                                float _3643 = _3508.y - _1919;
                                float _3644 = _3508.z - _1920;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3509 * _3509));
                                float _4844 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3660 = sqrt(_3645) * _3524.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_773, _776, _779))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_1920, _3551.z, fma(_1919, _3551.y, _3551.x * _1918)) + _3551.w) / _3614;
                                float _3674 = (fma(_1920, _3567.z, fma(_1919, _3567.y, _3567.x * _1918)) + _3567.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4860 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _833;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3121;
                                float _3704 = _3650 - _3122;
                                float _3705 = _3651 - _3123;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_773, _776, _779), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4871 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3717 = dot(vec3(_773, _776, _779), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4882 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_773, _776, _779), vec3(_3649, _3650, _3651))) + _3726;
                                float _4893 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4904 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3680 * _3524.z;
                                frontier_phi_88_pred_1 = _3680 * _3524.y;
                                frontier_phi_88_pred_2 = _3680 * _3524.x;
                                frontier_phi_88_pred_3 = _3754 * _3536.z;
                                frontier_phi_88_pred_4 = _3754 * _3536.y;
                                frontier_phi_88_pred_5 = _3754 * _3536.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_88_pred;
                            _3762 = frontier_phi_88_pred_1;
                            _3761 = frontier_phi_88_pred_2;
                            _3760 = frontier_phi_88_pred_3;
                            _3759 = frontier_phi_88_pred_4;
                            _3758 = frontier_phi_88_pred_5;
                            _3466 = _3761 + _3479;
                            _3467 = _3762 + _3480;
                            _3468 = _3763 + _3481;
                            _3463 = _3758 + _3476;
                            _3464 = _3759 + _3477;
                            _3465 = _3760 + _3478;
                            if (_3483 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3483;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3468;
                        frontier_phi_82_pred_1 = _3467;
                        frontier_phi_82_pred_2 = _3466;
                        frontier_phi_82_pred_3 = _3465;
                        frontier_phi_82_pred_4 = _3464;
                        frontier_phi_82_pred_5 = _3463;
                    }
                    _3106 = frontier_phi_82_pred;
                    _3104 = frontier_phi_82_pred_1;
                    _3102 = frontier_phi_82_pred_2;
                    _3100 = frontier_phi_82_pred_3;
                    _3098 = frontier_phi_82_pred_4;
                    _3096 = frontier_phi_82_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3102;
                frontier_phi_63_64_ladder_1 = _3106;
                frontier_phi_63_64_ladder_2 = _3104;
                frontier_phi_63_64_ladder_3 = _3100;
                frontier_phi_63_64_ladder_4 = _3098;
                frontier_phi_63_64_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_63_64_ladder = _2972;
                frontier_phi_63_64_ladder_1 = _2976;
                frontier_phi_63_64_ladder_2 = _2974;
                frontier_phi_63_64_ladder_3 = _2970;
                frontier_phi_63_64_ladder_4 = _2968;
                frontier_phi_63_64_ladder_5 = _2966;
            }
            _3095 = frontier_phi_63_64_ladder_5;
            _3097 = frontier_phi_63_64_ladder_4;
            _3099 = frontier_phi_63_64_ladder_3;
            _3101 = frontier_phi_63_64_ladder;
            _3103 = frontier_phi_63_64_ladder_2;
            _3105 = frontier_phi_63_64_ladder_1;
        }
        float _3110 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2854 = (_3110 * _3101) + _2385;
        _2856 = (_3110 * _3103) + _2387;
        _2858 = (_3110 * _3105) + _2389;
        _2860 = ((_3095 * 0.039999999105930328369140625) * _3110) + _2708;
        _2862 = ((_3097 * 0.039999999105930328369140625) * _3110) + _2710;
        _2864 = ((_3099 * 0.039999999105930328369140625) * _3110) + _2712;
    }
    else
    {
        _2854 = _2385;
        _2856 = _2387;
        _2858 = _2389;
        _2860 = _2708;
        _2862 = _2710;
        _2864 = _2712;
    }
    uint _2870 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _2876 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2882 = (((((_2876 * cbMtdParam._m0[11u].x) * (((_513.x - _510) * _491) + _510)) * _542) * (((1.0 - _595) * cbMtdParam._m0[16u].y) + _595)) * _632) * cbInstanceData._m0[_2870].x;
    float _2888 = (((((_2876 * cbMtdParam._m0[11u].y) * (((_513.y - _511) * _491) + _511)) * _542) * (((1.0 - _597) * cbMtdParam._m0[16u].y) + _597)) * _632) * cbInstanceData._m0[_2870].y;
    float _2894 = (((((_2876 * cbMtdParam._m0[11u].z) * (((_513.z - _512) * _491) + _512)) * _542) * (((1.0 - _599) * cbMtdParam._m0[16u].y) + _599)) * _632) * cbInstanceData._m0[_2870].z;
    float _4920 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4931 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4942 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2911 = (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2854 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _817))) + ((_2860 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1653)) * cbPerFrame._m0[3u].x)) + _2882;
    float _2913 = (_2888 + ((_2862 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1653)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2856 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _817)));
    float _2915 = (_2894 + ((_2864 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1653)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2858 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _817)));
    float _2916 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2917 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2918 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    float _2924 = cbMtdParam._m0[2u].x * _2882;
    float _2925 = cbMtdParam._m0[2u].y * _2888;
    float _2926 = cbMtdParam._m0[2u].z * _2894;
    float _4968 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2928 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
    uint _2929 = _792 + 6u;
    float _2937 = _754 / cbSceneParam._m0[86u].x;
    float _2938 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2952 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2954 = _2952.x;
    float _2955 = _2952.y;
    float _2956 = _2952.z;
    float _2957 = _2952.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2992 = _2991 / _677;
        float _3003 = _2992 * _727;
        float _3004 = _728 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3006 = _2992 * _729;
        float _3008 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3004;
        float _3016 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3005 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3158 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3016 / _3005) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3026 * _3167) - exp2(_3026 * _3168)) * _3156))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2957);
        _3028 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2954;
        _3030 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2955;
        _3032 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2956;
        _3034 = _3223 * _2957;
    }
    else
    {
        _3028 = _2954;
        _3030 = _2955;
        _3032 = _2956;
        _3034 = _2957;
    }
    bool _3250;
    vec4 _3044;
    vec4 _3066;
    float _3068;
    float _3072;
    float _3073;
    float _3074;
    float _3077;
    float _3080;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3044 = cbMatDynParam._m0[0u];
        float _3046 = roundEven(_3044.y);
        bool _3047 = _3046 == 3.0;
        float _3048 = log2(_3034);
        float _3052 = exp2(_3048 * cbSceneParam._m0[78u].x);
        float _3053 = exp2(_3048 * cbSceneParam._m0[78u].y);
        float _3054 = exp2(_3048 * cbSceneParam._m0[78u].z);
        float _3055 = _3052 * _2916;
        float _3056 = _3053 * _2917;
        float _3057 = _3054 * _2918;
        float _3064 = _743 + (-0.5);
        _3066 = cbMtdParam._m0[1u];
        _3068 = _3066.y * _3064;
        float _3071 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3072 = _3071 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = _3071 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
        _3074 = _3071 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = ((_2924 * _2928) * _3052) * _3071;
        _3080 = ((_2925 * _2928) * _3053) * _3071;
        _3083 = ((_2926 * _2928) * _3054) * _3071;
        _3084 = _3064 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_792 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _793 + uint(_3044.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3068 + 1.0) < _3066.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3454;
    if (_3250)
    {
        discard_state = true;
        _3454 = 0.0;
    }
    else
    {
        _3454 = cbInstanceData._m0[_2929].w;
    }
    SV_Target.x = _3072;
    SV_Target.y = _3073;
    SV_Target.z = _3074;
    SV_Target.w = _3454;
    SV_Target_1.x = _3077;
    SV_Target_1.y = _3080;
    SV_Target_1.z = _3083;
    SV_Target_1.w = cbInstanceData._m0[_2929].w;
    discard_exit();
}


