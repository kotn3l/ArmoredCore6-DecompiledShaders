#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1270;
float _3989;
float _3990;
float _3991;
float _3992;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    vec4 _265 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _271 = _265.x * cbMtdParam._m0[9u].x;
    float _272 = _265.y * cbMtdParam._m0[9u].y;
    float _273 = _265.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _322 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _4001 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _323 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _330 = (_323 * ((_291.x * cbMtdParam._m0[10u].x) - _271)) + _271;
    float _331 = (_323 * ((_291.y * cbMtdParam._m0[10u].y) - _272)) + _272;
    float _332 = (_323 * ((_291.z * cbMtdParam._m0[10u].z) - _273)) + _273;
    vec4 _344 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _346 = _344.x;
    float _364 = ((texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x - _346) * _323) + _346;
    vec4 _378 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _386 = (_378.x * 2.0) + (-1.0);
    float _388 = (_378.y * 2.0) + (-1.0);
    float _389 = dot(vec2(_386, _388), vec2(_386, _388));
    float _4012 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    vec4 _407 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _411 = _407.z;
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _4023 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    float _426 = ((((_378.z * cbMtdParam._m0[16u].w) - _411) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _411;
    float _449 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _450 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _473 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _479 = (_473.x * 2.0) + (-1.0);
    float _480 = (_473.y * 2.0) + (-1.0);
    float _484 = 1.0 - dot(vec2(_479, _480), vec2(_479, _480));
    float _4034 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)));
    float _489 = fma(_486, _229, fma(_480, _236, _479 * _222));
    float _492 = fma(_486, _230, fma(_480, _237, _479 * _223));
    float _495 = fma(_486, _231, fma(_480, _238, _479 * _224));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _501 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _510 = (((_492 * 0.5) * _499) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _512 = (-0.0) - (cbMtdParam._m0[14u].w * (((_489 * 0.5) * _499) + (-0.25)));
    float _514 = fract(_501);
    float _516 = fract(_501 + 0.5);
    float _527 = abs((_514 * 2.0) + (-1.0));
    vec4 _544 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_514 * _512) + _449) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_510 * _514) + _450) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    vec4 _549 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_516 * _512) + _449) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_510 * _516) + _450) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _569 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4045 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _578 = (((_570 * _570) * (3.0 - (_570 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _587 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _595 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4056 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _600 = (_596 * _596) * (3.0 - (_596 * 2.0));
    float _601 = _600 * cbMtdParam._m0[17u].y;
    float _602 = _600 * cbMtdParam._m0[17u].z;
    float _603 = sin(_587);
    float _604 = cos(_587);
    float _605 = TEXCOORD.z - _601;
    float _606 = TEXCOORD.w - _602;
    vec4 _625 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_601 + fma(_606, (-0.0) - _603, _605 * _604))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_606, _604, _605 * _603) + _602)) + cbTextureTilingScale._m0[1u].w));
    float _631 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _625.x;
    float _633 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _625.y;
    float _635 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _625.z;
    vec4 _658 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _449) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _450) + cbTextureTilingScale._m0[6u].w));
    float _667 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_658.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _4067 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _675 = (_323 * (_386 - _414)) + _414;
    float _676 = (_323 * (_388 - _415)) + _415;
    float _677 = (_323 * (sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _421)) + _421;
    float _680 = fma(_677, _229, fma(_676, _236, _675 * _222));
    float _683 = fma(_677, _230, fma(_676, _237, _675 * _223));
    float _686 = fma(_677, _231, fma(_676, _238, _675 * _224));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _4078 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _694 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _4100 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _4111 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _4122 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _698 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _951 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _957 = (cbMatDynParam._m0[5u].x * _951) + cbMatDynParam._m0[5u].y;
        float _4133 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _962 = (cbMatDynParam._m0[5u].z * _951) + cbMatDynParam._m0[5u].w;
        float _4144 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) - _958)) + _958) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _813 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _816 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _829 = uint(roundEven(NORMAL.w)) * 13u;
    uint _830 = _829 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_831].z;
    float _4155 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _843 = 1.0 - _698;
    float _844 = _840 * _843;
    float _845 = _841 * _843;
    float _846 = _842 * _843;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _698;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _698;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _698;
    float _854 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _869 = _866.x * TEXCOORD_6.w;
    float _870 = dot(vec3(_691, _692, _693), vec3(_771, _772, _773));
    float _873 = _870 * 2.0;
    float _877 = (_873 * _691) - _771;
    float _878 = (_873 * _692) - _772;
    float _879 = (_873 * _693) - _773;
    float _883 = abs(dot(vec3(_771, _772, _773), vec3(_691, _692, _693)));
    float _4188 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _885 = sqrt(_694);
    float _897 = exp2((_885 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_885 * 3.0));
    float _903 = (1.0 - _897) * ((_885 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _904 = _897 * _885;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _999 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _1003 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1027 = _932 + _691;
        float _1028 = _936 + _692;
        float _1029 = _940 + _693;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _995;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _999;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1003;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_691, _692, _693), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4236 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_691, _692, _693), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _4269 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_691, _692, _693), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4302 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1271 = _1099;
        _1272 = _1098;
        _1273 = _1110;
        _1274 = _1109;
        _1275 = _1108;
        _1276 = _1120;
        _1277 = _1119;
        _1278 = _1118;
        _1279 = _1133;
        _1280 = _1132;
        _1281 = _1131;
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _1270;
        _1271 = _1270;
        _1272 = _1270;
        _1273 = _1270;
        _1274 = _1270;
        _1275 = _1270;
        _1276 = _1270;
        _1277 = _1270;
        _1278 = _1270;
        _1279 = _1270;
        _1280 = _1270;
        _1281 = _1270;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1317 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1321 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1344 = _932 + _691;
        float _1345 = _936 + _692;
        float _1346 = _940 + _693;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_691, _692, _693), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4365 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_691, _692, _693), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4398 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_691, _692, _693), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4431 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1270;
        _1583 = _1270;
        _1584 = _1270;
        _1585 = _1270;
        _1586 = _1270;
        _1587 = _1270;
        _1588 = _1270;
        _1589 = _1270;
        _1590 = _1270;
        _1591 = _1270;
        _1592 = _1270;
        _1593 = _1270;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1282)) + _1282;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1283)) + _1283;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1284)) + _1284;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _877 * 0.5;
    float _1651 = _878 * 0.5;
    float _1652 = _879 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1269, _1273, _1276, _1279));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_879, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877));
        float _1780 = fma(_879, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877));
        float _1783 = fma(_879, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1811 = frontier_phi_17_15_ladder;
        }
        float _1983;
        if (_1780 > 0.0)
        {
            _1983 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1983 = frontier_phi_26_22_ladder;
        }
        float _2278;
        if (_1783 > 0.0)
        {
            _2278 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2278 = frontier_phi_38_33_ladder;
        }
        float _2280 = isnan(_1983) ? _1811 : (isnan(_1811) ? _1983 : min(_1811, _1983));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1777) + _1766;
        float _2286 = (_2281 * _1780) + _1770;
        float _2287 = (_2281 * _1783) + _1774;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_16_38_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_16_38_ladder_2;
        _1801 = frontier_phi_16_38_ladder_1;
        _1803 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_877, _878, _879), _1719);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_879, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877));
        float _1876 = fma(_879, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877));
        float _1879 = fma(_879, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877));
        float _1988;
        if (_1873 > 0.0)
        {
            _1988 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1988 = frontier_phi_28_24_ladder;
        }
        float _2305;
        if (_1876 > 0.0)
        {
            _2305 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2305 = frontier_phi_40_35_ladder;
        }
        float _2643;
        if (_1879 > 0.0)
        {
            _2643 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2643 = frontier_phi_50_47_ladder;
        }
        float _2645 = isnan(_2305) ? _1988 : (isnan(_1988) ? _2305 : min(_1988, _2305));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1873) + _1862;
        float _2651 = (_2646 * _1876) + _1866;
        float _2652 = (_2646 * _1879) + _1870;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_25_50_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_25_50_ladder_2;
        _1900 = frontier_phi_25_50_ladder_1;
        _1902 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_877, _878, _879), _1808);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_903 * _854) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_903 * _856) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1919 = (((_903 * _857) + _904) * _869) * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1975 = _1962 / _1974;
    float _1976 = _1966 / _1974;
    float _1977 = _1970 / _1974;
    float _2124;
    float _2125;
    float _2126;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2004 = ((uint(_1977 > cbSceneParam._m0[59u].y) + uint(_1977 > cbSceneParam._m0[59u].x)) + uint(_1977 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2005 = _2004 + 43u;
        uint _2013 = _2004 + 44u;
        uint _2021 = _2004 + 45u;
        uint _2029 = _2004 + 46u;
        float _2040 = fma(_1974, cbSceneParam._m0[_2005].w, fma(_1970, cbSceneParam._m0[_2005].z, fma(_1966, cbSceneParam._m0[_2005].y, _1962 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1974, cbSceneParam._m0[_2013].w, fma(_1970, cbSceneParam._m0[_2013].z, fma(_1966, cbSceneParam._m0[_2013].y, _1962 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1974, cbSceneParam._m0[_2029].w, fma(_1970, cbSceneParam._m0[_2029].z, fma(_1966, cbSceneParam._m0[_2029].y, _1962 * cbSceneParam._m0[_2029].x)));
        float _2057 = cbSceneParam._m0[33u].z * _2052;
        float _2059 = cbSceneParam._m0[33u].w * _2052;
        float _2062 = fma(_1974, cbSceneParam._m0[_2021].w, fma(_1970, cbSceneParam._m0[_2021].z, fma(_1966, cbSceneParam._m0[_2021].y, _1962 * cbSceneParam._m0[_2021].x))) / _2052;
        float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
        float _4557 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2117 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2040) / _2052, (_2059 + _2044) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2040) / _2052, (_2044 - _2057) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2057) / _2052, (_2044 - _2059) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2059) / _2052, (_2057 + _2044) / _2052), _2062), 0.0)).x), vec4(0.25)));
        _2124 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
        _2125 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
        _2126 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2124 = 1.0;
        _2125 = 1.0;
        _2126 = 1.0;
    }
    float _2190;
    float _2192;
    float _2194;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2178 = fma(_1974, cbSceneParam._m0[63u].w, fma(_1970, cbSceneParam._m0[63u].z, fma(_1966, cbSceneParam._m0[63u].y, _1962 * cbSceneParam._m0[63u].x)));
        float _2179 = fma(_1974, cbSceneParam._m0[60u].w, fma(_1970, cbSceneParam._m0[60u].z, fma(_1966, cbSceneParam._m0[60u].y, _1962 * cbSceneParam._m0[60u].x))) / _2178;
        float _2180 = fma(_1974, cbSceneParam._m0[61u].w, fma(_1970, cbSceneParam._m0[61u].z, fma(_1966, cbSceneParam._m0[61u].y, _1962 * cbSceneParam._m0[61u].x))) / _2178;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2179 >= cbSceneParam._m0[64u].x) && (_2180 >= cbSceneParam._m0[64u].y)) && (_2179 <= cbSceneParam._m0[64u].z)) && (_2180 <= cbSceneParam._m0[64u].w))
        {
            float _2318 = fma(_1974, cbSceneParam._m0[62u].w, fma(_1970, cbSceneParam._m0[62u].z, fma(_1966, cbSceneParam._m0[62u].y, _1962 * cbSceneParam._m0[62u].x))) / _2178;
            float _2322 = isnan(cbSceneParam._m0[41u].w) ? _2318 : (isnan(_2318) ? cbSceneParam._m0[41u].w : max(_2318, cbSceneParam._m0[41u].w));
            float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
            float _4573 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
            float _2372 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2179, cbSceneParam._m0[33u].w + _2180), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2179, _2180 - cbSceneParam._m0[33u].z), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].z, _2180 - cbSceneParam._m0[33u].w), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2180), _2322), 0.0)).x), vec4(0.25)));
            float _2376 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
            float _2377 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
            float _2378 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_37_36_ladder_1 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_37_36_ladder_2 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
        }
        else
        {
            frontier_phi_37_36_ladder = _2126;
            frontier_phi_37_36_ladder_1 = _2125;
            frontier_phi_37_36_ladder_2 = _2124;
        }
        _2190 = frontier_phi_37_36_ladder_2;
        _2192 = frontier_phi_37_36_ladder_1;
        _2194 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2190 = _2124;
        _2192 = _2125;
        _2194 = _2126;
    }
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_829 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _869 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2237 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2241 = _2201 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_691, _692, _693));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_691, _692, _693));
    float _4609 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4620 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2218].x * _2224) * _2262) + (((cbLight._m0[_2228].x * _2190) * _2237) * _2260);
    float _2270 = ((_2224 * cbLight._m0[_2218].y) * _2262) + (((cbLight._m0[_2228].y * _2192) * _2237) * _2260);
    float _2271 = ((_2224 * cbLight._m0[_2218].z) * _2262) + (((cbLight._m0[_2228].z * _2194) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2277)
    {
        _2379 = _2269;
        _2381 = _2270;
        _2383 = _2271;
    }
    else
    {
        uint _2387 = _2201 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4631 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2406 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2269;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2270;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2271;
    }
    bool _2386 = _2275.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2386)
    {
        _2441 = _2379;
        _2443 = _2381;
        _2445 = _2383;
    }
    else
    {
        uint _2614 = _2201 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4647 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2633 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2441 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2379;
        _2443 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2381;
        _2445 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2383;
    }
    uint _2448 = _2201 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _694) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2201].x + _771;
    float _2464 = cbLight._m0[_2201].y + _772;
    float _2465 = cbLight._m0[_2201].z + _773;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2201].xyz));
    float _4663 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2477 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2478 = dot(vec3(_691, _692, _693), vec3(_2470, _2471, _2472));
    float _4685 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2470, _2471, _2472));
    float _4696 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2499 = 0.959999978542327880859375 - _851;
    float _2501 = 0.959999978542327880859375 - _852;
    float _2502 = 0.959999978542327880859375 - _853;
    float _2509 = 1.0 - _2462;
    float _2520 = (0.5 / (((_2477 * ((_2476 * _2509) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2509) + _2462) * _2476))) * _2476;
    float _4707 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2536 = _2201 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _694) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2241].x + _771;
    float _2550 = cbLight._m0[_2241].y + _772;
    float _2551 = cbLight._m0[_2241].z + _773;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2241].xyz));
    float _4718 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2563 = dot(vec3(_691, _692, _693), vec3(_2556, _2557, _2558));
    float _4729 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2556, _2557, _2558));
    float _4740 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2477 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2589) + _2548) * _2562))) * _2562;
    float _4751 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2499) + _854) * cbLight._m0[_2536].x) * _2601) * _2224) + ((((cbLight._m0[_2448].x * _2190) * ((_2498 * _2499) + _854)) * _2522) * _2237);
    float _2612 = (((((_2582 * _2501) + _856) * cbLight._m0[_2536].y) * _2601) * _2224) + ((((cbLight._m0[_2448].y * _2192) * ((_2498 * _2501) + _856)) * _2522) * _2237);
    float _2613 = (((((_2582 * _2502) + _857) * cbLight._m0[_2536].z) * _2601) * _2224) + ((((cbLight._m0[_2448].z * _2194) * ((_2498 * _2502) + _857)) * _2522) * _2237);
    float _2669;
    float _2671;
    float _2673;
    if (_2277)
    {
        _2669 = _2611;
        _2671 = _2612;
        _2673 = _2613;
    }
    else
    {
        uint _2675 = _2201 + 2u;
        uint _2679 = _2201 + 10u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _694) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _771;
        float _2696 = cbLight._m0[_2675].y + _772;
        float _2697 = cbLight._m0[_2675].z + _773;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2675].xyz));
        float _4762 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2709 = dot(vec3(_691, _692, _693), vec3(_2702, _2703, _2704));
        float _4773 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4784 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2735 = 1.0 - _2694;
        float _2745 = (0.5 / (((_2477 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2735) + _2694) * _2708))) * _2708;
        float _4795 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2669 = (((((_2728 * _2499) + _854) * cbLight._m0[_2679].x) * _2747) * _2748) + _2611;
        _2671 = (((((_2728 * _2501) + _856) * cbLight._m0[_2679].y) * _2747) * _2748) + _2612;
        _2673 = (((((_2728 * _2502) + _857) * cbLight._m0[_2679].z) * _2747) * _2748) + _2613;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2386)
    {
        _2779 = _2669;
        _2781 = _2671;
        _2783 = _2673;
    }
    else
    {
        uint _2790 = _2201 + 3u;
        uint _2794 = _2201 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _694) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _771;
        float _2811 = cbLight._m0[_2790].y + _772;
        float _2812 = cbLight._m0[_2790].z + _773;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2790].xyz));
        float _4811 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2824 = dot(vec3(_691, _692, _693), vec3(_2817, _2818, _2819));
        float _4822 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4833 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2843 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2850 = 1.0 - _2809;
        float _2860 = (0.5 / (((_2477 * ((_2823 * _2850) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2850) + _2809) * _2823))) * _2823;
        float _4844 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2862 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2863 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2779 = (((((_2843 * _2499) + _854) * cbLight._m0[_2794].x) * _2862) * _2863) + _2669;
        _2781 = (((((_2843 * _2501) + _856) * cbLight._m0[_2794].y) * _2862) * _2863) + _2671;
        _2783 = (((((_2843 * _2502) + _857) * cbLight._m0[_2794].z) * _2862) * _2863) + _2673;
    }
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_2199.y == 0u)
    {
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.x;
        uint _2896 = uint((float(_2884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2885))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2885)));
        float _2906 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2907 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        uint _2910 = uint(isnan(14.0) ? _2907 : (isnan(_2907) ? 14.0 : min(_2907, 14.0)));
        uvec4 _2915 = texelFetch(g_lightClusterGridBuffer, int(((_2910 << 2u) + (_2896 << 6u)) >> 2u));
        uint _2916 = _2915.x;
        uint _2917 = _2884.z;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((((1u << ((_2917 >> 4u) & 15u)) + 4294967295u) & _2916) == 0u) || ((_2917 & 240u) == 0u))
        {
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
        }
        else
        {
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3218)
                {
                    frontier_phi_71_pred = _3207;
                    frontier_phi_71_pred_1 = _3206;
                    frontier_phi_71_pred_2 = _3205;
                    frontier_phi_71_pred_3 = _3204;
                    frontier_phi_71_pred_4 = _3203;
                    frontier_phi_71_pred_5 = _3202;
                }
                else
                {
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    uint _3353;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3217;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    for (;;)
                    {
                        uint _3357 = uint(findLSB(_3353)) + (_3208 << 5u);
                        uint _3354 = (_3353 + 4294967295u) & _3353;
                        uint _3359 = _3357 * 48u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3379 = (_3357 * 48u) + 4u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3398 = (_3357 * 48u) + 8u;
                        vec3 _3409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x));
                        float _3413 = _3373.x - _1975;
                        float _3414 = _3373.y - _1976;
                        float _3415 = _3373.z - _1977;
                        float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                        float _3419 = inversesqrt(_3416);
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3423 = dot(vec3(_810, _813, _816), vec3(_3420, _3421, _3422));
                        float _3428 = 1.0 - (_3416 * _3373.w);
                        float _4870 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3430 = sqrt(_3416) * _3392.w;
                        float _3433 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3423) + _3434;
                        float _3440 = _3430 * _3430;
                        float _3444 = ((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3429) / ((_3440 * 0.699999988079071044921875) + 1.0);
                        float _3448 = (-0.0) - _1975;
                        float _3449 = (-0.0) - _1976;
                        float _3450 = (-0.0) - _1977;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3464 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _885;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3477 = _3457 + _3422;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_810, _813, _816), vec3(_3455, _3456, _3457));
                        float _4886 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3489 = dot(vec3(_810, _813, _816), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4897 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3433 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3423) + _3498;
                        float _4908 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4919 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3496 * _3496) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125))) * _3429;
                        _3277 = (_3444 * _3392.x) + _3350;
                        _3278 = (_3444 * _3392.y) + _3351;
                        _3279 = (_3444 * _3392.z) + _3352;
                        _3274 = (_3524 * _3409.x) + _3347;
                        _3275 = (_3524 * _3409.y) + _3348;
                        _3276 = (_3524 * _3409.z) + _3349;
                        if (_3354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3354;
                        }
                    }
                    frontier_phi_71_pred = _3279;
                    frontier_phi_71_pred_1 = _3278;
                    frontier_phi_71_pred_2 = _3277;
                    frontier_phi_71_pred_3 = _3276;
                    frontier_phi_71_pred_4 = _3275;
                    frontier_phi_71_pred_5 = _3274;
                }
                _3052 = frontier_phi_71_pred;
                _3050 = frontier_phi_71_pred_1;
                _3048 = frontier_phi_71_pred_2;
                _3046 = frontier_phi_71_pred_3;
                _3044 = frontier_phi_71_pred_4;
                _3042 = frontier_phi_71_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3042;
                    _3203 = _3044;
                    _3204 = _3046;
                    _3205 = _3048;
                    _3206 = _3050;
                    _3207 = _3052;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
        }
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.z;
        uint _3058 = (_3056 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3058) & _2916) == 0u)
        {
            _3170 = _3041;
            _3172 = _3043;
            _3174 = _3045;
            _3176 = _3047;
            _3178 = _3049;
            _3180 = _3051;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _3196 = _3195 * _1975;
            float _3197 = _3195 * _1976;
            float _3198 = _3195 * _1977;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3058 < ((_3056 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3330 = _3041;
                float _3331 = _3043;
                float _3332 = _3045;
                float _3333 = _3047;
                float _3334 = _3049;
                float _3335 = _3051;
                uint _3336 = _3058;
                uint _3345;
                bool _3346;
                for (;;)
                {
                    _3345 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                    _3346 = _3345 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3346)
                    {
                        frontier_phi_82_pred = _3335;
                        frontier_phi_82_pred_1 = _3334;
                        frontier_phi_82_pred_2 = _3333;
                        frontier_phi_82_pred_3 = _3332;
                        frontier_phi_82_pred_4 = _3331;
                        frontier_phi_82_pred_5 = _3330;
                    }
                    else
                    {
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        uint _3557 = _3345;
                        uint _3558;
                        vec4 _3583;
                        float _3584;
                        vec4 _3599;
                        vec3 _3611;
                        vec4 _3626;
                        vec4 _3642;
                        float _3689;
                        bool _3690;
                        for (;;)
                        {
                            uint _3568 = ((_3336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3557));
                            _3558 = (_3557 + 4294967295u) & _3557;
                            uint _3570 = _3568 * 40u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3584 = _3583.w;
                            uint _3586 = (_3568 * 40u) + 4u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3568 * 40u) + 8u;
                            _3611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x));
                            uint _3613 = (_3568 * 40u) + 16u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3629 = (_3568 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3645 = (_3568 * 40u) + 24u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3664 = (_3568 * 40u) + 28u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            _3689 = fma(_1977, _3677.z, fma(_1976, _3677.y, _3677.x * _1975)) + _3677.w;
                            _3690 = !((fma(_1977, _3658.z, fma(_1976, _3658.y, _3658.x * _1975)) + _3658.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3690)
                            {
                                float _3717 = _3583.x - _1975;
                                float _3718 = _3583.y - _1976;
                                float _3719 = _3583.z - _1977;
                                float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                                float _3723 = inversesqrt(_3720);
                                float _3724 = _3723 * _3717;
                                float _3725 = _3723 * _3718;
                                float _3726 = _3723 * _3719;
                                float _3730 = 1.0 - (_3720 / (_3584 * _3584));
                                float _4930 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3735 = sqrt(_3720) * _3599.w;
                                float _3737 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                                float _3738 = _3737 * _3737;
                                float _3741 = ((1.0 - _3738) * dot(vec3(_3724, _3725, _3726), vec3(_810, _813, _816))) + _3738;
                                float _3744 = _3735 * _3735;
                                float _3748 = (fma(_1977, _3626.z, fma(_1976, _3626.y, _3626.x * _1975)) + _3626.w) / _3689;
                                float _3749 = (fma(_1977, _3642.z, fma(_1976, _3642.y, _3642.x * _1975)) + _3642.w) / _3689;
                                float _3753 = 1.0 - dot(vec2(_3748, _3749), vec2(_3748, _3749));
                                float _4946 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3755 = _3754 * (((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3731) / ((_3744 * 0.699999988079071044921875) + 1.0));
                                float _3767 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                                float _3768 = 1.0 - _885;
                                float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                                float _3776 = _3775 * _3775;
                                float _3777 = _3776 * _3776;
                                float _3778 = _3724 - _3196;
                                float _3779 = _3725 - _3197;
                                float _3780 = _3726 - _3198;
                                float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                                float _3788 = dot(vec3(_810, _813, _816), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4957 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3792 = dot(vec3(_810, _813, _816), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                                float _4968 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                                float _3800 = _3737 * _3776;
                                float _3801 = _3800 * _3800;
                                float _3807 = ((1.0 - _3801) * dot(vec3(_810, _813, _816), vec3(_3724, _3725, _3726))) + _3801;
                                float _4979 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3809 = 1.0 - _3776;
                                float _3819 = (0.5 / (((_3808 * ((_3791 * _3809) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3808 * _3809) + _3776) * _3791))) * _3808;
                                float _4990 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3829 = (_3754 * _3731) * (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3799 * _3799) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3755 * _3599.z;
                                frontier_phi_88_pred_1 = _3755 * _3599.y;
                                frontier_phi_88_pred_2 = _3755 * _3599.x;
                                frontier_phi_88_pred_3 = _3829 * _3611.z;
                                frontier_phi_88_pred_4 = _3829 * _3611.y;
                                frontier_phi_88_pred_5 = _3829 * _3611.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_88_pred;
                            _3837 = frontier_phi_88_pred_1;
                            _3836 = frontier_phi_88_pred_2;
                            _3835 = frontier_phi_88_pred_3;
                            _3834 = frontier_phi_88_pred_4;
                            _3833 = frontier_phi_88_pred_5;
                            _3541 = _3836 + _3554;
                            _3542 = _3837 + _3555;
                            _3543 = _3838 + _3556;
                            _3538 = _3833 + _3551;
                            _3539 = _3834 + _3552;
                            _3540 = _3835 + _3553;
                            if (_3558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3558;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3543;
                        frontier_phi_82_pred_1 = _3542;
                        frontier_phi_82_pred_2 = _3541;
                        frontier_phi_82_pred_3 = _3540;
                        frontier_phi_82_pred_4 = _3539;
                        frontier_phi_82_pred_5 = _3538;
                    }
                    _3181 = frontier_phi_82_pred;
                    _3179 = frontier_phi_82_pred_1;
                    _3177 = frontier_phi_82_pred_2;
                    _3175 = frontier_phi_82_pred_3;
                    _3173 = frontier_phi_82_pred_4;
                    _3171 = frontier_phi_82_pred_5;
                    uint _3337 = _3336 + 1u;
                    if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3330 = _3171;
                        _3331 = _3173;
                        _3332 = _3175;
                        _3333 = _3177;
                        _3334 = _3179;
                        _3335 = _3181;
                        _3336 = _3337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3177;
                frontier_phi_63_64_ladder_1 = _3181;
                frontier_phi_63_64_ladder_2 = _3179;
                frontier_phi_63_64_ladder_3 = _3175;
                frontier_phi_63_64_ladder_4 = _3173;
                frontier_phi_63_64_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_63_64_ladder = _3047;
                frontier_phi_63_64_ladder_1 = _3051;
                frontier_phi_63_64_ladder_2 = _3049;
                frontier_phi_63_64_ladder_3 = _3045;
                frontier_phi_63_64_ladder_4 = _3043;
                frontier_phi_63_64_ladder_5 = _3041;
            }
            _3170 = frontier_phi_63_64_ladder_5;
            _3172 = frontier_phi_63_64_ladder_4;
            _3174 = frontier_phi_63_64_ladder_3;
            _3176 = frontier_phi_63_64_ladder;
            _3178 = frontier_phi_63_64_ladder_2;
            _3180 = frontier_phi_63_64_ladder_1;
        }
        float _3185 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2929 = (_3185 * _3176) + _2441;
        _2931 = (_3185 * _3178) + _2443;
        _2933 = (_3185 * _3180) + _2445;
        _2935 = ((_3170 * _854) * _3185) + _2779;
        _2937 = ((_3172 * _856) * _3185) + _2781;
        _2939 = ((_3174 * _857) * _3185) + _2783;
    }
    else
    {
        _2929 = _2441;
        _2931 = _2443;
        _2933 = _2445;
        _2935 = _2779;
        _2937 = _2781;
        _2939 = _2783;
    }
    uint _2945 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _2951 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2957 = (((((_2951 * cbMtdParam._m0[11u].x) * (((_549.x - _546) * _527) + _546)) * _578) * (((1.0 - _631) * cbMtdParam._m0[16u].y) + _631)) * _668) * cbInstanceData._m0[_2945].x;
    float _2963 = (((((_2951 * cbMtdParam._m0[11u].y) * (((_549.y - _547) * _527) + _547)) * _578) * (((1.0 - _633) * cbMtdParam._m0[16u].y) + _633)) * _668) * cbInstanceData._m0[_2945].y;
    float _2969 = (((((_2951 * cbMtdParam._m0[11u].z) * (((_549.z - _548) * _527) + _548)) * _578) * (((1.0 - _635) * cbMtdParam._m0[16u].y) + _635)) * _668) * cbInstanceData._m0[_2945].z;
    float _5006 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _5017 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _5028 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2986 = (((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2929 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _869))) + ((_2935 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + _2957;
    float _2988 = (_2963 + ((_2937 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2931 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _869)));
    float _2990 = (_2969 + ((_2939 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1708)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2933 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _869)));
    float _2991 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
    float _2992 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2993 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2999 = cbMtdParam._m0[2u].x * _2957;
    float _3000 = cbMtdParam._m0[2u].y * _2963;
    float _3001 = cbMtdParam._m0[2u].z * _2969;
    float _5054 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3003 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
    uint _3004 = _829 + 6u;
    float _3012 = _791 / cbSceneParam._m0[86u].x;
    float _3013 = _792 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _3066 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _3067 = _3066 / _714;
        float _3078 = _3067 * _764;
        float _3079 = _765 * _3067;
        float _3080 = (-0.0) - _3079;
        float _3081 = _3067 * _766;
        float _3083 = (cbSceneParam._m0[77u].w * _3080) / _3066;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3079;
        float _3091 = sqrt(((_3078 * _3078) + (_3079 * _3079)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3066)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3287;
        if (abs((_3080 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3287 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3233 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3287 = ((abs(_3091 / _3080) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3101 * _3242) - exp2(_3101 * _3243)) * _3231))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3289 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3298 = exp2((_3287 * (-1.44269502162933349609375)) * (1.0 - _3289.w));
        float _3299 = log2(_3298);
        float _3315 = log2(_3032);
        _3103 = (exp2(_3315 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].x)) * _3289.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3105 = (exp2(_3315 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].y)) * _3289.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3107 = (exp2(_3315 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].z)) * _3289.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3109 = _3298 * _3032;
    }
    else
    {
        _3103 = _3029;
        _3105 = _3030;
        _3107 = _3031;
        _3109 = _3032;
    }
    bool _3325;
    vec4 _3119;
    vec4 _3141;
    float _3143;
    float _3147;
    float _3148;
    float _3149;
    float _3152;
    float _3155;
    float _3158;
    float _3159;
    bool _3169;
    for (;;)
    {
        _3119 = cbMatDynParam._m0[0u];
        float _3121 = roundEven(_3119.y);
        bool _3122 = _3121 == 3.0;
        float _3123 = log2(_3109);
        float _3127 = exp2(_3123 * cbSceneParam._m0[78u].x);
        float _3128 = exp2(_3123 * cbSceneParam._m0[78u].y);
        float _3129 = exp2(_3123 * cbSceneParam._m0[78u].z);
        float _3130 = _3127 * _2991;
        float _3131 = _3128 * _2992;
        float _3132 = _3129 * _2993;
        float _3139 = _780 + (-0.5);
        _3141 = cbMtdParam._m0[1u];
        _3143 = _3141.y * _3139;
        float _3146 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3147 = _3146 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = _3146 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = _3146 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
        _3152 = ((_2999 * _3003) * _3127) * _3146;
        _3155 = ((_3000 * _3003) * _3128) * _3146;
        _3158 = ((_3001 * _3003) * _3129) * _3146;
        _3159 = _3139 * 0.999000012874603271484375;
        _3169 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3169)
        {
            if ((cbInstanceData._m0[_829 + 7u].x + _3159) < 0.5)
            {
                _3325 = true;
                break;
            }
        }
        uint _3266 = _830 + uint(_3119.w);
        if ((cbInstanceData._m0[_3266].w < 1.0) && ((cbInstanceData._m0[_3266].w + _3159) < 0.5))
        {
            _3325 = true;
            break;
        }
        if ((_3143 + 1.0) < _3141.x)
        {
            _3325 = true;
            break;
        }
        _3325 = false;
        break;
    }
    float _3529;
    if (_3325)
    {
        discard_state = true;
        _3529 = 0.0;
    }
    else
    {
        _3529 = cbInstanceData._m0[_3004].w;
    }
    SV_Target.x = _3147;
    SV_Target.y = _3148;
    SV_Target.z = _3149;
    SV_Target.w = _3529;
    SV_Target_1.x = _3152;
    SV_Target_1.y = _3155;
    SV_Target_1.z = _3158;
    SV_Target_1.w = cbInstanceData._m0[_3004].w;
    discard_exit();
}


