#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1250;
float _3710;
float _3711;
float _3712;
float _3713;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    vec4 _261 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _261.x * cbMtdParam._m0[9u].x;
    float _268 = _261.y * cbMtdParam._m0[9u].y;
    float _269 = _261.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _318 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (_307.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3722 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _319 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _326 = (_319 * ((_287.x * cbMtdParam._m0[10u].x) - _267)) + _267;
    float _327 = (_319 * ((_287.y * cbMtdParam._m0[10u].y) - _268)) + _268;
    float _328 = (_319 * ((_287.z * cbMtdParam._m0[10u].z) - _269)) + _269;
    vec4 _341 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _344 = _319 * _341.x;
    vec4 _358 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _366 = (_358.x * 2.0) + (-1.0);
    float _368 = (_358.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_366, _368), vec2(_366, _368));
    float _3733 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    vec4 _387 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _391 = _387.z;
    float _394 = (_387.x * 2.0) + (-1.0);
    float _395 = (_387.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3744 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _406 = ((((_358.z * cbMtdParam._m0[16u].w) - _391) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _391;
    float _429 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _430 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _453 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _459 = (_453.x * 2.0) + (-1.0);
    float _460 = (_453.y * 2.0) + (-1.0);
    float _464 = 1.0 - dot(vec2(_459, _460), vec2(_459, _460));
    float _3755 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = sqrt(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)));
    float _469 = fma(_466, _225, fma(_460, _232, _459 * _218));
    float _472 = fma(_466, _226, fma(_460, _233, _459 * _219));
    float _475 = fma(_466, _227, fma(_460, _234, _459 * _220));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _481 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _490 = (((_472 * 0.5) * _479) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _492 = (-0.0) - (cbMtdParam._m0[14u].w * (((_469 * 0.5) * _479) + (-0.25)));
    float _494 = fract(_481);
    float _496 = fract(_481 + 0.5);
    float _507 = abs((_494 * 2.0) + (-1.0));
    vec4 _524 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_494 * _492) + _429) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_490 * _494) + _430) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    vec4 _529 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_496 * _492) + _429) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_490 * _496) + _430) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _549 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3766 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _558 = (((_550 * _550) * (3.0 - (_550 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _567 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _575 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3777 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _580 = (_576 * _576) * (3.0 - (_576 * 2.0));
    float _581 = _580 * cbMtdParam._m0[17u].y;
    float _582 = _580 * cbMtdParam._m0[17u].z;
    float _583 = sin(_567);
    float _584 = cos(_567);
    float _585 = TEXCOORD.z - _581;
    float _586 = TEXCOORD.w - _582;
    vec4 _605 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_581 + fma(_586, (-0.0) - _583, _585 * _584))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_586, _584, _585 * _583) + _582)) + cbTextureTilingScale._m0[1u].w));
    float _611 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _605.x;
    float _613 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _605.y;
    float _615 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _605.z;
    vec4 _638 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _429) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _430) + cbTextureTilingScale._m0[6u].w));
    float _647 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_638.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3788 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _655 = (_319 * (_366 - _394)) + _394;
    float _656 = (_319 * (_368 - _395)) + _395;
    float _657 = (_319 * (sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) - _401)) + _401;
    float _660 = fma(_657, _225, fma(_656, _232, _655 * _218));
    float _663 = fma(_657, _226, fma(_656, _233, _655 * _219));
    float _666 = fma(_657, _227, fma(_656, _234, _655 * _220));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3799 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _674 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3821 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3832 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3843 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _678 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    vec4 _758 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _760 = _758.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _931 = sqrt(((_744 * _744) + (_745 * _745)) + (_746 * _746));
        float _937 = (cbMatDynParam._m0[5u].x * _931) + cbMatDynParam._m0[5u].y;
        float _3854 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _942 = (cbMatDynParam._m0[5u].z * _931) + cbMatDynParam._m0[5u].w;
        float _3865 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) - _938)) + _938) < ((_760 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _771 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _772 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _790 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _793 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _796 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _809 = uint(roundEven(NORMAL.w)) * 13u;
    uint _810 = _809 + 9u;
    uint _811 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3876 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _823 = 1.0 - _678;
    float _824 = _820 * _823;
    float _825 = _821 * _823;
    float _826 = _822 * _823;
    float _831 = (_820 + (-0.039999999105930328369140625)) * _678;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _678;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _678;
    float _834 = _831 + 0.039999999105930328369140625;
    float _836 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _771, cbSceneParam._m0[86u].y * _772));
    float _849 = _846.x * TEXCOORD_6.w;
    float _850 = dot(vec3(_671, _672, _673), vec3(_751, _752, _753));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _671) - _751;
    float _858 = (_853 * _672) - _752;
    float _859 = (_853 * _673) - _753;
    float _863 = abs(dot(vec3(_751, _752, _753), vec3(_671, _672, _673)));
    float _3909 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_674);
    float _877 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _883 = (1.0 - _877) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _884 = _877 * _865;
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1249;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_920, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912));
        float _979 = fma(_920, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912));
        float _983 = fma(_920, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912));
        float _1007 = _912 + _671;
        float _1008 = _916 + _672;
        float _1009 = _920 + _673;
        float _1019 = fma(_1009, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007)) - _975;
        float _1020 = fma(_1009, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007)) - _979;
        float _1021 = fma(_1009, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007)) - _983;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1077 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1043.x + (-0.5));
        float _1079 = _1077 * (_1043.y + (-0.5));
        float _1080 = _1077 * (_1043.z + (-0.5));
        float _1087 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1050.x + (-0.5));
        float _1089 = _1087 * (_1050.y + (-0.5));
        float _1090 = _1087 * (_1050.z + (-0.5));
        float _1097 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1057.x + (-0.5));
        float _1099 = _1097 * (_1057.y + (-0.5));
        float _1100 = _1097 * (_1057.z + (-0.5));
        float _1107 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1064.x + (-0.5));
        float _1109 = _1107 * (_1064.y + (-0.5));
        float _1110 = _1107 * (_1064.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1131 = (dot(vec3(_671, _672, _673), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1141 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3957 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1143 + 1.0))) + _1148) * _1111;
        float _1158 = _1079 * 0.5;
        float _1159 = _1089 * 0.5;
        float _1160 = _1099 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_671, _672, _673), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3990 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1185 + 1.0))) + _1190) * _1112;
        float _1200 = _1080 * 0.5;
        float _1201 = _1090 * 0.5;
        float _1202 = _1100 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_671, _672, _673), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4023 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1227 + 1.0))) + _1232) * _1113;
        _1249 = _1080;
        _1251 = _1079;
        _1252 = _1078;
        _1253 = _1090;
        _1254 = _1089;
        _1255 = _1088;
        _1256 = _1100;
        _1257 = _1099;
        _1258 = _1098;
        _1259 = _1113;
        _1260 = _1112;
        _1261 = _1111;
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _1250;
        _1251 = _1250;
        _1252 = _1250;
        _1253 = _1250;
        _1254 = _1250;
        _1255 = _1250;
        _1256 = _1250;
        _1257 = _1250;
        _1258 = _1250;
        _1259 = _1250;
        _1260 = _1250;
        _1261 = _1250;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_920, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912));
        float _1297 = fma(_920, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912));
        float _1301 = fma(_920, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912));
        float _1324 = _912 + _671;
        float _1325 = _916 + _672;
        float _1326 = _920 + _673;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_671, _672, _673), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4086 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_671, _672, _673), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4119 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_671, _672, _673), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4152 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1250;
        _1563 = _1250;
        _1564 = _1250;
        _1565 = _1250;
        _1566 = _1250;
        _1567 = _1250;
        _1568 = _1250;
        _1569 = _1250;
        _1570 = _1250;
        _1571 = _1250;
        _1572 = _1250;
        _1573 = _1250;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1262)) + _1262;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1263)) + _1263;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1264)) + _1264;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _857 * 0.5;
    float _1631 = _858 * 0.5;
    float _1632 = _859 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1249, _1253, _1256, _1259));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_920, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_920, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_920, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1760 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1763 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1791 = frontier_phi_17_15_ladder;
        }
        float _2015;
        if (_1760 > 0.0)
        {
            _2015 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2015 = frontier_phi_26_22_ladder;
        }
        float _2272;
        if (_1763 > 0.0)
        {
            _2272 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2272 = frontier_phi_38_33_ladder;
        }
        float _2274 = isnan(_2015) ? _1791 : (isnan(_1791) ? _2015 : min(_1791, _2015));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1757) + _1746;
        float _2280 = (_2275 * _1760) + _1750;
        float _2281 = (_2275 * _1763) + _1754;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2282;
        float _2286 = _2282 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 > _2286) || ((_2280 < _2284) || ((_2279 < _2284) || (_2279 > _2286))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_16_38_ladder = _2409.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2409.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2409.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_16_38_ladder_2;
        _1781 = frontier_phi_16_38_ladder_1;
        _1783 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1699);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_920, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_920, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_920, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1856 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1859 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _2020;
        if (_1853 > 0.0)
        {
            _2020 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2020 = frontier_phi_28_24_ladder;
        }
        float _2299;
        if (_1856 > 0.0)
        {
            _2299 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2299 = frontier_phi_40_35_ladder;
        }
        float _2512;
        if (_1859 > 0.0)
        {
            _2512 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2512 = frontier_phi_49_46_ladder;
        }
        float _2514 = isnan(_2299) ? _2020 : (isnan(_2020) ? _2299 : min(_2020, _2299));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1853) + _1842;
        float _2520 = (_2515 * _1856) + _1846;
        float _2521 = (_2515 * _1859) + _1850;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_25_49_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_25_49_ladder_2;
        _1880 = frontier_phi_25_49_ladder_1;
        _1882 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1788);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_883 * _834) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1897 = (((_883 * _836) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1899 = (((_883 * _837) + _884) * _849) * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    vec4 _1916 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_771, _772));
    float _1918 = _1916.w;
    float _1930 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1918);
    float _1931 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1918);
    float _1932 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1918);
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_809 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _849 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1974 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1978 = _1938 | 1u;
    float _1989 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_671, _672, _673));
    float _1992 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_671, _672, _673));
    float _4288 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _4299 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1997 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _1999 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2006 = ((cbLight._m0[_1955].x * _1961) * _1999) + (((cbLight._m0[_1965].x * _1930) * _1974) * _1997);
    float _2007 = ((_1961 * cbLight._m0[_1955].y) * _1999) + (((cbLight._m0[_1965].y * _1931) * _1974) * _1997);
    float _2008 = ((_1961 * cbLight._m0[_1955].z) * _1999) + (((cbLight._m0[_1965].z * _1932) * _1974) * _1997);
    uvec4 _2012 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2014 = _2012.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_2014)
    {
        _2025 = _2006;
        _2027 = _2007;
        _2029 = _2008;
    }
    else
    {
        uint _2033 = _1938 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4310 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2052 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _2006;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _2007;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _2008;
    }
    bool _2032 = _2012.y == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2032)
    {
        _2070 = _2025;
        _2072 = _2027;
        _2074 = _2029;
    }
    else
    {
        uint _2243 = _1938 + 7u;
        float _2259 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4326 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2262 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2070 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2025;
        _2072 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2027;
        _2074 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2029;
    }
    uint _2077 = _1938 + 8u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _674) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1938].x + _751;
    float _2093 = cbLight._m0[_1938].y + _752;
    float _2094 = cbLight._m0[_1938].z + _753;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1938].xyz));
    float _4342 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2106 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2107 = dot(vec3(_671, _672, _673), vec3(_2099, _2100, _2101));
    float _4364 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2099, _2100, _2101));
    float _4375 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2091 * _2091;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2128 = 0.959999978542327880859375 - _831;
    float _2130 = 0.959999978542327880859375 - _832;
    float _2131 = 0.959999978542327880859375 - _833;
    float _2138 = 1.0 - _2091;
    float _2149 = (0.5 / (((_2106 * ((_2105 * _2138) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2138) + _2091) * _2105))) * _2105;
    float _4386 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    uint _2165 = _1938 + 9u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _674) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1978].x + _751;
    float _2179 = cbLight._m0[_1978].y + _752;
    float _2180 = cbLight._m0[_1978].z + _753;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1978].xyz));
    float _4397 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2192 = dot(vec3(_671, _672, _673), vec3(_2185, _2186, _2187));
    float _4408 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2185, _2186, _2187));
    float _4419 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2177 * _2177;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2218 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2106 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2218) + _2177) * _2191))) * _2191;
    float _4430 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    float _2240 = (((((_2211 * _2128) + _834) * cbLight._m0[_2165].x) * _2230) * _1961) + ((((cbLight._m0[_2077].x * _1930) * ((_2127 * _2128) + _834)) * _2151) * _1974);
    float _2241 = (((((_2211 * _2130) + _836) * cbLight._m0[_2165].y) * _2230) * _1961) + ((((cbLight._m0[_2077].y * _1931) * ((_2127 * _2130) + _836)) * _2151) * _1974);
    float _2242 = (((((_2211 * _2131) + _837) * cbLight._m0[_2165].z) * _2230) * _1961) + ((((cbLight._m0[_2077].z * _1932) * ((_2127 * _2131) + _837)) * _2151) * _1974);
    float _2304;
    float _2306;
    float _2308;
    if (_2014)
    {
        _2304 = _2240;
        _2306 = _2241;
        _2308 = _2242;
    }
    else
    {
        uint _2310 = _1938 + 2u;
        uint _2314 = _1938 + 10u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _674) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _751;
        float _2331 = cbLight._m0[_2310].y + _752;
        float _2332 = cbLight._m0[_2310].z + _753;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2310].xyz));
        float _4441 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2344 = dot(vec3(_671, _672, _673), vec3(_2337, _2338, _2339));
        float _4452 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4463 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2370 = 1.0 - _2329;
        float _2380 = (0.5 / (((_2106 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2370) + _2329) * _2343))) * _2343;
        float _4474 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2304 = (((((_2363 * _2128) + _834) * cbLight._m0[_2314].x) * _2382) * _2383) + _2240;
        _2306 = (((((_2363 * _2130) + _836) * cbLight._m0[_2314].y) * _2382) * _2383) + _2241;
        _2308 = (((((_2363 * _2131) + _837) * cbLight._m0[_2314].z) * _2382) * _2383) + _2242;
    }
    float _2418;
    float _2420;
    float _2422;
    if (_2032)
    {
        _2418 = _2304;
        _2420 = _2306;
        _2422 = _2308;
    }
    else
    {
        uint _2429 = _1938 + 3u;
        uint _2433 = _1938 + 11u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _674) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _751;
        float _2450 = cbLight._m0[_2429].y + _752;
        float _2451 = cbLight._m0[_2429].z + _753;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2429].xyz));
        float _4490 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2463 = dot(vec3(_671, _672, _673), vec3(_2456, _2457, _2458));
        float _4501 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4512 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2106 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2489) + _2448) * _2462))) * _2462;
        float _4523 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2418 = (((((_2482 * _2128) + _834) * cbLight._m0[_2433].x) * _2501) * _2502) + _2304;
        _2420 = (((((_2482 * _2130) + _836) * cbLight._m0[_2433].y) * _2501) * _2502) + _2306;
        _2422 = (((((_2482 * _2131) + _837) * cbLight._m0[_2433].z) * _2501) * _2502) + _2308;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1936.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _772) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _771) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
        }
        else
        {
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            uint _2937 = 0u;
            uint _2946;
            bool _2947;
            for (;;)
            {
                _2946 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                _2947 = _2946 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2947)
                {
                    frontier_phi_66_pred = _2931;
                    frontier_phi_66_pred_1 = _2936;
                    frontier_phi_66_pred_2 = _2935;
                    frontier_phi_66_pred_3 = _2934;
                    frontier_phi_66_pred_4 = _2933;
                    frontier_phi_66_pred_5 = _2932;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2946;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2937 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _2578;
                        float _3143 = _3102.y - _2579;
                        float _3144 = _3102.z - _2580;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_790, _793, _796), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4549 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _2578;
                        float _3178 = (-0.0) - _2579;
                        float _3179 = (-0.0) - _2580;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3194 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _865;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_790, _793, _796), vec3(_3184, _3185, _3186));
                        float _4565 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3219 = dot(vec3(_790, _793, _796), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4576 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3162 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3152) + _3228;
                        float _4587 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4598 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3226 * _3226) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3006 = (_3173 * _3121.x) + _3079;
                        _3007 = (_3173 * _3121.y) + _3080;
                        _3008 = (_3173 * _3121.z) + _3081;
                        _3003 = (_3254 * _3138.x) + _3076;
                        _3004 = (_3254 * _3138.y) + _3077;
                        _3005 = (_3254 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_66_pred = _3003;
                    frontier_phi_66_pred_1 = _3008;
                    frontier_phi_66_pred_2 = _3007;
                    frontier_phi_66_pred_3 = _3006;
                    frontier_phi_66_pred_4 = _3005;
                    frontier_phi_66_pred_5 = _3004;
                }
                _2771 = frontier_phi_66_pred;
                _2781 = frontier_phi_66_pred_1;
                _2779 = frontier_phi_66_pred_2;
                _2777 = frontier_phi_66_pred_3;
                _2775 = frontier_phi_66_pred_4;
                _2773 = frontier_phi_66_pred_5;
                uint _2938 = _2937 + 1u;
                if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2931 = _2771;
                    _2932 = _2773;
                    _2933 = _2775;
                    _2934 = _2777;
                    _2935 = _2779;
                    _2936 = _2781;
                    _2937 = _2938;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
        }
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.z;
        uint _2787 = (_2785 >> 8u) & 15u;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((4294967295u << _2787) & _2624) == 0u)
        {
            _2899 = _2770;
            _2901 = _2772;
            _2903 = _2774;
            _2905 = _2776;
            _2907 = _2778;
            _2909 = _2780;
        }
        else
        {
            float _2924 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2925 = _2924 * _2578;
            float _2926 = _2924 * _2579;
            float _2927 = _2924 * _2580;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2787 < ((_2785 >> 12u) & 15u))
            {
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _3059 = _2770;
                float _3060 = _2772;
                float _3061 = _2774;
                float _3062 = _2776;
                float _3063 = _2778;
                float _3064 = _2780;
                uint _3065 = _2787;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3075)
                    {
                        frontier_phi_77_pred = _3064;
                        frontier_phi_77_pred_1 = _3063;
                        frontier_phi_77_pred_2 = _3062;
                        frontier_phi_77_pred_3 = _3061;
                        frontier_phi_77_pred_4 = _3060;
                        frontier_phi_77_pred_5 = _3059;
                    }
                    else
                    {
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        uint _3287 = _3074;
                        uint _3288;
                        vec4 _3313;
                        float _3314;
                        vec4 _3329;
                        vec3 _3341;
                        vec4 _3356;
                        vec4 _3372;
                        float _3419;
                        bool _3420;
                        for (;;)
                        {
                            uint _3298 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3287));
                            _3288 = (_3287 + 4294967295u) & _3287;
                            uint _3300 = _3298 * 40u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3314 = _3313.w;
                            uint _3316 = (_3298 * 40u) + 4u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3298 * 40u) + 8u;
                            _3341 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x));
                            uint _3343 = (_3298 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3359 = (_3298 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3298 * 40u) + 24u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3394 = (_3298 * 40u) + 28u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3419 = fma(_2580, _3407.z, fma(_2579, _3407.y, _3407.x * _2578)) + _3407.w;
                            _3420 = !((fma(_2580, _3388.z, fma(_2579, _3388.y, _3388.x * _2578)) + _3388.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3420)
                            {
                                float _3447 = _3313.x - _2578;
                                float _3448 = _3313.y - _2579;
                                float _3449 = _3313.z - _2580;
                                float _3450 = dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449));
                                float _3453 = inversesqrt(_3450);
                                float _3454 = _3453 * _3447;
                                float _3455 = _3453 * _3448;
                                float _3456 = _3453 * _3449;
                                float _3460 = 1.0 - (_3450 / (_3314 * _3314));
                                float _4609 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3465 = sqrt(_3450) * _3329.w;
                                float _3467 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                                float _3468 = _3467 * _3467;
                                float _3471 = ((1.0 - _3468) * dot(vec3(_3454, _3455, _3456), vec3(_790, _793, _796))) + _3468;
                                float _3474 = _3465 * _3465;
                                float _3478 = (fma(_2580, _3356.z, fma(_2579, _3356.y, _3356.x * _2578)) + _3356.w) / _3419;
                                float _3479 = (fma(_2580, _3372.z, fma(_2579, _3372.y, _3372.x * _2578)) + _3372.w) / _3419;
                                float _3483 = 1.0 - dot(vec2(_3478, _3479), vec2(_3478, _3479));
                                float _4625 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3485 = _3484 * (((isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0))) * _3461) / ((_3474 * 0.699999988079071044921875) + 1.0));
                                float _3497 = exp2(log2(1.0 / ((_3474 * 3.5) + 5.0)) * 0.25);
                                float _3498 = 1.0 - _865;
                                float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                                float _3506 = _3505 * _3505;
                                float _3507 = _3506 * _3506;
                                float _3508 = _3454 - _2925;
                                float _3509 = _3455 - _2926;
                                float _3510 = _3456 - _2927;
                                float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                                float _3518 = dot(vec3(_790, _793, _796), vec3((-0.0) - _2925, (-0.0) - _2926, (-0.0) - _2927));
                                float _4636 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3522 = dot(vec3(_790, _793, _796), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                                float _4647 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3525 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                                float _3530 = _3467 * _3506;
                                float _3531 = _3530 * _3530;
                                float _3537 = ((1.0 - _3531) * dot(vec3(_790, _793, _796), vec3(_3454, _3455, _3456))) + _3531;
                                float _4658 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3539 = 1.0 - _3506;
                                float _3549 = (0.5 / (((_3538 * ((_3521 * _3539) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3538 * _3539) + _3506) * _3521))) * _3538;
                                float _4669 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3559 = (_3484 * _3461) * (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3529 * _3529) * ((_3474 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3485 * _3329.y;
                                frontier_phi_83_pred_1 = _3485 * _3329.x;
                                frontier_phi_83_pred_2 = _3559 * _3341.z;
                                frontier_phi_83_pred_3 = _3559 * _3341.y;
                                frontier_phi_83_pred_4 = _3559 * _3341.x;
                                frontier_phi_83_pred_5 = _3485 * _3329.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3567 = frontier_phi_83_pred;
                            _3566 = frontier_phi_83_pred_1;
                            _3565 = frontier_phi_83_pred_2;
                            _3564 = frontier_phi_83_pred_3;
                            _3563 = frontier_phi_83_pred_4;
                            _3568 = frontier_phi_83_pred_5;
                            _3271 = _3566 + _3284;
                            _3272 = _3567 + _3285;
                            _3273 = _3568 + _3286;
                            _3268 = _3563 + _3281;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            if (_3288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3288;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3273;
                        frontier_phi_77_pred_1 = _3272;
                        frontier_phi_77_pred_2 = _3271;
                        frontier_phi_77_pred_3 = _3270;
                        frontier_phi_77_pred_4 = _3269;
                        frontier_phi_77_pred_5 = _3268;
                    }
                    _2910 = frontier_phi_77_pred;
                    _2908 = frontier_phi_77_pred_1;
                    _2906 = frontier_phi_77_pred_2;
                    _2904 = frontier_phi_77_pred_3;
                    _2902 = frontier_phi_77_pred_4;
                    _2900 = frontier_phi_77_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2900;
                        _3060 = _2902;
                        _3061 = _2904;
                        _3062 = _2906;
                        _3063 = _2908;
                        _3064 = _2910;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2904;
                frontier_phi_58_59_ladder_1 = _2910;
                frontier_phi_58_59_ladder_2 = _2908;
                frontier_phi_58_59_ladder_3 = _2906;
                frontier_phi_58_59_ladder_4 = _2902;
                frontier_phi_58_59_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            _2899 = frontier_phi_58_59_ladder_5;
            _2901 = frontier_phi_58_59_ladder_4;
            _2903 = frontier_phi_58_59_ladder;
            _2905 = frontier_phi_58_59_ladder_3;
            _2907 = frontier_phi_58_59_ladder_2;
            _2909 = frontier_phi_58_59_ladder_1;
        }
        float _2914 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2637 = (_2914 * _2905) + _2070;
        _2639 = (_2914 * _2907) + _2072;
        _2641 = (_2914 * _2909) + _2074;
        _2643 = ((_2899 * _834) * _2914) + _2418;
        _2645 = ((_2901 * _836) * _2914) + _2420;
        _2647 = ((_2903 * _837) * _2914) + _2422;
    }
    else
    {
        _2637 = _2070;
        _2639 = _2072;
        _2641 = _2074;
        _2643 = _2418;
        _2645 = _2420;
        _2647 = _2422;
    }
    uint _2653 = _810 + uint(cbMatDynParam._m0[0u].w);
    float _2659 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2665 = (((((_2659 * cbMtdParam._m0[11u].x) * (((_529.x - _526) * _507) + _526)) * _558) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _648) * cbInstanceData._m0[_2653].x;
    float _2671 = (((((_2659 * cbMtdParam._m0[11u].y) * (((_529.y - _527) * _507) + _527)) * _558) * (((1.0 - _613) * cbMtdParam._m0[16u].y) + _613)) * _648) * cbInstanceData._m0[_2653].y;
    float _2677 = (((((_2659 * cbMtdParam._m0[11u].z) * (((_529.z - _528) * _507) + _528)) * _558) * (((1.0 - _615) * cbMtdParam._m0[16u].y) + _615)) * _648) * cbInstanceData._m0[_2653].z;
    float _4685 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4696 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4707 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2694 = (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2637 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _849))) + ((_2643 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + _2665;
    float _2696 = (_2671 + ((_2645 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2639 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _849)));
    float _2698 = (_2677 + ((_2647 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1688)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2641 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _849)));
    float _2699 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2700 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2701 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2707 = cbMtdParam._m0[2u].x * _2665;
    float _2708 = cbMtdParam._m0[2u].y * _2671;
    float _2709 = cbMtdParam._m0[2u].z * _2677;
    float _4733 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2711 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    uint _2712 = _809 + 6u;
    float _2720 = _771 / cbSceneParam._m0[86u].x;
    float _2721 = _772 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2795 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2796 = _2795 / _694;
        float _2807 = _2796 * _744;
        float _2808 = _745 * _2796;
        float _2809 = (-0.0) - _2808;
        float _2810 = _2796 * _746;
        float _2812 = (cbSceneParam._m0[77u].w * _2809) / _2795;
        float _2813 = _2812 + cbSceneParam._m0[79u].w;
        float _2814 = cbSceneParam._m0[79u].w - _2808;
        float _2820 = sqrt(((_2807 * _2807) + (_2808 * _2808)) + (_2810 * _2810));
        float _2823 = (1.0 - (cbSceneParam._m0[77u].w / _2795)) * _2820;
        float _2828 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2830 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3016;
        if (abs((_2809 - _2812) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3016 = ((((_2813 > 0.0) ? exp2(_2828 * _2813) : (2.0 - exp2(_2830 * _2813))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2823;
        }
        else
        {
            float _2960 = 1.0 / cbSceneParam._m0[80u].x;
            float _2961 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : max(_2813, _2814));
            float _2962 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : min(_2813, _2814));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            _3016 = ((abs(_2820 / _2809) * cbSceneParam._m0[80u].y) * ((((_2971 - _2972) * 2.0) - ((exp2(_2828 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)))) - exp2(_2828 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))))) * _2960)) - ((exp2(_2830 * _2971) - exp2(_2830 * _2972)) * _2960))) + (_2823 * cbSceneParam._m0[80u].z);
        }
        vec4 _3018 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _3027 = exp2((_3016 * (-1.44269502162933349609375)) * (1.0 - _3018.w));
        float _3028 = log2(_3027);
        float _3044 = log2(_2740);
        _2832 = (exp2(_3044 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].x)) * _3018.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2834 = (exp2(_3044 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].y)) * _3018.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2836 = (exp2(_3044 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].z)) * _3018.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2838 = _3027 * _2740;
    }
    else
    {
        _2832 = _2737;
        _2834 = _2738;
        _2836 = _2739;
        _2838 = _2740;
    }
    bool _3054;
    vec4 _2848;
    vec4 _2870;
    float _2872;
    float _2876;
    float _2877;
    float _2878;
    float _2881;
    float _2884;
    float _2887;
    float _2888;
    bool _2898;
    for (;;)
    {
        _2848 = cbMatDynParam._m0[0u];
        float _2850 = roundEven(_2848.y);
        bool _2851 = _2850 == 3.0;
        float _2852 = log2(_2838);
        float _2856 = exp2(_2852 * cbSceneParam._m0[78u].x);
        float _2857 = exp2(_2852 * cbSceneParam._m0[78u].y);
        float _2858 = exp2(_2852 * cbSceneParam._m0[78u].z);
        float _2859 = _2856 * _2699;
        float _2860 = _2857 * _2700;
        float _2861 = _2858 * _2701;
        float _2868 = _760 + (-0.5);
        _2870 = cbMtdParam._m0[1u];
        _2872 = _2870.y * _2868;
        float _2875 = (_2850 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2876 = _2875 * (_2851 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2832)));
        _2877 = _2875 * (_2851 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2834)));
        _2878 = _2875 * (_2851 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2836)));
        _2881 = ((_2707 * _2711) * _2856) * _2875;
        _2884 = ((_2708 * _2711) * _2857) * _2875;
        _2887 = ((_2709 * _2711) * _2858) * _2875;
        _2888 = _2868 * 0.999000012874603271484375;
        _2898 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2898)
        {
            if ((cbInstanceData._m0[_809 + 7u].x + _2888) < 0.5)
            {
                _3054 = true;
                break;
            }
        }
        uint _2995 = _810 + uint(_2848.w);
        if ((cbInstanceData._m0[_2995].w < 1.0) && ((cbInstanceData._m0[_2995].w + _2888) < 0.5))
        {
            _3054 = true;
            break;
        }
        if ((_2872 + 1.0) < _2870.x)
        {
            _3054 = true;
            break;
        }
        _3054 = false;
        break;
    }
    float _3259;
    if (_3054)
    {
        discard_state = true;
        _3259 = 0.0;
    }
    else
    {
        _3259 = cbInstanceData._m0[_2712].w;
    }
    SV_Target.x = _2876;
    SV_Target.y = _2877;
    SV_Target.z = _2878;
    SV_Target.w = _3259;
    SV_Target_1.x = _2881;
    SV_Target_1.y = _2884;
    SV_Target_1.z = _2887;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
    discard_exit();
}


