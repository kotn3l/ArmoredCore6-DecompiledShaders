#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1208;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _316 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3873 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _324 = (_317 * ((_285.x * cbMtdParam._m0[10u].x) - _265)) + _265;
    float _325 = (_317 * ((_285.y * cbMtdParam._m0[10u].y) - _266)) + _266;
    float _326 = (_317 * ((_285.z * cbMtdParam._m0[10u].z) - _267)) + _267;
    float _342 = _317 * texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x;
    vec4 _356 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _364 = (_356.x * 2.0) + (-1.0);
    float _366 = (_356.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3884 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _385 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _389 = _385.z;
    float _392 = (_385.x * 2.0) + (-1.0);
    float _393 = (_385.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3895 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))));
    float _404 = ((((_356.z * cbMtdParam._m0[16u].w) - _389) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _389;
    float _427 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _428 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _451 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _457 = (_451.x * 2.0) + (-1.0);
    float _458 = (_451.y * 2.0) + (-1.0);
    float _462 = 1.0 - dot(vec2(_457, _458), vec2(_457, _458));
    float _3906 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)));
    float _467 = fma(_464, _223, fma(_458, _230, _457 * _216));
    float _470 = fma(_464, _224, fma(_458, _231, _457 * _217));
    float _473 = fma(_464, _225, fma(_458, _232, _457 * _218));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _488 = (((_470 * 0.5) * _477) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _490 = (-0.0) - (cbMtdParam._m0[14u].w * (((_467 * 0.5) * _477) + (-0.25)));
    float _492 = fract(_479);
    float _494 = fract(_479 + 0.5);
    float _505 = abs((_492 * 2.0) + (-1.0));
    vec4 _522 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_492 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _492) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    vec4 _527 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_494 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _494) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _547 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3917 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _556 = (((_548 * _548) * (3.0 - (_548 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _565 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _573 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3928 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _578 = (_574 * _574) * (3.0 - (_574 * 2.0));
    float _579 = _578 * cbMtdParam._m0[17u].y;
    float _580 = _578 * cbMtdParam._m0[17u].z;
    float _581 = sin(_565);
    float _582 = cos(_565);
    float _583 = TEXCOORD.z - _579;
    float _584 = TEXCOORD.w - _580;
    vec4 _603 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_579 + fma(_584, (-0.0) - _581, _583 * _582))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_584, _582, _583 * _581) + _580)) + cbTextureTilingScale._m0[1u].w));
    float _609 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _603.x;
    float _611 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _603.y;
    float _613 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _603.z;
    vec4 _636 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _427) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _428) + cbTextureTilingScale._m0[6u].w));
    float _645 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_636.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3939 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _653 = (_317 * (_364 - _392)) + _392;
    float _654 = (_317 * (_366 - _393)) + _393;
    float _655 = (_317 * (sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) - _399)) + _399;
    float _658 = fma(_655, _223, fma(_654, _230, _653 * _216));
    float _661 = fma(_655, _224, fma(_654, _231, _653 * _217));
    float _664 = fma(_655, _225, fma(_654, _232, _653 * _218));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3950 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _672 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3972 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3983 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3994 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _676 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _779 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _782 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _795 = uint(roundEven(NORMAL.w)) * 13u;
    uint _796 = _795 + 9u;
    uint _797 = _796 + uint(cbMatDynParam._m0[0u].w);
    float _803 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_797].x;
    float _804 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_797].y;
    float _805 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_797].z;
    float _4005 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _809 = 1.0 - _676;
    float _810 = _806 * _809;
    float _811 = _807 * _809;
    float _812 = _808 * _809;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _676;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _676;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _676;
    float _820 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _835 = _832.x * TEXCOORD_6.w;
    float _836 = dot(vec3(_669, _670, _671), vec3(_749, _750, _751));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _669) - _749;
    float _844 = (_839 * _670) - _750;
    float _845 = (_839 * _671) - _751;
    float _849 = abs(dot(vec3(_749, _750, _751), vec3(_669, _670, _671)));
    float _4038 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_672);
    float _863 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _869 = (1.0 - _863) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _870 = _863 * _851;
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _937 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _941 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _965 = _898 + _669;
        float _966 = _902 + _670;
        float _967 = _906 + _671;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _933;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _937;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _941;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_669, _670, _671), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4086 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_669, _670, _671), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4119 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_669, _670, _671), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4152 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1252 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1256 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1279 = _898 + _669;
        float _1280 = _902 + _670;
        float _1281 = _906 + _671;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_669, _670, _671), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4215 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_669, _670, _671), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4248 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_669, _670, _671), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4281 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1208;
        _1518 = _1208;
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _843 * 0.5;
    float _1586 = _844 * 0.5;
    float _1587 = _845 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1715 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1718 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1746 = frontier_phi_14_12_ladder;
        }
        float _1918;
        if (_1715 > 0.0)
        {
            _1918 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1918 = frontier_phi_23_19_ladder;
        }
        float _2213;
        if (_1718 > 0.0)
        {
            _2213 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2213 = frontier_phi_35_30_ladder;
        }
        float _2215 = isnan(_1918) ? _1746 : (isnan(_1746) ? _1918 : min(_1746, _1918));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1712) + _1701;
        float _2221 = (_2216 * _1715) + _1705;
        float _2222 = (_2216 * _1718) + _1709;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_13_35_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_13_35_ladder_2;
        _1736 = frontier_phi_13_35_ladder_1;
        _1738 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1654);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1811 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1814 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _1923;
        if (_1808 > 0.0)
        {
            _1923 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1923 = frontier_phi_25_21_ladder;
        }
        float _2240;
        if (_1811 > 0.0)
        {
            _2240 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2240 = frontier_phi_37_32_ladder;
        }
        float _2578;
        if (_1814 > 0.0)
        {
            _2578 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2578 = frontier_phi_47_44_ladder;
        }
        float _2580 = isnan(_2240) ? _1923 : (isnan(_1923) ? _2240 : min(_1923, _2240));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1808) + _1797;
        float _2586 = (_2581 * _1811) + _1801;
        float _2587 = (_2581 * _1814) + _1805;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_22_47_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_47_ladder_2;
        _1835 = frontier_phi_22_47_ladder_1;
        _1837 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1743);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1850 = (((_869 * _820) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_869 * _822) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1854 = (((_869 * _823) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1910 = _1897 / _1909;
    float _1911 = _1901 / _1909;
    float _1912 = _1905 / _1909;
    float _2059;
    float _2060;
    float _2061;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1939 = ((uint(_1912 > cbSceneParam._m0[59u].y) + uint(_1912 > cbSceneParam._m0[59u].x)) + uint(_1912 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1940 = _1939 + 43u;
        uint _1948 = _1939 + 44u;
        uint _1956 = _1939 + 45u;
        uint _1964 = _1939 + 46u;
        float _1975 = fma(_1909, cbSceneParam._m0[_1940].w, fma(_1905, cbSceneParam._m0[_1940].z, fma(_1901, cbSceneParam._m0[_1940].y, _1897 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1909, cbSceneParam._m0[_1948].w, fma(_1905, cbSceneParam._m0[_1948].z, fma(_1901, cbSceneParam._m0[_1948].y, _1897 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1909, cbSceneParam._m0[_1964].w, fma(_1905, cbSceneParam._m0[_1964].z, fma(_1901, cbSceneParam._m0[_1964].y, _1897 * cbSceneParam._m0[_1964].x)));
        float _1992 = cbSceneParam._m0[33u].z * _1987;
        float _1994 = cbSceneParam._m0[33u].w * _1987;
        float _1997 = fma(_1909, cbSceneParam._m0[_1956].w, fma(_1905, cbSceneParam._m0[_1956].z, fma(_1901, cbSceneParam._m0[_1956].y, _1897 * cbSceneParam._m0[_1956].x))) / _1987;
        float _2045 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
        float _4407 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2052 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 + _1975) / _1987, (_1994 + _1979) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 + _1975) / _1987, (_1979 - _1992) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1992) / _1987, (_1979 - _1994) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1994) / _1987, (_1992 + _1979) / _1987), _1997), 0.0)).x), vec4(0.25)));
        _2059 = 1.0 - (_2052 * cbSceneParam._m0[34u].x);
        _2060 = 1.0 - (_2052 * cbSceneParam._m0[34u].y);
        _2061 = 1.0 - (_2052 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2059 = 1.0;
        _2060 = 1.0;
        _2061 = 1.0;
    }
    float _2125;
    float _2127;
    float _2129;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2113 = fma(_1909, cbSceneParam._m0[63u].w, fma(_1905, cbSceneParam._m0[63u].z, fma(_1901, cbSceneParam._m0[63u].y, _1897 * cbSceneParam._m0[63u].x)));
        float _2114 = fma(_1909, cbSceneParam._m0[60u].w, fma(_1905, cbSceneParam._m0[60u].z, fma(_1901, cbSceneParam._m0[60u].y, _1897 * cbSceneParam._m0[60u].x))) / _2113;
        float _2115 = fma(_1909, cbSceneParam._m0[61u].w, fma(_1905, cbSceneParam._m0[61u].z, fma(_1901, cbSceneParam._m0[61u].y, _1897 * cbSceneParam._m0[61u].x))) / _2113;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2114 >= cbSceneParam._m0[64u].x) && (_2115 >= cbSceneParam._m0[64u].y)) && (_2114 <= cbSceneParam._m0[64u].z)) && (_2115 <= cbSceneParam._m0[64u].w))
        {
            float _2253 = fma(_1909, cbSceneParam._m0[62u].w, fma(_1905, cbSceneParam._m0[62u].z, fma(_1901, cbSceneParam._m0[62u].y, _1897 * cbSceneParam._m0[62u].x))) / _2113;
            float _2257 = isnan(cbSceneParam._m0[41u].w) ? _2253 : (isnan(_2253) ? cbSceneParam._m0[41u].w : max(_2253, cbSceneParam._m0[41u].w));
            float _2300 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
            float _4423 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
            float _2307 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2114, cbSceneParam._m0[33u].w + _2115), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2114, _2115 - cbSceneParam._m0[33u].z), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].z, _2115 - cbSceneParam._m0[33u].w), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2115), _2257), 0.0)).x), vec4(0.25)));
            float _2311 = 1.0 - (_2307 * cbSceneParam._m0[34u].x);
            float _2312 = 1.0 - (_2307 * cbSceneParam._m0[34u].y);
            float _2313 = 1.0 - (_2307 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2313) ? _2061 : (isnan(_2061) ? _2313 : min(_2061, _2313));
            frontier_phi_34_33_ladder_1 = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
            frontier_phi_34_33_ladder_2 = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
        }
        else
        {
            frontier_phi_34_33_ladder = _2061;
            frontier_phi_34_33_ladder_1 = _2060;
            frontier_phi_34_33_ladder_2 = _2059;
        }
        _2125 = frontier_phi_34_33_ladder_2;
        _2127 = frontier_phi_34_33_ladder_1;
        _2129 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2125 = _2059;
        _2127 = _2060;
        _2129 = _2061;
    }
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_795 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _835 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2172 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2176 = _2136 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_669, _670, _671));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_669, _670, _671));
    float _4459 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4470 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2153].x * _2159) * _2197) + (((cbLight._m0[_2163].x * _2125) * _2172) * _2195);
    float _2205 = ((_2159 * cbLight._m0[_2153].y) * _2197) + (((cbLight._m0[_2163].y * _2127) * _2172) * _2195);
    float _2206 = ((_2159 * cbLight._m0[_2153].z) * _2197) + (((cbLight._m0[_2163].z * _2129) * _2172) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2212)
    {
        _2314 = _2204;
        _2316 = _2205;
        _2318 = _2206;
    }
    else
    {
        uint _2322 = _2136 + 6u;
        float _2338 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4481 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2341 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2314 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2204;
        _2316 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2205;
        _2318 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2206;
    }
    bool _2321 = _2210.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2321)
    {
        _2376 = _2314;
        _2378 = _2316;
        _2380 = _2318;
    }
    else
    {
        uint _2549 = _2136 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4497 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2568 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2314;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2316;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2318;
    }
    uint _2383 = _2136 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _672) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2136].x + _749;
    float _2399 = cbLight._m0[_2136].y + _750;
    float _2400 = cbLight._m0[_2136].z + _751;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2136].xyz));
    float _4513 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _4524 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2412 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2413 = dot(vec3(_669, _670, _671), vec3(_2405, _2406, _2407));
    float _4535 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2405, _2406, _2407));
    float _4546 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _817;
    float _2436 = 0.959999978542327880859375 - _818;
    float _2437 = 0.959999978542327880859375 - _819;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4557 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2136 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _672) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2176].x + _749;
    float _2485 = cbLight._m0[_2176].y + _750;
    float _2486 = cbLight._m0[_2176].z + _751;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2176].xyz));
    float _4568 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2498 = dot(vec3(_669, _670, _671), vec3(_2491, _2492, _2493));
    float _4579 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2491, _2492, _2493));
    float _4590 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4601 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _820) * cbLight._m0[_2471].x) * _2536) * _2159) + ((((cbLight._m0[_2383].x * _2125) * ((_2433 * _2434) + _820)) * _2457) * _2172);
    float _2547 = (((((_2517 * _2436) + _822) * cbLight._m0[_2471].y) * _2536) * _2159) + ((((cbLight._m0[_2383].y * _2127) * ((_2433 * _2436) + _822)) * _2457) * _2172);
    float _2548 = (((((_2517 * _2437) + _823) * cbLight._m0[_2471].z) * _2536) * _2159) + ((((cbLight._m0[_2383].z * _2129) * ((_2433 * _2437) + _823)) * _2457) * _2172);
    float _2604;
    float _2606;
    float _2608;
    if (_2212)
    {
        _2604 = _2546;
        _2606 = _2547;
        _2608 = _2548;
    }
    else
    {
        uint _2610 = _2136 + 2u;
        uint _2614 = _2136 + 10u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _672) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _749;
        float _2631 = cbLight._m0[_2610].y + _750;
        float _2632 = cbLight._m0[_2610].z + _751;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2610].xyz));
        float _4612 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2644 = dot(vec3(_669, _670, _671), vec3(_2637, _2638, _2639));
        float _4623 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4634 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2412 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2670) + _2629) * _2643))) * _2643;
        float _4645 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2604 = (((((_2663 * _2434) + _820) * cbLight._m0[_2614].x) * _2682) * _2683) + _2546;
        _2606 = (((((_2663 * _2436) + _822) * cbLight._m0[_2614].y) * _2682) * _2683) + _2547;
        _2608 = (((((_2663 * _2437) + _823) * cbLight._m0[_2614].z) * _2682) * _2683) + _2548;
    }
    float _2714;
    float _2716;
    float _2718;
    if (_2321)
    {
        _2714 = _2604;
        _2716 = _2606;
        _2718 = _2608;
    }
    else
    {
        uint _2725 = _2136 + 3u;
        uint _2729 = _2136 + 11u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _672) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _749;
        float _2746 = cbLight._m0[_2725].y + _750;
        float _2747 = cbLight._m0[_2725].z + _751;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2725].xyz));
        float _4661 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2759 = dot(vec3(_669, _670, _671), vec3(_2752, _2753, _2754));
        float _4672 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4683 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2412 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2785) + _2744) * _2758))) * _2758;
        float _4694 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2714 = (((((_2778 * _2434) + _820) * cbLight._m0[_2729].x) * _2797) * _2798) + _2604;
        _2716 = (((((_2778 * _2436) + _822) * cbLight._m0[_2729].y) * _2797) * _2798) + _2606;
        _2718 = (((((_2778 * _2437) + _823) * cbLight._m0[_2729].z) * _2797) * _2798) + _2608;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2134.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2820)));
        float _2841 = (log2(_1912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
        }
        else
        {
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3144;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3135 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _1910;
                        float _3320 = _3279.y - _1911;
                        float _3321 = _3279.z - _1912;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_776, _779, _782), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4720 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _1910;
                        float _3355 = (-0.0) - _1911;
                        float _3356 = (-0.0) - _1912;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3370 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _851;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3361 + _3326;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_776, _779, _782), vec3(_3361, _3362, _3363));
                        float _4736 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3395 = dot(vec3(_776, _779, _782), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4747 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3339 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3329) + _3404;
                        float _4758 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4769 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3402 * _3402) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3188 = (_3350 * _3298.x) + _3256;
                        _3189 = (_3350 * _3298.y) + _3257;
                        _3190 = (_3350 * _3298.z) + _3258;
                        _3185 = (_3430 * _3315.x) + _3253;
                        _3186 = (_3430 * _3315.y) + _3254;
                        _3187 = (_3430 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3190;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                _2987 = frontier_phi_66_pred;
                _2985 = frontier_phi_66_pred_1;
                _2983 = frontier_phi_66_pred_2;
                _2981 = frontier_phi_66_pred_3;
                _2979 = frontier_phi_66_pred_4;
                _2977 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2977;
                    _3130 = _2979;
                    _3131 = _2981;
                    _3132 = _2983;
                    _3133 = _2985;
                    _3134 = _2987;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
        }
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.z;
        uint _2993 = (_2991 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2993) & _2851) == 0u)
        {
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
            float _3123 = _3122 * _1910;
            float _3124 = _3122 * _1911;
            float _3125 = _3122 * _1912;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2993 < ((_2991 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3236 = _2976;
                float _3237 = _2978;
                float _3238 = _2980;
                float _3239 = _2982;
                float _3240 = _2984;
                float _3241 = _2986;
                uint _3242 = _2993;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3252)
                    {
                        frontier_phi_72_pred = _3241;
                        frontier_phi_72_pred_1 = _3240;
                        frontier_phi_72_pred_2 = _3239;
                        frontier_phi_72_pred_3 = _3238;
                        frontier_phi_72_pred_4 = _3237;
                        frontier_phi_72_pred_5 = _3236;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3448 = _3236;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        float _3451 = _3239;
                        float _3452 = _3240;
                        float _3453 = _3241;
                        uint _3454 = _3251;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3539;
                        float _3586;
                        bool _3587;
                        for (;;)
                        {
                            uint _3465 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3526 = (_3465 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3542 = (_3465 * 40u) + 24u;
                            vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3561 = (_3465 * 40u) + 28u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3586 = fma(_1912, _3574.z, fma(_1911, _3574.y, _3574.x * _1910)) + _3574.w;
                            _3587 = !((fma(_1912, _3555.z, fma(_1911, _3555.y, _3555.x * _1910)) + _3555.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3587)
                            {
                                float _3614 = _3480.x - _1910;
                                float _3615 = _3480.y - _1911;
                                float _3616 = _3480.z - _1912;
                                float _3617 = dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616));
                                float _3620 = inversesqrt(_3617);
                                float _3621 = _3620 * _3614;
                                float _3622 = _3620 * _3615;
                                float _3623 = _3620 * _3616;
                                float _3627 = 1.0 - (_3617 / (_3481 * _3481));
                                float _4780 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3632 = sqrt(_3617) * _3496.w;
                                float _3634 = 1.39999997615814208984375 / (_3632 + 1.39999997615814208984375);
                                float _3635 = _3634 * _3634;
                                float _3638 = ((1.0 - _3635) * dot(vec3(_3621, _3622, _3623), vec3(_776, _779, _782))) + _3635;
                                float _3641 = _3632 * _3632;
                                float _3645 = (fma(_1912, _3523.z, fma(_1911, _3523.y, _3523.x * _1910)) + _3523.w) / _3586;
                                float _3646 = (fma(_1912, _3539.z, fma(_1911, _3539.y, _3539.x * _1910)) + _3539.w) / _3586;
                                float _3650 = 1.0 - dot(vec2(_3645, _3646), vec2(_3645, _3646));
                                float _4796 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3652 = _3651 * (((isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0))) * _3628) / ((_3641 * 0.699999988079071044921875) + 1.0));
                                float _3664 = exp2(log2(1.0 / ((_3641 * 3.5) + 5.0)) * 0.25);
                                float _3665 = 1.0 - _851;
                                float _3672 = sqrt(1.0 - ((1.0 - (_3665 * _3665)) * (1.0 - (_3664 * _3664))));
                                float _3673 = _3672 * _3672;
                                float _3674 = _3673 * _3673;
                                float _3675 = _3621 - _3123;
                                float _3676 = _3622 - _3124;
                                float _3677 = _3623 - _3125;
                                float _3681 = inversesqrt(dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677)));
                                float _3685 = dot(vec3(_776, _779, _782), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4807 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3689 = dot(vec3(_776, _779, _782), vec3(_3681 * _3675, _3681 * _3676, _3681 * _3677));
                                float _4818 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3692 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3696 = ((_3692 * _3692) * (_3674 + (-1.0))) + 1.0;
                                float _3697 = _3634 * _3673;
                                float _3698 = _3697 * _3697;
                                float _3704 = ((1.0 - _3698) * dot(vec3(_776, _779, _782), vec3(_3621, _3622, _3623))) + _3698;
                                float _4829 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3706 = 1.0 - _3673;
                                float _3716 = (0.5 / (((_3705 * ((_3688 * _3706) + _3673)) + 9.9999999392252902907785028219223e-09) + (((_3705 * _3706) + _3673) * _3688))) * _3705;
                                float _4840 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3726 = (_3651 * _3628) * (((_3674 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3696 * _3696) * ((_3641 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3652 * _3496.y;
                                frontier_phi_78_pred_1 = _3652 * _3496.x;
                                frontier_phi_78_pred_2 = _3726 * _3508.z;
                                frontier_phi_78_pred_3 = _3726 * _3508.y;
                                frontier_phi_78_pred_4 = _3726 * _3508.x;
                                frontier_phi_78_pred_5 = _3652 * _3496.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3734 = frontier_phi_78_pred;
                            _3733 = frontier_phi_78_pred_1;
                            _3732 = frontier_phi_78_pred_2;
                            _3731 = frontier_phi_78_pred_3;
                            _3730 = frontier_phi_78_pred_4;
                            _3735 = frontier_phi_78_pred_5;
                            _3438 = _3733 + _3451;
                            _3439 = _3734 + _3452;
                            _3440 = _3735 + _3453;
                            _3435 = _3730 + _3448;
                            _3436 = _3731 + _3449;
                            _3437 = _3732 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3440;
                        frontier_phi_72_pred_1 = _3439;
                        frontier_phi_72_pred_2 = _3438;
                        frontier_phi_72_pred_3 = _3437;
                        frontier_phi_72_pred_4 = _3436;
                        frontier_phi_72_pred_5 = _3435;
                    }
                    _3108 = frontier_phi_72_pred;
                    _3106 = frontier_phi_72_pred_1;
                    _3104 = frontier_phi_72_pred_2;
                    _3102 = frontier_phi_72_pred_3;
                    _3100 = frontier_phi_72_pred_4;
                    _3098 = frontier_phi_72_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3098;
                        _3237 = _3100;
                        _3238 = _3102;
                        _3239 = _3104;
                        _3240 = _3106;
                        _3241 = _3108;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3108;
                frontier_phi_60_61_ladder_1 = _3106;
                frontier_phi_60_61_ladder_2 = _3102;
                frontier_phi_60_61_ladder_3 = _3100;
                frontier_phi_60_61_ladder_4 = _3098;
                frontier_phi_60_61_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_60_61_ladder = _2986;
                frontier_phi_60_61_ladder_1 = _2984;
                frontier_phi_60_61_ladder_2 = _2980;
                frontier_phi_60_61_ladder_3 = _2978;
                frontier_phi_60_61_ladder_4 = _2976;
                frontier_phi_60_61_ladder_5 = _2982;
            }
            _3097 = frontier_phi_60_61_ladder_4;
            _3099 = frontier_phi_60_61_ladder_3;
            _3101 = frontier_phi_60_61_ladder_2;
            _3103 = frontier_phi_60_61_ladder_5;
            _3105 = frontier_phi_60_61_ladder_1;
            _3107 = frontier_phi_60_61_ladder;
        }
        float _3112 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2864 = (_3112 * _3103) + _2376;
        _2866 = (_3112 * _3105) + _2378;
        _2868 = (_3112 * _3107) + _2380;
        _2870 = ((_3097 * _820) * _3112) + _2714;
        _2872 = ((_3099 * _822) * _3112) + _2716;
        _2874 = ((_3101 * _823) * _3112) + _2718;
    }
    else
    {
        _2864 = _2376;
        _2866 = _2378;
        _2868 = _2380;
        _2870 = _2714;
        _2872 = _2716;
        _2874 = _2718;
    }
    uint _2880 = _796 + uint(cbMatDynParam._m0[0u].w);
    float _2886 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2892 = (((((_2886 * cbMtdParam._m0[11u].x) * (((_527.x - _524) * _505) + _524)) * _556) * (((1.0 - _609) * cbMtdParam._m0[16u].y) + _609)) * _646) * cbInstanceData._m0[_2880].x;
    float _2898 = (((((_2886 * cbMtdParam._m0[11u].y) * (((_527.y - _525) * _505) + _525)) * _556) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _646) * cbInstanceData._m0[_2880].y;
    float _2904 = (((((_2886 * cbMtdParam._m0[11u].z) * (((_527.z - _526) * _505) + _526)) * _556) * (((1.0 - _613) * cbMtdParam._m0[16u].y) + _613)) * _646) * cbInstanceData._m0[_2880].z;
    float _4856 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4867 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4878 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2921 = (((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2864 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _835))) + ((_2870 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + _2892;
    float _2923 = (_2898 + ((_2872 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2866 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _835)));
    float _2925 = (_2904 + ((_2874 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2868 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _835)));
    float _4904 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2938 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    uint _2939 = _795 + 6u;
    float _2947 = _757 / cbSceneParam._m0[86u].x;
    float _2948 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2962 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2964 = _2962.x;
    float _2965 = _2962.y;
    float _2966 = _2962.z;
    float _2967 = _2962.w;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _3001 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _3002 = _3001 / _692;
        float _3013 = _3002 * _742;
        float _3014 = _743 * _3002;
        float _3015 = (-0.0) - _3014;
        float _3016 = _3002 * _744;
        float _3018 = (cbSceneParam._m0[77u].w * _3015) / _3001;
        float _3019 = _3018 + cbSceneParam._m0[79u].w;
        float _3020 = cbSceneParam._m0[79u].w - _3014;
        float _3026 = sqrt(((_3013 * _3013) + (_3014 * _3014)) + (_3016 * _3016));
        float _3029 = (1.0 - (cbSceneParam._m0[77u].w / _3001)) * _3026;
        float _3034 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3036 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3198;
        if (abs((_3015 - _3018) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3198 = ((((_3019 > 0.0) ? exp2(_3034 * _3019) : (2.0 - exp2(_3036 * _3019))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3029;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : max(_3019, _3020));
            float _3160 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : min(_3019, _3020));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3198 = ((abs(_3026 / _3015) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3034 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3034 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3036 * _3169) - exp2(_3036 * _3170)) * _3158))) + (_3029 * cbSceneParam._m0[80u].z);
        }
        vec4 _3200 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, 1.0), 0.0);
        float _3209 = exp2((_3198 * (-1.44269502162933349609375)) * (1.0 - _3200.w));
        float _3210 = log2(_3209);
        float _3226 = log2(_2967);
        _3038 = (exp2(_3226 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].x)) * _3200.x) / cbSceneParam._m0[78u].x)) + _2964;
        _3040 = (exp2(_3226 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].y)) * _3200.y) / cbSceneParam._m0[78u].y)) + _2965;
        _3042 = (exp2(_3226 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].z)) * _3200.z) / cbSceneParam._m0[78u].z)) + _2966;
        _3044 = _3209 * _2967;
    }
    else
    {
        _3038 = _2964;
        _3040 = _2965;
        _3042 = _2966;
        _3044 = _2967;
    }
    float _3056 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3057 = _3056 == 3.0;
    float _3058 = log2(_3044);
    float _3062 = exp2(_3058 * cbSceneParam._m0[78u].x);
    float _3063 = exp2(_3058 * cbSceneParam._m0[78u].y);
    float _3064 = exp2(_3058 * cbSceneParam._m0[78u].z);
    float _3065 = _3062 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)));
    float _3066 = _3063 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0)));
    float _3067 = _3064 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0)));
    float _3076 = (_3056 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3076 * (_3057 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3038)));
    SV_Target.y = _3076 * (_3057 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.z = _3076 * (_3057 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.w = cbInstanceData._m0[_2939].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2892) * _2938) * _3062) * _3076;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2898) * _2938) * _3063) * _3076;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2904) * _2938) * _3064) * _3076;
    SV_Target_1.w = cbInstanceData._m0[_2939].w;
}


