#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1206;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _314 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3613 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _315 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _322 = (_315 * ((_283.x * cbMtdParam._m0[10u].x) - _263)) + _263;
    float _323 = (_315 * ((_283.y * cbMtdParam._m0[10u].y) - _264)) + _264;
    float _324 = (_315 * ((_283.z * cbMtdParam._m0[10u].z) - _265)) + _265;
    vec4 _336 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _338 = _336.x;
    float _340 = _338 - (_338 * _315);
    vec4 _354 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _362 = (_354.x * 2.0) + (-1.0);
    float _364 = (_354.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3624 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    vec4 _383 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _387 = _383.z;
    float _390 = (_383.x * 2.0) + (-1.0);
    float _391 = (_383.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3635 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))));
    float _402 = ((((_354.z * cbMtdParam._m0[16u].w) - _387) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _387;
    float _425 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _426 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _449 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _455 = (_449.x * 2.0) + (-1.0);
    float _456 = (_449.y * 2.0) + (-1.0);
    float _460 = 1.0 - dot(vec2(_455, _456), vec2(_455, _456));
    float _3646 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _462 = sqrt(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)));
    float _465 = fma(_462, _221, fma(_456, _228, _455 * _214));
    float _468 = fma(_462, _222, fma(_456, _229, _455 * _215));
    float _471 = fma(_462, _223, fma(_456, _230, _455 * _216));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _477 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _486 = (((_468 * 0.5) * _475) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _488 = (-0.0) - (cbMtdParam._m0[14u].w * (((_465 * 0.5) * _475) + (-0.25)));
    float _490 = fract(_477);
    float _492 = fract(_477 + 0.5);
    float _503 = abs((_490 * 2.0) + (-1.0));
    vec4 _520 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_490 * _488) + _425) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_486 * _490) + _426) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    vec4 _525 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_492 * _488) + _425) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_486 * _492) + _426) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _545 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3657 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _554 = (((_546 * _546) * (3.0 - (_546 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _563 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _571 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3668 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _576 = (_572 * _572) * (3.0 - (_572 * 2.0));
    float _577 = _576 * cbMtdParam._m0[17u].y;
    float _578 = _576 * cbMtdParam._m0[17u].z;
    float _579 = sin(_563);
    float _580 = cos(_563);
    float _581 = TEXCOORD.z - _577;
    float _582 = TEXCOORD.w - _578;
    vec4 _601 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_577 + fma(_582, (-0.0) - _579, _581 * _580))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_582, _580, _581 * _579) + _578)) + cbTextureTilingScale._m0[1u].w));
    float _607 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _601.x;
    float _609 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _601.y;
    float _611 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _601.z;
    vec4 _634 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _425) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _426) + cbTextureTilingScale._m0[6u].w));
    float _643 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_634.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3679 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _651 = (_315 * (_362 - _390)) + _390;
    float _652 = (_315 * (_364 - _391)) + _391;
    float _653 = (_315 * (sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) - _397)) + _397;
    float _656 = fma(_653, _221, fma(_652, _228, _651 * _214));
    float _659 = fma(_653, _222, fma(_652, _229, _651 * _215));
    float _662 = fma(_653, _223, fma(_652, _230, _651 * _216));
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    float _667 = _666 * _656;
    float _668 = _666 * _659;
    float _669 = _666 * _662;
    float _3690 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _670 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3712 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3723 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3734 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _674 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _740 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _730);
    float _741 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _730);
    float _742 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _730);
    float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
    float _747 = _740 * _746;
    float _748 = _741 * _746;
    float _749 = _742 * _746;
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_669, cbSceneParam._m0[5u].z, fma(_668, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _667));
    float _777 = fma(_669, cbSceneParam._m0[6u].z, fma(_668, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _667));
    float _780 = fma(_669, cbSceneParam._m0[7u].z, fma(_668, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _667));
    uint _793 = uint(roundEven(NORMAL.w)) * 13u;
    uint _794 = _793 + 9u;
    uint _795 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _801 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_795].x;
    float _802 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_795].y;
    float _803 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_795].z;
    float _3745 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _807 = 1.0 - _674;
    float _808 = _804 * _807;
    float _809 = _805 * _807;
    float _810 = _806 * _807;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _674;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _674;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _674;
    float _818 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    vec4 _830 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _833 = _830.x * TEXCOORD_6.w;
    float _834 = dot(vec3(_667, _668, _669), vec3(_747, _748, _749));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _667) - _747;
    float _842 = (_837 * _668) - _748;
    float _843 = (_837 * _669) - _749;
    float _847 = abs(dot(vec3(_747, _748, _749), vec3(_667, _668, _669)));
    float _3778 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_670);
    float _861 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _867 = (1.0 - _861) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _868 = _861 * _849;
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _935 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _939 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _963 = _896 + _667;
        float _964 = _900 + _668;
        float _965 = _904 + _669;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _931;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _935;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _939;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_667, _668, _669), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3826 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_667, _668, _669), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3859 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_667, _668, _669), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3892 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1250 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1254 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1277 = _896 + _667;
        float _1278 = _900 + _668;
        float _1279 = _904 + _669;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_667, _668, _669), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3955 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_667, _668, _669), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3988 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_667, _668, _669), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4021 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1206;
        _1516 = _1206;
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = _1206;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1218)) + _1218;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1219)) + _1219;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _841 * 0.5;
    float _1584 = _842 * 0.5;
    float _1585 = _843 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1713 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1716 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1744 = frontier_phi_14_12_ladder;
        }
        float _1969;
        if (_1713 > 0.0)
        {
            _1969 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1969 = frontier_phi_23_19_ladder;
        }
        float _2226;
        if (_1716 > 0.0)
        {
            _2226 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2226 = frontier_phi_35_30_ladder;
        }
        float _2228 = isnan(_1969) ? _1744 : (isnan(_1744) ? _1969 : min(_1744, _1969));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1710) + _1699;
        float _2234 = (_2229 * _1713) + _1703;
        float _2235 = (_2229 * _1716) + _1707;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2236;
        float _2240 = _2236 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 > _2240) || ((_2234 < _2238) || ((_2233 < _2238) || (_2233 > _2240))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2235, cbModelParam._m0[9u].z, fma(_2234, cbModelParam._m0[9u].y, _2233 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2235, cbModelParam._m0[10u].z, fma(_2234, cbModelParam._m0[10u].y, _2233 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2235, cbModelParam._m0[11u].z, fma(_2234, cbModelParam._m0[11u].y, _2233 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_13_35_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_13_35_ladder_2;
        _1734 = frontier_phi_13_35_ladder_1;
        _1736 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1652);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1809 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1812 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1974;
        if (_1806 > 0.0)
        {
            _1974 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1974 = frontier_phi_25_21_ladder;
        }
        float _2253;
        if (_1809 > 0.0)
        {
            _2253 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2253 = frontier_phi_37_32_ladder;
        }
        float _2466;
        if (_1812 > 0.0)
        {
            _2466 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2466 = frontier_phi_46_43_ladder;
        }
        float _2468 = isnan(_2253) ? _1974 : (isnan(_1974) ? _2253 : min(_1974, _2253));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1806) + _1795;
        float _2474 = (_2469 * _1809) + _1799;
        float _2475 = (_2469 * _1812) + _1803;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_22_46_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_22_46_ladder_2;
        _1833 = frontier_phi_22_46_ladder_1;
        _1835 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1741);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_867 * _818) + _868) * _833) * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1850 = (((_867 * _820) + _868) * _833) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_867 * _821) + _868) * _833) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    vec4 _1869 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_755, _756));
    float _1871 = _1869.w;
    float _1883 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1871);
    float _1884 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1871);
    float _1885 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1871);
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_793 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _833 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1928 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1932 = _1891 | 1u;
    float _1943 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_667, _668, _669));
    float _1946 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_667, _668, _669));
    float _4157 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _4168 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1951 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1953 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1960 = ((cbLight._m0[_1908].x * _1914) * _1953) + (((cbLight._m0[_1918].x * _1883) * _1928) * _1951);
    float _1961 = ((_1914 * cbLight._m0[_1908].y) * _1953) + (((cbLight._m0[_1918].y * _1884) * _1928) * _1951);
    float _1962 = ((_1914 * cbLight._m0[_1908].z) * _1953) + (((cbLight._m0[_1918].z * _1885) * _1928) * _1951);
    uvec4 _1966 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1968 = _1966.x == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1968)
    {
        _1979 = _1960;
        _1981 = _1961;
        _1983 = _1962;
    }
    else
    {
        uint _1987 = _1891 + 6u;
        float _2003 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _4179 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2006 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _1979 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1960;
        _1981 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1961;
        _1983 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1962;
    }
    bool _1986 = _1966.y == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1986)
    {
        _2024 = _1979;
        _2026 = _1981;
        _2028 = _1983;
    }
    else
    {
        uint _2197 = _1891 + 7u;
        float _2213 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4195 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2216 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2024 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _1979;
        _2026 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _1981;
        _2028 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _1983;
    }
    uint _2031 = _1891 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _670) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1891].x + _747;
    float _2047 = cbLight._m0[_1891].y + _748;
    float _2048 = cbLight._m0[_1891].z + _749;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1891].xyz));
    float _4211 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2060 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2061 = dot(vec3(_667, _668, _669), vec3(_2053, _2054, _2055));
    float _4233 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2053, _2054, _2055));
    float _4244 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
    float _2082 = 0.959999978542327880859375 - _815;
    float _2084 = 0.959999978542327880859375 - _816;
    float _2085 = 0.959999978542327880859375 - _817;
    float _2092 = 1.0 - _2045;
    float _2103 = (0.5 / (((_2060 * ((_2059 * _2092) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2092) + _2045) * _2059))) * _2059;
    float _4255 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2119 = _1891 + 9u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _670) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1932].x + _747;
    float _2133 = cbLight._m0[_1932].y + _748;
    float _2134 = cbLight._m0[_1932].z + _749;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1932].xyz));
    float _4266 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2146 = dot(vec3(_667, _668, _669), vec3(_2139, _2140, _2141));
    float _4277 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2139, _2140, _2141));
    float _4288 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2131 * _2131;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
    float _2172 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2060 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2172) + _2131) * _2145))) * _2145;
    float _4299 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    float _2194 = (((((_2165 * _2082) + _818) * cbLight._m0[_2119].x) * _2184) * _1914) + ((((cbLight._m0[_2031].x * _1883) * ((_2081 * _2082) + _818)) * _2105) * _1928);
    float _2195 = (((((_2165 * _2084) + _820) * cbLight._m0[_2119].y) * _2184) * _1914) + ((((cbLight._m0[_2031].y * _1884) * ((_2081 * _2084) + _820)) * _2105) * _1928);
    float _2196 = (((((_2165 * _2085) + _821) * cbLight._m0[_2119].z) * _2184) * _1914) + ((((cbLight._m0[_2031].z * _1885) * ((_2081 * _2085) + _821)) * _2105) * _1928);
    float _2258;
    float _2260;
    float _2262;
    if (_1968)
    {
        _2258 = _2194;
        _2260 = _2195;
        _2262 = _2196;
    }
    else
    {
        uint _2264 = _1891 + 2u;
        uint _2268 = _1891 + 10u;
        float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _670) * 0.949999988079071044921875);
        float _2283 = _2282 * _2282;
        float _2284 = cbLight._m0[_2264].x + _747;
        float _2285 = cbLight._m0[_2264].y + _748;
        float _2286 = cbLight._m0[_2264].z + _749;
        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
        float _2291 = _2290 * _2284;
        float _2292 = _2290 * _2285;
        float _2293 = _2290 * _2286;
        float _2294 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2264].xyz));
        float _4310 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2298 = dot(vec3(_667, _668, _669), vec3(_2291, _2292, _2293));
        float _4321 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2302 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2291, _2292, _2293));
        float _4332 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2306 = _2283 * _2283;
        float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
        float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2324 = 1.0 - _2283;
        float _2334 = (0.5 / (((_2060 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2324) + _2283) * _2297))) * _2297;
        float _4343 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2258 = (((((_2317 * _2082) + _818) * cbLight._m0[_2268].x) * _2336) * _2337) + _2194;
        _2260 = (((((_2317 * _2084) + _820) * cbLight._m0[_2268].y) * _2336) * _2337) + _2195;
        _2262 = (((((_2317 * _2085) + _821) * cbLight._m0[_2268].z) * _2336) * _2337) + _2196;
    }
    float _2372;
    float _2374;
    float _2376;
    if (_1986)
    {
        _2372 = _2258;
        _2374 = _2260;
        _2376 = _2262;
    }
    else
    {
        uint _2383 = _1891 + 3u;
        uint _2387 = _1891 + 11u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _670) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _747;
        float _2404 = cbLight._m0[_2383].y + _748;
        float _2405 = cbLight._m0[_2383].z + _749;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2383].xyz));
        float _4359 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2417 = dot(vec3(_667, _668, _669), vec3(_2410, _2411, _2412));
        float _4370 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4381 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2443 = 1.0 - _2402;
        float _2453 = (0.5 / (((_2060 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2443) + _2402) * _2416))) * _2416;
        float _4392 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2372 = (((((_2436 * _2082) + _818) * cbLight._m0[_2387].x) * _2455) * _2456) + _2258;
        _2374 = (((((_2436 * _2084) + _820) * cbLight._m0[_2387].y) * _2455) * _2456) + _2260;
        _2376 = (((((_2436 * _2085) + _821) * cbLight._m0[_2387].z) * _2455) * _2456) + _2262;
    }
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_1889.y == 0u)
    {
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2531;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2531;
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2531;
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.x;
        uint _2558 = uint((float(_2546.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2547))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2547)));
        float _2568 = (log2(_2534 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2569 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        uint _2572 = uint(isnan(14.0) ? _2569 : (isnan(_2569) ? 14.0 : min(_2569, 14.0)));
        uvec4 _2577 = texelFetch(g_lightClusterGridBuffer, int(((_2572 << 2u) + (_2558 << 6u)) >> 2u));
        uint _2578 = _2577.x;
        uint _2579 = _2546.z;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((((1u << ((_2579 >> 4u) & 15u)) + 4294967295u) & _2578) == 0u) || ((_2579 & 240u) == 0u))
        {
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
        }
        else
        {
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2893)
                {
                    frontier_phi_61_pred = _2877;
                    frontier_phi_61_pred_1 = _2882;
                    frontier_phi_61_pred_2 = _2881;
                    frontier_phi_61_pred_3 = _2880;
                    frontier_phi_61_pred_4 = _2879;
                    frontier_phi_61_pred_5 = _2878;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2892;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2883 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _2532;
                        float _3068 = _3027.y - _2533;
                        float _3069 = _3027.z - _2534;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_774, _777, _780), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4418 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _2532;
                        float _3103 = (-0.0) - _2533;
                        float _3104 = (-0.0) - _2534;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3119 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _849;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_774, _777, _780), vec3(_3109, _3110, _3111));
                        float _4434 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3144 = dot(vec3(_774, _777, _780), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4445 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3087 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3077) + _3153;
                        float _4456 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4467 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3151 * _3151) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2936 = (_3098 * _3046.x) + _3004;
                        _2937 = (_3098 * _3046.y) + _3005;
                        _2938 = (_3098 * _3046.z) + _3006;
                        _2933 = (_3179 * _3063.x) + _3001;
                        _2934 = (_3179 * _3063.y) + _3002;
                        _2935 = (_3179 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_61_pred = _2933;
                    frontier_phi_61_pred_1 = _2938;
                    frontier_phi_61_pred_2 = _2937;
                    frontier_phi_61_pred_3 = _2936;
                    frontier_phi_61_pred_4 = _2935;
                    frontier_phi_61_pred_5 = _2934;
                }
                _2725 = frontier_phi_61_pred;
                _2735 = frontier_phi_61_pred_1;
                _2733 = frontier_phi_61_pred_2;
                _2731 = frontier_phi_61_pred_3;
                _2729 = frontier_phi_61_pred_4;
                _2727 = frontier_phi_61_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2725;
                    _2878 = _2727;
                    _2879 = _2729;
                    _2880 = _2731;
                    _2881 = _2733;
                    _2882 = _2735;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
        }
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.z;
        uint _2741 = (_2739 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2741) & _2578) == 0u)
        {
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
            float _2871 = _2870 * _2532;
            float _2872 = _2870 * _2533;
            float _2873 = _2870 * _2534;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2741 < ((_2739 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2984 = _2724;
                float _2985 = _2726;
                float _2986 = _2728;
                float _2987 = _2730;
                float _2988 = _2732;
                float _2989 = _2734;
                uint _2990 = _2741;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3000)
                    {
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        uint _3203 = _2999;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3272;
                        vec4 _3288;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            uint _3214 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3259 = (_3214 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3275 = (_3214 * 40u) + 20u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3291 = (_3214 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3214 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2534, _3323.z, fma(_2533, _3323.y, _3323.x * _2532)) + _3323.w;
                            _3336 = !((fma(_2534, _3304.z, fma(_2533, _3304.y, _3304.x * _2532)) + _3304.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3336)
                            {
                                float _3363 = _3229.x - _2532;
                                float _3364 = _3229.y - _2533;
                                float _3365 = _3229.z - _2534;
                                float _3366 = dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365));
                                float _3369 = inversesqrt(_3366);
                                float _3370 = _3369 * _3363;
                                float _3371 = _3369 * _3364;
                                float _3372 = _3369 * _3365;
                                float _3376 = 1.0 - (_3366 / (_3230 * _3230));
                                float _4478 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3381 = sqrt(_3366) * _3245.w;
                                float _3383 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                                float _3384 = _3383 * _3383;
                                float _3387 = ((1.0 - _3384) * dot(vec3(_3370, _3371, _3372), vec3(_774, _777, _780))) + _3384;
                                float _3390 = _3381 * _3381;
                                float _3394 = (fma(_2534, _3272.z, fma(_2533, _3272.y, _3272.x * _2532)) + _3272.w) / _3335;
                                float _3395 = (fma(_2534, _3288.z, fma(_2533, _3288.y, _3288.x * _2532)) + _3288.w) / _3335;
                                float _3399 = 1.0 - dot(vec2(_3394, _3395), vec2(_3394, _3395));
                                float _4494 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3401 = _3400 * (((isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))) * _3377) / ((_3390 * 0.699999988079071044921875) + 1.0));
                                float _3413 = exp2(log2(1.0 / ((_3390 * 3.5) + 5.0)) * 0.25);
                                float _3414 = 1.0 - _849;
                                float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                                float _3422 = _3421 * _3421;
                                float _3423 = _3422 * _3422;
                                float _3424 = _3370 - _2871;
                                float _3425 = _3371 - _2872;
                                float _3426 = _3372 - _2873;
                                float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                                float _3434 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4505 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3438 = dot(vec3(_774, _777, _780), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                                float _4516 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                                float _3446 = _3383 * _3422;
                                float _3447 = _3446 * _3446;
                                float _3453 = ((1.0 - _3447) * dot(vec3(_774, _777, _780), vec3(_3370, _3371, _3372))) + _3447;
                                float _4527 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3455 = 1.0 - _3422;
                                float _3465 = (0.5 / (((_3454 * ((_3437 * _3455) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3422) * _3437))) * _3454;
                                float _4538 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3475 = (_3400 * _3377) * (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3445 * _3445) * ((_3390 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3475 * _3257.x;
                                frontier_phi_73_pred_1 = _3475 * _3257.y;
                                frontier_phi_73_pred_2 = _3401 * _3245.z;
                                frontier_phi_73_pred_3 = _3401 * _3245.y;
                                frontier_phi_73_pred_4 = _3401 * _3245.x;
                                frontier_phi_73_pred_5 = _3475 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3479 = frontier_phi_73_pred;
                            _3480 = frontier_phi_73_pred_1;
                            _3484 = frontier_phi_73_pred_2;
                            _3483 = frontier_phi_73_pred_3;
                            _3482 = frontier_phi_73_pred_4;
                            _3481 = frontier_phi_73_pred_5;
                            _3187 = _3482 + _3200;
                            _3188 = _3483 + _3201;
                            _3189 = _3484 + _3202;
                            _3184 = _3479 + _3197;
                            _3185 = _3480 + _3198;
                            _3186 = _3481 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    _2852 = frontier_phi_67_pred;
                    _2854 = frontier_phi_67_pred_1;
                    _2856 = frontier_phi_67_pred_2;
                    _2850 = frontier_phi_67_pred_3;
                    _2848 = frontier_phi_67_pred_4;
                    _2846 = frontier_phi_67_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2846;
                        _2985 = _2848;
                        _2986 = _2850;
                        _2987 = _2852;
                        _2988 = _2854;
                        _2989 = _2856;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2854;
                frontier_phi_55_56_ladder_1 = _2856;
                frontier_phi_55_56_ladder_2 = _2852;
                frontier_phi_55_56_ladder_3 = _2850;
                frontier_phi_55_56_ladder_4 = _2848;
                frontier_phi_55_56_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_55_56_ladder = _2732;
                frontier_phi_55_56_ladder_1 = _2734;
                frontier_phi_55_56_ladder_2 = _2730;
                frontier_phi_55_56_ladder_3 = _2728;
                frontier_phi_55_56_ladder_4 = _2726;
                frontier_phi_55_56_ladder_5 = _2724;
            }
            _2845 = frontier_phi_55_56_ladder_5;
            _2847 = frontier_phi_55_56_ladder_4;
            _2849 = frontier_phi_55_56_ladder_3;
            _2851 = frontier_phi_55_56_ladder_2;
            _2853 = frontier_phi_55_56_ladder;
            _2855 = frontier_phi_55_56_ladder_1;
        }
        float _2860 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2591 = (_2860 * _2851) + _2024;
        _2593 = (_2860 * _2853) + _2026;
        _2595 = (_2860 * _2855) + _2028;
        _2597 = ((_2845 * _818) * _2860) + _2372;
        _2599 = ((_2847 * _820) * _2860) + _2374;
        _2601 = ((_2849 * _821) * _2860) + _2376;
    }
    else
    {
        _2591 = _2024;
        _2593 = _2026;
        _2595 = _2028;
        _2597 = _2372;
        _2599 = _2374;
        _2601 = _2376;
    }
    uint _2607 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _2613 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2619 = (((((_2613 * cbMtdParam._m0[11u].x) * (((_525.x - _522) * _503) + _522)) * _554) * (((1.0 - _607) * cbMtdParam._m0[16u].y) + _607)) * _644) * cbInstanceData._m0[_2607].x;
    float _2625 = (((((_2613 * cbMtdParam._m0[11u].y) * (((_525.y - _523) * _503) + _523)) * _554) * (((1.0 - _609) * cbMtdParam._m0[16u].y) + _609)) * _644) * cbInstanceData._m0[_2607].y;
    float _2631 = (((((_2613 * cbMtdParam._m0[11u].z) * (((_525.z - _524) * _503) + _524)) * _554) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _644) * cbInstanceData._m0[_2607].z;
    float _4554 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4565 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4576 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2648 = (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2591 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _833))) + ((_2597 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + _2619;
    float _2650 = (_2625 + ((_2599 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2593 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _833)));
    float _2652 = (_2631 + ((_2601 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1641)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2595 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _833)));
    float _4602 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2665 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    uint _2666 = _793 + 6u;
    float _2674 = _755 / cbSceneParam._m0[86u].x;
    float _2675 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2749 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2750 = _2749 / _690;
        float _2761 = _2750 * _740;
        float _2762 = _741 * _2750;
        float _2763 = (-0.0) - _2762;
        float _2764 = _2750 * _742;
        float _2766 = (cbSceneParam._m0[77u].w * _2763) / _2749;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2762;
        float _2774 = sqrt(((_2761 * _2761) + (_2762 * _2762)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2749)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2763 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2908 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2946 = ((abs(_2774 / _2763) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2784 * _2917) - exp2(_2784 * _2918)) * _2906))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2694);
        _2786 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2788 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2790 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2792 = _2957 * _2694;
    }
    else
    {
        _2786 = _2691;
        _2788 = _2692;
        _2790 = _2693;
        _2792 = _2694;
    }
    float _2804 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2805 = _2804 == 3.0;
    float _2806 = log2(_2792);
    float _2810 = exp2(_2806 * cbSceneParam._m0[78u].x);
    float _2811 = exp2(_2806 * cbSceneParam._m0[78u].y);
    float _2812 = exp2(_2806 * cbSceneParam._m0[78u].z);
    float _2813 = _2810 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)));
    float _2814 = _2811 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)));
    float _2815 = _2812 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0)));
    float _2824 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2824 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.y = _2824 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.z = _2824 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.w = cbInstanceData._m0[_2666].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2619) * _2665) * _2810) * _2824;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2625) * _2665) * _2811) * _2824;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2631) * _2665) * _2812) * _2824;
    SV_Target_1.w = cbInstanceData._m0[_2666].w;
}


