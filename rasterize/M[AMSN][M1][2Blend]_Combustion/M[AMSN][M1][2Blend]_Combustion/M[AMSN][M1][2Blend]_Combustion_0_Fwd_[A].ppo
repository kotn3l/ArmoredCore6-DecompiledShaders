#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1211;
float _3627;
float _3628;
float _3629;
float _3630;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _314 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3639 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _315 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _322 = (_315 * ((_283.x * cbMtdParam._m0[10u].x) - _263)) + _263;
    float _323 = (_315 * ((_283.y * cbMtdParam._m0[10u].y) - _264)) + _264;
    float _324 = (_315 * ((_283.z * cbMtdParam._m0[10u].z) - _265)) + _265;
    vec4 _338 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3650 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    vec4 _367 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _371 = _367.z;
    float _374 = (_367.x * 2.0) + (-1.0);
    float _375 = (_367.y * 2.0) + (-1.0);
    float _376 = dot(vec2(_374, _375), vec2(_374, _375));
    float _3661 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _381 = sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))));
    float _386 = ((((_338.z * cbMtdParam._m0[16u].w) - _371) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _371;
    float _409 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _410 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _433 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _439 = (_433.x * 2.0) + (-1.0);
    float _440 = (_433.y * 2.0) + (-1.0);
    float _444 = 1.0 - dot(vec2(_439, _440), vec2(_439, _440));
    float _3672 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _446 = sqrt(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)));
    float _449 = fma(_446, _221, fma(_440, _228, _439 * _214));
    float _452 = fma(_446, _222, fma(_440, _229, _439 * _215));
    float _455 = fma(_446, _223, fma(_440, _230, _439 * _216));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    float _461 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _470 = (((_452 * 0.5) * _459) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _472 = (-0.0) - (cbMtdParam._m0[14u].w * (((_449 * 0.5) * _459) + (-0.25)));
    float _474 = fract(_461);
    float _476 = fract(_461 + 0.5);
    float _487 = abs((_474 * 2.0) + (-1.0));
    vec4 _504 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_474 * _472) + _409) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_470 * _474) + _410) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    vec4 _509 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_476 * _472) + _409) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_470 * _476) + _410) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _529 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3683 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _538 = (((_530 * _530) * (3.0 - (_530 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _547 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _555 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3694 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _560 = (_556 * _556) * (3.0 - (_556 * 2.0));
    float _561 = _560 * cbMtdParam._m0[17u].y;
    float _562 = _560 * cbMtdParam._m0[17u].z;
    float _563 = sin(_547);
    float _564 = cos(_547);
    float _565 = TEXCOORD.z - _561;
    float _566 = TEXCOORD.w - _562;
    vec4 _585 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_561 + fma(_566, (-0.0) - _563, _565 * _564))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_566, _564, _565 * _563) + _562)) + cbTextureTilingScale._m0[1u].w));
    float _591 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _585.x;
    float _593 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _585.y;
    float _595 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _585.z;
    vec4 _618 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _409) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _410) + cbTextureTilingScale._m0[6u].w));
    float _627 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_618.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3705 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _635 = (_315 * (_346 - _374)) + _374;
    float _636 = (_315 * (_348 - _375)) + _375;
    float _637 = (_315 * (sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) - _381)) + _381;
    float _640 = fma(_637, _221, fma(_636, _228, _635 * _214));
    float _643 = fma(_637, _222, fma(_636, _229, _635 * _215));
    float _646 = fma(_637, _223, fma(_636, _230, _635 * _216));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3716 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _654 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3738 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3749 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    vec4 _737 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _739 = _737.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _892 = sqrt(((_723 * _723) + (_724 * _724)) + (_725 * _725));
        float _898 = (cbMatDynParam._m0[5u].x * _892) + cbMatDynParam._m0[5u].y;
        float _3760 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _903 = (cbMatDynParam._m0[5u].z * _892) + cbMatDynParam._m0[5u].w;
        float _3771 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) - _899)) + _899) < ((_739 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _750 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _751 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _772 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _775 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _788 = uint(roundEven(NORMAL.w)) * 13u;
    uint _789 = _788 + 9u;
    uint _790 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * cbInstanceData._m0[_790].z;
    float _3782 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _750, cbSceneParam._m0[86u].y * _751));
    float _813 = _810.x * TEXCOORD_6.w;
    float _814 = dot(vec3(_651, _652, _653), vec3(_730, _731, _732));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _651) - _730;
    float _822 = (_817 * _652) - _731;
    float _823 = (_817 * _653) - _732;
    float _827 = abs(dot(vec3(_730, _731, _732), vec3(_651, _652, _653)));
    float _3815 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_654);
    float _841 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _936 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _940 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _944 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _968 = _873 + _651;
        float _969 = _877 + _652;
        float _970 = _881 + _653;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _936;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _940;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _944;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_936 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_940 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_944 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_651, _652, _653), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3863 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_651, _652, _653), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3896 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_651, _652, _653), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3929 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1258 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1262 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1285 = _873 + _651;
        float _1286 = _877 + _652;
        float _1287 = _881 + _653;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_651, _652, _653), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3992 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_651, _652, _653), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4025 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_651, _652, _653), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4058 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = _1211;
        _1532 = _1211;
        _1533 = _1211;
        _1534 = _1211;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1223)) + _1223;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1225)) + _1225;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _821 * 0.5;
    float _1592 = _822 * 0.5;
    float _1593 = _823 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1707 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1711 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1715 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1718 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1721 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1724 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1752;
        if (_1718 > 0.0)
        {
            _1752 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1752 = frontier_phi_17_15_ladder;
        }
        float _1954;
        if (_1721 > 0.0)
        {
            _1954 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1954 = frontier_phi_26_22_ladder;
        }
        float _2197;
        if (_1724 > 0.0)
        {
            _2197 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2197 = frontier_phi_38_33_ladder;
        }
        float _2199 = isnan(_1954) ? _1752 : (isnan(_1752) ? _1954 : min(_1752, _1954));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1718) + _1707;
        float _2205 = (_2200 * _1721) + _1711;
        float _2206 = (_2200 * _1724) + _1715;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_16_38_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1740 = frontier_phi_16_38_ladder_2;
        _1742 = frontier_phi_16_38_ladder_1;
        _1744 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1660);
        _1740 = _1728.x * cbModelParam._m0[1u].y;
        _1742 = _1728.y * cbModelParam._m0[1u].y;
        _1744 = _1728.z * cbModelParam._m0[1u].y;
    }
    float _1748 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1748 : min(cbModelParam._m0[25u].w, _1748));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1803 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1807 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1811 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1814 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1817 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1820 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1959;
        if (_1814 > 0.0)
        {
            _1959 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1959 = frontier_phi_28_24_ladder;
        }
        float _2224;
        if (_1817 > 0.0)
        {
            _2224 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2224 = frontier_phi_40_35_ladder;
        }
        float _2429;
        if (_1820 > 0.0)
        {
            _2429 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2429 = frontier_phi_49_46_ladder;
        }
        float _2431 = isnan(_2224) ? _1959 : (isnan(_1959) ? _2224 : min(_1959, _2224));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1814) + _1803;
        float _2437 = (_2432 * _1817) + _1807;
        float _2438 = (_2432 * _1820) + _1811;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1749);
            frontier_phi_25_49_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1839 = frontier_phi_25_49_ladder_2;
        _1841 = frontier_phi_25_49_ladder_1;
        _1843 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1749);
        _1839 = _1823.x * cbModelParam._m0[1u].z;
        _1841 = _1823.y * cbModelParam._m0[1u].z;
        _1843 = _1823.z * cbModelParam._m0[1u].z;
    }
    float _1855 = ((((1.0 - _841) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_841 * _829)) * _813;
    float _1856 = _1855 * ((cbModelParam._m0[1u].w * (_1839 - _1740)) + _1740);
    float _1857 = _1855 * ((cbModelParam._m0[1u].w * (_1841 - _1742)) + _1742);
    float _1858 = _1855 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1857, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1857, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1857, cbSceneParam._m0[91u].y, _1856 * cbSceneParam._m0[91u].x));
    uvec4 _1877 = floatBitsToUint(cbInstanceData._m0[_788 + 5u]);
    uint _1879 = _1877.x * 14u;
    uint _1880 = _1879 + 13u;
    float _1887 = _813 + (-1.0);
    float _1892 = (cbLight._m0[_1880].x * _1887) + 1.0;
    float _1893 = (cbLight._m0[_1880].y * _1887) + 1.0;
    float _1894 = (cbLight._m0[_1880].z * _1887) + 1.0;
    float _1895 = (cbLight._m0[_1880].w * _1887) + 1.0;
    uint _1896 = _1879 + 5u;
    float _1902 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1906 = _1879 + 4u;
    float _1913 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1917 = _1879 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_651, _652, _653));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_651, _652, _653));
    float _4194 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4205 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1896].x * _1902) * _1938) + ((cbLight._m0[_1906].x * _1913) * _1936);
    float _1946 = ((_1902 * cbLight._m0[_1896].y) * _1938) + ((_1913 * cbLight._m0[_1906].y) * _1936);
    float _1947 = ((_1902 * cbLight._m0[_1896].z) * _1938) + ((_1913 * cbLight._m0[_1906].z) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1879 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1879 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1879 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4216 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1991 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2168 = _1879 + 7u;
        float _2184 = (dot(vec3(cbLight._m0[_1879 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2185 = _2184 * _2184;
        float _4232 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2186 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2187 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2009 = (((cbLight._m0[_2168].x * 0.3183098733425140380859375) * _2186) * _2187) + _1964;
        _2011 = (((cbLight._m0[_2168].y * 0.3183098733425140380859375) * _2186) * _2187) + _1966;
        _2013 = (((cbLight._m0[_2168].z * 0.3183098733425140380859375) * _2186) * _2187) + _1968;
    }
    uint _2016 = _1879 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _654) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1879].x + _730;
    float _2032 = cbLight._m0[_1879].y + _731;
    float _2033 = cbLight._m0[_1879].z + _732;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1879].xyz));
    float _4248 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2045 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2046 = dot(vec3(_651, _652, _653), vec3(_2038, _2039, _2040));
    float _4270 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2038, _2039, _2040));
    float _4281 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2070 = 1.0 - _2030;
    float _2081 = (0.5 / (((_2045 * ((_2044 * _2070) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2070) + _2030) * _2044))) * _2044;
    float _4292 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2094 = _1879 + 9u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _654) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1917].x + _730;
    float _2108 = cbLight._m0[_1917].y + _731;
    float _2109 = cbLight._m0[_1917].z + _732;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1917].xyz));
    float _4303 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2121 = dot(vec3(_651, _652, _653), vec3(_2114, _2115, _2116));
    float _4314 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2114, _2115, _2116));
    float _4325 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2106 * _2106;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2143 = 1.0 - _2106;
    float _2153 = (0.5 / (((_2045 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2143) + _2106) * _2120))) * _2120;
    float _4336 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    float _2165 = (((_2142 * cbLight._m0[_2094].x) * _2155) * _1902) + (((_2069 * cbLight._m0[_2016].x) * _2083) * _1913);
    float _2166 = (((_2142 * cbLight._m0[_2094].y) * _2155) * _1902) + (((_2069 * cbLight._m0[_2016].y) * _2083) * _1913);
    float _2167 = (((_2142 * cbLight._m0[_2094].z) * _2155) * _1902) + (((_2069 * cbLight._m0[_2016].z) * _2083) * _1913);
    float _2229;
    float _2231;
    float _2233;
    if (_1953)
    {
        _2229 = _2165;
        _2231 = _2166;
        _2233 = _2167;
    }
    else
    {
        uint _2235 = _1879 + 2u;
        uint _2239 = _1879 + 10u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _654) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _730;
        float _2256 = cbLight._m0[_2235].y + _731;
        float _2257 = cbLight._m0[_2235].z + _732;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2235].xyz));
        float _4347 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2269 = dot(vec3(_651, _652, _653), vec3(_2262, _2263, _2264));
        float _4358 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4369 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2291 = 1.0 - _2254;
        float _2301 = (0.5 / (((_2045 * ((_2268 * _2291) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2291) + _2254) * _2268))) * _2268;
        float _4380 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2229 = (((_2290 * cbLight._m0[_2239].x) * _2303) * _2304) + _2165;
        _2231 = (((_2290 * cbLight._m0[_2239].y) * _2303) * _2304) + _2166;
        _2233 = (((_2290 * cbLight._m0[_2239].z) * _2303) * _2304) + _2167;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1971)
    {
        _2339 = _2229;
        _2341 = _2231;
        _2343 = _2233;
    }
    else
    {
        uint _2350 = _1879 + 3u;
        uint _2354 = _1879 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _654) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _730;
        float _2371 = cbLight._m0[_2350].y + _731;
        float _2372 = cbLight._m0[_2350].z + _732;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2350].xyz));
        float _4396 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2384 = dot(vec3(_651, _652, _653), vec3(_2377, _2378, _2379));
        float _4407 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4418 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2406 = 1.0 - _2369;
        float _2416 = (0.5 / (((_2045 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2406) + _2369) * _2383))) * _2383;
        float _4429 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2339 = (((_2405 * cbLight._m0[_2354].x) * _2418) * _2419) + _2229;
        _2341 = (((_2405 * cbLight._m0[_2354].y) * _2418) * _2419) + _2231;
        _2343 = (((_2405 * cbLight._m0[_2354].z) * _2418) * _2419) + _2233;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1877.y == 0u)
    {
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2494;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2494;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2494;
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _751) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _750) / _2510)));
        float _2531 = (log2(_2497 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2864)
                {
                    frontier_phi_66_pred = _2848;
                    frontier_phi_66_pred_1 = _2853;
                    frontier_phi_66_pred_2 = _2852;
                    frontier_phi_66_pred_3 = _2851;
                    frontier_phi_66_pred_4 = _2850;
                    frontier_phi_66_pred_5 = _2849;
                }
                else
                {
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    uint _2999;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2863;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _3003 = uint(findLSB(_2999)) + (_2854 << 5u);
                        uint _3000 = (_2999 + 4294967295u) & _2999;
                        uint _3005 = _3003 * 48u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3025 = (_3003 * 48u) + 4u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3044 = (_3003 * 48u) + 8u;
                        vec3 _3055 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x));
                        float _3059 = _3019.x - _2495;
                        float _3060 = _3019.y - _2496;
                        float _3061 = _3019.z - _2497;
                        float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                        float _3065 = inversesqrt(_3062);
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3069 = dot(vec3(_769, _772, _775), vec3(_3066, _3067, _3068));
                        float _3074 = 1.0 - (_3062 * _3019.w);
                        float _4455 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3076 = sqrt(_3062) * _3038.w;
                        float _3079 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3069) + _3080;
                        float _3086 = _3076 * _3076;
                        float _3090 = ((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3075) / ((_3086 * 0.699999988079071044921875) + 1.0);
                        float _3094 = (-0.0) - _2495;
                        float _3095 = (-0.0) - _2496;
                        float _3096 = (-0.0) - _2497;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3111 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _829;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_769, _772, _775), vec3(_3101, _3102, _3103));
                        float _4471 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3136 = dot(vec3(_769, _772, _775), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4482 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3079 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3069) + _3145;
                        float _4493 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4504 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3143 * _3143) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125))) * _3075;
                        _2923 = (_3090 * _3038.x) + _2996;
                        _2924 = (_3090 * _3038.y) + _2997;
                        _2925 = (_3090 * _3038.z) + _2998;
                        _2920 = (_3171 * _3055.x) + _2993;
                        _2921 = (_3171 * _3055.y) + _2994;
                        _2922 = (_3171 * _3055.z) + _2995;
                        if (_3000 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _3000;
                        }
                    }
                    frontier_phi_66_pred = _2920;
                    frontier_phi_66_pred_1 = _2925;
                    frontier_phi_66_pred_2 = _2924;
                    frontier_phi_66_pred_3 = _2923;
                    frontier_phi_66_pred_4 = _2922;
                    frontier_phi_66_pred_5 = _2921;
                }
                _2688 = frontier_phi_66_pred;
                _2698 = frontier_phi_66_pred_1;
                _2696 = frontier_phi_66_pred_2;
                _2694 = frontier_phi_66_pred_3;
                _2692 = frontier_phi_66_pred_4;
                _2690 = frontier_phi_66_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2688;
                    _2849 = _2690;
                    _2850 = _2692;
                    _2851 = _2694;
                    _2852 = _2696;
                    _2853 = _2698;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2704) & _2541) == 0u)
        {
            _2816 = _2687;
            _2818 = _2689;
            _2820 = _2691;
            _2822 = _2693;
            _2824 = _2695;
            _2826 = _2697;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
            float _2842 = _2841 * _2495;
            float _2843 = _2841 * _2496;
            float _2844 = _2841 * _2497;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2976 = _2687;
                float _2977 = _2689;
                float _2978 = _2691;
                float _2979 = _2693;
                float _2980 = _2695;
                float _2981 = _2697;
                uint _2982 = _2704;
                uint _2991;
                bool _2992;
                for (;;)
                {
                    _2991 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                    _2992 = _2991 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2992)
                    {
                        frontier_phi_77_pred = _2981;
                        frontier_phi_77_pred_1 = _2980;
                        frontier_phi_77_pred_2 = _2979;
                        frontier_phi_77_pred_3 = _2978;
                        frontier_phi_77_pred_4 = _2977;
                        frontier_phi_77_pred_5 = _2976;
                    }
                    else
                    {
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3198 = _2976;
                        float _3199 = _2977;
                        float _3200 = _2978;
                        float _3201 = _2979;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        uint _3204 = _2991;
                        uint _3205;
                        vec4 _3230;
                        float _3231;
                        vec4 _3246;
                        vec3 _3258;
                        vec4 _3273;
                        vec4 _3289;
                        float _3336;
                        bool _3337;
                        for (;;)
                        {
                            uint _3215 = ((_2982 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3204));
                            _3205 = (_3204 + 4294967295u) & _3204;
                            uint _3217 = _3215 * 40u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3231 = _3230.w;
                            uint _3233 = (_3215 * 40u) + 4u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3215 * 40u) + 8u;
                            _3258 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x));
                            uint _3260 = (_3215 * 40u) + 16u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3276 = (_3215 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3292 = (_3215 * 40u) + 24u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3311 = (_3215 * 40u) + 28u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3336 = fma(_2497, _3324.z, fma(_2496, _3324.y, _3324.x * _2495)) + _3324.w;
                            _3337 = !((fma(_2497, _3305.z, fma(_2496, _3305.y, _3305.x * _2495)) + _3305.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3337)
                            {
                                float _3364 = _3230.x - _2495;
                                float _3365 = _3230.y - _2496;
                                float _3366 = _3230.z - _2497;
                                float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                                float _3370 = inversesqrt(_3367);
                                float _3371 = _3370 * _3364;
                                float _3372 = _3370 * _3365;
                                float _3373 = _3370 * _3366;
                                float _3377 = 1.0 - (_3367 / (_3231 * _3231));
                                float _4515 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3382 = sqrt(_3367) * _3246.w;
                                float _3384 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                                float _3385 = _3384 * _3384;
                                float _3388 = ((1.0 - _3385) * dot(vec3(_3371, _3372, _3373), vec3(_769, _772, _775))) + _3385;
                                float _3391 = _3382 * _3382;
                                float _3395 = (fma(_2497, _3273.z, fma(_2496, _3273.y, _3273.x * _2495)) + _3273.w) / _3336;
                                float _3396 = (fma(_2497, _3289.z, fma(_2496, _3289.y, _3289.x * _2495)) + _3289.w) / _3336;
                                float _3400 = 1.0 - dot(vec2(_3395, _3396), vec2(_3395, _3396));
                                float _4531 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3402 = _3401 * (((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3378) / ((_3391 * 0.699999988079071044921875) + 1.0));
                                float _3414 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                                float _3415 = 1.0 - _829;
                                float _3422 = sqrt(1.0 - ((1.0 - (_3415 * _3415)) * (1.0 - (_3414 * _3414))));
                                float _3423 = _3422 * _3422;
                                float _3424 = _3423 * _3423;
                                float _3425 = _3371 - _2842;
                                float _3426 = _3372 - _2843;
                                float _3427 = _3373 - _2844;
                                float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                                float _3435 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4542 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3438 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3439 = dot(vec3(_769, _772, _775), vec3(_3431 * _3425, _3431 * _3426, _3431 * _3427));
                                float _4553 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3446 = ((_3442 * _3442) * (_3424 + (-1.0))) + 1.0;
                                float _3447 = _3384 * _3423;
                                float _3448 = _3447 * _3447;
                                float _3454 = ((1.0 - _3448) * dot(vec3(_769, _772, _775), vec3(_3371, _3372, _3373))) + _3448;
                                float _4564 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3456 = 1.0 - _3423;
                                float _3466 = (0.5 / (((_3455 * ((_3438 * _3456) + _3423)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3423) * _3438))) * _3455;
                                float _4575 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3476 = (_3401 * _3378) * (((_3424 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3446 * _3446) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3402 * _3246.y;
                                frontier_phi_83_pred_1 = _3402 * _3246.x;
                                frontier_phi_83_pred_2 = _3476 * _3258.z;
                                frontier_phi_83_pred_3 = _3476 * _3258.y;
                                frontier_phi_83_pred_4 = _3476 * _3258.x;
                                frontier_phi_83_pred_5 = _3402 * _3246.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3484 = frontier_phi_83_pred;
                            _3483 = frontier_phi_83_pred_1;
                            _3482 = frontier_phi_83_pred_2;
                            _3481 = frontier_phi_83_pred_3;
                            _3480 = frontier_phi_83_pred_4;
                            _3485 = frontier_phi_83_pred_5;
                            _3188 = _3483 + _3201;
                            _3189 = _3484 + _3202;
                            _3190 = _3485 + _3203;
                            _3185 = _3480 + _3198;
                            _3186 = _3481 + _3199;
                            _3187 = _3482 + _3200;
                            if (_3205 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3205;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3190;
                        frontier_phi_77_pred_1 = _3189;
                        frontier_phi_77_pred_2 = _3188;
                        frontier_phi_77_pred_3 = _3187;
                        frontier_phi_77_pred_4 = _3186;
                        frontier_phi_77_pred_5 = _3185;
                    }
                    _2827 = frontier_phi_77_pred;
                    _2825 = frontier_phi_77_pred_1;
                    _2823 = frontier_phi_77_pred_2;
                    _2821 = frontier_phi_77_pred_3;
                    _2819 = frontier_phi_77_pred_4;
                    _2817 = frontier_phi_77_pred_5;
                    uint _2983 = _2982 + 1u;
                    if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2976 = _2817;
                        _2977 = _2819;
                        _2978 = _2821;
                        _2979 = _2823;
                        _2980 = _2825;
                        _2981 = _2827;
                        _2982 = _2983;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2821;
                frontier_phi_58_59_ladder_1 = _2827;
                frontier_phi_58_59_ladder_2 = _2825;
                frontier_phi_58_59_ladder_3 = _2823;
                frontier_phi_58_59_ladder_4 = _2819;
                frontier_phi_58_59_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_58_59_ladder = _2691;
                frontier_phi_58_59_ladder_1 = _2697;
                frontier_phi_58_59_ladder_2 = _2695;
                frontier_phi_58_59_ladder_3 = _2693;
                frontier_phi_58_59_ladder_4 = _2689;
                frontier_phi_58_59_ladder_5 = _2687;
            }
            _2816 = frontier_phi_58_59_ladder_5;
            _2818 = frontier_phi_58_59_ladder_4;
            _2820 = frontier_phi_58_59_ladder;
            _2822 = frontier_phi_58_59_ladder_3;
            _2824 = frontier_phi_58_59_ladder_2;
            _2826 = frontier_phi_58_59_ladder_1;
        }
        float _2831 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2554 = (_2831 * _2822) + _2009;
        _2556 = (_2831 * _2824) + _2011;
        _2558 = (_2831 * _2826) + _2013;
        _2560 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2339;
        _2562 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2341;
        _2564 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2343;
    }
    else
    {
        _2554 = _2009;
        _2556 = _2011;
        _2558 = _2013;
        _2560 = _2339;
        _2562 = _2341;
        _2564 = _2343;
    }
    uint _2570 = _789 + uint(cbMatDynParam._m0[0u].w);
    float _2576 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2582 = (((((_2576 * cbMtdParam._m0[11u].x) * (((_509.x - _506) * _487) + _506)) * _538) * (((1.0 - _591) * cbMtdParam._m0[16u].y) + _591)) * _628) * cbInstanceData._m0[_2570].x;
    float _2588 = (((((_2576 * cbMtdParam._m0[11u].y) * (((_509.y - _507) * _487) + _507)) * _538) * (((1.0 - _593) * cbMtdParam._m0[16u].y) + _593)) * _628) * cbInstanceData._m0[_2570].y;
    float _2594 = (((((_2576 * cbMtdParam._m0[11u].z) * (((_509.z - _508) * _487) + _508)) * _538) * (((1.0 - _595) * cbMtdParam._m0[16u].y) + _595)) * _628) * cbInstanceData._m0[_2570].z;
    float _4591 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4602 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4613 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2611 = (((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2554 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _813))) + ((_2560 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1649)) * cbPerFrame._m0[3u].x)) + _2582;
    float _2613 = (_2588 + ((_2562 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1649)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2556 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _813)));
    float _2615 = (_2594 + ((_2564 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1649)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2558 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _813)));
    float _2616 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2617 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2618 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2624 = cbMtdParam._m0[2u].x * _2582;
    float _2625 = cbMtdParam._m0[2u].y * _2588;
    float _2626 = cbMtdParam._m0[2u].z * _2594;
    float _4639 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2628 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    uint _2629 = _788 + 6u;
    float _2637 = _750 / cbSceneParam._m0[86u].x;
    float _2638 = _751 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2713 = _2712 / _673;
        float _2724 = _2713 * _723;
        float _2725 = _724 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2727 = _2713 * _725;
        float _2729 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2725;
        float _2737 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2726 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2879 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2933 = ((abs(_2737 / _2726) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2747 * _2888) - exp2(_2747 * _2889)) * _2877))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2657);
        _2749 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2751 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2753 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2755 = _2944 * _2657;
    }
    else
    {
        _2749 = _2654;
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
    }
    bool _2971;
    vec4 _2765;
    vec4 _2787;
    float _2789;
    float _2793;
    float _2794;
    float _2795;
    float _2798;
    float _2801;
    float _2804;
    float _2805;
    bool _2815;
    for (;;)
    {
        _2765 = cbMatDynParam._m0[0u];
        float _2767 = roundEven(_2765.y);
        bool _2768 = _2767 == 3.0;
        float _2769 = log2(_2755);
        float _2773 = exp2(_2769 * cbSceneParam._m0[78u].x);
        float _2774 = exp2(_2769 * cbSceneParam._m0[78u].y);
        float _2775 = exp2(_2769 * cbSceneParam._m0[78u].z);
        float _2776 = _2773 * _2616;
        float _2777 = _2774 * _2617;
        float _2778 = _2775 * _2618;
        float _2785 = _739 + (-0.5);
        _2787 = cbMtdParam._m0[1u];
        _2789 = _2787.y * _2785;
        float _2792 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2793 = _2792 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
        _2794 = _2792 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
        _2795 = _2792 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
        _2798 = ((_2624 * _2628) * _2773) * _2792;
        _2801 = ((_2625 * _2628) * _2774) * _2792;
        _2804 = ((_2626 * _2628) * _2775) * _2792;
        _2805 = _2785 * 0.999000012874603271484375;
        _2815 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2815)
        {
            if ((cbInstanceData._m0[_788 + 7u].x + _2805) < 0.5)
            {
                _2971 = true;
                break;
            }
        }
        uint _2912 = _789 + uint(_2765.w);
        if ((cbInstanceData._m0[_2912].w < 1.0) && ((cbInstanceData._m0[_2912].w + _2805) < 0.5))
        {
            _2971 = true;
            break;
        }
        if ((_2789 + 1.0) < _2787.x)
        {
            _2971 = true;
            break;
        }
        _2971 = false;
        break;
    }
    float _3176;
    if (_2971)
    {
        discard_state = true;
        _3176 = 0.0;
    }
    else
    {
        _3176 = cbInstanceData._m0[_2629].w;
    }
    SV_Target.x = _2793;
    SV_Target.y = _2794;
    SV_Target.z = _2795;
    SV_Target.w = _3176;
    SV_Target_1.x = _2798;
    SV_Target_1.y = _2801;
    SV_Target_1.z = _2804;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
    discard_exit();
}


