#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1208;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    vec4 _259 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _316 = (TEXCOORD_5 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5)) * (texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[16u].x + 1.0);
    float _3874 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _317 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _324 = (_317 * ((_285.x * cbMtdParam._m0[10u].x) - _265)) + _265;
    float _325 = (_317 * ((_285.y * cbMtdParam._m0[10u].y) - _266)) + _266;
    float _326 = (_317 * ((_285.z * cbMtdParam._m0[10u].z) - _267)) + _267;
    vec4 _338 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _340 = _338.x;
    float _342 = _340 - (_340 * _317);
    vec4 _356 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _364 = (_356.x * 2.0) + (-1.0);
    float _366 = (_356.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3885 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _385 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _389 = _385.z;
    float _392 = (_385.x * 2.0) + (-1.0);
    float _393 = (_385.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3896 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))));
    float _404 = ((((_356.z * cbMtdParam._m0[16u].w) - _389) * TEXCOORD_5) * cbMtdParam._m0[16u].z) + _389;
    float _427 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.z;
    float _428 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.w;
    vec4 _451 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * ((cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _457 = (_451.x * 2.0) + (-1.0);
    float _458 = (_451.y * 2.0) + (-1.0);
    float _462 = 1.0 - dot(vec2(_457, _458), vec2(_457, _458));
    float _3907 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)));
    float _467 = fma(_464, _223, fma(_458, _230, _457 * _216));
    float _470 = fma(_464, _224, fma(_458, _231, _457 * _217));
    float _473 = fma(_464, _225, fma(_458, _232, _457 * _218));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _479 = (cbPerFrame._m0[22u].x * 2.0) * cbMtdParam._m0[14u].z;
    float _488 = (((_470 * 0.5) * _477) + (-0.25)) * cbMtdParam._m0[14u].w;
    float _490 = (-0.0) - (cbMtdParam._m0[14u].w * (((_467 * 0.5) * _477) + (-0.25)));
    float _492 = fract(_479);
    float _494 = fract(_479 + 0.5);
    float _505 = abs((_492 * 2.0) + (-1.0));
    vec4 _522 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_492 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _492) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    vec4 _527 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_494 * _490) + _427) * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (((_488 * _494) + _428) * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _547 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3918 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _556 = (((_548 * _548) * (3.0 - (_548 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _565 = cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x;
    float _573 = abs((fract(cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3929 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _578 = (_574 * _574) * (3.0 - (_574 * 2.0));
    float _579 = _578 * cbMtdParam._m0[17u].y;
    float _580 = _578 * cbMtdParam._m0[17u].z;
    float _581 = sin(_565);
    float _582 = cos(_565);
    float _583 = TEXCOORD.z - _579;
    float _584 = TEXCOORD.w - _580;
    vec4 _603 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * (_579 + fma(_584, (-0.0) - _581, _583 * _582))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * (fma(_584, _582, _583 * _581) + _580)) + cbTextureTilingScale._m0[1u].w));
    float _609 = (cbMtdParam._m0[12u].x * cbMtdParam._m0[13u].w) * _603.x;
    float _611 = (cbMtdParam._m0[12u].y * cbMtdParam._m0[13u].w) * _603.y;
    float _613 = (cbMtdParam._m0[12u].z * cbMtdParam._m0[13u].w) * _603.z;
    vec4 _636 = texture(sampler2D(M_AMSN_M1_2Blend_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _427) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _428) + cbTextureTilingScale._m0[6u].w));
    float _645 = (TEXCOORD_6.x - ((cbMtdParam._m0[17u].x * (1.0 - TEXCOORD_6.x)) * (_636.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3940 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _653 = (_317 * (_364 - _392)) + _392;
    float _654 = (_317 * (_366 - _393)) + _393;
    float _655 = (_317 * (sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _399)) + _399;
    float _658 = fma(_655, _223, fma(_654, _230, _653 * _216));
    float _661 = fma(_655, _224, fma(_654, _231, _653 * _217));
    float _664 = fma(_655, _225, fma(_654, _232, _653 * _218));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3951 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _672 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3973 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3984 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3995 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _676 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _779 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _782 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _795 = uint(roundEven(NORMAL.w)) * 13u;
    uint _796 = _795 + 9u;
    uint _797 = _796 + uint(cbMatDynParam._m0[0u].w);
    float _803 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_797].x;
    float _804 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_797].y;
    float _805 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_797].z;
    float _4006 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _809 = 1.0 - _676;
    float _810 = _806 * _809;
    float _811 = _807 * _809;
    float _812 = _808 * _809;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _676;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _676;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _676;
    float _820 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _835 = _832.x * TEXCOORD_6.w;
    float _836 = dot(vec3(_669, _670, _671), vec3(_749, _750, _751));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _669) - _749;
    float _844 = (_839 * _670) - _750;
    float _845 = (_839 * _671) - _751;
    float _849 = abs(dot(vec3(_749, _750, _751), vec3(_669, _670, _671)));
    float _4039 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_672);
    float _863 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _869 = (1.0 - _863) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _870 = _863 * _851;
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _937 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _941 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _965 = _898 + _669;
        float _966 = _902 + _670;
        float _967 = _906 + _671;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _933;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _937;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _941;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_669, _670, _671), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _4087 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_669, _670, _671), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _4120 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_669, _670, _671), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _4153 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1252 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1256 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1279 = _898 + _669;
        float _1280 = _902 + _670;
        float _1281 = _906 + _671;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_669, _670, _671), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4216 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_669, _670, _671), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4249 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_669, _670, _671), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4282 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1208;
        _1518 = _1208;
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _843 * 0.5;
    float _1586 = _844 * 0.5;
    float _1587 = _845 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1715 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1718 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1746 = frontier_phi_14_12_ladder;
        }
        float _1918;
        if (_1715 > 0.0)
        {
            _1918 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1918 = frontier_phi_23_19_ladder;
        }
        float _2214;
        if (_1718 > 0.0)
        {
            _2214 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2214 = frontier_phi_35_30_ladder;
        }
        float _2216 = isnan(_1918) ? _1746 : (isnan(_1746) ? _1918 : min(_1746, _1918));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1712) + _1701;
        float _2222 = (_2217 * _1715) + _1705;
        float _2223 = (_2217 * _1718) + _1709;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_13_35_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_13_35_ladder_2;
        _1736 = frontier_phi_13_35_ladder_1;
        _1738 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1654);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1811 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1814 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _1923;
        if (_1808 > 0.0)
        {
            _1923 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1923 = frontier_phi_25_21_ladder;
        }
        float _2241;
        if (_1811 > 0.0)
        {
            _2241 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2241 = frontier_phi_37_32_ladder;
        }
        float _2579;
        if (_1814 > 0.0)
        {
            _2579 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2579 = frontier_phi_47_44_ladder;
        }
        float _2581 = isnan(_2241) ? _1923 : (isnan(_1923) ? _2241 : min(_1923, _2241));
        float _2582 = isnan(_2579) ? _2581 : (isnan(_2581) ? _2579 : min(_2581, _2579));
        float _2586 = (_2582 * _1808) + _1797;
        float _2587 = (_2582 * _1811) + _1801;
        float _2588 = (_2582 * _1814) + _1805;
        float _2589 = _2582 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2589;
        float _2592 = _2589 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2588 > _2592) || ((_2588 < _2590) || ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 < _2590) || (_2586 > _2592))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2588, cbModelParam._m0[17u].z, fma(_2587, cbModelParam._m0[17u].y, _2586 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2588, cbModelParam._m0[18u].z, fma(_2587, cbModelParam._m0[18u].y, _2586 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2588, cbModelParam._m0[19u].z, fma(_2587, cbModelParam._m0[19u].y, _2586 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_22_47_ladder = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_47_ladder_2;
        _1835 = frontier_phi_22_47_ladder_1;
        _1837 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1743);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1850 = (((_869 * _820) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_869 * _822) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1854 = (((_869 * _823) + _870) * _835) * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1857 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1910 = _1897 / _1909;
    float _1911 = _1901 / _1909;
    float _1912 = _1905 / _1909;
    float _2059;
    float _2060;
    float _2061;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1939 = ((uint(_1912 > cbSceneParam._m0[59u].y) + uint(_1912 > cbSceneParam._m0[59u].x)) + uint(_1912 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1940 = _1939 + 43u;
        uint _1948 = _1939 + 44u;
        uint _1956 = _1939 + 45u;
        uint _1964 = _1939 + 46u;
        float _1975 = fma(_1909, cbSceneParam._m0[_1940].w, fma(_1905, cbSceneParam._m0[_1940].z, fma(_1901, cbSceneParam._m0[_1940].y, _1897 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1909, cbSceneParam._m0[_1948].w, fma(_1905, cbSceneParam._m0[_1948].z, fma(_1901, cbSceneParam._m0[_1948].y, _1897 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1909, cbSceneParam._m0[_1964].w, fma(_1905, cbSceneParam._m0[_1964].z, fma(_1901, cbSceneParam._m0[_1964].y, _1897 * cbSceneParam._m0[_1964].x)));
        float _1992 = cbSceneParam._m0[33u].z * _1987;
        float _1994 = cbSceneParam._m0[33u].w * _1987;
        float _1997 = fma(_1909, cbSceneParam._m0[_1956].w, fma(_1905, cbSceneParam._m0[_1956].z, fma(_1901, cbSceneParam._m0[_1956].y, _1897 * cbSceneParam._m0[_1956].x))) / _1987;
        float _2045 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
        float _4408 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2052 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 + _1975) / _1987, (_1994 + _1979) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 + _1975) / _1987, (_1979 - _1992) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1992) / _1987, (_1979 - _1994) / _1987), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 - _1994) / _1987, (_1992 + _1979) / _1987), _1997), 0.0)).x), vec4(0.25)));
        _2059 = 1.0 - (_2052 * cbSceneParam._m0[34u].x);
        _2060 = 1.0 - (_2052 * cbSceneParam._m0[34u].y);
        _2061 = 1.0 - (_2052 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2059 = 1.0;
        _2060 = 1.0;
        _2061 = 1.0;
    }
    float _2125;
    float _2127;
    float _2129;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2113 = fma(_1909, cbSceneParam._m0[63u].w, fma(_1905, cbSceneParam._m0[63u].z, fma(_1901, cbSceneParam._m0[63u].y, _1897 * cbSceneParam._m0[63u].x)));
        float _2114 = fma(_1909, cbSceneParam._m0[60u].w, fma(_1905, cbSceneParam._m0[60u].z, fma(_1901, cbSceneParam._m0[60u].y, _1897 * cbSceneParam._m0[60u].x))) / _2113;
        float _2115 = fma(_1909, cbSceneParam._m0[61u].w, fma(_1905, cbSceneParam._m0[61u].z, fma(_1901, cbSceneParam._m0[61u].y, _1897 * cbSceneParam._m0[61u].x))) / _2113;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2114 >= cbSceneParam._m0[64u].x) && (_2115 >= cbSceneParam._m0[64u].y)) && (_2114 <= cbSceneParam._m0[64u].z)) && (_2115 <= cbSceneParam._m0[64u].w))
        {
            float _2254 = fma(_1909, cbSceneParam._m0[62u].w, fma(_1905, cbSceneParam._m0[62u].z, fma(_1901, cbSceneParam._m0[62u].y, _1897 * cbSceneParam._m0[62u].x))) / _2113;
            float _2258 = isnan(cbSceneParam._m0[41u].w) ? _2254 : (isnan(_2254) ? cbSceneParam._m0[41u].w : max(_2254, cbSceneParam._m0[41u].w));
            float _2301 = (cbSceneParam._m0[33u].x - sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912))) * cbSceneParam._m0[33u].y;
            float _4424 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
            float _2308 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2114, cbSceneParam._m0[33u].w + _2115), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2114, _2115 - cbSceneParam._m0[33u].z), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].z, _2115 - cbSceneParam._m0[33u].w), _2258), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2114 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2115), _2258), 0.0)).x), vec4(0.25)));
            float _2312 = 1.0 - (_2308 * cbSceneParam._m0[34u].x);
            float _2313 = 1.0 - (_2308 * cbSceneParam._m0[34u].y);
            float _2314 = 1.0 - (_2308 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2314) ? _2061 : (isnan(_2061) ? _2314 : min(_2061, _2314));
            frontier_phi_34_33_ladder_1 = isnan(_2313) ? _2060 : (isnan(_2060) ? _2313 : min(_2060, _2313));
            frontier_phi_34_33_ladder_2 = isnan(_2312) ? _2059 : (isnan(_2059) ? _2312 : min(_2059, _2312));
        }
        else
        {
            frontier_phi_34_33_ladder = _2061;
            frontier_phi_34_33_ladder_1 = _2060;
            frontier_phi_34_33_ladder_2 = _2059;
        }
        _2125 = frontier_phi_34_33_ladder_2;
        _2127 = frontier_phi_34_33_ladder_1;
        _2129 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2125 = _2059;
        _2127 = _2060;
        _2129 = _2061;
    }
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_795 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _835 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2173 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2177 = _2136 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_669, _670, _671));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_669, _670, _671));
    float _4460 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4471 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2153].x * _2159) * _2198) + (((cbLight._m0[_2163].x * _2125) * _2173) * _2196);
    float _2206 = ((_2159 * cbLight._m0[_2153].y) * _2198) + (((cbLight._m0[_2163].y * _2127) * _2173) * _2196);
    float _2207 = ((_2159 * cbLight._m0[_2153].z) * _2198) + (((cbLight._m0[_2163].z * _2129) * _2173) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2213)
    {
        _2315 = _2205;
        _2317 = _2206;
        _2319 = _2207;
    }
    else
    {
        uint _2323 = _2136 + 6u;
        float _2339 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2340 = _2339 * _2339;
        float _4482 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2341 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2342 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2315 = (((cbLight._m0[_2323].x * 0.3183098733425140380859375) * _2341) * _2342) + _2205;
        _2317 = (((cbLight._m0[_2323].y * 0.3183098733425140380859375) * _2341) * _2342) + _2206;
        _2319 = (((cbLight._m0[_2323].z * 0.3183098733425140380859375) * _2341) * _2342) + _2207;
    }
    bool _2322 = _2211.y == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2322)
    {
        _2377 = _2315;
        _2379 = _2317;
        _2381 = _2319;
    }
    else
    {
        uint _2550 = _2136 + 7u;
        float _2566 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2567 = _2566 * _2566;
        float _4498 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2568 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2569 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2377 = (((cbLight._m0[_2550].x * 0.3183098733425140380859375) * _2568) * _2569) + _2315;
        _2379 = (((cbLight._m0[_2550].y * 0.3183098733425140380859375) * _2568) * _2569) + _2317;
        _2381 = (((cbLight._m0[_2550].z * 0.3183098733425140380859375) * _2568) * _2569) + _2319;
    }
    uint _2384 = _2136 + 8u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _672) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2136].x + _749;
    float _2400 = cbLight._m0[_2136].y + _750;
    float _2401 = cbLight._m0[_2136].z + _751;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2136].xyz));
    float _4514 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _4525 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2413 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2414 = dot(vec3(_669, _670, _671), vec3(_2406, _2407, _2408));
    float _4536 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2406, _2407, _2408));
    float _4547 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2398 * _2398;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2435 = 0.959999978542327880859375 - _817;
    float _2437 = 0.959999978542327880859375 - _818;
    float _2438 = 0.959999978542327880859375 - _819;
    float _2445 = 1.0 - _2398;
    float _2456 = (0.5 / (((_2413 * ((_2412 * _2445) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2445) + _2398) * _2412))) * _2412;
    float _4558 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    uint _2472 = _2136 + 9u;
    float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _672) * 0.949999988079071044921875);
    float _2484 = _2483 * _2483;
    float _2485 = cbLight._m0[_2177].x + _749;
    float _2486 = cbLight._m0[_2177].y + _750;
    float _2487 = cbLight._m0[_2177].z + _751;
    float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
    float _2492 = _2491 * _2485;
    float _2493 = _2491 * _2486;
    float _2494 = _2491 * _2487;
    float _2495 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2177].xyz));
    float _4569 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2499 = dot(vec3(_669, _670, _671), vec3(_2492, _2493, _2494));
    float _4580 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2492, _2493, _2494));
    float _4591 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2484 * _2484;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2525 = 1.0 - _2484;
    float _2535 = (0.5 / (((_2413 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2525) + _2484) * _2498))) * _2498;
    float _4602 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2537 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    float _2547 = (((((_2518 * _2435) + _820) * cbLight._m0[_2472].x) * _2537) * _2159) + ((((cbLight._m0[_2384].x * _2125) * ((_2434 * _2435) + _820)) * _2458) * _2173);
    float _2548 = (((((_2518 * _2437) + _822) * cbLight._m0[_2472].y) * _2537) * _2159) + ((((cbLight._m0[_2384].y * _2127) * ((_2434 * _2437) + _822)) * _2458) * _2173);
    float _2549 = (((((_2518 * _2438) + _823) * cbLight._m0[_2472].z) * _2537) * _2159) + ((((cbLight._m0[_2384].z * _2129) * ((_2434 * _2438) + _823)) * _2458) * _2173);
    float _2605;
    float _2607;
    float _2609;
    if (_2213)
    {
        _2605 = _2547;
        _2607 = _2548;
        _2609 = _2549;
    }
    else
    {
        uint _2611 = _2136 + 2u;
        uint _2615 = _2136 + 10u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _672) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _749;
        float _2632 = cbLight._m0[_2611].y + _750;
        float _2633 = cbLight._m0[_2611].z + _751;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2611].xyz));
        float _4613 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2645 = dot(vec3(_669, _670, _671), vec3(_2638, _2639, _2640));
        float _4624 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4635 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2413 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2671) + _2630) * _2644))) * _2644;
        float _4646 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2605 = (((((_2664 * _2435) + _820) * cbLight._m0[_2615].x) * _2683) * _2684) + _2547;
        _2607 = (((((_2664 * _2437) + _822) * cbLight._m0[_2615].y) * _2683) * _2684) + _2548;
        _2609 = (((((_2664 * _2438) + _823) * cbLight._m0[_2615].z) * _2683) * _2684) + _2549;
    }
    float _2715;
    float _2717;
    float _2719;
    if (_2322)
    {
        _2715 = _2605;
        _2717 = _2607;
        _2719 = _2609;
    }
    else
    {
        uint _2726 = _2136 + 3u;
        uint _2730 = _2136 + 11u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _672) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _749;
        float _2747 = cbLight._m0[_2726].y + _750;
        float _2748 = cbLight._m0[_2726].z + _751;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2726].xyz));
        float _4662 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2760 = dot(vec3(_669, _670, _671), vec3(_2753, _2754, _2755));
        float _4673 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4684 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
        float _2786 = 1.0 - _2745;
        float _2796 = (0.5 / (((_2413 * ((_2759 * _2786) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2413 * _2786) + _2745) * _2759))) * _2759;
        float _4695 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2798 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2799 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2715 = (((((_2779 * _2435) + _820) * cbLight._m0[_2730].x) * _2798) * _2799) + _2605;
        _2717 = (((((_2779 * _2437) + _822) * cbLight._m0[_2730].y) * _2798) * _2799) + _2607;
        _2719 = (((((_2779 * _2438) + _823) * cbLight._m0[_2730].z) * _2798) * _2799) + _2609;
    }
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_2134.y == 0u)
    {
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.x;
        uint _2832 = uint((float(_2820.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2821))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2821)));
        float _2842 = (log2(_1912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2843 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        uint _2846 = uint(isnan(14.0) ? _2843 : (isnan(_2843) ? 14.0 : min(_2843, 14.0)));
        uvec4 _2851 = texelFetch(g_lightClusterGridBuffer, int(((_2846 << 2u) + (_2832 << 6u)) >> 2u));
        uint _2852 = _2851.x;
        uint _2853 = _2820.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2853 >> 4u) & 15u)) + 4294967295u) & _2852) == 0u) || ((_2853 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            uint _3136 = 0u;
            uint _3145;
            bool _3146;
            for (;;)
            {
                _3145 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                _3146 = _3145 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3146)
                {
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    uint _3260;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3135;
                    _3260 = _3145;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3264 = uint(findLSB(_3260)) + (_3136 << 5u);
                        uint _3261 = (_3260 + 4294967295u) & _3260;
                        uint _3266 = _3264 * 48u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 3u)).x));
                        uint _3286 = (_3264 * 48u) + 4u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3305 = (_3264 * 48u) + 8u;
                        vec3 _3316 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x));
                        float _3320 = _3280.x - _1910;
                        float _3321 = _3280.y - _1911;
                        float _3322 = _3280.z - _1912;
                        float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                        float _3326 = inversesqrt(_3323);
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3330 = dot(vec3(_776, _779, _782), vec3(_3327, _3328, _3329));
                        float _3335 = 1.0 - (_3323 * _3280.w);
                        float _4721 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3337 = sqrt(_3323) * _3299.w;
                        float _3340 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3330) + _3341;
                        float _3347 = _3337 * _3337;
                        float _3351 = ((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3336) / ((_3347 * 0.699999988079071044921875) + 1.0);
                        float _3355 = (-0.0) - _1910;
                        float _3356 = (-0.0) - _1911;
                        float _3357 = (-0.0) - _1912;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3371 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                        float _3372 = 1.0 - _851;
                        float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                        float _3380 = _3379 * _3379;
                        float _3381 = _3380 * _3380;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3384 = _3364 + _3329;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3392 = dot(vec3(_776, _779, _782), vec3(_3362, _3363, _3364));
                        float _4737 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3396 = dot(vec3(_776, _779, _782), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                        float _4748 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                        float _3404 = _3340 * _3380;
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3330) + _3405;
                        float _4759 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3410 = 1.0 - _3380;
                        float _3420 = (0.5 / (((_3409 * ((_3395 * _3410) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3380) * _3395))) * _3409;
                        float _4770 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3431 = (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3403 * _3403) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125))) * _3336;
                        _3189 = (_3351 * _3299.x) + _3257;
                        _3190 = (_3351 * _3299.y) + _3258;
                        _3191 = (_3351 * _3299.z) + _3259;
                        _3186 = (_3431 * _3316.x) + _3254;
                        _3187 = (_3431 * _3316.y) + _3255;
                        _3188 = (_3431 * _3316.z) + _3256;
                        if (_3261 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3191;
                            _3260 = _3261;
                        }
                    }
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3190;
                    frontier_phi_66_pred_2 = _3189;
                    frontier_phi_66_pred_3 = _3188;
                    frontier_phi_66_pred_4 = _3187;
                    frontier_phi_66_pred_5 = _3186;
                }
                _2988 = frontier_phi_66_pred;
                _2986 = frontier_phi_66_pred_1;
                _2984 = frontier_phi_66_pred_2;
                _2982 = frontier_phi_66_pred_3;
                _2980 = frontier_phi_66_pred_4;
                _2978 = frontier_phi_66_pred_5;
                uint _3137 = _3136 + 1u;
                if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3130 = _2978;
                    _3131 = _2980;
                    _3132 = _2982;
                    _3133 = _2984;
                    _3134 = _2986;
                    _3135 = _2988;
                    _3136 = _3137;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((4294967295u << _2994) & _2852) == 0u)
        {
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
        }
        else
        {
            float _3123 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
            float _3124 = _3123 * _1910;
            float _3125 = _3123 * _1911;
            float _3126 = _3123 * _1912;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3237 = _2977;
                float _3238 = _2979;
                float _3239 = _2981;
                float _3240 = _2983;
                float _3241 = _2985;
                float _3242 = _2987;
                uint _3243 = _2994;
                uint _3252;
                bool _3253;
                for (;;)
                {
                    _3252 = texelFetch(g_lightClassification, int((((_2846 << 5u) + (_2832 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                    _3253 = _3252 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3253)
                    {
                        frontier_phi_72_pred = _3242;
                        frontier_phi_72_pred_1 = _3241;
                        frontier_phi_72_pred_2 = _3240;
                        frontier_phi_72_pred_3 = _3239;
                        frontier_phi_72_pred_4 = _3238;
                        frontier_phi_72_pred_5 = _3237;
                    }
                    else
                    {
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        float _3451 = _3239;
                        float _3452 = _3240;
                        float _3453 = _3241;
                        float _3454 = _3242;
                        uint _3455 = _3252;
                        uint _3456;
                        vec4 _3481;
                        float _3482;
                        vec4 _3497;
                        vec3 _3509;
                        vec4 _3524;
                        vec4 _3540;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3466 = ((_3243 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3455));
                            _3456 = (_3455 + 4294967295u) & _3455;
                            uint _3468 = _3466 * 40u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3482 = _3481.w;
                            uint _3484 = (_3466 * 40u) + 4u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3466 * 40u) + 8u;
                            _3509 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x));
                            uint _3511 = (_3466 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3527 = (_3466 * 40u) + 20u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3543 = (_3466 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3466 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_1912, _3575.z, fma(_1911, _3575.y, _3575.x * _1910)) + _3575.w;
                            _3588 = !((fma(_1912, _3556.z, fma(_1911, _3556.y, _3556.x * _1910)) + _3556.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3481.x - _1910;
                                float _3616 = _3481.y - _1911;
                                float _3617 = _3481.z - _1912;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3482 * _3482));
                                float _4781 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3633 = sqrt(_3618) * _3497.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_776, _779, _782))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_1912, _3524.z, fma(_1911, _3524.y, _3524.x * _1910)) + _3524.w) / _3587;
                                float _3647 = (fma(_1912, _3540.z, fma(_1911, _3540.y, _3540.x * _1910)) + _3540.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4797 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3666 = 1.0 - _851;
                                float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                                float _3674 = _3673 * _3673;
                                float _3675 = _3674 * _3674;
                                float _3676 = _3622 - _3124;
                                float _3677 = _3623 - _3125;
                                float _3678 = _3624 - _3126;
                                float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                                float _3686 = dot(vec3(_776, _779, _782), vec3((-0.0) - _3124, (-0.0) - _3125, (-0.0) - _3126));
                                float _4808 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3690 = dot(vec3(_776, _779, _782), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                                float _4819 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                                float _3698 = _3635 * _3674;
                                float _3699 = _3698 * _3698;
                                float _3705 = ((1.0 - _3699) * dot(vec3(_776, _779, _782), vec3(_3622, _3623, _3624))) + _3699;
                                float _4830 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3707 = 1.0 - _3674;
                                float _3717 = (0.5 / (((_3706 * ((_3689 * _3707) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3674) * _3689))) * _3706;
                                float _4841 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3727 = (_3652 * _3629) * (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3697 * _3697) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3653 * _3497.y;
                                frontier_phi_78_pred_1 = _3653 * _3497.x;
                                frontier_phi_78_pred_2 = _3727 * _3509.z;
                                frontier_phi_78_pred_3 = _3727 * _3509.y;
                                frontier_phi_78_pred_4 = _3727 * _3509.x;
                                frontier_phi_78_pred_5 = _3653 * _3497.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3735 = frontier_phi_78_pred;
                            _3734 = frontier_phi_78_pred_1;
                            _3733 = frontier_phi_78_pred_2;
                            _3732 = frontier_phi_78_pred_3;
                            _3731 = frontier_phi_78_pred_4;
                            _3736 = frontier_phi_78_pred_5;
                            _3439 = _3734 + _3452;
                            _3440 = _3735 + _3453;
                            _3441 = _3736 + _3454;
                            _3436 = _3731 + _3449;
                            _3437 = _3732 + _3450;
                            _3438 = _3733 + _3451;
                            if (_3456 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3456;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3441;
                        frontier_phi_72_pred_1 = _3440;
                        frontier_phi_72_pred_2 = _3439;
                        frontier_phi_72_pred_3 = _3438;
                        frontier_phi_72_pred_4 = _3437;
                        frontier_phi_72_pred_5 = _3436;
                    }
                    _3109 = frontier_phi_72_pred;
                    _3107 = frontier_phi_72_pred_1;
                    _3105 = frontier_phi_72_pred_2;
                    _3103 = frontier_phi_72_pred_3;
                    _3101 = frontier_phi_72_pred_4;
                    _3099 = frontier_phi_72_pred_5;
                    uint _3244 = _3243 + 1u;
                    if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3237 = _3099;
                        _3238 = _3101;
                        _3239 = _3103;
                        _3240 = _3105;
                        _3241 = _3107;
                        _3242 = _3109;
                        _3243 = _3244;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3109;
                frontier_phi_60_61_ladder_1 = _3107;
                frontier_phi_60_61_ladder_2 = _3103;
                frontier_phi_60_61_ladder_3 = _3101;
                frontier_phi_60_61_ladder_4 = _3099;
                frontier_phi_60_61_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_60_61_ladder = _2987;
                frontier_phi_60_61_ladder_1 = _2985;
                frontier_phi_60_61_ladder_2 = _2981;
                frontier_phi_60_61_ladder_3 = _2979;
                frontier_phi_60_61_ladder_4 = _2977;
                frontier_phi_60_61_ladder_5 = _2983;
            }
            _3098 = frontier_phi_60_61_ladder_4;
            _3100 = frontier_phi_60_61_ladder_3;
            _3102 = frontier_phi_60_61_ladder_2;
            _3104 = frontier_phi_60_61_ladder_5;
            _3106 = frontier_phi_60_61_ladder_1;
            _3108 = frontier_phi_60_61_ladder;
        }
        float _3113 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2865 = (_3113 * _3104) + _2377;
        _2867 = (_3113 * _3106) + _2379;
        _2869 = (_3113 * _3108) + _2381;
        _2871 = ((_3098 * _820) * _3113) + _2715;
        _2873 = ((_3100 * _822) * _3113) + _2717;
        _2875 = ((_3102 * _823) * _3113) + _2719;
    }
    else
    {
        _2865 = _2377;
        _2867 = _2379;
        _2869 = _2381;
        _2871 = _2715;
        _2873 = _2717;
        _2875 = _2719;
    }
    uint _2881 = _796 + uint(cbMatDynParam._m0[0u].w);
    float _2887 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].z;
    float _2893 = (((((_2887 * cbMtdParam._m0[11u].x) * (((_527.x - _524) * _505) + _524)) * _556) * (((1.0 - _609) * cbMtdParam._m0[16u].y) + _609)) * _646) * cbInstanceData._m0[_2881].x;
    float _2899 = (((((_2887 * cbMtdParam._m0[11u].y) * (((_527.y - _525) * _505) + _525)) * _556) * (((1.0 - _611) * cbMtdParam._m0[16u].y) + _611)) * _646) * cbInstanceData._m0[_2881].y;
    float _2905 = (((((_2887 * cbMtdParam._m0[11u].z) * (((_527.z - _526) * _505) + _526)) * _556) * (((1.0 - _613) * cbMtdParam._m0[16u].y) + _613)) * _646) * cbInstanceData._m0[_2881].z;
    float _4857 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4868 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4879 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2922 = (((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2865 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _835))) + ((_2871 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + _2893;
    float _2924 = (_2899 + ((_2873 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2867 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _835)));
    float _2926 = (_2905 + ((_2875 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1643)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2869 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _835)));
    float _4905 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2939 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    uint _2940 = _795 + 6u;
    float _2948 = _757 / cbSceneParam._m0[86u].x;
    float _2949 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _3003 = _3002 / _692;
        float _3014 = _3003 * _742;
        float _3015 = _743 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3017 = _3003 * _744;
        float _3019 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3015;
        float _3027 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_3016 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3159 = 1.0 / cbSceneParam._m0[80u].x;
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3161 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            _3199 = ((abs(_3027 / _3016) * cbSceneParam._m0[80u].y) * ((((_3170 - _3171) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))))) * _3159)) - ((exp2(_3037 * _3170) - exp2(_3037 * _3171)) * _3159))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2968);
        _3039 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3041 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3043 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3045 = _3210 * _2968;
    }
    else
    {
        _3039 = _2965;
        _3041 = _2966;
        _3043 = _2967;
        _3045 = _2968;
    }
    float _3057 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3058 = _3057 == 3.0;
    float _3059 = log2(_3045);
    float _3063 = exp2(_3059 * cbSceneParam._m0[78u].x);
    float _3064 = exp2(_3059 * cbSceneParam._m0[78u].y);
    float _3065 = exp2(_3059 * cbSceneParam._m0[78u].z);
    float _3066 = _3063 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)));
    float _3067 = _3064 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)));
    float _3068 = _3065 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)));
    float _3077 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3077 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.y = _3077 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
    SV_Target.z = _3077 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
    SV_Target.w = cbInstanceData._m0[_2940].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2893) * _2939) * _3063) * _3077;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2899) * _2939) * _3064) * _3077;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2905) * _2939) * _3065) * _3077;
    SV_Target_1.w = cbInstanceData._m0[_2940].w;
}


