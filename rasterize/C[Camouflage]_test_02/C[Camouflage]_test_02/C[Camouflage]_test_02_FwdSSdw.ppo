#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1006;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _248 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.w;
    float _255 = _248.x * cbMtdParam._m0[9u].x;
    float _256 = _248.y * cbMtdParam._m0[9u].y;
    float _257 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _276 = _273.x + cbMtdParam._m0[11u].z;
    vec4 _289 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _297 = (_289.x * 2.0) + (-1.0);
    float _299 = (_289.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3420 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))));
    float _309 = fma(_306, _226, fma(_299, _218 * TANGENT.x, (_204 * _196) * _297));
    float _312 = fma(_306, _227, fma(_299, _218 * TANGENT.y, (_204 * _197) * _297));
    float _315 = fma(_306, _228, fma(_299, _218 * TANGENT.z, (_204 * _198) * _297));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _323 = _289.z + cbMtdParam._m0[11u].w;
    vec4 _341 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _357 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _358 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _366 = (_357 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _320);
    float _367 = (_358 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _321);
    float _375 = isnan(cbInstanceData._m0[8u].x) ? _366 : (isnan(_366) ? cbInstanceData._m0[8u].x : max(_366, cbInstanceData._m0[8u].x));
    float _376 = isnan(cbInstanceData._m0[8u].y) ? _367 : (isnan(_367) ? cbInstanceData._m0[8u].y : max(_367, cbInstanceData._m0[8u].y));
    vec4 _380 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _375 : (isnan(_375) ? cbInstanceData._m0[8u].z : min(_375, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _376 : (isnan(_376) ? cbInstanceData._m0[8u].w : min(_376, cbInstanceData._m0[8u].w))));
    vec4 _405 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _408 = _405.x + cbMtdParam._m0[11u].x;
    float _409 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _414 = inversesqrt(dot(vec3(_320, _321, _322), vec3(_320, _321, _322)));
    float _415 = _414 * _320;
    float _416 = _414 * _321;
    float _417 = _414 * _322;
    float _3461 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _418 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _419 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3494 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3505 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3516 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _423 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _439 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _489 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _479);
    float _490 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _479);
    float _491 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _479);
    float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
    float _496 = _489 * _495;
    float _497 = _490 * _495;
    float _498 = _491 * _495;
    vec4 _500 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _502 = _500.w;
    float _523 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _526 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _529 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    vec4 _531 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _542 = (((_531.y - _419) + (_531.w * _419)) * cbMtdParam._m0[3u].x) + _419;
    uint _555 = uint(roundEven(NORMAL.w)) * 13u;
    uint _557 = _555 + 9u;
    uint _558 = _557 + uint(cbMatDynParam._m0[0u].w);
    float _564 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_558].x;
    float _565 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_558].y;
    float _566 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_558].z;
    float _3527 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    vec4 _570 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _575 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _586 = (((_575.x - _423) + (_575.w * _423)) * cbMtdParam._m0[3u].x) + _423;
    float _599 = (cbMtdParam._m0[3u].x * (((_567 * _502) - _567) + _570.x)) + _567;
    float _600 = (cbMtdParam._m0[3u].x * (((_568 * _502) - _568) + _570.y)) + _568;
    float _601 = (cbMtdParam._m0[3u].x * (((_569 * _502) - _569) + _570.z)) + _569;
    float _602 = 1.0 - _586;
    float _603 = _602 * _599;
    float _604 = _602 * _600;
    float _605 = _602 * _601;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _586;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _586;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _586;
    float _613 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _357, cbSceneParam._m0[86u].y * _358));
    float _627 = _624.x * TEXCOORD_4;
    float _628 = dot(vec3(_415, _416, _417), vec3(_496, _497, _498));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _415) - _496;
    float _636 = (_631 * _416) - _497;
    float _637 = (_631 * _417) - _498;
    float _641 = abs(dot(vec3(_496, _497, _498), vec3(_415, _416, _417)));
    float _3560 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _648 = sqrt(_542);
    float _660 = exp2((_648 * 5.0) * log2(1.0 - (_642 * 0.999000012874603271484375))) / (4.0 - (_648 * 3.0));
    float _666 = (1.0 - _660) * ((_648 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _667 = _660 * _648;
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1005;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _730 = fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695));
        float _734 = fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695));
        float _738 = fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695));
        float _763 = _695 + _415;
        float _764 = _699 + _416;
        float _765 = _703 + _417;
        float _775 = fma(_765, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763)) - _730;
        float _776 = fma(_765, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763)) - _734;
        float _777 = fma(_765, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763)) - _738;
        float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
        float _794 = ((_781 * _775) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_730 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_781 * _776) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_734 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_781 * _777) / cbModelParam._m0[34u].z) + ((((((_738 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        float _833 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_799.x + (-0.5));
        float _835 = _833 * (_799.y + (-0.5));
        float _836 = _833 * (_799.z + (-0.5));
        float _843 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_806.x + (-0.5));
        float _845 = _843 * (_806.y + (-0.5));
        float _846 = _843 * (_806.z + (-0.5));
        float _853 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_813.x + (-0.5));
        float _855 = _853 * (_813.y + (-0.5));
        float _856 = _853 * (_813.z + (-0.5));
        float _863 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_820.x + (-0.5));
        float _865 = _863 * (_820.y + (-0.5));
        float _866 = _863 * (_820.z + (-0.5));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = _834 * 0.5;
        float _871 = _844 * 0.5;
        float _872 = _854 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _887 = (dot(vec3(_415, _416, _417), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _897 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3608 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_899 + 1.0))) + _904) * _867;
        float _914 = _835 * 0.5;
        float _915 = _845 * 0.5;
        float _916 = _855 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_415, _416, _417), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3641 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_941 + 1.0))) + _946) * _868;
        float _956 = _836 * 0.5;
        float _957 = _846 * 0.5;
        float _958 = _856 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_415, _416, _417), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3674 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_983 + 1.0))) + _988) * _869;
        _1005 = _836;
        _1007 = _835;
        _1008 = _834;
        _1009 = _846;
        _1010 = _845;
        _1011 = _844;
        _1012 = _856;
        _1013 = _855;
        _1014 = _854;
        _1015 = _869;
        _1016 = _868;
        _1017 = _867;
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
    }
    else
    {
        _1005 = _1006;
        _1007 = _1006;
        _1008 = _1006;
        _1009 = _1006;
        _1010 = _1006;
        _1011 = _1006;
        _1012 = _1006;
        _1013 = _1006;
        _1014 = _1006;
        _1015 = _1006;
        _1016 = _1006;
        _1017 = _1006;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1046 = fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695));
        float _1050 = fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695));
        float _1054 = fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695));
        float _1077 = _695 + _415;
        float _1078 = _699 + _416;
        float _1079 = _703 + _417;
        float _1089 = fma(_1079, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077)) - _1046;
        float _1090 = fma(_1079, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077)) - _1050;
        float _1091 = fma(_1079, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077)) - _1054;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1046 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1050 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[35u].z) + ((((((_1054 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1112.x + (-0.5));
        float _1147 = _1145 * (_1112.y + (-0.5));
        float _1148 = _1145 * (_1112.z + (-0.5));
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1119.x + (-0.5));
        float _1157 = _1155 * (_1119.y + (-0.5));
        float _1158 = _1155 * (_1119.z + (-0.5));
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1126.x + (-0.5));
        float _1167 = _1165 * (_1126.y + (-0.5));
        float _1168 = _1165 * (_1126.z + (-0.5));
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_415, _416, _417), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3737 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1209 + 1.0))) + _1214) * _1179;
        float _1224 = _1147 * 0.5;
        float _1225 = _1157 * 0.5;
        float _1226 = _1167 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_415, _416, _417), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3770 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1251 + 1.0))) + _1256) * _1180;
        float _1266 = _1148 * 0.5;
        float _1267 = _1158 * 0.5;
        float _1268 = _1168 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_415, _416, _417), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3803 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1293 + 1.0))) + _1298) * _1181;
        _1315 = _1148;
        _1316 = _1147;
        _1317 = _1146;
        _1318 = _1158;
        _1319 = _1157;
        _1320 = _1156;
        _1321 = _1168;
        _1322 = _1167;
        _1323 = _1166;
        _1324 = _1181;
        _1325 = _1180;
        _1326 = _1179;
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1006;
        _1316 = _1006;
        _1317 = _1006;
        _1318 = _1006;
        _1319 = _1006;
        _1320 = _1006;
        _1321 = _1006;
        _1322 = _1006;
        _1323 = _1006;
        _1324 = _1006;
        _1325 = _1006;
        _1326 = _1006;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1339));
    float _1383 = _635 * 0.5;
    float _1384 = _636 * 0.5;
    float _1385 = _637 * 0.5;
    float _1386 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1389 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1392 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1426;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1399 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1005, _1009, _1012, _1015));
        float _1403 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1407 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1414 = dot(vec4(cbModelParam._m0[39u]), vec4(_1383, _1384, _1385, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1437;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1428 = dot(vec4(cbModelParam._m0[40u]), vec4(_1383, _1384, _1385, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1441 = (_1437 * cbModelParam._m0[1u].x) + (_1426 * (1.0 - cbModelParam._m0[1u].x));
    float _1451 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1451 : min(cbModelParam._m0[25u].z, _1451));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1515 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1518 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1546 = frontier_phi_16_14_ladder;
        }
        float _1773;
        if (_1515 > 0.0)
        {
            _1773 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1773 = frontier_phi_25_21_ladder;
        }
        float _2030;
        if (_1518 > 0.0)
        {
            _2030 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2030 = frontier_phi_37_32_ladder;
        }
        float _2032 = isnan(_1773) ? _1546 : (isnan(_1546) ? _1773 : min(_1546, _1773));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1512) + _1501;
        float _2038 = (_2033 * _1515) + _1505;
        float _2039 = (_2033 * _1518) + _1509;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1452);
            frontier_phi_15_37_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_15_37_ladder_2;
        _1536 = frontier_phi_15_37_ladder_1;
        _1538 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1452);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1614 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1617 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1778;
        if (_1611 > 0.0)
        {
            _1778 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1778 = frontier_phi_27_23_ladder;
        }
        float _2057;
        if (_1614 > 0.0)
        {
            _2057 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2057 = frontier_phi_39_34_ladder;
        }
        float _2270;
        if (_1617 > 0.0)
        {
            _2270 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2270 = frontier_phi_48_45_ladder;
        }
        float _2272 = isnan(_2057) ? _1778 : (isnan(_1778) ? _2057 : min(_1778, _2057));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1611) + _1600;
        float _2278 = (_2273 * _1614) + _1604;
        float _2279 = (_2273 * _1617) + _1608;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_24_48_ladder = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_24_48_ladder_2;
        _1638 = frontier_phi_24_48_ladder_1;
        _1640 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1543);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1653 = (((_666 * _613) + _667) * _627) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1655 = (((_666 * _615) + _667) * _627) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1657 = (((_666 * _616) + _667) * _627) * ((cbModelParam._m0[1u].w * (_1640 - _1538)) + _1538);
    float _1660 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1653 * cbSceneParam._m0[91u].x));
    vec4 _1674 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_357, _358));
    float _1676 = _1674.w;
    float _1688 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1676);
    float _1689 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1676);
    float _1690 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1676);
    uvec4 _1694 = floatBitsToUint(cbInstanceData._m0[_555 + 5u]);
    uint _1696 = _1694.x * 14u;
    uint _1697 = _1696 + 13u;
    float _1704 = _627 + (-1.0);
    float _1709 = (cbLight._m0[_1697].x * _1704) + 1.0;
    float _1710 = (cbLight._m0[_1697].y * _1704) + 1.0;
    float _1711 = (cbLight._m0[_1697].z * _1704) + 1.0;
    float _1712 = (cbLight._m0[_1697].w * _1704) + 1.0;
    uint _1713 = _1696 + 5u;
    float _1719 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1723 = _1696 + 4u;
    float _1732 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1736 = _1696 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_415, _416, _417));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_415, _416, _417));
    float _3939 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3950 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1713].x * _1719) * _1757) + (((cbLight._m0[_1723].x * _1688) * _1732) * _1755);
    float _1765 = ((_1719 * cbLight._m0[_1713].y) * _1757) + (((cbLight._m0[_1723].y * _1689) * _1732) * _1755);
    float _1766 = ((_1719 * cbLight._m0[_1713].z) * _1757) + (((cbLight._m0[_1723].z * _1690) * _1732) * _1755);
    uvec4 _1770 = floatBitsToUint(cbLight._m0[_1696 + 12u]);
    bool _1772 = _1770.x == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1772)
    {
        _1783 = _1764;
        _1785 = _1765;
        _1787 = _1766;
    }
    else
    {
        uint _1791 = _1696 + 6u;
        float _1807 = (dot(vec3(cbLight._m0[_1696 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1808 = _1807 * _1807;
        float _3961 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1810 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _1783 = (((cbLight._m0[_1791].x * 0.3183098733425140380859375) * _1809) * _1810) + _1764;
        _1785 = (((cbLight._m0[_1791].y * 0.3183098733425140380859375) * _1809) * _1810) + _1765;
        _1787 = (((cbLight._m0[_1791].z * 0.3183098733425140380859375) * _1809) * _1810) + _1766;
    }
    bool _1790 = _1770.y == 0u;
    float _1828;
    float _1830;
    float _1832;
    if (_1790)
    {
        _1828 = _1783;
        _1830 = _1785;
        _1832 = _1787;
    }
    else
    {
        uint _2001 = _1696 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1696 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _3977 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2020 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1828 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1783;
        _1830 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1785;
        _1832 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1787;
    }
    uint _1835 = _1696 + 8u;
    float _1848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1696].w)) * _542) * 0.949999988079071044921875);
    float _1849 = _1848 * _1848;
    float _1850 = cbLight._m0[_1696].x + _496;
    float _1851 = cbLight._m0[_1696].y + _497;
    float _1852 = cbLight._m0[_1696].z + _498;
    float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
    float _1857 = _1856 * _1850;
    float _1858 = _1856 * _1851;
    float _1859 = _1856 * _1852;
    float _1860 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1696].xyz));
    float _3993 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1864 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1865 = dot(vec3(_415, _416, _417), vec3(_1857, _1858, _1859));
    float _4015 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1869 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1857, _1858, _1859));
    float _4026 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1873 = _1849 * _1849;
    float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
    float _1885 = exp2(log2(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * 5.0);
    float _1886 = 0.959999978542327880859375 - _610;
    float _1888 = 0.959999978542327880859375 - _611;
    float _1889 = 0.959999978542327880859375 - _612;
    float _1896 = 1.0 - _1849;
    float _1907 = (0.5 / (((_1864 * ((_1863 * _1896) + _1849)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1896) + _1849) * _1863))) * _1863;
    float _4037 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
    uint _1923 = _1696 + 9u;
    float _1934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _542) * 0.949999988079071044921875);
    float _1935 = _1934 * _1934;
    float _1936 = cbLight._m0[_1736].x + _496;
    float _1937 = cbLight._m0[_1736].y + _497;
    float _1938 = cbLight._m0[_1736].z + _498;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1943 = _1942 * _1936;
    float _1944 = _1942 * _1937;
    float _1945 = _1942 * _1938;
    float _1946 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1736].xyz));
    float _4048 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1950 = dot(vec3(_415, _416, _417), vec3(_1943, _1944, _1945));
    float _4059 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1943, _1944, _1945));
    float _4070 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1935 * _1935;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1969 = exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0);
    float _1976 = 1.0 - _1935;
    float _1986 = (0.5 / (((_1864 * ((_1949 * _1976) + _1935)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _1976) + _1935) * _1949))) * _1949;
    float _4081 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    float _1998 = (((((_1969 * _1886) + _613) * cbLight._m0[_1923].x) * _1988) * _1719) + ((((cbLight._m0[_1835].x * _1688) * ((_1885 * _1886) + _613)) * _1909) * _1732);
    float _1999 = (((((_1969 * _1888) + _615) * cbLight._m0[_1923].y) * _1988) * _1719) + ((((cbLight._m0[_1835].y * _1689) * ((_1885 * _1888) + _615)) * _1909) * _1732);
    float _2000 = (((((_1969 * _1889) + _616) * cbLight._m0[_1923].z) * _1988) * _1719) + ((((cbLight._m0[_1835].z * _1690) * ((_1885 * _1889) + _616)) * _1909) * _1732);
    float _2062;
    float _2064;
    float _2066;
    if (_1772)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1696 + 2u;
        uint _2072 = _1696 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _542) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _496;
        float _2089 = cbLight._m0[_2068].y + _497;
        float _2090 = cbLight._m0[_2068].z + _498;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2068].xyz));
        float _4092 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2102 = dot(vec3(_415, _416, _417), vec3(_2095, _2096, _2097));
        float _4103 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4114 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0);
        float _2128 = 1.0 - _2087;
        float _2138 = (0.5 / (((_1864 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2128) + _2087) * _2101))) * _2101;
        float _4125 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
        _2062 = (((((_2121 * _1886) + _613) * cbLight._m0[_2072].x) * _2140) * _2141) + _1998;
        _2064 = (((((_2121 * _1888) + _615) * cbLight._m0[_2072].y) * _2140) * _2141) + _1999;
        _2066 = (((((_2121 * _1889) + _616) * cbLight._m0[_2072].z) * _2140) * _2141) + _2000;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1790)
    {
        _2176 = _2062;
        _2178 = _2064;
        _2180 = _2066;
    }
    else
    {
        uint _2187 = _1696 + 3u;
        uint _2191 = _1696 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _542) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _496;
        float _2208 = cbLight._m0[_2187].y + _497;
        float _2209 = cbLight._m0[_2187].z + _498;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2187].xyz));
        float _4141 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2221 = dot(vec3(_415, _416, _417), vec3(_2214, _2215, _2216));
        float _4152 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4163 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
        float _2247 = 1.0 - _2206;
        float _2257 = (0.5 / (((_1864 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1864 * _2247) + _2206) * _2220))) * _2220;
        float _4174 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2176 = (((((_2240 * _1886) + _613) * cbLight._m0[_2191].x) * _2259) * _2260) + _2062;
        _2178 = (((((_2240 * _1888) + _615) * cbLight._m0[_2191].y) * _2259) * _2260) + _2064;
        _2180 = (((((_2240 * _1889) + _616) * cbLight._m0[_2191].z) * _2259) * _2260) + _2066;
    }
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_1694.y == 0u)
    {
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2335;
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2335;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2335;
        uvec4 _2350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2351 = _2350.x;
        uint _2362 = uint((float(_2350.y) * floor(float(uint(cbSceneParam._m0[85u].y * _358) / _2351))) + floor(float(uint(cbSceneParam._m0[85u].x * _357) / _2351)));
        float _2372 = (log2(_2338 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2373 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        uint _2376 = uint(isnan(14.0) ? _2373 : (isnan(_2373) ? 14.0 : min(_2373, 14.0)));
        uvec4 _2381 = texelFetch(g_lightClusterGridBuffer, int(((_2376 << 2u) + (_2362 << 6u)) >> 2u));
        uint _2382 = _2381.x;
        uint _2383 = _2350.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2383 >> 4u) & 15u)) + 4294967295u) & _2382) == 0u) || ((_2383 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            uint _2687 = 0u;
            uint _2696;
            bool _2697;
            for (;;)
            {
                _2696 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                _2697 = _2696 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2697)
                {
                    frontier_phi_63_pred = _2686;
                    frontier_phi_63_pred_1 = _2685;
                    frontier_phi_63_pred_2 = _2684;
                    frontier_phi_63_pred_3 = _2683;
                    frontier_phi_63_pred_4 = _2682;
                    frontier_phi_63_pred_5 = _2681;
                }
                else
                {
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    uint _2811;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2696;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    for (;;)
                    {
                        uint _2815 = uint(findLSB(_2811)) + (_2687 << 5u);
                        uint _2812 = (_2811 + 4294967295u) & _2811;
                        uint _2817 = _2815 * 48u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2837 = (_2815 * 48u) + 4u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2856 = (_2815 * 48u) + 8u;
                        vec3 _2867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x));
                        float _2871 = _2831.x - _2336;
                        float _2872 = _2831.y - _2337;
                        float _2873 = _2831.z - _2338;
                        float _2874 = dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873));
                        float _2877 = inversesqrt(_2874);
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2881 = dot(vec3(_523, _526, _529), vec3(_2878, _2879, _2880));
                        float _2886 = 1.0 - (_2874 * _2831.w);
                        float _4200 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2888 = sqrt(_2874) * _2850.w;
                        float _2891 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2881) + _2892;
                        float _2898 = _2888 * _2888;
                        float _2902 = ((isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))) * _2887) / ((_2898 * 0.699999988079071044921875) + 1.0);
                        float _2906 = (-0.0) - _2336;
                        float _2907 = (-0.0) - _2337;
                        float _2908 = (-0.0) - _2338;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2923 = exp2(log2(1.0 / ((_2898 * 3.5) + 5.0)) * 0.25);
                        float _2924 = 1.0 - _648;
                        float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                        float _2932 = _2931 * _2931;
                        float _2933 = _2932 * _2932;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2944 = dot(vec3(_523, _526, _529), vec3(_2913, _2914, _2915));
                        float _4216 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2948 = dot(vec3(_523, _526, _529), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                        float _4227 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                        float _2956 = _2891 * _2932;
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2881) + _2957;
                        float _4238 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2962 = 1.0 - _2932;
                        float _2972 = (0.5 / (((_2961 * ((_2947 * _2962) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2932) * _2947))) * _2961;
                        float _4249 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2983 = (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_2955 * _2955) * ((_2898 * 2.1991131305694580078125) + 3.141590118408203125))) * _2887;
                        _2740 = (_2902 * _2850.x) + _2808;
                        _2741 = (_2902 * _2850.y) + _2809;
                        _2742 = (_2902 * _2850.z) + _2810;
                        _2737 = (_2983 * _2867.x) + _2805;
                        _2738 = (_2983 * _2867.y) + _2806;
                        _2739 = (_2983 * _2867.z) + _2807;
                        if (_2812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2812;
                        }
                    }
                    frontier_phi_63_pred = _2742;
                    frontier_phi_63_pred_1 = _2741;
                    frontier_phi_63_pred_2 = _2740;
                    frontier_phi_63_pred_3 = _2739;
                    frontier_phi_63_pred_4 = _2738;
                    frontier_phi_63_pred_5 = _2737;
                }
                _2540 = frontier_phi_63_pred;
                _2538 = frontier_phi_63_pred_1;
                _2536 = frontier_phi_63_pred_2;
                _2534 = frontier_phi_63_pred_3;
                _2532 = frontier_phi_63_pred_4;
                _2530 = frontier_phi_63_pred_5;
                uint _2688 = _2687 + 1u;
                if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2681 = _2530;
                    _2682 = _2532;
                    _2683 = _2534;
                    _2684 = _2536;
                    _2685 = _2538;
                    _2686 = _2540;
                    _2687 = _2688;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((4294967295u << _2546) & _2382) == 0u)
        {
            _2649 = _2529;
            _2651 = _2531;
            _2653 = _2533;
            _2655 = _2535;
            _2657 = _2537;
            _2659 = _2539;
        }
        else
        {
            float _2674 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
            float _2675 = _2674 * _2336;
            float _2676 = _2674 * _2337;
            float _2677 = _2674 * _2338;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2788 = _2529;
                float _2789 = _2531;
                float _2790 = _2533;
                float _2791 = _2535;
                float _2792 = _2537;
                float _2793 = _2539;
                uint _2794 = _2546;
                uint _2803;
                bool _2804;
                for (;;)
                {
                    _2803 = texelFetch(g_lightClassification, int((((_2376 << 5u) + (_2362 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                    _2804 = _2803 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2804)
                    {
                        frontier_phi_69_pred = _2793;
                        frontier_phi_69_pred_1 = _2792;
                        frontier_phi_69_pred_2 = _2791;
                        frontier_phi_69_pred_3 = _2790;
                        frontier_phi_69_pred_4 = _2789;
                        frontier_phi_69_pred_5 = _2788;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        uint _3007 = _2803;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3077;
                        vec4 _3093;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3018 = ((_2794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3064 = (_3018 * 40u) + 16u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3018 * 40u) + 20u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3018 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3018 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_2338, _3128.z, fma(_2337, _3128.y, _3128.x * _2336)) + _3128.w;
                            _3141 = !((fma(_2338, _3109.z, fma(_2337, _3109.y, _3109.x * _2336)) + _3109.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3033.x - _2336;
                                float _3169 = _3033.y - _2337;
                                float _3170 = _3033.z - _2338;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3034 * _3034));
                                float _4260 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3186 = sqrt(_3171) * _3049.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_523, _526, _529))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_2338, _3077.z, fma(_2337, _3077.y, _3077.x * _2336)) + _3077.w) / _3140;
                                float _3200 = (fma(_2338, _3093.z, fma(_2337, _3093.y, _3093.x * _2336)) + _3093.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4276 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _648;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2675;
                                float _3230 = _3176 - _2676;
                                float _3231 = _3177 - _2677;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_523, _526, _529), vec3((-0.0) - _2675, (-0.0) - _2676, (-0.0) - _2677));
                                float _4287 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3243 = dot(vec3(_523, _526, _529), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4298 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_523, _526, _529), vec3(_3175, _3176, _3177))) + _3252;
                                float _4309 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4320 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3206 * _3049.z;
                                frontier_phi_75_pred_1 = _3206 * _3049.y;
                                frontier_phi_75_pred_2 = _3206 * _3049.x;
                                frontier_phi_75_pred_3 = _3280 * _3061.z;
                                frontier_phi_75_pred_4 = _3280 * _3061.y;
                                frontier_phi_75_pred_5 = _3280 * _3061.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_75_pred;
                            _3288 = frontier_phi_75_pred_1;
                            _3287 = frontier_phi_75_pred_2;
                            _3286 = frontier_phi_75_pred_3;
                            _3285 = frontier_phi_75_pred_4;
                            _3284 = frontier_phi_75_pred_5;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2990 = _3286 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2993;
                        frontier_phi_69_pred_1 = _2992;
                        frontier_phi_69_pred_2 = _2991;
                        frontier_phi_69_pred_3 = _2990;
                        frontier_phi_69_pred_4 = _2989;
                        frontier_phi_69_pred_5 = _2988;
                    }
                    _2660 = frontier_phi_69_pred;
                    _2658 = frontier_phi_69_pred_1;
                    _2656 = frontier_phi_69_pred_2;
                    _2654 = frontier_phi_69_pred_3;
                    _2652 = frontier_phi_69_pred_4;
                    _2650 = frontier_phi_69_pred_5;
                    uint _2795 = _2794 + 1u;
                    if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2788 = _2650;
                        _2789 = _2652;
                        _2790 = _2654;
                        _2791 = _2656;
                        _2792 = _2658;
                        _2793 = _2660;
                        _2794 = _2795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2660;
                frontier_phi_57_58_ladder_1 = _2658;
                frontier_phi_57_58_ladder_2 = _2656;
                frontier_phi_57_58_ladder_3 = _2654;
                frontier_phi_57_58_ladder_4 = _2652;
                frontier_phi_57_58_ladder_5 = _2650;
            }
            else
            {
                frontier_phi_57_58_ladder = _2539;
                frontier_phi_57_58_ladder_1 = _2537;
                frontier_phi_57_58_ladder_2 = _2535;
                frontier_phi_57_58_ladder_3 = _2533;
                frontier_phi_57_58_ladder_4 = _2531;
                frontier_phi_57_58_ladder_5 = _2529;
            }
            _2649 = frontier_phi_57_58_ladder_5;
            _2651 = frontier_phi_57_58_ladder_4;
            _2653 = frontier_phi_57_58_ladder_3;
            _2655 = frontier_phi_57_58_ladder_2;
            _2657 = frontier_phi_57_58_ladder_1;
            _2659 = frontier_phi_57_58_ladder;
        }
        float _2664 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2394 = (_2664 * _2655) + _1828;
        _2396 = (_2664 * _2657) + _1830;
        _2398 = (_2664 * _2659) + _1832;
        _2400 = ((_2649 * _613) * _2664) + _2176;
        _2402 = ((_2651 * _615) * _2664) + _2178;
        _2404 = ((_2653 * _616) * _2664) + _2180;
    }
    else
    {
        _2394 = _1828;
        _2396 = _1830;
        _2398 = _1832;
        _2400 = _2176;
        _2402 = _2178;
        _2404 = _2180;
    }
    uint _2410 = _557 + uint(cbMatDynParam._m0[0u].w);
    float _2416 = (_341.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2410].x;
    float _2417 = (_341.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2410].y;
    float _2418 = (_341.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2410].z;
    float _4336 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4347 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4358 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4369 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _2424 = 0.959999978542327880859375 - (_586 * 0.959999978542327880859375);
    float _2432 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2394 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _627));
    float _2433 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2396 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _627));
    float _2434 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2398 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _627));
    float _2438 = _2424 - (exp2(log2(1.0 - _642) * 5.0) * _2424);
    float _2450 = ((_2432 + ((_2400 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + _2416) + ((((cbSceneParam._m0[72u].w * _380.x) * _2438) - _2432) * _410);
    float _2453 = ((_2417 + ((_2402 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + _2433) + ((((cbSceneParam._m0[72u].w * _380.y) * _2438) - _2433) * _410);
    float _2456 = ((_2418 + ((_2404 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1441)) * cbPerFrame._m0[3u].x)) + _2434) + ((((cbSceneParam._m0[72u].w * _380.z) * _2438) - _2434) * _410);
    float _4395 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2469 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2474 = cbInstanceData._m0[_555 + 6u].w * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)));
    float _2479 = _357 / cbSceneParam._m0[86u].x;
    float _2480 = _358 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _439 : (isnan(_439) ? cbSceneParam._m0[77u].w : min(_439, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_439 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_439) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _439 : min(cbSceneParam._m0[80u].w, _439));
        float _2555 = _2554 / _439;
        float _2566 = _2555 * _489;
        float _2567 = _490 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2569 = _2555 * _491;
        float _2571 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2572 = _2571 + cbSceneParam._m0[79u].w;
        float _2573 = cbSceneParam._m0[79u].w - _2567;
        float _2579 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2569 * _2569));
        float _2582 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2579;
        float _2587 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2589 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2750;
        if (abs((_2568 - _2571) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2750 = ((((_2572 > 0.0) ? exp2(_2587 * _2572) : (2.0 - exp2(_2589 * _2572))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2582;
        }
        else
        {
            float _2710 = 1.0 / cbSceneParam._m0[80u].x;
            float _2711 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : max(_2572, _2573));
            float _2712 = isnan(_2573) ? _2572 : (isnan(_2572) ? _2573 : min(_2572, _2573));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            float _2722 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : min(_2712, 0.0));
            _2750 = ((abs(_2579 / _2568) * cbSceneParam._m0[80u].y) * ((((_2721 - _2722) * 2.0) - ((exp2(_2587 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0)))) - exp2(_2587 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))))) * _2710)) - ((exp2(_2589 * _2721) - exp2(_2589 * _2722)) * _2710))) + (_2582 * cbSceneParam._m0[80u].z);
        }
        vec4 _2752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2761 = exp2((_2750 * (-1.44269502162933349609375)) * (1.0 - _2752.w));
        float _2762 = log2(_2761);
        float _2778 = log2(_2499);
        _2591 = (exp2(_2778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].x)) * _2752.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2593 = (exp2(_2778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].y)) * _2752.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2595 = (exp2(_2778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].z)) * _2752.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2597 = _2761 * _2499;
    }
    else
    {
        _2591 = _2496;
        _2593 = _2497;
        _2595 = _2498;
        _2597 = _2499;
    }
    float _2608 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2609 = _2608 == 3.0;
    float _2610 = log2(_2597);
    float _2614 = exp2(_2610 * cbSceneParam._m0[78u].x);
    float _2615 = exp2(_2610 * cbSceneParam._m0[78u].y);
    float _2616 = exp2(_2610 * cbSceneParam._m0[78u].z);
    float _2617 = _2614 * (isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0)));
    float _2618 = _2615 * (isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0)));
    float _2619 = _2616 * (isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0)));
    float _2628 = (_2608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2628 * (_2609 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.y = _2628 * (_2609 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2593)));
    SV_Target.z = _2628 * (_2609 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.w = _2474;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2416) * _2469) * _2614) * _2628;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2417) * _2469) * _2615) * _2628;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2418) * _2469) * _2616) * _2628;
    SV_Target_1.w = _2474;
}


