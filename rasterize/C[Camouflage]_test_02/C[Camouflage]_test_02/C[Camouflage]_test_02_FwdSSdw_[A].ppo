#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1057;
float _3525;
float _3526;
float _3527;
float _3528;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _252 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _258 = _252.w;
    float _259 = _252.x * cbMtdParam._m0[9u].x;
    float _260 = _252.y * cbMtdParam._m0[9u].y;
    float _261 = _252.z * cbMtdParam._m0[9u].z;
    vec4 _277 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _280 = _277.x + cbMtdParam._m0[11u].z;
    vec4 _293 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _301 = (_293.x * 2.0) + (-1.0);
    float _303 = (_293.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3537 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _313 = fma(_310, _230, fma(_303, _222 * TANGENT.x, (_208 * _200) * _301));
    float _316 = fma(_310, _231, fma(_303, _222 * TANGENT.y, (_208 * _201) * _301));
    float _319 = fma(_310, _232, fma(_303, _222 * TANGENT.z, (_208 * _202) * _301));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _327 = _293.z + cbMtdParam._m0[11u].w;
    vec4 _345 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _370 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _324);
    float _371 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _325);
    float _379 = isnan(cbInstanceData._m0[8u].x) ? _370 : (isnan(_370) ? cbInstanceData._m0[8u].x : max(_370, cbInstanceData._m0[8u].x));
    float _380 = isnan(cbInstanceData._m0[8u].y) ? _371 : (isnan(_371) ? cbInstanceData._m0[8u].y : max(_371, cbInstanceData._m0[8u].y));
    vec4 _384 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _379 : (isnan(_379) ? cbInstanceData._m0[8u].z : min(_379, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _380 : (isnan(_380) ? cbInstanceData._m0[8u].w : min(_380, cbInstanceData._m0[8u].w))));
    vec4 _409 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _412 = _409.x + cbMtdParam._m0[11u].x;
    float _413 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    float _418 = inversesqrt(dot(vec3(_324, _325, _326), vec3(_324, _325, _326)));
    float _419 = _418 * _324;
    float _420 = _418 * _325;
    float _421 = _418 * _326;
    float _3578 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _422 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _423 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3611 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3622 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3633 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _427 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _443 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _493 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _483);
    float _494 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _483);
    float _495 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _483);
    float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
    float _500 = _493 * _499;
    float _501 = _494 * _499;
    float _502 = _495 * _499;
    vec4 _507 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _509 = _507.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _736 = sqrt(((_493 * _493) + (_494 * _494)) + (_495 * _495));
        float _742 = (cbMatDynParam._m0[5u].x * _736) + cbMatDynParam._m0[5u].y;
        float _3644 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _747 = (cbMatDynParam._m0[5u].z * _736) + cbMatDynParam._m0[5u].w;
        float _3655 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) - _743)) + _743) < ((_509 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _520 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _521 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _523 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _525 = _523.w;
    float _545 = fma(_421, cbSceneParam._m0[5u].z, fma(_420, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _419));
    float _548 = fma(_421, cbSceneParam._m0[6u].z, fma(_420, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _419));
    float _551 = fma(_421, cbSceneParam._m0[7u].z, fma(_420, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _419));
    vec4 _553 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _564 = (((_553.y - _423) + (_553.w * _423)) * cbMtdParam._m0[3u].x) + _423;
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _579 = _577 + 9u;
    uint _580 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3666 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    vec4 _592 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _597 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _608 = (((_597.x - _427) + (_597.w * _427)) * cbMtdParam._m0[3u].x) + _427;
    float _621 = (cbMtdParam._m0[3u].x * (((_589 * _525) - _589) + _592.x)) + _589;
    float _622 = (cbMtdParam._m0[3u].x * (((_590 * _525) - _590) + _592.y)) + _590;
    float _623 = (cbMtdParam._m0[3u].x * (((_591 * _525) - _591) + _592.z)) + _591;
    float _624 = 1.0 - _608;
    float _625 = _624 * _621;
    float _626 = _624 * _622;
    float _627 = _624 * _623;
    float _632 = (_621 + (-0.039999999105930328369140625)) * _608;
    float _633 = (_622 + (-0.039999999105930328369140625)) * _608;
    float _634 = (_623 + (-0.039999999105930328369140625)) * _608;
    float _635 = _632 + 0.039999999105930328369140625;
    float _637 = _633 + 0.039999999105930328369140625;
    float _638 = _634 + 0.039999999105930328369140625;
    vec4 _646 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _520, cbSceneParam._m0[86u].y * _521));
    float _649 = _646.x * TEXCOORD_4;
    float _650 = dot(vec3(_419, _420, _421), vec3(_500, _501, _502));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _419) - _500;
    float _658 = (_653 * _420) - _501;
    float _659 = (_653 * _421) - _502;
    float _663 = abs(dot(vec3(_500, _501, _502), vec3(_419, _420, _421)));
    float _3699 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _670 = sqrt(_564);
    float _682 = exp2((_670 * 5.0) * log2(1.0 - (_664 * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _688 = (1.0 - _682) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _689 = _682 * _670;
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_725, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717));
        float _785 = fma(_725, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717));
        float _789 = fma(_725, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717));
        float _814 = _717 + _419;
        float _815 = _721 + _420;
        float _816 = _725 + _421;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_419, _420, _421), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3747 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_419, _420, _421), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3780 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_419, _420, _421), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3813 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1100 = fma(_725, cbModelParam._m0[30u].z, fma(_721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _717));
        float _1104 = fma(_725, cbModelParam._m0[31u].z, fma(_721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _717));
        float _1108 = fma(_725, cbModelParam._m0[32u].z, fma(_721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _717));
        float _1131 = _717 + _419;
        float _1132 = _721 + _420;
        float _1133 = _725 + _421;
        float _1143 = fma(_1133, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1131)) - _1100;
        float _1144 = fma(_1133, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1131)) - _1104;
        float _1145 = fma(_1133, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1131)) - _1108;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1100 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1104 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[35u].z) + ((((((_1108 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1199 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1166.x + (-0.5));
        float _1201 = _1199 * (_1166.y + (-0.5));
        float _1202 = _1199 * (_1166.z + (-0.5));
        float _1209 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1173.x + (-0.5));
        float _1211 = _1209 * (_1173.y + (-0.5));
        float _1212 = _1209 * (_1173.z + (-0.5));
        float _1219 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1180.x + (-0.5));
        float _1221 = _1219 * (_1180.y + (-0.5));
        float _1222 = _1219 * (_1180.z + (-0.5));
        float _1229 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1187.x + (-0.5));
        float _1231 = _1229 * (_1187.y + (-0.5));
        float _1232 = _1229 * (_1187.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_419, _420, _421), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3876 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1263 + 1.0))) + _1268) * _1233;
        float _1278 = _1201 * 0.5;
        float _1279 = _1211 * 0.5;
        float _1280 = _1221 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_419, _420, _421), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3909 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1305 + 1.0))) + _1310) * _1234;
        float _1320 = _1202 * 0.5;
        float _1321 = _1212 * 0.5;
        float _1322 = _1222 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_419, _420, _421), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3942 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1347 + 1.0))) + _1352) * _1235;
        _1369 = _1202;
        _1370 = _1201;
        _1371 = _1200;
        _1372 = _1212;
        _1373 = _1211;
        _1374 = _1210;
        _1375 = _1222;
        _1376 = _1221;
        _1377 = _1220;
        _1378 = _1235;
        _1379 = _1234;
        _1380 = _1233;
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = _1057;
        _1378 = _1057;
        _1379 = _1057;
        _1380 = _1057;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1416 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1419 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1422 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1393));
    float _1437 = _657 * 0.5;
    float _1438 = _658 * 0.5;
    float _1439 = _659 * 0.5;
    float _1440 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1443 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1446 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1480;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1453 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1457 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1461 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1468 = dot(vec4(cbModelParam._m0[39u]), vec4(_1437, _1438, _1439, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1491;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1482 = dot(vec4(cbModelParam._m0[40u]), vec4(_1437, _1438, _1439, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1495 = (_1491 * cbModelParam._m0[1u].x) + (_1480 * (1.0 - cbModelParam._m0[1u].x));
    float _1505 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _564);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1505 : min(cbModelParam._m0[25u].z, _1505));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_725, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_725, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_725, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1569 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1572 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1600 = frontier_phi_19_17_ladder;
        }
        float _1827;
        if (_1569 > 0.0)
        {
            _1827 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1827 = frontier_phi_28_24_ladder;
        }
        float _2084;
        if (_1572 > 0.0)
        {
            _2084 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2084 = frontier_phi_40_35_ladder;
        }
        float _2086 = isnan(_1827) ? _1600 : (isnan(_1600) ? _1827 : min(_1600, _1827));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1566) + _1555;
        float _2092 = (_2087 * _1569) + _1559;
        float _2093 = (_2087 * _1572) + _1563;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1506);
            frontier_phi_18_40_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_18_40_ladder_2;
        _1590 = frontier_phi_18_40_ladder_1;
        _1592 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1506);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _564);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_725, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_725, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_725, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1668 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1671 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1832;
        if (_1665 > 0.0)
        {
            _1832 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1832 = frontier_phi_30_26_ladder;
        }
        float _2111;
        if (_1668 > 0.0)
        {
            _2111 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2111 = frontier_phi_42_37_ladder;
        }
        float _2324;
        if (_1671 > 0.0)
        {
            _2324 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2324 = frontier_phi_51_48_ladder;
        }
        float _2326 = isnan(_2111) ? _1832 : (isnan(_1832) ? _2111 : min(_1832, _2111));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1665) + _1654;
        float _2332 = (_2327 * _1668) + _1658;
        float _2333 = (_2327 * _1671) + _1662;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_27_51_ladder = _2578.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2578.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2578.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_27_51_ladder_2;
        _1692 = frontier_phi_27_51_ladder_1;
        _1694 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1597);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_688 * _635) + _689) * _649) * ((cbModelParam._m0[1u].w * (_1690 - _1588)) + _1588);
    float _1709 = (((_688 * _637) + _689) * _649) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1711 = (((_688 * _638) + _689) * _649) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    vec4 _1728 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_520, _521));
    float _1730 = _1728.w;
    float _1742 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1730);
    float _1743 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1730);
    float _1744 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1730);
    uvec4 _1748 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1750 = _1748.x * 14u;
    uint _1751 = _1750 + 13u;
    float _1758 = _649 + (-1.0);
    float _1763 = (cbLight._m0[_1751].x * _1758) + 1.0;
    float _1764 = (cbLight._m0[_1751].y * _1758) + 1.0;
    float _1765 = (cbLight._m0[_1751].z * _1758) + 1.0;
    float _1766 = (cbLight._m0[_1751].w * _1758) + 1.0;
    uint _1767 = _1750 + 5u;
    float _1773 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1777 = _1750 + 4u;
    float _1786 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1790 = _1750 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_419, _420, _421));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_419, _420, _421));
    float _4078 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _4089 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1767].x * _1773) * _1811) + (((cbLight._m0[_1777].x * _1742) * _1786) * _1809);
    float _1819 = ((_1773 * cbLight._m0[_1767].y) * _1811) + (((cbLight._m0[_1777].y * _1743) * _1786) * _1809);
    float _1820 = ((_1773 * cbLight._m0[_1767].z) * _1811) + (((cbLight._m0[_1777].z * _1744) * _1786) * _1809);
    uvec4 _1824 = floatBitsToUint(cbLight._m0[_1750 + 12u]);
    bool _1826 = _1824.x == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1826)
    {
        _1837 = _1818;
        _1839 = _1819;
        _1841 = _1820;
    }
    else
    {
        uint _1845 = _1750 + 6u;
        float _1861 = (dot(vec3(cbLight._m0[_1750 + 2u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _4100 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1864 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1837 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1818;
        _1839 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1819;
        _1841 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1820;
    }
    bool _1844 = _1824.y == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1844)
    {
        _1882 = _1837;
        _1884 = _1839;
        _1886 = _1841;
    }
    else
    {
        uint _2055 = _1750 + 7u;
        float _2071 = (dot(vec3(cbLight._m0[_1750 + 3u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4116 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2074 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1882 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1837;
        _1884 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1839;
        _1886 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1841;
    }
    uint _1889 = _1750 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _564) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1750].x + _500;
    float _1905 = cbLight._m0[_1750].y + _501;
    float _1906 = cbLight._m0[_1750].z + _502;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1750].xyz));
    float _4132 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _1918 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1919 = dot(vec3(_419, _420, _421), vec3(_1911, _1912, _1913));
    float _4154 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1911, _1912, _1913));
    float _4165 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
    float _1940 = 0.959999978542327880859375 - _632;
    float _1942 = 0.959999978542327880859375 - _633;
    float _1943 = 0.959999978542327880859375 - _634;
    float _1950 = 1.0 - _1903;
    float _1961 = (0.5 / (((_1918 * ((_1917 * _1950) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1950) + _1903) * _1917))) * _1917;
    float _4176 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1977 = _1750 + 9u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _564) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1790].x + _500;
    float _1991 = cbLight._m0[_1790].y + _501;
    float _1992 = cbLight._m0[_1790].z + _502;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1790].xyz));
    float _4187 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2004 = dot(vec3(_419, _420, _421), vec3(_1997, _1998, _1999));
    float _4198 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1997, _1998, _1999));
    float _4209 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1989 * _1989;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _2030 = 1.0 - _1989;
    float _2040 = (0.5 / (((_1918 * ((_2003 * _2030) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2030) + _1989) * _2003))) * _2003;
    float _4220 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    float _2052 = (((((_2023 * _1940) + _635) * cbLight._m0[_1977].x) * _2042) * _1773) + ((((cbLight._m0[_1889].x * _1742) * ((_1939 * _1940) + _635)) * _1963) * _1786);
    float _2053 = (((((_2023 * _1942) + _637) * cbLight._m0[_1977].y) * _2042) * _1773) + ((((cbLight._m0[_1889].y * _1743) * ((_1939 * _1942) + _637)) * _1963) * _1786);
    float _2054 = (((((_2023 * _1943) + _638) * cbLight._m0[_1977].z) * _2042) * _1773) + ((((cbLight._m0[_1889].z * _1744) * ((_1939 * _1943) + _638)) * _1963) * _1786);
    float _2116;
    float _2118;
    float _2120;
    if (_1826)
    {
        _2116 = _2052;
        _2118 = _2053;
        _2120 = _2054;
    }
    else
    {
        uint _2122 = _1750 + 2u;
        uint _2126 = _1750 + 10u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _564) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _500;
        float _2143 = cbLight._m0[_2122].y + _501;
        float _2144 = cbLight._m0[_2122].z + _502;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2122].xyz));
        float _4231 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2156 = dot(vec3(_419, _420, _421), vec3(_2149, _2150, _2151));
        float _4242 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4253 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2182 = 1.0 - _2141;
        float _2192 = (0.5 / (((_1918 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2182) + _2141) * _2155))) * _2155;
        float _4264 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2194 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2195 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2116 = (((((_2175 * _1940) + _635) * cbLight._m0[_2126].x) * _2194) * _2195) + _2052;
        _2118 = (((((_2175 * _1942) + _637) * cbLight._m0[_2126].y) * _2194) * _2195) + _2053;
        _2120 = (((((_2175 * _1943) + _638) * cbLight._m0[_2126].z) * _2194) * _2195) + _2054;
    }
    float _2230;
    float _2232;
    float _2234;
    if (_1844)
    {
        _2230 = _2116;
        _2232 = _2118;
        _2234 = _2120;
    }
    else
    {
        uint _2241 = _1750 + 3u;
        uint _2245 = _1750 + 11u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _564) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _500;
        float _2262 = cbLight._m0[_2241].y + _501;
        float _2263 = cbLight._m0[_2241].z + _502;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2241].xyz));
        float _4280 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2275 = dot(vec3(_419, _420, _421), vec3(_2268, _2269, _2270));
        float _4291 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4302 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2301 = 1.0 - _2260;
        float _2311 = (0.5 / (((_1918 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2301) + _2260) * _2274))) * _2274;
        float _4313 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2230 = (((((_2294 * _1940) + _635) * cbLight._m0[_2245].x) * _2313) * _2314) + _2116;
        _2232 = (((((_2294 * _1942) + _637) * cbLight._m0[_2245].y) * _2313) * _2314) + _2118;
        _2234 = (((((_2294 * _1943) + _638) * cbLight._m0[_2245].z) * _2313) * _2314) + _2120;
    }
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_1748.y == 0u)
    {
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2389;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2389;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2389;
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.x;
        uint _2416 = uint((float(_2404.y) * floor(float(uint(cbSceneParam._m0[85u].y * _521) / _2405))) + floor(float(uint(cbSceneParam._m0[85u].x * _520) / _2405)));
        float _2426 = (log2(_2392 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2427 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        uint _2430 = uint(isnan(14.0) ? _2427 : (isnan(_2427) ? 14.0 : min(_2427, 14.0)));
        uvec4 _2435 = texelFetch(g_lightClusterGridBuffer, int(((_2430 << 2u) + (_2416 << 6u)) >> 2u));
        uint _2436 = _2435.x;
        uint _2437 = _2404.z;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((((1u << ((_2437 >> 4u) & 15u)) + 4294967295u) & _2436) == 0u) || ((_2437 & 240u) == 0u))
        {
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
        }
        else
        {
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2759)
                {
                    frontier_phi_68_pred = _2745;
                    frontier_phi_68_pred_1 = _2748;
                    frontier_phi_68_pred_2 = _2747;
                    frontier_phi_68_pred_3 = _2746;
                    frontier_phi_68_pred_4 = _2744;
                    frontier_phi_68_pred_5 = _2743;
                }
                else
                {
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    uint _2894;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2758;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2898 = uint(findLSB(_2894)) + (_2749 << 5u);
                        uint _2895 = (_2894 + 4294967295u) & _2894;
                        uint _2900 = _2898 * 48u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2920 = (_2898 * 48u) + 4u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2939 = (_2898 * 48u) + 8u;
                        vec3 _2950 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x));
                        float _2954 = _2914.x - _2390;
                        float _2955 = _2914.y - _2391;
                        float _2956 = _2914.z - _2392;
                        float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                        float _2960 = inversesqrt(_2957);
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2964 = dot(vec3(_545, _548, _551), vec3(_2961, _2962, _2963));
                        float _2969 = 1.0 - (_2957 * _2914.w);
                        float _4339 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _2971 = sqrt(_2957) * _2933.w;
                        float _2974 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2964) + _2975;
                        float _2981 = _2971 * _2971;
                        float _2985 = ((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2970) / ((_2981 * 0.699999988079071044921875) + 1.0);
                        float _2989 = (-0.0) - _2390;
                        float _2990 = (-0.0) - _2391;
                        float _2991 = (-0.0) - _2392;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _670;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_545, _548, _551), vec3(_2996, _2997, _2998));
                        float _4355 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3031 = dot(vec3(_545, _548, _551), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4366 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2974 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2964) + _3040;
                        float _4377 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4388 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3038 * _3038) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125))) * _2970;
                        _2818 = (_2985 * _2933.x) + _2891;
                        _2819 = (_2985 * _2933.y) + _2892;
                        _2820 = (_2985 * _2933.z) + _2893;
                        _2815 = (_3066 * _2950.x) + _2888;
                        _2816 = (_3066 * _2950.y) + _2889;
                        _2817 = (_3066 * _2950.z) + _2890;
                        if (_2895 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2895;
                        }
                    }
                    frontier_phi_68_pred = _2817;
                    frontier_phi_68_pred_1 = _2820;
                    frontier_phi_68_pred_2 = _2819;
                    frontier_phi_68_pred_3 = _2818;
                    frontier_phi_68_pred_4 = _2816;
                    frontier_phi_68_pred_5 = _2815;
                }
                _2588 = frontier_phi_68_pred;
                _2594 = frontier_phi_68_pred_1;
                _2592 = frontier_phi_68_pred_2;
                _2590 = frontier_phi_68_pred_3;
                _2586 = frontier_phi_68_pred_4;
                _2584 = frontier_phi_68_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2584;
                    _2744 = _2586;
                    _2745 = _2588;
                    _2746 = _2590;
                    _2747 = _2592;
                    _2748 = _2594;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
        }
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.z;
        uint _2600 = (_2598 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2600) & _2436) == 0u)
        {
            _2711 = _2583;
            _2713 = _2585;
            _2715 = _2587;
            _2717 = _2589;
            _2719 = _2591;
            _2721 = _2593;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
            float _2737 = _2736 * _2390;
            float _2738 = _2736 * _2391;
            float _2739 = _2736 * _2392;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2600 < ((_2598 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2871 = _2583;
                float _2872 = _2585;
                float _2873 = _2587;
                float _2874 = _2589;
                float _2875 = _2591;
                float _2876 = _2593;
                uint _2877 = _2600;
                uint _2886;
                bool _2887;
                for (;;)
                {
                    _2886 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                    _2887 = _2886 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2887)
                    {
                        frontier_phi_79_pred = _2876;
                        frontier_phi_79_pred_1 = _2875;
                        frontier_phi_79_pred_2 = _2874;
                        frontier_phi_79_pred_3 = _2873;
                        frontier_phi_79_pred_4 = _2872;
                        frontier_phi_79_pred_5 = _2871;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        uint _3099 = _2886;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3169;
                        vec4 _3185;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3110 = ((_2877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3156 = (_3110 * 40u) + 16u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3110 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3188 = (_3110 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3110 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_2392, _3220.z, fma(_2391, _3220.y, _3220.x * _2390)) + _3220.w;
                            _3233 = !((fma(_2392, _3201.z, fma(_2391, _3201.y, _3201.x * _2390)) + _3201.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3125.x - _2390;
                                float _3261 = _3125.y - _2391;
                                float _3262 = _3125.z - _2392;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3126 * _3126));
                                float _4399 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3278 = sqrt(_3263) * _3141.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_545, _548, _551))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_2392, _3169.z, fma(_2391, _3169.y, _3169.x * _2390)) + _3169.w) / _3232;
                                float _3292 = (fma(_2392, _3185.z, fma(_2391, _3185.y, _3185.x * _2390)) + _3185.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4415 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _670;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2737;
                                float _3322 = _3268 - _2738;
                                float _3323 = _3269 - _2739;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4426 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3335 = dot(vec3(_545, _548, _551), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4437 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_545, _548, _551), vec3(_3267, _3268, _3269))) + _3344;
                                float _4448 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4459 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3298 * _3141.z;
                                frontier_phi_85_pred_1 = _3298 * _3141.y;
                                frontier_phi_85_pred_2 = _3298 * _3141.x;
                                frontier_phi_85_pred_3 = _3372 * _3153.z;
                                frontier_phi_85_pred_4 = _3372 * _3153.y;
                                frontier_phi_85_pred_5 = _3372 * _3153.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3381 = frontier_phi_85_pred;
                            _3380 = frontier_phi_85_pred_1;
                            _3379 = frontier_phi_85_pred_2;
                            _3378 = frontier_phi_85_pred_3;
                            _3377 = frontier_phi_85_pred_4;
                            _3376 = frontier_phi_85_pred_5;
                            _3083 = _3379 + _3096;
                            _3084 = _3380 + _3097;
                            _3085 = _3381 + _3098;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3085;
                        frontier_phi_79_pred_1 = _3084;
                        frontier_phi_79_pred_2 = _3083;
                        frontier_phi_79_pred_3 = _3082;
                        frontier_phi_79_pred_4 = _3081;
                        frontier_phi_79_pred_5 = _3080;
                    }
                    _2722 = frontier_phi_79_pred;
                    _2720 = frontier_phi_79_pred_1;
                    _2718 = frontier_phi_79_pred_2;
                    _2716 = frontier_phi_79_pred_3;
                    _2714 = frontier_phi_79_pred_4;
                    _2712 = frontier_phi_79_pred_5;
                    uint _2878 = _2877 + 1u;
                    if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2871 = _2712;
                        _2872 = _2714;
                        _2873 = _2716;
                        _2874 = _2718;
                        _2875 = _2720;
                        _2876 = _2722;
                        _2877 = _2878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2718;
                frontier_phi_60_61_ladder_1 = _2722;
                frontier_phi_60_61_ladder_2 = _2720;
                frontier_phi_60_61_ladder_3 = _2716;
                frontier_phi_60_61_ladder_4 = _2714;
                frontier_phi_60_61_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_60_61_ladder = _2589;
                frontier_phi_60_61_ladder_1 = _2593;
                frontier_phi_60_61_ladder_2 = _2591;
                frontier_phi_60_61_ladder_3 = _2587;
                frontier_phi_60_61_ladder_4 = _2585;
                frontier_phi_60_61_ladder_5 = _2583;
            }
            _2711 = frontier_phi_60_61_ladder_5;
            _2713 = frontier_phi_60_61_ladder_4;
            _2715 = frontier_phi_60_61_ladder_3;
            _2717 = frontier_phi_60_61_ladder;
            _2719 = frontier_phi_60_61_ladder_2;
            _2721 = frontier_phi_60_61_ladder_1;
        }
        float _2726 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2448 = (_2726 * _2717) + _1882;
        _2450 = (_2726 * _2719) + _1884;
        _2452 = (_2726 * _2721) + _1886;
        _2454 = ((_2711 * _635) * _2726) + _2230;
        _2456 = ((_2713 * _637) * _2726) + _2232;
        _2458 = ((_2715 * _638) * _2726) + _2234;
    }
    else
    {
        _2448 = _1882;
        _2450 = _1884;
        _2452 = _1886;
        _2454 = _2230;
        _2456 = _2232;
        _2458 = _2234;
    }
    uint _2464 = _579 + uint(cbMatDynParam._m0[0u].w);
    float _2470 = (_345.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2464].x;
    float _2471 = (_345.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2464].y;
    float _2472 = (_345.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2464].z;
    float _4475 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4486 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4497 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4508 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _2478 = 0.959999978542327880859375 - (_608 * 0.959999978542327880859375);
    float _2486 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2448 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _649));
    float _2487 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2450 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _649));
    float _2488 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2452 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _649));
    float _2492 = _2478 - (exp2(log2(1.0 - _664) * 5.0) * _2478);
    float _2504 = ((_2486 + ((_2454 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + _2470) + ((((cbSceneParam._m0[72u].w * _384.x) * _2492) - _2486) * _414);
    float _2507 = ((_2471 + ((_2456 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + _2487) + ((((cbSceneParam._m0[72u].w * _384.y) * _2492) - _2487) * _414);
    float _2510 = ((_2472 + ((_2458 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + _2488) + ((((cbSceneParam._m0[72u].w * _384.z) * _2492) - _2488) * _414);
    float _2511 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2512 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2513 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2519 = cbMtdParam._m0[2u].x * _2470;
    float _2520 = cbMtdParam._m0[2u].y * _2471;
    float _2521 = cbMtdParam._m0[2u].z * _2472;
    float _4534 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2523 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2528 = cbInstanceData._m0[_577 + 6u].w * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)));
    float _2533 = _520 / cbSceneParam._m0[86u].x;
    float _2534 = _521 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _443 : (isnan(_443) ? cbSceneParam._m0[77u].w : min(_443, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_443 > cbSceneParam._m0[78u].w)
    {
        float _2608 = isnan(_443) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _443 : min(cbSceneParam._m0[80u].w, _443));
        float _2609 = _2608 / _443;
        float _2620 = _2609 * _493;
        float _2621 = _494 * _2609;
        float _2622 = (-0.0) - _2621;
        float _2623 = _2609 * _495;
        float _2625 = (cbSceneParam._m0[77u].w * _2622) / _2608;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2621;
        float _2633 = sqrt(((_2620 * _2620) + (_2621 * _2621)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2608)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2622 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2774 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2828 = ((abs(_2633 / _2622) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2643 * _2783) - exp2(_2643 * _2784)) * _2772))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2553);
        _2645 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2647 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2649 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2651 = _2839 * _2553;
    }
    else
    {
        _2645 = _2550;
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
    }
    bool _2866;
    vec4 _2660;
    vec4 _2682;
    float _2684;
    float _2688;
    float _2689;
    float _2690;
    float _2693;
    float _2696;
    float _2699;
    float _2700;
    bool _2710;
    for (;;)
    {
        _2660 = cbMatDynParam._m0[0u];
        float _2662 = roundEven(_2660.y);
        bool _2663 = _2662 == 3.0;
        float _2664 = log2(_2651);
        float _2668 = exp2(_2664 * cbSceneParam._m0[78u].x);
        float _2669 = exp2(_2664 * cbSceneParam._m0[78u].y);
        float _2670 = exp2(_2664 * cbSceneParam._m0[78u].z);
        float _2671 = _2668 * _2511;
        float _2672 = _2669 * _2512;
        float _2673 = _2670 * _2513;
        float _2680 = _509 + (-0.5);
        _2682 = cbMtdParam._m0[1u];
        _2684 = _2682.y * _2680;
        float _2687 = (_2662 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2688 = _2687 * (_2663 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
        _2689 = _2687 * (_2663 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
        _2690 = _2687 * (_2663 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = ((_2519 * _2523) * _2668) * _2687;
        _2696 = ((_2520 * _2523) * _2669) * _2687;
        _2699 = ((_2521 * _2523) * _2670) * _2687;
        _2700 = _2680 * 0.999000012874603271484375;
        _2710 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2710)
        {
            if ((cbInstanceData._m0[_577 + 7u].x + _2700) < 0.5)
            {
                _2866 = true;
                break;
            }
        }
        uint _2807 = _579 + uint(_2660.w);
        if ((cbInstanceData._m0[_2807].w < 1.0) && ((cbInstanceData._m0[_2807].w + _2700) < 0.5))
        {
            _2866 = true;
            break;
        }
        if ((_2684 + _258) < _2682.x)
        {
            _2866 = true;
            break;
        }
        _2866 = false;
        break;
    }
    float _3071;
    if (_2866)
    {
        discard_state = true;
        _3071 = 0.0;
    }
    else
    {
        _3071 = _2528;
    }
    SV_Target.x = _2688;
    SV_Target.y = _2689;
    SV_Target.z = _2690;
    SV_Target.w = _3071;
    SV_Target_1.x = _2693;
    SV_Target_1.y = _2696;
    SV_Target_1.z = _2699;
    SV_Target_1.w = _2528;
    discard_exit();
}


