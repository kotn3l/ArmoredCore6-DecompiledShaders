#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1055;
float _3499;
float _3500;
float _3501;
float _3502;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _250 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.w;
    float _257 = _250.x * cbMtdParam._m0[9u].x;
    float _258 = _250.y * cbMtdParam._m0[9u].y;
    float _259 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _278 = _275.x + cbMtdParam._m0[11u].z;
    vec4 _291 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _299 = (_291.x * 2.0) + (-1.0);
    float _301 = (_291.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3511 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))));
    float _311 = fma(_308, _228, fma(_301, _220 * TANGENT.x, (_206 * _198) * _299));
    float _314 = fma(_308, _229, fma(_301, _220 * TANGENT.y, (_206 * _199) * _299));
    float _317 = fma(_308, _230, fma(_301, _220 * TANGENT.z, (_206 * _200) * _299));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _325 = _291.z + cbMtdParam._m0[11u].w;
    vec4 _343 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _368 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _322);
    float _369 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _323);
    float _377 = isnan(cbInstanceData._m0[8u].x) ? _368 : (isnan(_368) ? cbInstanceData._m0[8u].x : max(_368, cbInstanceData._m0[8u].x));
    float _378 = isnan(cbInstanceData._m0[8u].y) ? _369 : (isnan(_369) ? cbInstanceData._m0[8u].y : max(_369, cbInstanceData._m0[8u].y));
    vec4 _382 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _377 : (isnan(_377) ? cbInstanceData._m0[8u].z : min(_377, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _378 : (isnan(_378) ? cbInstanceData._m0[8u].w : min(_378, cbInstanceData._m0[8u].w))));
    vec4 _407 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _410 = _407.x + cbMtdParam._m0[11u].x;
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _416 = inversesqrt(dot(vec3(_322, _323, _324), vec3(_322, _323, _324)));
    float _417 = _416 * _322;
    float _418 = _416 * _323;
    float _419 = _416 * _324;
    float _3552 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _420 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _421 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3585 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3596 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3607 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _425 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _441 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _491 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _481);
    float _492 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _481);
    float _493 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _481);
    float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
    float _498 = _491 * _497;
    float _499 = _492 * _497;
    float _500 = _493 * _497;
    vec4 _505 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _507 = _505.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _734 = sqrt(((_491 * _491) + (_492 * _492)) + (_493 * _493));
        float _740 = (cbMatDynParam._m0[5u].x * _734) + cbMatDynParam._m0[5u].y;
        float _3618 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _745 = (cbMatDynParam._m0[5u].z * _734) + cbMatDynParam._m0[5u].w;
        float _3629 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) - _741)) + _741) < ((_507 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _518 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _519 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _521 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _523 = _521.w;
    float _543 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _546 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _549 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    vec4 _551 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _562 = (((_551.y - _421) + (_551.w * _421)) * cbMtdParam._m0[3u].x) + _421;
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _577 = _575 + 9u;
    uint _578 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3640 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    vec4 _590 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _595 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _606 = (((_595.x - _425) + (_595.w * _425)) * cbMtdParam._m0[3u].x) + _425;
    float _619 = (cbMtdParam._m0[3u].x * (((_587 * _523) - _587) + _590.x)) + _587;
    float _620 = (cbMtdParam._m0[3u].x * (((_588 * _523) - _588) + _590.y)) + _588;
    float _621 = (cbMtdParam._m0[3u].x * (((_589 * _523) - _589) + _590.z)) + _589;
    float _622 = 1.0 - _606;
    float _623 = _622 * _619;
    float _624 = _622 * _620;
    float _625 = _622 * _621;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _606;
    float _631 = (_620 + (-0.039999999105930328369140625)) * _606;
    float _632 = (_621 + (-0.039999999105930328369140625)) * _606;
    float _633 = _630 + 0.039999999105930328369140625;
    float _635 = _631 + 0.039999999105930328369140625;
    float _636 = _632 + 0.039999999105930328369140625;
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _518, cbSceneParam._m0[86u].y * _519));
    float _647 = _644.x * TEXCOORD_4;
    float _648 = dot(vec3(_417, _418, _419), vec3(_498, _499, _500));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _417) - _498;
    float _656 = (_651 * _418) - _499;
    float _657 = (_651 * _419) - _500;
    float _661 = abs(dot(vec3(_498, _499, _500), vec3(_417, _418, _419)));
    float _3673 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _668 = sqrt(_562);
    float _680 = exp2((_668 * 5.0) * log2(1.0 - (_662 * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _686 = (1.0 - _680) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _687 = _680 * _668;
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _783 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _787 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _812 = _715 + _417;
        float _813 = _719 + _418;
        float _814 = _723 + _419;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_417, _418, _419), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3721 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_417, _418, _419), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3754 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_417, _418, _419), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3787 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1098 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1102 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1106 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1129 = _715 + _417;
        float _1130 = _719 + _418;
        float _1131 = _723 + _419;
        float _1141 = fma(_1131, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129)) - _1098;
        float _1142 = fma(_1131, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129)) - _1102;
        float _1143 = fma(_1131, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129)) - _1106;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1098 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1102 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[35u].z) + ((((((_1106 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1197 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1164.x + (-0.5));
        float _1199 = _1197 * (_1164.y + (-0.5));
        float _1200 = _1197 * (_1164.z + (-0.5));
        float _1207 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1171.x + (-0.5));
        float _1209 = _1207 * (_1171.y + (-0.5));
        float _1210 = _1207 * (_1171.z + (-0.5));
        float _1217 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1178.x + (-0.5));
        float _1219 = _1217 * (_1178.y + (-0.5));
        float _1220 = _1217 * (_1178.z + (-0.5));
        float _1227 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1185.x + (-0.5));
        float _1229 = _1227 * (_1185.y + (-0.5));
        float _1230 = _1227 * (_1185.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_417, _418, _419), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3850 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1261 + 1.0))) + _1266) * _1231;
        float _1276 = _1199 * 0.5;
        float _1277 = _1209 * 0.5;
        float _1278 = _1219 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_417, _418, _419), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3883 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1303 + 1.0))) + _1308) * _1232;
        float _1318 = _1200 * 0.5;
        float _1319 = _1210 * 0.5;
        float _1320 = _1220 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_417, _418, _419), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3916 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1345 + 1.0))) + _1350) * _1233;
        _1367 = _1200;
        _1368 = _1199;
        _1369 = _1198;
        _1370 = _1210;
        _1371 = _1209;
        _1372 = _1208;
        _1373 = _1220;
        _1374 = _1219;
        _1375 = _1218;
        _1376 = _1233;
        _1377 = _1232;
        _1378 = _1231;
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = _1055;
        _1376 = _1055;
        _1377 = _1055;
        _1378 = _1055;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1067)) + _1067;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1414 = fma(_1393, cbSceneParam._m0[89u].z, fma(_1392, cbSceneParam._m0[89u].y, _1391 * cbSceneParam._m0[89u].x));
    float _1417 = fma(_1393, cbSceneParam._m0[90u].z, fma(_1392, cbSceneParam._m0[90u].y, _1391 * cbSceneParam._m0[90u].x));
    float _1420 = fma(_1393, cbSceneParam._m0[91u].z, fma(_1392, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1391));
    float _1435 = _655 * 0.5;
    float _1436 = _656 * 0.5;
    float _1437 = _657 * 0.5;
    float _1438 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1441 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1444 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1478;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1451 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1455 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1459 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1466 = dot(vec4(cbModelParam._m0[39u]), vec4(_1435, _1436, _1437, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1489;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1480 = dot(vec4(cbModelParam._m0[40u]), vec4(_1435, _1436, _1437, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1493 = (_1489 * cbModelParam._m0[1u].x) + (_1478 * (1.0 - cbModelParam._m0[1u].x));
    float _1503 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1504 = isnan(_1503) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1503 : min(cbModelParam._m0[25u].z, _1503));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1553 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1557 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1561 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1564 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1567 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1570 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1598;
        if (_1564 > 0.0)
        {
            _1598 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1598 = frontier_phi_19_17_ladder;
        }
        float _1804;
        if (_1567 > 0.0)
        {
            _1804 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1804 = frontier_phi_28_24_ladder;
        }
        float _2058;
        if (_1570 > 0.0)
        {
            _2058 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2058 = frontier_phi_40_35_ladder;
        }
        float _2060 = isnan(_1804) ? _1598 : (isnan(_1598) ? _1804 : min(_1598, _1804));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1564) + _1553;
        float _2066 = (_2061 * _1567) + _1557;
        float _2067 = (_2061 * _1570) + _1561;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2070 = (-1.0) - _2068;
        float _2072 = _2068 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2067 > _2072) || ((_2067 < _2070) || ((_2066 > _2072) || ((_2066 < _2070) || ((_2065 < _2070) || (_2065 > _2072))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2195 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2067, cbModelParam._m0[9u].z, fma(_2066, cbModelParam._m0[9u].y, _2065 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2067, cbModelParam._m0[10u].z, fma(_2066, cbModelParam._m0[10u].y, _2065 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2067, cbModelParam._m0[11u].z, fma(_2066, cbModelParam._m0[11u].y, _2065 * cbModelParam._m0[11u].x))), _1504);
            frontier_phi_18_40_ladder = _2195.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2195.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2195.x * cbModelParam._m0[1u].y;
        }
        _1586 = frontier_phi_18_40_ladder_2;
        _1588 = frontier_phi_18_40_ladder_1;
        _1590 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1504);
        _1586 = _1574.x * cbModelParam._m0[1u].y;
        _1588 = _1574.y * cbModelParam._m0[1u].y;
        _1590 = _1574.z * cbModelParam._m0[1u].y;
    }
    float _1594 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1594 : min(cbModelParam._m0[25u].w, _1594));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1666 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1669 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1809;
        if (_1663 > 0.0)
        {
            _1809 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1809 = frontier_phi_30_26_ladder;
        }
        float _2085;
        if (_1666 > 0.0)
        {
            _2085 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2085 = frontier_phi_42_37_ladder;
        }
        float _2298;
        if (_1669 > 0.0)
        {
            _2298 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2298 = frontier_phi_51_48_ladder;
        }
        float _2300 = isnan(_2085) ? _1809 : (isnan(_1809) ? _2085 : min(_1809, _2085));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1663) + _1652;
        float _2306 = (_2301 * _1666) + _1656;
        float _2307 = (_2301 * _1669) + _1660;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2308;
        float _2311 = _2308 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2307 > _2311) || ((_2307 < _2309) || ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 < _2309) || (_2305 > _2311))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2307, cbModelParam._m0[17u].z, fma(_2306, cbModelParam._m0[17u].y, _2305 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2307, cbModelParam._m0[18u].z, fma(_2306, cbModelParam._m0[18u].y, _2305 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2307, cbModelParam._m0[19u].z, fma(_2306, cbModelParam._m0[19u].y, _2305 * cbModelParam._m0[19u].x))), _1595);
            frontier_phi_27_51_ladder = _2552.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2552.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2552.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_27_51_ladder_2;
        _1690 = frontier_phi_27_51_ladder_1;
        _1692 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1595);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1705 = (((_686 * _633) + _687) * _647) * ((cbModelParam._m0[1u].w * (_1688 - _1586)) + _1586);
    float _1707 = (((_686 * _635) + _687) * _647) * ((cbModelParam._m0[1u].w * (_1690 - _1588)) + _1588);
    float _1709 = (((_686 * _636) + _687) * _647) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _647 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1763 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1767 = _1730 | 1u;
    float _1778 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_417, _418, _419));
    float _1781 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_417, _418, _419));
    float _4052 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _4063 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1786 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1788 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1795 = ((cbLight._m0[_1747].x * _1753) * _1788) + ((cbLight._m0[_1757].x * _1763) * _1786);
    float _1796 = ((_1753 * cbLight._m0[_1747].y) * _1788) + ((_1763 * cbLight._m0[_1757].y) * _1786);
    float _1797 = ((_1753 * cbLight._m0[_1747].z) * _1788) + ((_1763 * cbLight._m0[_1757].z) * _1786);
    uvec4 _1801 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1803 = _1801.x == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1803)
    {
        _1814 = _1795;
        _1816 = _1796;
        _1818 = _1797;
    }
    else
    {
        uint _1822 = _1730 + 6u;
        float _1838 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _1839 = _1838 * _1838;
        float _4074 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1841 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1814 = (((cbLight._m0[_1822].x * 0.3183098733425140380859375) * _1840) * _1841) + _1795;
        _1816 = (((cbLight._m0[_1822].y * 0.3183098733425140380859375) * _1840) * _1841) + _1796;
        _1818 = (((cbLight._m0[_1822].z * 0.3183098733425140380859375) * _1840) * _1841) + _1797;
    }
    bool _1821 = _1801.y == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1821)
    {
        _1859 = _1814;
        _1861 = _1816;
        _1863 = _1818;
    }
    else
    {
        uint _2029 = _1730 + 7u;
        float _2045 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _4090 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2048 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1859 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _1814;
        _1861 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _1816;
        _1863 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _1818;
    }
    uint _1866 = _1730 + 8u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _562) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1730].x + _498;
    float _1882 = cbLight._m0[_1730].y + _499;
    float _1883 = cbLight._m0[_1730].z + _500;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1730].xyz));
    float _4106 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _1895 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _1896 = dot(vec3(_417, _418, _419), vec3(_1888, _1889, _1890));
    float _4128 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _1900 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1888, _1889, _1890));
    float _4139 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1904 = _1880 * _1880;
    float _1908 = ((_1899 * _1899) * (_1904 + (-1.0))) + 1.0;
    float _1916 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
    float _1917 = 0.959999978542327880859375 - _630;
    float _1919 = 0.959999978542327880859375 - _631;
    float _1920 = 0.959999978542327880859375 - _632;
    float _1927 = 1.0 - _1880;
    float _1938 = (0.5 / (((_1895 * ((_1894 * _1927) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _1927) + _1880) * _1894))) * _1894;
    float _4150 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1904 / ((_1908 * _1908) * 3.141590118408203125));
    uint _1951 = _1730 + 9u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1767].w)) * _562) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1767].x + _498;
    float _1965 = cbLight._m0[_1767].y + _499;
    float _1966 = cbLight._m0[_1767].z + _500;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1767].xyz));
    float _4161 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _1978 = dot(vec3(_417, _418, _419), vec3(_1971, _1972, _1973));
    float _4172 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _1982 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_1971, _1972, _1973));
    float _4183 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1986 = _1963 * _1963;
    float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
    float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2004 = 1.0 - _1963;
    float _2014 = (0.5 / (((_1895 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _2004) + _1963) * _1977))) * _1977;
    float _4194 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
    float _2026 = (((((_1997 * _1917) + _633) * cbLight._m0[_1951].x) * _2016) * _1753) + (((((_1916 * _1917) + _633) * cbLight._m0[_1866].x) * _1940) * _1763);
    float _2027 = (((((_1997 * _1919) + _635) * cbLight._m0[_1951].y) * _2016) * _1753) + (((((_1916 * _1919) + _635) * cbLight._m0[_1866].y) * _1940) * _1763);
    float _2028 = (((((_1997 * _1920) + _636) * cbLight._m0[_1951].z) * _2016) * _1753) + (((((_1916 * _1920) + _636) * cbLight._m0[_1866].z) * _1940) * _1763);
    float _2090;
    float _2092;
    float _2094;
    if (_1803)
    {
        _2090 = _2026;
        _2092 = _2027;
        _2094 = _2028;
    }
    else
    {
        uint _2096 = _1730 + 2u;
        uint _2100 = _1730 + 10u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _562) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _498;
        float _2117 = cbLight._m0[_2096].y + _499;
        float _2118 = cbLight._m0[_2096].z + _500;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2096].xyz));
        float _4205 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2130 = dot(vec3(_417, _418, _419), vec3(_2123, _2124, _2125));
        float _4216 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4227 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2156 = 1.0 - _2115;
        float _2166 = (0.5 / (((_1895 * ((_2129 * _2156) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _2156) + _2115) * _2129))) * _2129;
        float _4238 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2169 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2090 = (((((_2149 * _1917) + _633) * cbLight._m0[_2100].x) * _2168) * _2169) + _2026;
        _2092 = (((((_2149 * _1919) + _635) * cbLight._m0[_2100].y) * _2168) * _2169) + _2027;
        _2094 = (((((_2149 * _1920) + _636) * cbLight._m0[_2100].z) * _2168) * _2169) + _2028;
    }
    float _2204;
    float _2206;
    float _2208;
    if (_1821)
    {
        _2204 = _2090;
        _2206 = _2092;
        _2208 = _2094;
    }
    else
    {
        uint _2215 = _1730 + 3u;
        uint _2219 = _1730 + 11u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _562) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _498;
        float _2236 = cbLight._m0[_2215].y + _499;
        float _2237 = cbLight._m0[_2215].z + _500;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2215].xyz));
        float _4254 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2249 = dot(vec3(_417, _418, _419), vec3(_2242, _2243, _2244));
        float _4265 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4276 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2275 = 1.0 - _2234;
        float _2285 = (0.5 / (((_1895 * ((_2248 * _2275) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_1895 * _2275) + _2234) * _2248))) * _2248;
        float _4287 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2204 = (((((_2268 * _1917) + _633) * cbLight._m0[_2219].x) * _2287) * _2288) + _2090;
        _2206 = (((((_2268 * _1919) + _635) * cbLight._m0[_2219].y) * _2287) * _2288) + _2092;
        _2208 = (((((_2268 * _1920) + _636) * cbLight._m0[_2219].z) * _2287) * _2288) + _2094;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1728.y == 0u)
    {
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2363;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2363;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2363;
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.x;
        uint _2390 = uint((float(_2378.y) * floor(float(uint(cbSceneParam._m0[85u].y * _519) / _2379))) + floor(float(uint(cbSceneParam._m0[85u].x * _518) / _2379)));
        float _2400 = (log2(_2366 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2401 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        uint _2404 = uint(isnan(14.0) ? _2401 : (isnan(_2401) ? 14.0 : min(_2401, 14.0)));
        uvec4 _2409 = texelFetch(g_lightClusterGridBuffer, int(((_2404 << 2u) + (_2390 << 6u)) >> 2u));
        uint _2410 = _2409.x;
        uint _2411 = _2378.z;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((((1u << ((_2411 >> 4u) & 15u)) + 4294967295u) & _2410) == 0u) || ((_2411 & 240u) == 0u))
        {
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
        }
        else
        {
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2404 << 5u) + (_2390 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2733)
                {
                    frontier_phi_68_pred = _2719;
                    frontier_phi_68_pred_1 = _2722;
                    frontier_phi_68_pred_2 = _2721;
                    frontier_phi_68_pred_3 = _2720;
                    frontier_phi_68_pred_4 = _2718;
                    frontier_phi_68_pred_5 = _2717;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2732;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2723 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _2364;
                        float _2929 = _2888.y - _2365;
                        float _2930 = _2888.z - _2366;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_543, _546, _549), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4313 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2959 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2963 = (-0.0) - _2364;
                        float _2964 = (-0.0) - _2365;
                        float _2965 = (-0.0) - _2366;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2980 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2981 = 1.0 - _668;
                        float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                        float _2989 = _2988 * _2988;
                        float _2990 = _2989 * _2989;
                        float _2991 = _2970 + _2935;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _3001 = dot(vec3(_543, _546, _549), vec3(_2970, _2971, _2972));
                        float _4329 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3005 = dot(vec3(_543, _546, _549), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                        float _4340 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                        float _3013 = _2948 * _2989;
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _2938) + _3014;
                        float _4351 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3019 = 1.0 - _2989;
                        float _3029 = (0.5 / (((_3018 * ((_3004 * _3019) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3018 * _3019) + _2989) * _3004))) * _3018;
                        float _4362 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3040 = (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) / ((_3012 * _3012) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2792 = (_2959 * _2907.x) + _2865;
                        _2793 = (_2959 * _2907.y) + _2866;
                        _2794 = (_2959 * _2907.z) + _2867;
                        _2789 = (_3040 * _2924.x) + _2862;
                        _2790 = (_3040 * _2924.y) + _2863;
                        _2791 = (_3040 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_68_pred = _2791;
                    frontier_phi_68_pred_1 = _2794;
                    frontier_phi_68_pred_2 = _2793;
                    frontier_phi_68_pred_3 = _2792;
                    frontier_phi_68_pred_4 = _2790;
                    frontier_phi_68_pred_5 = _2789;
                }
                _2562 = frontier_phi_68_pred;
                _2568 = frontier_phi_68_pred_1;
                _2566 = frontier_phi_68_pred_2;
                _2564 = frontier_phi_68_pred_3;
                _2560 = frontier_phi_68_pred_4;
                _2558 = frontier_phi_68_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2558;
                    _2718 = _2560;
                    _2719 = _2562;
                    _2720 = _2564;
                    _2721 = _2566;
                    _2722 = _2568;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
        }
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.z;
        uint _2574 = (_2572 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2574) & _2410) == 0u)
        {
            _2685 = _2557;
            _2687 = _2559;
            _2689 = _2561;
            _2691 = _2563;
            _2693 = _2565;
            _2695 = _2567;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
            float _2711 = _2710 * _2364;
            float _2712 = _2710 * _2365;
            float _2713 = _2710 * _2366;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2574 < ((_2572 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2845 = _2557;
                float _2846 = _2559;
                float _2847 = _2561;
                float _2848 = _2563;
                float _2849 = _2565;
                float _2850 = _2567;
                uint _2851 = _2574;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2404 << 5u) + (_2390 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2861)
                    {
                        frontier_phi_79_pred = _2850;
                        frontier_phi_79_pred_1 = _2849;
                        frontier_phi_79_pred_2 = _2848;
                        frontier_phi_79_pred_3 = _2847;
                        frontier_phi_79_pred_4 = _2846;
                        frontier_phi_79_pred_5 = _2845;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        uint _3073 = _2860;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3159;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3084 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3084 * 40u) + 20u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3162 = (_3084 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3084 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_2366, _3194.z, fma(_2365, _3194.y, _3194.x * _2364)) + _3194.w;
                            _3207 = !((fma(_2366, _3175.z, fma(_2365, _3175.y, _3175.x * _2364)) + _3175.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3099.x - _2364;
                                float _3235 = _3099.y - _2365;
                                float _3236 = _3099.z - _2366;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3100 * _3100));
                                float _4373 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3252 = sqrt(_3237) * _3115.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_543, _546, _549))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_2366, _3143.z, fma(_2365, _3143.y, _3143.x * _2364)) + _3143.w) / _3206;
                                float _3266 = (fma(_2366, _3159.z, fma(_2365, _3159.y, _3159.x * _2364)) + _3159.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4389 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _668;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2711;
                                float _3296 = _3242 - _2712;
                                float _3297 = _3243 - _2713;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_543, _546, _549), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4400 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3309 = dot(vec3(_543, _546, _549), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4411 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_543, _546, _549), vec3(_3241, _3242, _3243))) + _3318;
                                float _4422 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4433 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3272 * _3115.z;
                                frontier_phi_85_pred_1 = _3272 * _3115.y;
                                frontier_phi_85_pred_2 = _3272 * _3115.x;
                                frontier_phi_85_pred_3 = _3346 * _3127.z;
                                frontier_phi_85_pred_4 = _3346 * _3127.y;
                                frontier_phi_85_pred_5 = _3346 * _3127.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_85_pred;
                            _3354 = frontier_phi_85_pred_1;
                            _3353 = frontier_phi_85_pred_2;
                            _3352 = frontier_phi_85_pred_3;
                            _3351 = frontier_phi_85_pred_4;
                            _3350 = frontier_phi_85_pred_5;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3059;
                        frontier_phi_79_pred_1 = _3058;
                        frontier_phi_79_pred_2 = _3057;
                        frontier_phi_79_pred_3 = _3056;
                        frontier_phi_79_pred_4 = _3055;
                        frontier_phi_79_pred_5 = _3054;
                    }
                    _2696 = frontier_phi_79_pred;
                    _2694 = frontier_phi_79_pred_1;
                    _2692 = frontier_phi_79_pred_2;
                    _2690 = frontier_phi_79_pred_3;
                    _2688 = frontier_phi_79_pred_4;
                    _2686 = frontier_phi_79_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2686;
                        _2846 = _2688;
                        _2847 = _2690;
                        _2848 = _2692;
                        _2849 = _2694;
                        _2850 = _2696;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2692;
                frontier_phi_60_61_ladder_1 = _2696;
                frontier_phi_60_61_ladder_2 = _2694;
                frontier_phi_60_61_ladder_3 = _2690;
                frontier_phi_60_61_ladder_4 = _2688;
                frontier_phi_60_61_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_60_61_ladder = _2563;
                frontier_phi_60_61_ladder_1 = _2567;
                frontier_phi_60_61_ladder_2 = _2565;
                frontier_phi_60_61_ladder_3 = _2561;
                frontier_phi_60_61_ladder_4 = _2559;
                frontier_phi_60_61_ladder_5 = _2557;
            }
            _2685 = frontier_phi_60_61_ladder_5;
            _2687 = frontier_phi_60_61_ladder_4;
            _2689 = frontier_phi_60_61_ladder_3;
            _2691 = frontier_phi_60_61_ladder;
            _2693 = frontier_phi_60_61_ladder_2;
            _2695 = frontier_phi_60_61_ladder_1;
        }
        float _2700 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2422 = (_2700 * _2691) + _1859;
        _2424 = (_2700 * _2693) + _1861;
        _2426 = (_2700 * _2695) + _1863;
        _2428 = ((_2685 * _633) * _2700) + _2204;
        _2430 = ((_2687 * _635) * _2700) + _2206;
        _2432 = ((_2689 * _636) * _2700) + _2208;
    }
    else
    {
        _2422 = _1859;
        _2424 = _1861;
        _2426 = _1863;
        _2428 = _2204;
        _2430 = _2206;
        _2432 = _2208;
    }
    uint _2438 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _2444 = (_343.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2438].x;
    float _2445 = (_343.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2438].y;
    float _2446 = (_343.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2438].z;
    float _4449 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4460 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4471 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4482 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _2452 = 0.959999978542327880859375 - (_606 * 0.959999978542327880859375);
    float _2460 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2422 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _647));
    float _2461 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2424 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _647));
    float _2462 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2426 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _647));
    float _2466 = _2452 - (exp2(log2(1.0 - _662) * 5.0) * _2452);
    float _2478 = ((_2460 + ((_2428 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1493)) * cbPerFrame._m0[3u].x)) + _2444) + ((((cbSceneParam._m0[72u].w * _382.x) * _2466) - _2460) * _412);
    float _2481 = ((_2445 + ((_2430 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1493)) * cbPerFrame._m0[3u].x)) + _2461) + ((((cbSceneParam._m0[72u].w * _382.y) * _2466) - _2461) * _412);
    float _2484 = ((_2446 + ((_2432 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1493)) * cbPerFrame._m0[3u].x)) + _2462) + ((((cbSceneParam._m0[72u].w * _382.z) * _2466) - _2462) * _412);
    float _2485 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2486 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2487 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2493 = cbMtdParam._m0[2u].x * _2444;
    float _2494 = cbMtdParam._m0[2u].y * _2445;
    float _2495 = cbMtdParam._m0[2u].z * _2446;
    float _4508 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2497 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2502 = cbInstanceData._m0[_575 + 6u].w * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)));
    float _2507 = _518 / cbSceneParam._m0[86u].x;
    float _2508 = _519 / cbSceneParam._m0[86u].y;
    vec4 _2522 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, (log2((isnan(cbSceneParam._m0[77u].w) ? _441 : (isnan(_441) ? cbSceneParam._m0[77u].w : min(_441, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2524 = _2522.x;
    float _2525 = _2522.y;
    float _2526 = _2522.z;
    float _2527 = _2522.w;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_441 > cbSceneParam._m0[78u].w)
    {
        float _2582 = isnan(_441) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _441 : min(cbSceneParam._m0[80u].w, _441));
        float _2583 = _2582 / _441;
        float _2594 = _2583 * _491;
        float _2595 = _492 * _2583;
        float _2596 = (-0.0) - _2595;
        float _2597 = _2583 * _493;
        float _2599 = (cbSceneParam._m0[77u].w * _2596) / _2582;
        float _2600 = _2599 + cbSceneParam._m0[79u].w;
        float _2601 = cbSceneParam._m0[79u].w - _2595;
        float _2607 = sqrt(((_2594 * _2594) + (_2595 * _2595)) + (_2597 * _2597));
        float _2610 = (1.0 - (cbSceneParam._m0[77u].w / _2582)) * _2607;
        float _2615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2596 - _2599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2600 > 0.0) ? exp2(_2615 * _2600) : (2.0 - exp2(_2617 * _2600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2610;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : max(_2600, _2601));
            float _2748 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : min(_2600, _2601));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2802 = ((abs(_2607 / _2596) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2615 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2615 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2617 * _2757) - exp2(_2617 * _2758)) * _2746))) + (_2610 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2527);
        _2619 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2524;
        _2621 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2525;
        _2623 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2526;
        _2625 = _2813 * _2527;
    }
    else
    {
        _2619 = _2524;
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
    }
    bool _2840;
    vec4 _2634;
    vec4 _2656;
    float _2658;
    float _2662;
    float _2663;
    float _2664;
    float _2667;
    float _2670;
    float _2673;
    float _2674;
    bool _2684;
    for (;;)
    {
        _2634 = cbMatDynParam._m0[0u];
        float _2636 = roundEven(_2634.y);
        bool _2637 = _2636 == 3.0;
        float _2638 = log2(_2625);
        float _2642 = exp2(_2638 * cbSceneParam._m0[78u].x);
        float _2643 = exp2(_2638 * cbSceneParam._m0[78u].y);
        float _2644 = exp2(_2638 * cbSceneParam._m0[78u].z);
        float _2645 = _2642 * _2485;
        float _2646 = _2643 * _2486;
        float _2647 = _2644 * _2487;
        float _2654 = _507 + (-0.5);
        _2656 = cbMtdParam._m0[1u];
        _2658 = _2656.y * _2654;
        float _2661 = (_2636 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2662 = _2661 * (_2637 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
        _2663 = _2661 * (_2637 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
        _2664 = _2661 * (_2637 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2623)));
        _2667 = ((_2493 * _2497) * _2642) * _2661;
        _2670 = ((_2494 * _2497) * _2643) * _2661;
        _2673 = ((_2495 * _2497) * _2644) * _2661;
        _2674 = _2654 * 0.999000012874603271484375;
        _2684 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2684)
        {
            if ((cbInstanceData._m0[_575 + 7u].x + _2674) < 0.5)
            {
                _2840 = true;
                break;
            }
        }
        uint _2781 = _577 + uint(_2634.w);
        if ((cbInstanceData._m0[_2781].w < 1.0) && ((cbInstanceData._m0[_2781].w + _2674) < 0.5))
        {
            _2840 = true;
            break;
        }
        if ((_2658 + _256) < _2656.x)
        {
            _2840 = true;
            break;
        }
        _2840 = false;
        break;
    }
    float _3045;
    if (_2840)
    {
        discard_state = true;
        _3045 = 0.0;
    }
    else
    {
        _3045 = _2502;
    }
    SV_Target.x = _2662;
    SV_Target.y = _2663;
    SV_Target.z = _2664;
    SV_Target.w = _3045;
    SV_Target_1.x = _2667;
    SV_Target_1.y = _2670;
    SV_Target_1.z = _2673;
    SV_Target_1.w = _2502;
    discard_exit();
}


