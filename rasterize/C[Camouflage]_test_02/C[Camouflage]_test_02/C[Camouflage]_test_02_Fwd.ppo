#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1004;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    float _253 = _246.x * cbMtdParam._m0[9u].x;
    float _254 = _246.y * cbMtdParam._m0[9u].y;
    float _255 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _274 = _271.x + cbMtdParam._m0[11u].z;
    vec4 _287 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _295 = (_287.x * 2.0) + (-1.0);
    float _297 = (_287.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3394 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))));
    float _307 = fma(_304, _224, fma(_297, _216 * TANGENT.x, (_202 * _194) * _295));
    float _310 = fma(_304, _225, fma(_297, _216 * TANGENT.y, (_202 * _195) * _295));
    float _313 = fma(_304, _226, fma(_297, _216 * TANGENT.z, (_202 * _196) * _295));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _321 = _287.z + cbMtdParam._m0[11u].w;
    vec4 _339 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _355 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _356 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _364 = (_355 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _318);
    float _365 = (_356 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _319);
    float _373 = isnan(cbInstanceData._m0[8u].x) ? _364 : (isnan(_364) ? cbInstanceData._m0[8u].x : max(_364, cbInstanceData._m0[8u].x));
    float _374 = isnan(cbInstanceData._m0[8u].y) ? _365 : (isnan(_365) ? cbInstanceData._m0[8u].y : max(_365, cbInstanceData._m0[8u].y));
    vec4 _378 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _373 : (isnan(_373) ? cbInstanceData._m0[8u].z : min(_373, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _374 : (isnan(_374) ? cbInstanceData._m0[8u].w : min(_374, cbInstanceData._m0[8u].w))));
    vec4 _403 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _406 = _403.x + cbMtdParam._m0[11u].x;
    float _407 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _408 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
    float _412 = inversesqrt(dot(vec3(_318, _319, _320), vec3(_318, _319, _320)));
    float _413 = _412 * _318;
    float _414 = _412 * _319;
    float _415 = _412 * _320;
    float _3435 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _416 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _417 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3468 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3479 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3490 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _421 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _487 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _489 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
    float _494 = _487 * _493;
    float _495 = _488 * _493;
    float _496 = _489 * _493;
    vec4 _498 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _500 = _498.w;
    float _521 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _524 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _527 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    vec4 _529 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _540 = (((_529.y - _417) + (_529.w * _417)) * cbMtdParam._m0[3u].x) + _417;
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = _553 + 9u;
    uint _556 = _555 + uint(cbMatDynParam._m0[0u].w);
    float _562 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_556].x;
    float _563 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_556].y;
    float _564 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_556].z;
    float _3501 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    vec4 _568 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _573 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _584 = (((_573.x - _421) + (_573.w * _421)) * cbMtdParam._m0[3u].x) + _421;
    float _597 = (cbMtdParam._m0[3u].x * (((_565 * _500) - _565) + _568.x)) + _565;
    float _598 = (cbMtdParam._m0[3u].x * (((_566 * _500) - _566) + _568.y)) + _566;
    float _599 = (cbMtdParam._m0[3u].x * (((_567 * _500) - _567) + _568.z)) + _567;
    float _600 = 1.0 - _584;
    float _601 = _600 * _597;
    float _602 = _600 * _598;
    float _603 = _600 * _599;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _584;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _584;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _584;
    float _611 = _608 + 0.039999999105930328369140625;
    float _613 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _355, cbSceneParam._m0[86u].y * _356));
    float _625 = _622.x * TEXCOORD_4;
    float _626 = dot(vec3(_413, _414, _415), vec3(_494, _495, _496));
    float _629 = _626 * 2.0;
    float _633 = (_629 * _413) - _494;
    float _634 = (_629 * _414) - _495;
    float _635 = (_629 * _415) - _496;
    float _639 = abs(dot(vec3(_494, _495, _496), vec3(_413, _414, _415)));
    float _3534 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _646 = sqrt(_540);
    float _658 = exp2((_646 * 5.0) * log2(1.0 - (_640 * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _664 = (1.0 - _658) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _665 = _658 * _646;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _732 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _736 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _761 = _693 + _413;
        float _762 = _697 + _414;
        float _763 = _701 + _415;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _728;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _732;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _736;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_413, _414, _415), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3582 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_413, _414, _415), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3615 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_413, _414, _415), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3648 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1044 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1048 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1052 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1075 = _693 + _413;
        float _1076 = _697 + _414;
        float _1077 = _701 + _415;
        float _1087 = fma(_1077, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075)) - _1044;
        float _1088 = fma(_1077, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075)) - _1048;
        float _1089 = fma(_1077, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075)) - _1052;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1044 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1048 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[35u].z) + ((((((_1052 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1143 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1110.x + (-0.5));
        float _1145 = _1143 * (_1110.y + (-0.5));
        float _1146 = _1143 * (_1110.z + (-0.5));
        float _1153 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1117.x + (-0.5));
        float _1155 = _1153 * (_1117.y + (-0.5));
        float _1156 = _1153 * (_1117.z + (-0.5));
        float _1163 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1124.x + (-0.5));
        float _1165 = _1163 * (_1124.y + (-0.5));
        float _1166 = _1163 * (_1124.z + (-0.5));
        float _1173 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1131.x + (-0.5));
        float _1175 = _1173 * (_1131.y + (-0.5));
        float _1176 = _1173 * (_1131.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_413, _414, _415), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3711 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1207 + 1.0))) + _1212) * _1177;
        float _1222 = _1145 * 0.5;
        float _1223 = _1155 * 0.5;
        float _1224 = _1165 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_413, _414, _415), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3744 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1249 + 1.0))) + _1254) * _1178;
        float _1264 = _1146 * 0.5;
        float _1265 = _1156 * 0.5;
        float _1266 = _1166 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_413, _414, _415), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3777 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1291 + 1.0))) + _1296) * _1179;
        _1313 = _1146;
        _1314 = _1145;
        _1315 = _1144;
        _1316 = _1156;
        _1317 = _1155;
        _1318 = _1154;
        _1319 = _1166;
        _1320 = _1165;
        _1321 = _1164;
        _1322 = _1179;
        _1323 = _1178;
        _1324 = _1177;
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1004;
        _1314 = _1004;
        _1315 = _1004;
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1337));
    float _1381 = _633 * 0.5;
    float _1382 = _634 * 0.5;
    float _1383 = _635 * 0.5;
    float _1384 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1387 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1390 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1424;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1397 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1401 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1405 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1412 = dot(vec4(cbModelParam._m0[39u]), vec4(_1381, _1382, _1383, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1435;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1426 = dot(vec4(cbModelParam._m0[40u]), vec4(_1381, _1382, _1383, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1439 = (_1435 * cbModelParam._m0[1u].x) + (_1424 * (1.0 - cbModelParam._m0[1u].x));
    float _1449 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _540);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1449 : min(cbModelParam._m0[25u].z, _1449));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_635, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633));
        float _1513 = fma(_635, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633));
        float _1516 = fma(_635, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1544 = frontier_phi_16_14_ladder;
        }
        float _1750;
        if (_1513 > 0.0)
        {
            _1750 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1750 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1516 > 0.0)
        {
            _2004 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_37_32_ladder;
        }
        float _2006 = isnan(_1750) ? _1544 : (isnan(_1544) ? _1750 : min(_1544, _1750));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1510) + _1499;
        float _2012 = (_2007 * _1513) + _1503;
        float _2013 = (_2007 * _1516) + _1507;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2016 = (-1.0) - _2014;
        float _2018 = _2014 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2013 > _2018) || ((_2013 < _2016) || ((_2012 > _2018) || ((_2012 < _2016) || ((_2011 < _2016) || (_2011 > _2018))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1450);
            frontier_phi_15_37_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_15_37_ladder_2;
        _1534 = frontier_phi_15_37_ladder_1;
        _1536 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_633, _634, _635), _1450);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _540);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_635, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633));
        float _1612 = fma(_635, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633));
        float _1615 = fma(_635, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633));
        float _1755;
        if (_1609 > 0.0)
        {
            _1755 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1755 = frontier_phi_27_23_ladder;
        }
        float _2031;
        if (_1612 > 0.0)
        {
            _2031 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2031 = frontier_phi_39_34_ladder;
        }
        float _2244;
        if (_1615 > 0.0)
        {
            _2244 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2244 = frontier_phi_48_45_ladder;
        }
        float _2246 = isnan(_2031) ? _1755 : (isnan(_1755) ? _2031 : min(_1755, _2031));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1609) + _1598;
        float _2252 = (_2247 * _1612) + _1602;
        float _2253 = (_2247 * _1615) + _1606;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2254;
        float _2257 = _2254 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2253 > _2257) || ((_2253 < _2255) || ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 < _2255) || (_2251 > _2257))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2253, cbModelParam._m0[17u].z, fma(_2252, cbModelParam._m0[17u].y, _2251 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2253, cbModelParam._m0[18u].z, fma(_2252, cbModelParam._m0[18u].y, _2251 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2253, cbModelParam._m0[19u].z, fma(_2252, cbModelParam._m0[19u].y, _2251 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_24_48_ladder = _2498.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2498.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2498.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_24_48_ladder_2;
        _1636 = frontier_phi_24_48_ladder_1;
        _1638 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_633, _634, _635), _1541);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1651 = (((_664 * _611) + _665) * _625) * ((cbModelParam._m0[1u].w * (_1634 - _1532)) + _1532);
    float _1653 = (((_664 * _613) + _665) * _625) * ((cbModelParam._m0[1u].w * (_1636 - _1534)) + _1534);
    float _1655 = (((_664 * _614) + _665) * _625) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1658 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    uvec4 _1674 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1676 = _1674.x * 14u;
    uint _1677 = _1676 + 13u;
    float _1684 = _625 + (-1.0);
    float _1689 = (cbLight._m0[_1677].x * _1684) + 1.0;
    float _1690 = (cbLight._m0[_1677].y * _1684) + 1.0;
    float _1691 = (cbLight._m0[_1677].z * _1684) + 1.0;
    float _1692 = (cbLight._m0[_1677].w * _1684) + 1.0;
    uint _1693 = _1676 + 5u;
    float _1699 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1703 = _1676 + 4u;
    float _1709 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
    uint _1713 = _1676 | 1u;
    float _1724 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_413, _414, _415));
    float _1727 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_413, _414, _415));
    float _3913 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _3924 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1732 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1734 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1741 = ((cbLight._m0[_1693].x * _1699) * _1734) + ((cbLight._m0[_1703].x * _1709) * _1732);
    float _1742 = ((_1699 * cbLight._m0[_1693].y) * _1734) + ((_1709 * cbLight._m0[_1703].y) * _1732);
    float _1743 = ((_1699 * cbLight._m0[_1693].z) * _1734) + ((_1709 * cbLight._m0[_1703].z) * _1732);
    uvec4 _1747 = floatBitsToUint(cbLight._m0[_1676 + 12u]);
    bool _1749 = _1747.x == 0u;
    float _1760;
    float _1762;
    float _1764;
    if (_1749)
    {
        _1760 = _1741;
        _1762 = _1742;
        _1764 = _1743;
    }
    else
    {
        uint _1768 = _1676 + 6u;
        float _1784 = (dot(vec3(cbLight._m0[_1676 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1785 = _1784 * _1784;
        float _3935 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1787 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _1760 = (((cbLight._m0[_1768].x * 0.3183098733425140380859375) * _1786) * _1787) + _1741;
        _1762 = (((cbLight._m0[_1768].y * 0.3183098733425140380859375) * _1786) * _1787) + _1742;
        _1764 = (((cbLight._m0[_1768].z * 0.3183098733425140380859375) * _1786) * _1787) + _1743;
    }
    bool _1767 = _1747.y == 0u;
    float _1805;
    float _1807;
    float _1809;
    if (_1767)
    {
        _1805 = _1760;
        _1807 = _1762;
        _1809 = _1764;
    }
    else
    {
        uint _1975 = _1676 + 7u;
        float _1991 = (dot(vec3(cbLight._m0[_1676 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _3951 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1994 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _1805 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1760;
        _1807 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1762;
        _1809 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1764;
    }
    uint _1812 = _1676 + 8u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _540) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1676].x + _494;
    float _1828 = cbLight._m0[_1676].y + _495;
    float _1829 = cbLight._m0[_1676].z + _496;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1676].xyz));
    float _3967 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _1841 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1842 = dot(vec3(_413, _414, _415), vec3(_1834, _1835, _1836));
    float _3989 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1834, _1835, _1836));
    float _4000 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1826 * _1826;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1862 = exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0);
    float _1863 = 0.959999978542327880859375 - _608;
    float _1865 = 0.959999978542327880859375 - _609;
    float _1866 = 0.959999978542327880859375 - _610;
    float _1873 = 1.0 - _1826;
    float _1884 = (0.5 / (((_1841 * ((_1840 * _1873) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1873) + _1826) * _1840))) * _1840;
    float _4011 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1886 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    uint _1897 = _1676 + 9u;
    float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _540) * 0.949999988079071044921875);
    float _1909 = _1908 * _1908;
    float _1910 = cbLight._m0[_1713].x + _494;
    float _1911 = cbLight._m0[_1713].y + _495;
    float _1912 = cbLight._m0[_1713].z + _496;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1917 = _1916 * _1910;
    float _1918 = _1916 * _1911;
    float _1919 = _1916 * _1912;
    float _1920 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1713].xyz));
    float _4022 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1924 = dot(vec3(_413, _414, _415), vec3(_1917, _1918, _1919));
    float _4033 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1917, _1918, _1919));
    float _4044 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1909 * _1909;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1943 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
    float _1950 = 1.0 - _1909;
    float _1960 = (0.5 / (((_1841 * ((_1923 * _1950) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1950) + _1909) * _1923))) * _1923;
    float _4055 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    float _1972 = (((((_1943 * _1863) + _611) * cbLight._m0[_1897].x) * _1962) * _1699) + (((((_1862 * _1863) + _611) * cbLight._m0[_1812].x) * _1886) * _1709);
    float _1973 = (((((_1943 * _1865) + _613) * cbLight._m0[_1897].y) * _1962) * _1699) + (((((_1862 * _1865) + _613) * cbLight._m0[_1812].y) * _1886) * _1709);
    float _1974 = (((((_1943 * _1866) + _614) * cbLight._m0[_1897].z) * _1962) * _1699) + (((((_1862 * _1866) + _614) * cbLight._m0[_1812].z) * _1886) * _1709);
    float _2036;
    float _2038;
    float _2040;
    if (_1749)
    {
        _2036 = _1972;
        _2038 = _1973;
        _2040 = _1974;
    }
    else
    {
        uint _2042 = _1676 + 2u;
        uint _2046 = _1676 + 10u;
        float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _540) * 0.949999988079071044921875);
        float _2061 = _2060 * _2060;
        float _2062 = cbLight._m0[_2042].x + _494;
        float _2063 = cbLight._m0[_2042].y + _495;
        float _2064 = cbLight._m0[_2042].z + _496;
        float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
        float _2069 = _2068 * _2062;
        float _2070 = _2068 * _2063;
        float _2071 = _2068 * _2064;
        float _2072 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2042].xyz));
        float _4066 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2076 = dot(vec3(_413, _414, _415), vec3(_2069, _2070, _2071));
        float _4077 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2080 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2069, _2070, _2071));
        float _4088 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2084 = _2061 * _2061;
        float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
        float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
        float _2102 = 1.0 - _2061;
        float _2112 = (0.5 / (((_1841 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _2102) + _2061) * _2075))) * _2075;
        float _4099 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
        _2036 = (((((_2095 * _1863) + _611) * cbLight._m0[_2046].x) * _2114) * _2115) + _1972;
        _2038 = (((((_2095 * _1865) + _613) * cbLight._m0[_2046].y) * _2114) * _2115) + _1973;
        _2040 = (((((_2095 * _1866) + _614) * cbLight._m0[_2046].z) * _2114) * _2115) + _1974;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1767)
    {
        _2150 = _2036;
        _2152 = _2038;
        _2154 = _2040;
    }
    else
    {
        uint _2161 = _1676 + 3u;
        uint _2165 = _1676 + 11u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _540) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _494;
        float _2182 = cbLight._m0[_2161].y + _495;
        float _2183 = cbLight._m0[_2161].z + _496;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2161].xyz));
        float _4115 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2195 = dot(vec3(_413, _414, _415), vec3(_2188, _2189, _2190));
        float _4126 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4137 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
        float _2221 = 1.0 - _2180;
        float _2231 = (0.5 / (((_1841 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _2221) + _2180) * _2194))) * _2194;
        float _4148 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2233 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2234 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _2150 = (((((_2214 * _1863) + _611) * cbLight._m0[_2165].x) * _2233) * _2234) + _2036;
        _2152 = (((((_2214 * _1865) + _613) * cbLight._m0[_2165].y) * _2233) * _2234) + _2038;
        _2154 = (((((_2214 * _1866) + _614) * cbLight._m0[_2165].z) * _2233) * _2234) + _2040;
    }
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_1674.y == 0u)
    {
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2309;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2309;
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2309;
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.x;
        uint _2336 = uint((float(_2324.y) * floor(float(uint(cbSceneParam._m0[85u].y * _356) / _2325))) + floor(float(uint(cbSceneParam._m0[85u].x * _355) / _2325)));
        float _2346 = (log2(_2312 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2347 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        uint _2350 = uint(isnan(14.0) ? _2347 : (isnan(_2347) ? 14.0 : min(_2347, 14.0)));
        uvec4 _2355 = texelFetch(g_lightClusterGridBuffer, int(((_2350 << 2u) + (_2336 << 6u)) >> 2u));
        uint _2356 = _2355.x;
        uint _2357 = _2324.z;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((((1u << ((_2357 >> 4u) & 15u)) + 4294967295u) & _2356) == 0u) || ((_2357 & 240u) == 0u))
        {
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
        }
        else
        {
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2671)
                {
                    frontier_phi_63_pred = _2660;
                    frontier_phi_63_pred_1 = _2659;
                    frontier_phi_63_pred_2 = _2658;
                    frontier_phi_63_pred_3 = _2657;
                    frontier_phi_63_pred_4 = _2656;
                    frontier_phi_63_pred_5 = _2655;
                }
                else
                {
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    uint _2785;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2670;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    for (;;)
                    {
                        uint _2789 = uint(findLSB(_2785)) + (_2661 << 5u);
                        uint _2786 = (_2785 + 4294967295u) & _2785;
                        uint _2791 = _2789 * 48u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2811 = (_2789 * 48u) + 4u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2830 = (_2789 * 48u) + 8u;
                        vec3 _2841 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x));
                        float _2845 = _2805.x - _2310;
                        float _2846 = _2805.y - _2311;
                        float _2847 = _2805.z - _2312;
                        float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                        float _2851 = inversesqrt(_2848);
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2855 = dot(vec3(_521, _524, _527), vec3(_2852, _2853, _2854));
                        float _2860 = 1.0 - (_2848 * _2805.w);
                        float _4174 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2862 = sqrt(_2848) * _2824.w;
                        float _2865 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2855) + _2866;
                        float _2872 = _2862 * _2862;
                        float _2876 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2861) / ((_2872 * 0.699999988079071044921875) + 1.0);
                        float _2880 = (-0.0) - _2310;
                        float _2881 = (-0.0) - _2311;
                        float _2882 = (-0.0) - _2312;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2897 = exp2(log2(1.0 / ((_2872 * 3.5) + 5.0)) * 0.25);
                        float _2898 = 1.0 - _646;
                        float _2905 = sqrt(1.0 - ((1.0 - (_2898 * _2898)) * (1.0 - (_2897 * _2897))));
                        float _2906 = _2905 * _2905;
                        float _2907 = _2906 * _2906;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2918 = dot(vec3(_521, _524, _527), vec3(_2887, _2888, _2889));
                        float _4190 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2922 = dot(vec3(_521, _524, _527), vec3(_2914 * _2908, _2914 * _2909, _2914 * _2910));
                        float _4201 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2925 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2929 = ((_2925 * _2925) * (_2907 + (-1.0))) + 1.0;
                        float _2930 = _2865 * _2906;
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2855) + _2931;
                        float _4212 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2936 = 1.0 - _2906;
                        float _2946 = (0.5 / (((_2935 * ((_2921 * _2936) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2935 * _2936) + _2906) * _2921))) * _2935;
                        float _4223 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2957 = (((_2907 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2929 * _2929) * ((_2872 * 2.1991131305694580078125) + 3.141590118408203125))) * _2861;
                        _2714 = (_2876 * _2824.x) + _2782;
                        _2715 = (_2876 * _2824.y) + _2783;
                        _2716 = (_2876 * _2824.z) + _2784;
                        _2711 = (_2957 * _2841.x) + _2779;
                        _2712 = (_2957 * _2841.y) + _2780;
                        _2713 = (_2957 * _2841.z) + _2781;
                        if (_2786 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2786;
                        }
                    }
                    frontier_phi_63_pred = _2716;
                    frontier_phi_63_pred_1 = _2715;
                    frontier_phi_63_pred_2 = _2714;
                    frontier_phi_63_pred_3 = _2713;
                    frontier_phi_63_pred_4 = _2712;
                    frontier_phi_63_pred_5 = _2711;
                }
                _2514 = frontier_phi_63_pred;
                _2512 = frontier_phi_63_pred_1;
                _2510 = frontier_phi_63_pred_2;
                _2508 = frontier_phi_63_pred_3;
                _2506 = frontier_phi_63_pred_4;
                _2504 = frontier_phi_63_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2504;
                    _2656 = _2506;
                    _2657 = _2508;
                    _2658 = _2510;
                    _2659 = _2512;
                    _2660 = _2514;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
        }
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.z;
        uint _2520 = (_2518 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2520) & _2356) == 0u)
        {
            _2623 = _2503;
            _2625 = _2505;
            _2627 = _2507;
            _2629 = _2509;
            _2631 = _2511;
            _2633 = _2513;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
            float _2649 = _2648 * _2310;
            float _2650 = _2648 * _2311;
            float _2651 = _2648 * _2312;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2520 < ((_2518 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2762 = _2503;
                float _2763 = _2505;
                float _2764 = _2507;
                float _2765 = _2509;
                float _2766 = _2511;
                float _2767 = _2513;
                uint _2768 = _2520;
                uint _2777;
                bool _2778;
                for (;;)
                {
                    _2777 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                    _2778 = _2777 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2778)
                    {
                        frontier_phi_69_pred = _2767;
                        frontier_phi_69_pred_1 = _2766;
                        frontier_phi_69_pred_2 = _2765;
                        frontier_phi_69_pred_3 = _2764;
                        frontier_phi_69_pred_4 = _2763;
                        frontier_phi_69_pred_5 = _2762;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        uint _2981 = _2777;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        vec3 _3035;
                        vec4 _3051;
                        vec4 _3067;
                        float _3114;
                        bool _3115;
                        for (;;)
                        {
                            uint _2992 = ((_2768 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2992 * 40u) + 8u;
                            _3035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x));
                            uint _3038 = (_2992 * 40u) + 16u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3054 = (_2992 * 40u) + 20u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_2992 * 40u) + 24u;
                            vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3089 = (_2992 * 40u) + 28u;
                            vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3114 = fma(_2312, _3102.z, fma(_2311, _3102.y, _3102.x * _2310)) + _3102.w;
                            _3115 = !((fma(_2312, _3083.z, fma(_2311, _3083.y, _3083.x * _2310)) + _3083.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3115)
                            {
                                float _3142 = _3007.x - _2310;
                                float _3143 = _3007.y - _2311;
                                float _3144 = _3007.z - _2312;
                                float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                                float _3148 = inversesqrt(_3145);
                                float _3149 = _3148 * _3142;
                                float _3150 = _3148 * _3143;
                                float _3151 = _3148 * _3144;
                                float _3155 = 1.0 - (_3145 / (_3008 * _3008));
                                float _4234 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3156 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3160 = sqrt(_3145) * _3023.w;
                                float _3162 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                                float _3163 = _3162 * _3162;
                                float _3166 = ((1.0 - _3163) * dot(vec3(_3149, _3150, _3151), vec3(_521, _524, _527))) + _3163;
                                float _3169 = _3160 * _3160;
                                float _3173 = (fma(_2312, _3051.z, fma(_2311, _3051.y, _3051.x * _2310)) + _3051.w) / _3114;
                                float _3174 = (fma(_2312, _3067.z, fma(_2311, _3067.y, _3067.x * _2310)) + _3067.w) / _3114;
                                float _3178 = 1.0 - dot(vec2(_3173, _3174), vec2(_3173, _3174));
                                float _4250 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3180 = _3179 * (((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3156) / ((_3169 * 0.699999988079071044921875) + 1.0));
                                float _3192 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                                float _3193 = 1.0 - _646;
                                float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                                float _3201 = _3200 * _3200;
                                float _3202 = _3201 * _3201;
                                float _3203 = _3149 - _2649;
                                float _3204 = _3150 - _2650;
                                float _3205 = _3151 - _2651;
                                float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                                float _3213 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4261 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3217 = dot(vec3(_521, _524, _527), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                                float _4272 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                                float _3225 = _3162 * _3201;
                                float _3226 = _3225 * _3225;
                                float _3232 = ((1.0 - _3226) * dot(vec3(_521, _524, _527), vec3(_3149, _3150, _3151))) + _3226;
                                float _4283 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3234 = 1.0 - _3201;
                                float _3244 = (0.5 / (((_3233 * ((_3216 * _3234) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3201) * _3216))) * _3233;
                                float _4294 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3254 = (_3179 * _3156) * (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3224 * _3224) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3180 * _3023.z;
                                frontier_phi_75_pred_1 = _3180 * _3023.y;
                                frontier_phi_75_pred_2 = _3180 * _3023.x;
                                frontier_phi_75_pred_3 = _3254 * _3035.z;
                                frontier_phi_75_pred_4 = _3254 * _3035.y;
                                frontier_phi_75_pred_5 = _3254 * _3035.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3263 = frontier_phi_75_pred;
                            _3262 = frontier_phi_75_pred_1;
                            _3261 = frontier_phi_75_pred_2;
                            _3260 = frontier_phi_75_pred_3;
                            _3259 = frontier_phi_75_pred_4;
                            _3258 = frontier_phi_75_pred_5;
                            _2965 = _3261 + _2978;
                            _2966 = _3262 + _2979;
                            _2967 = _3263 + _2980;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            _2964 = _3260 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2967;
                        frontier_phi_69_pred_1 = _2966;
                        frontier_phi_69_pred_2 = _2965;
                        frontier_phi_69_pred_3 = _2964;
                        frontier_phi_69_pred_4 = _2963;
                        frontier_phi_69_pred_5 = _2962;
                    }
                    _2634 = frontier_phi_69_pred;
                    _2632 = frontier_phi_69_pred_1;
                    _2630 = frontier_phi_69_pred_2;
                    _2628 = frontier_phi_69_pred_3;
                    _2626 = frontier_phi_69_pred_4;
                    _2624 = frontier_phi_69_pred_5;
                    uint _2769 = _2768 + 1u;
                    if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2762 = _2624;
                        _2763 = _2626;
                        _2764 = _2628;
                        _2765 = _2630;
                        _2766 = _2632;
                        _2767 = _2634;
                        _2768 = _2769;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2634;
                frontier_phi_57_58_ladder_1 = _2632;
                frontier_phi_57_58_ladder_2 = _2630;
                frontier_phi_57_58_ladder_3 = _2628;
                frontier_phi_57_58_ladder_4 = _2626;
                frontier_phi_57_58_ladder_5 = _2624;
            }
            else
            {
                frontier_phi_57_58_ladder = _2513;
                frontier_phi_57_58_ladder_1 = _2511;
                frontier_phi_57_58_ladder_2 = _2509;
                frontier_phi_57_58_ladder_3 = _2507;
                frontier_phi_57_58_ladder_4 = _2505;
                frontier_phi_57_58_ladder_5 = _2503;
            }
            _2623 = frontier_phi_57_58_ladder_5;
            _2625 = frontier_phi_57_58_ladder_4;
            _2627 = frontier_phi_57_58_ladder_3;
            _2629 = frontier_phi_57_58_ladder_2;
            _2631 = frontier_phi_57_58_ladder_1;
            _2633 = frontier_phi_57_58_ladder;
        }
        float _2638 = isnan(1.0) ? _625 : (isnan(_625) ? 1.0 : min(_625, 1.0));
        _2368 = (_2638 * _2629) + _1805;
        _2370 = (_2638 * _2631) + _1807;
        _2372 = (_2638 * _2633) + _1809;
        _2374 = ((_2623 * _611) * _2638) + _2150;
        _2376 = ((_2625 * _613) * _2638) + _2152;
        _2378 = ((_2627 * _614) * _2638) + _2154;
    }
    else
    {
        _2368 = _1805;
        _2370 = _1807;
        _2372 = _1809;
        _2374 = _2150;
        _2376 = _2152;
        _2378 = _2154;
    }
    uint _2384 = _555 + uint(cbMatDynParam._m0[0u].w);
    float _2390 = (_339.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2384].x;
    float _2391 = (_339.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2384].y;
    float _2392 = (_339.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2384].z;
    float _4310 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4321 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4332 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4343 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _2398 = 0.959999978542327880859375 - (_584 * 0.959999978542327880859375);
    float _2406 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2368 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _625));
    float _2407 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2370 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _625));
    float _2408 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2372 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _625));
    float _2412 = _2398 - (exp2(log2(1.0 - _640) * 5.0) * _2398);
    float _2424 = ((_2406 + ((_2374 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + _2390) + ((((cbSceneParam._m0[72u].w * _378.x) * _2412) - _2406) * _408);
    float _2427 = ((_2391 + ((_2376 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + _2407) + ((((cbSceneParam._m0[72u].w * _378.y) * _2412) - _2407) * _408);
    float _2430 = ((_2392 + ((_2378 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + _2408) + ((((cbSceneParam._m0[72u].w * _378.z) * _2412) - _2408) * _408);
    float _4369 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2443 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2448 = cbInstanceData._m0[_553 + 6u].w * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)));
    float _2453 = _355 / cbSceneParam._m0[86u].x;
    float _2454 = _356 / cbSceneParam._m0[86u].y;
    vec4 _2468 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2470 = _2468.x;
    float _2471 = _2468.y;
    float _2472 = _2468.z;
    float _2473 = _2468.w;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2528 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2529 = _2528 / _437;
        float _2540 = _2529 * _487;
        float _2541 = _488 * _2529;
        float _2542 = (-0.0) - _2541;
        float _2543 = _2529 * _489;
        float _2545 = (cbSceneParam._m0[77u].w * _2542) / _2528;
        float _2546 = _2545 + cbSceneParam._m0[79u].w;
        float _2547 = cbSceneParam._m0[79u].w - _2541;
        float _2553 = sqrt(((_2540 * _2540) + (_2541 * _2541)) + (_2543 * _2543));
        float _2556 = (1.0 - (cbSceneParam._m0[77u].w / _2528)) * _2553;
        float _2561 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2563 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2542 - _2545) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2546 > 0.0) ? exp2(_2561 * _2546) : (2.0 - exp2(_2563 * _2546))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2556;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : max(_2546, _2547));
            float _2686 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : min(_2546, _2547));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2724 = ((abs(_2553 / _2542) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2561 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2561 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2563 * _2695) - exp2(_2563 * _2696)) * _2684))) + (_2556 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2473);
        _2565 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2470;
        _2567 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2471;
        _2569 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2472;
        _2571 = _2735 * _2473;
    }
    else
    {
        _2565 = _2470;
        _2567 = _2471;
        _2569 = _2472;
        _2571 = _2473;
    }
    float _2582 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2583 = _2582 == 3.0;
    float _2584 = log2(_2571);
    float _2588 = exp2(_2584 * cbSceneParam._m0[78u].x);
    float _2589 = exp2(_2584 * cbSceneParam._m0[78u].y);
    float _2590 = exp2(_2584 * cbSceneParam._m0[78u].z);
    float _2591 = _2588 * (isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0)));
    float _2592 = _2589 * (isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0)));
    float _2593 = _2590 * (isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0)));
    float _2602 = (_2582 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2602 * (_2583 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.y = _2602 * (_2583 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.z = _2602 * (_2583 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.w = _2448;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2390) * _2443) * _2588) * _2602;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2391) * _2443) * _2589) * _2602;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2392) * _2443) * _2590) * _2602;
    SV_Target_1.w = _2448;
}


