#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1059;
float _3786;
float _3787;
float _3788;
float _3789;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _254 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _260 = _254.w;
    float _261 = _254.x * cbMtdParam._m0[9u].x;
    float _262 = _254.y * cbMtdParam._m0[9u].y;
    float _263 = _254.z * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _282 = _279.x + cbMtdParam._m0[11u].z;
    vec4 _295 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _303 = (_295.x * 2.0) + (-1.0);
    float _305 = (_295.y * 2.0) + (-1.0);
    float _306 = dot(vec2(_303, _305), vec2(_303, _305));
    float _3798 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))));
    float _315 = fma(_312, _232, fma(_305, _224 * TANGENT.x, (_210 * _202) * _303));
    float _318 = fma(_312, _233, fma(_305, _224 * TANGENT.y, (_210 * _203) * _303));
    float _321 = fma(_312, _234, fma(_305, _224 * TANGENT.z, (_210 * _204) * _303));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _329 = _295.z + cbMtdParam._m0[11u].w;
    vec4 _347 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _372 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _326);
    float _373 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _327);
    float _381 = isnan(cbInstanceData._m0[8u].x) ? _372 : (isnan(_372) ? cbInstanceData._m0[8u].x : max(_372, cbInstanceData._m0[8u].x));
    float _382 = isnan(cbInstanceData._m0[8u].y) ? _373 : (isnan(_373) ? cbInstanceData._m0[8u].y : max(_373, cbInstanceData._m0[8u].y));
    vec4 _386 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _381 : (isnan(_381) ? cbInstanceData._m0[8u].z : min(_381, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _382 : (isnan(_382) ? cbInstanceData._m0[8u].w : min(_382, cbInstanceData._m0[8u].w))));
    vec4 _411 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _414 = _411.x + cbMtdParam._m0[11u].x;
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    float _420 = inversesqrt(dot(vec3(_326, _327, _328), vec3(_326, _327, _328)));
    float _421 = _420 * _326;
    float _422 = _420 * _327;
    float _423 = _420 * _328;
    float _3839 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _424 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _425 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3872 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3883 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3894 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _429 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _445 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _495 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _485);
    float _496 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _485);
    float _497 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _485);
    float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
    float _502 = _495 * _501;
    float _503 = _496 * _501;
    float _504 = _497 * _501;
    vec4 _509 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _511 = _509.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _738 = sqrt(((_495 * _495) + (_496 * _496)) + (_497 * _497));
        float _744 = (cbMatDynParam._m0[5u].x * _738) + cbMatDynParam._m0[5u].y;
        float _3905 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _749 = (cbMatDynParam._m0[5u].z * _738) + cbMatDynParam._m0[5u].w;
        float _3916 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) - _745)) + _745) < ((_511 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _522 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _523 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _525 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _527 = _525.w;
    float _547 = fma(_423, cbSceneParam._m0[5u].z, fma(_422, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _421));
    float _550 = fma(_423, cbSceneParam._m0[6u].z, fma(_422, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _421));
    float _553 = fma(_423, cbSceneParam._m0[7u].z, fma(_422, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _421));
    vec4 _555 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _566 = (((_555.y - _425) + (_555.w * _425)) * cbMtdParam._m0[3u].x) + _425;
    uint _579 = uint(roundEven(NORMAL.w)) * 13u;
    uint _581 = _579 + 9u;
    uint _582 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3927 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    vec4 _594 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _599 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _610 = (((_599.x - _429) + (_599.w * _429)) * cbMtdParam._m0[3u].x) + _429;
    float _623 = (cbMtdParam._m0[3u].x * (((_591 * _527) - _591) + _594.x)) + _591;
    float _624 = (cbMtdParam._m0[3u].x * (((_592 * _527) - _592) + _594.y)) + _592;
    float _625 = (cbMtdParam._m0[3u].x * (((_593 * _527) - _593) + _594.z)) + _593;
    float _626 = 1.0 - _610;
    float _627 = _626 * _623;
    float _628 = _626 * _624;
    float _629 = _626 * _625;
    float _634 = (_623 + (-0.039999999105930328369140625)) * _610;
    float _635 = (_624 + (-0.039999999105930328369140625)) * _610;
    float _636 = (_625 + (-0.039999999105930328369140625)) * _610;
    float _637 = _634 + 0.039999999105930328369140625;
    float _639 = _635 + 0.039999999105930328369140625;
    float _640 = _636 + 0.039999999105930328369140625;
    vec4 _648 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _522, cbSceneParam._m0[86u].y * _523));
    float _651 = _648.x * TEXCOORD_4;
    float _652 = dot(vec3(_421, _422, _423), vec3(_502, _503, _504));
    float _655 = _652 * 2.0;
    float _659 = (_655 * _421) - _502;
    float _660 = (_655 * _422) - _503;
    float _661 = (_655 * _423) - _504;
    float _665 = abs(dot(vec3(_502, _503, _504), vec3(_421, _422, _423)));
    float _3960 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _672 = sqrt(_566);
    float _684 = exp2((_672 * 5.0) * log2(1.0 - (_666 * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _690 = (1.0 - _684) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _691 = _684 * _672;
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_727, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719));
        float _787 = fma(_727, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719));
        float _791 = fma(_727, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719));
        float _816 = _719 + _421;
        float _817 = _723 + _422;
        float _818 = _727 + _423;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_421, _422, _423), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _4008 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_421, _422, _423), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _4041 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_421, _422, _423), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _4074 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1102 = fma(_727, cbModelParam._m0[30u].z, fma(_723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _719));
        float _1106 = fma(_727, cbModelParam._m0[31u].z, fma(_723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _719));
        float _1110 = fma(_727, cbModelParam._m0[32u].z, fma(_723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _719));
        float _1133 = _719 + _421;
        float _1134 = _723 + _422;
        float _1135 = _727 + _423;
        float _1145 = fma(_1135, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1102 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1106 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[35u].z) + ((((((_1110 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1201 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1168.x + (-0.5));
        float _1203 = _1201 * (_1168.y + (-0.5));
        float _1204 = _1201 * (_1168.z + (-0.5));
        float _1211 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1175.x + (-0.5));
        float _1213 = _1211 * (_1175.y + (-0.5));
        float _1214 = _1211 * (_1175.z + (-0.5));
        float _1221 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1182.x + (-0.5));
        float _1223 = _1221 * (_1182.y + (-0.5));
        float _1224 = _1221 * (_1182.z + (-0.5));
        float _1231 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1189.x + (-0.5));
        float _1233 = _1231 * (_1189.y + (-0.5));
        float _1234 = _1231 * (_1189.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_421, _422, _423), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4137 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1265 + 1.0))) + _1270) * _1235;
        float _1280 = _1203 * 0.5;
        float _1281 = _1213 * 0.5;
        float _1282 = _1223 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_421, _422, _423), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4170 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1307 + 1.0))) + _1312) * _1236;
        float _1322 = _1204 * 0.5;
        float _1323 = _1214 * 0.5;
        float _1324 = _1224 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_421, _422, _423), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4203 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1349 + 1.0))) + _1354) * _1237;
        _1371 = _1204;
        _1372 = _1203;
        _1373 = _1202;
        _1374 = _1214;
        _1375 = _1213;
        _1376 = _1212;
        _1377 = _1224;
        _1378 = _1223;
        _1379 = _1222;
        _1380 = _1237;
        _1381 = _1236;
        _1382 = _1235;
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = _1059;
        _1380 = _1059;
        _1381 = _1059;
        _1382 = _1059;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1418 = fma(_1397, cbSceneParam._m0[89u].z, fma(_1396, cbSceneParam._m0[89u].y, _1395 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1397, cbSceneParam._m0[90u].z, fma(_1396, cbSceneParam._m0[90u].y, _1395 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1397, cbSceneParam._m0[91u].z, fma(_1396, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1395));
    float _1439 = _659 * 0.5;
    float _1440 = _660 * 0.5;
    float _1441 = _661 * 0.5;
    float _1442 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1445 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1448 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1482;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1455 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1459 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1463 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1470 = dot(vec4(cbModelParam._m0[39u]), vec4(_1439, _1440, _1441, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1493;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1484 = dot(vec4(cbModelParam._m0[40u]), vec4(_1439, _1440, _1441, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1497 = (_1493 * cbModelParam._m0[1u].x) + (_1482 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1507 : min(cbModelParam._m0[25u].z, _1507));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_727, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_727, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_727, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_661, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659));
        float _1571 = fma(_661, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659));
        float _1574 = fma(_661, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1602 = frontier_phi_19_17_ladder;
        }
        float _1777;
        if (_1571 > 0.0)
        {
            _1777 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1777 = frontier_phi_28_24_ladder;
        }
        float _2072;
        if (_1574 > 0.0)
        {
            _2072 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2072 = frontier_phi_40_35_ladder;
        }
        float _2074 = isnan(_1777) ? _1602 : (isnan(_1602) ? _1777 : min(_1602, _1777));
        float _2075 = isnan(_2072) ? _2074 : (isnan(_2074) ? _2072 : min(_2074, _2072));
        float _2079 = (_2075 * _1568) + _1557;
        float _2080 = (_2075 * _1571) + _1561;
        float _2081 = (_2075 * _1574) + _1565;
        float _2082 = _2075 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2082;
        float _2086 = _2082 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 > _2086) || ((_2080 < _2084) || ((_2079 < _2084) || (_2079 > _2086))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2081, cbModelParam._m0[9u].z, fma(_2080, cbModelParam._m0[9u].y, _2079 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2081, cbModelParam._m0[10u].z, fma(_2080, cbModelParam._m0[10u].y, _2079 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2081, cbModelParam._m0[11u].z, fma(_2080, cbModelParam._m0[11u].y, _2079 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_18_40_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_18_40_ladder_2;
        _1592 = frontier_phi_18_40_ladder_1;
        _1594 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_659, _660, _661), _1508);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_727, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_727, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_727, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_661, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659));
        float _1670 = fma(_661, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659));
        float _1673 = fma(_661, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659));
        float _1782;
        if (_1667 > 0.0)
        {
            _1782 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1782 = frontier_phi_30_26_ladder;
        }
        float _2099;
        if (_1670 > 0.0)
        {
            _2099 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2099 = frontier_phi_42_37_ladder;
        }
        float _2437;
        if (_1673 > 0.0)
        {
            _2437 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2437 = frontier_phi_52_49_ladder;
        }
        float _2439 = isnan(_2099) ? _1782 : (isnan(_1782) ? _2099 : min(_1782, _2099));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1667) + _1656;
        float _2445 = (_2440 * _1670) + _1660;
        float _2446 = (_2440 * _1673) + _1664;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_27_52_ladder = _2568.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2568.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2568.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_27_52_ladder_2;
        _1694 = frontier_phi_27_52_ladder_1;
        _1696 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_659, _660, _661), _1599);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_690 * _637) + _691) * _651) * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1711 = (((_690 * _639) + _691) * _651) * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1713 = (((_690 * _640) + _691) * _651) * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1769 = _1756 / _1768;
    float _1770 = _1760 / _1768;
    float _1771 = _1764 / _1768;
    float _1918;
    float _1919;
    float _1920;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1798 = ((uint(_1771 > cbSceneParam._m0[59u].y) + uint(_1771 > cbSceneParam._m0[59u].x)) + uint(_1771 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1799 = _1798 + 43u;
        uint _1807 = _1798 + 44u;
        uint _1815 = _1798 + 45u;
        uint _1823 = _1798 + 46u;
        float _1834 = fma(_1768, cbSceneParam._m0[_1799].w, fma(_1764, cbSceneParam._m0[_1799].z, fma(_1760, cbSceneParam._m0[_1799].y, _1756 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1768, cbSceneParam._m0[_1807].w, fma(_1764, cbSceneParam._m0[_1807].z, fma(_1760, cbSceneParam._m0[_1807].y, _1756 * cbSceneParam._m0[_1807].x)));
        float _1846 = fma(_1768, cbSceneParam._m0[_1823].w, fma(_1764, cbSceneParam._m0[_1823].z, fma(_1760, cbSceneParam._m0[_1823].y, _1756 * cbSceneParam._m0[_1823].x)));
        float _1851 = cbSceneParam._m0[33u].z * _1846;
        float _1853 = cbSceneParam._m0[33u].w * _1846;
        float _1856 = fma(_1768, cbSceneParam._m0[_1815].w, fma(_1764, cbSceneParam._m0[_1815].z, fma(_1760, cbSceneParam._m0[_1815].y, _1756 * cbSceneParam._m0[_1815].x))) / _1846;
        float _1904 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
        float _4329 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1911 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 + _1834) / _1846, (_1853 + _1838) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1834) / _1846, (_1838 - _1851) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1851) / _1846, (_1838 - _1853) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1853) / _1846, (_1851 + _1838) / _1846), _1856), 0.0)).x), vec4(0.25)));
        _1918 = 1.0 - (_1911 * cbSceneParam._m0[34u].x);
        _1919 = 1.0 - (_1911 * cbSceneParam._m0[34u].y);
        _1920 = 1.0 - (_1911 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1918 = 1.0;
        _1919 = 1.0;
        _1920 = 1.0;
    }
    float _1984;
    float _1986;
    float _1988;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1972 = fma(_1768, cbSceneParam._m0[63u].w, fma(_1764, cbSceneParam._m0[63u].z, fma(_1760, cbSceneParam._m0[63u].y, _1756 * cbSceneParam._m0[63u].x)));
        float _1973 = fma(_1768, cbSceneParam._m0[60u].w, fma(_1764, cbSceneParam._m0[60u].z, fma(_1760, cbSceneParam._m0[60u].y, _1756 * cbSceneParam._m0[60u].x))) / _1972;
        float _1974 = fma(_1768, cbSceneParam._m0[61u].w, fma(_1764, cbSceneParam._m0[61u].z, fma(_1760, cbSceneParam._m0[61u].y, _1756 * cbSceneParam._m0[61u].x))) / _1972;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1973 >= cbSceneParam._m0[64u].x) && (_1974 >= cbSceneParam._m0[64u].y)) && (_1973 <= cbSceneParam._m0[64u].z)) && (_1974 <= cbSceneParam._m0[64u].w))
        {
            float _2112 = fma(_1768, cbSceneParam._m0[62u].w, fma(_1764, cbSceneParam._m0[62u].z, fma(_1760, cbSceneParam._m0[62u].y, _1756 * cbSceneParam._m0[62u].x))) / _1972;
            float _2116 = isnan(cbSceneParam._m0[41u].w) ? _2112 : (isnan(_2112) ? cbSceneParam._m0[41u].w : max(_2112, cbSceneParam._m0[41u].w));
            float _2159 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
            float _4345 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
            float _2166 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1973, cbSceneParam._m0[33u].w + _1974), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1973, _1974 - cbSceneParam._m0[33u].z), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].z, _1974 - cbSceneParam._m0[33u].w), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1974), _2116), 0.0)).x), vec4(0.25)));
            float _2170 = 1.0 - (_2166 * cbSceneParam._m0[34u].x);
            float _2171 = 1.0 - (_2166 * cbSceneParam._m0[34u].y);
            float _2172 = 1.0 - (_2166 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2171) ? _1919 : (isnan(_1919) ? _2171 : min(_1919, _2171));
            frontier_phi_39_38_ladder_1 = isnan(_2170) ? _1918 : (isnan(_1918) ? _2170 : min(_1918, _2170));
            frontier_phi_39_38_ladder_2 = isnan(_2172) ? _1920 : (isnan(_1920) ? _2172 : min(_1920, _2172));
        }
        else
        {
            frontier_phi_39_38_ladder = _1919;
            frontier_phi_39_38_ladder_1 = _1918;
            frontier_phi_39_38_ladder_2 = _1920;
        }
        _1984 = frontier_phi_39_38_ladder_1;
        _1986 = frontier_phi_39_38_ladder;
        _1988 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1984 = _1918;
        _1986 = _1919;
        _1988 = _1920;
    }
    uvec4 _1993 = floatBitsToUint(cbInstanceData._m0[_579 + 5u]);
    uint _1995 = _1993.x * 14u;
    uint _1996 = _1995 + 13u;
    float _2003 = _651 + (-1.0);
    float _2008 = (cbLight._m0[_1996].x * _2003) + 1.0;
    float _2009 = (cbLight._m0[_1996].y * _2003) + 1.0;
    float _2010 = (cbLight._m0[_1996].z * _2003) + 1.0;
    float _2011 = (cbLight._m0[_1996].w * _2003) + 1.0;
    uint _2012 = _1995 + 5u;
    float _2018 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2022 = _1995 + 4u;
    float _2031 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2035 = _1995 | 1u;
    float _2046 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_421, _422, _423));
    float _2049 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_421, _422, _423));
    float _4381 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _4392 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2054 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2056 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2063 = ((cbLight._m0[_2012].x * _2018) * _2056) + (((cbLight._m0[_2022].x * _1984) * _2031) * _2054);
    float _2064 = ((_2018 * cbLight._m0[_2012].y) * _2056) + (((cbLight._m0[_2022].y * _1986) * _2031) * _2054);
    float _2065 = ((_2018 * cbLight._m0[_2012].z) * _2056) + (((cbLight._m0[_2022].z * _1988) * _2031) * _2054);
    uvec4 _2069 = floatBitsToUint(cbLight._m0[_1995 + 12u]);
    bool _2071 = _2069.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2071)
    {
        _2173 = _2063;
        _2175 = _2064;
        _2177 = _2065;
    }
    else
    {
        uint _2181 = _1995 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_1995 + 2u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4403 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2200 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2063;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2064;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2065;
    }
    bool _2180 = _2069.y == 0u;
    float _2235;
    float _2237;
    float _2239;
    if (_2180)
    {
        _2235 = _2173;
        _2237 = _2175;
        _2239 = _2177;
    }
    else
    {
        uint _2408 = _1995 + 7u;
        float _2424 = (dot(vec3(cbLight._m0[_1995 + 3u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4419 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2427 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2235 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2173;
        _2237 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2175;
        _2239 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2177;
    }
    uint _2242 = _1995 + 8u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _566) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_1995].x + _502;
    float _2258 = cbLight._m0[_1995].y + _503;
    float _2259 = cbLight._m0[_1995].z + _504;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1995].xyz));
    float _4435 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2271 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2272 = dot(vec3(_421, _422, _423), vec3(_2264, _2265, _2266));
    float _4457 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2276 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2264, _2265, _2266));
    float _4468 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = _2256 * _2256;
    float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
    float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2293 = 0.959999978542327880859375 - _634;
    float _2295 = 0.959999978542327880859375 - _635;
    float _2296 = 0.959999978542327880859375 - _636;
    float _2303 = 1.0 - _2256;
    float _2314 = (0.5 / (((_2271 * ((_2270 * _2303) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2271 * _2303) + _2256) * _2270))) * _2270;
    float _4479 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
    uint _2330 = _1995 + 9u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _566) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2035].x + _502;
    float _2344 = cbLight._m0[_2035].y + _503;
    float _2345 = cbLight._m0[_2035].z + _504;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2035].xyz));
    float _4490 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2357 = dot(vec3(_421, _422, _423), vec3(_2350, _2351, _2352));
    float _4501 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2350, _2351, _2352));
    float _4512 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2342 * _2342;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2383 = 1.0 - _2342;
    float _2393 = (0.5 / (((_2271 * ((_2356 * _2383) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2271 * _2383) + _2342) * _2356))) * _2356;
    float _4523 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    float _2405 = (((((_2376 * _2293) + _637) * cbLight._m0[_2330].x) * _2395) * _2018) + ((((cbLight._m0[_2242].x * _1984) * ((_2292 * _2293) + _637)) * _2316) * _2031);
    float _2406 = (((((_2376 * _2295) + _639) * cbLight._m0[_2330].y) * _2395) * _2018) + ((((cbLight._m0[_2242].y * _1986) * ((_2292 * _2295) + _639)) * _2316) * _2031);
    float _2407 = (((((_2376 * _2296) + _640) * cbLight._m0[_2330].z) * _2395) * _2018) + ((((cbLight._m0[_2242].z * _1988) * ((_2292 * _2296) + _640)) * _2316) * _2031);
    float _2463;
    float _2465;
    float _2467;
    if (_2071)
    {
        _2463 = _2405;
        _2465 = _2406;
        _2467 = _2407;
    }
    else
    {
        uint _2469 = _1995 + 2u;
        uint _2473 = _1995 + 10u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _566) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _502;
        float _2490 = cbLight._m0[_2469].y + _503;
        float _2491 = cbLight._m0[_2469].z + _504;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2469].xyz));
        float _4534 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2503 = dot(vec3(_421, _422, _423), vec3(_2496, _2497, _2498));
        float _4545 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4556 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2529 = 1.0 - _2488;
        float _2539 = (0.5 / (((_2271 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2271 * _2529) + _2488) * _2502))) * _2502;
        float _4567 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2463 = (((((_2522 * _2293) + _637) * cbLight._m0[_2473].x) * _2541) * _2542) + _2405;
        _2465 = (((((_2522 * _2295) + _639) * cbLight._m0[_2473].y) * _2541) * _2542) + _2406;
        _2467 = (((((_2522 * _2296) + _640) * cbLight._m0[_2473].z) * _2541) * _2542) + _2407;
    }
    float _2573;
    float _2575;
    float _2577;
    if (_2180)
    {
        _2573 = _2463;
        _2575 = _2465;
        _2577 = _2467;
    }
    else
    {
        uint _2584 = _1995 + 3u;
        uint _2588 = _1995 + 11u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _566) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _502;
        float _2605 = cbLight._m0[_2584].y + _503;
        float _2606 = cbLight._m0[_2584].z + _504;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2584].xyz));
        float _4583 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2618 = dot(vec3(_421, _422, _423), vec3(_2611, _2612, _2613));
        float _4594 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4605 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2271 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2271 * _2644) + _2603) * _2617))) * _2617;
        float _4616 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2573 = (((((_2637 * _2293) + _637) * cbLight._m0[_2588].x) * _2656) * _2657) + _2463;
        _2575 = (((((_2637 * _2295) + _639) * cbLight._m0[_2588].y) * _2656) * _2657) + _2465;
        _2577 = (((((_2637 * _2296) + _640) * cbLight._m0[_2588].z) * _2656) * _2657) + _2467;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_1993.y == 0u)
    {
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _523) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _522) / _2679)));
        float _2700 = (log2(_1771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
        }
        else
        {
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3012)
                {
                    frontier_phi_73_pred = _3001;
                    frontier_phi_73_pred_1 = _3000;
                    frontier_phi_73_pred_2 = _2999;
                    frontier_phi_73_pred_3 = _2998;
                    frontier_phi_73_pred_4 = _2997;
                    frontier_phi_73_pred_5 = _2996;
                }
                else
                {
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    uint _3147;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3011;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    for (;;)
                    {
                        uint _3151 = uint(findLSB(_3147)) + (_3002 << 5u);
                        uint _3148 = (_3147 + 4294967295u) & _3147;
                        uint _3153 = _3151 * 48u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3173 = (_3151 * 48u) + 4u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3192 = (_3151 * 48u) + 8u;
                        vec3 _3203 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x));
                        float _3207 = _3167.x - _1769;
                        float _3208 = _3167.y - _1770;
                        float _3209 = _3167.z - _1771;
                        float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                        float _3213 = inversesqrt(_3210);
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3217 = dot(vec3(_547, _550, _553), vec3(_3214, _3215, _3216));
                        float _3222 = 1.0 - (_3210 * _3167.w);
                        float _4642 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3224 = sqrt(_3210) * _3186.w;
                        float _3227 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3217) + _3228;
                        float _3234 = _3224 * _3224;
                        float _3238 = ((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3223) / ((_3234 * 0.699999988079071044921875) + 1.0);
                        float _3242 = (-0.0) - _1769;
                        float _3243 = (-0.0) - _1770;
                        float _3244 = (-0.0) - _1771;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3258 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                        float _3259 = 1.0 - _672;
                        float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                        float _3267 = _3266 * _3266;
                        float _3268 = _3267 * _3267;
                        float _3269 = _3249 + _3214;
                        float _3270 = _3250 + _3215;
                        float _3271 = _3251 + _3216;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3279 = dot(vec3(_547, _550, _553), vec3(_3249, _3250, _3251));
                        float _4658 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3283 = dot(vec3(_547, _550, _553), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                        float _4669 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                        float _3291 = _3227 * _3267;
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3217) + _3292;
                        float _4680 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3297 = 1.0 - _3267;
                        float _3307 = (0.5 / (((_3296 * ((_3282 * _3297) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3267) * _3282))) * _3296;
                        float _4691 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3318 = (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3290 * _3290) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125))) * _3223;
                        _3071 = (_3238 * _3186.x) + _3144;
                        _3072 = (_3238 * _3186.y) + _3145;
                        _3073 = (_3238 * _3186.z) + _3146;
                        _3068 = (_3318 * _3203.x) + _3141;
                        _3069 = (_3318 * _3203.y) + _3142;
                        _3070 = (_3318 * _3203.z) + _3143;
                        if (_3148 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3148;
                        }
                    }
                    frontier_phi_73_pred = _3073;
                    frontier_phi_73_pred_1 = _3072;
                    frontier_phi_73_pred_2 = _3071;
                    frontier_phi_73_pred_3 = _3070;
                    frontier_phi_73_pred_4 = _3069;
                    frontier_phi_73_pred_5 = _3068;
                }
                _2847 = frontier_phi_73_pred;
                _2845 = frontier_phi_73_pred_1;
                _2843 = frontier_phi_73_pred_2;
                _2841 = frontier_phi_73_pred_3;
                _2839 = frontier_phi_73_pred_4;
                _2837 = frontier_phi_73_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2837;
                    _2997 = _2839;
                    _2998 = _2841;
                    _2999 = _2843;
                    _3000 = _2845;
                    _3001 = _2847;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
        }
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.z;
        uint _2853 = (_2851 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2853) & _2710) == 0u)
        {
            _2964 = _2836;
            _2966 = _2838;
            _2968 = _2840;
            _2970 = _2842;
            _2972 = _2844;
            _2974 = _2846;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
            float _2990 = _2989 * _1769;
            float _2991 = _2989 * _1770;
            float _2992 = _2989 * _1771;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2853 < ((_2851 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3124 = _2836;
                float _3125 = _2838;
                float _3126 = _2840;
                float _3127 = _2842;
                float _3128 = _2844;
                float _3129 = _2846;
                uint _3130 = _2853;
                uint _3139;
                bool _3140;
                for (;;)
                {
                    _3139 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                    _3140 = _3139 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3140)
                    {
                        frontier_phi_84_pred = _3128;
                        frontier_phi_84_pred_1 = _3127;
                        frontier_phi_84_pred_2 = _3126;
                        frontier_phi_84_pred_3 = _3125;
                        frontier_phi_84_pred_4 = _3124;
                        frontier_phi_84_pred_5 = _3129;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        float _3348 = _3127;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        uint _3351 = _3139;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3421;
                        vec4 _3437;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3362 = ((_3130 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3408 = (_3362 * 40u) + 16u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3424 = (_3362 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3440 = (_3362 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3362 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_1771, _3472.z, fma(_1770, _3472.y, _3472.x * _1769)) + _3472.w;
                            _3485 = !((fma(_1771, _3453.z, fma(_1770, _3453.y, _3453.x * _1769)) + _3453.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3377.x - _1769;
                                float _3513 = _3377.y - _1770;
                                float _3514 = _3377.z - _1771;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3378 * _3378));
                                float _4702 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3530 = sqrt(_3515) * _3393.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_547, _550, _553))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_1771, _3421.z, fma(_1770, _3421.y, _3421.x * _1769)) + _3421.w) / _3484;
                                float _3544 = (fma(_1771, _3437.z, fma(_1770, _3437.y, _3437.x * _1769)) + _3437.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4718 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _672;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _2990;
                                float _3574 = _3520 - _2991;
                                float _3575 = _3521 - _2992;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_547, _550, _553), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4729 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3587 = dot(vec3(_547, _550, _553), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4740 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_547, _550, _553), vec3(_3519, _3520, _3521))) + _3596;
                                float _4751 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4762 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3550 * _3393.y;
                                frontier_phi_90_pred_1 = _3550 * _3393.x;
                                frontier_phi_90_pred_2 = _3624 * _3405.z;
                                frontier_phi_90_pred_3 = _3624 * _3405.y;
                                frontier_phi_90_pred_4 = _3624 * _3405.x;
                                frontier_phi_90_pred_5 = _3550 * _3393.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_90_pred;
                            _3631 = frontier_phi_90_pred_1;
                            _3630 = frontier_phi_90_pred_2;
                            _3629 = frontier_phi_90_pred_3;
                            _3628 = frontier_phi_90_pred_4;
                            _3633 = frontier_phi_90_pred_5;
                            _3335 = _3631 + _3348;
                            _3336 = _3632 + _3349;
                            _3337 = _3633 + _3350;
                            _3332 = _3628 + _3345;
                            _3333 = _3629 + _3346;
                            _3334 = _3630 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3336;
                        frontier_phi_84_pred_1 = _3335;
                        frontier_phi_84_pred_2 = _3334;
                        frontier_phi_84_pred_3 = _3333;
                        frontier_phi_84_pred_4 = _3332;
                        frontier_phi_84_pred_5 = _3337;
                    }
                    _2973 = frontier_phi_84_pred;
                    _2971 = frontier_phi_84_pred_1;
                    _2969 = frontier_phi_84_pred_2;
                    _2967 = frontier_phi_84_pred_3;
                    _2965 = frontier_phi_84_pred_4;
                    _2975 = frontier_phi_84_pred_5;
                    uint _3131 = _3130 + 1u;
                    if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3124 = _2965;
                        _3125 = _2967;
                        _3126 = _2969;
                        _3127 = _2971;
                        _3128 = _2973;
                        _3129 = _2975;
                        _3130 = _3131;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2975;
                frontier_phi_65_66_ladder_1 = _2971;
                frontier_phi_65_66_ladder_2 = _2973;
                frontier_phi_65_66_ladder_3 = _2967;
                frontier_phi_65_66_ladder_4 = _2965;
                frontier_phi_65_66_ladder_5 = _2969;
            }
            else
            {
                frontier_phi_65_66_ladder = _2846;
                frontier_phi_65_66_ladder_1 = _2842;
                frontier_phi_65_66_ladder_2 = _2844;
                frontier_phi_65_66_ladder_3 = _2838;
                frontier_phi_65_66_ladder_4 = _2836;
                frontier_phi_65_66_ladder_5 = _2840;
            }
            _2964 = frontier_phi_65_66_ladder_4;
            _2966 = frontier_phi_65_66_ladder_3;
            _2968 = frontier_phi_65_66_ladder_5;
            _2970 = frontier_phi_65_66_ladder_1;
            _2972 = frontier_phi_65_66_ladder_2;
            _2974 = frontier_phi_65_66_ladder;
        }
        float _2979 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
        _2722 = (_2979 * _2970) + _2235;
        _2724 = (_2979 * _2972) + _2237;
        _2726 = (_2979 * _2974) + _2239;
        _2728 = ((_2964 * _637) * _2979) + _2573;
        _2730 = ((_2966 * _639) * _2979) + _2575;
        _2732 = ((_2968 * _640) * _2979) + _2577;
    }
    else
    {
        _2722 = _2235;
        _2724 = _2237;
        _2726 = _2239;
        _2728 = _2573;
        _2730 = _2575;
        _2732 = _2577;
    }
    uint _2738 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _2744 = (_347.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2738].x;
    float _2745 = (_347.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2738].y;
    float _2746 = (_347.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2738].z;
    float _4778 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4789 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4800 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4811 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _2752 = 0.959999978542327880859375 - (_610 * 0.959999978542327880859375);
    float _2760 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2722 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _651));
    float _2761 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2724 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _651));
    float _2762 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2726 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _651));
    float _2766 = _2752 - (exp2(log2(1.0 - _666) * 5.0) * _2752);
    float _2778 = ((_2760 + ((_2728 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + _2744) + ((((cbSceneParam._m0[72u].w * _386.x) * _2766) - _2760) * _416);
    float _2781 = ((_2745 + ((_2730 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + _2761) + ((((cbSceneParam._m0[72u].w * _386.y) * _2766) - _2761) * _416);
    float _2784 = ((_2746 + ((_2732 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1497)) * cbPerFrame._m0[3u].x)) + _2762) + ((((cbSceneParam._m0[72u].w * _386.z) * _2766) - _2762) * _416);
    float _2785 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2786 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2787 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2793 = cbMtdParam._m0[2u].x * _2744;
    float _2794 = cbMtdParam._m0[2u].y * _2745;
    float _2795 = cbMtdParam._m0[2u].z * _2746;
    float _4837 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2797 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _2802 = cbInstanceData._m0[_579 + 6u].w * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)));
    float _2807 = _522 / cbSceneParam._m0[86u].x;
    float _2808 = _523 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _445 : (isnan(_445) ? cbSceneParam._m0[77u].w : min(_445, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_445 > cbSceneParam._m0[78u].w)
    {
        float _2861 = isnan(_445) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _445 : min(cbSceneParam._m0[80u].w, _445));
        float _2862 = _2861 / _445;
        float _2873 = _2862 * _495;
        float _2874 = _496 * _2862;
        float _2875 = (-0.0) - _2874;
        float _2876 = _2862 * _497;
        float _2878 = (cbSceneParam._m0[77u].w * _2875) / _2861;
        float _2879 = _2878 + cbSceneParam._m0[79u].w;
        float _2880 = cbSceneParam._m0[79u].w - _2874;
        float _2886 = sqrt(((_2873 * _2873) + (_2874 * _2874)) + (_2876 * _2876));
        float _2889 = (1.0 - (cbSceneParam._m0[77u].w / _2861)) * _2886;
        float _2894 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2896 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3081;
        if (abs((_2875 - _2878) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3081 = ((((_2879 > 0.0) ? exp2(_2894 * _2879) : (2.0 - exp2(_2896 * _2879))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2889;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : max(_2879, _2880));
            float _3027 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : min(_2879, _2880));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3081 = ((abs(_2886 / _2875) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2894 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2894 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2896 * _3036) - exp2(_2896 * _3037)) * _3025))) + (_2889 * cbSceneParam._m0[80u].z);
        }
        vec4 _3083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3092 = exp2((_3081 * (-1.44269502162933349609375)) * (1.0 - _3083.w));
        float _3093 = log2(_3092);
        float _3109 = log2(_2827);
        _2898 = (exp2(_3109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].x)) * _3083.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2900 = (exp2(_3109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].y)) * _3083.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2902 = (exp2(_3109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].z)) * _3083.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2904 = _3092 * _2827;
    }
    else
    {
        _2898 = _2824;
        _2900 = _2825;
        _2902 = _2826;
        _2904 = _2827;
    }
    bool _3119;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2946;
    float _2949;
    float _2952;
    float _2953;
    bool _2963;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2904);
        float _2921 = exp2(_2917 * cbSceneParam._m0[78u].x);
        float _2922 = exp2(_2917 * cbSceneParam._m0[78u].y);
        float _2923 = exp2(_2917 * cbSceneParam._m0[78u].z);
        float _2924 = _2921 * _2785;
        float _2925 = _2922 * _2786;
        float _2926 = _2923 * _2787;
        float _2933 = _511 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2898)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2900)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2902)));
        _2946 = ((_2793 * _2797) * _2921) * _2940;
        _2949 = ((_2794 * _2797) * _2922) * _2940;
        _2952 = ((_2795 * _2797) * _2923) * _2940;
        _2953 = _2933 * 0.999000012874603271484375;
        _2963 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2963)
        {
            if ((cbInstanceData._m0[_579 + 7u].x + _2953) < 0.5)
            {
                _3119 = true;
                break;
            }
        }
        uint _3060 = _581 + uint(_2913.w);
        if ((cbInstanceData._m0[_3060].w < 1.0) && ((cbInstanceData._m0[_3060].w + _2953) < 0.5))
        {
            _3119 = true;
            break;
        }
        if ((_2937 + _260) < _2935.x)
        {
            _3119 = true;
            break;
        }
        _3119 = false;
        break;
    }
    float _3323;
    if (_3119)
    {
        discard_state = true;
        _3323 = 0.0;
    }
    else
    {
        _3323 = _2802;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3323;
    SV_Target_1.x = _2946;
    SV_Target_1.y = _2949;
    SV_Target_1.z = _2952;
    SV_Target_1.w = _2802;
    discard_exit();
}


