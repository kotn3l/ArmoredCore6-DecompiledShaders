#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_02_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1008;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _250 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.w;
    float _257 = _250.x * cbMtdParam._m0[9u].x;
    float _258 = _250.y * cbMtdParam._m0[9u].y;
    float _259 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _278 = _275.x + cbMtdParam._m0[11u].z;
    vec4 _291 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _299 = (_291.x * 2.0) + (-1.0);
    float _301 = (_291.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3681 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _311 = fma(_308, _228, fma(_301, _220 * TANGENT.x, (_206 * _198) * _299));
    float _314 = fma(_308, _229, fma(_301, _220 * TANGENT.y, (_206 * _199) * _299));
    float _317 = fma(_308, _230, fma(_301, _220 * TANGENT.z, (_206 * _200) * _299));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _325 = _291.z + cbMtdParam._m0[11u].w;
    vec4 _343 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _359 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _360 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _368 = (_359 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[11u].y * _322);
    float _369 = (_360 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[11u].y * _323);
    float _377 = isnan(cbInstanceData._m0[8u].x) ? _368 : (isnan(_368) ? cbInstanceData._m0[8u].x : max(_368, cbInstanceData._m0[8u].x));
    float _378 = isnan(cbInstanceData._m0[8u].y) ? _369 : (isnan(_369) ? cbInstanceData._m0[8u].y : max(_369, cbInstanceData._m0[8u].y));
    vec4 _382 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _377 : (isnan(_377) ? cbInstanceData._m0[8u].z : min(_377, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _378 : (isnan(_378) ? cbInstanceData._m0[8u].w : min(_378, cbInstanceData._m0[8u].w))));
    vec4 _407 = texture(sampler2D(C_Camouflage_test_02_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _410 = _407.x + cbMtdParam._m0[11u].x;
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _416 = inversesqrt(dot(vec3(_322, _323, _324), vec3(_322, _323, _324)));
    float _417 = _416 * _322;
    float _418 = _416 * _323;
    float _419 = _416 * _324;
    float _3722 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _420 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _421 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3755 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3766 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3777 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _425 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _441 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _491 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _481);
    float _492 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _481);
    float _493 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _481);
    float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
    float _498 = _491 * _497;
    float _499 = _492 * _497;
    float _500 = _493 * _497;
    vec4 _502 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _504 = _502.w;
    float _525 = fma(_419, cbSceneParam._m0[5u].z, fma(_418, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _417));
    float _528 = fma(_419, cbSceneParam._m0[6u].z, fma(_418, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _417));
    float _531 = fma(_419, cbSceneParam._m0[7u].z, fma(_418, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _417));
    vec4 _533 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _544 = (((_533.y - _421) + (_533.w * _421)) * cbMtdParam._m0[3u].x) + _421;
    uint _557 = uint(roundEven(NORMAL.w)) * 13u;
    uint _559 = _557 + 9u;
    uint _560 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3788 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    vec4 _572 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _577 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _588 = (((_577.x - _425) + (_577.w * _425)) * cbMtdParam._m0[3u].x) + _425;
    float _601 = (cbMtdParam._m0[3u].x * (((_569 * _504) - _569) + _572.x)) + _569;
    float _602 = (cbMtdParam._m0[3u].x * (((_570 * _504) - _570) + _572.y)) + _570;
    float _603 = (cbMtdParam._m0[3u].x * (((_571 * _504) - _571) + _572.z)) + _571;
    float _604 = 1.0 - _588;
    float _605 = _604 * _601;
    float _606 = _604 * _602;
    float _607 = _604 * _603;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _588;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _588;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _588;
    float _615 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _359, cbSceneParam._m0[86u].y * _360));
    float _629 = _626.x * TEXCOORD_4;
    float _630 = dot(vec3(_417, _418, _419), vec3(_498, _499, _500));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _417) - _498;
    float _638 = (_633 * _418) - _499;
    float _639 = (_633 * _419) - _500;
    float _643 = abs(dot(vec3(_498, _499, _500), vec3(_417, _418, _419)));
    float _3821 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _650 = sqrt(_544);
    float _662 = exp2((_650 * 5.0) * log2(1.0 - (_644 * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _668 = (1.0 - _662) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _669 = _662 * _650;
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1007;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _732 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _736 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _740 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _765 = _697 + _417;
        float _766 = _701 + _418;
        float _767 = _705 + _419;
        float _777 = fma(_767, cbModelParam._m0[26u].z, fma(_766, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765)) - _732;
        float _778 = fma(_767, cbModelParam._m0[27u].z, fma(_766, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765)) - _736;
        float _779 = fma(_767, cbModelParam._m0[28u].z, fma(_766, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765)) - _740;
        float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
        float _796 = ((_783 * _777) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_732 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_783 * _778) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_736 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_783 * _779) / cbModelParam._m0[34u].z) + ((((((_740 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_796, _797, _798), 0.0);
        float _835 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_801.x + (-0.5));
        float _837 = _835 * (_801.y + (-0.5));
        float _838 = _835 * (_801.z + (-0.5));
        float _845 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_808.x + (-0.5));
        float _847 = _845 * (_808.y + (-0.5));
        float _848 = _845 * (_808.z + (-0.5));
        float _855 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_815.x + (-0.5));
        float _857 = _855 * (_815.y + (-0.5));
        float _858 = _855 * (_815.z + (-0.5));
        float _865 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_822.x + (-0.5));
        float _867 = _865 * (_822.y + (-0.5));
        float _868 = _865 * (_822.z + (-0.5));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = _836 * 0.5;
        float _873 = _846 * 0.5;
        float _874 = _856 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _889 = (dot(vec3(_417, _418, _419), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _899 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3869 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_901 + 1.0))) + _906) * _869;
        float _916 = _837 * 0.5;
        float _917 = _847 * 0.5;
        float _918 = _857 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_417, _418, _419), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3902 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_943 + 1.0))) + _948) * _870;
        float _958 = _838 * 0.5;
        float _959 = _848 * 0.5;
        float _960 = _858 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_417, _418, _419), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3935 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_985 + 1.0))) + _990) * _871;
        _1007 = _838;
        _1009 = _837;
        _1010 = _836;
        _1011 = _848;
        _1012 = _847;
        _1013 = _846;
        _1014 = _858;
        _1015 = _857;
        _1016 = _856;
        _1017 = _871;
        _1018 = _870;
        _1019 = _869;
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
    }
    else
    {
        _1007 = _1008;
        _1009 = _1008;
        _1010 = _1008;
        _1011 = _1008;
        _1012 = _1008;
        _1013 = _1008;
        _1014 = _1008;
        _1015 = _1008;
        _1016 = _1008;
        _1017 = _1008;
        _1018 = _1008;
        _1019 = _1008;
        _1020 = 0.0;
        _1021 = 0.0;
        _1022 = 0.0;
    }
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1048 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1052 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1056 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1079 = _697 + _417;
        float _1080 = _701 + _418;
        float _1081 = _705 + _419;
        float _1091 = fma(_1081, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079)) - _1048;
        float _1092 = fma(_1081, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079)) - _1052;
        float _1093 = fma(_1081, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079)) - _1056;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1048 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1052 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[35u].z) + ((((((_1056 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1147 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1114.x + (-0.5));
        float _1149 = _1147 * (_1114.y + (-0.5));
        float _1150 = _1147 * (_1114.z + (-0.5));
        float _1157 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1121.x + (-0.5));
        float _1159 = _1157 * (_1121.y + (-0.5));
        float _1160 = _1157 * (_1121.z + (-0.5));
        float _1167 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1128.x + (-0.5));
        float _1169 = _1167 * (_1128.y + (-0.5));
        float _1170 = _1167 * (_1128.z + (-0.5));
        float _1177 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1135.x + (-0.5));
        float _1179 = _1177 * (_1135.y + (-0.5));
        float _1180 = _1177 * (_1135.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_417, _418, _419), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3998 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1211 + 1.0))) + _1216) * _1181;
        float _1226 = _1149 * 0.5;
        float _1227 = _1159 * 0.5;
        float _1228 = _1169 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_417, _418, _419), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4031 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1253 + 1.0))) + _1258) * _1182;
        float _1268 = _1150 * 0.5;
        float _1269 = _1160 * 0.5;
        float _1270 = _1170 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_417, _418, _419), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4064 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1295 + 1.0))) + _1300) * _1183;
        _1317 = _1150;
        _1318 = _1149;
        _1319 = _1148;
        _1320 = _1160;
        _1321 = _1159;
        _1322 = _1158;
        _1323 = _1170;
        _1324 = _1169;
        _1325 = _1168;
        _1326 = _1183;
        _1327 = _1182;
        _1328 = _1181;
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1008;
        _1318 = _1008;
        _1319 = _1008;
        _1320 = _1008;
        _1321 = _1008;
        _1322 = _1008;
        _1323 = _1008;
        _1324 = _1008;
        _1325 = _1008;
        _1326 = _1008;
        _1327 = _1008;
        _1328 = _1008;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1364 = fma(_1343, cbSceneParam._m0[89u].z, fma(_1342, cbSceneParam._m0[89u].y, _1341 * cbSceneParam._m0[89u].x));
    float _1367 = fma(_1343, cbSceneParam._m0[90u].z, fma(_1342, cbSceneParam._m0[90u].y, _1341 * cbSceneParam._m0[90u].x));
    float _1370 = fma(_1343, cbSceneParam._m0[91u].z, fma(_1342, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1341));
    float _1385 = _637 * 0.5;
    float _1386 = _638 * 0.5;
    float _1387 = _639 * 0.5;
    float _1388 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1391 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1394 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1428;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1401 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1007, _1011, _1014, _1017));
        float _1405 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1409 = dot(vec4(_1385, _1386, _1387, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1416 = dot(vec4(cbModelParam._m0[39u]), vec4(_1385, _1386, _1387, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1439;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1430 = dot(vec4(cbModelParam._m0[40u]), vec4(_1385, _1386, _1387, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1430) ? 0.0 : (isnan(0.0) ? _1430 : max(0.0, _1430))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1443 = (_1439 * cbModelParam._m0[1u].x) + (_1428 * (1.0 - cbModelParam._m0[1u].x));
    float _1453 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1453 : min(cbModelParam._m0[25u].z, _1453));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1517 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1520 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1548;
        if (_1514 > 0.0)
        {
            _1548 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1548 = frontier_phi_16_14_ladder;
        }
        float _1723;
        if (_1517 > 0.0)
        {
            _1723 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1723 = frontier_phi_25_21_ladder;
        }
        float _2018;
        if (_1520 > 0.0)
        {
            _2018 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2018 = frontier_phi_37_32_ladder;
        }
        float _2020 = isnan(_1723) ? _1548 : (isnan(_1548) ? _1723 : min(_1548, _1723));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1514) + _1503;
        float _2026 = (_2021 * _1517) + _1507;
        float _2027 = (_2021 * _1520) + _1511;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1454);
            frontier_phi_15_37_ladder = _2172.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2172.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2172.z * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_15_37_ladder_1;
        _1538 = frontier_phi_15_37_ladder;
        _1540 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1454);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1544 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1544 : min(cbModelParam._m0[25u].w, _1544));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1602 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1606 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1610 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1613 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1616 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1619 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1728;
        if (_1613 > 0.0)
        {
            _1728 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1728 = frontier_phi_27_23_ladder;
        }
        float _2045;
        if (_1616 > 0.0)
        {
            _2045 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2045 = frontier_phi_39_34_ladder;
        }
        float _2383;
        if (_1619 > 0.0)
        {
            _2383 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2383 = frontier_phi_49_46_ladder;
        }
        float _2385 = isnan(_2045) ? _1728 : (isnan(_1728) ? _2045 : min(_1728, _2045));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1613) + _1602;
        float _2391 = (_2386 * _1616) + _1606;
        float _2392 = (_2386 * _1619) + _1610;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_24_49_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1638 = frontier_phi_24_49_ladder_2;
        _1640 = frontier_phi_24_49_ladder_1;
        _1642 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1545);
        _1638 = _1622.x * cbModelParam._m0[1u].z;
        _1640 = _1622.y * cbModelParam._m0[1u].z;
        _1642 = _1622.z * cbModelParam._m0[1u].z;
    }
    float _1655 = (((_668 * _615) + _669) * _629) * ((cbModelParam._m0[1u].w * (_1638 - _1536)) + _1536);
    float _1657 = (((_668 * _617) + _669) * _629) * ((cbModelParam._m0[1u].w * (_1640 - _1538)) + _1538);
    float _1659 = (((_668 * _618) + _669) * _629) * ((cbModelParam._m0[1u].w * (_1642 - _1540)) + _1540);
    float _1662 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, _1655 * cbSceneParam._m0[91u].x));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1715 = _1702 / _1714;
    float _1716 = _1706 / _1714;
    float _1717 = _1710 / _1714;
    float _1864;
    float _1865;
    float _1866;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1744 = ((uint(_1717 > cbSceneParam._m0[59u].y) + uint(_1717 > cbSceneParam._m0[59u].x)) + uint(_1717 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1745 = _1744 + 43u;
        uint _1753 = _1744 + 44u;
        uint _1761 = _1744 + 45u;
        uint _1769 = _1744 + 46u;
        float _1780 = fma(_1714, cbSceneParam._m0[_1745].w, fma(_1710, cbSceneParam._m0[_1745].z, fma(_1706, cbSceneParam._m0[_1745].y, _1702 * cbSceneParam._m0[_1745].x)));
        float _1784 = fma(_1714, cbSceneParam._m0[_1753].w, fma(_1710, cbSceneParam._m0[_1753].z, fma(_1706, cbSceneParam._m0[_1753].y, _1702 * cbSceneParam._m0[_1753].x)));
        float _1792 = fma(_1714, cbSceneParam._m0[_1769].w, fma(_1710, cbSceneParam._m0[_1769].z, fma(_1706, cbSceneParam._m0[_1769].y, _1702 * cbSceneParam._m0[_1769].x)));
        float _1797 = cbSceneParam._m0[33u].z * _1792;
        float _1799 = cbSceneParam._m0[33u].w * _1792;
        float _1802 = fma(_1714, cbSceneParam._m0[_1761].w, fma(_1710, cbSceneParam._m0[_1761].z, fma(_1706, cbSceneParam._m0[_1761].y, _1702 * cbSceneParam._m0[_1761].x))) / _1792;
        float _1850 = (cbSceneParam._m0[33u].x - sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717))) * cbSceneParam._m0[33u].y;
        float _4190 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1857 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 + _1780) / _1792, (_1799 + _1784) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 + _1780) / _1792, (_1784 - _1797) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 - _1797) / _1792, (_1784 - _1799) / _1792), _1802), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 - _1799) / _1792, (_1797 + _1784) / _1792), _1802), 0.0)).x), vec4(0.25)));
        _1864 = 1.0 - (_1857 * cbSceneParam._m0[34u].x);
        _1865 = 1.0 - (_1857 * cbSceneParam._m0[34u].y);
        _1866 = 1.0 - (_1857 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1864 = 1.0;
        _1865 = 1.0;
        _1866 = 1.0;
    }
    float _1930;
    float _1932;
    float _1934;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1918 = fma(_1714, cbSceneParam._m0[63u].w, fma(_1710, cbSceneParam._m0[63u].z, fma(_1706, cbSceneParam._m0[63u].y, _1702 * cbSceneParam._m0[63u].x)));
        float _1919 = fma(_1714, cbSceneParam._m0[60u].w, fma(_1710, cbSceneParam._m0[60u].z, fma(_1706, cbSceneParam._m0[60u].y, _1702 * cbSceneParam._m0[60u].x))) / _1918;
        float _1920 = fma(_1714, cbSceneParam._m0[61u].w, fma(_1710, cbSceneParam._m0[61u].z, fma(_1706, cbSceneParam._m0[61u].y, _1702 * cbSceneParam._m0[61u].x))) / _1918;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1919 >= cbSceneParam._m0[64u].x) && (_1920 >= cbSceneParam._m0[64u].y)) && (_1919 <= cbSceneParam._m0[64u].z)) && (_1920 <= cbSceneParam._m0[64u].w))
        {
            float _2058 = fma(_1714, cbSceneParam._m0[62u].w, fma(_1710, cbSceneParam._m0[62u].z, fma(_1706, cbSceneParam._m0[62u].y, _1702 * cbSceneParam._m0[62u].x))) / _1918;
            float _2062 = isnan(cbSceneParam._m0[41u].w) ? _2058 : (isnan(_2058) ? cbSceneParam._m0[41u].w : max(_2058, cbSceneParam._m0[41u].w));
            float _2105 = (cbSceneParam._m0[33u].x - sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717))) * cbSceneParam._m0[33u].y;
            float _4206 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
            float _2112 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1919, cbSceneParam._m0[33u].w + _1920), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1919, _1920 - cbSceneParam._m0[33u].z), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1919 - cbSceneParam._m0[33u].z, _1920 - cbSceneParam._m0[33u].w), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1919 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1920), _2062), 0.0)).x), vec4(0.25)));
            float _2116 = 1.0 - (_2112 * cbSceneParam._m0[34u].x);
            float _2117 = 1.0 - (_2112 * cbSceneParam._m0[34u].y);
            float _2118 = 1.0 - (_2112 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2117) ? _1865 : (isnan(_1865) ? _2117 : min(_1865, _2117));
            frontier_phi_36_35_ladder_1 = isnan(_2118) ? _1866 : (isnan(_1866) ? _2118 : min(_1866, _2118));
            frontier_phi_36_35_ladder_2 = isnan(_2116) ? _1864 : (isnan(_1864) ? _2116 : min(_1864, _2116));
        }
        else
        {
            frontier_phi_36_35_ladder = _1865;
            frontier_phi_36_35_ladder_1 = _1866;
            frontier_phi_36_35_ladder_2 = _1864;
        }
        _1930 = frontier_phi_36_35_ladder_2;
        _1932 = frontier_phi_36_35_ladder;
        _1934 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1930 = _1864;
        _1932 = _1865;
        _1934 = _1866;
    }
    uvec4 _1939 = floatBitsToUint(cbInstanceData._m0[_557 + 5u]);
    uint _1941 = _1939.x * 14u;
    uint _1942 = _1941 + 13u;
    float _1949 = _629 + (-1.0);
    float _1954 = (cbLight._m0[_1942].x * _1949) + 1.0;
    float _1955 = (cbLight._m0[_1942].y * _1949) + 1.0;
    float _1956 = (cbLight._m0[_1942].z * _1949) + 1.0;
    float _1957 = (cbLight._m0[_1942].w * _1949) + 1.0;
    uint _1958 = _1941 + 5u;
    float _1964 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1968 = _1941 + 4u;
    float _1977 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1981 = _1941 | 1u;
    float _1992 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_417, _418, _419));
    float _1995 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_417, _418, _419));
    float _4242 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _4253 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _2000 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2002 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2009 = ((cbLight._m0[_1958].x * _1964) * _2002) + (((cbLight._m0[_1968].x * _1930) * _1977) * _2000);
    float _2010 = ((_1964 * cbLight._m0[_1958].y) * _2002) + (((cbLight._m0[_1968].y * _1932) * _1977) * _2000);
    float _2011 = ((_1964 * cbLight._m0[_1958].z) * _2002) + (((cbLight._m0[_1968].z * _1934) * _1977) * _2000);
    uvec4 _2015 = floatBitsToUint(cbLight._m0[_1941 + 12u]);
    bool _2017 = _2015.x == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2017)
    {
        _2119 = _2009;
        _2121 = _2010;
        _2123 = _2011;
    }
    else
    {
        uint _2127 = _1941 + 6u;
        float _2143 = (dot(vec3(cbLight._m0[_1941 + 2u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4264 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2146 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2119 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _2009;
        _2121 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _2010;
        _2123 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _2011;
    }
    bool _2126 = _2015.y == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2126)
    {
        _2181 = _2119;
        _2183 = _2121;
        _2185 = _2123;
    }
    else
    {
        uint _2354 = _1941 + 7u;
        float _2370 = (dot(vec3(cbLight._m0[_1941 + 3u].xyz), vec3(_417, _418, _419)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4280 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2373 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2181 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2119;
        _2183 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2121;
        _2185 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2123;
    }
    uint _2188 = _1941 + 8u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _544) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_1941].x + _498;
    float _2204 = cbLight._m0[_1941].y + _499;
    float _2205 = cbLight._m0[_1941].z + _500;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1941].xyz));
    float _4296 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _2217 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2218 = dot(vec3(_417, _418, _419), vec3(_2210, _2211, _2212));
    float _4318 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2210, _2211, _2212));
    float _4329 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2202 * _2202;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0);
    float _2239 = 0.959999978542327880859375 - _612;
    float _2241 = 0.959999978542327880859375 - _613;
    float _2242 = 0.959999978542327880859375 - _614;
    float _2249 = 1.0 - _2202;
    float _2260 = (0.5 / (((_2217 * ((_2216 * _2249) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2249) + _2202) * _2216))) * _2216;
    float _4340 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    uint _2276 = _1941 + 9u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _544) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_1981].x + _498;
    float _2290 = cbLight._m0[_1981].y + _499;
    float _2291 = cbLight._m0[_1981].z + _500;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_1981].xyz));
    float _4351 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2303 = dot(vec3(_417, _418, _419), vec3(_2296, _2297, _2298));
    float _4362 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2296, _2297, _2298));
    float _4373 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2288 * _2288;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0);
    float _2329 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2217 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2329) + _2288) * _2302))) * _2302;
    float _4384 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    float _2351 = (((((_2322 * _2239) + _615) * cbLight._m0[_2276].x) * _2341) * _1964) + ((((cbLight._m0[_2188].x * _1930) * ((_2238 * _2239) + _615)) * _2262) * _1977);
    float _2352 = (((((_2322 * _2241) + _617) * cbLight._m0[_2276].y) * _2341) * _1964) + ((((cbLight._m0[_2188].y * _1932) * ((_2238 * _2241) + _617)) * _2262) * _1977);
    float _2353 = (((((_2322 * _2242) + _618) * cbLight._m0[_2276].z) * _2341) * _1964) + ((((cbLight._m0[_2188].z * _1934) * ((_2238 * _2242) + _618)) * _2262) * _1977);
    float _2409;
    float _2411;
    float _2413;
    if (_2017)
    {
        _2409 = _2351;
        _2411 = _2352;
        _2413 = _2353;
    }
    else
    {
        uint _2415 = _1941 + 2u;
        uint _2419 = _1941 + 10u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _544) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _498;
        float _2436 = cbLight._m0[_2415].y + _499;
        float _2437 = cbLight._m0[_2415].z + _500;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2415].xyz));
        float _4395 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2449 = dot(vec3(_417, _418, _419), vec3(_2442, _2443, _2444));
        float _4406 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4417 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2217 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2475) + _2434) * _2448))) * _2448;
        float _4428 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2409 = (((((_2468 * _2239) + _615) * cbLight._m0[_2419].x) * _2487) * _2488) + _2351;
        _2411 = (((((_2468 * _2241) + _617) * cbLight._m0[_2419].y) * _2487) * _2488) + _2352;
        _2413 = (((((_2468 * _2242) + _618) * cbLight._m0[_2419].z) * _2487) * _2488) + _2353;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2126)
    {
        _2519 = _2409;
        _2521 = _2411;
        _2523 = _2413;
    }
    else
    {
        uint _2530 = _1941 + 3u;
        uint _2534 = _1941 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _544) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _498;
        float _2551 = cbLight._m0[_2530].y + _499;
        float _2552 = cbLight._m0[_2530].z + _500;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_417, _418, _419), vec3(cbLight._m0[_2530].xyz));
        float _4444 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2564 = dot(vec3(_417, _418, _419), vec3(_2557, _2558, _2559));
        float _4455 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4466 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2217 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2590) + _2549) * _2563))) * _2563;
        float _4477 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2519 = (((((_2583 * _2239) + _615) * cbLight._m0[_2534].x) * _2602) * _2603) + _2409;
        _2521 = (((((_2583 * _2241) + _617) * cbLight._m0[_2534].y) * _2602) * _2603) + _2411;
        _2523 = (((((_2583 * _2242) + _618) * cbLight._m0[_2534].z) * _2602) * _2603) + _2413;
    }
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_1939.y == 0u)
    {
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _360) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _359) / _2625)));
        float _2646 = (log2(_1717 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2950)
                {
                    frontier_phi_68_pred = _2939;
                    frontier_phi_68_pred_1 = _2938;
                    frontier_phi_68_pred_2 = _2937;
                    frontier_phi_68_pred_3 = _2935;
                    frontier_phi_68_pred_4 = _2934;
                    frontier_phi_68_pred_5 = _2936;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2949;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2940 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _1715;
                        float _3125 = _3084.y - _1716;
                        float _3126 = _3084.z - _1717;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_525, _528, _531), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4503 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _1715;
                        float _3160 = (-0.0) - _1716;
                        float _3161 = (-0.0) - _1717;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3175 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3176 = 1.0 - _650;
                        float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                        float _3184 = _3183 * _3183;
                        float _3185 = _3184 * _3184;
                        float _3186 = _3166 + _3131;
                        float _3187 = _3167 + _3132;
                        float _3188 = _3168 + _3133;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3196 = dot(vec3(_525, _528, _531), vec3(_3166, _3167, _3168));
                        float _4519 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3200 = dot(vec3(_525, _528, _531), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                        float _4530 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                        float _3208 = _3144 * _3184;
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3134) + _3209;
                        float _4541 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3214 = 1.0 - _3184;
                        float _3224 = (0.5 / (((_3213 * ((_3199 * _3214) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3184) * _3199))) * _3213;
                        float _4552 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3235 = (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3207 * _3207) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2993 = (_3155 * _3103.x) + _3061;
                        _2994 = (_3155 * _3103.y) + _3062;
                        _2995 = (_3155 * _3103.z) + _3063;
                        _2990 = (_3235 * _3120.x) + _3058;
                        _2991 = (_3235 * _3120.y) + _3059;
                        _2992 = (_3235 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_68_pred = _2995;
                    frontier_phi_68_pred_1 = _2994;
                    frontier_phi_68_pred_2 = _2993;
                    frontier_phi_68_pred_3 = _2991;
                    frontier_phi_68_pred_4 = _2990;
                    frontier_phi_68_pred_5 = _2992;
                }
                _2793 = frontier_phi_68_pred;
                _2791 = frontier_phi_68_pred_1;
                _2789 = frontier_phi_68_pred_2;
                _2785 = frontier_phi_68_pred_3;
                _2783 = frontier_phi_68_pred_4;
                _2787 = frontier_phi_68_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2783;
                    _2935 = _2785;
                    _2936 = _2787;
                    _2937 = _2789;
                    _2938 = _2791;
                    _2939 = _2793;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2799) & _2656) == 0u)
        {
            _2902 = _2782;
            _2904 = _2784;
            _2906 = _2786;
            _2908 = _2788;
            _2910 = _2790;
            _2912 = _2792;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
            float _2928 = _2927 * _1715;
            float _2929 = _2927 * _1716;
            float _2930 = _2927 * _1717;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3041 = _2782;
                float _3042 = _2784;
                float _3043 = _2786;
                float _3044 = _2788;
                float _3045 = _2790;
                float _3046 = _2792;
                uint _3047 = _2799;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3057)
                    {
                        frontier_phi_74_pred = _3043;
                        frontier_phi_74_pred_1 = _3042;
                        frontier_phi_74_pred_2 = _3041;
                        frontier_phi_74_pred_3 = _3046;
                        frontier_phi_74_pred_4 = _3045;
                        frontier_phi_74_pred_5 = _3044;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        uint _3259 = _3056;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3329;
                        vec4 _3345;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3270 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3316 = (_3270 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3270 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3270 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3270 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_1717, _3380.z, fma(_1716, _3380.y, _3380.x * _1715)) + _3380.w;
                            _3393 = !((fma(_1717, _3361.z, fma(_1716, _3361.y, _3361.x * _1715)) + _3361.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3285.x - _1715;
                                float _3421 = _3285.y - _1716;
                                float _3422 = _3285.z - _1717;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3286 * _3286));
                                float _4563 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3438 = sqrt(_3423) * _3301.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_525, _528, _531))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_1717, _3329.z, fma(_1716, _3329.y, _3329.x * _1715)) + _3329.w) / _3392;
                                float _3452 = (fma(_1717, _3345.z, fma(_1716, _3345.y, _3345.x * _1715)) + _3345.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4579 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _650;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2928;
                                float _3482 = _3428 - _2929;
                                float _3483 = _3429 - _2930;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_525, _528, _531), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4590 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3495 = dot(vec3(_525, _528, _531), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4601 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_525, _528, _531), vec3(_3427, _3428, _3429))) + _3504;
                                float _4612 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4623 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3532 * _3313.z;
                                frontier_phi_80_pred_1 = _3532 * _3313.y;
                                frontier_phi_80_pred_2 = _3532 * _3313.x;
                                frontier_phi_80_pred_3 = _3458 * _3301.z;
                                frontier_phi_80_pred_4 = _3458 * _3301.y;
                                frontier_phi_80_pred_5 = _3458 * _3301.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3538 = frontier_phi_80_pred;
                            _3537 = frontier_phi_80_pred_1;
                            _3536 = frontier_phi_80_pred_2;
                            _3541 = frontier_phi_80_pred_3;
                            _3540 = frontier_phi_80_pred_4;
                            _3539 = frontier_phi_80_pred_5;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            _3240 = _3536 + _3253;
                            _3241 = _3537 + _3254;
                            _3242 = _3538 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3242;
                        frontier_phi_74_pred_1 = _3241;
                        frontier_phi_74_pred_2 = _3240;
                        frontier_phi_74_pred_3 = _3245;
                        frontier_phi_74_pred_4 = _3244;
                        frontier_phi_74_pred_5 = _3243;
                    }
                    _2907 = frontier_phi_74_pred;
                    _2905 = frontier_phi_74_pred_1;
                    _2903 = frontier_phi_74_pred_2;
                    _2913 = frontier_phi_74_pred_3;
                    _2911 = frontier_phi_74_pred_4;
                    _2909 = frontier_phi_74_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2903;
                        _3042 = _2905;
                        _3043 = _2907;
                        _3044 = _2909;
                        _3045 = _2911;
                        _3046 = _2913;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2911;
                frontier_phi_62_63_ladder_1 = _2909;
                frontier_phi_62_63_ladder_2 = _2907;
                frontier_phi_62_63_ladder_3 = _2913;
                frontier_phi_62_63_ladder_4 = _2905;
                frontier_phi_62_63_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_62_63_ladder = _2790;
                frontier_phi_62_63_ladder_1 = _2788;
                frontier_phi_62_63_ladder_2 = _2786;
                frontier_phi_62_63_ladder_3 = _2792;
                frontier_phi_62_63_ladder_4 = _2784;
                frontier_phi_62_63_ladder_5 = _2782;
            }
            _2902 = frontier_phi_62_63_ladder_5;
            _2904 = frontier_phi_62_63_ladder_4;
            _2906 = frontier_phi_62_63_ladder_2;
            _2908 = frontier_phi_62_63_ladder_1;
            _2910 = frontier_phi_62_63_ladder;
            _2912 = frontier_phi_62_63_ladder_3;
        }
        float _2917 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2668 = (_2917 * _2908) + _2181;
        _2670 = (_2917 * _2910) + _2183;
        _2672 = (_2917 * _2912) + _2185;
        _2674 = ((_2902 * _615) * _2917) + _2519;
        _2676 = ((_2904 * _617) * _2917) + _2521;
        _2678 = ((_2906 * _618) * _2917) + _2523;
    }
    else
    {
        _2668 = _2181;
        _2670 = _2183;
        _2672 = _2185;
        _2674 = _2519;
        _2676 = _2521;
        _2678 = _2523;
    }
    uint _2684 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _2690 = (_343.x * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2684].x;
    float _2691 = (_343.y * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2684].y;
    float _2692 = (_343.z * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2684].z;
    float _4639 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4650 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4661 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4672 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _2698 = 0.959999978542327880859375 - (_588 * 0.959999978542327880859375);
    float _2706 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2668 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _629));
    float _2707 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2670 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _629));
    float _2708 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2672 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _629));
    float _2712 = _2698 - (exp2(log2(1.0 - _644) * 5.0) * _2698);
    float _2724 = ((_2706 + ((_2674 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + _2690) + ((((cbSceneParam._m0[72u].w * _382.x) * _2712) - _2706) * _412);
    float _2727 = ((_2691 + ((_2676 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + _2707) + ((((cbSceneParam._m0[72u].w * _382.y) * _2712) - _2707) * _412);
    float _2730 = ((_2692 + ((_2678 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1443)) * cbPerFrame._m0[3u].x)) + _2708) + ((((cbSceneParam._m0[72u].w * _382.z) * _2712) - _2708) * _412);
    float _4698 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2743 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2748 = cbInstanceData._m0[_557 + 6u].w * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)));
    float _2753 = _359 / cbSceneParam._m0[86u].x;
    float _2754 = _360 / cbSceneParam._m0[86u].y;
    vec4 _2768 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, (log2((isnan(cbSceneParam._m0[77u].w) ? _441 : (isnan(_441) ? cbSceneParam._m0[77u].w : min(_441, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2770 = _2768.x;
    float _2771 = _2768.y;
    float _2772 = _2768.z;
    float _2773 = _2768.w;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_441 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_441) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _441 : min(cbSceneParam._m0[80u].w, _441));
        float _2808 = _2807 / _441;
        float _2819 = _2808 * _491;
        float _2820 = _492 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2822 = _2808 * _493;
        float _2824 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2825 = _2824 + cbSceneParam._m0[79u].w;
        float _2826 = cbSceneParam._m0[79u].w - _2820;
        float _2832 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2822 * _2822));
        float _2835 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2832;
        float _2840 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2842 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2821 - _2824) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2825 > 0.0) ? exp2(_2840 * _2825) : (2.0 - exp2(_2842 * _2825))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2835;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : max(_2825, _2826));
            float _2965 = isnan(_2826) ? _2825 : (isnan(_2825) ? _2826 : min(_2825, _2826));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3003 = ((abs(_2832 / _2821) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2840 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2840 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2842 * _2974) - exp2(_2842 * _2975)) * _2963))) + (_2835 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2753, _2754, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2773);
        _2844 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2770;
        _2846 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2771;
        _2848 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2772;
        _2850 = _3014 * _2773;
    }
    else
    {
        _2844 = _2770;
        _2846 = _2771;
        _2848 = _2772;
        _2850 = _2773;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2850);
    float _2867 = exp2(_2863 * cbSceneParam._m0[78u].x);
    float _2868 = exp2(_2863 * cbSceneParam._m0[78u].y);
    float _2869 = exp2(_2863 * cbSceneParam._m0[78u].z);
    float _2870 = _2867 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)));
    float _2871 = _2868 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0)));
    float _2872 = _2869 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0)));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.w = _2748;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2690) * _2743) * _2867) * _2881;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2691) * _2743) * _2868) * _2881;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2692) * _2743) * _2869) * _2881;
    SV_Target_1.w = _2748;
}


