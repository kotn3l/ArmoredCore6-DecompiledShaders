#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3567;
float _3568;
float _3569;
float _3570;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _239.w;
    float _246 = _239.x * cbMtdParam._m0[9u].x;
    float _247 = _239.y * cbMtdParam._m0[9u].y;
    float _248 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = _260.x;
    vec4 _274 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3579 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    float _294 = fma(_291, _217, fma(_284, _209 * TANGENT.x, (_195 * _188) * _282));
    float _297 = fma(_291, _218, fma(_284, _209 * TANGENT.y, (_195 * _189) * _282));
    float _300 = fma(_291, _219, fma(_284, _209 * TANGENT.z, (_195 * _190) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3590 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _308 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3612 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3623 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3634 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _572 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _578 = (cbMatDynParam._m0[5u].x * _572) + cbMatDynParam._m0[5u].y;
        float _3645 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _579 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _583 = (cbMatDynParam._m0[5u].z * _572) + cbMatDynParam._m0[5u].w;
        float _3656 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) - _579)) + _579) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _432 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _435 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3667 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _463 = 1.0 - _312;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _312;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _312;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _312;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _489 = _486.x * TEXCOORD.z;
    float _490 = dot(vec3(_305, _306, _307), vec3(_387, _388, _389));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _305) - _387;
    float _498 = (_493 * _306) - _388;
    float _499 = (_493 * _307) - _389;
    float _503 = abs(dot(vec3(_387, _388, _389), vec3(_305, _306, _307)));
    float _3700 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_308);
    float _518 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _524 = (1.0 - _518) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _505;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _621 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _625 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _650 = _553 + _305;
        float _651 = _557 + _306;
        float _652 = _561 + _307;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_305, _306, _307), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3748 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_305, _306, _307), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3781 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_305, _306, _307), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3814 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _940 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _944 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _967 = _553 + _305;
        float _968 = _557 + _306;
        float _969 = _561 + _307;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_305, _306, _307), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3877 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_305, _306, _307), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3910 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_305, _306, _307), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3943 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _497 * 0.5;
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1405 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1408 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1436 = frontier_phi_19_17_ladder;
        }
        float _1612;
        if (_1405 > 0.0)
        {
            _1612 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1612 = frontier_phi_28_24_ladder;
        }
        float _1908;
        if (_1408 > 0.0)
        {
            _1908 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1908 = frontier_phi_40_35_ladder;
        }
        float _1910 = isnan(_1612) ? _1436 : (isnan(_1436) ? _1612 : min(_1436, _1612));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1402) + _1391;
        float _1916 = (_1911 * _1405) + _1395;
        float _1917 = (_1911 * _1408) + _1399;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1920 = (-1.0) - _1918;
        float _1922 = _1918 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1917 > _1922) || ((_1917 < _1920) || ((_1916 > _1922) || ((_1916 < _1920) || ((_1915 < _1920) || (_1915 > _1922))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2062 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1917, cbModelParam._m0[9u].z, fma(_1916, cbModelParam._m0[9u].y, _1915 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1917, cbModelParam._m0[10u].z, fma(_1916, cbModelParam._m0[10u].y, _1915 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1917, cbModelParam._m0[11u].z, fma(_1916, cbModelParam._m0[11u].y, _1915 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_18_40_ladder = _2062.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2062.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2062.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_18_40_ladder_2;
        _1426 = frontier_phi_18_40_ladder_1;
        _1428 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1504 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1507 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1617;
        if (_1501 > 0.0)
        {
            _1617 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1617 = frontier_phi_30_26_ladder;
        }
        float _1935;
        if (_1504 > 0.0)
        {
            _1935 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1935 = frontier_phi_42_37_ladder;
        }
        float _2273;
        if (_1507 > 0.0)
        {
            _2273 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2273 = frontier_phi_52_49_ladder;
        }
        float _2275 = isnan(_1935) ? _1617 : (isnan(_1617) ? _1935 : min(_1617, _1935));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1501) + _1490;
        float _2281 = (_2276 * _1504) + _1494;
        float _2282 = (_2276 * _1507) + _1498;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2283;
        float _2286 = _2283 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2282 > _2286) || ((_2282 < _2284) || ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 < _2284) || (_2280 > _2286))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2282, cbModelParam._m0[17u].z, fma(_2281, cbModelParam._m0[17u].y, _2280 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2282, cbModelParam._m0[18u].z, fma(_2281, cbModelParam._m0[18u].y, _2280 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2282, cbModelParam._m0[19u].z, fma(_2281, cbModelParam._m0[19u].y, _2280 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_27_52_ladder = _2404.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2404.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2404.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_27_52_ladder_2;
        _1528 = frontier_phi_27_52_ladder_1;
        _1530 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1543 = (((_524 * _474) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_524 * _476) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_524 * _477) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    float _1591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1604 = _1591 / _1603;
    float _1605 = _1595 / _1603;
    float _1606 = _1599 / _1603;
    float _1753;
    float _1754;
    float _1755;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1633 = ((uint(_1606 > cbSceneParam._m0[59u].y) + uint(_1606 > cbSceneParam._m0[59u].x)) + uint(_1606 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1634 = _1633 + 43u;
        uint _1642 = _1633 + 44u;
        uint _1650 = _1633 + 45u;
        uint _1658 = _1633 + 46u;
        float _1669 = fma(_1603, cbSceneParam._m0[_1634].w, fma(_1599, cbSceneParam._m0[_1634].z, fma(_1595, cbSceneParam._m0[_1634].y, _1591 * cbSceneParam._m0[_1634].x)));
        float _1673 = fma(_1603, cbSceneParam._m0[_1642].w, fma(_1599, cbSceneParam._m0[_1642].z, fma(_1595, cbSceneParam._m0[_1642].y, _1591 * cbSceneParam._m0[_1642].x)));
        float _1681 = fma(_1603, cbSceneParam._m0[_1658].w, fma(_1599, cbSceneParam._m0[_1658].z, fma(_1595, cbSceneParam._m0[_1658].y, _1591 * cbSceneParam._m0[_1658].x)));
        float _1686 = cbSceneParam._m0[33u].z * _1681;
        float _1688 = cbSceneParam._m0[33u].w * _1681;
        float _1691 = fma(_1603, cbSceneParam._m0[_1650].w, fma(_1599, cbSceneParam._m0[_1650].z, fma(_1595, cbSceneParam._m0[_1650].y, _1591 * cbSceneParam._m0[_1650].x))) / _1681;
        float _1739 = (cbSceneParam._m0[33u].x - sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606))) * cbSceneParam._m0[33u].y;
        float _4069 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1746 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1686 + _1669) / _1681, (_1688 + _1673) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1688 + _1669) / _1681, (_1673 - _1686) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 - _1686) / _1681, (_1673 - _1688) / _1681), _1691), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 - _1688) / _1681, (_1686 + _1673) / _1681), _1691), 0.0)).x), vec4(0.25)));
        _1753 = 1.0 - (_1746 * cbSceneParam._m0[34u].x);
        _1754 = 1.0 - (_1746 * cbSceneParam._m0[34u].y);
        _1755 = 1.0 - (_1746 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1753 = 1.0;
        _1754 = 1.0;
        _1755 = 1.0;
    }
    float _1819;
    float _1821;
    float _1823;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1807 = fma(_1603, cbSceneParam._m0[63u].w, fma(_1599, cbSceneParam._m0[63u].z, fma(_1595, cbSceneParam._m0[63u].y, _1591 * cbSceneParam._m0[63u].x)));
        float _1808 = fma(_1603, cbSceneParam._m0[60u].w, fma(_1599, cbSceneParam._m0[60u].z, fma(_1595, cbSceneParam._m0[60u].y, _1591 * cbSceneParam._m0[60u].x))) / _1807;
        float _1809 = fma(_1603, cbSceneParam._m0[61u].w, fma(_1599, cbSceneParam._m0[61u].z, fma(_1595, cbSceneParam._m0[61u].y, _1591 * cbSceneParam._m0[61u].x))) / _1807;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1808 >= cbSceneParam._m0[64u].x) && (_1809 >= cbSceneParam._m0[64u].y)) && (_1808 <= cbSceneParam._m0[64u].z)) && (_1809 <= cbSceneParam._m0[64u].w))
        {
            float _1948 = fma(_1603, cbSceneParam._m0[62u].w, fma(_1599, cbSceneParam._m0[62u].z, fma(_1595, cbSceneParam._m0[62u].y, _1591 * cbSceneParam._m0[62u].x))) / _1807;
            float _1952 = isnan(cbSceneParam._m0[41u].w) ? _1948 : (isnan(_1948) ? cbSceneParam._m0[41u].w : max(_1948, cbSceneParam._m0[41u].w));
            float _1995 = (cbSceneParam._m0[33u].x - sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606))) * cbSceneParam._m0[33u].y;
            float _4085 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
            float _2002 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1808, cbSceneParam._m0[33u].w + _1809), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1808, _1809 - cbSceneParam._m0[33u].z), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1808 - cbSceneParam._m0[33u].z, _1809 - cbSceneParam._m0[33u].w), _1952), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1808 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1809), _1952), 0.0)).x), vec4(0.25)));
            float _2006 = 1.0 - (_2002 * cbSceneParam._m0[34u].x);
            float _2007 = 1.0 - (_2002 * cbSceneParam._m0[34u].y);
            float _2008 = 1.0 - (_2002 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2007) ? _1754 : (isnan(_1754) ? _2007 : min(_1754, _2007));
            frontier_phi_39_38_ladder_1 = isnan(_2006) ? _1753 : (isnan(_1753) ? _2006 : min(_1753, _2006));
            frontier_phi_39_38_ladder_2 = isnan(_2008) ? _1755 : (isnan(_1755) ? _2008 : min(_1755, _2008));
        }
        else
        {
            frontier_phi_39_38_ladder = _1754;
            frontier_phi_39_38_ladder_1 = _1753;
            frontier_phi_39_38_ladder_2 = _1755;
        }
        _1819 = frontier_phi_39_38_ladder_1;
        _1821 = frontier_phi_39_38_ladder;
        _1823 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1819 = _1753;
        _1821 = _1754;
        _1823 = _1755;
    }
    uvec4 _1828 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1830 = _1828.x * 14u;
    uint _1831 = _1830 + 13u;
    float _1838 = _489 + (-1.0);
    float _1843 = (cbLight._m0[_1831].x * _1838) + 1.0;
    float _1844 = (cbLight._m0[_1831].y * _1838) + 1.0;
    float _1845 = (cbLight._m0[_1831].z * _1838) + 1.0;
    float _1846 = (cbLight._m0[_1831].w * _1838) + 1.0;
    uint _1847 = _1830 + 5u;
    float _1853 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1857 = _1830 + 4u;
    float _1867 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1871 = _1830 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_305, _306, _307));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_305, _306, _307));
    float _4121 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4132 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1847].x * _1853) * _1892) + (((cbLight._m0[_1857].x * _1819) * _1867) * _1890);
    float _1900 = ((_1853 * cbLight._m0[_1847].y) * _1892) + (((cbLight._m0[_1857].y * _1821) * _1867) * _1890);
    float _1901 = ((_1853 * cbLight._m0[_1847].z) * _1892) + (((cbLight._m0[_1857].z * _1823) * _1867) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1830 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1907)
    {
        _2009 = _1899;
        _2011 = _1900;
        _2013 = _1901;
    }
    else
    {
        uint _2017 = _1830 + 6u;
        float _2033 = (dot(vec3(cbLight._m0[_1830 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4143 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2036 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2009 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1899;
        _2011 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1900;
        _2013 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1901;
    }
    bool _2016 = _1905.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2016)
    {
        _2071 = _2009;
        _2073 = _2011;
        _2075 = _2013;
    }
    else
    {
        uint _2244 = _1830 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1830 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4159 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2263 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2071 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2009;
        _2073 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2011;
        _2075 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2013;
    }
    uint _2078 = _1830 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _308) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1830].x + _387;
    float _2094 = cbLight._m0[_1830].y + _388;
    float _2095 = cbLight._m0[_1830].z + _389;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1830].xyz));
    float _4175 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2107 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2108 = dot(vec3(_305, _306, _307), vec3(_2100, _2101, _2102));
    float _4197 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2100, _2101, _2102));
    float _4208 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _471;
    float _2131 = 0.959999978542327880859375 - _472;
    float _2132 = 0.959999978542327880859375 - _473;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4219 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2166 = _1830 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _308) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1871].x + _387;
    float _2180 = cbLight._m0[_1871].y + _388;
    float _2181 = cbLight._m0[_1871].z + _389;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1871].xyz));
    float _4230 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2193 = dot(vec3(_305, _306, _307), vec3(_2186, _2187, _2188));
    float _4241 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2186, _2187, _2188));
    float _4252 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
    float _2219 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2107 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2219) + _2178) * _2192))) * _2192;
    float _4263 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2241 = (((((_2212 * _2129) + _474) * cbLight._m0[_2166].x) * _2231) * _1853) + ((((cbLight._m0[_2078].x * _1819) * ((_2128 * _2129) + _474)) * _2152) * _1867);
    float _2242 = (((((_2212 * _2131) + _476) * cbLight._m0[_2166].y) * _2231) * _1853) + ((((cbLight._m0[_2078].y * _1821) * ((_2128 * _2131) + _476)) * _2152) * _1867);
    float _2243 = (((((_2212 * _2132) + _477) * cbLight._m0[_2166].z) * _2231) * _1853) + ((((cbLight._m0[_2078].z * _1823) * ((_2128 * _2132) + _477)) * _2152) * _1867);
    float _2299;
    float _2301;
    float _2303;
    if (_1907)
    {
        _2299 = _2241;
        _2301 = _2242;
        _2303 = _2243;
    }
    else
    {
        uint _2305 = _1830 + 2u;
        uint _2309 = _1830 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _308) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _387;
        float _2326 = cbLight._m0[_2305].y + _388;
        float _2327 = cbLight._m0[_2305].z + _389;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2305].xyz));
        float _4274 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2339 = dot(vec3(_305, _306, _307), vec3(_2332, _2333, _2334));
        float _4285 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4296 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
        float _2365 = 1.0 - _2324;
        float _2375 = (0.5 / (((_2107 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2365) + _2324) * _2338))) * _2338;
        float _4307 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2299 = (((((_2358 * _2129) + _474) * cbLight._m0[_2309].x) * _2377) * _2378) + _2241;
        _2301 = (((((_2358 * _2131) + _476) * cbLight._m0[_2309].y) * _2377) * _2378) + _2242;
        _2303 = (((((_2358 * _2132) + _477) * cbLight._m0[_2309].z) * _2377) * _2378) + _2243;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2016)
    {
        _2409 = _2299;
        _2411 = _2301;
        _2413 = _2303;
    }
    else
    {
        uint _2420 = _1830 + 3u;
        uint _2424 = _1830 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _308) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _387;
        float _2441 = cbLight._m0[_2420].y + _388;
        float _2442 = cbLight._m0[_2420].z + _389;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2420].xyz));
        float _4323 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2454 = dot(vec3(_305, _306, _307), vec3(_2447, _2448, _2449));
        float _4334 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4345 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2107 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2480) + _2439) * _2453))) * _2453;
        float _4356 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2409 = (((((_2473 * _2129) + _474) * cbLight._m0[_2424].x) * _2492) * _2493) + _2299;
        _2411 = (((((_2473 * _2131) + _476) * cbLight._m0[_2424].y) * _2492) * _2493) + _2301;
        _2413 = (((((_2473 * _2132) + _477) * cbLight._m0[_2424].z) * _2492) * _2493) + _2303;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1828.y == 0u)
    {
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.x;
        uint _2526 = uint((float(_2514.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2515))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2515)));
        float _2536 = (log2(_1606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2537 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        uint _2540 = uint(isnan(14.0) ? _2537 : (isnan(_2537) ? 14.0 : min(_2537, 14.0)));
        uvec4 _2545 = texelFetch(g_lightClusterGridBuffer, int(((_2540 << 2u) + (_2526 << 6u)) >> 2u));
        uint _2546 = _2545.x;
        uint _2547 = _2514.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2547 >> 4u) & 15u)) + 4294967295u) & _2546) == 0u) || ((_2547 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            uint _2783 = 0u;
            uint _2792;
            bool _2793;
            for (;;)
            {
                _2792 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                _2793 = _2792 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2793)
                {
                    frontier_phi_73_pred = _2782;
                    frontier_phi_73_pred_1 = _2781;
                    frontier_phi_73_pred_2 = _2780;
                    frontier_phi_73_pred_3 = _2779;
                    frontier_phi_73_pred_4 = _2778;
                    frontier_phi_73_pred_5 = _2777;
                }
                else
                {
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    uint _2928;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2792;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    for (;;)
                    {
                        uint _2932 = uint(findLSB(_2928)) + (_2783 << 5u);
                        uint _2929 = (_2928 + 4294967295u) & _2928;
                        uint _2934 = _2932 * 48u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2954 = (_2932 * 48u) + 4u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 3u)).x));
                        uint _2973 = (_2932 * 48u) + 8u;
                        vec3 _2984 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x));
                        float _2988 = _2948.x - _1604;
                        float _2989 = _2948.y - _1605;
                        float _2990 = _2948.z - _1606;
                        float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                        float _2994 = inversesqrt(_2991);
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _2998 = dot(vec3(_429, _432, _435), vec3(_2995, _2996, _2997));
                        float _3003 = 1.0 - (_2991 * _2948.w);
                        float _4382 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3005 = sqrt(_2991) * _2967.w;
                        float _3008 = 1.39999997615814208984375 / (_3005 + 1.39999997615814208984375);
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2998) + _3009;
                        float _3015 = _3005 * _3005;
                        float _3019 = ((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3004) / ((_3015 * 0.699999988079071044921875) + 1.0);
                        float _3023 = (-0.0) - _1604;
                        float _3024 = (-0.0) - _1605;
                        float _3025 = (-0.0) - _1606;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3039 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                        float _3040 = 1.0 - _505;
                        float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                        float _3048 = _3047 * _3047;
                        float _3049 = _3048 * _3048;
                        float _3050 = _3030 + _2995;
                        float _3051 = _3031 + _2996;
                        float _3052 = _3032 + _2997;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3060 = dot(vec3(_429, _432, _435), vec3(_3030, _3031, _3032));
                        float _4398 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3064 = dot(vec3(_429, _432, _435), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                        float _4409 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                        float _3072 = _3008 * _3048;
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _2998) + _3073;
                        float _4420 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3078 = 1.0 - _3048;
                        float _3088 = (0.5 / (((_3077 * ((_3063 * _3078) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3077 * _3078) + _3048) * _3063))) * _3077;
                        float _4431 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3099 = (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) / ((_3071 * _3071) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125))) * _3004;
                        _2852 = (_3019 * _2967.x) + _2925;
                        _2853 = (_3019 * _2967.y) + _2926;
                        _2854 = (_3019 * _2967.z) + _2927;
                        _2849 = (_3099 * _2984.x) + _2922;
                        _2850 = (_3099 * _2984.y) + _2923;
                        _2851 = (_3099 * _2984.z) + _2924;
                        if (_2929 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2929;
                        }
                    }
                    frontier_phi_73_pred = _2854;
                    frontier_phi_73_pred_1 = _2853;
                    frontier_phi_73_pred_2 = _2852;
                    frontier_phi_73_pred_3 = _2851;
                    frontier_phi_73_pred_4 = _2850;
                    frontier_phi_73_pred_5 = _2849;
                }
                _2636 = frontier_phi_73_pred;
                _2634 = frontier_phi_73_pred_1;
                _2632 = frontier_phi_73_pred_2;
                _2630 = frontier_phi_73_pred_3;
                _2628 = frontier_phi_73_pred_4;
                _2626 = frontier_phi_73_pred_5;
                uint _2784 = _2783 + 1u;
                if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2777 = _2626;
                    _2778 = _2628;
                    _2779 = _2630;
                    _2780 = _2632;
                    _2781 = _2634;
                    _2782 = _2636;
                    _2783 = _2784;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((4294967295u << _2642) & _2546) == 0u)
        {
            _2745 = _2625;
            _2747 = _2627;
            _2749 = _2629;
            _2751 = _2631;
            _2753 = _2633;
            _2755 = _2635;
        }
        else
        {
            float _2770 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
            float _2771 = _2770 * _1604;
            float _2772 = _2770 * _1605;
            float _2773 = _2770 * _1606;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2905 = _2625;
                float _2906 = _2627;
                float _2907 = _2629;
                float _2908 = _2631;
                float _2909 = _2633;
                float _2910 = _2635;
                uint _2911 = _2642;
                uint _2920;
                bool _2921;
                for (;;)
                {
                    _2920 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                    _2921 = _2920 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2921)
                    {
                        frontier_phi_84_pred = _2909;
                        frontier_phi_84_pred_1 = _2908;
                        frontier_phi_84_pred_2 = _2907;
                        frontier_phi_84_pred_3 = _2906;
                        frontier_phi_84_pred_4 = _2905;
                        frontier_phi_84_pred_5 = _2910;
                    }
                    else
                    {
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3126 = _2905;
                        float _3127 = _2906;
                        float _3128 = _2907;
                        float _3129 = _2908;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        uint _3132 = _2920;
                        uint _3133;
                        vec4 _3158;
                        float _3159;
                        vec4 _3174;
                        vec3 _3186;
                        vec4 _3202;
                        vec4 _3218;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3143 = ((_2911 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3132));
                            _3133 = (_3132 + 4294967295u) & _3132;
                            uint _3145 = _3143 * 40u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3159 = _3158.w;
                            uint _3161 = (_3143 * 40u) + 4u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3143 * 40u) + 8u;
                            _3186 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x));
                            uint _3189 = (_3143 * 40u) + 16u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3205 = (_3143 * 40u) + 20u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3221 = (_3143 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3143 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_1606, _3253.z, fma(_1605, _3253.y, _3253.x * _1604)) + _3253.w;
                            _3266 = !((fma(_1606, _3234.z, fma(_1605, _3234.y, _3234.x * _1604)) + _3234.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3158.x - _1604;
                                float _3294 = _3158.y - _1605;
                                float _3295 = _3158.z - _1606;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3159 * _3159));
                                float _4442 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3311 = sqrt(_3296) * _3174.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_429, _432, _435))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_1606, _3202.z, fma(_1605, _3202.y, _3202.x * _1604)) + _3202.w) / _3265;
                                float _3325 = (fma(_1606, _3218.z, fma(_1605, _3218.y, _3218.x * _1604)) + _3218.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4458 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _505;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2771;
                                float _3355 = _3301 - _2772;
                                float _3356 = _3302 - _2773;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2771, (-0.0) - _2772, (-0.0) - _2773));
                                float _4469 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3368 = dot(vec3(_429, _432, _435), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4480 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_429, _432, _435), vec3(_3300, _3301, _3302))) + _3377;
                                float _4491 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4502 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3331 * _3174.y;
                                frontier_phi_90_pred_1 = _3331 * _3174.x;
                                frontier_phi_90_pred_2 = _3405 * _3186.z;
                                frontier_phi_90_pred_3 = _3405 * _3186.y;
                                frontier_phi_90_pred_4 = _3405 * _3186.x;
                                frontier_phi_90_pred_5 = _3331 * _3174.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3413 = frontier_phi_90_pred;
                            _3412 = frontier_phi_90_pred_1;
                            _3411 = frontier_phi_90_pred_2;
                            _3410 = frontier_phi_90_pred_3;
                            _3409 = frontier_phi_90_pred_4;
                            _3414 = frontier_phi_90_pred_5;
                            _3116 = _3412 + _3129;
                            _3117 = _3413 + _3130;
                            _3118 = _3414 + _3131;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            if (_3133 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3133;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3117;
                        frontier_phi_84_pred_1 = _3116;
                        frontier_phi_84_pred_2 = _3115;
                        frontier_phi_84_pred_3 = _3114;
                        frontier_phi_84_pred_4 = _3113;
                        frontier_phi_84_pred_5 = _3118;
                    }
                    _2754 = frontier_phi_84_pred;
                    _2752 = frontier_phi_84_pred_1;
                    _2750 = frontier_phi_84_pred_2;
                    _2748 = frontier_phi_84_pred_3;
                    _2746 = frontier_phi_84_pred_4;
                    _2756 = frontier_phi_84_pred_5;
                    uint _2912 = _2911 + 1u;
                    if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2905 = _2746;
                        _2906 = _2748;
                        _2907 = _2750;
                        _2908 = _2752;
                        _2909 = _2754;
                        _2910 = _2756;
                        _2911 = _2912;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2756;
                frontier_phi_65_66_ladder_1 = _2752;
                frontier_phi_65_66_ladder_2 = _2754;
                frontier_phi_65_66_ladder_3 = _2748;
                frontier_phi_65_66_ladder_4 = _2746;
                frontier_phi_65_66_ladder_5 = _2750;
            }
            else
            {
                frontier_phi_65_66_ladder = _2635;
                frontier_phi_65_66_ladder_1 = _2631;
                frontier_phi_65_66_ladder_2 = _2633;
                frontier_phi_65_66_ladder_3 = _2627;
                frontier_phi_65_66_ladder_4 = _2625;
                frontier_phi_65_66_ladder_5 = _2629;
            }
            _2745 = frontier_phi_65_66_ladder_4;
            _2747 = frontier_phi_65_66_ladder_3;
            _2749 = frontier_phi_65_66_ladder_5;
            _2751 = frontier_phi_65_66_ladder_1;
            _2753 = frontier_phi_65_66_ladder_2;
            _2755 = frontier_phi_65_66_ladder;
        }
        float _2760 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2558 = (_2760 * _2751) + _2071;
        _2560 = (_2760 * _2753) + _2073;
        _2562 = (_2760 * _2755) + _2075;
        _2564 = ((_2745 * _474) * _2760) + _2409;
        _2566 = ((_2747 * _476) * _2760) + _2411;
        _2568 = ((_2749 * _477) * _2760) + _2413;
    }
    else
    {
        _2558 = _2071;
        _2560 = _2073;
        _2562 = _2075;
        _2564 = _2409;
        _2566 = _2411;
        _2568 = _2413;
    }
    float _4518 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4529 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4540 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2585 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2558 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _489))) + ((_2564 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2586 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2560 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _489))) + ((_2566 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    float _2587 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2562 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _489))) + ((_2568 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1331)) * cbPerFrame._m0[3u].x);
    uint _2588 = _448 + 6u;
    float _2596 = _408 / cbSceneParam._m0[86u].x;
    float _2597 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2651 = _2650 / _328;
        float _2662 = _2651 * _380;
        float _2663 = _381 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2665 = _2651 * _382;
        float _2667 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2668 = _2667 + cbSceneParam._m0[79u].w;
        float _2669 = cbSceneParam._m0[79u].w - _2663;
        float _2675 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2665 * _2665));
        float _2678 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2675;
        float _2683 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2685 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2862;
        if (abs((_2664 - _2667) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2862 = ((((_2668 > 0.0) ? exp2(_2683 * _2668) : (2.0 - exp2(_2685 * _2668))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2678;
        }
        else
        {
            float _2806 = 1.0 / cbSceneParam._m0[80u].x;
            float _2807 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : max(_2668, _2669));
            float _2808 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : min(_2668, _2669));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            _2862 = ((abs(_2675 / _2664) * cbSceneParam._m0[80u].y) * ((((_2817 - _2818) * 2.0) - ((exp2(_2683 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)))) - exp2(_2683 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))))) * _2806)) - ((exp2(_2685 * _2817) - exp2(_2685 * _2818)) * _2806))) + (_2678 * cbSceneParam._m0[80u].z);
        }
        vec4 _2864 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2873 = exp2((_2862 * (-1.44269502162933349609375)) * (1.0 - _2864.w));
        float _2874 = log2(_2873);
        float _2890 = log2(_2616);
        _2687 = (exp2(_2890 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].x)) * _2864.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2689 = (exp2(_2890 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].y)) * _2864.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2691 = (exp2(_2890 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2874 * cbSceneParam._m0[78u].z)) * _2864.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2693 = _2873 * _2616;
    }
    else
    {
        _2687 = _2613;
        _2689 = _2614;
        _2691 = _2615;
        _2693 = _2616;
    }
    bool _2900;
    vec4 _2703;
    vec4 _2725;
    float _2727;
    float _2731;
    float _2732;
    float _2733;
    float _2734;
    bool _2744;
    for (;;)
    {
        _2703 = cbMatDynParam._m0[0u];
        float _2705 = roundEven(_2703.y);
        bool _2706 = _2705 == 3.0;
        float _2707 = log2(_2693);
        float _2714 = exp2(_2707 * cbSceneParam._m0[78u].x) * _2585;
        float _2715 = exp2(_2707 * cbSceneParam._m0[78u].y) * _2586;
        float _2716 = exp2(_2707 * cbSceneParam._m0[78u].z) * _2587;
        float _2723 = _396 + (-0.5);
        _2725 = cbMtdParam._m0[1u];
        _2727 = _2725.y * _2723;
        float _2730 = (_2705 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2731 = _2730 * (_2706 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2687)));
        _2732 = _2730 * (_2706 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2689)));
        _2733 = _2730 * (_2706 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2691)));
        _2734 = _2723 * 0.999000012874603271484375;
        _2744 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2744)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2734) < 0.5)
            {
                _2900 = true;
                break;
            }
        }
        uint _2841 = _450 + uint(_2703.w);
        if ((cbInstanceData._m0[_2841].w < 1.0) && ((cbInstanceData._m0[_2841].w + _2734) < 0.5))
        {
            _2900 = true;
            break;
        }
        if ((_2727 + _245) < _2725.x)
        {
            _2900 = true;
            break;
        }
        _2900 = false;
        break;
    }
    float _3104;
    if (_2900)
    {
        discard_state = true;
        _3104 = 0.0;
    }
    else
    {
        _3104 = cbInstanceData._m0[_2588].w;
    }
    SV_Target.x = _2731;
    SV_Target.y = _2732;
    SV_Target.z = _2733;
    SV_Target.w = _3104;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
    discard_exit();
}


