#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _889;
float _3280;
float _3281;
float _3282;
float _3283;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _256.x;
    vec4 _270 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3292 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))));
    float _290 = fma(_287, _213, fma(_280, _205 * TANGENT.x, (_191 * _184) * _278));
    float _293 = fma(_287, _214, fma(_280, _205 * TANGENT.y, (_191 * _185) * _278));
    float _296 = fma(_287, _215, fma(_280, _205 * TANGENT.z, (_191 * _186) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3303 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _304 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3325 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3336 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3347 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _308 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _568 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _574 = (cbMatDynParam._m0[5u].x * _568) + cbMatDynParam._m0[5u].y;
        float _3358 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _579 = (cbMatDynParam._m0[5u].z * _568) + cbMatDynParam._m0[5u].w;
        float _3369 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) - _575)) + _575) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _428 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _431 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3380 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _3391 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _3402 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _459 = 1.0 - _308;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _308;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _308;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _308;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _485 = _482.x * TEXCOORD.z;
    float _486 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _301) - _383;
    float _494 = (_489 * _302) - _384;
    float _495 = (_489 * _303) - _385;
    float _499 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3413 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_304);
    float _514 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _520 = (1.0 - _514) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _501;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _617 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _621 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _646 = _549 + _301;
        float _647 = _553 + _302;
        float _648 = _557 + _303;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_301, _302, _303), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3461 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_301, _302, _303), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3494 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_301, _302, _303), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3527 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _936 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _940 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _963 = _549 + _301;
        float _964 = _553 + _302;
        float _965 = _557 + _303;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_301, _302, _303), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3590 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_301, _302, _303), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3623 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_301, _302, _303), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3656 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = _889;
        _1211 = _889;
        _1212 = _889;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _493 * 0.5;
    float _1270 = _494 * 0.5;
    float _1271 = _495 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_888, _892, _895, _898));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_890, _893, _896, _899));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _894, _897, _900));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1387 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1391 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1395 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1398 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1401 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1404 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1432;
        if (_1398 > 0.0)
        {
            _1432 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1432 = frontier_phi_19_17_ladder;
        }
        float _1640;
        if (_1401 > 0.0)
        {
            _1640 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1640 = frontier_phi_28_24_ladder;
        }
        float _1894;
        if (_1404 > 0.0)
        {
            _1894 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1894 = frontier_phi_40_35_ladder;
        }
        float _1896 = isnan(_1640) ? _1432 : (isnan(_1432) ? _1640 : min(_1432, _1640));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1398) + _1387;
        float _1902 = (_1897 * _1401) + _1391;
        float _1903 = (_1897 * _1404) + _1395;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1906 = (-1.0) - _1904;
        float _1908 = _1904 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1903 > _1908) || ((_1903 < _1906) || ((_1902 > _1908) || ((_1902 < _1906) || ((_1901 < _1906) || (_1901 > _1908))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1903, cbModelParam._m0[9u].z, fma(_1902, cbModelParam._m0[9u].y, _1901 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1903, cbModelParam._m0[10u].z, fma(_1902, cbModelParam._m0[10u].y, _1901 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1903, cbModelParam._m0[11u].z, fma(_1902, cbModelParam._m0[11u].y, _1901 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_18_40_ladder = _2031.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2031.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2031.x * cbModelParam._m0[1u].y;
        }
        _1420 = frontier_phi_18_40_ladder_2;
        _1422 = frontier_phi_18_40_ladder_1;
        _1424 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1338);
        _1420 = _1408.x * cbModelParam._m0[1u].y;
        _1422 = _1408.y * cbModelParam._m0[1u].y;
        _1424 = _1408.z * cbModelParam._m0[1u].y;
    }
    float _1428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1428 : min(cbModelParam._m0[25u].w, _1428));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1500 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1503 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1645;
        if (_1497 > 0.0)
        {
            _1645 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1645 = frontier_phi_30_26_ladder;
        }
        float _1921;
        if (_1500 > 0.0)
        {
            _1921 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1921 = frontier_phi_42_37_ladder;
        }
        float _2134;
        if (_1503 > 0.0)
        {
            _2134 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2134 = frontier_phi_51_48_ladder;
        }
        float _2136 = isnan(_1921) ? _1645 : (isnan(_1645) ? _1921 : min(_1645, _1921));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1497) + _1486;
        float _2142 = (_2137 * _1500) + _1490;
        float _2143 = (_2137 * _1503) + _1494;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2145 = (-1.0) - _2144;
        float _2147 = _2144 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2143 > _2147) || ((_2143 < _2145) || ((_2142 > _2147) || ((_2142 < _2145) || ((_2141 < _2145) || (_2141 > _2147))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2143, cbModelParam._m0[17u].z, fma(_2142, cbModelParam._m0[17u].y, _2141 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2143, cbModelParam._m0[18u].z, fma(_2142, cbModelParam._m0[18u].y, _2141 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2143, cbModelParam._m0[19u].z, fma(_2142, cbModelParam._m0[19u].y, _2141 * cbModelParam._m0[19u].x))), _1429);
            frontier_phi_27_51_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_27_51_ladder_2;
        _1524 = frontier_phi_27_51_ladder_1;
        _1526 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1429);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_520 * _470) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_520 * _472) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_520 * _473) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    uvec4 _1562 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1564 = _1562.x * 14u;
    uint _1565 = _1564 + 13u;
    float _1572 = _485 + (-1.0);
    float _1577 = (cbLight._m0[_1565].x * _1572) + 1.0;
    float _1578 = (cbLight._m0[_1565].y * _1572) + 1.0;
    float _1579 = (cbLight._m0[_1565].z * _1572) + 1.0;
    float _1580 = (cbLight._m0[_1565].w * _1572) + 1.0;
    uint _1581 = _1564 + 5u;
    float _1587 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1591 = _1564 + 4u;
    float _1598 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1602 = _1564 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_301, _302, _303));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_301, _302, _303));
    float _3792 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3803 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1581].x * _1587) * _1623) + ((cbLight._m0[_1591].x * _1598) * _1621);
    float _1631 = ((_1587 * cbLight._m0[_1581].y) * _1623) + ((_1598 * cbLight._m0[_1591].y) * _1621);
    float _1632 = ((_1587 * cbLight._m0[_1581].z) * _1623) + ((_1598 * cbLight._m0[_1591].z) * _1621);
    uvec4 _1637 = floatBitsToUint(cbLight._m0[_1564 + 12u]);
    bool _1639 = _1637.x == 0u;
    float _1650;
    float _1652;
    float _1654;
    if (_1639)
    {
        _1650 = _1630;
        _1652 = _1631;
        _1654 = _1632;
    }
    else
    {
        uint _1658 = _1564 + 6u;
        float _1674 = (dot(vec3(cbLight._m0[_1564 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1675 = _1674 * _1674;
        float _3814 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1677 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1650 = (((cbLight._m0[_1658].x * 0.3183098733425140380859375) * _1676) * _1677) + _1630;
        _1652 = (((cbLight._m0[_1658].y * 0.3183098733425140380859375) * _1676) * _1677) + _1631;
        _1654 = (((cbLight._m0[_1658].z * 0.3183098733425140380859375) * _1676) * _1677) + _1632;
    }
    bool _1657 = _1637.y == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1657)
    {
        _1695 = _1650;
        _1697 = _1652;
        _1699 = _1654;
    }
    else
    {
        uint _1865 = _1564 + 7u;
        float _1881 = (dot(vec3(cbLight._m0[_1564 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1882 = _1881 * _1881;
        float _3830 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1884 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1695 = (((cbLight._m0[_1865].x * 0.3183098733425140380859375) * _1883) * _1884) + _1650;
        _1697 = (((cbLight._m0[_1865].y * 0.3183098733425140380859375) * _1883) * _1884) + _1652;
        _1699 = (((cbLight._m0[_1865].z * 0.3183098733425140380859375) * _1883) * _1884) + _1654;
    }
    uint _1702 = _1564 + 8u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _304) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1564].x + _383;
    float _1718 = cbLight._m0[_1564].y + _384;
    float _1719 = cbLight._m0[_1564].z + _385;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1564].xyz));
    float _3846 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _1731 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1732 = dot(vec3(_301, _302, _303), vec3(_1724, _1725, _1726));
    float _3868 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1736 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1724, _1725, _1726));
    float _3879 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1740 = _1716 * _1716;
    float _1744 = ((_1735 * _1735) * (_1740 + (-1.0))) + 1.0;
    float _1752 = exp2(log2(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * 5.0);
    float _1753 = 0.959999978542327880859375 - _467;
    float _1755 = 0.959999978542327880859375 - _468;
    float _1756 = 0.959999978542327880859375 - _469;
    float _1763 = 1.0 - _1716;
    float _1774 = (0.5 / (((_1731 * ((_1730 * _1763) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1763) + _1716) * _1730))) * _1730;
    float _3890 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1776 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1740 / ((_1744 * _1744) * 3.141590118408203125));
    uint _1787 = _1564 + 9u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _304) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1602].x + _383;
    float _1801 = cbLight._m0[_1602].y + _384;
    float _1802 = cbLight._m0[_1602].z + _385;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1602].xyz));
    float _3901 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1814 = dot(vec3(_301, _302, _303), vec3(_1807, _1808, _1809));
    float _3912 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1807, _1808, _1809));
    float _3923 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1799 * _1799;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1833 = exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0);
    float _1840 = 1.0 - _1799;
    float _1850 = (0.5 / (((_1731 * ((_1813 * _1840) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1840) + _1799) * _1813))) * _1813;
    float _3934 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    float _1862 = (((((_1833 * _1753) + _470) * cbLight._m0[_1787].x) * _1852) * _1587) + (((((_1752 * _1753) + _470) * cbLight._m0[_1702].x) * _1776) * _1598);
    float _1863 = (((((_1833 * _1755) + _472) * cbLight._m0[_1787].y) * _1852) * _1587) + (((((_1752 * _1755) + _472) * cbLight._m0[_1702].y) * _1776) * _1598);
    float _1864 = (((((_1833 * _1756) + _473) * cbLight._m0[_1787].z) * _1852) * _1587) + (((((_1752 * _1756) + _473) * cbLight._m0[_1702].z) * _1776) * _1598);
    float _1926;
    float _1928;
    float _1930;
    if (_1639)
    {
        _1926 = _1862;
        _1928 = _1863;
        _1930 = _1864;
    }
    else
    {
        uint _1932 = _1564 + 2u;
        uint _1936 = _1564 + 10u;
        float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _304) * 0.949999988079071044921875);
        float _1951 = _1950 * _1950;
        float _1952 = cbLight._m0[_1932].x + _383;
        float _1953 = cbLight._m0[_1932].y + _384;
        float _1954 = cbLight._m0[_1932].z + _385;
        float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
        float _1959 = _1958 * _1952;
        float _1960 = _1958 * _1953;
        float _1961 = _1958 * _1954;
        float _1962 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1932].xyz));
        float _3945 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1966 = dot(vec3(_301, _302, _303), vec3(_1959, _1960, _1961));
        float _3956 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1969 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1970 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_1959, _1960, _1961));
        float _3967 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1974 = _1951 * _1951;
        float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
        float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0);
        float _1992 = 1.0 - _1951;
        float _2002 = (0.5 / (((_1731 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _1992) + _1951) * _1965))) * _1965;
        float _3978 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2004 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
        float _2005 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1926 = (((((_1985 * _1753) + _470) * cbLight._m0[_1936].x) * _2004) * _2005) + _1862;
        _1928 = (((((_1985 * _1755) + _472) * cbLight._m0[_1936].y) * _2004) * _2005) + _1863;
        _1930 = (((((_1985 * _1756) + _473) * cbLight._m0[_1936].z) * _2004) * _2005) + _1864;
    }
    float _2040;
    float _2042;
    float _2044;
    if (_1657)
    {
        _2040 = _1926;
        _2042 = _1928;
        _2044 = _1930;
    }
    else
    {
        uint _2051 = _1564 + 3u;
        uint _2055 = _1564 + 11u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _304) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _383;
        float _2072 = cbLight._m0[_2051].y + _384;
        float _2073 = cbLight._m0[_2051].z + _385;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2051].xyz));
        float _3994 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2085 = dot(vec3(_301, _302, _303), vec3(_2078, _2079, _2080));
        float _4005 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _4016 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
        float _2111 = 1.0 - _2070;
        float _2121 = (0.5 / (((_1731 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1731 * _2111) + _2070) * _2084))) * _2084;
        float _4027 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2123 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2124 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _2040 = (((((_2104 * _1753) + _470) * cbLight._m0[_2055].x) * _2123) * _2124) + _1926;
        _2042 = (((((_2104 * _1755) + _472) * cbLight._m0[_2055].y) * _2123) * _2124) + _1928;
        _2044 = (((((_2104 * _1756) + _473) * cbLight._m0[_2055].z) * _2123) * _2124) + _1930;
    }
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    if (_1562.y == 0u)
    {
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2199;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2199;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2199;
        uvec4 _2214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2215 = _2214.x;
        uint _2226 = uint((float(_2214.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2215))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2215)));
        float _2236 = (log2(_2202 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        uint _2240 = uint(isnan(14.0) ? _2237 : (isnan(_2237) ? 14.0 : min(_2237, 14.0)));
        uvec4 _2245 = texelFetch(g_lightClusterGridBuffer, int(((_2240 << 2u) + (_2226 << 6u)) >> 2u));
        uint _2246 = _2245.x;
        uint _2247 = _2214.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2247 >> 4u) & 15u)) + 4294967295u) & _2246) == 0u) || ((_2247 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            uint _2504 = 0u;
            uint _2513;
            bool _2514;
            for (;;)
            {
                _2513 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                _2514 = _2513 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2514)
                {
                    frontier_phi_68_pred = _2500;
                    frontier_phi_68_pred_1 = _2503;
                    frontier_phi_68_pred_2 = _2502;
                    frontier_phi_68_pred_3 = _2501;
                    frontier_phi_68_pred_4 = _2499;
                    frontier_phi_68_pred_5 = _2498;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2513;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2504 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _2200;
                        float _2710 = _2669.y - _2201;
                        float _2711 = _2669.z - _2202;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2719 = dot(vec3(_425, _428, _431), vec3(_2716, _2717, _2718));
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _4053 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2719) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _2200;
                        float _2745 = (-0.0) - _2201;
                        float _2746 = (-0.0) - _2202;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2761 = exp2(log2(1.0 / ((_2736 * 3.5) + 5.0)) * 0.25);
                        float _2762 = 1.0 - _501;
                        float _2769 = sqrt(1.0 - ((1.0 - (_2762 * _2762)) * (1.0 - (_2761 * _2761))));
                        float _2770 = _2769 * _2769;
                        float _2771 = _2770 * _2770;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_425, _428, _431), vec3(_2751, _2752, _2753));
                        float _4069 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2786 = dot(vec3(_425, _428, _431), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _4080 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2793 = ((_2789 * _2789) * (_2771 + (-1.0))) + 1.0;
                        float _2794 = _2729 * _2770;
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2719) + _2795;
                        float _4091 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2800 = 1.0 - _2770;
                        float _2810 = (0.5 / (((_2799 * ((_2785 * _2800) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2799 * _2800) + _2770) * _2785))) * _2799;
                        float _4102 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2821 = (((_2771 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_2793 * _2793) * ((_2736 * 2.1991131305694580078125) + 3.141590118408203125))) * _2725;
                        _2573 = (_2740 * _2688.x) + _2646;
                        _2574 = (_2740 * _2688.y) + _2647;
                        _2575 = (_2740 * _2688.z) + _2648;
                        _2570 = (_2821 * _2705.x) + _2643;
                        _2571 = (_2821 * _2705.y) + _2644;
                        _2572 = (_2821 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_68_pred = _2572;
                    frontier_phi_68_pred_1 = _2575;
                    frontier_phi_68_pred_2 = _2574;
                    frontier_phi_68_pred_3 = _2573;
                    frontier_phi_68_pred_4 = _2571;
                    frontier_phi_68_pred_5 = _2570;
                }
                _2351 = frontier_phi_68_pred;
                _2357 = frontier_phi_68_pred_1;
                _2355 = frontier_phi_68_pred_2;
                _2353 = frontier_phi_68_pred_3;
                _2349 = frontier_phi_68_pred_4;
                _2347 = frontier_phi_68_pred_5;
                uint _2505 = _2504 + 1u;
                if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2498 = _2347;
                    _2499 = _2349;
                    _2500 = _2351;
                    _2501 = _2353;
                    _2502 = _2355;
                    _2503 = _2357;
                    _2504 = _2505;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        if (((4294967295u << _2363) & _2246) == 0u)
        {
            _2466 = _2346;
            _2468 = _2348;
            _2470 = _2350;
            _2472 = _2352;
            _2474 = _2354;
            _2476 = _2356;
        }
        else
        {
            float _2491 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
            float _2492 = _2491 * _2200;
            float _2493 = _2491 * _2201;
            float _2494 = _2491 * _2202;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2626 = _2346;
                float _2627 = _2348;
                float _2628 = _2350;
                float _2629 = _2352;
                float _2630 = _2354;
                float _2631 = _2356;
                uint _2632 = _2363;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2240 << 5u) + (_2226 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2642)
                    {
                        frontier_phi_79_pred = _2631;
                        frontier_phi_79_pred_1 = _2630;
                        frontier_phi_79_pred_2 = _2629;
                        frontier_phi_79_pred_3 = _2628;
                        frontier_phi_79_pred_4 = _2627;
                        frontier_phi_79_pred_5 = _2626;
                    }
                    else
                    {
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _2848 = _2626;
                        float _2849 = _2627;
                        float _2850 = _2628;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        uint _2854 = _2641;
                        uint _2855;
                        vec4 _2880;
                        float _2881;
                        vec4 _2896;
                        vec3 _2908;
                        vec4 _2924;
                        vec4 _2940;
                        float _2987;
                        bool _2988;
                        for (;;)
                        {
                            uint _2865 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2854));
                            _2855 = (_2854 + 4294967295u) & _2854;
                            uint _2867 = _2865 * 40u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2881 = _2880.w;
                            uint _2883 = (_2865 * 40u) + 4u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2865 * 40u) + 8u;
                            _2908 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x));
                            uint _2911 = (_2865 * 40u) + 16u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2865 * 40u) + 20u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2865 * 40u) + 24u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2962 = (_2865 * 40u) + 28u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2987 = fma(_2202, _2975.z, fma(_2201, _2975.y, _2975.x * _2200)) + _2975.w;
                            _2988 = !((fma(_2202, _2956.z, fma(_2201, _2956.y, _2956.x * _2200)) + _2956.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2988)
                            {
                                float _3015 = _2880.x - _2200;
                                float _3016 = _2880.y - _2201;
                                float _3017 = _2880.z - _2202;
                                float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                                float _3021 = inversesqrt(_3018);
                                float _3022 = _3021 * _3015;
                                float _3023 = _3021 * _3016;
                                float _3024 = _3021 * _3017;
                                float _3028 = 1.0 - (_3018 / (_2881 * _2881));
                                float _4113 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3033 = sqrt(_3018) * _2896.w;
                                float _3035 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                                float _3036 = _3035 * _3035;
                                float _3039 = ((1.0 - _3036) * dot(vec3(_3022, _3023, _3024), vec3(_425, _428, _431))) + _3036;
                                float _3042 = _3033 * _3033;
                                float _3046 = (fma(_2202, _2924.z, fma(_2201, _2924.y, _2924.x * _2200)) + _2924.w) / _2987;
                                float _3047 = (fma(_2202, _2940.z, fma(_2201, _2940.y, _2940.x * _2200)) + _2940.w) / _2987;
                                float _3051 = 1.0 - dot(vec2(_3046, _3047), vec2(_3046, _3047));
                                float _4129 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3053 = _3052 * (((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3029) / ((_3042 * 0.699999988079071044921875) + 1.0));
                                float _3065 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                                float _3066 = 1.0 - _501;
                                float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                                float _3074 = _3073 * _3073;
                                float _3075 = _3074 * _3074;
                                float _3076 = _3022 - _2492;
                                float _3077 = _3023 - _2493;
                                float _3078 = _3024 - _2494;
                                float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                                float _3086 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2492, (-0.0) - _2493, (-0.0) - _2494));
                                float _4140 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3090 = dot(vec3(_425, _428, _431), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                                float _4151 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                                float _3098 = _3035 * _3074;
                                float _3099 = _3098 * _3098;
                                float _3105 = ((1.0 - _3099) * dot(vec3(_425, _428, _431), vec3(_3022, _3023, _3024))) + _3099;
                                float _4162 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3107 = 1.0 - _3074;
                                float _3117 = (0.5 / (((_3106 * ((_3089 * _3107) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3074) * _3089))) * _3106;
                                float _4173 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3127 = (_3052 * _3029) * (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) / ((_3097 * _3097) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3053 * _2896.z;
                                frontier_phi_85_pred_1 = _3053 * _2896.y;
                                frontier_phi_85_pred_2 = _3053 * _2896.x;
                                frontier_phi_85_pred_3 = _3127 * _2908.z;
                                frontier_phi_85_pred_4 = _3127 * _2908.y;
                                frontier_phi_85_pred_5 = _3127 * _2908.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3136 = frontier_phi_85_pred;
                            _3135 = frontier_phi_85_pred_1;
                            _3134 = frontier_phi_85_pred_2;
                            _3133 = frontier_phi_85_pred_3;
                            _3132 = frontier_phi_85_pred_4;
                            _3131 = frontier_phi_85_pred_5;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            if (_2855 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2855;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2840;
                        frontier_phi_79_pred_1 = _2839;
                        frontier_phi_79_pred_2 = _2838;
                        frontier_phi_79_pred_3 = _2837;
                        frontier_phi_79_pred_4 = _2836;
                        frontier_phi_79_pred_5 = _2835;
                    }
                    _2477 = frontier_phi_79_pred;
                    _2475 = frontier_phi_79_pred_1;
                    _2473 = frontier_phi_79_pred_2;
                    _2471 = frontier_phi_79_pred_3;
                    _2469 = frontier_phi_79_pred_4;
                    _2467 = frontier_phi_79_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2467;
                        _2627 = _2469;
                        _2628 = _2471;
                        _2629 = _2473;
                        _2630 = _2475;
                        _2631 = _2477;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2473;
                frontier_phi_60_61_ladder_1 = _2477;
                frontier_phi_60_61_ladder_2 = _2475;
                frontier_phi_60_61_ladder_3 = _2471;
                frontier_phi_60_61_ladder_4 = _2469;
                frontier_phi_60_61_ladder_5 = _2467;
            }
            else
            {
                frontier_phi_60_61_ladder = _2352;
                frontier_phi_60_61_ladder_1 = _2356;
                frontier_phi_60_61_ladder_2 = _2354;
                frontier_phi_60_61_ladder_3 = _2350;
                frontier_phi_60_61_ladder_4 = _2348;
                frontier_phi_60_61_ladder_5 = _2346;
            }
            _2466 = frontier_phi_60_61_ladder_5;
            _2468 = frontier_phi_60_61_ladder_4;
            _2470 = frontier_phi_60_61_ladder_3;
            _2472 = frontier_phi_60_61_ladder;
            _2474 = frontier_phi_60_61_ladder_2;
            _2476 = frontier_phi_60_61_ladder_1;
        }
        float _2481 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2258 = (_2481 * _2472) + _1695;
        _2260 = (_2481 * _2474) + _1697;
        _2262 = (_2481 * _2476) + _1699;
        _2264 = ((_2466 * _470) * _2481) + _2040;
        _2266 = ((_2468 * _472) * _2481) + _2042;
        _2268 = ((_2470 * _473) * _2481) + _2044;
    }
    else
    {
        _2258 = _1695;
        _2260 = _1697;
        _2262 = _1699;
        _2264 = _2040;
        _2266 = _2042;
        _2268 = _2044;
    }
    float _4189 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4200 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4211 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2285 = ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2258 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _485))) + ((_2264 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2286 = ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2260 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _485))) + ((_2266 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2287 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2262 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _485))) + ((_2268 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    uint _2288 = _444 + 6u;
    float _2296 = _404 / cbSceneParam._m0[86u].x;
    float _2297 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2372 = _2371 / _324;
        float _2383 = _2372 * _376;
        float _2384 = _377 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2386 = _2372 * _378;
        float _2388 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2389 = _2388 + cbSceneParam._m0[79u].w;
        float _2390 = cbSceneParam._m0[79u].w - _2384;
        float _2396 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2386 * _2386));
        float _2399 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2396;
        float _2404 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2406 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2385 - _2388) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2389 > 0.0) ? exp2(_2404 * _2389) : (2.0 - exp2(_2406 * _2389))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2399;
        }
        else
        {
            float _2527 = 1.0 / cbSceneParam._m0[80u].x;
            float _2528 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : max(_2389, _2390));
            float _2529 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : min(_2389, _2390));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            float _2539 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : min(_2529, 0.0));
            _2583 = ((abs(_2396 / _2385) * cbSceneParam._m0[80u].y) * ((((_2538 - _2539) * 2.0) - ((exp2(_2404 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0)))) - exp2(_2404 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0))))) * _2527)) - ((exp2(_2406 * _2538) - exp2(_2406 * _2539)) * _2527))) + (_2399 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2316);
        _2408 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2410 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2412 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2414 = _2594 * _2316;
    }
    else
    {
        _2408 = _2313;
        _2410 = _2314;
        _2412 = _2315;
        _2414 = _2316;
    }
    bool _2621;
    vec4 _2424;
    vec4 _2446;
    float _2448;
    float _2452;
    float _2453;
    float _2454;
    float _2455;
    bool _2465;
    for (;;)
    {
        _2424 = cbMatDynParam._m0[0u];
        float _2426 = roundEven(_2424.y);
        bool _2427 = _2426 == 3.0;
        float _2428 = log2(_2414);
        float _2435 = exp2(_2428 * cbSceneParam._m0[78u].x) * _2285;
        float _2436 = exp2(_2428 * cbSceneParam._m0[78u].y) * _2286;
        float _2437 = exp2(_2428 * cbSceneParam._m0[78u].z) * _2287;
        float _2444 = _392 + (-0.5);
        _2446 = cbMtdParam._m0[1u];
        _2448 = _2446.y * _2444;
        float _2451 = (_2426 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2452 = _2451 * (_2427 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2408)));
        _2453 = _2451 * (_2427 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2410)));
        _2454 = _2451 * (_2427 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2412)));
        _2455 = _2444 * 0.999000012874603271484375;
        _2465 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2465)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2455) < 0.5)
            {
                _2621 = true;
                break;
            }
        }
        uint _2562 = _446 + uint(_2424.w);
        if ((cbInstanceData._m0[_2562].w < 1.0) && ((cbInstanceData._m0[_2562].w + _2455) < 0.5))
        {
            _2621 = true;
            break;
        }
        if ((_2448 + _241) < _2446.x)
        {
            _2621 = true;
            break;
        }
        _2621 = false;
        break;
    }
    float _2826;
    if (_2621)
    {
        discard_state = true;
        _2826 = 0.0;
    }
    else
    {
        _2826 = cbInstanceData._m0[_2288].w;
    }
    SV_Target.x = _2452;
    SV_Target.y = _2453;
    SV_Target.z = _2454;
    SV_Target.w = _2826;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2288].w;
    discard_exit();
}


