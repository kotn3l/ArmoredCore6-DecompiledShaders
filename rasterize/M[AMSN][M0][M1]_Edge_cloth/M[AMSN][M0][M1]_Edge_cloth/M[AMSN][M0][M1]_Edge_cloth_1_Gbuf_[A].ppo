#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _133 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _134 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _135 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _140 = inversesqrt(dot(vec3(_133, _134, _135), vec3(_133, _134, _135)));
    float _147 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _148 = _147 * NORMAL.x;
    float _149 = _147 * NORMAL.y;
    float _150 = _147 * NORMAL.z;
    float _154 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _148;
        _163 = (-0.0) - _149;
        _164 = (-0.0) - _150;
    }
    else
    {
        _162 = _148;
        _163 = _149;
        _164 = _150;
    }
    vec4 _184 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.w;
    float _191 = _184.x * cbMtdParam._m0[9u].x;
    float _192 = _184.y * cbMtdParam._m0[9u].y;
    float _193 = _184.z * cbMtdParam._m0[9u].z;
    vec4 _205 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _209 = _205.z;
    float _213 = (_205.x * 2.0) + (-1.0);
    float _215 = (_205.y * 2.0) + (-1.0);
    float _216 = dot(vec2(_213, _215), vec2(_213, _215));
    float _420 = isnan(0.0) ? _216 : (isnan(_216) ? 0.0 : max(_216, 0.0));
    float _222 = sqrt(1.0 - (isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0))));
    float _225 = fma(_222, _162, fma(_215, _154 * TANGENT.x, (_140 * _133) * _213));
    float _228 = fma(_222, _163, fma(_215, _154 * TANGENT.y, (_140 * _134) * _213));
    float _231 = fma(_222, _164, fma(_215, _154 * TANGENT.z, (_140 * _135) * _213));
    float _235 = inversesqrt(dot(vec3(_225, _228, _231), vec3(_225, _228, _231)));
    float _431 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _442 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _237 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
    float _453 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _238 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
    float _464 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _239 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
    uint _241 = uint(roundEven(NORMAL.w));
    vec4 _246 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _248 = _246.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _311 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _475 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
        float _312 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
        float _316 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _486 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0))) - _312)) + _312) < ((_248 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _345;
    uint _268;
    vec4 _273;
    float _280;
    float _281;
    float _282;
    float _286;
    vec4 _290;
    float _292;
    float _293;
    bool _304;
    for (;;)
    {
        _268 = _241 * 13u;
        _273 = cbInstanceData._m0[(_268 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _277 = (cbMtdParam._m0[0u].x * _237) * _273.x;
        float _278 = (cbMtdParam._m0[0u].y * _238) * _273.y;
        float _279 = (cbMtdParam._m0[0u].z * _239) * _273.z;
        float _497 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
        _280 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
        float _508 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
        _281 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        float _519 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
        _282 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
        _286 = cbInstanceData._m0[_268 + 6u].w;
        float _287 = _248 + (-0.5);
        _290 = cbMtdParam._m0[1u];
        _292 = _290.y * _287;
        _293 = _287 * 0.999000012874603271484375;
        _304 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_304)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _293) < 0.5)
            {
                _345 = true;
                break;
            }
        }
        if ((_273.w < 1.0) && ((_273.w + _293) < 0.5))
        {
            _345 = true;
            break;
        }
        if ((_292 + _190) < _290.x)
        {
            _345 = true;
            break;
        }
        _345 = false;
        break;
    }
    if (_345)
    {
        discard_state = true;
    }
    bool _371 = cbMtdParam._m0[1u].z != 0.0;
    float _372 = _371 ? _286 : 0.0;
    SV_Target.x = ((_225 * 0.5) * _235) + 0.500488758087158203125;
    SV_Target.y = ((_228 * 0.5) * _235) + 0.500488758087158203125;
    SV_Target.z = ((_231 * 0.5) * _235) + 0.500488758087158203125;
    SV_Target.w = _372;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _371 ? _286 : TEXCOORD.z;
    SV_Target_2.x = _280;
    SV_Target_2.y = _281;
    SV_Target_2.z = _282;
    SV_Target_2.w = _371 ? _286 : (float(floatBitsToUint(cbInstanceData._m0[_268 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _372;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _372;
    discard_exit();
}


