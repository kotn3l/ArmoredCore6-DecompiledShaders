#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1085;
float _3508;
float _3509;
float _3510;
float _3511;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _236 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _249 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _235) + cbTextureTilingScale._m0[0u].z, (_236 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].y;
    float _256 = _249.y * cbMtdParam._m0[9u].z;
    float _257 = _249.z * cbMtdParam._m0[9u].w;
    vec4 _267 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _269 = _267.x;
    bool _276 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _293 = ((_276 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _269)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _269))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3520 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _296 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    vec4 _311 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _235) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _236) + cbTextureTilingScale._m0[2u].w));
    float _314 = _311.x + cbMtdParam._m0[11u].y;
    vec4 _326 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _235) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _236) + cbTextureTilingScale._m0[1u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3542 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    bool _347 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _364 = fma(_342, _209 * NORMAL.x, fma(_336, _216 * TANGENT.x, (_202 * _195) * _334));
    float _367 = fma(_342, _209 * NORMAL.y, fma(_336, _216 * TANGENT.y, (_202 * _196) * _334));
    float _370 = fma(_342, _209 * NORMAL.z, fma(_336, _216 * TANGENT.z, (_202 * _197) * _334));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _375 = _374 * _364;
    float _376 = _374 * _367;
    float _377 = _374 * _370;
    float _3553 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _378 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _379 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _380 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _381 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _382 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _383 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _388 = _276 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _439 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _429);
    float _440 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _429);
    float _441 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _429);
    float _445 = inversesqrt(dot(vec3(_439, _440, _441), vec3(_439, _440, _441)));
    float _446 = _439 * _445;
    float _447 = _440 * _445;
    float _448 = _441 * _445;
    vec4 _453 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _455 = _453.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _764 = sqrt(((_439 * _439) + (_440 * _440)) + (_441 * _441));
        float _770 = (cbMatDynParam._m0[5u].x * _764) + cbMatDynParam._m0[5u].y;
        float _3619 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _775 = (cbMatDynParam._m0[5u].z * _764) + cbMatDynParam._m0[5u].w;
        float _3630 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _771)) + _771) < ((_455 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _466 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _467 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _469 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _471 = _469.w;
    float _491 = fma(_377, cbSceneParam._m0[5u].z, fma(_376, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _375));
    float _494 = fma(_377, cbSceneParam._m0[6u].z, fma(_376, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _375));
    float _497 = fma(_377, cbSceneParam._m0[7u].z, fma(_376, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _375));
    vec4 _499 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _501 = _499.x;
    float _513 = (((_499.y - _379) + (_499.w * _379)) * cbMtdParam._m0[3u].x) + _379;
    float _530 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_501 * _501)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _539 = (((cbMatDynParam._m0[15u].x - _383) * cbMatDynParam._m0[15u].w) * _530) + _383;
    float _548 = ((_530 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _513)) + _513;
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = _572 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * _380) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * _381) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * _382) * cbInstanceData._m0[_575].z;
    float _3641 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _587 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _592 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _603 = (((_592.x - _539) + (_592.w * _539)) * cbMtdParam._m0[3u].x) + _539;
    float _616 = (cbMtdParam._m0[3u].x * (((_584 * _471) - _584) + _587.x)) + _584;
    float _617 = (cbMtdParam._m0[3u].x * (((_585 * _471) - _585) + _587.y)) + _585;
    float _618 = (cbMtdParam._m0[3u].x * (((_586 * _471) - _586) + _587.z)) + _586;
    vec4 _619 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _632 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_539 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_539 * (_381 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_539 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _619.z;
    float _636 = _632 * cbMatDynParam._m0[13u].w;
    float _646 = (_636 * (cbMatDynParam._m0[13u].x - _616)) + _616;
    float _647 = (_636 * (cbMatDynParam._m0[13u].y - _617)) + _617;
    float _648 = (_636 * (cbMatDynParam._m0[13u].z - _618)) + _618;
    float _656 = ((_632 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _603)) + _603;
    float _657 = 1.0 - _656;
    float _658 = _657 * _646;
    float _659 = _657 * _647;
    float _660 = _657 * _648;
    float _664 = (_646 + (-0.039999999105930328369140625)) * _656;
    float _665 = (_647 + (-0.039999999105930328369140625)) * _656;
    float _666 = (_648 + (-0.039999999105930328369140625)) * _656;
    float _667 = _664 + 0.039999999105930328369140625;
    float _668 = _665 + 0.039999999105930328369140625;
    float _669 = _666 + 0.039999999105930328369140625;
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _466, cbSceneParam._m0[86u].y * _467));
    float _681 = _678.x * TEXCOORD_5.z;
    float _682 = dot(vec3(_375, _376, _377), vec3(_446, _447, _448));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _375) - _446;
    float _690 = (_685 * _376) - _447;
    float _691 = (_685 * _377) - _448;
    float _695 = abs(dot(vec3(_446, _447, _448), vec3(_375, _376, _377)));
    float _3674 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_548);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _809 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _813 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _817 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _842 = _745 + _375;
        float _843 = _749 + _376;
        float _844 = _753 + _377;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _809;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _813;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _817;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_809 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_813 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_817 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_375, _376, _377), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3722 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_375, _376, _377), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3755 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_375, _376, _377), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3788 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1086 = _914;
        _1087 = _913;
        _1088 = _925;
        _1089 = _924;
        _1090 = _923;
        _1091 = _935;
        _1092 = _934;
        _1093 = _933;
        _1094 = _948;
        _1095 = _947;
        _1096 = _946;
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _1085;
        _1086 = _1085;
        _1087 = _1085;
        _1088 = _1085;
        _1089 = _1085;
        _1090 = _1085;
        _1091 = _1085;
        _1092 = _1085;
        _1093 = _1085;
        _1094 = _1085;
        _1095 = _1085;
        _1096 = _1085;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1128 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1132 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1136 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1159 = _745 + _375;
        float _1160 = _749 + _376;
        float _1161 = _753 + _377;
        float _1171 = fma(_1161, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159)) - _1128;
        float _1172 = fma(_1161, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159)) - _1132;
        float _1173 = fma(_1161, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159)) - _1136;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1128 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1132 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[35u].z) + ((((((_1136 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1227 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1194.x + (-0.5));
        float _1229 = _1227 * (_1194.y + (-0.5));
        float _1230 = _1227 * (_1194.z + (-0.5));
        float _1237 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1201.x + (-0.5));
        float _1239 = _1237 * (_1201.y + (-0.5));
        float _1240 = _1237 * (_1201.z + (-0.5));
        float _1247 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1208.x + (-0.5));
        float _1249 = _1247 * (_1208.y + (-0.5));
        float _1250 = _1247 * (_1208.z + (-0.5));
        float _1257 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1215.x + (-0.5));
        float _1259 = _1257 * (_1215.y + (-0.5));
        float _1260 = _1257 * (_1215.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_375, _376, _377), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3851 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1291 + 1.0))) + _1296) * _1261;
        float _1306 = _1229 * 0.5;
        float _1307 = _1239 * 0.5;
        float _1308 = _1249 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_375, _376, _377), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3884 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1333 + 1.0))) + _1338) * _1262;
        float _1348 = _1230 * 0.5;
        float _1349 = _1240 * 0.5;
        float _1350 = _1250 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_375, _376, _377), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3917 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1375 + 1.0))) + _1380) * _1263;
        _1397 = _1230;
        _1398 = _1229;
        _1399 = _1228;
        _1400 = _1240;
        _1401 = _1239;
        _1402 = _1238;
        _1403 = _1250;
        _1404 = _1249;
        _1405 = _1248;
        _1406 = _1263;
        _1407 = _1262;
        _1408 = _1261;
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1085;
        _1398 = _1085;
        _1399 = _1085;
        _1400 = _1085;
        _1401 = _1085;
        _1402 = _1085;
        _1403 = _1085;
        _1404 = _1085;
        _1405 = _1085;
        _1406 = _1085;
        _1407 = _1085;
        _1408 = _1085;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1097)) + _1097;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1444 = fma(_1423, cbSceneParam._m0[89u].z, fma(_1422, cbSceneParam._m0[89u].y, _1421 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1423, cbSceneParam._m0[90u].z, fma(_1422, cbSceneParam._m0[90u].y, _1421 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1423, cbSceneParam._m0[91u].z, fma(_1422, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1421));
    float _1465 = _689 * 0.5;
    float _1466 = _690 * 0.5;
    float _1467 = _691 * 0.5;
    float _1468 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1471 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1474 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1481 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1084, _1088, _1091, _1094));
        float _1485 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1489 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1496 = dot(vec4(cbModelParam._m0[39u]), vec4(_1465, _1466, _1467, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1465, _1466, _1467, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _548);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1592 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1595 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1623 = frontier_phi_17_15_ladder;
        }
        float _1830;
        if (_1592 > 0.0)
        {
            _1830 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1830 = frontier_phi_26_22_ladder;
        }
        float _2084;
        if (_1595 > 0.0)
        {
            _2084 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2084 = frontier_phi_38_33_ladder;
        }
        float _2086 = isnan(_1830) ? _1623 : (isnan(_1623) ? _1830 : min(_1623, _1830));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1589) + _1578;
        float _2092 = (_2087 * _1592) + _1582;
        float _2093 = (_2087 * _1595) + _1586;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_16_38_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_16_38_ladder_2;
        _1613 = frontier_phi_16_38_ladder_1;
        _1615 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _548);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1691 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1694 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1835;
        if (_1688 > 0.0)
        {
            _1835 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1835 = frontier_phi_28_24_ladder;
        }
        float _2111;
        if (_1691 > 0.0)
        {
            _2111 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2111 = frontier_phi_40_35_ladder;
        }
        float _2324;
        if (_1694 > 0.0)
        {
            _2324 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2324 = frontier_phi_49_46_ladder;
        }
        float _2326 = isnan(_2111) ? _1835 : (isnan(_1835) ? _2111 : min(_1835, _2111));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1688) + _1677;
        float _2332 = (_2327 * _1691) + _1681;
        float _2333 = (_2327 * _1694) + _1685;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_25_49_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_25_49_ladder_2;
        _1715 = frontier_phi_25_49_ladder_1;
        _1717 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1620);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_716 * _667) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1713 - _1611)) + _1611);
    float _1732 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1734 = (((_716 * _669) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1763 = _681 + (-1.0);
    float _1768 = (cbLight._m0[_1756].x * _1763) + 1.0;
    float _1769 = (cbLight._m0[_1756].y * _1763) + 1.0;
    float _1770 = (cbLight._m0[_1756].z * _1763) + 1.0;
    float _1771 = (cbLight._m0[_1756].w * _1763) + 1.0;
    uint _1772 = _1755 + 5u;
    float _1778 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1782 = _1755 + 4u;
    float _1789 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1793 = _1755 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_375, _376, _377));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_375, _376, _377));
    float _4053 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _4064 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1772].x * _1778) * _1814) + ((cbLight._m0[_1782].x * _1789) * _1812);
    float _1822 = ((_1778 * cbLight._m0[_1772].y) * _1814) + ((_1789 * cbLight._m0[_1782].y) * _1812);
    float _1823 = ((_1778 * cbLight._m0[_1772].z) * _1814) + ((_1789 * cbLight._m0[_1782].z) * _1812);
    uvec4 _1827 = floatBitsToUint(cbLight._m0[_1755 + 12u]);
    bool _1829 = _1827.x == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1829)
    {
        _1840 = _1821;
        _1842 = _1822;
        _1844 = _1823;
    }
    else
    {
        uint _1848 = _1755 + 6u;
        float _1864 = (dot(vec3(cbLight._m0[_1755 + 2u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1865 = _1864 * _1864;
        float _4075 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1867 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _1840 = (((cbLight._m0[_1848].x * 0.3183098733425140380859375) * _1866) * _1867) + _1821;
        _1842 = (((cbLight._m0[_1848].y * 0.3183098733425140380859375) * _1866) * _1867) + _1822;
        _1844 = (((cbLight._m0[_1848].z * 0.3183098733425140380859375) * _1866) * _1867) + _1823;
    }
    bool _1847 = _1827.y == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1847)
    {
        _1885 = _1840;
        _1887 = _1842;
        _1889 = _1844;
    }
    else
    {
        uint _2055 = _1755 + 7u;
        float _2071 = (dot(vec3(cbLight._m0[_1755 + 3u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4091 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2074 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1885 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1840;
        _1887 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1842;
        _1889 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1844;
    }
    uint _1892 = _1755 + 8u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _548) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1755].x + _446;
    float _1908 = cbLight._m0[_1755].y + _447;
    float _1909 = cbLight._m0[_1755].z + _448;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1755].xyz));
    float _4107 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1921 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1922 = dot(vec3(_375, _376, _377), vec3(_1914, _1915, _1916));
    float _4129 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1914, _1915, _1916));
    float _4140 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1906 * _1906;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
    float _1943 = 0.959999978542327880859375 - _664;
    float _1945 = 0.959999978542327880859375 - _665;
    float _1946 = 0.959999978542327880859375 - _666;
    float _1953 = 1.0 - _1906;
    float _1964 = (0.5 / (((_1921 * ((_1920 * _1953) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _1953) + _1906) * _1920))) * _1920;
    float _4151 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    uint _1977 = _1755 + 9u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _548) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1793].x + _446;
    float _1991 = cbLight._m0[_1793].y + _447;
    float _1992 = cbLight._m0[_1793].z + _448;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1793].xyz));
    float _4162 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2004 = dot(vec3(_375, _376, _377), vec3(_1997, _1998, _1999));
    float _4173 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1997, _1998, _1999));
    float _4184 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1989 * _1989;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0);
    float _2030 = 1.0 - _1989;
    float _2040 = (0.5 / (((_1921 * ((_2003 * _2030) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2030) + _1989) * _2003))) * _2003;
    float _4195 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    float _2052 = (((((_2023 * _1943) + _667) * cbLight._m0[_1977].x) * _2042) * _1778) + (((((_1942 * _1943) + _667) * cbLight._m0[_1892].x) * _1966) * _1789);
    float _2053 = (((((_2023 * _1945) + _668) * cbLight._m0[_1977].y) * _2042) * _1778) + (((((_1942 * _1945) + _668) * cbLight._m0[_1892].y) * _1966) * _1789);
    float _2054 = (((((_2023 * _1946) + _669) * cbLight._m0[_1977].z) * _2042) * _1778) + (((((_1942 * _1946) + _669) * cbLight._m0[_1892].z) * _1966) * _1789);
    float _2116;
    float _2118;
    float _2120;
    if (_1829)
    {
        _2116 = _2052;
        _2118 = _2053;
        _2120 = _2054;
    }
    else
    {
        uint _2122 = _1755 + 2u;
        uint _2126 = _1755 + 10u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _548) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _446;
        float _2143 = cbLight._m0[_2122].y + _447;
        float _2144 = cbLight._m0[_2122].z + _448;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2122].xyz));
        float _4206 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2156 = dot(vec3(_375, _376, _377), vec3(_2149, _2150, _2151));
        float _4217 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4228 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0);
        float _2182 = 1.0 - _2141;
        float _2192 = (0.5 / (((_1921 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2182) + _2141) * _2155))) * _2155;
        float _4239 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2194 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2195 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2116 = (((((_2175 * _1943) + _667) * cbLight._m0[_2126].x) * _2194) * _2195) + _2052;
        _2118 = (((((_2175 * _1945) + _668) * cbLight._m0[_2126].y) * _2194) * _2195) + _2053;
        _2120 = (((((_2175 * _1946) + _669) * cbLight._m0[_2126].z) * _2194) * _2195) + _2054;
    }
    float _2230;
    float _2232;
    float _2234;
    if (_1847)
    {
        _2230 = _2116;
        _2232 = _2118;
        _2234 = _2120;
    }
    else
    {
        uint _2241 = _1755 + 3u;
        uint _2245 = _1755 + 11u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _548) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _446;
        float _2262 = cbLight._m0[_2241].y + _447;
        float _2263 = cbLight._m0[_2241].z + _448;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2241].xyz));
        float _4255 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2275 = dot(vec3(_375, _376, _377), vec3(_2268, _2269, _2270));
        float _4266 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4277 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
        float _2301 = 1.0 - _2260;
        float _2311 = (0.5 / (((_1921 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2301) + _2260) * _2274))) * _2274;
        float _4288 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2230 = (((((_2294 * _1943) + _667) * cbLight._m0[_2245].x) * _2313) * _2314) + _2116;
        _2232 = (((((_2294 * _1945) + _668) * cbLight._m0[_2245].y) * _2313) * _2314) + _2118;
        _2234 = (((((_2294 * _1946) + _669) * cbLight._m0[_2245].z) * _2313) * _2314) + _2120;
    }
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_1753.y == 0u)
    {
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2389;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2389;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2389;
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.x;
        uint _2416 = uint((float(_2404.y) * floor(float(uint(cbSceneParam._m0[85u].y * _467) / _2405))) + floor(float(uint(cbSceneParam._m0[85u].x * _466) / _2405)));
        float _2426 = (log2(_2392 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2427 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        uint _2430 = uint(isnan(14.0) ? _2427 : (isnan(_2427) ? 14.0 : min(_2427, 14.0)));
        uvec4 _2435 = texelFetch(g_lightClusterGridBuffer, int(((_2430 << 2u) + (_2416 << 6u)) >> 2u));
        uint _2436 = _2435.x;
        uint _2437 = _2404.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2437 >> 4u) & 15u)) + 4294967295u) & _2436) == 0u) || ((_2437 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2745)
                {
                    frontier_phi_66_pred = _2729;
                    frontier_phi_66_pred_1 = _2734;
                    frontier_phi_66_pred_2 = _2733;
                    frontier_phi_66_pred_3 = _2732;
                    frontier_phi_66_pred_4 = _2731;
                    frontier_phi_66_pred_5 = _2730;
                }
                else
                {
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    uint _2880;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2744;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2884 = uint(findLSB(_2880)) + (_2735 << 5u);
                        uint _2881 = (_2880 + 4294967295u) & _2880;
                        uint _2886 = _2884 * 48u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2906 = (_2884 * 48u) + 4u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2925 = (_2884 * 48u) + 8u;
                        vec3 _2936 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x));
                        float _2940 = _2900.x - _2390;
                        float _2941 = _2900.y - _2391;
                        float _2942 = _2900.z - _2392;
                        float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                        float _2946 = inversesqrt(_2943);
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2950 = dot(vec3(_491, _494, _497), vec3(_2947, _2948, _2949));
                        float _2955 = 1.0 - (_2943 * _2900.w);
                        float _4314 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2957 = sqrt(_2943) * _2919.w;
                        float _2960 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2950) + _2961;
                        float _2967 = _2957 * _2957;
                        float _2971 = ((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2956) / ((_2967 * 0.699999988079071044921875) + 1.0);
                        float _2975 = (-0.0) - _2390;
                        float _2976 = (-0.0) - _2391;
                        float _2977 = (-0.0) - _2392;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2992 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                        float _2993 = 1.0 - _697;
                        float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                        float _3001 = _3000 * _3000;
                        float _3002 = _3001 * _3001;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3013 = dot(vec3(_491, _494, _497), vec3(_2982, _2983, _2984));
                        float _4330 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3017 = dot(vec3(_491, _494, _497), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                        float _4341 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                        float _3025 = _2960 * _3001;
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _2950) + _3026;
                        float _4352 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3031 = 1.0 - _3001;
                        float _3041 = (0.5 / (((_3030 * ((_3016 * _3031) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _3001) * _3016))) * _3030;
                        float _4363 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3052 = (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3024 * _3024) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125))) * _2956;
                        _2804 = (_2971 * _2919.x) + _2877;
                        _2805 = (_2971 * _2919.y) + _2878;
                        _2806 = (_2971 * _2919.z) + _2879;
                        _2801 = (_3052 * _2936.x) + _2874;
                        _2802 = (_3052 * _2936.y) + _2875;
                        _2803 = (_3052 * _2936.z) + _2876;
                        if (_2881 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2881;
                        }
                    }
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                _2569 = frontier_phi_66_pred;
                _2579 = frontier_phi_66_pred_1;
                _2577 = frontier_phi_66_pred_2;
                _2575 = frontier_phi_66_pred_3;
                _2573 = frontier_phi_66_pred_4;
                _2571 = frontier_phi_66_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2569;
                    _2730 = _2571;
                    _2731 = _2573;
                    _2732 = _2575;
                    _2733 = _2577;
                    _2734 = _2579;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2585) & _2436) == 0u)
        {
            _2697 = _2568;
            _2699 = _2570;
            _2701 = _2572;
            _2703 = _2574;
            _2705 = _2576;
            _2707 = _2578;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
            float _2723 = _2722 * _2390;
            float _2724 = _2722 * _2391;
            float _2725 = _2722 * _2392;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2857 = _2568;
                float _2858 = _2570;
                float _2859 = _2572;
                float _2860 = _2574;
                float _2861 = _2576;
                float _2862 = _2578;
                uint _2863 = _2585;
                uint _2872;
                bool _2873;
                for (;;)
                {
                    _2872 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                    _2873 = _2872 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2873)
                    {
                        frontier_phi_77_pred = _2862;
                        frontier_phi_77_pred_1 = _2861;
                        frontier_phi_77_pred_2 = _2860;
                        frontier_phi_77_pred_3 = _2859;
                        frontier_phi_77_pred_4 = _2858;
                        frontier_phi_77_pred_5 = _2857;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        uint _3085 = _2872;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3170;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3096 = ((_2863 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3096 * 40u) + 20u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3096 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3096 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2392, _3205.z, fma(_2391, _3205.y, _3205.x * _2390)) + _3205.w;
                            _3218 = !((fma(_2392, _3186.z, fma(_2391, _3186.y, _3186.x * _2390)) + _3186.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3111.x - _2390;
                                float _3246 = _3111.y - _2391;
                                float _3247 = _3111.z - _2392;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3112 * _3112));
                                float _4374 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3263 = sqrt(_3248) * _3127.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_491, _494, _497))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2392, _3154.z, fma(_2391, _3154.y, _3154.x * _2390)) + _3154.w) / _3217;
                                float _3277 = (fma(_2392, _3170.z, fma(_2391, _3170.y, _3170.x * _2390)) + _3170.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4390 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _697;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2723;
                                float _3307 = _3253 - _2724;
                                float _3308 = _3254 - _2725;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_491, _494, _497), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4401 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3320 = dot(vec3(_491, _494, _497), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4412 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_491, _494, _497), vec3(_3252, _3253, _3254))) + _3329;
                                float _4423 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4434 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3283 * _3127.y;
                                frontier_phi_83_pred_1 = _3283 * _3127.x;
                                frontier_phi_83_pred_2 = _3357 * _3139.z;
                                frontier_phi_83_pred_3 = _3357 * _3139.y;
                                frontier_phi_83_pred_4 = _3357 * _3139.x;
                                frontier_phi_83_pred_5 = _3283 * _3127.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_83_pred;
                            _3364 = frontier_phi_83_pred_1;
                            _3363 = frontier_phi_83_pred_2;
                            _3362 = frontier_phi_83_pred_3;
                            _3361 = frontier_phi_83_pred_4;
                            _3366 = frontier_phi_83_pred_5;
                            _3069 = _3364 + _3082;
                            _3070 = _3365 + _3083;
                            _3071 = _3366 + _3084;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3068 = _3363 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    _2708 = frontier_phi_77_pred;
                    _2706 = frontier_phi_77_pred_1;
                    _2704 = frontier_phi_77_pred_2;
                    _2702 = frontier_phi_77_pred_3;
                    _2700 = frontier_phi_77_pred_4;
                    _2698 = frontier_phi_77_pred_5;
                    uint _2864 = _2863 + 1u;
                    if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2857 = _2698;
                        _2858 = _2700;
                        _2859 = _2702;
                        _2860 = _2704;
                        _2861 = _2706;
                        _2862 = _2708;
                        _2863 = _2864;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2702;
                frontier_phi_58_59_ladder_1 = _2708;
                frontier_phi_58_59_ladder_2 = _2706;
                frontier_phi_58_59_ladder_3 = _2704;
                frontier_phi_58_59_ladder_4 = _2700;
                frontier_phi_58_59_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_58_59_ladder = _2572;
                frontier_phi_58_59_ladder_1 = _2578;
                frontier_phi_58_59_ladder_2 = _2576;
                frontier_phi_58_59_ladder_3 = _2574;
                frontier_phi_58_59_ladder_4 = _2570;
                frontier_phi_58_59_ladder_5 = _2568;
            }
            _2697 = frontier_phi_58_59_ladder_5;
            _2699 = frontier_phi_58_59_ladder_4;
            _2701 = frontier_phi_58_59_ladder;
            _2703 = frontier_phi_58_59_ladder_3;
            _2705 = frontier_phi_58_59_ladder_2;
            _2707 = frontier_phi_58_59_ladder_1;
        }
        float _2712 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2449 = (_2712 * _2703) + _1885;
        _2451 = (_2712 * _2705) + _1887;
        _2453 = (_2712 * _2707) + _1889;
        _2455 = ((_2697 * _667) * _2712) + _2230;
        _2457 = ((_2699 * _668) * _2712) + _2232;
        _2459 = ((_2701 * _669) * _2712) + _2234;
    }
    else
    {
        _2449 = _1885;
        _2451 = _1887;
        _2453 = _1889;
        _2455 = _2230;
        _2457 = _2232;
        _2459 = _2234;
    }
    uint _2465 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _2471 = cbInstanceData._m0[_2465].x * (_347 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2472 = cbInstanceData._m0[_2465].y * (_347 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2473 = cbInstanceData._m0[_2465].z * (_347 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4450 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4461 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4472 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4483 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2491 = (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2449 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _681))) + ((_2455 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2471;
    float _2493 = (_2472 + ((_2457 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2451 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _681)));
    float _2495 = (_2473 + ((_2459 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2453 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _681)));
    float _2496 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2497 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2498 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2504 = cbMtdParam._m0[2u].x * _2471;
    float _2505 = cbMtdParam._m0[2u].y * _2472;
    float _2506 = cbMtdParam._m0[2u].z * _2473;
    float _4509 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2508 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2513 = cbInstanceData._m0[_572 + 6u].w * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)));
    float _2518 = _466 / cbSceneParam._m0[86u].x;
    float _2519 = _467 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _388 : (isnan(_388) ? cbSceneParam._m0[77u].w : min(_388, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_388 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_388) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _388 : min(cbSceneParam._m0[80u].w, _388));
        float _2594 = _2593 / _388;
        float _2605 = _2594 * _439;
        float _2606 = _440 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2608 = _2594 * _441;
        float _2610 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2611 = _2610 + cbSceneParam._m0[79u].w;
        float _2612 = cbSceneParam._m0[79u].w - _2606;
        float _2618 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2608 * _2608));
        float _2621 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2618;
        float _2626 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2628 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2607 - _2610) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2611 > 0.0) ? exp2(_2626 * _2611) : (2.0 - exp2(_2628 * _2611))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2621;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : max(_2611, _2612));
            float _2760 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : min(_2611, _2612));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2814 = ((abs(_2618 / _2607) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2626 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2626 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2628 * _2769) - exp2(_2628 * _2770)) * _2758))) + (_2621 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2538);
        _2630 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2632 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2634 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2636 = _2825 * _2538;
    }
    else
    {
        _2630 = _2535;
        _2632 = _2536;
        _2634 = _2537;
        _2636 = _2538;
    }
    bool _2852;
    vec4 _2646;
    vec4 _2668;
    float _2670;
    float _2674;
    float _2675;
    float _2676;
    float _2679;
    float _2682;
    float _2685;
    float _2686;
    bool _2696;
    for (;;)
    {
        _2646 = cbMatDynParam._m0[0u];
        float _2648 = roundEven(_2646.y);
        bool _2649 = _2648 == 3.0;
        float _2650 = log2(_2636);
        float _2654 = exp2(_2650 * cbSceneParam._m0[78u].x);
        float _2655 = exp2(_2650 * cbSceneParam._m0[78u].y);
        float _2656 = exp2(_2650 * cbSceneParam._m0[78u].z);
        float _2657 = _2654 * _2496;
        float _2658 = _2655 * _2497;
        float _2659 = _2656 * _2498;
        float _2666 = _455 + (-0.5);
        _2668 = cbMtdParam._m0[1u];
        _2670 = _2668.y * _2666;
        float _2673 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2674 = _2673 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2630)));
        _2675 = _2673 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2632)));
        _2676 = _2673 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2634)));
        _2679 = ((_2504 * _2508) * _2654) * _2673;
        _2682 = ((_2505 * _2508) * _2655) * _2673;
        _2685 = ((_2506 * _2508) * _2656) * _2673;
        _2686 = _2666 * 0.999000012874603271484375;
        _2696 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2696)
        {
            if ((cbInstanceData._m0[_572 + 7u].x + _2686) < 0.5)
            {
                _2852 = true;
                break;
            }
        }
        uint _2793 = _574 + uint(_2646.w);
        if ((cbInstanceData._m0[_2793].w < 1.0) && ((cbInstanceData._m0[_2793].w + _2686) < 0.5))
        {
            _2852 = true;
            break;
        }
        if ((_2670 + 1.0) < _2668.x)
        {
            _2852 = true;
            break;
        }
        _2852 = false;
        break;
    }
    float _3057;
    if (_2852)
    {
        discard_state = true;
        _3057 = 0.0;
    }
    else
    {
        _3057 = _2513;
    }
    SV_Target.x = _2674;
    SV_Target.y = _2675;
    SV_Target.z = _2676;
    SV_Target.w = _3057;
    SV_Target_1.x = _2679;
    SV_Target_1.y = _2682;
    SV_Target_1.z = _2685;
    SV_Target_1.w = _2513;
    discard_exit();
}


