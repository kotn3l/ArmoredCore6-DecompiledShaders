#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_4;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_3;
layout(location = 8) in vec4 TEXCOORD_4;
layout(location = 9) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec3 TEXCOORD_5;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    float _197 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _199 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    precise float _210 = float(int(uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_4, int(0u))).y)) + (-1.0);
    float _604 = isnan(0.0) ? cbMtdParam._m0[3u].z : (isnan(cbMtdParam._m0[3u].z) ? 0.0 : max(cbMtdParam._m0[3u].z, 0.0));
    precise float _218 = (isnan(1.0) ? _604 : (isnan(_604) ? 1.0 : min(_604, 1.0))) * _210;
    precise float _219 = TEXCOORD_1.x * 255.0;
    precise float _221 = TEXCOORD_1.y * 255.0;
    precise float _222 = _221 * 256.0;
    precise float _224 = _219 + _222;
    precise float _225 = _224 + 0.5;
    float _227 = floor(_218);
    uint _228 = uint(int(_225));
    uint _229 = uint(int(_227));
    vec4 _230 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_228, _229)), int(0u));
    float _232 = _230.x;
    float _233 = _230.y;
    float _234 = _230.z;
    precise float _242 = _227 + 1.0;
    uint _244 = uint(int(isnan(_210) ? _242 : (isnan(_242) ? _210 : min(_242, _210))));
    vec4 _245 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_228, _244)), int(0u));
    float _250 = fract(_218);
    vec4 _263 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_228, _229)), int(0u));
    float _265 = _263.x;
    float _266 = _263.y;
    float _267 = _263.z;
    vec4 _268 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_228, _244)), int(0u));
    precise float _273 = _268.x - _265;
    precise float _274 = _268.y - _266;
    precise float _275 = _268.z - _267;
    precise float _276 = _250 * _273;
    precise float _277 = _250 * _274;
    precise float _278 = _250 * _275;
    precise float _279 = _265 + _276;
    precise float _280 = _266 + _277;
    precise float _281 = _267 + _278;
    uint _286 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _288 = texelFetch(g_InstanceIndexBuffer, int(_286));
    uint _289 = _288.x;
    precise float _290 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _293 = isnan(_290) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _290 : max(0.001000000047497451305389404296875, _290));
    precise float _295 = BLENDWEIGHT.x / _293;
    precise float _296 = BLENDWEIGHT.y / _293;
    precise float _297 = BLENDWEIGHT.z / _293;
    precise float _298 = BLENDWEIGHT.w / _293;
    uvec4 _305 = floatBitsToUint(cbInstanceData._m0[(_289 * 13u) + 4u]);
    uint _306 = _305.x;
    uint _308 = (_306 + uint(float(BLENDINDICES.x))) * 3u;
    uint _315 = _308 + 1u;
    uint _322 = _308 + 2u;
    precise float _329 = _295 * cbObjMatrix._m0[_308].x;
    precise float _330 = _295 * cbObjMatrix._m0[_315].x;
    precise float _331 = _295 * cbObjMatrix._m0[_322].x;
    precise float _332 = _295 * cbObjMatrix._m0[_308].y;
    precise float _333 = _295 * cbObjMatrix._m0[_315].y;
    precise float _334 = _295 * cbObjMatrix._m0[_322].y;
    precise float _335 = _295 * cbObjMatrix._m0[_308].z;
    precise float _336 = _295 * cbObjMatrix._m0[_315].z;
    precise float _337 = _295 * cbObjMatrix._m0[_322].z;
    precise float _338 = _295 * cbObjMatrix._m0[_308].w;
    precise float _339 = _295 * cbObjMatrix._m0[_315].w;
    precise float _340 = _295 * cbObjMatrix._m0[_322].w;
    uint _343 = (_306 + uint(float(BLENDINDICES.y))) * 3u;
    uint _350 = _343 + 1u;
    uint _357 = _343 + 2u;
    precise float _364 = _296 * cbObjMatrix._m0[_343].x;
    precise float _365 = _296 * cbObjMatrix._m0[_350].x;
    precise float _366 = _296 * cbObjMatrix._m0[_357].x;
    precise float _367 = _296 * cbObjMatrix._m0[_343].y;
    precise float _368 = _296 * cbObjMatrix._m0[_350].y;
    precise float _369 = _296 * cbObjMatrix._m0[_357].y;
    precise float _370 = _296 * cbObjMatrix._m0[_343].z;
    precise float _371 = _296 * cbObjMatrix._m0[_350].z;
    precise float _372 = _296 * cbObjMatrix._m0[_357].z;
    precise float _373 = _296 * cbObjMatrix._m0[_343].w;
    precise float _374 = _296 * cbObjMatrix._m0[_350].w;
    precise float _375 = _296 * cbObjMatrix._m0[_357].w;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    uint _390 = (_306 + uint(float(BLENDINDICES.z))) * 3u;
    uint _397 = _390 + 1u;
    uint _404 = _390 + 2u;
    precise float _411 = _297 * cbObjMatrix._m0[_390].x;
    precise float _412 = _297 * cbObjMatrix._m0[_397].x;
    precise float _413 = _297 * cbObjMatrix._m0[_404].x;
    precise float _414 = _297 * cbObjMatrix._m0[_390].y;
    precise float _415 = _297 * cbObjMatrix._m0[_397].y;
    precise float _416 = _297 * cbObjMatrix._m0[_404].y;
    precise float _417 = _297 * cbObjMatrix._m0[_390].z;
    precise float _418 = _297 * cbObjMatrix._m0[_397].z;
    precise float _419 = _297 * cbObjMatrix._m0[_404].z;
    precise float _420 = _297 * cbObjMatrix._m0[_390].w;
    precise float _421 = _297 * cbObjMatrix._m0[_397].w;
    precise float _422 = _297 * cbObjMatrix._m0[_404].w;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    uint _437 = (_306 + uint(float(BLENDINDICES.w))) * 3u;
    uint _444 = _437 + 1u;
    uint _451 = _437 + 2u;
    precise float _458 = _298 * cbObjMatrix._m0[_437].x;
    precise float _459 = _298 * cbObjMatrix._m0[_444].x;
    precise float _460 = _298 * cbObjMatrix._m0[_451].x;
    precise float _461 = _298 * cbObjMatrix._m0[_437].y;
    precise float _462 = _298 * cbObjMatrix._m0[_444].y;
    precise float _463 = _298 * cbObjMatrix._m0[_451].y;
    precise float _464 = _298 * cbObjMatrix._m0[_437].z;
    precise float _465 = _298 * cbObjMatrix._m0[_444].z;
    precise float _466 = _298 * cbObjMatrix._m0[_451].z;
    precise float _467 = _298 * cbObjMatrix._m0[_437].w;
    precise float _468 = _298 * cbObjMatrix._m0[_444].w;
    precise float _469 = _298 * cbObjMatrix._m0[_451].w;
    precise float _470 = _423 + _458;
    precise float _471 = _424 + _459;
    precise float _472 = _425 + _460;
    precise float _473 = _426 + _461;
    precise float _474 = _427 + _462;
    precise float _475 = _428 + _463;
    precise float _476 = _429 + _464;
    precise float _477 = _430 + _465;
    precise float _478 = _431 + _466;
    precise float _479 = _432 + _467;
    precise float _480 = _433 + _468;
    precise float _481 = _434 + _469;
    precise float _482 = POSITION.x * _470;
    precise float _483 = POSITION.y * _473;
    precise float _484 = _483 + _482;
    precise float _485 = POSITION.z * _476;
    precise float _486 = _485 + _484;
    precise float _487 = 1.0 * _479;
    precise float _488 = _487 + _486;
    precise float _489 = POSITION.x * _471;
    precise float _490 = POSITION.y * _474;
    precise float _491 = _490 + _489;
    precise float _492 = POSITION.z * _477;
    precise float _493 = _492 + _491;
    precise float _494 = 1.0 * _480;
    precise float _495 = _494 + _493;
    precise float _496 = POSITION.x * _472;
    precise float _497 = POSITION.y * _475;
    precise float _498 = _497 + _496;
    precise float _499 = POSITION.z * _478;
    precise float _500 = _499 + _498;
    precise float _501 = 1.0 * _481;
    precise float _502 = _501 + _500;
    precise float _503 = _279 + _488;
    precise float _504 = _280 + _495;
    precise float _505 = _281 + _502;
    precise float _521 = _503 - cbSceneParam._m0[3u].x;
    precise float _522 = _504 - cbSceneParam._m0[3u].y;
    precise float _523 = _505 - cbSceneParam._m0[3u].z;
    precise float _551 = _521 * cbSceneParam._m0[24u].x;
    precise float _552 = _522 * cbSceneParam._m0[24u].y;
    precise float _553 = _552 + _551;
    precise float _554 = _523 * cbSceneParam._m0[24u].z;
    precise float _555 = _554 + _553;
    precise float _556 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _557 = _556 + _555;
    precise float _558 = _521 * cbSceneParam._m0[25u].x;
    precise float _559 = _522 * cbSceneParam._m0[25u].y;
    precise float _560 = _559 + _558;
    precise float _561 = _523 * cbSceneParam._m0[25u].z;
    precise float _562 = _561 + _560;
    precise float _563 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _564 = _563 + _562;
    precise float _565 = _521 * cbSceneParam._m0[26u].x;
    precise float _566 = _522 * cbSceneParam._m0[26u].y;
    precise float _567 = _566 + _565;
    precise float _568 = _523 * cbSceneParam._m0[26u].z;
    precise float _569 = _568 + _567;
    precise float _570 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _571 = _570 + _569;
    precise float _572 = _521 * cbSceneParam._m0[27u].x;
    precise float _573 = _522 * cbSceneParam._m0[27u].y;
    precise float _574 = _573 + _572;
    precise float _575 = _523 * cbSceneParam._m0[27u].z;
    precise float _576 = _575 + _574;
    precise float _577 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _578 = _577 + _576;
    gl_Position.x = _557;
    gl_Position.y = _564;
    gl_Position.z = _571;
    gl_Position.w = _578;
    POSITION_1.x = _557;
    POSITION_1.y = _564;
    POSITION_1.z = _571;
    POSITION_1.w = _578;
    NORMAL_1.x = (((_245.x - _232) * 2.0) * _250) + ((_232 * 2.0) + (-1.0));
    NORMAL_1.y = (((_245.y - _233) * 2.0) * _250) + ((_233 * 2.0) + (-1.0));
    NORMAL_1.z = (_250 * ((_245.z - _234) * 2.0)) + ((_234 * 2.0) + (-1.0));
    NORMAL_1.w = float(_289);
    TANGENT_1.x = fma(_200, _476, fma(_199, _473, _470 * _197));
    TANGENT_1.y = fma(_200, _477, fma(_199, _474, _471 * _197));
    TANGENT_1.z = fma(_200, _478, fma(_199, _475, _472 * _197));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_5.x = TEXCOORD_1.x;
    TEXCOORD_5.y = TEXCOORD_1.y;
    TEXCOORD_5.z = COLOR_1.x;
}


