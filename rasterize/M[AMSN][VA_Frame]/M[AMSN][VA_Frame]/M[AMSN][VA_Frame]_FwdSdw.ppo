#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1044;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _236 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _249 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _235) + cbTextureTilingScale._m0[0u].z, (_236 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].y;
    float _256 = _249.y * cbMtdParam._m0[9u].z;
    float _257 = _249.z * cbMtdParam._m0[9u].w;
    vec4 _267 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _269 = _267.x;
    bool _276 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _293 = ((_276 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _269)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _269))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3696 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _295 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _296 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _314 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _235) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _236) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[11u].y;
    vec4 _326 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _235) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _236) + cbTextureTilingScale._m0[1u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3718 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    bool _347 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _364 = fma(_342, _209 * NORMAL.x, fma(_336, _216 * TANGENT.x, (_202 * _195) * _334));
    float _367 = fma(_342, _209 * NORMAL.y, fma(_336, _216 * TANGENT.y, (_202 * _196) * _334));
    float _370 = fma(_342, _209 * NORMAL.z, fma(_336, _216 * TANGENT.z, (_202 * _197) * _334));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _375 = _374 * _364;
    float _376 = _374 * _367;
    float _377 = _374 * _370;
    float _3729 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _378 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _379 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _380 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _381 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _382 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _383 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _388 = _276 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _439 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _429);
    float _440 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _429);
    float _441 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _429);
    float _445 = inversesqrt(dot(vec3(_439, _440, _441), vec3(_439, _440, _441)));
    float _446 = _439 * _445;
    float _447 = _440 * _445;
    float _448 = _441 * _445;
    float _453 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _454 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _456 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _458 = _456.w;
    float _479 = fma(_377, cbSceneParam._m0[5u].z, fma(_376, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _375));
    float _482 = fma(_377, cbSceneParam._m0[6u].z, fma(_376, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _375));
    float _485 = fma(_377, cbSceneParam._m0[7u].z, fma(_376, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _375));
    vec4 _487 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _489 = _487.x;
    float _501 = (((_487.y - _379) + (_487.w * _379)) * cbMtdParam._m0[3u].x) + _379;
    float _518 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_489 * _489)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _527 = (((cbMatDynParam._m0[15u].x - _383) * cbMatDynParam._m0[15u].w) * _518) + _383;
    float _536 = ((_518 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _501)) + _501;
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _562 = _560 + 9u;
    uint _563 = _562 + uint(cbMatDynParam._m0[0u].w);
    float _569 = (cbMtdParam._m0[0u].x * _380) * cbInstanceData._m0[_563].x;
    float _570 = (cbMtdParam._m0[0u].y * _381) * cbInstanceData._m0[_563].y;
    float _571 = (cbMtdParam._m0[0u].z * _382) * cbInstanceData._m0[_563].z;
    float _3795 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    vec4 _575 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _580 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _591 = (((_580.x - _527) + (_580.w * _527)) * cbMtdParam._m0[3u].x) + _527;
    float _604 = (cbMtdParam._m0[3u].x * (((_572 * _458) - _572) + _575.x)) + _572;
    float _605 = (cbMtdParam._m0[3u].x * (((_573 * _458) - _573) + _575.y)) + _573;
    float _606 = (cbMtdParam._m0[3u].x * (((_574 * _458) - _574) + _575.z)) + _574;
    vec4 _607 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _620 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_527 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_527 * (_381 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_527 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _607.z;
    float _624 = _620 * cbMatDynParam._m0[13u].w;
    float _634 = (_624 * (cbMatDynParam._m0[13u].x - _604)) + _604;
    float _635 = (_624 * (cbMatDynParam._m0[13u].y - _605)) + _605;
    float _636 = (_624 * (cbMatDynParam._m0[13u].z - _606)) + _606;
    float _644 = ((_620 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _591)) + _591;
    float _645 = 1.0 - _644;
    float _646 = _645 * _634;
    float _647 = _645 * _635;
    float _648 = _645 * _636;
    float _652 = (_634 + (-0.039999999105930328369140625)) * _644;
    float _653 = (_635 + (-0.039999999105930328369140625)) * _644;
    float _654 = (_636 + (-0.039999999105930328369140625)) * _644;
    float _655 = _652 + 0.039999999105930328369140625;
    float _656 = _653 + 0.039999999105930328369140625;
    float _657 = _654 + 0.039999999105930328369140625;
    vec4 _666 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _453, cbSceneParam._m0[86u].y * _454));
    float _669 = _666.x * TEXCOORD_5.z;
    float _670 = dot(vec3(_375, _376, _377), vec3(_446, _447, _448));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _375) - _446;
    float _678 = (_673 * _376) - _447;
    float _679 = (_673 * _377) - _448;
    float _683 = abs(dot(vec3(_446, _447, _448), vec3(_375, _376, _377)));
    float _3828 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _685 = sqrt(_536);
    float _698 = exp2((_685 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _704 = (1.0 - _698) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _705 = _698 * _685;
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _772 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _776 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _801 = _733 + _375;
        float _802 = _737 + _376;
        float _803 = _741 + _377;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _768;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _772;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _776;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_375, _376, _377), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3876 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_375, _376, _377), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3909 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_375, _376, _377), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3942 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1088 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1092 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1115 = _733 + _375;
        float _1116 = _737 + _376;
        float _1117 = _741 + _377;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_375, _376, _377), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4005 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_375, _376, _377), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4038 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_375, _376, _377), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4071 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1044;
        _1354 = _1044;
        _1355 = _1044;
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _677 * 0.5;
    float _1422 = _678 * 0.5;
    float _1423 = _679 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1461;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1437 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1441 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1445 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1452 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1461 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1548 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1551 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1579 = frontier_phi_14_12_ladder;
        }
        float _1754;
        if (_1548 > 0.0)
        {
            _1754 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1754 = frontier_phi_23_19_ladder;
        }
        float _2050;
        if (_1551 > 0.0)
        {
            _2050 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2050 = frontier_phi_35_30_ladder;
        }
        float _2052 = isnan(_1754) ? _1579 : (isnan(_1579) ? _1754 : min(_1579, _1754));
        float _2053 = isnan(_2050) ? _2052 : (isnan(_2052) ? _2050 : min(_2052, _2050));
        float _2057 = (_2053 * _1545) + _1534;
        float _2058 = (_2053 * _1548) + _1538;
        float _2059 = (_2053 * _1551) + _1542;
        float _2060 = _2053 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2060;
        float _2064 = _2060 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 > _2064) || ((_2058 < _2062) || ((_2057 < _2062) || (_2057 > _2064))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2204 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2059, cbModelParam._m0[9u].z, fma(_2058, cbModelParam._m0[9u].y, _2057 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2059, cbModelParam._m0[10u].z, fma(_2058, cbModelParam._m0[10u].y, _2057 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2059, cbModelParam._m0[11u].z, fma(_2058, cbModelParam._m0[11u].y, _2057 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_13_35_ladder = _2204.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2204.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2204.x * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_13_35_ladder_2;
        _1569 = frontier_phi_13_35_ladder_1;
        _1571 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1487);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1633 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1637 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1641 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1644 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1647 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1650 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1759;
        if (_1644 > 0.0)
        {
            _1759 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1759 = frontier_phi_25_21_ladder;
        }
        float _2077;
        if (_1647 > 0.0)
        {
            _2077 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2077 = frontier_phi_37_32_ladder;
        }
        float _2415;
        if (_1650 > 0.0)
        {
            _2415 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2415 = frontier_phi_47_44_ladder;
        }
        float _2417 = isnan(_2077) ? _1759 : (isnan(_1759) ? _2077 : min(_1759, _2077));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1644) + _1633;
        float _2423 = (_2418 * _1647) + _1637;
        float _2424 = (_2418 * _1650) + _1641;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2425;
        float _2428 = _2425 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2424 > _2428) || ((_2424 < _2426) || ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 < _2426) || (_2422 > _2428))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2424, cbModelParam._m0[17u].z, fma(_2423, cbModelParam._m0[17u].y, _2422 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2424, cbModelParam._m0[18u].z, fma(_2423, cbModelParam._m0[18u].y, _2422 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2424, cbModelParam._m0[19u].z, fma(_2423, cbModelParam._m0[19u].y, _2422 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_22_47_ladder = _2546.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2546.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2546.x * cbModelParam._m0[1u].z;
        }
        _1669 = frontier_phi_22_47_ladder_2;
        _1671 = frontier_phi_22_47_ladder_1;
        _1673 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1576);
        _1669 = _1653.x * cbModelParam._m0[1u].z;
        _1671 = _1653.y * cbModelParam._m0[1u].z;
        _1673 = _1653.z * cbModelParam._m0[1u].z;
    }
    float _1686 = (((_704 * _655) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1669 - _1567)) + _1567);
    float _1688 = (((_704 * _656) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1671 - _1569)) + _1569);
    float _1690 = (((_704 * _657) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1673 - _1571)) + _1571);
    float _1693 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1686 * cbSceneParam._m0[91u].x));
    float _1733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1746 = _1733 / _1745;
    float _1747 = _1737 / _1745;
    float _1748 = _1741 / _1745;
    float _1895;
    float _1896;
    float _1897;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1775 = ((uint(_1748 > cbSceneParam._m0[59u].y) + uint(_1748 > cbSceneParam._m0[59u].x)) + uint(_1748 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1776 = _1775 + 43u;
        uint _1784 = _1775 + 44u;
        uint _1792 = _1775 + 45u;
        uint _1800 = _1775 + 46u;
        float _1811 = fma(_1745, cbSceneParam._m0[_1776].w, fma(_1741, cbSceneParam._m0[_1776].z, fma(_1737, cbSceneParam._m0[_1776].y, _1733 * cbSceneParam._m0[_1776].x)));
        float _1815 = fma(_1745, cbSceneParam._m0[_1784].w, fma(_1741, cbSceneParam._m0[_1784].z, fma(_1737, cbSceneParam._m0[_1784].y, _1733 * cbSceneParam._m0[_1784].x)));
        float _1823 = fma(_1745, cbSceneParam._m0[_1800].w, fma(_1741, cbSceneParam._m0[_1800].z, fma(_1737, cbSceneParam._m0[_1800].y, _1733 * cbSceneParam._m0[_1800].x)));
        float _1828 = cbSceneParam._m0[33u].z * _1823;
        float _1830 = cbSceneParam._m0[33u].w * _1823;
        float _1833 = fma(_1745, cbSceneParam._m0[_1792].w, fma(_1741, cbSceneParam._m0[_1792].z, fma(_1737, cbSceneParam._m0[_1792].y, _1733 * cbSceneParam._m0[_1792].x))) / _1823;
        float _1881 = (cbSceneParam._m0[33u].x - sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748))) * cbSceneParam._m0[33u].y;
        float _4197 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1888 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 + _1811) / _1823, (_1830 + _1815) / _1823), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 + _1811) / _1823, (_1815 - _1828) / _1823), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 - _1828) / _1823, (_1815 - _1830) / _1823), _1833), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 - _1830) / _1823, (_1828 + _1815) / _1823), _1833), 0.0)).x), vec4(0.25)));
        _1895 = 1.0 - (_1888 * cbSceneParam._m0[34u].x);
        _1896 = 1.0 - (_1888 * cbSceneParam._m0[34u].y);
        _1897 = 1.0 - (_1888 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1895 = 1.0;
        _1896 = 1.0;
        _1897 = 1.0;
    }
    float _1961;
    float _1963;
    float _1965;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1949 = fma(_1745, cbSceneParam._m0[63u].w, fma(_1741, cbSceneParam._m0[63u].z, fma(_1737, cbSceneParam._m0[63u].y, _1733 * cbSceneParam._m0[63u].x)));
        float _1950 = fma(_1745, cbSceneParam._m0[60u].w, fma(_1741, cbSceneParam._m0[60u].z, fma(_1737, cbSceneParam._m0[60u].y, _1733 * cbSceneParam._m0[60u].x))) / _1949;
        float _1951 = fma(_1745, cbSceneParam._m0[61u].w, fma(_1741, cbSceneParam._m0[61u].z, fma(_1737, cbSceneParam._m0[61u].y, _1733 * cbSceneParam._m0[61u].x))) / _1949;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1950 >= cbSceneParam._m0[64u].x) && (_1951 >= cbSceneParam._m0[64u].y)) && (_1950 <= cbSceneParam._m0[64u].z)) && (_1951 <= cbSceneParam._m0[64u].w))
        {
            float _2090 = fma(_1745, cbSceneParam._m0[62u].w, fma(_1741, cbSceneParam._m0[62u].z, fma(_1737, cbSceneParam._m0[62u].y, _1733 * cbSceneParam._m0[62u].x))) / _1949;
            float _2094 = isnan(cbSceneParam._m0[41u].w) ? _2090 : (isnan(_2090) ? cbSceneParam._m0[41u].w : max(_2090, cbSceneParam._m0[41u].w));
            float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748))) * cbSceneParam._m0[33u].y;
            float _4213 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
            float _2144 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1950, cbSceneParam._m0[33u].w + _1951), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1950, _1951 - cbSceneParam._m0[33u].z), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1950 - cbSceneParam._m0[33u].z, _1951 - cbSceneParam._m0[33u].w), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1950 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1951), _2094), 0.0)).x), vec4(0.25)));
            float _2148 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
            float _2149 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
            float _2150 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2150) ? _1897 : (isnan(_1897) ? _2150 : min(_1897, _2150));
            frontier_phi_34_33_ladder_1 = isnan(_2149) ? _1896 : (isnan(_1896) ? _2149 : min(_1896, _2149));
            frontier_phi_34_33_ladder_2 = isnan(_2148) ? _1895 : (isnan(_1895) ? _2148 : min(_1895, _2148));
        }
        else
        {
            frontier_phi_34_33_ladder = _1897;
            frontier_phi_34_33_ladder_1 = _1896;
            frontier_phi_34_33_ladder_2 = _1895;
        }
        _1961 = frontier_phi_34_33_ladder_2;
        _1963 = frontier_phi_34_33_ladder_1;
        _1965 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1961 = _1895;
        _1963 = _1896;
        _1965 = _1897;
    }
    uvec4 _1970 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1972 = _1970.x * 14u;
    uint _1973 = _1972 + 13u;
    float _1980 = _669 + (-1.0);
    float _1985 = (cbLight._m0[_1973].x * _1980) + 1.0;
    float _1986 = (cbLight._m0[_1973].y * _1980) + 1.0;
    float _1987 = (cbLight._m0[_1973].z * _1980) + 1.0;
    float _1988 = (cbLight._m0[_1973].w * _1980) + 1.0;
    uint _1989 = _1972 + 5u;
    float _1995 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _1999 = _1972 + 4u;
    float _2009 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _2013 = _1972 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_375, _376, _377));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_375, _376, _377));
    float _4249 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4260 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1989].x * _1995) * _2034) + (((cbLight._m0[_1999].x * _1961) * _2009) * _2032);
    float _2042 = ((_1995 * cbLight._m0[_1989].y) * _2034) + (((cbLight._m0[_1999].y * _1963) * _2009) * _2032);
    float _2043 = ((_1995 * cbLight._m0[_1989].z) * _2034) + (((cbLight._m0[_1999].z * _1965) * _2009) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1972 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2049)
    {
        _2151 = _2041;
        _2153 = _2042;
        _2155 = _2043;
    }
    else
    {
        uint _2159 = _1972 + 6u;
        float _2175 = (dot(vec3(cbLight._m0[_1972 + 2u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4271 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2178 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2151 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _2041;
        _2153 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _2042;
        _2155 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _2043;
    }
    bool _2158 = _2047.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2158)
    {
        _2213 = _2151;
        _2215 = _2153;
        _2217 = _2155;
    }
    else
    {
        uint _2386 = _1972 + 7u;
        float _2402 = (dot(vec3(cbLight._m0[_1972 + 3u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4287 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2405 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2213 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2151;
        _2215 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2153;
        _2217 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2155;
    }
    uint _2220 = _1972 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _536) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_1972].x + _446;
    float _2236 = cbLight._m0[_1972].y + _447;
    float _2237 = cbLight._m0[_1972].z + _448;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1972].xyz));
    float _4303 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2249 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2250 = dot(vec3(_375, _376, _377), vec3(_2242, _2243, _2244));
    float _4325 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2242, _2243, _2244));
    float _4336 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _652;
    float _2273 = 0.959999978542327880859375 - _653;
    float _2274 = 0.959999978542327880859375 - _654;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4347 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2308 = _1972 + 9u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _536) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2013].x + _446;
    float _2322 = cbLight._m0[_2013].y + _447;
    float _2323 = cbLight._m0[_2013].z + _448;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2013].xyz));
    float _4358 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2335 = dot(vec3(_375, _376, _377), vec3(_2328, _2329, _2330));
    float _4369 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2328, _2329, _2330));
    float _4380 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2320 * _2320;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
    float _2361 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2249 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2361) + _2320) * _2334))) * _2334;
    float _4391 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    float _2383 = (((((_2354 * _2271) + _655) * cbLight._m0[_2308].x) * _2373) * _1995) + ((((cbLight._m0[_2220].x * _1961) * ((_2270 * _2271) + _655)) * _2294) * _2009);
    float _2384 = (((((_2354 * _2273) + _656) * cbLight._m0[_2308].y) * _2373) * _1995) + ((((cbLight._m0[_2220].y * _1963) * ((_2270 * _2273) + _656)) * _2294) * _2009);
    float _2385 = (((((_2354 * _2274) + _657) * cbLight._m0[_2308].z) * _2373) * _1995) + ((((cbLight._m0[_2220].z * _1965) * ((_2270 * _2274) + _657)) * _2294) * _2009);
    float _2441;
    float _2443;
    float _2445;
    if (_2049)
    {
        _2441 = _2383;
        _2443 = _2384;
        _2445 = _2385;
    }
    else
    {
        uint _2447 = _1972 + 2u;
        uint _2451 = _1972 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _536) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _446;
        float _2468 = cbLight._m0[_2447].y + _447;
        float _2469 = cbLight._m0[_2447].z + _448;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2447].xyz));
        float _4402 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2481 = dot(vec3(_375, _376, _377), vec3(_2474, _2475, _2476));
        float _4413 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4424 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2249 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2507) + _2466) * _2480))) * _2480;
        float _4435 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2441 = (((((_2500 * _2271) + _655) * cbLight._m0[_2451].x) * _2519) * _2520) + _2383;
        _2443 = (((((_2500 * _2273) + _656) * cbLight._m0[_2451].y) * _2519) * _2520) + _2384;
        _2445 = (((((_2500 * _2274) + _657) * cbLight._m0[_2451].z) * _2519) * _2520) + _2385;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2158)
    {
        _2551 = _2441;
        _2553 = _2443;
        _2555 = _2445;
    }
    else
    {
        uint _2562 = _1972 + 3u;
        uint _2566 = _1972 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _536) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _446;
        float _2583 = cbLight._m0[_2562].y + _447;
        float _2584 = cbLight._m0[_2562].z + _448;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2562].xyz));
        float _4451 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2596 = dot(vec3(_375, _376, _377), vec3(_2589, _2590, _2591));
        float _4462 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4473 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2249 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2622) + _2581) * _2595))) * _2595;
        float _4484 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2551 = (((((_2615 * _2271) + _655) * cbLight._m0[_2566].x) * _2634) * _2635) + _2441;
        _2553 = (((((_2615 * _2273) + _656) * cbLight._m0[_2566].y) * _2634) * _2635) + _2443;
        _2555 = (((((_2615 * _2274) + _657) * cbLight._m0[_2566].z) * _2634) * _2635) + _2445;
    }
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_1970.y == 0u)
    {
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.x;
        uint _2668 = uint((float(_2656.y) * floor(float(uint(cbSceneParam._m0[85u].y * _454) / _2657))) + floor(float(uint(cbSceneParam._m0[85u].x * _453) / _2657)));
        float _2678 = (log2(_1748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2679 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        uint _2682 = uint(isnan(14.0) ? _2679 : (isnan(_2679) ? 14.0 : min(_2679, 14.0)));
        uvec4 _2687 = texelFetch(g_lightClusterGridBuffer, int(((_2682 << 2u) + (_2668 << 6u)) >> 2u));
        uint _2688 = _2687.x;
        uint _2689 = _2656.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2689 >> 4u) & 15u)) + 4294967295u) & _2688) == 0u) || ((_2689 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2968)
                {
                    frontier_phi_66_pred = _2957;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                else
                {
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    uint _3082;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2967;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    for (;;)
                    {
                        uint _3086 = uint(findLSB(_3082)) + (_2958 << 5u);
                        uint _3083 = (_3082 + 4294967295u) & _3082;
                        uint _3088 = _3086 * 48u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 3u)).x));
                        uint _3108 = (_3086 * 48u) + 4u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3127 = (_3086 * 48u) + 8u;
                        vec3 _3138 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x));
                        float _3142 = _3102.x - _1746;
                        float _3143 = _3102.y - _1747;
                        float _3144 = _3102.z - _1748;
                        float _3145 = dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144));
                        float _3148 = inversesqrt(_3145);
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3152 = dot(vec3(_479, _482, _485), vec3(_3149, _3150, _3151));
                        float _3157 = 1.0 - (_3145 * _3102.w);
                        float _4510 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3158 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3159 = sqrt(_3145) * _3121.w;
                        float _3162 = 1.39999997615814208984375 / (_3159 + 1.39999997615814208984375);
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3152) + _3163;
                        float _3169 = _3159 * _3159;
                        float _3173 = ((isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))) * _3158) / ((_3169 * 0.699999988079071044921875) + 1.0);
                        float _3177 = (-0.0) - _1746;
                        float _3178 = (-0.0) - _1747;
                        float _3179 = (-0.0) - _1748;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3193 = exp2(log2(1.0 / ((_3169 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _685;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3206 = _3186 + _3151;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_479, _482, _485), vec3(_3184, _3185, _3186));
                        float _4526 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3218 = dot(vec3(_479, _482, _485), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4537 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3162 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3152) + _3227;
                        float _4548 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4559 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) / ((_3225 * _3225) * ((_3169 * 2.1991131305694580078125) + 3.141590118408203125))) * _3158;
                        _3011 = (_3173 * _3121.x) + _3079;
                        _3012 = (_3173 * _3121.y) + _3080;
                        _3013 = (_3173 * _3121.z) + _3081;
                        _3008 = (_3253 * _3138.x) + _3076;
                        _3009 = (_3253 * _3138.y) + _3077;
                        _3010 = (_3253 * _3138.z) + _3078;
                        if (_3083 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3083;
                        }
                    }
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                _2810 = frontier_phi_66_pred;
                _2808 = frontier_phi_66_pred_1;
                _2806 = frontier_phi_66_pred_2;
                _2804 = frontier_phi_66_pred_3;
                _2802 = frontier_phi_66_pred_4;
                _2800 = frontier_phi_66_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2800;
                    _2953 = _2802;
                    _2954 = _2804;
                    _2955 = _2806;
                    _2956 = _2808;
                    _2957 = _2810;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2816) & _2688) == 0u)
        {
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
            float _2946 = _2945 * _1746;
            float _2947 = _2945 * _1747;
            float _2948 = _2945 * _1748;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3059 = _2799;
                float _3060 = _2801;
                float _3061 = _2803;
                float _3062 = _2805;
                float _3063 = _2807;
                float _3064 = _2809;
                uint _3065 = _2816;
                uint _3074;
                bool _3075;
                for (;;)
                {
                    _3074 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                    _3075 = _3074 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3075)
                    {
                        frontier_phi_72_pred = _3064;
                        frontier_phi_72_pred_1 = _3063;
                        frontier_phi_72_pred_2 = _3062;
                        frontier_phi_72_pred_3 = _3061;
                        frontier_phi_72_pred_4 = _3060;
                        frontier_phi_72_pred_5 = _3059;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        uint _3277 = _3074;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3362;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3288 = ((_3065 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3349 = (_3288 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3365 = (_3288 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3288 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_1748, _3397.z, fma(_1747, _3397.y, _3397.x * _1746)) + _3397.w;
                            _3410 = !((fma(_1748, _3378.z, fma(_1747, _3378.y, _3378.x * _1746)) + _3378.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3303.x - _1746;
                                float _3438 = _3303.y - _1747;
                                float _3439 = _3303.z - _1748;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3304 * _3304));
                                float _4570 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3455 = sqrt(_3440) * _3319.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_479, _482, _485))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_1748, _3346.z, fma(_1747, _3346.y, _3346.x * _1746)) + _3346.w) / _3409;
                                float _3469 = (fma(_1748, _3362.z, fma(_1747, _3362.y, _3362.x * _1746)) + _3362.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4586 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _685;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2946;
                                float _3499 = _3445 - _2947;
                                float _3500 = _3446 - _2948;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4597 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3512 = dot(vec3(_479, _482, _485), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4608 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_479, _482, _485), vec3(_3444, _3445, _3446))) + _3521;
                                float _4619 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4630 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3475 * _3319.y;
                                frontier_phi_78_pred_1 = _3475 * _3319.x;
                                frontier_phi_78_pred_2 = _3549 * _3331.z;
                                frontier_phi_78_pred_3 = _3549 * _3331.y;
                                frontier_phi_78_pred_4 = _3549 * _3331.x;
                                frontier_phi_78_pred_5 = _3475 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_78_pred;
                            _3556 = frontier_phi_78_pred_1;
                            _3555 = frontier_phi_78_pred_2;
                            _3554 = frontier_phi_78_pred_3;
                            _3553 = frontier_phi_78_pred_4;
                            _3558 = frontier_phi_78_pred_5;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            _3263 = _3558 + _3276;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            _3260 = _3555 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3263;
                        frontier_phi_72_pred_1 = _3262;
                        frontier_phi_72_pred_2 = _3261;
                        frontier_phi_72_pred_3 = _3260;
                        frontier_phi_72_pred_4 = _3259;
                        frontier_phi_72_pred_5 = _3258;
                    }
                    _2931 = frontier_phi_72_pred;
                    _2929 = frontier_phi_72_pred_1;
                    _2927 = frontier_phi_72_pred_2;
                    _2925 = frontier_phi_72_pred_3;
                    _2923 = frontier_phi_72_pred_4;
                    _2921 = frontier_phi_72_pred_5;
                    uint _3066 = _3065 + 1u;
                    if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3059 = _2921;
                        _3060 = _2923;
                        _3061 = _2925;
                        _3062 = _2927;
                        _3063 = _2929;
                        _3064 = _2931;
                        _3065 = _3066;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2929;
                frontier_phi_60_61_ladder_2 = _2925;
                frontier_phi_60_61_ladder_3 = _2923;
                frontier_phi_60_61_ladder_4 = _2921;
                frontier_phi_60_61_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_60_61_ladder = _2809;
                frontier_phi_60_61_ladder_1 = _2807;
                frontier_phi_60_61_ladder_2 = _2803;
                frontier_phi_60_61_ladder_3 = _2801;
                frontier_phi_60_61_ladder_4 = _2799;
                frontier_phi_60_61_ladder_5 = _2805;
            }
            _2920 = frontier_phi_60_61_ladder_4;
            _2922 = frontier_phi_60_61_ladder_3;
            _2924 = frontier_phi_60_61_ladder_2;
            _2926 = frontier_phi_60_61_ladder_5;
            _2928 = frontier_phi_60_61_ladder_1;
            _2930 = frontier_phi_60_61_ladder;
        }
        float _2935 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2701 = (_2935 * _2926) + _2213;
        _2703 = (_2935 * _2928) + _2215;
        _2705 = (_2935 * _2930) + _2217;
        _2707 = ((_2920 * _655) * _2935) + _2551;
        _2709 = ((_2922 * _656) * _2935) + _2553;
        _2711 = ((_2924 * _657) * _2935) + _2555;
    }
    else
    {
        _2701 = _2213;
        _2703 = _2215;
        _2705 = _2217;
        _2707 = _2551;
        _2709 = _2553;
        _2711 = _2555;
    }
    uint _2717 = _562 + uint(cbMatDynParam._m0[0u].w);
    float _2723 = cbInstanceData._m0[_2717].x * (_347 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2724 = cbInstanceData._m0[_2717].y * (_347 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2725 = cbInstanceData._m0[_2717].z * (_347 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4646 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4657 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4668 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4679 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2743 = (((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2701 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _669))) + ((_2707 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + _2723;
    float _2745 = (_2724 + ((_2709 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2703 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _669)));
    float _2747 = (_2725 + ((_2711 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2705 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _669)));
    float _4705 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2760 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2765 = cbInstanceData._m0[_560 + 6u].w * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)));
    float _2770 = _453 / cbSceneParam._m0[86u].x;
    float _2771 = _454 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _388 : (isnan(_388) ? cbSceneParam._m0[77u].w : min(_388, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_388 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_388) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _388 : min(cbSceneParam._m0[80u].w, _388));
        float _2825 = _2824 / _388;
        float _2836 = _2825 * _439;
        float _2837 = _440 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2839 = _2825 * _441;
        float _2841 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2837;
        float _2849 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3021;
        if (abs((_2838 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3021 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2983 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3021 = ((abs(_2849 / _2838) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2859 * _2992) - exp2(_2859 * _2993)) * _2981))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3023 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3032 = exp2((_3021 * (-1.44269502162933349609375)) * (1.0 - _3023.w));
        float _3033 = log2(_3032);
        float _3049 = log2(_2790);
        _2861 = (exp2(_3049 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].x)) * _3023.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2863 = (exp2(_3049 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].y)) * _3023.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2865 = (exp2(_3049 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3033 * cbSceneParam._m0[78u].z)) * _3023.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2867 = _3032 * _2790;
    }
    else
    {
        _2861 = _2787;
        _2863 = _2788;
        _2865 = _2789;
        _2867 = _2790;
    }
    float _2879 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2880 = _2879 == 3.0;
    float _2881 = log2(_2867);
    float _2885 = exp2(_2881 * cbSceneParam._m0[78u].x);
    float _2886 = exp2(_2881 * cbSceneParam._m0[78u].y);
    float _2887 = exp2(_2881 * cbSceneParam._m0[78u].z);
    float _2888 = _2885 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)));
    float _2889 = _2886 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)));
    float _2890 = _2887 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)));
    float _2899 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2899 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.y = _2899 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.z = _2899 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.w = _2765;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2723) * _2760) * _2885) * _2899;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2724) * _2760) * _2886) * _2899;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2725) * _2760) * _2887) * _2899;
    SV_Target_1.w = _2765;
}


