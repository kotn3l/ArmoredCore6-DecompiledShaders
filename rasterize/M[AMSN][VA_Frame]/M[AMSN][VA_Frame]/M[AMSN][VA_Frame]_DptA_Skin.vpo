#version 460
#extension GL_EXT_samplerless_texture_functions : require

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_4;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_3;
layout(location = 8) in vec4 TEXCOORD_4;
layout(location = 9) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec3 TEXCOORD_5;
layout(location = 6) out vec2 TEXCOORD_8;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _207 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _209 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    precise float _220 = float(int(uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_4, int(0u))).y)) + (-1.0);
    float _637 = isnan(0.0) ? cbMtdParam._m0[3u].z : (isnan(cbMtdParam._m0[3u].z) ? 0.0 : max(cbMtdParam._m0[3u].z, 0.0));
    precise float _228 = (isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0))) * _220;
    precise float _229 = TEXCOORD_1.x * 255.0;
    precise float _231 = TEXCOORD_1.y * 255.0;
    precise float _232 = _231 * 256.0;
    precise float _234 = _229 + _232;
    precise float _235 = _234 + 0.5;
    float _237 = floor(_228);
    uint _238 = uint(int(_235));
    uint _239 = uint(int(_237));
    vec4 _240 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_238, _239)), int(0u));
    float _242 = _240.x;
    float _243 = _240.y;
    float _244 = _240.z;
    precise float _252 = _237 + 1.0;
    uint _254 = uint(int(isnan(_220) ? _252 : (isnan(_252) ? _220 : min(_252, _220))));
    vec4 _255 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_238, _254)), int(0u));
    float _260 = fract(_228);
    vec4 _273 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_238, _239)), int(0u));
    float _275 = _273.x;
    float _276 = _273.y;
    float _277 = _273.z;
    vec4 _278 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_238, _254)), int(0u));
    precise float _283 = _278.x - _275;
    precise float _284 = _278.y - _276;
    precise float _285 = _278.z - _277;
    precise float _286 = _260 * _283;
    precise float _287 = _260 * _284;
    precise float _288 = _260 * _285;
    precise float _289 = _275 + _286;
    precise float _290 = _276 + _287;
    precise float _291 = _277 + _288;
    uint _296 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _298 = texelFetch(g_InstanceIndexBuffer, int(_296));
    uint _299 = _298.x;
    precise float _300 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _303 = isnan(_300) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _300 : max(0.001000000047497451305389404296875, _300));
    precise float _305 = BLENDWEIGHT.x / _303;
    precise float _306 = BLENDWEIGHT.y / _303;
    precise float _307 = BLENDWEIGHT.z / _303;
    precise float _308 = BLENDWEIGHT.w / _303;
    uint _310 = _299 * 13u;
    uvec4 _315 = floatBitsToUint(cbInstanceData._m0[_310 + 4u]);
    uint _316 = _315.x;
    uint _318 = (_316 + uint(float(BLENDINDICES.x))) * 3u;
    uint _325 = _318 + 1u;
    uint _332 = _318 + 2u;
    precise float _339 = _305 * cbObjMatrix._m0[_318].x;
    precise float _340 = _305 * cbObjMatrix._m0[_325].x;
    precise float _341 = _305 * cbObjMatrix._m0[_332].x;
    precise float _342 = _305 * cbObjMatrix._m0[_318].y;
    precise float _343 = _305 * cbObjMatrix._m0[_325].y;
    precise float _344 = _305 * cbObjMatrix._m0[_332].y;
    precise float _345 = _305 * cbObjMatrix._m0[_318].z;
    precise float _346 = _305 * cbObjMatrix._m0[_325].z;
    precise float _347 = _305 * cbObjMatrix._m0[_332].z;
    precise float _348 = _305 * cbObjMatrix._m0[_318].w;
    precise float _349 = _305 * cbObjMatrix._m0[_325].w;
    precise float _350 = _305 * cbObjMatrix._m0[_332].w;
    uint _353 = (_316 + uint(float(BLENDINDICES.y))) * 3u;
    uint _360 = _353 + 1u;
    uint _367 = _353 + 2u;
    precise float _374 = _306 * cbObjMatrix._m0[_353].x;
    precise float _375 = _306 * cbObjMatrix._m0[_360].x;
    precise float _376 = _306 * cbObjMatrix._m0[_367].x;
    precise float _377 = _306 * cbObjMatrix._m0[_353].y;
    precise float _378 = _306 * cbObjMatrix._m0[_360].y;
    precise float _379 = _306 * cbObjMatrix._m0[_367].y;
    precise float _380 = _306 * cbObjMatrix._m0[_353].z;
    precise float _381 = _306 * cbObjMatrix._m0[_360].z;
    precise float _382 = _306 * cbObjMatrix._m0[_367].z;
    precise float _383 = _306 * cbObjMatrix._m0[_353].w;
    precise float _384 = _306 * cbObjMatrix._m0[_360].w;
    precise float _385 = _306 * cbObjMatrix._m0[_367].w;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    precise float _393 = _346 + _381;
    precise float _394 = _347 + _382;
    precise float _395 = _348 + _383;
    precise float _396 = _349 + _384;
    precise float _397 = _350 + _385;
    uint _400 = (_316 + uint(float(BLENDINDICES.z))) * 3u;
    uint _407 = _400 + 1u;
    uint _414 = _400 + 2u;
    precise float _421 = _307 * cbObjMatrix._m0[_400].x;
    precise float _422 = _307 * cbObjMatrix._m0[_407].x;
    precise float _423 = _307 * cbObjMatrix._m0[_414].x;
    precise float _424 = _307 * cbObjMatrix._m0[_400].y;
    precise float _425 = _307 * cbObjMatrix._m0[_407].y;
    precise float _426 = _307 * cbObjMatrix._m0[_414].y;
    precise float _427 = _307 * cbObjMatrix._m0[_400].z;
    precise float _428 = _307 * cbObjMatrix._m0[_407].z;
    precise float _429 = _307 * cbObjMatrix._m0[_414].z;
    precise float _430 = _307 * cbObjMatrix._m0[_400].w;
    precise float _431 = _307 * cbObjMatrix._m0[_407].w;
    precise float _432 = _307 * cbObjMatrix._m0[_414].w;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    precise float _440 = _393 + _428;
    precise float _441 = _394 + _429;
    precise float _442 = _395 + _430;
    precise float _443 = _396 + _431;
    precise float _444 = _397 + _432;
    uint _447 = (_316 + uint(float(BLENDINDICES.w))) * 3u;
    uint _454 = _447 + 1u;
    uint _461 = _447 + 2u;
    precise float _468 = _308 * cbObjMatrix._m0[_447].x;
    precise float _469 = _308 * cbObjMatrix._m0[_454].x;
    precise float _470 = _308 * cbObjMatrix._m0[_461].x;
    precise float _471 = _308 * cbObjMatrix._m0[_447].y;
    precise float _472 = _308 * cbObjMatrix._m0[_454].y;
    precise float _473 = _308 * cbObjMatrix._m0[_461].y;
    precise float _474 = _308 * cbObjMatrix._m0[_447].z;
    precise float _475 = _308 * cbObjMatrix._m0[_454].z;
    precise float _476 = _308 * cbObjMatrix._m0[_461].z;
    precise float _477 = _308 * cbObjMatrix._m0[_447].w;
    precise float _478 = _308 * cbObjMatrix._m0[_454].w;
    precise float _479 = _308 * cbObjMatrix._m0[_461].w;
    precise float _480 = _433 + _468;
    precise float _481 = _434 + _469;
    precise float _482 = _435 + _470;
    precise float _483 = _436 + _471;
    precise float _484 = _437 + _472;
    precise float _485 = _438 + _473;
    precise float _486 = _439 + _474;
    precise float _487 = _440 + _475;
    precise float _488 = _441 + _476;
    precise float _489 = _442 + _477;
    precise float _490 = _443 + _478;
    precise float _491 = _444 + _479;
    precise float _492 = POSITION.x * _480;
    precise float _493 = POSITION.y * _483;
    precise float _494 = _493 + _492;
    precise float _495 = POSITION.z * _486;
    precise float _496 = _495 + _494;
    precise float _497 = 1.0 * _489;
    precise float _498 = _497 + _496;
    precise float _499 = POSITION.x * _481;
    precise float _500 = POSITION.y * _484;
    precise float _501 = _500 + _499;
    precise float _502 = POSITION.z * _487;
    precise float _503 = _502 + _501;
    precise float _504 = 1.0 * _490;
    precise float _505 = _504 + _503;
    precise float _506 = POSITION.x * _482;
    precise float _507 = POSITION.y * _485;
    precise float _508 = _507 + _506;
    precise float _509 = POSITION.z * _488;
    precise float _510 = _509 + _508;
    precise float _511 = 1.0 * _491;
    precise float _512 = _511 + _510;
    precise float _513 = _289 + _498;
    precise float _514 = _290 + _505;
    precise float _515 = _291 + _512;
    precise float _531 = _513 - cbSceneParam._m0[3u].x;
    precise float _532 = _514 - cbSceneParam._m0[3u].y;
    precise float _533 = _515 - cbSceneParam._m0[3u].z;
    precise float _561 = _531 * cbSceneParam._m0[24u].x;
    precise float _562 = _532 * cbSceneParam._m0[24u].y;
    precise float _563 = _562 + _561;
    precise float _564 = _533 * cbSceneParam._m0[24u].z;
    precise float _565 = _564 + _563;
    precise float _566 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _567 = _566 + _565;
    precise float _568 = _531 * cbSceneParam._m0[25u].x;
    precise float _569 = _532 * cbSceneParam._m0[25u].y;
    precise float _570 = _569 + _568;
    precise float _571 = _533 * cbSceneParam._m0[25u].z;
    precise float _572 = _571 + _570;
    precise float _573 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _574 = _573 + _572;
    precise float _575 = _531 * cbSceneParam._m0[26u].x;
    precise float _576 = _532 * cbSceneParam._m0[26u].y;
    precise float _577 = _576 + _575;
    precise float _578 = _533 * cbSceneParam._m0[26u].z;
    precise float _579 = _578 + _577;
    precise float _580 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _581 = _580 + _579;
    precise float _582 = _531 * cbSceneParam._m0[27u].x;
    precise float _583 = _532 * cbSceneParam._m0[27u].y;
    precise float _584 = _583 + _582;
    precise float _585 = _533 * cbSceneParam._m0[27u].z;
    precise float _586 = _585 + _584;
    precise float _587 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _588 = _587 + _586;
    gl_Position.x = _567;
    gl_Position.y = _574;
    gl_Position.z = _581;
    gl_Position.w = _588;
    POSITION_1.x = _567;
    POSITION_1.y = _574;
    POSITION_1.z = _581;
    POSITION_1.w = _588;
    NORMAL_1.x = (((_255.x - _242) * 2.0) * _260) + ((_242 * 2.0) + (-1.0));
    NORMAL_1.y = (((_255.y - _243) * 2.0) * _260) + ((_243 * 2.0) + (-1.0));
    NORMAL_1.z = (_260 * ((_255.z - _244) * 2.0)) + ((_244 * 2.0) + (-1.0));
    NORMAL_1.w = float(_299);
    TANGENT_1.x = fma(_210, _486, fma(_209, _483, _480 * _207));
    TANGENT_1.y = fma(_210, _487, fma(_209, _484, _481 * _207));
    TANGENT_1.z = fma(_210, _488, fma(_209, _485, _482 * _207));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_5.x = TEXCOORD_1.x;
    TEXCOORD_5.y = TEXCOORD_1.y;
    TEXCOORD_5.z = COLOR_1.x;
    TEXCOORD_8.x = _581;
    TEXCOORD_8.y = _588;
    gl_ClipDistance[0u] = dot(vec4(_567, _574, _581, _588), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_567, _574, _581, _588), vec4(cbInstanceData._m0[_310 + 3u]));
}


