#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1089;
float _3795;
float _3796;
float _3797;
float _3798;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _240 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _253 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _239) + cbTextureTilingScale._m0[0u].z, (_240 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].y;
    float _260 = _253.y * cbMtdParam._m0[9u].z;
    float _261 = _253.z * cbMtdParam._m0[9u].w;
    vec4 _271 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _273 = _271.x;
    bool _280 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _297 = ((_280 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _273)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _273))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3807 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _299 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _315 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _239) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _240) + cbTextureTilingScale._m0[2u].w));
    float _318 = _315.x + cbMtdParam._m0[11u].y;
    vec4 _330 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _239) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _240) + cbTextureTilingScale._m0[1u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3829 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))));
    bool _351 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _368 = fma(_346, _213 * NORMAL.x, fma(_340, _220 * TANGENT.x, (_206 * _199) * _338));
    float _371 = fma(_346, _213 * NORMAL.y, fma(_340, _220 * TANGENT.y, (_206 * _200) * _338));
    float _374 = fma(_346, _213 * NORMAL.z, fma(_340, _220 * TANGENT.z, (_206 * _201) * _338));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _381 = _378 * _374;
    float _3840 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _382 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _383 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _384 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _385 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _386 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _387 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _392 = _280 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _443 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _433);
    float _444 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _433);
    float _445 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _433);
    float _449 = inversesqrt(dot(vec3(_443, _444, _445), vec3(_443, _444, _445)));
    float _450 = _443 * _449;
    float _451 = _444 * _449;
    float _452 = _445 * _449;
    vec4 _457 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _459 = _457.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_443 * _443) + (_444 * _444)) + (_445 * _445));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3906 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3917 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) - _775)) + _775) < ((_459 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _470 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _471 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _473 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _475 = _473.w;
    float _495 = fma(_381, cbSceneParam._m0[5u].z, fma(_380, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _379));
    float _498 = fma(_381, cbSceneParam._m0[6u].z, fma(_380, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _379));
    float _501 = fma(_381, cbSceneParam._m0[7u].z, fma(_380, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _379));
    vec4 _503 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _505 = _503.x;
    float _517 = (((_503.y - _383) + (_503.w * _383)) * cbMtdParam._m0[3u].x) + _383;
    float _534 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_505 * _505)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _543 = (((cbMatDynParam._m0[15u].x - _387) * cbMatDynParam._m0[15u].w) * _534) + _387;
    float _552 = ((_534 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _517)) + _517;
    uint _576 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = _576 + 9u;
    uint _579 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * _384) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * _385) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * _386) * cbInstanceData._m0[_579].z;
    float _3928 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    vec4 _591 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _596 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _607 = (((_596.x - _543) + (_596.w * _543)) * cbMtdParam._m0[3u].x) + _543;
    float _620 = (cbMtdParam._m0[3u].x * (((_588 * _475) - _588) + _591.x)) + _588;
    float _621 = (cbMtdParam._m0[3u].x * (((_589 * _475) - _589) + _591.y)) + _589;
    float _622 = (cbMtdParam._m0[3u].x * (((_590 * _475) - _590) + _591.z)) + _590;
    vec4 _623 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _636 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_543 * (_384 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_543 * (_385 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_543 * (_386 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _623.z;
    float _640 = _636 * cbMatDynParam._m0[13u].w;
    float _650 = (_640 * (cbMatDynParam._m0[13u].x - _620)) + _620;
    float _651 = (_640 * (cbMatDynParam._m0[13u].y - _621)) + _621;
    float _652 = (_640 * (cbMatDynParam._m0[13u].z - _622)) + _622;
    float _660 = ((_636 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _607)) + _607;
    float _661 = 1.0 - _660;
    float _662 = _661 * _650;
    float _663 = _661 * _651;
    float _664 = _661 * _652;
    float _668 = (_650 + (-0.039999999105930328369140625)) * _660;
    float _669 = (_651 + (-0.039999999105930328369140625)) * _660;
    float _670 = (_652 + (-0.039999999105930328369140625)) * _660;
    float _671 = _668 + 0.039999999105930328369140625;
    float _672 = _669 + 0.039999999105930328369140625;
    float _673 = _670 + 0.039999999105930328369140625;
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _470, cbSceneParam._m0[86u].y * _471));
    float _685 = _682.x * TEXCOORD_5.z;
    float _686 = dot(vec3(_379, _380, _381), vec3(_450, _451, _452));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _379) - _450;
    float _694 = (_689 * _380) - _451;
    float _695 = (_689 * _381) - _452;
    float _699 = abs(dot(vec3(_450, _451, _452), vec3(_379, _380, _381)));
    float _3961 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_552);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _720 = (1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _721 = _714 * _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _817 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _821 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _846 = _749 + _379;
        float _847 = _753 + _380;
        float _848 = _757 + _381;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_379, _380, _381), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _4009 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_379, _380, _381), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _4042 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_379, _380, _381), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _4075 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1136 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1140 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1163 = _749 + _379;
        float _1164 = _753 + _380;
        float _1165 = _757 + _381;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_379, _380, _381), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4138 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_379, _380, _381), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4171 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_379, _380, _381), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4204 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = _1089;
        _1411 = _1089;
        _1412 = _1089;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _693 * 0.5;
    float _1470 = _694 * 0.5;
    float _1471 = _695 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1596 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1599 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1627 = frontier_phi_17_15_ladder;
        }
        float _1802;
        if (_1596 > 0.0)
        {
            _1802 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1802 = frontier_phi_26_22_ladder;
        }
        float _2098;
        if (_1599 > 0.0)
        {
            _2098 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2098 = frontier_phi_38_33_ladder;
        }
        float _2100 = isnan(_1802) ? _1627 : (isnan(_1627) ? _1802 : min(_1627, _1802));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1593) + _1582;
        float _2106 = (_2101 * _1596) + _1586;
        float _2107 = (_2101 * _1599) + _1590;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_16_38_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_16_38_ladder_2;
        _1617 = frontier_phi_16_38_ladder_1;
        _1619 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1535);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1695 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1698 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1807;
        if (_1692 > 0.0)
        {
            _1807 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1807 = frontier_phi_28_24_ladder;
        }
        float _2125;
        if (_1695 > 0.0)
        {
            _2125 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2125 = frontier_phi_40_35_ladder;
        }
        float _2463;
        if (_1698 > 0.0)
        {
            _2463 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2463 = frontier_phi_50_47_ladder;
        }
        float _2465 = isnan(_2125) ? _1807 : (isnan(_1807) ? _2125 : min(_1807, _2125));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1692) + _1681;
        float _2471 = (_2466 * _1695) + _1685;
        float _2472 = (_2466 * _1698) + _1689;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2473;
        float _2476 = _2473 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2472 > _2476) || ((_2472 < _2474) || ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 < _2474) || (_2470 > _2476))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2472, cbModelParam._m0[17u].z, fma(_2471, cbModelParam._m0[17u].y, _2470 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2472, cbModelParam._m0[18u].z, fma(_2471, cbModelParam._m0[18u].y, _2470 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2472, cbModelParam._m0[19u].z, fma(_2471, cbModelParam._m0[19u].y, _2470 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_25_50_ladder = _2594.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2594.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2594.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_25_50_ladder_2;
        _1719 = frontier_phi_25_50_ladder_1;
        _1721 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1624);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1734 = (((_720 * _671) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1736 = (((_720 * _672) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1738 = (((_720 * _673) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1793 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1794 = _1781 / _1793;
    float _1795 = _1785 / _1793;
    float _1796 = _1789 / _1793;
    float _1943;
    float _1944;
    float _1945;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1823 = ((uint(_1796 > cbSceneParam._m0[59u].y) + uint(_1796 > cbSceneParam._m0[59u].x)) + uint(_1796 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1824 = _1823 + 43u;
        uint _1832 = _1823 + 44u;
        uint _1840 = _1823 + 45u;
        uint _1848 = _1823 + 46u;
        float _1859 = fma(_1793, cbSceneParam._m0[_1824].w, fma(_1789, cbSceneParam._m0[_1824].z, fma(_1785, cbSceneParam._m0[_1824].y, _1781 * cbSceneParam._m0[_1824].x)));
        float _1863 = fma(_1793, cbSceneParam._m0[_1832].w, fma(_1789, cbSceneParam._m0[_1832].z, fma(_1785, cbSceneParam._m0[_1832].y, _1781 * cbSceneParam._m0[_1832].x)));
        float _1871 = fma(_1793, cbSceneParam._m0[_1848].w, fma(_1789, cbSceneParam._m0[_1848].z, fma(_1785, cbSceneParam._m0[_1848].y, _1781 * cbSceneParam._m0[_1848].x)));
        float _1876 = cbSceneParam._m0[33u].z * _1871;
        float _1878 = cbSceneParam._m0[33u].w * _1871;
        float _1881 = fma(_1793, cbSceneParam._m0[_1840].w, fma(_1789, cbSceneParam._m0[_1840].z, fma(_1785, cbSceneParam._m0[_1840].y, _1781 * cbSceneParam._m0[_1840].x))) / _1871;
        float _1929 = (cbSceneParam._m0[33u].x - sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796))) * cbSceneParam._m0[33u].y;
        float _4330 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1936 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 + _1859) / _1871, (_1878 + _1863) / _1871), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 + _1859) / _1871, (_1863 - _1876) / _1871), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1859 - _1876) / _1871, (_1863 - _1878) / _1871), _1881), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1859 - _1878) / _1871, (_1876 + _1863) / _1871), _1881), 0.0)).x), vec4(0.25)));
        _1943 = 1.0 - (_1936 * cbSceneParam._m0[34u].x);
        _1944 = 1.0 - (_1936 * cbSceneParam._m0[34u].y);
        _1945 = 1.0 - (_1936 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1943 = 1.0;
        _1944 = 1.0;
        _1945 = 1.0;
    }
    float _2009;
    float _2011;
    float _2013;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1997 = fma(_1793, cbSceneParam._m0[63u].w, fma(_1789, cbSceneParam._m0[63u].z, fma(_1785, cbSceneParam._m0[63u].y, _1781 * cbSceneParam._m0[63u].x)));
        float _1998 = fma(_1793, cbSceneParam._m0[60u].w, fma(_1789, cbSceneParam._m0[60u].z, fma(_1785, cbSceneParam._m0[60u].y, _1781 * cbSceneParam._m0[60u].x))) / _1997;
        float _1999 = fma(_1793, cbSceneParam._m0[61u].w, fma(_1789, cbSceneParam._m0[61u].z, fma(_1785, cbSceneParam._m0[61u].y, _1781 * cbSceneParam._m0[61u].x))) / _1997;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1998 >= cbSceneParam._m0[64u].x) && (_1999 >= cbSceneParam._m0[64u].y)) && (_1998 <= cbSceneParam._m0[64u].z)) && (_1999 <= cbSceneParam._m0[64u].w))
        {
            float _2138 = fma(_1793, cbSceneParam._m0[62u].w, fma(_1789, cbSceneParam._m0[62u].z, fma(_1785, cbSceneParam._m0[62u].y, _1781 * cbSceneParam._m0[62u].x))) / _1997;
            float _2142 = isnan(cbSceneParam._m0[41u].w) ? _2138 : (isnan(_2138) ? cbSceneParam._m0[41u].w : max(_2138, cbSceneParam._m0[41u].w));
            float _2185 = (cbSceneParam._m0[33u].x - sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796))) * cbSceneParam._m0[33u].y;
            float _4346 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
            float _2192 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1998, cbSceneParam._m0[33u].w + _1999), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1998, _1999 - cbSceneParam._m0[33u].z), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1998 - cbSceneParam._m0[33u].z, _1999 - cbSceneParam._m0[33u].w), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1998 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1999), _2142), 0.0)).x), vec4(0.25)));
            float _2196 = 1.0 - (_2192 * cbSceneParam._m0[34u].x);
            float _2197 = 1.0 - (_2192 * cbSceneParam._m0[34u].y);
            float _2198 = 1.0 - (_2192 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2198) ? _1945 : (isnan(_1945) ? _2198 : min(_1945, _2198));
            frontier_phi_37_36_ladder_1 = isnan(_2197) ? _1944 : (isnan(_1944) ? _2197 : min(_1944, _2197));
            frontier_phi_37_36_ladder_2 = isnan(_2196) ? _1943 : (isnan(_1943) ? _2196 : min(_1943, _2196));
        }
        else
        {
            frontier_phi_37_36_ladder = _1945;
            frontier_phi_37_36_ladder_1 = _1944;
            frontier_phi_37_36_ladder_2 = _1943;
        }
        _2009 = frontier_phi_37_36_ladder_2;
        _2011 = frontier_phi_37_36_ladder_1;
        _2013 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2009 = _1943;
        _2011 = _1944;
        _2013 = _1945;
    }
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_576 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _685 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2057 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2061 = _2020 | 1u;
    float _2072 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_379, _380, _381));
    float _2075 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_379, _380, _381));
    float _4382 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _4393 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2082 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2089 = ((cbLight._m0[_2037].x * _2043) * _2082) + (((cbLight._m0[_2047].x * _2009) * _2057) * _2080);
    float _2090 = ((_2043 * cbLight._m0[_2037].y) * _2082) + (((cbLight._m0[_2047].y * _2011) * _2057) * _2080);
    float _2091 = ((_2043 * cbLight._m0[_2037].z) * _2082) + (((cbLight._m0[_2047].z * _2013) * _2057) * _2080);
    uvec4 _2095 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2097 = _2095.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2097)
    {
        _2199 = _2089;
        _2201 = _2090;
        _2203 = _2091;
    }
    else
    {
        uint _2207 = _2020 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4404 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2226 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2089;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2090;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2091;
    }
    bool _2206 = _2095.y == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2206)
    {
        _2261 = _2199;
        _2263 = _2201;
        _2265 = _2203;
    }
    else
    {
        uint _2434 = _2020 + 7u;
        float _2450 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_379, _380, _381)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4420 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2453 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2261 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2199;
        _2263 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2201;
        _2265 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2203;
    }
    uint _2268 = _2020 + 8u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _552) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2020].x + _450;
    float _2284 = cbLight._m0[_2020].y + _451;
    float _2285 = cbLight._m0[_2020].z + _452;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2020].xyz));
    float _4436 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2297 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2298 = dot(vec3(_379, _380, _381), vec3(_2290, _2291, _2292));
    float _4458 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2290, _2291, _2292));
    float _4469 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2282 * _2282;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2319 = 0.959999978542327880859375 - _668;
    float _2321 = 0.959999978542327880859375 - _669;
    float _2322 = 0.959999978542327880859375 - _670;
    float _2329 = 1.0 - _2282;
    float _2340 = (0.5 / (((_2297 * ((_2296 * _2329) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2329) + _2282) * _2296))) * _2296;
    float _4480 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    uint _2356 = _2020 + 9u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _552) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2061].x + _450;
    float _2370 = cbLight._m0[_2061].y + _451;
    float _2371 = cbLight._m0[_2061].z + _452;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2061].xyz));
    float _4491 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2383 = dot(vec3(_379, _380, _381), vec3(_2376, _2377, _2378));
    float _4502 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2376, _2377, _2378));
    float _4513 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2368 * _2368;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
    float _2409 = 1.0 - _2368;
    float _2419 = (0.5 / (((_2297 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2409) + _2368) * _2382))) * _2382;
    float _4524 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    float _2431 = (((((_2402 * _2319) + _671) * cbLight._m0[_2356].x) * _2421) * _2043) + ((((cbLight._m0[_2268].x * _2009) * ((_2318 * _2319) + _671)) * _2342) * _2057);
    float _2432 = (((((_2402 * _2321) + _672) * cbLight._m0[_2356].y) * _2421) * _2043) + ((((cbLight._m0[_2268].y * _2011) * ((_2318 * _2321) + _672)) * _2342) * _2057);
    float _2433 = (((((_2402 * _2322) + _673) * cbLight._m0[_2356].z) * _2421) * _2043) + ((((cbLight._m0[_2268].z * _2013) * ((_2318 * _2322) + _673)) * _2342) * _2057);
    float _2489;
    float _2491;
    float _2493;
    if (_2097)
    {
        _2489 = _2431;
        _2491 = _2432;
        _2493 = _2433;
    }
    else
    {
        uint _2495 = _2020 + 2u;
        uint _2499 = _2020 + 10u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _552) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _450;
        float _2516 = cbLight._m0[_2495].y + _451;
        float _2517 = cbLight._m0[_2495].z + _452;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2495].xyz));
        float _4535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2529 = dot(vec3(_379, _380, _381), vec3(_2522, _2523, _2524));
        float _4546 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4557 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
        float _2555 = 1.0 - _2514;
        float _2565 = (0.5 / (((_2297 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2555) + _2514) * _2528))) * _2528;
        float _4568 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2489 = (((((_2548 * _2319) + _671) * cbLight._m0[_2499].x) * _2567) * _2568) + _2431;
        _2491 = (((((_2548 * _2321) + _672) * cbLight._m0[_2499].y) * _2567) * _2568) + _2432;
        _2493 = (((((_2548 * _2322) + _673) * cbLight._m0[_2499].z) * _2567) * _2568) + _2433;
    }
    float _2599;
    float _2601;
    float _2603;
    if (_2206)
    {
        _2599 = _2489;
        _2601 = _2491;
        _2603 = _2493;
    }
    else
    {
        uint _2610 = _2020 + 3u;
        uint _2614 = _2020 + 11u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _552) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _450;
        float _2631 = cbLight._m0[_2610].y + _451;
        float _2632 = cbLight._m0[_2610].z + _452;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_379, _380, _381), vec3(cbLight._m0[_2610].xyz));
        float _4584 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2644 = dot(vec3(_379, _380, _381), vec3(_2637, _2638, _2639));
        float _4595 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4606 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2297 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2670) + _2629) * _2643))) * _2643;
        float _4617 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2599 = (((((_2663 * _2319) + _671) * cbLight._m0[_2614].x) * _2682) * _2683) + _2489;
        _2601 = (((((_2663 * _2321) + _672) * cbLight._m0[_2614].y) * _2682) * _2683) + _2491;
        _2603 = (((((_2663 * _2322) + _673) * cbLight._m0[_2614].z) * _2682) * _2683) + _2493;
    }
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2018.y == 0u)
    {
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _471) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _470) / _2705)));
        float _2726 = (log2(_1796 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3024)
                {
                    frontier_phi_71_pred = _3013;
                    frontier_phi_71_pred_1 = _3012;
                    frontier_phi_71_pred_2 = _3011;
                    frontier_phi_71_pred_3 = _3010;
                    frontier_phi_71_pred_4 = _3009;
                    frontier_phi_71_pred_5 = _3008;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3023;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3014 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _1794;
                        float _3220 = _3179.y - _1795;
                        float _3221 = _3179.z - _1796;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_495, _498, _501), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4643 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _1794;
                        float _3255 = (-0.0) - _1795;
                        float _3256 = (-0.0) - _1796;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3270 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _701;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_495, _498, _501), vec3(_3261, _3262, _3263));
                        float _4659 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3295 = dot(vec3(_495, _498, _501), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4670 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3239 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3229) + _3304;
                        float _4681 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4692 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3302 * _3302) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3083 = (_3250 * _3198.x) + _3156;
                        _3084 = (_3250 * _3198.y) + _3157;
                        _3085 = (_3250 * _3198.z) + _3158;
                        _3080 = (_3330 * _3215.x) + _3153;
                        _3081 = (_3330 * _3215.y) + _3154;
                        _3082 = (_3330 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_71_pred = _3085;
                    frontier_phi_71_pred_1 = _3084;
                    frontier_phi_71_pred_2 = _3083;
                    frontier_phi_71_pred_3 = _3082;
                    frontier_phi_71_pred_4 = _3081;
                    frontier_phi_71_pred_5 = _3080;
                }
                _2858 = frontier_phi_71_pred;
                _2856 = frontier_phi_71_pred_1;
                _2854 = frontier_phi_71_pred_2;
                _2852 = frontier_phi_71_pred_3;
                _2850 = frontier_phi_71_pred_4;
                _2848 = frontier_phi_71_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2848;
                    _3009 = _2850;
                    _3010 = _2852;
                    _3011 = _2854;
                    _3012 = _2856;
                    _3013 = _2858;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2864) & _2736) == 0u)
        {
            _2976 = _2847;
            _2978 = _2849;
            _2980 = _2851;
            _2982 = _2853;
            _2984 = _2855;
            _2986 = _2857;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
            float _3002 = _3001 * _1794;
            float _3003 = _3001 * _1795;
            float _3004 = _3001 * _1796;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3136 = _2847;
                float _3137 = _2849;
                float _3138 = _2851;
                float _3139 = _2853;
                float _3140 = _2855;
                float _3141 = _2857;
                uint _3142 = _2864;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3152)
                    {
                        frontier_phi_82_pred = _3141;
                        frontier_phi_82_pred_1 = _3140;
                        frontier_phi_82_pred_2 = _3139;
                        frontier_phi_82_pred_3 = _3138;
                        frontier_phi_82_pred_4 = _3137;
                        frontier_phi_82_pred_5 = _3136;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        uint _3363 = _3151;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3448;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3374 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3435 = (_3374 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3451 = (_3374 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3374 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_1796, _3483.z, fma(_1795, _3483.y, _3483.x * _1794)) + _3483.w;
                            _3496 = !((fma(_1796, _3464.z, fma(_1795, _3464.y, _3464.x * _1794)) + _3464.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3389.x - _1794;
                                float _3524 = _3389.y - _1795;
                                float _3525 = _3389.z - _1796;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3390 * _3390));
                                float _4703 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3541 = sqrt(_3526) * _3405.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_495, _498, _501))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_1796, _3432.z, fma(_1795, _3432.y, _3432.x * _1794)) + _3432.w) / _3495;
                                float _3555 = (fma(_1796, _3448.z, fma(_1795, _3448.y, _3448.x * _1794)) + _3448.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4719 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _701;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3002;
                                float _3585 = _3531 - _3003;
                                float _3586 = _3532 - _3004;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_495, _498, _501), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4730 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3598 = dot(vec3(_495, _498, _501), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4741 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_495, _498, _501), vec3(_3530, _3531, _3532))) + _3607;
                                float _4752 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4763 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3561 * _3405.z;
                                frontier_phi_88_pred_1 = _3561 * _3405.y;
                                frontier_phi_88_pred_2 = _3561 * _3405.x;
                                frontier_phi_88_pred_3 = _3635 * _3417.z;
                                frontier_phi_88_pred_4 = _3635 * _3417.y;
                                frontier_phi_88_pred_5 = _3635 * _3417.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_88_pred;
                            _3643 = frontier_phi_88_pred_1;
                            _3642 = frontier_phi_88_pred_2;
                            _3641 = frontier_phi_88_pred_3;
                            _3640 = frontier_phi_88_pred_4;
                            _3639 = frontier_phi_88_pred_5;
                            _3347 = _3642 + _3360;
                            _3348 = _3643 + _3361;
                            _3349 = _3644 + _3362;
                            _3344 = _3639 + _3357;
                            _3345 = _3640 + _3358;
                            _3346 = _3641 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3349;
                        frontier_phi_82_pred_1 = _3348;
                        frontier_phi_82_pred_2 = _3347;
                        frontier_phi_82_pred_3 = _3346;
                        frontier_phi_82_pred_4 = _3345;
                        frontier_phi_82_pred_5 = _3344;
                    }
                    _2987 = frontier_phi_82_pred;
                    _2985 = frontier_phi_82_pred_1;
                    _2983 = frontier_phi_82_pred_2;
                    _2981 = frontier_phi_82_pred_3;
                    _2979 = frontier_phi_82_pred_4;
                    _2977 = frontier_phi_82_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2977;
                        _3137 = _2979;
                        _3138 = _2981;
                        _3139 = _2983;
                        _3140 = _2985;
                        _3141 = _2987;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2983;
                frontier_phi_63_64_ladder_1 = _2987;
                frontier_phi_63_64_ladder_2 = _2985;
                frontier_phi_63_64_ladder_3 = _2981;
                frontier_phi_63_64_ladder_4 = _2979;
                frontier_phi_63_64_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_63_64_ladder = _2853;
                frontier_phi_63_64_ladder_1 = _2857;
                frontier_phi_63_64_ladder_2 = _2855;
                frontier_phi_63_64_ladder_3 = _2851;
                frontier_phi_63_64_ladder_4 = _2849;
                frontier_phi_63_64_ladder_5 = _2847;
            }
            _2976 = frontier_phi_63_64_ladder_5;
            _2978 = frontier_phi_63_64_ladder_4;
            _2980 = frontier_phi_63_64_ladder_3;
            _2982 = frontier_phi_63_64_ladder;
            _2984 = frontier_phi_63_64_ladder_2;
            _2986 = frontier_phi_63_64_ladder_1;
        }
        float _2991 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2749 = (_2991 * _2982) + _2261;
        _2751 = (_2991 * _2984) + _2263;
        _2753 = (_2991 * _2986) + _2265;
        _2755 = ((_2976 * _671) * _2991) + _2599;
        _2757 = ((_2978 * _672) * _2991) + _2601;
        _2759 = ((_2980 * _673) * _2991) + _2603;
    }
    else
    {
        _2749 = _2261;
        _2751 = _2263;
        _2753 = _2265;
        _2755 = _2599;
        _2757 = _2601;
        _2759 = _2603;
    }
    uint _2765 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _2771 = cbInstanceData._m0[_2765].x * (_351 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2772 = cbInstanceData._m0[_2765].y * (_351 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2773 = cbInstanceData._m0[_2765].z * (_351 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4779 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4790 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4801 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4812 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2791 = (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2749 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _685))) + ((_2755 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + _2771;
    float _2793 = (_2772 + ((_2757 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2751 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _685)));
    float _2795 = (_2773 + ((_2759 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2753 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _685)));
    float _2796 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2797 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2798 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2804 = cbMtdParam._m0[2u].x * _2771;
    float _2805 = cbMtdParam._m0[2u].y * _2772;
    float _2806 = cbMtdParam._m0[2u].z * _2773;
    float _4838 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2808 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2813 = cbInstanceData._m0[_576 + 6u].w * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)));
    float _2818 = _470 / cbSceneParam._m0[86u].x;
    float _2819 = _471 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2873 = _2872 / _392;
        float _2884 = _2873 * _443;
        float _2885 = _444 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2887 = _2873 * _445;
        float _2889 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2890 = _2889 + cbSceneParam._m0[79u].w;
        float _2891 = cbSceneParam._m0[79u].w - _2885;
        float _2897 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2887 * _2887));
        float _2900 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2897;
        float _2905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2886 - _2889) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2890 > 0.0) ? exp2(_2905 * _2890) : (2.0 - exp2(_2907 * _2890))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2900;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : max(_2890, _2891));
            float _3039 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : min(_2890, _2891));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3093 = ((abs(_2897 / _2886) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2905 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2905 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2907 * _3048) - exp2(_2907 * _3049)) * _3037))) + (_2900 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2838);
        _2909 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2911 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2913 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2915 = _3104 * _2838;
    }
    else
    {
        _2909 = _2835;
        _2911 = _2836;
        _2913 = _2837;
        _2915 = _2838;
    }
    bool _3131;
    vec4 _2925;
    vec4 _2947;
    float _2949;
    float _2953;
    float _2954;
    float _2955;
    float _2958;
    float _2961;
    float _2964;
    float _2965;
    bool _2975;
    for (;;)
    {
        _2925 = cbMatDynParam._m0[0u];
        float _2927 = roundEven(_2925.y);
        bool _2928 = _2927 == 3.0;
        float _2929 = log2(_2915);
        float _2933 = exp2(_2929 * cbSceneParam._m0[78u].x);
        float _2934 = exp2(_2929 * cbSceneParam._m0[78u].y);
        float _2935 = exp2(_2929 * cbSceneParam._m0[78u].z);
        float _2936 = _2933 * _2796;
        float _2937 = _2934 * _2797;
        float _2938 = _2935 * _2798;
        float _2945 = _459 + (-0.5);
        _2947 = cbMtdParam._m0[1u];
        _2949 = _2947.y * _2945;
        float _2952 = (_2927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2953 = _2952 * (_2928 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2909)));
        _2954 = _2952 * (_2928 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2911)));
        _2955 = _2952 * (_2928 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2913)));
        _2958 = ((_2804 * _2808) * _2933) * _2952;
        _2961 = ((_2805 * _2808) * _2934) * _2952;
        _2964 = ((_2806 * _2808) * _2935) * _2952;
        _2965 = _2945 * 0.999000012874603271484375;
        _2975 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2975)
        {
            if ((cbInstanceData._m0[_576 + 7u].x + _2965) < 0.5)
            {
                _3131 = true;
                break;
            }
        }
        uint _3072 = _578 + uint(_2925.w);
        if ((cbInstanceData._m0[_3072].w < 1.0) && ((cbInstanceData._m0[_3072].w + _2965) < 0.5))
        {
            _3131 = true;
            break;
        }
        if ((_2949 + 1.0) < _2947.x)
        {
            _3131 = true;
            break;
        }
        _3131 = false;
        break;
    }
    float _3335;
    if (_3131)
    {
        discard_state = true;
        _3335 = 0.0;
    }
    else
    {
        _3335 = _2813;
    }
    SV_Target.x = _2953;
    SV_Target.y = _2954;
    SV_Target.z = _2955;
    SV_Target.w = _3335;
    SV_Target_1.x = _2958;
    SV_Target_1.y = _2961;
    SV_Target_1.z = _2964;
    SV_Target_1.w = _2813;
    discard_exit();
}


