#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1087;
float _3534;
float _3535;
float _3536;
float _3537;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _238 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _251 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _237) + cbTextureTilingScale._m0[0u].z, (_238 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].y;
    float _258 = _251.y * cbMtdParam._m0[9u].z;
    float _259 = _251.z * cbMtdParam._m0[9u].w;
    vec4 _269 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _271 = _269.x;
    bool _278 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _295 = ((_278 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _271)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _271))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3546 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _297 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _313 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _237) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _238) + cbTextureTilingScale._m0[2u].w));
    float _316 = _313.x + cbMtdParam._m0[11u].y;
    vec4 _328 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _237) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _238) + cbTextureTilingScale._m0[1u].w));
    float _332 = _328.z;
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3568 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))));
    bool _349 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _366 = fma(_344, _211 * NORMAL.x, fma(_338, _218 * TANGENT.x, (_204 * _197) * _336));
    float _369 = fma(_344, _211 * NORMAL.y, fma(_338, _218 * TANGENT.y, (_204 * _198) * _336));
    float _372 = fma(_344, _211 * NORMAL.z, fma(_338, _218 * TANGENT.z, (_204 * _199) * _336));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3579 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _380 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _381 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _382 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _383 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _384 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _385 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _390 = _278 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _441 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _431);
    float _442 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _431);
    float _443 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _431);
    float _447 = inversesqrt(dot(vec3(_441, _442, _443), vec3(_441, _442, _443)));
    float _448 = _441 * _447;
    float _449 = _442 * _447;
    float _450 = _443 * _447;
    vec4 _455 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _457 = _455.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _766 = sqrt(((_441 * _441) + (_442 * _442)) + (_443 * _443));
        float _772 = (cbMatDynParam._m0[5u].x * _766) + cbMatDynParam._m0[5u].y;
        float _3645 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _777 = (cbMatDynParam._m0[5u].z * _766) + cbMatDynParam._m0[5u].w;
        float _3656 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) - _773)) + _773) < ((_457 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _468 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _469 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _471 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _473 = _471.w;
    float _493 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _496 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _499 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    vec4 _501 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _503 = _501.x;
    float _515 = (((_501.y - _381) + (_501.w * _381)) * cbMtdParam._m0[3u].x) + _381;
    float _532 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_503 * _503)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _541 = (((cbMatDynParam._m0[15u].x - _385) * cbMatDynParam._m0[15u].w) * _532) + _385;
    float _550 = ((_532 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _515)) + _515;
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = _574 + 9u;
    uint _577 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _583 = (cbMtdParam._m0[0u].x * _382) * cbInstanceData._m0[_577].x;
    float _584 = (cbMtdParam._m0[0u].y * _383) * cbInstanceData._m0[_577].y;
    float _585 = (cbMtdParam._m0[0u].z * _384) * cbInstanceData._m0[_577].z;
    float _3667 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _589 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _594 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _605 = (((_594.x - _541) + (_594.w * _541)) * cbMtdParam._m0[3u].x) + _541;
    float _618 = (cbMtdParam._m0[3u].x * (((_586 * _473) - _586) + _589.x)) + _586;
    float _619 = (cbMtdParam._m0[3u].x * (((_587 * _473) - _587) + _589.y)) + _587;
    float _620 = (cbMtdParam._m0[3u].x * (((_588 * _473) - _588) + _589.z)) + _588;
    vec4 _621 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _634 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_541 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_541 * (_383 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_541 * (_384 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _621.z;
    float _638 = _634 * cbMatDynParam._m0[13u].w;
    float _648 = (_638 * (cbMatDynParam._m0[13u].x - _618)) + _618;
    float _649 = (_638 * (cbMatDynParam._m0[13u].y - _619)) + _619;
    float _650 = (_638 * (cbMatDynParam._m0[13u].z - _620)) + _620;
    float _658 = ((_634 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _605)) + _605;
    float _659 = 1.0 - _658;
    float _660 = _659 * _648;
    float _661 = _659 * _649;
    float _662 = _659 * _650;
    float _666 = (_648 + (-0.039999999105930328369140625)) * _658;
    float _667 = (_649 + (-0.039999999105930328369140625)) * _658;
    float _668 = (_650 + (-0.039999999105930328369140625)) * _658;
    float _669 = _666 + 0.039999999105930328369140625;
    float _670 = _667 + 0.039999999105930328369140625;
    float _671 = _668 + 0.039999999105930328369140625;
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _468, cbSceneParam._m0[86u].y * _469));
    float _683 = _680.x * TEXCOORD_5.z;
    float _684 = dot(vec3(_377, _378, _379), vec3(_448, _449, _450));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _377) - _448;
    float _692 = (_687 * _378) - _449;
    float _693 = (_687 * _379) - _450;
    float _697 = abs(dot(vec3(_448, _449, _450), vec3(_377, _378, _379)));
    float _3700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_550);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _815 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _819 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _844 = _747 + _377;
        float _845 = _751 + _378;
        float _846 = _755 + _379;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_377, _378, _379), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3748 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_377, _378, _379), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3781 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_377, _378, _379), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3814 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1134 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1138 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1161 = _747 + _377;
        float _1162 = _751 + _378;
        float _1163 = _755 + _379;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_377, _378, _379), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3877 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_377, _378, _379), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3910 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_377, _378, _379), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3943 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = _1087;
        _1409 = _1087;
        _1410 = _1087;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _691 * 0.5;
    float _1468 = _692 * 0.5;
    float _1469 = _693 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _550);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1594 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1597 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1625 = frontier_phi_17_15_ladder;
        }
        float _1853;
        if (_1594 > 0.0)
        {
            _1853 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1853 = frontier_phi_26_22_ladder;
        }
        float _2110;
        if (_1597 > 0.0)
        {
            _2110 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2110 = frontier_phi_38_33_ladder;
        }
        float _2112 = isnan(_1853) ? _1625 : (isnan(_1625) ? _1853 : min(_1625, _1853));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1591) + _1580;
        float _2118 = (_2113 * _1594) + _1584;
        float _2119 = (_2113 * _1597) + _1588;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_16_38_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_16_38_ladder_2;
        _1615 = frontier_phi_16_38_ladder_1;
        _1617 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1533);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _550);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1693 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1696 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1858;
        if (_1690 > 0.0)
        {
            _1858 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1858 = frontier_phi_28_24_ladder;
        }
        float _2137;
        if (_1693 > 0.0)
        {
            _2137 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2137 = frontier_phi_40_35_ladder;
        }
        float _2350;
        if (_1696 > 0.0)
        {
            _2350 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2350 = frontier_phi_49_46_ladder;
        }
        float _2352 = isnan(_2137) ? _1858 : (isnan(_1858) ? _2137 : min(_1858, _2137));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1690) + _1679;
        float _2358 = (_2353 * _1693) + _1683;
        float _2359 = (_2353 * _1696) + _1687;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_25_49_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_25_49_ladder_2;
        _1717 = frontier_phi_25_49_ladder_1;
        _1719 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1622);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1732 = (((_718 * _669) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1715 - _1613)) + _1613);
    float _1734 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1717 - _1615)) + _1615);
    float _1736 = (((_718 * _671) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    vec4 _1753 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_468, _469));
    float _1755 = _1753.w;
    float _1767 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1755);
    float _1768 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1755);
    float _1769 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1755);
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _683 + (-1.0);
    float _1788 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1789 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1792 = _1775 + 5u;
    float _1798 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1802 = _1775 + 4u;
    float _1812 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1816 = _1775 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_377, _378, _379));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_377, _378, _379));
    float _4079 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _4090 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1792].x * _1798) * _1837) + (((cbLight._m0[_1802].x * _1767) * _1812) * _1835);
    float _1845 = ((_1798 * cbLight._m0[_1792].y) * _1837) + (((cbLight._m0[_1802].y * _1768) * _1812) * _1835);
    float _1846 = ((_1798 * cbLight._m0[_1792].z) * _1837) + (((cbLight._m0[_1802].z * _1769) * _1812) * _1835);
    uvec4 _1850 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1852 = _1850.x == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1852)
    {
        _1863 = _1844;
        _1865 = _1845;
        _1867 = _1846;
    }
    else
    {
        uint _1871 = _1775 + 6u;
        float _1887 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1888 = _1887 * _1887;
        float _4101 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1890 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1863 = (((cbLight._m0[_1871].x * 0.3183098733425140380859375) * _1889) * _1890) + _1844;
        _1865 = (((cbLight._m0[_1871].y * 0.3183098733425140380859375) * _1889) * _1890) + _1845;
        _1867 = (((cbLight._m0[_1871].z * 0.3183098733425140380859375) * _1889) * _1890) + _1846;
    }
    bool _1870 = _1850.y == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1870)
    {
        _1908 = _1863;
        _1910 = _1865;
        _1912 = _1867;
    }
    else
    {
        uint _2081 = _1775 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4117 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2100 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1908 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1863;
        _1910 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1865;
        _1912 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1867;
    }
    uint _1915 = _1775 + 8u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _550) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1775].x + _448;
    float _1931 = cbLight._m0[_1775].y + _449;
    float _1932 = cbLight._m0[_1775].z + _450;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1775].xyz));
    float _4133 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1944 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _1945 = dot(vec3(_377, _378, _379), vec3(_1937, _1938, _1939));
    float _4155 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1937, _1938, _1939));
    float _4166 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1929 * _1929;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1965 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
    float _1966 = 0.959999978542327880859375 - _666;
    float _1968 = 0.959999978542327880859375 - _667;
    float _1969 = 0.959999978542327880859375 - _668;
    float _1976 = 1.0 - _1929;
    float _1987 = (0.5 / (((_1944 * ((_1943 * _1976) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _1976) + _1929) * _1943))) * _1943;
    float _4177 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    uint _2003 = _1775 + 9u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _550) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1816].x + _448;
    float _2017 = cbLight._m0[_1816].y + _449;
    float _2018 = cbLight._m0[_1816].z + _450;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1816].xyz));
    float _4188 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2030 = dot(vec3(_377, _378, _379), vec3(_2023, _2024, _2025));
    float _4199 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2023, _2024, _2025));
    float _4210 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2015 * _2015;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
    float _2056 = 1.0 - _2015;
    float _2066 = (0.5 / (((_1944 * ((_2029 * _2056) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2056) + _2015) * _2029))) * _2029;
    float _4221 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    float _2078 = (((((_2049 * _1966) + _669) * cbLight._m0[_2003].x) * _2068) * _1798) + ((((cbLight._m0[_1915].x * _1767) * ((_1965 * _1966) + _669)) * _1989) * _1812);
    float _2079 = (((((_2049 * _1968) + _670) * cbLight._m0[_2003].y) * _2068) * _1798) + ((((cbLight._m0[_1915].y * _1768) * ((_1965 * _1968) + _670)) * _1989) * _1812);
    float _2080 = (((((_2049 * _1969) + _671) * cbLight._m0[_2003].z) * _2068) * _1798) + ((((cbLight._m0[_1915].z * _1769) * ((_1965 * _1969) + _671)) * _1989) * _1812);
    float _2142;
    float _2144;
    float _2146;
    if (_1852)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1775 + 2u;
        uint _2152 = _1775 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _550) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _448;
        float _2169 = cbLight._m0[_2148].y + _449;
        float _2170 = cbLight._m0[_2148].z + _450;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2148].xyz));
        float _4232 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2182 = dot(vec3(_377, _378, _379), vec3(_2175, _2176, _2177));
        float _4243 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4254 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0);
        float _2208 = 1.0 - _2167;
        float _2218 = (0.5 / (((_1944 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2208) + _2167) * _2181))) * _2181;
        float _4265 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2142 = (((((_2201 * _1966) + _669) * cbLight._m0[_2152].x) * _2220) * _2221) + _2078;
        _2144 = (((((_2201 * _1968) + _670) * cbLight._m0[_2152].y) * _2220) * _2221) + _2079;
        _2146 = (((((_2201 * _1969) + _671) * cbLight._m0[_2152].z) * _2220) * _2221) + _2080;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1870)
    {
        _2256 = _2142;
        _2258 = _2144;
        _2260 = _2146;
    }
    else
    {
        uint _2267 = _1775 + 3u;
        uint _2271 = _1775 + 11u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _550) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _448;
        float _2288 = cbLight._m0[_2267].y + _449;
        float _2289 = cbLight._m0[_2267].z + _450;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2267].xyz));
        float _4281 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2301 = dot(vec3(_377, _378, _379), vec3(_2294, _2295, _2296));
        float _4292 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4303 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
        float _2327 = 1.0 - _2286;
        float _2337 = (0.5 / (((_1944 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2327) + _2286) * _2300))) * _2300;
        float _4314 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2256 = (((((_2320 * _1966) + _669) * cbLight._m0[_2271].x) * _2339) * _2340) + _2142;
        _2258 = (((((_2320 * _1968) + _670) * cbLight._m0[_2271].y) * _2339) * _2340) + _2144;
        _2260 = (((((_2320 * _1969) + _671) * cbLight._m0[_2271].z) * _2339) * _2340) + _2146;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1773.y == 0u)
    {
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2415;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2415;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2415;
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.x;
        uint _2442 = uint((float(_2430.y) * floor(float(uint(cbSceneParam._m0[85u].y * _469) / _2431))) + floor(float(uint(cbSceneParam._m0[85u].x * _468) / _2431)));
        float _2452 = (log2(_2418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2453 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        uint _2456 = uint(isnan(14.0) ? _2453 : (isnan(_2453) ? 14.0 : min(_2453, 14.0)));
        uvec4 _2461 = texelFetch(g_lightClusterGridBuffer, int(((_2456 << 2u) + (_2442 << 6u)) >> 2u));
        uint _2462 = _2461.x;
        uint _2463 = _2430.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2463 >> 4u) & 15u)) + 4294967295u) & _2462) == 0u) || ((_2463 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2771)
                {
                    frontier_phi_66_pred = _2755;
                    frontier_phi_66_pred_1 = _2760;
                    frontier_phi_66_pred_2 = _2759;
                    frontier_phi_66_pred_3 = _2758;
                    frontier_phi_66_pred_4 = _2757;
                    frontier_phi_66_pred_5 = _2756;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2770;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2761 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2416;
                        float _2967 = _2926.y - _2417;
                        float _2968 = _2926.z - _2418;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_493, _496, _499), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4340 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2416;
                        float _3002 = (-0.0) - _2417;
                        float _3003 = (-0.0) - _2418;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _699;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_493, _496, _499), vec3(_3008, _3009, _3010));
                        float _4356 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3043 = dot(vec3(_493, _496, _499), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4367 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4378 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4389 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2830 = (_2997 * _2945.x) + _2903;
                        _2831 = (_2997 * _2945.y) + _2904;
                        _2832 = (_2997 * _2945.z) + _2905;
                        _2827 = (_3078 * _2962.x) + _2900;
                        _2828 = (_3078 * _2962.y) + _2901;
                        _2829 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_66_pred = _2827;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                _2595 = frontier_phi_66_pred;
                _2605 = frontier_phi_66_pred_1;
                _2603 = frontier_phi_66_pred_2;
                _2601 = frontier_phi_66_pred_3;
                _2599 = frontier_phi_66_pred_4;
                _2597 = frontier_phi_66_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2595;
                    _2756 = _2597;
                    _2757 = _2599;
                    _2758 = _2601;
                    _2759 = _2603;
                    _2760 = _2605;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2611) & _2462) == 0u)
        {
            _2723 = _2594;
            _2725 = _2596;
            _2727 = _2598;
            _2729 = _2600;
            _2731 = _2602;
            _2733 = _2604;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
            float _2749 = _2748 * _2416;
            float _2750 = _2748 * _2417;
            float _2751 = _2748 * _2418;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2883 = _2594;
                float _2884 = _2596;
                float _2885 = _2598;
                float _2886 = _2600;
                float _2887 = _2602;
                float _2888 = _2604;
                uint _2889 = _2611;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2899)
                    {
                        frontier_phi_77_pred = _2888;
                        frontier_phi_77_pred_1 = _2887;
                        frontier_phi_77_pred_2 = _2886;
                        frontier_phi_77_pred_3 = _2885;
                        frontier_phi_77_pred_4 = _2884;
                        frontier_phi_77_pred_5 = _2883;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        uint _3111 = _2898;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3196;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3122 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3122 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3122 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3122 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2418, _3231.z, fma(_2417, _3231.y, _3231.x * _2416)) + _3231.w;
                            _3244 = !((fma(_2418, _3212.z, fma(_2417, _3212.y, _3212.x * _2416)) + _3212.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3137.x - _2416;
                                float _3272 = _3137.y - _2417;
                                float _3273 = _3137.z - _2418;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3138 * _3138));
                                float _4400 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3289 = sqrt(_3274) * _3153.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_493, _496, _499))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2418, _3180.z, fma(_2417, _3180.y, _3180.x * _2416)) + _3180.w) / _3243;
                                float _3303 = (fma(_2418, _3196.z, fma(_2417, _3196.y, _3196.x * _2416)) + _3196.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4416 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _699;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2749;
                                float _3333 = _3279 - _2750;
                                float _3334 = _3280 - _2751;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_493, _496, _499), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4427 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3346 = dot(vec3(_493, _496, _499), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4438 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_493, _496, _499), vec3(_3278, _3279, _3280))) + _3355;
                                float _4449 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4460 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3309 * _3153.y;
                                frontier_phi_83_pred_1 = _3309 * _3153.x;
                                frontier_phi_83_pred_2 = _3383 * _3165.z;
                                frontier_phi_83_pred_3 = _3383 * _3165.y;
                                frontier_phi_83_pred_4 = _3383 * _3165.x;
                                frontier_phi_83_pred_5 = _3309 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_83_pred;
                            _3390 = frontier_phi_83_pred_1;
                            _3389 = frontier_phi_83_pred_2;
                            _3388 = frontier_phi_83_pred_3;
                            _3387 = frontier_phi_83_pred_4;
                            _3392 = frontier_phi_83_pred_5;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            _3097 = _3392 + _3110;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            _3094 = _3389 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3097;
                        frontier_phi_77_pred_1 = _3096;
                        frontier_phi_77_pred_2 = _3095;
                        frontier_phi_77_pred_3 = _3094;
                        frontier_phi_77_pred_4 = _3093;
                        frontier_phi_77_pred_5 = _3092;
                    }
                    _2734 = frontier_phi_77_pred;
                    _2732 = frontier_phi_77_pred_1;
                    _2730 = frontier_phi_77_pred_2;
                    _2728 = frontier_phi_77_pred_3;
                    _2726 = frontier_phi_77_pred_4;
                    _2724 = frontier_phi_77_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2724;
                        _2884 = _2726;
                        _2885 = _2728;
                        _2886 = _2730;
                        _2887 = _2732;
                        _2888 = _2734;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2728;
                frontier_phi_58_59_ladder_1 = _2734;
                frontier_phi_58_59_ladder_2 = _2732;
                frontier_phi_58_59_ladder_3 = _2730;
                frontier_phi_58_59_ladder_4 = _2726;
                frontier_phi_58_59_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            _2723 = frontier_phi_58_59_ladder_5;
            _2725 = frontier_phi_58_59_ladder_4;
            _2727 = frontier_phi_58_59_ladder;
            _2729 = frontier_phi_58_59_ladder_3;
            _2731 = frontier_phi_58_59_ladder_2;
            _2733 = frontier_phi_58_59_ladder_1;
        }
        float _2738 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2475 = (_2738 * _2729) + _1908;
        _2477 = (_2738 * _2731) + _1910;
        _2479 = (_2738 * _2733) + _1912;
        _2481 = ((_2723 * _669) * _2738) + _2256;
        _2483 = ((_2725 * _670) * _2738) + _2258;
        _2485 = ((_2727 * _671) * _2738) + _2260;
    }
    else
    {
        _2475 = _1908;
        _2477 = _1910;
        _2479 = _1912;
        _2481 = _2256;
        _2483 = _2258;
        _2485 = _2260;
    }
    uint _2491 = _576 + uint(cbMatDynParam._m0[0u].w);
    float _2497 = cbInstanceData._m0[_2491].x * (_349 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2498 = cbInstanceData._m0[_2491].y * (_349 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2499 = cbInstanceData._m0[_2491].z * (_349 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4476 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4487 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4498 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4509 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2517 = (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2475 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _683))) + ((_2481 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + _2497;
    float _2519 = (_2498 + ((_2483 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2477 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _683)));
    float _2521 = (_2499 + ((_2485 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2479 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _683)));
    float _2522 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2523 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2524 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2530 = cbMtdParam._m0[2u].x * _2497;
    float _2531 = cbMtdParam._m0[2u].y * _2498;
    float _2532 = cbMtdParam._m0[2u].z * _2499;
    float _4535 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2534 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2539 = cbInstanceData._m0[_574 + 6u].w * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)));
    float _2544 = _468 / cbSceneParam._m0[86u].x;
    float _2545 = _469 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2620 = _2619 / _390;
        float _2631 = _2620 * _441;
        float _2632 = _442 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2634 = _2620 * _443;
        float _2636 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2637 = _2636 + cbSceneParam._m0[79u].w;
        float _2638 = cbSceneParam._m0[79u].w - _2632;
        float _2644 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2634 * _2634));
        float _2647 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2644;
        float _2652 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2654 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2633 - _2636) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2637 > 0.0) ? exp2(_2652 * _2637) : (2.0 - exp2(_2654 * _2637))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2647;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : max(_2637, _2638));
            float _2786 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : min(_2637, _2638));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2840 = ((abs(_2644 / _2633) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2652 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2652 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2654 * _2795) - exp2(_2654 * _2796)) * _2784))) + (_2647 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2564);
        _2656 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2658 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2660 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2662 = _2851 * _2564;
    }
    else
    {
        _2656 = _2561;
        _2658 = _2562;
        _2660 = _2563;
        _2662 = _2564;
    }
    bool _2878;
    vec4 _2672;
    vec4 _2694;
    float _2696;
    float _2700;
    float _2701;
    float _2702;
    float _2705;
    float _2708;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        _2672 = cbMatDynParam._m0[0u];
        float _2674 = roundEven(_2672.y);
        bool _2675 = _2674 == 3.0;
        float _2676 = log2(_2662);
        float _2680 = exp2(_2676 * cbSceneParam._m0[78u].x);
        float _2681 = exp2(_2676 * cbSceneParam._m0[78u].y);
        float _2682 = exp2(_2676 * cbSceneParam._m0[78u].z);
        float _2683 = _2680 * _2522;
        float _2684 = _2681 * _2523;
        float _2685 = _2682 * _2524;
        float _2692 = _457 + (-0.5);
        _2694 = cbMtdParam._m0[1u];
        _2696 = _2694.y * _2692;
        float _2699 = (_2674 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2700 = _2699 * (_2675 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2656)));
        _2701 = _2699 * (_2675 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2658)));
        _2702 = _2699 * (_2675 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2660)));
        _2705 = ((_2530 * _2534) * _2680) * _2699;
        _2708 = ((_2531 * _2534) * _2681) * _2699;
        _2711 = ((_2532 * _2534) * _2682) * _2699;
        _2712 = _2692 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_574 + 7u].x + _2712) < 0.5)
            {
                _2878 = true;
                break;
            }
        }
        uint _2819 = _576 + uint(_2672.w);
        if ((cbInstanceData._m0[_2819].w < 1.0) && ((cbInstanceData._m0[_2819].w + _2712) < 0.5))
        {
            _2878 = true;
            break;
        }
        if ((_2696 + 1.0) < _2694.x)
        {
            _2878 = true;
            break;
        }
        _2878 = false;
        break;
    }
    float _3083;
    if (_2878)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = _2539;
    }
    SV_Target.x = _2700;
    SV_Target.y = _2701;
    SV_Target.z = _2702;
    SV_Target.w = _3083;
    SV_Target_1.x = _2705;
    SV_Target_1.y = _2708;
    SV_Target_1.z = _2711;
    SV_Target_1.w = _2539;
    discard_exit();
}


