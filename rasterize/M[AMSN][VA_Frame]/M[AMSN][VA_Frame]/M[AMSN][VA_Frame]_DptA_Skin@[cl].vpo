#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_4;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_3;
layout(location = 8) in vec4 TEXCOORD_4;
layout(location = 9) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec3 TEXCOORD_5;
layout(location = 6) out vec2 TEXCOORD_8;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_8.x = 0.0;
    TEXCOORD_8.y = 0.0;
    float _202 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    precise float _215 = float(int(uvec2(textureSize(M_AMSN_VA_Frame_snp_0_Texture2D_4, int(0u))).y)) + (-1.0);
    float _611 = isnan(0.0) ? cbMtdParam._m0[3u].z : (isnan(cbMtdParam._m0[3u].z) ? 0.0 : max(cbMtdParam._m0[3u].z, 0.0));
    precise float _223 = (isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0))) * _215;
    precise float _224 = TEXCOORD_1.x * 255.0;
    precise float _226 = TEXCOORD_1.y * 255.0;
    precise float _227 = _226 * 256.0;
    precise float _229 = _224 + _227;
    precise float _230 = _229 + 0.5;
    float _232 = floor(_223);
    uint _233 = uint(int(_230));
    uint _234 = uint(int(_232));
    vec4 _235 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_233, _234)), int(0u));
    float _237 = _235.x;
    float _238 = _235.y;
    float _239 = _235.z;
    precise float _247 = _232 + 1.0;
    uint _249 = uint(int(isnan(_215) ? _247 : (isnan(_247) ? _215 : min(_247, _215))));
    vec4 _250 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_3, ivec2(uvec2(_233, _249)), int(0u));
    float _255 = fract(_223);
    vec4 _268 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_233, _234)), int(0u));
    float _270 = _268.x;
    float _271 = _268.y;
    float _272 = _268.z;
    vec4 _273 = texelFetch(M_AMSN_VA_Frame_snp_0_Texture2D_4, ivec2(uvec2(_233, _249)), int(0u));
    precise float _278 = _273.x - _270;
    precise float _279 = _273.y - _271;
    precise float _280 = _273.z - _272;
    precise float _281 = _255 * _278;
    precise float _282 = _255 * _279;
    precise float _283 = _255 * _280;
    precise float _284 = _270 + _281;
    precise float _285 = _271 + _282;
    precise float _286 = _272 + _283;
    uint _291 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _293 = texelFetch(g_InstanceIndexBuffer, int(_291));
    uint _294 = _293.x;
    precise float _295 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _298 = isnan(_295) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _295 : max(0.001000000047497451305389404296875, _295));
    precise float _300 = BLENDWEIGHT.x / _298;
    precise float _301 = BLENDWEIGHT.y / _298;
    precise float _302 = BLENDWEIGHT.z / _298;
    precise float _303 = BLENDWEIGHT.w / _298;
    uvec4 _310 = floatBitsToUint(cbInstanceData._m0[(_294 * 13u) + 4u]);
    uint _311 = _310.x;
    uint _313 = (_311 + uint(float(BLENDINDICES.x))) * 3u;
    uint _320 = _313 + 1u;
    uint _327 = _313 + 2u;
    precise float _334 = _300 * cbObjMatrix._m0[_313].x;
    precise float _335 = _300 * cbObjMatrix._m0[_320].x;
    precise float _336 = _300 * cbObjMatrix._m0[_327].x;
    precise float _337 = _300 * cbObjMatrix._m0[_313].y;
    precise float _338 = _300 * cbObjMatrix._m0[_320].y;
    precise float _339 = _300 * cbObjMatrix._m0[_327].y;
    precise float _340 = _300 * cbObjMatrix._m0[_313].z;
    precise float _341 = _300 * cbObjMatrix._m0[_320].z;
    precise float _342 = _300 * cbObjMatrix._m0[_327].z;
    precise float _343 = _300 * cbObjMatrix._m0[_313].w;
    precise float _344 = _300 * cbObjMatrix._m0[_320].w;
    precise float _345 = _300 * cbObjMatrix._m0[_327].w;
    uint _348 = (_311 + uint(float(BLENDINDICES.y))) * 3u;
    uint _355 = _348 + 1u;
    uint _362 = _348 + 2u;
    precise float _369 = _301 * cbObjMatrix._m0[_348].x;
    precise float _370 = _301 * cbObjMatrix._m0[_355].x;
    precise float _371 = _301 * cbObjMatrix._m0[_362].x;
    precise float _372 = _301 * cbObjMatrix._m0[_348].y;
    precise float _373 = _301 * cbObjMatrix._m0[_355].y;
    precise float _374 = _301 * cbObjMatrix._m0[_362].y;
    precise float _375 = _301 * cbObjMatrix._m0[_348].z;
    precise float _376 = _301 * cbObjMatrix._m0[_355].z;
    precise float _377 = _301 * cbObjMatrix._m0[_362].z;
    precise float _378 = _301 * cbObjMatrix._m0[_348].w;
    precise float _379 = _301 * cbObjMatrix._m0[_355].w;
    precise float _380 = _301 * cbObjMatrix._m0[_362].w;
    precise float _381 = _334 + _369;
    precise float _382 = _335 + _370;
    precise float _383 = _336 + _371;
    precise float _384 = _337 + _372;
    precise float _385 = _338 + _373;
    precise float _386 = _339 + _374;
    precise float _387 = _340 + _375;
    precise float _388 = _341 + _376;
    precise float _389 = _342 + _377;
    precise float _390 = _343 + _378;
    precise float _391 = _344 + _379;
    precise float _392 = _345 + _380;
    uint _395 = (_311 + uint(float(BLENDINDICES.z))) * 3u;
    uint _402 = _395 + 1u;
    uint _409 = _395 + 2u;
    precise float _416 = _302 * cbObjMatrix._m0[_395].x;
    precise float _417 = _302 * cbObjMatrix._m0[_402].x;
    precise float _418 = _302 * cbObjMatrix._m0[_409].x;
    precise float _419 = _302 * cbObjMatrix._m0[_395].y;
    precise float _420 = _302 * cbObjMatrix._m0[_402].y;
    precise float _421 = _302 * cbObjMatrix._m0[_409].y;
    precise float _422 = _302 * cbObjMatrix._m0[_395].z;
    precise float _423 = _302 * cbObjMatrix._m0[_402].z;
    precise float _424 = _302 * cbObjMatrix._m0[_409].z;
    precise float _425 = _302 * cbObjMatrix._m0[_395].w;
    precise float _426 = _302 * cbObjMatrix._m0[_402].w;
    precise float _427 = _302 * cbObjMatrix._m0[_409].w;
    precise float _428 = _381 + _416;
    precise float _429 = _382 + _417;
    precise float _430 = _383 + _418;
    precise float _431 = _384 + _419;
    precise float _432 = _385 + _420;
    precise float _433 = _386 + _421;
    precise float _434 = _387 + _422;
    precise float _435 = _388 + _423;
    precise float _436 = _389 + _424;
    precise float _437 = _390 + _425;
    precise float _438 = _391 + _426;
    precise float _439 = _392 + _427;
    uint _442 = (_311 + uint(float(BLENDINDICES.w))) * 3u;
    uint _449 = _442 + 1u;
    uint _456 = _442 + 2u;
    precise float _463 = _303 * cbObjMatrix._m0[_442].x;
    precise float _464 = _303 * cbObjMatrix._m0[_449].x;
    precise float _465 = _303 * cbObjMatrix._m0[_456].x;
    precise float _466 = _303 * cbObjMatrix._m0[_442].y;
    precise float _467 = _303 * cbObjMatrix._m0[_449].y;
    precise float _468 = _303 * cbObjMatrix._m0[_456].y;
    precise float _469 = _303 * cbObjMatrix._m0[_442].z;
    precise float _470 = _303 * cbObjMatrix._m0[_449].z;
    precise float _471 = _303 * cbObjMatrix._m0[_456].z;
    precise float _472 = _303 * cbObjMatrix._m0[_442].w;
    precise float _473 = _303 * cbObjMatrix._m0[_449].w;
    precise float _474 = _303 * cbObjMatrix._m0[_456].w;
    precise float _475 = _428 + _463;
    precise float _476 = _429 + _464;
    precise float _477 = _430 + _465;
    precise float _478 = _431 + _466;
    precise float _479 = _432 + _467;
    precise float _480 = _433 + _468;
    precise float _481 = _434 + _469;
    precise float _482 = _435 + _470;
    precise float _483 = _436 + _471;
    precise float _484 = _437 + _472;
    precise float _485 = _438 + _473;
    precise float _486 = _439 + _474;
    precise float _487 = POSITION.x * _475;
    precise float _488 = POSITION.y * _478;
    precise float _489 = _488 + _487;
    precise float _490 = POSITION.z * _481;
    precise float _491 = _490 + _489;
    precise float _492 = 1.0 * _484;
    precise float _493 = _492 + _491;
    precise float _494 = POSITION.x * _476;
    precise float _495 = POSITION.y * _479;
    precise float _496 = _495 + _494;
    precise float _497 = POSITION.z * _482;
    precise float _498 = _497 + _496;
    precise float _499 = 1.0 * _485;
    precise float _500 = _499 + _498;
    precise float _501 = POSITION.x * _477;
    precise float _502 = POSITION.y * _480;
    precise float _503 = _502 + _501;
    precise float _504 = POSITION.z * _483;
    precise float _505 = _504 + _503;
    precise float _506 = 1.0 * _486;
    precise float _507 = _506 + _505;
    precise float _508 = _284 + _493;
    precise float _509 = _285 + _500;
    precise float _510 = _286 + _507;
    precise float _526 = _508 - cbSceneParam._m0[3u].x;
    precise float _527 = _509 - cbSceneParam._m0[3u].y;
    precise float _528 = _510 - cbSceneParam._m0[3u].z;
    precise float _556 = _526 * cbSceneParam._m0[24u].x;
    precise float _557 = _527 * cbSceneParam._m0[24u].y;
    precise float _558 = _557 + _556;
    precise float _559 = _528 * cbSceneParam._m0[24u].z;
    precise float _560 = _559 + _558;
    precise float _561 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _562 = _561 + _560;
    precise float _563 = _526 * cbSceneParam._m0[25u].x;
    precise float _564 = _527 * cbSceneParam._m0[25u].y;
    precise float _565 = _564 + _563;
    precise float _566 = _528 * cbSceneParam._m0[25u].z;
    precise float _567 = _566 + _565;
    precise float _568 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _569 = _568 + _567;
    precise float _570 = _526 * cbSceneParam._m0[26u].x;
    precise float _571 = _527 * cbSceneParam._m0[26u].y;
    precise float _572 = _571 + _570;
    precise float _573 = _528 * cbSceneParam._m0[26u].z;
    precise float _574 = _573 + _572;
    precise float _575 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _576 = _575 + _574;
    precise float _577 = _526 * cbSceneParam._m0[27u].x;
    precise float _578 = _527 * cbSceneParam._m0[27u].y;
    precise float _579 = _578 + _577;
    precise float _580 = _528 * cbSceneParam._m0[27u].z;
    precise float _581 = _580 + _579;
    precise float _582 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _583 = _582 + _581;
    gl_Position.x = _562;
    gl_Position.y = _569;
    gl_Position.z = _576;
    gl_Position.w = _583;
    POSITION_1.x = _562;
    POSITION_1.y = _569;
    POSITION_1.z = _576;
    POSITION_1.w = _583;
    NORMAL_1.x = (((_250.x - _237) * 2.0) * _255) + ((_237 * 2.0) + (-1.0));
    NORMAL_1.y = (((_250.y - _238) * 2.0) * _255) + ((_238 * 2.0) + (-1.0));
    NORMAL_1.z = (_255 * ((_250.z - _239) * 2.0)) + ((_239 * 2.0) + (-1.0));
    NORMAL_1.w = float(_294);
    TANGENT_1.x = fma(_205, _481, fma(_204, _478, _475 * _202));
    TANGENT_1.y = fma(_205, _482, fma(_204, _479, _476 * _202));
    TANGENT_1.z = fma(_205, _483, fma(_204, _480, _477 * _202));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_5.x = TEXCOORD_1.x;
    TEXCOORD_5.y = TEXCOORD_1.y;
    TEXCOORD_5.z = COLOR_1.x;
    TEXCOORD_8.x = _576;
    TEXCOORD_8.y = _583;
}


